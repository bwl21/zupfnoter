(function(undefined) {
  // @note
  //   A few conventions for the documentation of this file:
  //   1. Always use "//" (in contrast with "/**/")
  //   2. The syntax used is Yardoc (yardoc.org), which is intended for Ruby (se below)
  //   3. `@param` and `@return` types should be preceded by `JS.` when referring to
  //      JavaScript constructors (e.g. `JS.Function`) otherwise Ruby is assumed.
  //   4. `nil` and `null` being unambiguous refer to the respective
  //      objects/values in Ruby and JavaScript
  //   5. This is still WIP :) so please give feedback and suggestions on how
  //      to improve or for alternative solutions
  //
  //   The way the code is digested before going through Yardoc is a secret kept
  //   in the docs repo (https://github.com/opal/docs/tree/master).

  var global_object = this, console;

  // Detect the global object
  if (typeof(global) !== 'undefined') { global_object = global; }
  if (typeof(window) !== 'undefined') { global_object = window; }

  // Setup a dummy console object if missing
  if (typeof(global_object.console) === 'object') {
    console = global_object.console;
  } else if (global_object.console == null) {
    console = global_object.console = {};
  } else {
    console = {};
  }

  if (!('log' in console)) { console.log = function () {}; }
  if (!('warn' in console)) { console.warn = console.log; }

  if (typeof(this.Opal) !== 'undefined') {
    console.warn('Opal already loaded. Loading twice can cause troubles, please fix your setup.');
    return this.Opal;
  }

  var nil;

  // The actual class for BasicObject
  var BasicObject;

  // The actual Object class.
  // The leading underscore is to avoid confusion with window.Object()
  var _Object;

  // The actual Module class
  var Module;

  // The actual Class class
  var Class;

  // The Opal object that is exposed globally
  var Opal = this.Opal = {};

  // This is a useful reference to global object inside ruby files
  Opal.global = global_object;
  global_object.Opal = Opal;

  // Configure runtime behavior with regards to require and unsupported fearures
  Opal.config = {
    missing_require_severity: 'error',        // error, warning, ignore
    unsupported_features_severity: 'warning', // error, warning, ignore
    enable_stack_trace: true                  // true, false
  };

  // Minify common function calls
  var $hasOwn       = Object.hasOwnProperty;
  var $bind         = Function.prototype.bind;
  var $setPrototype = Object.setPrototypeOf;
  var $slice        = Array.prototype.slice;
  var $splice       = Array.prototype.splice;

  // Nil object id is always 4
  var nil_id = 4;

  // Generates even sequential numbers greater than 4
  // (nil_id) to serve as unique ids for ruby objects
  var unique_id = nil_id;

  // Return next unique id
  Opal.uid = function() {
    unique_id += 2;
    return unique_id;
  };

  // Retrieve or assign the id of an object
  Opal.id = function(obj) {
    if (obj.$$is_number) return (obj * 2)+1;
    if (obj.$$id != null) {
      return obj.$$id;
    }
    $defineProperty(obj, '$$id', Opal.uid());
    return obj.$$id;
  };

  // Globals table
  Opal.gvars = {};

  // Exit function, this should be replaced by platform specific implementation
  // (See nodejs and chrome for examples)
  Opal.exit = function(status) { if (Opal.gvars.DEBUG) console.log('Exited with status '+status); };

  // keeps track of exceptions for $!
  Opal.exceptions = [];

  // @private
  // Pops an exception from the stack and updates `$!`.
  Opal.pop_exception = function() {
    Opal.gvars["!"] = Opal.exceptions.pop() || nil;
  };

  // Inspect any kind of object, including non Ruby ones
  Opal.inspect = function(obj) {
    if (obj === undefined) {
      return "undefined";
    }
    else if (obj === null) {
      return "null";
    }
    else if (!obj.$$class) {
      return obj.toString();
    }
    else {
      return obj.$inspect();
    }
  };

  function $defineProperty(object, name, initialValue) {
    if (typeof(object) === "string") {
      // Special case for:
      //   s = "string"
      //   def s.m; end
      // String class is the only class that:
      // + compiles to JS primitive
      // + allows method definition directly on instances
      // numbers, true, false and nil do not support it.
      object[name] = initialValue;
    } else {
      Object.defineProperty(object, name, {
        value: initialValue,
        enumerable: false,
        configurable: true,
        writable: true
      });
    }
  }

  Opal.defineProperty = $defineProperty;

  Opal.slice = $slice;


  // Truth
  // -----

  Opal.truthy = function(val) {
    return (val !== nil && val != null && (!val.$$is_boolean || val == true));
  };

  Opal.falsy = function(val) {
    return (val === nil || val == null || (val.$$is_boolean && val == false))
  };


  // Constants
  // ---------
  //
  // For future reference:
  // - The Rails autoloading guide (http://guides.rubyonrails.org/v5.0/autoloading_and_reloading_constants.html)
  // - @ConradIrwin's 2012 post on “Everything you ever wanted to know about constant lookup in Ruby” (http://cirw.in/blog/constant-lookup.html)
  //
  // Legend of MRI concepts/names:
  // - constant reference (cref): the module/class that acts as a namespace
  // - nesting: the namespaces wrapping the current scope, e.g. nesting inside
  //            `module A; module B::C; end; end` is `[B::C, A]`

  // Get the constant in the scope of the current cref
  function const_get_name(cref, name) {
    if (cref) return cref.$$const[name];
  }

  // Walk up the nesting array looking for the constant
  function const_lookup_nesting(nesting, name) {
    var i, ii, result, constant;

    if (nesting.length === 0) return;

    // If the nesting is not empty the constant is looked up in its elements
    // and in order. The ancestors of those elements are ignored.
    for (i = 0, ii = nesting.length; i < ii; i++) {
      constant = nesting[i].$$const[name];
      if (constant != null) return constant;
    }
  }

  // Walk up the ancestors chain looking for the constant
  function const_lookup_ancestors(cref, name) {
    var i, ii, result, ancestors;

    if (cref == null) return;

    ancestors = Opal.ancestors(cref);

    for (i = 0, ii = ancestors.length; i < ii; i++) {
      if (ancestors[i].$$const && $hasOwn.call(ancestors[i].$$const, name)) {
        return ancestors[i].$$const[name];
      }
    }
  }

  // Walk up Object's ancestors chain looking for the constant,
  // but only if cref is missing or a module.
  function const_lookup_Object(cref, name) {
    if (cref == null || cref.$$is_module) {
      return const_lookup_ancestors(_Object, name);
    }
  }

  // Call const_missing if nothing else worked
  function const_missing(cref, name, skip_missing) {
    if (!skip_missing) {
      return (cref || _Object).$const_missing(name);
    }
  }

  // Look for the constant just in the current cref or call `#const_missing`
  Opal.const_get_local = function(cref, name, skip_missing) {
    var result;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    result = const_get_name(cref, name);              if (result != null) return result;
    result = const_missing(cref, name, skip_missing); if (result != null) return result;
  };

  // Look for the constant relative to a cref or call `#const_missing` (when the
  // constant is prefixed by `::`).
  Opal.const_get_qualified = function(cref, name, skip_missing) {
    var result, cache, cached, current_version = Opal.const_cache_version;

    if (cref == null) return;

    if (cref === '::') cref = _Object;

    if (!cref.$$is_module && !cref.$$is_class) {
      throw new Opal.TypeError(cref.toString() + " is not a class/module");
    }

    if ((cache = cref.$$const_cache) == null) {
      $defineProperty(cref, '$$const_cache', Object.create(null));
      cache = cref.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null);
      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Initialize the top level constant cache generation counter
  Opal.const_cache_version = 1;

  // Look for the constant in the open using the current nesting and the nearest
  // cref ancestors or call `#const_missing` (when the constant has no :: prefix).
  Opal.const_get_relative = function(nesting, name, skip_missing) {
    var cref = nesting[0], result, current_version = Opal.const_cache_version, cache, cached;

    if ((cache = nesting.$$const_cache) == null) {
      $defineProperty(nesting, '$$const_cache', Object.create(null));
      cache = nesting.$$const_cache;
    }
    cached = cache[name];

    if (cached == null || cached[0] !== current_version) {
      ((result = const_get_name(cref, name))              != null) ||
      ((result = const_lookup_nesting(nesting, name))     != null) ||
      ((result = const_lookup_ancestors(cref, name))      != null) ||
      ((result = const_lookup_Object(cref, name))         != null);

      cache[name] = [current_version, result];
    } else {
      result = cached[1];
    }

    return result != null ? result : const_missing(cref, name, skip_missing);
  };

  // Register the constant on a cref and opportunistically set the name of
  // unnamed classes/modules.
  Opal.const_set = function(cref, name, value) {
    if (cref == null || cref === '::') cref = _Object;

    if (value.$$is_a_module) {
      if (value.$$name == null || value.$$name === nil) value.$$name = name;
      if (value.$$base_module == null) value.$$base_module = cref;
    }

    cref.$$const = (cref.$$const || Object.create(null));
    cref.$$const[name] = value;

    // Add a short helper to navigate constants manually.
    // @example
    //   Opal.$$.Regexp.$$.IGNORECASE
    cref.$$ = cref.$$const;

    Opal.const_cache_version++;

    // Expose top level constants onto the Opal object
    if (cref === _Object) Opal[name] = value;

    // Name new class directly onto current scope (Opal.Foo.Baz = klass)
    $defineProperty(cref, name, value);

    return value;
  };

  // Get all the constants reachable from a given cref, by default will include
  // inherited constants.
  Opal.constants = function(cref, inherit) {
    if (inherit == null) inherit = true;

    var module, modules = [cref], module_constants, i, ii, constants = {}, constant;

    if (inherit) modules = modules.concat(Opal.ancestors(cref));
    if (inherit && cref.$$is_module) modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));

    for (i = 0, ii = modules.length; i < ii; i++) {
      module = modules[i];

      // Don not show Objects constants unless we're querying Object itself
      if (cref !== _Object && module == _Object) break;

      for (constant in module.$$const) {
        constants[constant] = true;
      }
    }

    return Object.keys(constants);
  };

  // Remove a constant from a cref.
  Opal.const_remove = function(cref, name) {
    Opal.const_cache_version++;

    if (cref.$$const[name] != null) {
      var old = cref.$$const[name];
      delete cref.$$const[name];
      return old;
    }

    if (cref.$$autoload != null && cref.$$autoload[name] != null) {
      delete cref.$$autoload[name];
      return nil;
    }

    throw Opal.NameError.$new("constant "+cref+"::"+cref.$name()+" not defined");
  };


  // Modules & Classes
  // -----------------

  // A `class Foo; end` expression in ruby is compiled to call this runtime
  // method which either returns an existing class of the given name, or creates
  // a new class in the given `base` scope.
  //
  // If a constant with the given name exists, then we check to make sure that
  // it is a class and also that the superclasses match. If either of these
  // fail, then we raise a `TypeError`. Note, `superclass` may be null if one
  // was not specified in the ruby code.
  //
  // We pass a constructor to this method of the form `function ClassName() {}`
  // simply so that classes show up with nicely formatted names inside debuggers
  // in the web browser (or node/sprockets).
  //
  // The `scope` is the current `self` value where the class is being created
  // from. We use this to get the scope for where the class should be created.
  // If `scope` is an object (not a class/module), we simple get its class and
  // use that as the scope instead.
  //
  // @param scope        [Object] where the class is being created
  // @param superclass  [Class,null] superclass of the new class (may be null)
  // @param id          [String] the name of the class to be created
  // @param constructor [JS.Function] function to use as constructor
  //
  // @return new [Class]  or existing ruby class
  //
  Opal.allocate_class = function(name, superclass) {
    var klass, constructor;

    if (superclass != null && superclass.$$bridge) {
      // Inheritance from bridged classes requires
      // calling original JS constructors
      constructor = function() {
        var args = $slice.call(arguments),
            self = new ($bind.apply(superclass.$$constructor, [null].concat(args)))();

        // and replacing a __proto__ manually
        $setPrototype(self, klass.$$prototype);
        return self;
      }
    } else {
      constructor = function(){};
    }

    if (name) {
      $defineProperty(constructor, 'displayName', '::'+name);
    }

    klass = constructor;

    $defineProperty(klass, '$$name', name);
    $defineProperty(klass, '$$constructor', constructor);
    $defineProperty(klass, '$$prototype', constructor.prototype);
    $defineProperty(klass, '$$const', {});
    $defineProperty(klass, '$$is_class', true);
    $defineProperty(klass, '$$is_a_module', true);
    $defineProperty(klass, '$$super', superclass);
    $defineProperty(klass, '$$cvars', {});
    $defineProperty(klass, '$$own_included_modules', []);
    $defineProperty(klass, '$$own_prepended_modules', []);
    $defineProperty(klass, '$$ancestors', []);
    $defineProperty(klass, '$$ancestors_cache_version', null);

    $defineProperty(klass.$$prototype, '$$class', klass);

    // By default if there are no singleton class methods
    // __proto__ is Class.prototype
    // Later singleton methods generate a singleton_class
    // and inject it into ancestors chain
    if (Opal.Class) {
      $setPrototype(klass, Opal.Class.prototype);
    }

    if (superclass != null) {
      $setPrototype(klass.$$prototype, superclass.$$prototype);

      if (superclass.$$meta) {
        // If superclass has metaclass then we have explicitely inherit it.
        Opal.build_class_singleton_class(klass);
      }
    }

    return klass;
  };


  function find_existing_class(scope, name) {
    // Try to find the class in the current scope
    var klass = const_get_name(scope, name);

    // If the class exists in the scope, then we must use that
    if (klass) {
      // Make sure the existing constant is a class, or raise error
      if (!klass.$$is_class) {
        throw Opal.TypeError.$new(name + " is not a class");
      }

      return klass;
    }
  }

  function ensureSuperclassMatch(klass, superclass) {
    if (klass.$$super !== superclass) {
      throw Opal.TypeError.$new("superclass mismatch for class " + klass.$$name);
    }
  }

  Opal.klass = function(scope, superclass, name) {
    var bridged;

    if (scope == null) {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    // If the superclass is not an Opal-generated class then we're bridging a native JS class
    if (superclass != null && !superclass.hasOwnProperty('$$is_class')) {
      bridged = superclass;
      superclass = _Object;
    }

    var klass = find_existing_class(scope, name);

    if (klass) {
      if (superclass) {
        // Make sure existing class has same superclass
        ensureSuperclassMatch(klass, superclass);
      }
      return klass;
    }

    // Class doesn't exist, create a new one with given superclass...

    // Not specifying a superclass means we can assume it to be Object
    if (superclass == null) {
      superclass = _Object;
    }

    // Create the class object (instance of Class)
    klass = Opal.allocate_class(name, superclass);
    Opal.const_set(scope, name, klass);

    // Call .inherited() hook with new class on the superclass
    if (superclass.$inherited) {
      superclass.$inherited(klass);
    }

    if (bridged) {
      Opal.bridge(bridged, klass);
    }

    return klass;
  };

  // Define new module (or return existing module). The given `scope` is basically
  // the current `self` value the `module` statement was defined in. If this is
  // a ruby module or class, then it is used, otherwise if the scope is a ruby
  // object then that objects real ruby class is used (e.g. if the scope is the
  // main object, then the top level `Object` class is used as the scope).
  //
  // If a module of the given name is already defined in the scope, then that
  // instance is just returned.
  //
  // If there is a class of the given name in the scope, then an error is
  // generated instead (cannot have a class and module of same name in same scope).
  //
  // Otherwise, a new module is created in the scope with the given name, and that
  // new instance is returned back (to be referenced at runtime).
  //
  // @param  scope [Module, Class] class or module this definition is inside
  // @param  id   [String] the name of the new (or existing) module
  //
  // @return [Module]
  Opal.allocate_module = function(name) {
    var constructor = function(){};
    if (name) {
      $defineProperty(constructor, 'displayName', name+'.$$constructor');
    }

    var module = constructor;

    if (name)
      $defineProperty(constructor, 'displayName', name+'.constructor');

    $defineProperty(module, '$$name', name);
    $defineProperty(module, '$$prototype', constructor.prototype);
    $defineProperty(module, '$$const', {});
    $defineProperty(module, '$$is_module', true);
    $defineProperty(module, '$$is_a_module', true);
    $defineProperty(module, '$$cvars', {});
    $defineProperty(module, '$$iclasses', []);
    $defineProperty(module, '$$own_included_modules', []);
    $defineProperty(module, '$$own_prepended_modules', []);
    $defineProperty(module, '$$ancestors', [module]);
    $defineProperty(module, '$$ancestors_cache_version', null);

    $setPrototype(module, Opal.Module.prototype);

    return module;
  };

  function find_existing_module(scope, name) {
    var module = const_get_name(scope, name);
    if (module == null && scope === _Object) module = const_lookup_ancestors(_Object, name);

    if (module) {
      if (!module.$$is_module && module !== _Object) {
        throw Opal.TypeError.$new(name + " is not a module");
      }
    }

    return module;
  }

  Opal.module = function(scope, name) {
    var module;

    if (scope == null) {
      // Global scope
      scope = _Object;
    } else if (!scope.$$is_class && !scope.$$is_module) {
      // Scope is an object, use its class
      scope = scope.$$class;
    }

    module = find_existing_module(scope, name);

    if (module) {
      return module;
    }

    // Module doesnt exist, create a new one...
    module = Opal.allocate_module(name);
    Opal.const_set(scope, name, module);

    return module;
  };

  // Return the singleton class for the passed object.
  //
  // If the given object alredy has a singleton class, then it will be stored on
  // the object as the `$$meta` property. If this exists, then it is simply
  // returned back.
  //
  // Otherwise, a new singleton object for the class or object is created, set on
  // the object at `$$meta` for future use, and then returned.
  //
  // @param object [Object] the ruby object
  // @return [Class] the singleton class for object
  Opal.get_singleton_class = function(object) {
    if (object.$$meta) {
      return object.$$meta;
    }

    if (object.hasOwnProperty('$$is_class')) {
      return Opal.build_class_singleton_class(object);
    } else if (object.hasOwnProperty('$$is_module')) {
      return Opal.build_module_singletin_class(object);
    } else {
      return Opal.build_object_singleton_class(object);
    }
  };

  // Build the singleton class for an existing class. Class object are built
  // with their singleton class already in the prototype chain and inheriting
  // from their superclass object (up to `Class` itself).
  //
  // NOTE: Actually in MRI a class' singleton class inherits from its
  // superclass' singleton class which in turn inherits from Class.
  //
  // @param klass [Class]
  // @return [Class]
  Opal.build_class_singleton_class = function(klass) {
    var superclass, meta;

    if (klass.$$meta) {
      return klass.$$meta;
    }

    // The singleton_class superclass is the singleton_class of its superclass;
    // but BasicObject has no superclass (its `$$super` is null), thus we
    // fallback on `Class`.
    superclass = klass === BasicObject ? Class : Opal.get_singleton_class(klass.$$super);

    meta = Opal.allocate_class(null, superclass, function(){});

    $defineProperty(meta, '$$is_singleton', true);
    $defineProperty(meta, '$$singleton_of', klass);
    $defineProperty(klass, '$$meta', meta);
    $setPrototype(klass, meta.$$prototype);
    // Restoring ClassName.class
    $defineProperty(klass, '$$class', Opal.Class);

    return meta;
  };

  Opal.build_module_singletin_class = function(mod) {
    if (mod.$$meta) {
      return mod.$$meta;
    }

    var meta = Opal.allocate_class(null, Opal.Module, function(){});

    $defineProperty(meta, '$$is_singleton', true);
    $defineProperty(meta, '$$singleton_of', mod);
    $defineProperty(mod, '$$meta', meta);
    $setPrototype(mod, meta.$$prototype);
    // Restoring ModuleName.class
    $defineProperty(mod, '$$class', Opal.Module);

    return meta;
  };

  // Build the singleton class for a Ruby (non class) Object.
  //
  // @param object [Object]
  // @return [Class]
  Opal.build_object_singleton_class = function(object) {
    var superclass = object.$$class,
        klass = Opal.allocate_class(nil, superclass, function(){});

    $defineProperty(klass, '$$is_singleton', true);
    $defineProperty(klass, '$$singleton_of', object);

    delete klass.$$prototype.$$class;

    $defineProperty(object, '$$meta', klass);

    $setPrototype(object, object.$$meta.$$prototype);

    return klass;
  };

  Opal.is_method = function(prop) {
    return (prop[0] === '$' && prop[1] !== '$');
  };

  Opal.instance_methods = function(mod) {
    var exclude = [], results = [], ancestors = Opal.ancestors(mod);

    for (var i = 0, l = ancestors.length; i < l; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.$$prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      var props = Object.getOwnPropertyNames(proto);

      for (var j = 0, ll = props.length; j < ll; j++) {
        var prop = props[j];

        if (Opal.is_method(prop)) {
          var method_name = prop.slice(1),
              method = proto[prop];

          if (method.$$stub && exclude.indexOf(method_name) === -1) {
            exclude.push(method_name);
          }

          if (!method.$$stub && results.indexOf(method_name) === -1 && exclude.indexOf(method_name) === -1) {
            results.push(method_name);
          }
        }
      }
    }

    return results;
  };

  Opal.own_instance_methods = function(mod) {
    var results = [],
        proto = mod.$$prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto);

    for (var i = 0, length = props.length; i < length; i++) {
      var prop = props[i];

      if (Opal.is_method(prop)) {
        var method = proto[prop];

        if (!method.$$stub) {
          var method_name = prop.slice(1);
          results.push(method_name);
        }
      }
    }

    return results;
  };

  Opal.methods = function(obj) {
    return Opal.instance_methods(Opal.get_singleton_class(obj));
  };

  Opal.own_methods = function(obj) {
    return Opal.own_instance_methods(Opal.get_singleton_class(obj));
  };

  Opal.receiver_methods = function(obj) {
    var mod = Opal.get_singleton_class(obj);
    var singleton_methods = Opal.own_instance_methods(mod);
    var instance_methods = Opal.own_instance_methods(mod.$$super);
    return singleton_methods.concat(instance_methods);
  };

  // Returns an object containing all pairs of names/values
  // for all class variables defined in provided +module+
  // and its ancestors.
  //
  // @param module [Module]
  // @return [Object]
  Opal.class_variables = function(module) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length,
        result = {};

    for (i = length - 1; i >= 0; i--) {
      var ancestor = ancestors[i];

      for (var cvar in ancestor.$$cvars) {
        result[cvar] = ancestor.$$cvars[cvar];
      }
    }

    return result;
  };

  // Sets class variable with specified +name+ to +value+
  // in provided +module+
  //
  // @param module [Module]
  // @param name [String]
  // @param value [Object]
  Opal.class_variable_set = function(module, name, value) {
    var ancestors = Opal.ancestors(module),
        i, length = ancestors.length;

    for (i = length - 2; i >= 0; i--) {
      var ancestor = ancestors[i];

      if ($hasOwn.call(ancestor.$$cvars, name)) {
        ancestor.$$cvars[name] = value;
        return value;
      }
    }

    module.$$cvars[name] = value;

    return value;
  };

  function isRoot(proto) {
    return proto.hasOwnProperty('$$iclass') && proto.hasOwnProperty('$$root');
  }

  function own_included_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);

    while (proto) {
      if (proto.hasOwnProperty('$$class')) {
        // superclass
        break;
      }
      mod = protoToModule(proto);
      if (mod) {
        result.push(mod);
      }
      proto = Object.getPrototypeOf(proto);
    }

    return result;
  }

  function own_prepended_modules(module) {
    var result = [], mod, proto = Object.getPrototypeOf(module.$$prototype);

    if (module.$$prototype.hasOwnProperty('$$dummy')) {
      while (proto) {
        if (proto === module.$$prototype.$$define_methods_on) {
          break;
        }

        mod = protoToModule(proto);
        if (mod) {
          result.push(mod);
        }

        proto = Object.getPrototypeOf(proto);
      }
    }

    return result;
  }


  // The actual inclusion of a module into a class.
  //
  // ## Class `$$parent` and `iclass`
  //
  // To handle `super` calls, every class has a `$$parent`. This parent is
  // used to resolve the next class for a super call. A normal class would
  // have this point to its superclass. However, if a class includes a module
  // then this would need to take into account the module. The module would
  // also have to then point its `$$parent` to the actual superclass. We
  // cannot modify modules like this, because it might be included in more
  // then one class. To fix this, we actually insert an `iclass` as the class'
  // `$$parent` which can then point to the superclass. The `iclass` acts as
  // a proxy to the actual module, so the `super` chain can then search it for
  // the required method.
  //
  // @param module [Module] the module to include
  // @param includer [Module] the target class to include module into
  // @return [null]
  Opal.append_features = function(module, includer) {
    var module_ancestors = Opal.ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(includer) !== -1) {
      throw Opal.ArgumentError.$new('cyclic include detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $defineProperty(iclass, '$$included', true);
      iclasses.push(iclass);
    }
    var includer_ancestors = Opal.ancestors(includer),
        chain = chain_iclasses(iclasses),
        start_chain_after,
        end_chain_on;

    if (includer_ancestors.indexOf(module) === -1) {
      // first time include

      // includer -> chain.first -> ...chain... -> chain.last -> includer.parent
      start_chain_after = includer.$$prototype;
      end_chain_on = Object.getPrototypeOf(includer.$$prototype);
    } else {
      // The module has been already included,
      // we don't need to put it into the ancestors chain again,
      // but this module may have new included modules.
      // If it's true we need to copy them.
      //
      // The simplest way is to replace ancestors chain from
      //          parent
      //            |
      //   `module` iclass (has a $$root flag)
      //            |
      //   ...previos chain of module.included_modules ...
      //            |
      //  "next ancestor" (has a $$root flag or is a real class)
      //
      // to
      //          parent
      //            |
      //    `module` iclass (has a $$root flag)
      //            |
      //   ...regenerated chain of module.included_modules
      //            |
      //   "next ancestor" (has a $$root flag or is a real class)
      //
      // because there are no intermediate classes between `parent` and `next ancestor`.
      // It doesn't break any prototypes of other objects as we don't change class references.

      var proto = includer.$$prototype, parent = proto, module_iclass = Object.getPrototypeOf(parent);

      while (module_iclass != null) {
        if (isRoot(module_iclass) && module_iclass.$$module === module) {
          break;
        }

        parent = module_iclass;
        module_iclass = Object.getPrototypeOf(module_iclass);
      }

      var next_ancestor = Object.getPrototypeOf(module_iclass);

      // skip non-root iclasses (that were recursively included)
      while (next_ancestor.hasOwnProperty('$$iclass') && !isRoot(next_ancestor)) {
        next_ancestor = Object.getPrototypeOf(next_ancestor);
      }

      start_chain_after = parent;
      end_chain_on = next_ancestor;
    }

    $setPrototype(start_chain_after, chain.first);
    $setPrototype(chain.last, end_chain_on);

    // recalculate own_included_modules cache
    includer.$$own_included_modules = own_included_modules(includer);

    Opal.const_cache_version++;
  };

  Opal.prepend_features = function(module, prepender) {
    // Here we change the ancestors chain from
    //
    //   prepender
    //      |
    //    parent
    //
    // to:
    //
    // dummy(prepender)
    //      |
    //  iclass(module)
    //      |
    // iclass(prepender)
    //      |
    //    parent
    var module_ancestors = Opal.ancestors(module);
    var iclasses = [];

    if (module_ancestors.indexOf(prepender) !== -1) {
      throw Opal.ArgumentError.$new('cyclic prepend detected');
    }

    for (var i = 0, length = module_ancestors.length; i < length; i++) {
      var ancestor = module_ancestors[i], iclass = create_iclass(ancestor);
      $defineProperty(iclass, '$$prepended', true);
      iclasses.push(iclass);
    }

    var chain = chain_iclasses(iclasses),
        dummy_prepender = prepender.$$prototype,
        previous_parent = Object.getPrototypeOf(dummy_prepender),
        prepender_iclass,
        start_chain_after,
        end_chain_on;

    if (dummy_prepender.hasOwnProperty('$$dummy')) {
      // The module already has some prepended modules
      // which means that we don't need to make it "dummy"
      prepender_iclass = dummy_prepender.$$define_methods_on;
    } else {
      // Making the module "dummy"
      prepender_iclass = create_dummy_iclass(prepender);
      flush_methods_in(prepender);
      $defineProperty(dummy_prepender, '$$dummy', true);
      $defineProperty(dummy_prepender, '$$define_methods_on', prepender_iclass);

      // Converting
      //   dummy(prepender) -> previous_parent
      // to
      //   dummy(prepender) -> iclass(prepender) -> previous_parent
      $setPrototype(dummy_prepender, prepender_iclass);
      $setPrototype(prepender_iclass, previous_parent);
    }

    var prepender_ancestors = Opal.ancestors(prepender);

    if (prepender_ancestors.indexOf(module) === -1) {
      // first time prepend

      start_chain_after = dummy_prepender;

      // next $$root or prepender_iclass or non-$$iclass
      end_chain_on = Object.getPrototypeOf(dummy_prepender);
      while (end_chain_on != null) {
        if (
          end_chain_on.hasOwnProperty('$$root') ||
          end_chain_on === prepender_iclass ||
          !end_chain_on.hasOwnProperty('$$iclass')
        ) {
          break;
        }

        end_chain_on = Object.getPrototypeOf(end_chain_on);
      }
    } else {
      throw Opal.RuntimeError.$new("Prepending a module multiple times is not supported");
    }

    $setPrototype(start_chain_after, chain.first);
    $setPrototype(chain.last, end_chain_on);

    // recalculate own_prepended_modules cache
    prepender.$$own_prepended_modules = own_prepended_modules(prepender);

    Opal.const_cache_version++;
  };

  function flush_methods_in(module) {
    var proto = module.$$prototype,
        props = Object.getOwnPropertyNames(proto);

    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      if (Opal.is_method(prop)) {
        delete proto[prop];
      }
    }
  }

  function create_iclass(module) {
    var iclass = create_dummy_iclass(module);

    if (module.$$is_module) {
      module.$$iclasses.push(iclass);
    }

    return iclass;
  }

  // Dummy iclass doesn't receive updates when the module gets a new method.
  function create_dummy_iclass(module) {
    var iclass = {},
        proto = module.$$prototype;

    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }

    var props = Object.getOwnPropertyNames(proto),
        length = props.length, i;

    for (i = 0; i < length; i++) {
      var prop = props[i];
      $defineProperty(iclass, prop, proto[prop]);
    }

    $defineProperty(iclass, '$$iclass', true);
    $defineProperty(iclass, '$$module', module);

    return iclass;
  }

  function chain_iclasses(iclasses) {
    var length = iclasses.length, first = iclasses[0];

    $defineProperty(first, '$$root', true);

    if (length === 1) {
      return { first: first, last: first };
    }

    var previous = first;

    for (var i = 1; i < length; i++) {
      var current = iclasses[i];
      $setPrototype(previous, current);
      previous = current;
    }


    return { first: iclasses[0], last: iclasses[length - 1] };
  }

  // For performance, some core Ruby classes are toll-free bridged to their
  // native JavaScript counterparts (e.g. a Ruby Array is a JavaScript Array).
  //
  // This method is used to setup a native constructor (e.g. Array), to have
  // its prototype act like a normal Ruby class. Firstly, a new Ruby class is
  // created using the native constructor so that its prototype is set as the
  // target for the new class. Note: all bridged classes are set to inherit
  // from Object.
  //
  // Example:
  //
  //    Opal.bridge(self, Function);
  //
  // @param klass       [Class] the Ruby class to bridge
  // @param constructor [JS.Function] native JavaScript constructor to use
  // @return [Class] returns the passed Ruby class
  //
  Opal.bridge = function(native_klass, klass) {
    if (native_klass.hasOwnProperty('$$bridge')) {
      throw Opal.ArgumentError.$new("already bridged");
    }

    var klass_to_inject, klass_reference;

    klass_to_inject = klass.$$super || Opal.Object;
    klass_reference = klass;
    var original_prototype = klass.$$prototype;

    // constructor is a JS function with a prototype chain like:
    // - constructor
    //   - super
    //
    // What we need to do is to inject our class (with its prototype chain)
    // between constructor and super. For example, after injecting ::Object
    // into JS String we get:
    //
    // - constructor (window.String)
    //   - Opal.Object
    //     - Opal.Kernel
    //       - Opal.BasicObject
    //         - super (window.Object)
    //           - null
    //
    $defineProperty(native_klass, '$$bridge', klass);
    $setPrototype(native_klass.prototype, (klass.$$super || Opal.Object).$$prototype);
    $defineProperty(klass, '$$prototype', native_klass.prototype);

    $defineProperty(klass.$$prototype, '$$class', klass);
    $defineProperty(klass, '$$constructor', native_klass);
    $defineProperty(klass, '$$bridge', true);
  };

  function protoToModule(proto) {
    if (proto.hasOwnProperty('$$dummy')) {
      return;
    } else if (proto.hasOwnProperty('$$iclass')) {
      return proto.$$module;
    } else if (proto.hasOwnProperty('$$class')) {
      return proto.$$class;
    }
  }

  function own_ancestors(module) {
    return module.$$own_prepended_modules.concat([module]).concat(module.$$own_included_modules);
  }

  // The Array of ancestors for a given module/class
  Opal.ancestors = function(module) {
    if (!module) { return []; }

    if (module.$$ancestors_cache_version === Opal.const_cache_version) {
      return module.$$ancestors;
    }

    var result = [], i, mods, length;

    for (i = 0, mods = own_ancestors(module), length = mods.length; i < length; i++) {
      result.push(mods[i]);
    }

    if (module.$$super) {
      for (i = 0, mods = Opal.ancestors(module.$$super), length = mods.length; i < length; i++) {
        result.push(mods[i]);
      }
    }

    module.$$ancestors_cache_version = Opal.const_cache_version;
    module.$$ancestors = result;

    return result;
  };

  Opal.included_modules = function(module) {
    var result = [], mod = null, proto = Object.getPrototypeOf(module.$$prototype);

    for (; proto && Object.getPrototypeOf(proto); proto = Object.getPrototypeOf(proto)) {
      mod = protoToModule(proto);
      if (mod && mod.$$is_module && proto.$$iclass && proto.$$included) {
        result.push(mod);
      }
    }

    return result;
  };


  // Method Missing
  // --------------

  // Methods stubs are used to facilitate method_missing in opal. A stub is a
  // placeholder function which just calls `method_missing` on the receiver.
  // If no method with the given name is actually defined on an object, then it
  // is obvious to say that the stub will be called instead, and then in turn
  // method_missing will be called.
  //
  // When a file in ruby gets compiled to javascript, it includes a call to
  // this function which adds stubs for every method name in the compiled file.
  // It should then be safe to assume that method_missing will work for any
  // method call detected.
  //
  // Method stubs are added to the BasicObject prototype, which every other
  // ruby object inherits, so all objects should handle method missing. A stub
  // is only added if the given property name (method name) is not already
  // defined.
  //
  // Note: all ruby methods have a `$` prefix in javascript, so all stubs will
  // have this prefix as well (to make this method more performant).
  //
  //    Opal.add_stubs(["$foo", "$bar", "$baz="]);
  //
  // All stub functions will have a private `$$stub` property set to true so
  // that other internal methods can detect if a method is just a stub or not.
  // `Kernel#respond_to?` uses this property to detect a methods presence.
  //
  // @param stubs [Array] an array of method stubs to add
  // @return [undefined]
  Opal.add_stubs = function(stubs) {
    var proto = Opal.BasicObject.$$prototype;

    for (var i = 0, length = stubs.length; i < length; i++) {
      var stub = stubs[i], existing_method = proto[stub];

      if (existing_method == null || existing_method.$$stub) {
        Opal.add_stub_for(proto, stub);
      }
    }
  };

  // Add a method_missing stub function to the given prototype for the
  // given name.
  //
  // @param prototype [Prototype] the target prototype
  // @param stub [String] stub name to add (e.g. "$foo")
  // @return [undefined]
  Opal.add_stub_for = function(prototype, stub) {
    var method_missing_stub = Opal.stub_for(stub);
    $defineProperty(prototype, stub, method_missing_stub);
  };

  // Generate the method_missing stub for a given method name.
  //
  // @param method_name [String] The js-name of the method to stub (e.g. "$foo")
  // @return [undefined]
  Opal.stub_for = function(method_name) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing.$$p = method_missing_stub.$$p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub.$$p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      var args_ary = new Array(arguments.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = arguments[i]; }

      return this.$method_missing.apply(this, [method_name.slice(1)].concat(args_ary));
    }

    method_missing_stub.$$stub = true;

    return method_missing_stub;
  };


  // Methods
  // -------

  // Arity count error dispatcher for methods
  //
  // @param actual [Fixnum] number of arguments given to method
  // @param expected [Fixnum] expected number of arguments
  // @param object [Object] owner of the method +meth+
  // @param meth [String] method name that got wrong number of arguments
  // @raise [ArgumentError]
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = '';
    if (object.$$is_a_module) {
      inspect += object.$$name + '.';
    }
    else {
      inspect += object.$$class.$$name + '#';
    }
    inspect += meth;

    throw Opal.ArgumentError.$new('[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')');
  };

  // Arity count error dispatcher for blocks
  //
  // @param actual [Fixnum] number of arguments given to block
  // @param expected [Fixnum] expected number of arguments
  // @param context [Object] context of the block definition
  // @raise [ArgumentError]
  Opal.block_ac = function(actual, expected, context) {
    var inspect = "`block in " + context + "'";

    throw Opal.ArgumentError.$new(inspect + ': wrong number of arguments (' + actual + ' for ' + expected + ')');
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, mid, current_func, defcheck, defs) {
    var jsid = '$' + mid, ancestors, super_method;

    if (obj.hasOwnProperty('$$meta')) {
      ancestors = Opal.ancestors(obj.$$meta);
    } else {
      ancestors = Opal.ancestors(obj.$$class);
    }

    var current_index = ancestors.indexOf(current_func.$$owner);

    for (var i = current_index + 1; i < ancestors.length; i++) {
      var ancestor = ancestors[i],
          proto = ancestor.$$prototype;

      if (proto.hasOwnProperty('$$dummy')) {
        proto = proto.$$define_methods_on;
      }

      if (proto.hasOwnProperty(jsid)) {
        var method = proto[jsid];

        if (!method.$$stub) {
          super_method = method;
        }
        break;
      }
    }

    if (!defcheck && super_method == null && Opal.Kernel.$method_missing === obj.$method_missing) {
      // method_missing hasn't been explicitly defined
      throw Opal.NoMethodError.$new('super: no superclass method `'+mid+"' for "+obj, mid);
    }

    return super_method;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, defcheck, implicit) {
    var call_jsid = jsid;

    if (!current_func) {
      throw Opal.RuntimeError.$new("super called outside of method");
    }

    if (implicit && current_func.$$define_meth) {
      throw Opal.RuntimeError.$new("implicit argument passing of super from method defined by define_method() is not supported. Specify all arguments explicitly");
    }

    if (current_func.$$def) {
      call_jsid = current_func.$$jsid;
    }

    return Opal.find_super_dispatcher(obj, call_jsid, current_func, defcheck);
  };

  // Used to return as an expression. Sometimes, we can't simply return from
  // a javascript function as if we were a method, as the return is used as
  // an expression, or even inside a block which must "return" to the outer
  // method. This helper simply throws an error which is then caught by the
  // method. This approach is expensive, so it is only used when absolutely
  // needed.
  //
  Opal.ret = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // Used to break out of a block.
  Opal.brk = function(val, breaker) {
    breaker.$v = val;
    throw breaker;
  };

  // Builds a new unique breaker, this is to avoid multiple nested breaks to get
  // in the way of each other.
  Opal.new_brk = function() {
    return new Error('unexpected break');
  };

  // handles yield calls for 1 yielded arg
  Opal.yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    var has_mlhs = block.$$has_top_level_mlhs_arg,
        has_trailing_comma = block.$$has_trailing_comma_in_args;

    if (block.length > 1 || ((has_mlhs || has_trailing_comma) && block.length === 1)) {
      arg = Opal.to_ary(arg);
    }

    if ((block.length > 1 || (has_trailing_comma && block.length === 1)) && arg.$$is_array) {
      return block.apply(null, arg);
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length === 1) {
      if (args[0].$$is_array) {
        return block.apply(null, args[0]);
      }
    }

    if (!args.$$is_array) {
      var args_ary = new Array(args.length);
      for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

      return block.apply(null, args_ary);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.rescue = function(exception, candidates) {
    for (var i = 0; i < candidates.length; i++) {
      var candidate = candidates[i];

      if (candidate.$$is_array) {
        var result = Opal.rescue(exception, candidate);

        if (result) {
          return result;
        }
      }
      else if (candidate === Opal.JS.Error) {
        return candidate;
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }

    return null;
  };

  Opal.is_a = function(object, klass) {
    if (klass != null && object.$$meta === klass || object.$$class === klass) {
      return true;
    }

    if (object.$$is_number && klass.$$is_number_class) {
      return true;
    }

    var i, length, ancestors = Opal.ancestors(object.$$is_class ? Opal.get_singleton_class(object) : (object.$$meta || object.$$class));

    for (i = 0, length = ancestors.length; i < length; i++) {
      if (ancestors[i] === klass) {
        return true;
      }
    }

    return false;
  };

  // Helpers for extracting kwsplats
  // Used for: { **h }
  Opal.to_hash = function(value) {
    if (value.$$is_hash) {
      return value;
    }
    else if (value['$respond_to?']('to_hash', true)) {
      var hash = value.$to_hash();
      if (hash.$$is_hash) {
        return hash;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Hash (" + value.$$class + "#to_hash gives " + hash.$$class + ")");
      }
    }
    else {
      throw Opal.TypeError.$new("no implicit conversion of " + value.$$class + " into Hash");
    }
  };

  // Helpers for implementing multiple assignment
  // Our code for extracting the values and assigning them only works if the
  // return value is a JS array.
  // So if we get an Array subclass, extract the wrapped JS array from it

  // Used for: a, b = something (no splat)
  Opal.to_ary = function(value) {
    if (value.$$is_array) {
      return value;
    }
    else if (value['$respond_to?']('to_ary', true)) {
      var ary = value.$to_ary();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_ary gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for: a, b = *something (with splat)
  Opal.to_a = function(value) {
    if (value.$$is_array) {
      // A splatted array must be copied
      return value.slice();
    }
    else if (value['$respond_to?']('to_a', true)) {
      var ary = value.$to_a();
      if (ary === nil) {
        return [value];
      }
      else if (ary.$$is_array) {
        return ary;
      }
      else {
        throw Opal.TypeError.$new("Can't convert " + value.$$class +
          " to Array (" + value.$$class + "#to_a gives " + ary.$$class + ")");
      }
    }
    else {
      return [value];
    }
  };

  // Used for extracting keyword arguments from arguments passed to
  // JS function. If provided +arguments+ list doesn't have a Hash
  // as a last item, returns a blank Hash.
  //
  // @param parameters [Array]
  // @return [Hash]
  //
  Opal.extract_kwargs = function(parameters) {
    var kwargs = parameters[parameters.length - 1];
    if (kwargs != null && kwargs['$respond_to?']('to_hash', true)) {
      $splice.call(parameters, parameters.length - 1, 1);
      return kwargs.$to_hash();
    }
    else {
      return Opal.hash2([], {});
    }
  };

  // Used to get a list of rest keyword arguments. Method takes the given
  // keyword args, i.e. the hash literal passed to the method containing all
  // keyword arguemnts passed to method, as well as the used args which are
  // the names of required and optional arguments defined. This method then
  // just returns all key/value pairs which have not been used, in a new
  // hash literal.
  //
  // @param given_args [Hash] all kwargs given to method
  // @param used_args [Object<String: true>] all keys used as named kwargs
  // @return [Hash]
  //
  Opal.kwrestargs = function(given_args, used_args) {
    var keys      = [],
        map       = {},
        key           ,
        given_map = given_args.$$smap;

    for (key in given_map) {
      if (!used_args[key]) {
        keys.push(key);
        map[key] = given_map[key];
      }
    }

    return Opal.hash2(keys, map);
  };

  // Calls passed method on a ruby object with arguments and block:
  //
  // Can take a method or a method name.
  //
  // 1. When method name gets passed it invokes it by its name
  //    and calls 'method_missing' when object doesn't have this method.
  //    Used internally by Opal to invoke method that takes a block or a splat.
  // 2. When method (i.e. method body) gets passed, it doesn't trigger 'method_missing'
  //    because it doesn't know the name of the actual method.
  //    Used internally by Opal to invoke 'super'.
  //
  // @example
  //   var my_array = [1, 2, 3, 4]
  //   Opal.send(my_array, 'length')                    # => 4
  //   Opal.send(my_array, my_array.$length)            # => 4
  //
  //   Opal.send(my_array, 'reverse!')                  # => [4, 3, 2, 1]
  //   Opal.send(my_array, my_array['$reverse!']')      # => [4, 3, 2, 1]
  //
  // @param recv [Object] ruby object
  // @param method [Function, String] method body or name of the method
  // @param args [Array] arguments that will be passed to the method call
  // @param block [Function] ruby block
  // @return [Object] returning value of the method call
  Opal.send = function(recv, method, args, block) {
    var body = (typeof(method) === 'string') ? recv['$'+method] : method;

    if (body != null) {
      if (typeof block === 'function') {
        body.$$p = block;
      }
      return body.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [method].concat(args));
  };

  Opal.lambda = function(block) {
    block.$$is_lambda = true;
    return block;
  };

  // Used to define methods on an object. This is a helper method, used by the
  // compiled source to define methods on special case objects when the compiler
  // can not determine the destination object, or the object is a Module
  // instance. This can get called by `Module#define_method` as well.
  //
  // ## Modules
  //
  // Any method defined on a module will come through this runtime helper.
  // The method is added to the module body, and the owner of the method is
  // set to be the module itself. This is used later when choosing which
  // method should show on a class if more than 1 included modules define
  // the same method. Finally, if the module is in `module_function` mode,
  // then the method is also defined onto the module itself.
  //
  // ## Classes
  //
  // This helper will only be called for classes when a method is being
  // defined indirectly; either through `Module#define_method`, or by a
  // literal `def` method inside an `instance_eval` or `class_eval` body. In
  // either case, the method is simply added to the class' prototype. A special
  // exception exists for `BasicObject` and `Object`. These two classes are
  // special because they are used in toll-free bridged classes. In each of
  // these two cases, extra work is required to define the methods on toll-free
  // bridged class' prototypes as well.
  //
  // ## Objects
  //
  // If a simple ruby object is the object, then the method is simply just
  // defined on the object as a singleton method. This would be the case when
  // a method is defined inside an `instance_eval` block.
  //
  // @param obj  [Object, Class] the actual obj to define method for
  // @param jsid [String] the JavaScript friendly method name (e.g. '$foo')
  // @param body [JS.Function] the literal JavaScript function used as method
  // @return [null]
  //
  Opal.def = function(obj, jsid, body) {
    // Special case for a method definition in the
    // top-level namespace
    if (obj === Opal.top) {
      Opal.defn(Opal.Object, jsid, body)
    }
    // if instance_eval is invoked on a module/class, it sets inst_eval_mod
    else if (!obj.$$eval && obj.$$is_a_module) {
      Opal.defn(obj, jsid, body);
    }
    else {
      Opal.defs(obj, jsid, body);
    }
  };

  // Define method on a module or class (see Opal.def).
  Opal.defn = function(module, jsid, body) {
    body.displayName = jsid;
    body.$$owner = module;

    var proto = module.$$prototype;
    if (proto.hasOwnProperty('$$dummy')) {
      proto = proto.$$define_methods_on;
    }
    $defineProperty(proto, jsid, body);

    if (module.$$is_module) {
      if (module.$$module_function) {
        Opal.defs(module, jsid, body)
      }

      for (var i = 0, iclasses = module.$$iclasses, length = iclasses.length; i < length; i++) {
        var iclass = iclasses[i];
        $defineProperty(iclass, jsid, body);
      }
    }

    var singleton_of = module.$$singleton_of;
    if (module.$method_added && !module.$method_added.$$stub && !singleton_of) {
      module.$method_added(jsid.substr(1));
    }
    else if (singleton_of && singleton_of.$singleton_method_added && !singleton_of.$singleton_method_added.$$stub) {
      singleton_of.$singleton_method_added(jsid.substr(1));
    }
  };

  // Define a singleton method on the given object (see Opal.def).
  Opal.defs = function(obj, jsid, body) {
    if (obj.$$is_string || obj.$$is_number) {
      throw Opal.TypeError.$new("can't define singleton");
    }
    Opal.defn(Opal.get_singleton_class(obj), jsid, body)
  };

  // Called from #remove_method.
  Opal.rdef = function(obj, jsid) {
    if (!$hasOwn.call(obj.$$prototype, jsid)) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    delete obj.$$prototype[jsid];

    if (obj.$$is_singleton) {
      if (obj.$$prototype.$singleton_method_removed && !obj.$$prototype.$singleton_method_removed.$$stub) {
        obj.$$prototype.$singleton_method_removed(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_removed && !obj.$method_removed.$$stub) {
        obj.$method_removed(jsid.substr(1));
      }
    }
  };

  // Called from #undef_method.
  Opal.udef = function(obj, jsid) {
    if (!obj.$$prototype[jsid] || obj.$$prototype[jsid].$$stub) {
      throw Opal.NameError.$new("method '" + jsid.substr(1) + "' not defined in " + obj.$name());
    }

    Opal.add_stub_for(obj.$$prototype, jsid);

    if (obj.$$is_singleton) {
      if (obj.$$prototype.$singleton_method_undefined && !obj.$$prototype.$singleton_method_undefined.$$stub) {
        obj.$$prototype.$singleton_method_undefined(jsid.substr(1));
      }
    }
    else {
      if (obj.$method_undefined && !obj.$method_undefined.$$stub) {
        obj.$method_undefined(jsid.substr(1));
      }
    }
  };

  function is_method_body(body) {
    return (typeof(body) === "function" && !body.$$stub);
  }

  Opal.alias = function(obj, name, old) {
    var id     = '$' + name,
        old_id = '$' + old,
        body   = obj.$$prototype['$' + old],
        alias;

    // When running inside #instance_eval the alias refers to class methods.
    if (obj.$$eval) {
      return Opal.alias(Opal.get_singleton_class(obj), name, old);
    }

    if (!is_method_body(body)) {
      var ancestor = obj.$$super;

      while (typeof(body) !== "function" && ancestor) {
        body     = ancestor[old_id];
        ancestor = ancestor.$$super;
      }

      if (!is_method_body(body) && obj.$$is_module) {
        // try to look into Object
        body = Opal.Object.$$prototype[old_id]
      }

      if (!is_method_body(body)) {
        throw Opal.NameError.$new("undefined method `" + old + "' for class `" + obj.$name() + "'")
      }
    }

    // If the body is itself an alias use the original body
    // to keep the max depth at 1.
    if (body.$$alias_of) body = body.$$alias_of;

    // We need a wrapper because otherwise properties
    // would be ovrewritten on the original body.
    alias = function() {
      var block = alias.$$p, args, i, ii;

      args = new Array(arguments.length);
      for(i = 0, ii = arguments.length; i < ii; i++) {
        args[i] = arguments[i];
      }

      if (block != null) { alias.$$p = null }

      return Opal.send(this, body, args, block);
    };

    // Try to make the browser pick the right name
    alias.displayName       = name;
    alias.length            = body.length;
    alias.$$arity           = body.$$arity;
    alias.$$parameters      = body.$$parameters;
    alias.$$source_location = body.$$source_location;
    alias.$$alias_of        = body;
    alias.$$alias_name      = name;

    Opal.defn(obj, id, alias);

    return obj;
  };

  Opal.alias_native = function(obj, name, native_name) {
    var id   = '$' + name,
        body = obj.$$prototype[native_name];

    if (typeof(body) !== "function" || body.$$stub) {
      throw Opal.NameError.$new("undefined native method `" + native_name + "' for class `" + obj.$name() + "'")
    }

    Opal.defn(obj, id, body);

    return obj;
  };


  // Hashes
  // ------

  Opal.hash_init = function(hash) {
    hash.$$smap = Object.create(null);
    hash.$$map  = Object.create(null);
    hash.$$keys = [];
  };

  Opal.hash_clone = function(from_hash, to_hash) {
    to_hash.$$none = from_hash.$$none;
    to_hash.$$proc = from_hash.$$proc;

    for (var i = 0, keys = from_hash.$$keys, smap = from_hash.$$smap, len = keys.length, key, value; i < len; i++) {
      key = keys[i];

      if (key.$$is_string) {
        value = smap[key];
      } else {
        value = key.value;
        key = key.key;
      }

      Opal.hash_put(to_hash, key, value);
    }
  };

  Opal.hash_put = function(hash, key, value) {
    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        hash.$$keys.push(key);
      }
      hash.$$smap[key] = value;
      return;
    }

    var key_hash, bucket, last_bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      hash.$$map[key_hash] = bucket;
      return;
    }

    bucket = hash.$$map[key_hash];

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        last_bucket = undefined;
        bucket.value = value;
        break;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }

    if (last_bucket) {
      bucket = {key: key, key_hash: key_hash, value: value};
      hash.$$keys.push(bucket);
      last_bucket.next = bucket;
    }
  };

  Opal.hash_get = function(hash, key) {
    if (key.$$is_string) {
      if ($hasOwn.call(hash.$$smap, key)) {
        return hash.$$smap[key];
      }
      return;
    }

    var key_hash, bucket;
    key_hash = hash.$$by_identity ? Opal.id(key) : key.$hash();

    if ($hasOwn.call(hash.$$map, key_hash)) {
      bucket = hash.$$map[key_hash];

      while (bucket) {
        if (key === bucket.key || key['$eql?'](bucket.key)) {
          return bucket.value;
        }
        bucket = bucket.next;
      }
    }
  };

  Opal.hash_delete = function(hash, key) {
    var i, keys = hash.$$keys, length = keys.length, value;

    if (key.$$is_string) {
      if (!$hasOwn.call(hash.$$smap, key)) {
        return;
      }

      for (i = 0; i < length; i++) {
        if (keys[i] === key) {
          keys.splice(i, 1);
          break;
        }
      }

      value = hash.$$smap[key];
      delete hash.$$smap[key];
      return value;
    }

    var key_hash = key.$hash();

    if (!$hasOwn.call(hash.$$map, key_hash)) {
      return;
    }

    var bucket = hash.$$map[key_hash], last_bucket;

    while (bucket) {
      if (key === bucket.key || key['$eql?'](bucket.key)) {
        value = bucket.value;

        for (i = 0; i < length; i++) {
          if (keys[i] === bucket) {
            keys.splice(i, 1);
            break;
          }
        }

        if (last_bucket && bucket.next) {
          last_bucket.next = bucket.next;
        }
        else if (last_bucket) {
          delete last_bucket.next;
        }
        else if (bucket.next) {
          hash.$$map[key_hash] = bucket.next;
        }
        else {
          delete hash.$$map[key_hash];
        }

        return value;
      }
      last_bucket = bucket;
      bucket = bucket.next;
    }
  };

  Opal.hash_rehash = function(hash) {
    for (var i = 0, length = hash.$$keys.length, key_hash, bucket, last_bucket; i < length; i++) {

      if (hash.$$keys[i].$$is_string) {
        continue;
      }

      key_hash = hash.$$keys[i].key.$hash();

      if (key_hash === hash.$$keys[i].key_hash) {
        continue;
      }

      bucket = hash.$$map[hash.$$keys[i].key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          if (last_bucket && bucket.next) {
            last_bucket.next = bucket.next;
          }
          else if (last_bucket) {
            delete last_bucket.next;
          }
          else if (bucket.next) {
            hash.$$map[hash.$$keys[i].key_hash] = bucket.next;
          }
          else {
            delete hash.$$map[hash.$$keys[i].key_hash];
          }
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      hash.$$keys[i].key_hash = key_hash;

      if (!$hasOwn.call(hash.$$map, key_hash)) {
        hash.$$map[key_hash] = hash.$$keys[i];
        continue;
      }

      bucket = hash.$$map[key_hash];
      last_bucket = undefined;

      while (bucket) {
        if (bucket === hash.$$keys[i]) {
          last_bucket = undefined;
          break;
        }
        last_bucket = bucket;
        bucket = bucket.next;
      }

      if (last_bucket) {
        last_bucket.next = hash.$$keys[i];
      }
    }
  };

  Opal.hash = function() {
    var arguments_length = arguments.length, args, hash, i, length, key, value;

    if (arguments_length === 1 && arguments[0].$$is_hash) {
      return arguments[0];
    }

    hash = new Opal.Hash();
    Opal.hash_init(hash);

    if (arguments_length === 1 && arguments[0].$$is_array) {
      args = arguments[0];
      length = args.length;

      for (i = 0; i < length; i++) {
        if (args[i].length !== 2) {
          throw Opal.ArgumentError.$new("value not of length 2: " + args[i].$inspect());
        }

        key = args[i][0];
        value = args[i][1];

        Opal.hash_put(hash, key, value);
      }

      return hash;
    }

    if (arguments_length === 1) {
      args = arguments[0];
      for (key in args) {
        if ($hasOwn.call(args, key)) {
          value = args[key];

          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    }

    if (arguments_length % 2 !== 0) {
      throw Opal.ArgumentError.$new("odd number of arguments for Hash");
    }

    for (i = 0; i < arguments_length; i += 2) {
      key = arguments[i];
      value = arguments[i + 1];

      Opal.hash_put(hash, key, value);
    }

    return hash;
  };

  // A faster Hash creator for hashes that just use symbols and
  // strings as keys. The map and keys array can be constructed at
  // compile time, so they are just added here by the constructor
  // function.
  //
  Opal.hash2 = function(keys, smap) {
    var hash = new Opal.Hash();

    hash.$$smap = smap;
    hash.$$map  = Object.create(null);
    hash.$$keys = keys;

    return hash;
  };

  // Create a new range instance with first and last values, and whether the
  // range excludes the last value.
  //
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range();
        range.begin   = first;
        range.end     = last;
        range.excl    = exc;

    return range;
  };

  // Get the ivar name for a given name.
  // Mostly adds a trailing $ to reserved names.
  //
  Opal.ivar = function(name) {
    if (
        // properties
        name === "constructor" ||
        name === "displayName" ||
        name === "__count__" ||
        name === "__noSuchMethod__" ||
        name === "__parent__" ||
        name === "__proto__" ||

        // methods
        name === "hasOwnProperty" ||
        name === "valueOf"
       )
    {
      return name + "$";
    }

    return name;
  };


  // Regexps
  // -------

  // Escape Regexp special chars letting the resulting string be used to build
  // a new Regexp.
  //
  Opal.escape_regexp = function(str) {
    return str.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
              .replace(/[\n]/g, '\\n')
              .replace(/[\r]/g, '\\r')
              .replace(/[\f]/g, '\\f')
              .replace(/[\t]/g, '\\t');
  };

  // Create a global Regexp from a RegExp object and cache the result
  // on the object itself ($$g attribute).
  //
  Opal.global_regexp = function(pattern) {
    if (pattern.global) {
      return pattern; // RegExp already has the global flag
    }
    if (pattern.$$g == null) {
      pattern.$$g = new RegExp(pattern.source, (pattern.multiline ? 'gm' : 'g') + (pattern.ignoreCase ? 'i' : ''));
    } else {
      pattern.$$g.lastIndex = null; // reset lastIndex property
    }
    return pattern.$$g;
  };

  // Create a global multiline Regexp from a RegExp object and cache the result
  // on the object itself ($$gm or $$g attribute).
  //
  Opal.global_multiline_regexp = function(pattern) {
    var result;
    if (pattern.multiline) {
      if (pattern.global) {
        return pattern; // RegExp already has the global and multiline flag
      }
      // we are using the $$g attribute because the Regexp is already multiline
      if (pattern.$$g != null) {
        result = pattern.$$g;
      } else {
        result = pattern.$$g = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
      }
    } else if (pattern.$$gm != null) {
      result = pattern.$$gm;
    } else {
      result = pattern.$$gm = new RegExp(pattern.source, 'gm' + (pattern.ignoreCase ? 'i' : ''));
    }
    result.lastIndex = null; // reset lastIndex property
    return result;
  };

  // Require system
  // --------------

  Opal.modules         = {};
  Opal.loaded_features = ['corelib/runtime'];
  Opal.current_dir     = '.';
  Opal.require_table   = {'corelib/runtime': true};

  Opal.normalize = function(path) {
    var parts, part, new_parts = [], SEPARATOR = '/';

    if (Opal.current_dir !== '.') {
      path = Opal.current_dir.replace(/\/*$/, '/') + path;
    }

    path = path.replace(/^\.\//, '');
    path = path.replace(/\.(rb|opal|js)$/, '');
    parts = path.split(SEPARATOR);

    for (var i = 0, ii = parts.length; i < ii; i++) {
      part = parts[i];
      if (part === '') continue;
      (part === '..') ? new_parts.pop() : new_parts.push(part)
    }

    return new_parts.join(SEPARATOR);
  };

  Opal.loaded = function(paths) {
    var i, l, path;

    for (i = 0, l = paths.length; i < l; i++) {
      path = Opal.normalize(paths[i]);

      if (Opal.require_table[path]) {
        continue;
      }

      Opal.loaded_features.push(path);
      Opal.require_table[path] = true;
    }
  };

  Opal.load = function(path) {
    path = Opal.normalize(path);

    Opal.loaded([path]);

    var module = Opal.modules[path];

    if (module) {
      module(Opal);
    }
    else {
      var severity = Opal.config.missing_require_severity;
      var message  = 'cannot load such file -- ' + path;

      if (severity === "error") {
        if (Opal.LoadError) {
          throw Opal.LoadError.$new(message)
        } else {
          throw message
        }
      }
      else if (severity === "warning") {
        console.warn('WARNING: LoadError: ' + message);
      }
    }

    return true;
  };

  Opal.require = function(path) {
    path = Opal.normalize(path);

    if (Opal.require_table[path]) {
      return false;
    }

    return Opal.load(path);
  };


  // Initialization
  // --------------
  function $BasicObject() {}
  function $Object() {}
  function $Module() {}
  function $Class() {}

  Opal.BasicObject = BasicObject = Opal.allocate_class('BasicObject', null, $BasicObject);
  Opal.Object      = _Object     = Opal.allocate_class('Object', Opal.BasicObject, $Object);
  Opal.Module      = Module      = Opal.allocate_class('Module', Opal.Object, $Module);
  Opal.Class       = Class       = Opal.allocate_class('Class', Opal.Module, $Class);

  $setPrototype(Opal.BasicObject, Opal.Class.$$prototype);
  $setPrototype(Opal.Object, Opal.Class.$$prototype);
  $setPrototype(Opal.Module, Opal.Class.$$prototype);
  $setPrototype(Opal.Class, Opal.Class.$$prototype);

  // BasicObject can reach itself, avoid const_set to skip the $$base_module logic
  BasicObject.$$const["BasicObject"] = BasicObject;

  // Assign basic constants
  Opal.const_set(_Object, "BasicObject",  BasicObject);
  Opal.const_set(_Object, "Object",       _Object);
  Opal.const_set(_Object, "Module",       Module);
  Opal.const_set(_Object, "Class",        Class);

  // Fix booted classes to have correct .class value
  BasicObject.$$class = Class;
  _Object.$$class     = Class;
  Module.$$class      = Class;
  Class.$$class       = Class;

  // Forward .toString() to #to_s
  $defineProperty(_Object.$$prototype, 'toString', function() {
    var to_s = this.$to_s();
    if (to_s.$$is_string && typeof(to_s) === 'object') {
      // a string created using new String('string')
      return to_s.valueOf();
    } else {
      return to_s;
    }
  });

  // Make Kernel#require immediately available as it's needed to require all the
  // other corelib files.
  $defineProperty(_Object.$$prototype, '$require', Opal.require);

  // Add a short helper to navigate constants manually.
  // @example
  //   Opal.$$.Regexp.$$.IGNORECASE
  Opal.$$ = _Object.$$;

  // Instantiate the main object
  Opal.top = new _Object();
  Opal.top.$to_s = Opal.top.$inspect = function() { return 'main' };


  // Nil
  function $NilClass() {}
  Opal.NilClass = Opal.allocate_class('NilClass', Opal.Object, $NilClass);
  Opal.const_set(_Object, 'NilClass', Opal.NilClass);
  nil = Opal.nil = new Opal.NilClass();
  nil.$$id = nil_id;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };

  // Errors
  Opal.breaker  = new Error('unexpected break (old)');
  Opal.returner = new Error('unexpected return');
  TypeError.$$super = Error;
}).call(this);
Opal.loaded(["corelib/runtime.js"]);
/* Generated by Opal 1.0.0 */
Opal.modules["corelib/helpers"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$coerce_to!', '$!=', '$[]', '$upcase']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting), $Opal_bridge$1, $Opal_type_error$2, $Opal_coerce_to$3, $Opal_coerce_to$excl$4, $Opal_coerce_to$ques$5, $Opal_try_convert$6, $Opal_compare$7, $Opal_destructure$8, $Opal_respond_to$ques$9, $Opal_inspect_obj$10, $Opal_instance_variable_name$excl$11, $Opal_class_variable_name$excl$12, $Opal_const_name$excl$13, $Opal_pristine$14;

    
    Opal.defs(self, '$bridge', $Opal_bridge$1 = function $$bridge(constructor, klass) {
      var self = this;

      return Opal.bridge(constructor, klass);
    }, $Opal_bridge$1.$$arity = 2);
    Opal.defs(self, '$type_error', $Opal_type_error$2 = function $$type_error(object, type, method, coerced) {
      var $a, self = this;

      
      
      if (method == null) {
        method = nil;
      };
      
      if (coerced == null) {
        coerced = nil;
      };
      if ($truthy(($truthy($a = method) ? coerced : $a))) {
        return $$($nesting, 'TypeError').$new("" + "can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()) + ")")
      } else {
        return $$($nesting, 'TypeError').$new("" + "no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    }, $Opal_type_error$2.$$arity = -3);
    Opal.defs(self, '$coerce_to', $Opal_coerce_to$3 = function $$coerce_to(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
      } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    }, $Opal_coerce_to$3.$$arity = 3);
    Opal.defs(self, '$coerce_to!', $Opal_coerce_to$excl$4 = function(object, type, method) {
      var self = this, coerced = nil;

      
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(type['$==='](coerced))) {
      } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, $Opal_coerce_to$excl$4.$$arity = 3);
    Opal.defs(self, '$coerce_to?', $Opal_coerce_to$ques$5 = function(object, type, method) {
      var self = this, coerced = nil;

      
      if ($truthy(object['$respond_to?'](method))) {
      } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ($truthy(coerced['$nil?']())) {
        return nil};
      if ($truthy(type['$==='](coerced))) {
      } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    }, $Opal_coerce_to$ques$5.$$arity = 3);
    Opal.defs(self, '$try_convert', $Opal_try_convert$6 = function $$try_convert(object, type, method) {
      var self = this;

      
      if ($truthy(type['$==='](object))) {
        return object};
      if ($truthy(object['$respond_to?'](method))) {
        return object.$__send__(method)
      } else {
        return nil
      };
    }, $Opal_try_convert$6.$$arity = 3);
    Opal.defs(self, '$compare', $Opal_compare$7 = function $$compare(a, b) {
      var self = this, compare = nil;

      
      compare = a['$<=>'](b);
      if ($truthy(compare === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (a.$class()) + " with " + (b.$class()) + " failed")};
      return compare;
    }, $Opal_compare$7.$$arity = 2);
    Opal.defs(self, '$destructure', $Opal_destructure$8 = function $$destructure(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args.$$is_array) {
        return args;
      }
      else {
        var args_ary = new Array(args.length);
        for(var i = 0, l = args_ary.length; i < l; i++) { args_ary[i] = args[i]; }

        return args_ary;
      }
    
    }, $Opal_destructure$8.$$arity = 1);
    Opal.defs(self, '$respond_to?', $Opal_respond_to$ques$9 = function(obj, method, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      
      if (obj == null || !obj.$$class) {
        return false;
      }
    ;
      return obj['$respond_to?'](method, include_all);
    }, $Opal_respond_to$ques$9.$$arity = -3);
    Opal.defs(self, '$inspect_obj', $Opal_inspect_obj$10 = function $$inspect_obj(obj) {
      var self = this;

      return Opal.inspect(obj);
    }, $Opal_inspect_obj$10.$$arity = 1);
    Opal.defs(self, '$instance_variable_name!', $Opal_instance_variable_name$excl$11 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      if ($truthy(/^@[a-zA-Z_][a-zA-Z0-9_]*?$/.test(name))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "'" + (name) + "' is not allowed as an instance variable name", name))
      };
      return name;
    }, $Opal_instance_variable_name$excl$11.$$arity = 1);
    Opal.defs(self, '$class_variable_name!', $Opal_class_variable_name$excl$12 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      if ($truthy(name.length < 3 || name.slice(0,2) !== '@@')) {
        self.$raise($$($nesting, 'NameError').$new("" + "`" + (name) + "' is not allowed as a class variable name", name))};
      return name;
    }, $Opal_class_variable_name$excl$12.$$arity = 1);
    Opal.defs(self, '$const_name!', $Opal_const_name$excl$13 = function(const_name) {
      var self = this;

      
      const_name = $$($nesting, 'Opal')['$coerce_to!'](const_name, $$($nesting, 'String'), "to_str");
      if ($truthy(const_name['$[]'](0)['$!='](const_name['$[]'](0).$upcase()))) {
        self.$raise($$($nesting, 'NameError'), "" + "wrong constant name " + (const_name))};
      return const_name;
    }, $Opal_const_name$excl$13.$$arity = 1);
    Opal.defs(self, '$pristine', $Opal_pristine$14 = function $$pristine(owner_class, $a) {
      var $post_args, method_names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      method_names = $post_args;;
      
      var method_name, method;
      for (var i = method_names.length - 1; i >= 0; i--) {
        method_name = method_names[i];
        method = owner_class.$$prototype['$'+method_name];

        if (method && !method.$$stub) {
          method.$$pristine = true;
        }
      }
    ;
      return nil;
    }, $Opal_pristine$14.$$arity = -2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/module"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $lambda = Opal.lambda, $range = Opal.range, $hash2 = Opal.hash2;

  Opal.add_stubs(['$module_eval', '$to_proc', '$===', '$raise', '$equal?', '$<', '$>', '$nil?', '$attr_reader', '$attr_writer', '$class_variable_name!', '$new', '$const_name!', '$=~', '$inject', '$split', '$const_get', '$==', '$!~', '$start_with?', '$bind', '$call', '$class', '$append_features', '$included', '$name', '$cover?', '$size', '$merge', '$compile', '$proc', '$any?', '$prepend_features', '$prepended', '$to_s', '$__id__', '$constants', '$include?', '$copy_class_variables', '$copy_constants']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_allocate$1, $Module_initialize$2, $Module_$eq_eq_eq$3, $Module_$lt$4, $Module_$lt_eq$5, $Module_$gt$6, $Module_$gt_eq$7, $Module_$lt_eq_gt$8, $Module_alias_method$9, $Module_alias_native$10, $Module_ancestors$11, $Module_append_features$12, $Module_attr_accessor$13, $Module_attr_reader$14, $Module_attr_writer$15, $Module_autoload$16, $Module_class_variables$17, $Module_class_variable_get$18, $Module_class_variable_set$19, $Module_class_variable_defined$ques$20, $Module_remove_class_variable$21, $Module_constants$22, $Module_constants$23, $Module_nesting$24, $Module_const_defined$ques$25, $Module_const_get$26, $Module_const_missing$28, $Module_const_set$29, $Module_public_constant$30, $Module_define_method$31, $Module_remove_method$33, $Module_singleton_class$ques$34, $Module_include$35, $Module_included_modules$36, $Module_include$ques$37, $Module_instance_method$38, $Module_instance_methods$39, $Module_included$40, $Module_extended$41, $Module_extend_object$42, $Module_method_added$43, $Module_method_removed$44, $Module_method_undefined$45, $Module_module_eval$46, $Module_module_exec$48, $Module_method_defined$ques$49, $Module_module_function$50, $Module_name$51, $Module_prepend$52, $Module_prepend_features$53, $Module_prepended$54, $Module_remove_const$55, $Module_to_s$56, $Module_undef_method$57, $Module_instance_variables$58, $Module_dup$59, $Module_copy_class_variables$60, $Module_copy_constants$61;

    
    Opal.defs(self, '$allocate', $Module_allocate$1 = function $$allocate() {
      var self = this;

      
      var module = Opal.allocate_module(nil, function(){});
      // Link the prototype of Module subclasses
      if (self !== Opal.Module) Object.setPrototypeOf(module, self.$$prototype);
      return module;
    
    }, $Module_allocate$1.$$arity = 0);
    
    Opal.def(self, '$initialize', $Module_initialize$2 = function $$initialize() {
      var $iter = $Module_initialize$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Module_initialize$2.$$p = null;
      
      
      if ($iter) $Module_initialize$2.$$p = null;;
      if ((block !== nil)) {
        return $send(self, 'module_eval', [], block.$to_proc())
      } else {
        return nil
      };
    }, $Module_initialize$2.$$arity = 0);
    
    Opal.def(self, '$===', $Module_$eq_eq_eq$3 = function(object) {
      var self = this;

      
      if ($truthy(object == null)) {
        return false};
      return Opal.is_a(object, self);;
    }, $Module_$eq_eq_eq$3.$$arity = 1);
    
    Opal.def(self, '$<', $Module_$lt$4 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "compared with non class/module")
      };
      
      var working = self,
          ancestors,
          i, length;

      if (working === other) {
        return false;
      }

      for (i = 0, ancestors = Opal.ancestors(self), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === other) {
          return true;
        }
      }

      for (i = 0, ancestors = Opal.ancestors(other), length = ancestors.length; i < length; i++) {
        if (ancestors[i] === self) {
          return false;
        }
      }

      return nil;
    ;
    }, $Module_$lt$4.$$arity = 1);
    
    Opal.def(self, '$<=', $Module_$lt_eq$5 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_lt(self, other))
    }, $Module_$lt_eq$5.$$arity = 1);
    
    Opal.def(self, '$>', $Module_$gt$6 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "compared with non class/module")
      };
      return $rb_lt(other, self);
    }, $Module_$gt$6.$$arity = 1);
    
    Opal.def(self, '$>=', $Module_$gt_eq$7 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$equal?'](other)) ? $a : $rb_gt(self, other))
    }, $Module_$gt_eq$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $Module_$lt_eq_gt$8 = function(other) {
      var self = this, lt = nil;

      
      
      if (self === other) {
        return 0;
      }
    ;
      if ($truthy($$($nesting, 'Module')['$==='](other))) {
      } else {
        return nil
      };
      lt = $rb_lt(self, other);
      if ($truthy(lt['$nil?']())) {
        return nil};
      if ($truthy(lt)) {
        return -1
      } else {
        return 1
      };
    }, $Module_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$alias_method', $Module_alias_method$9 = function $$alias_method(newname, oldname) {
      var self = this;

      
      Opal.alias(self, newname, oldname);
      return self;
    }, $Module_alias_method$9.$$arity = 2);
    
    Opal.def(self, '$alias_native', $Module_alias_native$10 = function $$alias_native(mid, jsid) {
      var self = this;

      
      
      if (jsid == null) {
        jsid = mid;
      };
      Opal.alias_native(self, mid, jsid);
      return self;
    }, $Module_alias_native$10.$$arity = -2);
    
    Opal.def(self, '$ancestors', $Module_ancestors$11 = function $$ancestors() {
      var self = this;

      return Opal.ancestors(self);
    }, $Module_ancestors$11.$$arity = 0);
    
    Opal.def(self, '$append_features', $Module_append_features$12 = function $$append_features(includer) {
      var self = this;

      
      Opal.append_features(self, includer);
      return self;
    }, $Module_append_features$12.$$arity = 1);
    
    Opal.def(self, '$attr_accessor', $Module_attr_accessor$13 = function $$attr_accessor($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      $send(self, 'attr_reader', Opal.to_a(names));
      return $send(self, 'attr_writer', Opal.to_a(names));
    }, $Module_attr_accessor$13.$$arity = -1);
    Opal.alias(self, "attr", "attr_accessor");
    
    Opal.def(self, '$attr_reader', $Module_attr_reader$14 = function $$attr_reader($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      var proto = self.$$prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name,
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar) {
          return function() {
            if (this[ivar] == null) {
              return nil;
            }
            else {
              return this[ivar];
            }
          };
        })(ivar);

        // initialize the instance variable as nil
        Opal.defineProperty(proto, ivar, nil);

        body.$$parameters = [];
        body.$$arity = 0;

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, $Module_attr_reader$14.$$arity = -1);
    
    Opal.def(self, '$attr_writer', $Module_attr_writer$15 = function $$attr_writer($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      var proto = self.$$prototype;

      for (var i = names.length - 1; i >= 0; i--) {
        var name = names[i],
            id   = '$' + name + '=',
            ivar = Opal.ivar(name);

        // the closure here is needed because name will change at the next
        // cycle, I wish we could use let.
        var body = (function(ivar){
          return function(value) {
            return this[ivar] = value;
          }
        })(ivar);

        body.$$parameters = [['req']];
        body.$$arity = 1;

        // initialize the instance variable as nil
        Opal.defineProperty(proto, ivar, nil);

        Opal.defn(self, id, body);
      }
    ;
      return nil;
    }, $Module_attr_writer$15.$$arity = -1);
    
    Opal.def(self, '$autoload', $Module_autoload$16 = function $$autoload(const$, path) {
      var self = this;

      
      if (self.$$autoload == null) self.$$autoload = {};
      Opal.const_cache_version++;
      self.$$autoload[const$] = path;
      return nil;
    
    }, $Module_autoload$16.$$arity = 2);
    
    Opal.def(self, '$class_variables', $Module_class_variables$17 = function $$class_variables() {
      var self = this;

      return Object.keys(Opal.class_variables(self));
    }, $Module_class_variables$17.$$arity = 0);
    
    Opal.def(self, '$class_variable_get', $Module_class_variable_get$18 = function $$class_variable_get(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      
      var value = Opal.class_variables(self)[name];
      if (value == null) {
        self.$raise($$($nesting, 'NameError').$new("" + "uninitialized class variable " + (name) + " in " + (self), name))
      }
      return value;
    ;
    }, $Module_class_variable_get$18.$$arity = 1);
    
    Opal.def(self, '$class_variable_set', $Module_class_variable_set$19 = function $$class_variable_set(name, value) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variable_set(self, name, value);;
    }, $Module_class_variable_set$19.$$arity = 2);
    
    Opal.def(self, '$class_variable_defined?', $Module_class_variable_defined$ques$20 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      return Opal.class_variables(self).hasOwnProperty(name);;
    }, $Module_class_variable_defined$ques$20.$$arity = 1);
    
    Opal.def(self, '$remove_class_variable', $Module_remove_class_variable$21 = function $$remove_class_variable(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$class_variable_name!'](name);
      
      if (Opal.hasOwnProperty.call(self.$$cvars, name)) {
        var value = self.$$cvars[name];
        delete self.$$cvars[name];
        return value;
      } else {
        self.$raise($$($nesting, 'NameError'), "" + "cannot remove " + (name) + " for " + (self))
      }
    ;
    }, $Module_remove_class_variable$21.$$arity = 1);
    
    Opal.def(self, '$constants', $Module_constants$22 = function $$constants(inherit) {
      var self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      return Opal.constants(self, inherit);;
    }, $Module_constants$22.$$arity = -1);
    Opal.defs(self, '$constants', $Module_constants$23 = function $$constants(inherit) {
      var self = this;

      
      ;
      
      if (inherit == null) {
        var nesting = (self.$$nesting || []).concat(Opal.Object),
            constant, constants = {},
            i, ii;

        for(i = 0, ii = nesting.length; i < ii; i++) {
          for (constant in nesting[i].$$const) {
            constants[constant] = true;
          }
        }
        return Object.keys(constants);
      } else {
        return Opal.constants(self, inherit)
      }
    ;
    }, $Module_constants$23.$$arity = -1);
    Opal.defs(self, '$nesting', $Module_nesting$24 = function $$nesting() {
      var self = this;

      return self.$$nesting || [];
    }, $Module_nesting$24.$$arity = 0);
    
    Opal.def(self, '$const_defined?', $Module_const_defined$ques$25 = function(name, inherit) {
      var self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      name = $$($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      var module, modules = [self], module_constants, i, ii;

      // Add up ancestors if inherit is true
      if (inherit) {
        modules = modules.concat(Opal.ancestors(self));

        // Add Object's ancestors if it's a module – modules have no ancestors otherwise
        if (self.$$is_module) {
          modules = modules.concat([Opal.Object]).concat(Opal.ancestors(Opal.Object));
        }
      }

      for (i = 0, ii = modules.length; i < ii; i++) {
        module = modules[i];
        if (module.$$const[name] != null) {
          return true;
        }
      }

      return false;
    ;
    }, $Module_const_defined$ques$25.$$arity = -2);
    
    Opal.def(self, '$const_get', $Module_const_get$26 = function $$const_get(name, inherit) {
      var $$27, self = this;

      
      
      if (inherit == null) {
        inherit = true;
      };
      name = $$($nesting, 'Opal')['$const_name!'](name);
      
      if (name.indexOf('::') === 0 && name !== '::'){
        name = name.slice(2);
      }
    ;
      if ($truthy(name.indexOf('::') != -1 && name != '::')) {
        return $send(name.$split("::"), 'inject', [self], ($$27 = function(o, c){var self = $$27.$$s || this;

        
          
          if (o == null) {
            o = nil;
          };
          
          if (c == null) {
            c = nil;
          };
          return o.$const_get(c);}, $$27.$$s = self, $$27.$$arity = 2, $$27))};
      if ($truthy(name['$=~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP')))) {
      } else {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))
      };
      
      if (inherit) {
        return $$([self], name);
      } else {
        return Opal.const_get_local(self, name);
      }
    ;
    }, $Module_const_get$26.$$arity = -2);
    
    Opal.def(self, '$const_missing', $Module_const_missing$28 = function $$const_missing(name) {
      var self = this, full_const_name = nil;

      
      
      if (self.$$autoload) {
        var file = self.$$autoload[name];

        if (file) {
          self.$require(file);

          return self.$const_get(name);
        }
      }
    ;
      full_const_name = (function() {if (self['$==']($$($nesting, 'Object'))) {
        return name
      } else {
        return "" + (self) + "::" + (name)
      }; return nil; })();
      return self.$raise($$($nesting, 'NameError').$new("" + "uninitialized constant " + (full_const_name), name));
    }, $Module_const_missing$28.$$arity = 1);
    
    Opal.def(self, '$const_set', $Module_const_set$29 = function $$const_set(name, value) {
      var $a, self = this;

      
      name = $$($nesting, 'Opal')['$const_name!'](name);
      if ($truthy(($truthy($a = name['$!~']($$$($$($nesting, 'Opal'), 'CONST_NAME_REGEXP'))) ? $a : name['$start_with?']("::")))) {
        self.$raise($$($nesting, 'NameError').$new("" + "wrong constant name " + (name), name))};
      Opal.const_set(self, name, value);
      return value;
    }, $Module_const_set$29.$$arity = 2);
    
    Opal.def(self, '$public_constant', $Module_public_constant$30 = function $$public_constant(const_name) {
      var self = this;

      return nil
    }, $Module_public_constant$30.$$arity = 1);
    
    Opal.def(self, '$define_method', $Module_define_method$31 = function $$define_method(name, method) {
      var $iter = $Module_define_method$31.$$p, block = $iter || nil, $a, $$32, self = this, $case = nil;

      if ($iter) $Module_define_method$31.$$p = null;
      
      
      if ($iter) $Module_define_method$31.$$p = null;;
      ;
      if ($truthy(method === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create a Proc object without a block")};
      block = ($truthy($a = block) ? $a : (function() {$case = method;
      if ($$($nesting, 'Proc')['$===']($case)) {return method}
      else if ($$($nesting, 'Method')['$===']($case)) {return method.$to_proc().$$unbound}
      else if ($$($nesting, 'UnboundMethod')['$===']($case)) {return $lambda(($$32 = function($b){var self = $$32.$$s || this, $post_args, args, bound = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        bound = method.$bind(self);
        return $send(bound, 'call', Opal.to_a(args));}, $$32.$$s = self, $$32.$$arity = -1, $$32))}
      else {return self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (block.$class()) + " (expected Proc/Method)")}})());
      
      var id = '$' + name;

      block.$$jsid        = name;
      block.$$s           = null;
      block.$$def         = block;
      block.$$define_meth = true;

      Opal.defn(self, id, block);

      return name;
    ;
    }, $Module_define_method$31.$$arity = -2);
    
    Opal.def(self, '$remove_method', $Module_remove_method$33 = function $$remove_method($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.rdef(self, "$" + names[i]);
      }
    ;
      return self;
    }, $Module_remove_method$33.$$arity = -1);
    
    Opal.def(self, '$singleton_class?', $Module_singleton_class$ques$34 = function() {
      var self = this;

      return !!self.$$is_singleton;
    }, $Module_singleton_class$ques$34.$$arity = 0);
    
    Opal.def(self, '$include', $Module_include$35 = function $$include($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    ;
      return self;
    }, $Module_include$35.$$arity = -1);
    
    Opal.def(self, '$included_modules', $Module_included_modules$36 = function $$included_modules() {
      var self = this;

      return Opal.included_modules(self);
    }, $Module_included_modules$36.$$arity = 0);
    
    Opal.def(self, '$include?', $Module_include$ques$37 = function(mod) {
      var self = this;

      
      if (!mod.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
      }

      var i, ii, mod2, ancestors = Opal.ancestors(self);

      for (i = 0, ii = ancestors.length; i < ii; i++) {
        mod2 = ancestors[i];
        if (mod2 === mod && mod2 !== self) {
          return true;
        }
      }

      return false;
    
    }, $Module_include$ques$37.$$arity = 1);
    
    Opal.def(self, '$instance_method', $Module_instance_method$38 = function $$instance_method(name) {
      var self = this;

      
      var meth = self.$$prototype['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$name()) + "'", name));
      }

      return $$($nesting, 'UnboundMethod').$new(self, meth.$$owner || self, meth, name);
    
    }, $Module_instance_method$38.$$arity = 1);
    
    Opal.def(self, '$instance_methods', $Module_instance_methods$39 = function $$instance_methods(include_super) {
      var self = this;

      
      
      if (include_super == null) {
        include_super = true;
      };
      
      if ($truthy(include_super)) {
        return Opal.instance_methods(self);
      } else {
        return Opal.own_instance_methods(self);
      }
    ;
    }, $Module_instance_methods$39.$$arity = -1);
    
    Opal.def(self, '$included', $Module_included$40 = function $$included(mod) {
      var self = this;

      return nil
    }, $Module_included$40.$$arity = 1);
    
    Opal.def(self, '$extended', $Module_extended$41 = function $$extended(mod) {
      var self = this;

      return nil
    }, $Module_extended$41.$$arity = 1);
    
    Opal.def(self, '$extend_object', $Module_extend_object$42 = function $$extend_object(object) {
      var self = this;

      return nil
    }, $Module_extend_object$42.$$arity = 1);
    
    Opal.def(self, '$method_added', $Module_method_added$43 = function $$method_added($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_method_added$43.$$arity = -1);
    
    Opal.def(self, '$method_removed', $Module_method_removed$44 = function $$method_removed($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_method_removed$44.$$arity = -1);
    
    Opal.def(self, '$method_undefined', $Module_method_undefined$45 = function $$method_undefined($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_method_undefined$45.$$arity = -1);
    
    Opal.def(self, '$module_eval', $Module_module_eval$46 = function $$module_eval($a) {
      var $iter = $Module_module_eval$46.$$p, block = $iter || nil, $post_args, args, $b, $$47, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      if ($iter) $Module_module_eval$46.$$p = null;
      
      
      if ($iter) $Module_module_eval$46.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
        } else {
          $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $$($nesting, 'Opal').$compile(string, compiling_options);
        block = $send($$($nesting, 'Kernel'), 'proc', [], ($$47 = function(){var self = $$47.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, $$47.$$s = self, $$47.$$arity = 0, $$47));
      } else if ($truthy(args['$any?']())) {
        $$($nesting, 'Kernel').$raise($$($nesting, 'ArgumentError'), "" + ("" + "wrong number of arguments (" + (args.$size()) + " for 0)") + "\n\n  NOTE:If you want to enable passing a String argument please add \"require 'opal-parser'\" to your script\n")};
      
      var old = block.$$s,
          result;

      block.$$s = null;
      result = block.apply(self, [self]);
      block.$$s = old;

      return result;
    ;
    }, $Module_module_eval$46.$$arity = -1);
    Opal.alias(self, "class_eval", "module_eval");
    
    Opal.def(self, '$module_exec', $Module_module_exec$48 = function $$module_exec($a) {
      var $iter = $Module_module_exec$48.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Module_module_exec$48.$$p = null;
      
      
      if ($iter) $Module_module_exec$48.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      if (block === nil) {
        self.$raise($$($nesting, 'LocalJumpError'), "no block given")
      }

      var block_self = block.$$s, result;

      block.$$s = null;
      result = block.apply(self, args);
      block.$$s = block_self;

      return result;
    ;
    }, $Module_module_exec$48.$$arity = -1);
    Opal.alias(self, "class_exec", "module_exec");
    
    Opal.def(self, '$method_defined?', $Module_method_defined$ques$49 = function(method) {
      var self = this;

      
      var body = self.$$prototype['$' + method];
      return (!!body) && !body.$$stub;
    
    }, $Module_method_defined$ques$49.$$arity = 1);
    
    Opal.def(self, '$module_function', $Module_module_function$50 = function $$module_function($a) {
      var $post_args, methods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      
      if (methods.length === 0) {
        self.$$module_function = true;
      }
      else {
        for (var i = 0, length = methods.length; i < length; i++) {
          var meth = methods[i],
              id   = '$' + meth,
              func = self.$$prototype[id];

          Opal.defs(self, id, func);
        }
      }

      return self;
    ;
    }, $Module_module_function$50.$$arity = -1);
    
    Opal.def(self, '$name', $Module_name$51 = function $$name() {
      var self = this;

      
      if (self.$$full_name) {
        return self.$$full_name;
      }

      var result = [], base = self;

      while (base) {
        // Give up if any of the ancestors is unnamed
        if (base.$$name === nil || base.$$name == null) return nil;

        result.unshift(base.$$name);

        base = base.$$base_module;

        if (base === Opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self.$$full_name = result.join('::');
    
    }, $Module_name$51.$$arity = 0);
    
    Opal.def(self, '$prepend', $Module_prepend$52 = function $$prepend($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      if (mods.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (given 0, expected 1+)")
      }

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$prepend_features(self);
        (mod).$prepended(self);
      }
    ;
      return self;
    }, $Module_prepend$52.$$arity = -1);
    
    Opal.def(self, '$prepend_features', $Module_prepend_features$53 = function $$prepend_features(prepender) {
      var self = this;

      
      
      if (!self.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (self.$class()) + " (expected Module)");
      }

      Opal.prepend_features(self, prepender)
    ;
      return self;
    }, $Module_prepend_features$53.$$arity = 1);
    
    Opal.def(self, '$prepended', $Module_prepended$54 = function $$prepended(mod) {
      var self = this;

      return nil
    }, $Module_prepended$54.$$arity = 1);
    
    Opal.def(self, '$remove_const', $Module_remove_const$55 = function $$remove_const(name) {
      var self = this;

      return Opal.const_remove(self, name);
    }, $Module_remove_const$55.$$arity = 1);
    
    Opal.def(self, '$to_s', $Module_to_s$56 = function $$to_s() {
      var $a, self = this;

      return ($truthy($a = Opal.Module.$name.call(self)) ? $a : "" + "#<" + (self.$$is_module ? 'Module' : 'Class') + ":0x" + (self.$__id__().$to_s(16)) + ">")
    }, $Module_to_s$56.$$arity = 0);
    
    Opal.def(self, '$undef_method', $Module_undef_method$57 = function $$undef_method($a) {
      var $post_args, names, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      names = $post_args;;
      
      for (var i = 0, length = names.length; i < length; i++) {
        Opal.udef(self, "$" + names[i]);
      }
    ;
      return self;
    }, $Module_undef_method$57.$$arity = -1);
    
    Opal.def(self, '$instance_variables', $Module_instance_variables$58 = function $$instance_variables() {
      var self = this, consts = nil;

      
      consts = (Opal.Module.$$nesting = $nesting, self.$constants());
      
      var result = [];

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$' && name !== 'constructor' && !consts['$include?'](name)) {
          result.push('@' + name);
        }
      }

      return result;
    ;
    }, $Module_instance_variables$58.$$arity = 0);
    
    Opal.def(self, '$dup', $Module_dup$59 = function $$dup() {
      var $iter = $Module_dup$59.$$p, $yield = $iter || nil, self = this, copy = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Module_dup$59.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      copy = $send(self, Opal.find_super_dispatcher(self, 'dup', $Module_dup$59, false), $zuper, $iter);
      copy.$copy_class_variables(self);
      copy.$copy_constants(self);
      return copy;
    }, $Module_dup$59.$$arity = 0);
    
    Opal.def(self, '$copy_class_variables', $Module_copy_class_variables$60 = function $$copy_class_variables(other) {
      var self = this;

      
      for (var name in other.$$cvars) {
        self.$$cvars[name] = other.$$cvars[name];
      }
    
    }, $Module_copy_class_variables$60.$$arity = 1);
    return (Opal.def(self, '$copy_constants', $Module_copy_constants$61 = function $$copy_constants(other) {
      var self = this;

      
      var name, other_constants = other.$$const;

      for (name in other_constants) {
        Opal.const_set(self, name, other_constants[name]);
      }
    
    }, $Module_copy_constants$61.$$arity = 1), nil) && 'copy_constants';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/class"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$class_eval', '$to_proc', '$initialize_copy', '$allocate', '$name', '$to_s']);
  
  self.$require("corelib/module");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $Class_new$1, $Class_allocate$2, $Class_inherited$3, $Class_initialize_dup$4, $Class_new$5, $Class_superclass$6, $Class_to_s$7;

    
    Opal.defs(self, '$new', $Class_new$1 = function(superclass) {
      var $iter = $Class_new$1.$$p, block = $iter || nil, self = this;

      if ($iter) $Class_new$1.$$p = null;
      
      
      if ($iter) $Class_new$1.$$p = null;;
      
      if (superclass == null) {
        superclass = $$($nesting, 'Object');
      };
      
      if (!superclass.$$is_class) {
        throw Opal.TypeError.$new("superclass must be a Class");
      }

      var klass = Opal.allocate_class(nil, superclass);
      superclass.$inherited(klass);
      (function() {if ((block !== nil)) {
        return $send((klass), 'class_eval', [], block.$to_proc())
      } else {
        return nil
      }; return nil; })()
      return klass;
    ;
    }, $Class_new$1.$$arity = -1);
    
    Opal.def(self, '$allocate', $Class_allocate$2 = function $$allocate() {
      var self = this;

      
      var obj = new self.$$constructor();
      obj.$$id = Opal.uid();
      return obj;
    
    }, $Class_allocate$2.$$arity = 0);
    
    Opal.def(self, '$inherited', $Class_inherited$3 = function $$inherited(cls) {
      var self = this;

      return nil
    }, $Class_inherited$3.$$arity = 1);
    
    Opal.def(self, '$initialize_dup', $Class_initialize_dup$4 = function $$initialize_dup(original) {
      var self = this;

      
      self.$initialize_copy(original);
      
      self.$$name = null;
      self.$$full_name = null;
    ;
    }, $Class_initialize_dup$4.$$arity = 1);
    
    Opal.def(self, '$new', $Class_new$5 = function($a) {
      var $iter = $Class_new$5.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Class_new$5.$$p = null;
      
      
      if ($iter) $Class_new$5.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var object = self.$allocate();
      Opal.send(object, object.$initialize, args, block);
      return object;
    ;
    }, $Class_new$5.$$arity = -1);
    
    Opal.def(self, '$superclass', $Class_superclass$6 = function $$superclass() {
      var self = this;

      return self.$$super || nil;
    }, $Class_superclass$6.$$arity = 0);
    return (Opal.def(self, '$to_s', $Class_to_s$7 = function $$to_s() {
      var $iter = $Class_to_s$7.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Class_to_s$7.$$p = null;
      
      var singleton_of = self.$$singleton_of;

      if (singleton_of && (singleton_of.$$is_a_module)) {
        return "" + "#<Class:" + ((singleton_of).$name()) + ">";
      }
      else if (singleton_of) {
        // a singleton class created from an object
        return "" + "#<Class:#<" + ((singleton_of.$$class).$name()) + ":0x" + ((Opal.id(singleton_of)).$to_s(16)) + ">>";
      }
      return $send(self, Opal.find_super_dispatcher(self, 'to_s', $Class_to_s$7, false), [], null);
    
    }, $Class_to_s$7.$$arity = 0), nil) && 'to_s';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/basic_object"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$==', '$!', '$nil?', '$cover?', '$size', '$raise', '$merge', '$compile', '$proc', '$any?', '$inspect', '$new']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BasicObject');

    var $nesting = [self].concat($parent_nesting), $BasicObject_initialize$1, $BasicObject_$eq_eq$2, $BasicObject_eql$ques$3, $BasicObject___id__$4, $BasicObject___send__$5, $BasicObject_$excl$6, $BasicObject_$not_eq$7, $BasicObject_instance_eval$8, $BasicObject_instance_exec$10, $BasicObject_singleton_method_added$11, $BasicObject_singleton_method_removed$12, $BasicObject_singleton_method_undefined$13, $BasicObject_class$14, $BasicObject_method_missing$15;

    
    
    Opal.def(self, '$initialize', $BasicObject_initialize$1 = function $$initialize($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_initialize$1.$$arity = -1);
    
    Opal.def(self, '$==', $BasicObject_$eq_eq$2 = function(other) {
      var self = this;

      return self === other;
    }, $BasicObject_$eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$eql?', $BasicObject_eql$ques$3 = function(other) {
      var self = this;

      return self['$=='](other)
    }, $BasicObject_eql$ques$3.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    
    Opal.def(self, '$__id__', $BasicObject___id__$4 = function $$__id__() {
      var self = this;

      
      if (self.$$id != null) {
        return self.$$id;
      }
      Opal.defineProperty(self, '$$id', Opal.uid());
      return self.$$id;
    
    }, $BasicObject___id__$4.$$arity = 0);
    
    Opal.def(self, '$__send__', $BasicObject___send__$5 = function $$__send__(symbol, $a) {
      var $iter = $BasicObject___send__$5.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $BasicObject___send__$5.$$p = null;
      
      
      if ($iter) $BasicObject___send__$5.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func.$$p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing.$$p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    ;
    }, $BasicObject___send__$5.$$arity = -2);
    
    Opal.def(self, '$!', $BasicObject_$excl$6 = function() {
      var self = this;

      return false
    }, $BasicObject_$excl$6.$$arity = 0);
    
    Opal.def(self, '$!=', $BasicObject_$not_eq$7 = function(other) {
      var self = this;

      return self['$=='](other)['$!']()
    }, $BasicObject_$not_eq$7.$$arity = 1);
    
    Opal.def(self, '$instance_eval', $BasicObject_instance_eval$8 = function $$instance_eval($a) {
      var $iter = $BasicObject_instance_eval$8.$$p, block = $iter || nil, $post_args, args, $b, $$9, self = this, string = nil, file = nil, _lineno = nil, default_eval_options = nil, compiling_options = nil, compiled = nil;

      if ($iter) $BasicObject_instance_eval$8.$$p = null;
      
      
      if ($iter) $BasicObject_instance_eval$8.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? !!Opal.compile : $b))) {
        
        if ($truthy($range(1, 3, false)['$cover?'](args.$size()))) {
        } else {
          $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        };
        $b = [].concat(Opal.to_a(args)), (string = ($b[0] == null ? nil : $b[0])), (file = ($b[1] == null ? nil : $b[1])), (_lineno = ($b[2] == null ? nil : $b[2])), $b;
        default_eval_options = $hash2(["file", "eval"], {"file": ($truthy($b = file) ? $b : "(eval)"), "eval": true});
        compiling_options = Opal.hash({ arity_check: false }).$merge(default_eval_options);
        compiled = $$$('::', 'Opal').$compile(string, compiling_options);
        block = $send($$$('::', 'Kernel'), 'proc', [], ($$9 = function(){var self = $$9.$$s || this;

        
          return (function(self) {
            return eval(compiled);
          })(self)
        }, $$9.$$s = self, $$9.$$arity = 0, $$9));
      } else if ($truthy(args['$any?']())) {
        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "" + "wrong number of arguments (" + (args.$size()) + " for 0)")};
      
      var old = block.$$s,
          result;

      block.$$s = null;

      // Need to pass $$eval so that method definitions know if this is
      // being done on a class/module. Cannot be compiler driven since
      // send(:instance_eval) needs to work.
      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.call(self, self);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.call(self, self);
      }

      block.$$s = old;

      return result;
    ;
    }, $BasicObject_instance_eval$8.$$arity = -1);
    
    Opal.def(self, '$instance_exec', $BasicObject_instance_exec$10 = function $$instance_exec($a) {
      var $iter = $BasicObject_instance_exec$10.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $BasicObject_instance_exec$10.$$p = null;
      
      
      if ($iter) $BasicObject_instance_exec$10.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(block)) {
      } else {
        $$$('::', 'Kernel').$raise($$$('::', 'ArgumentError'), "no block given")
      };
      
      var block_self = block.$$s,
          result;

      block.$$s = null;

      if (self.$$is_a_module) {
        self.$$eval = true;
        try {
          result = block.apply(self, args);
        }
        finally {
          self.$$eval = false;
        }
      }
      else {
        result = block.apply(self, args);
      }

      block.$$s = block_self;

      return result;
    ;
    }, $BasicObject_instance_exec$10.$$arity = -1);
    
    Opal.def(self, '$singleton_method_added', $BasicObject_singleton_method_added$11 = function $$singleton_method_added($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_singleton_method_added$11.$$arity = -1);
    
    Opal.def(self, '$singleton_method_removed', $BasicObject_singleton_method_removed$12 = function $$singleton_method_removed($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_singleton_method_removed$12.$$arity = -1);
    
    Opal.def(self, '$singleton_method_undefined', $BasicObject_singleton_method_undefined$13 = function $$singleton_method_undefined($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $BasicObject_singleton_method_undefined$13.$$arity = -1);
    
    Opal.def(self, '$class', $BasicObject_class$14 = function() {
      var self = this;

      return self.$$class;
    }, $BasicObject_class$14.$$arity = 0);
    return (Opal.def(self, '$method_missing', $BasicObject_method_missing$15 = function $$method_missing(symbol, $a) {
      var $iter = $BasicObject_method_missing$15.$$p, block = $iter || nil, $post_args, args, self = this, message = nil;

      if ($iter) $BasicObject_method_missing$15.$$p = null;
      
      
      if ($iter) $BasicObject_method_missing$15.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      message = (function() {if ($truthy(self.$inspect && !self.$inspect.$$stub)) {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$inspect()) + ":" + (self.$$class)
      } else {
        return "" + "undefined method `" + (symbol) + "' for " + (self.$$class)
      }; return nil; })();
      return $$$('::', 'Kernel').$raise($$$('::', 'NoMethodError').$new(message, symbol));
    }, $BasicObject_method_missing$15.$$arity = -2), nil) && 'method_missing';
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/kernel"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars, $hash2 = Opal.hash2, $send = Opal.send, $klass = Opal.klass;

  Opal.add_stubs(['$raise', '$new', '$inspect', '$!', '$=~', '$==', '$object_id', '$class', '$coerce_to?', '$<<', '$allocate', '$copy_instance_variables', '$copy_singleton_methods', '$initialize_clone', '$initialize_copy', '$define_method', '$singleton_class', '$to_proc', '$initialize_dup', '$for', '$empty?', '$pop', '$call', '$coerce_to', '$append_features', '$extend_object', '$extended', '$__id__', '$to_s', '$instance_variable_name!', '$respond_to?', '$to_int', '$coerce_to!', '$Integer', '$nil?', '$===', '$enum_for', '$result', '$any?', '$print', '$format', '$puts', '$each', '$<=', '$length', '$[]', '$exception', '$is_a?', '$rand', '$respond_to_missing?', '$try_convert!', '$expand_path', '$join', '$start_with?', '$new_seed', '$srand', '$sym', '$arg', '$open', '$include']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_method_missing$1, $Kernel_$eq_tilde$2, $Kernel_$excl_tilde$3, $Kernel_$eq_eq_eq$4, $Kernel_$lt_eq_gt$5, $Kernel_method$6, $Kernel_methods$7, $Kernel_public_methods$8, $Kernel_Array$9, $Kernel_at_exit$10, $Kernel_caller$11, $Kernel_class$12, $Kernel_copy_instance_variables$13, $Kernel_copy_singleton_methods$14, $Kernel_clone$15, $Kernel_initialize_clone$16, $Kernel_define_singleton_method$17, $Kernel_dup$18, $Kernel_initialize_dup$19, $Kernel_enum_for$20, $Kernel_equal$ques$21, $Kernel_exit$22, $Kernel_extend$23, $Kernel_hash$24, $Kernel_initialize_copy$25, $Kernel_inspect$26, $Kernel_instance_of$ques$27, $Kernel_instance_variable_defined$ques$28, $Kernel_instance_variable_get$29, $Kernel_instance_variable_set$30, $Kernel_remove_instance_variable$31, $Kernel_instance_variables$32, $Kernel_Integer$33, $Kernel_Float$34, $Kernel_Hash$35, $Kernel_is_a$ques$36, $Kernel_itself$37, $Kernel_lambda$38, $Kernel_load$39, $Kernel_loop$40, $Kernel_nil$ques$42, $Kernel_printf$43, $Kernel_proc$44, $Kernel_puts$45, $Kernel_p$46, $Kernel_print$48, $Kernel_warn$49, $Kernel_raise$50, $Kernel_rand$51, $Kernel_respond_to$ques$52, $Kernel_respond_to_missing$ques$53, $Kernel_require$54, $Kernel_require_relative$55, $Kernel_require_tree$56, $Kernel_singleton_class$57, $Kernel_sleep$58, $Kernel_srand$59, $Kernel_String$60, $Kernel_tap$61, $Kernel_to_proc$62, $Kernel_to_s$63, $Kernel_catch$64, $Kernel_throw$65, $Kernel_open$66, $Kernel_yield_self$67;

    
    
    Opal.def(self, '$method_missing', $Kernel_method_missing$1 = function $$method_missing(symbol, $a) {
      var $iter = $Kernel_method_missing$1.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_method_missing$1.$$p = null;
      
      
      if ($iter) $Kernel_method_missing$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      return self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `" + (symbol) + "' for " + (self.$inspect()), symbol, args));
    }, $Kernel_method_missing$1.$$arity = -2);
    
    Opal.def(self, '$=~', $Kernel_$eq_tilde$2 = function(obj) {
      var self = this;

      return false
    }, $Kernel_$eq_tilde$2.$$arity = 1);
    
    Opal.def(self, '$!~', $Kernel_$excl_tilde$3 = function(obj) {
      var self = this;

      return self['$=~'](obj)['$!']()
    }, $Kernel_$excl_tilde$3.$$arity = 1);
    
    Opal.def(self, '$===', $Kernel_$eq_eq_eq$4 = function(other) {
      var $a, self = this;

      return ($truthy($a = self.$object_id()['$=='](other.$object_id())) ? $a : self['$=='](other))
    }, $Kernel_$eq_eq_eq$4.$$arity = 1);
    
    Opal.def(self, '$<=>', $Kernel_$lt_eq_gt$5 = function(other) {
      var self = this;

      
      // set guard for infinite recursion
      self.$$comparable = true;

      var x = self['$=='](other);

      if (x && x !== nil) {
        return 0;
      }

      return nil;
    
    }, $Kernel_$lt_eq_gt$5.$$arity = 1);
    
    Opal.def(self, '$method', $Kernel_method$6 = function $$method(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.$$stub) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (name) + "' for class `" + (self.$class()) + "'", name));
      }

      return $$($nesting, 'Method').$new(self, meth.$$owner || self.$class(), meth, name);
    
    }, $Kernel_method$6.$$arity = 1);
    
    Opal.def(self, '$methods', $Kernel_methods$7 = function $$methods(all) {
      var self = this;

      
      
      if (all == null) {
        all = true;
      };
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.own_methods(self);
      }
    ;
    }, $Kernel_methods$7.$$arity = -1);
    
    Opal.def(self, '$public_methods', $Kernel_public_methods$8 = function $$public_methods(all) {
      var self = this;

      
      
      if (all == null) {
        all = true;
      };
      
      if ($truthy(all)) {
        return Opal.methods(self);
      } else {
        return Opal.receiver_methods(self);
      }
    ;
    }, $Kernel_public_methods$8.$$arity = -1);
    
    Opal.def(self, '$Array', $Kernel_Array$9 = function $$Array(object) {
      var self = this;

      
      var coerced;

      if (object === nil) {
        return [];
      }

      if (object.$$is_array) {
        return object;
      }

      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), "to_ary");
      if (coerced !== nil) { return coerced; }

      coerced = $$($nesting, 'Opal')['$coerce_to?'](object, $$($nesting, 'Array'), "to_a");
      if (coerced !== nil) { return coerced; }

      return [object];
    
    }, $Kernel_Array$9.$$arity = 1);
    
    Opal.def(self, '$at_exit', $Kernel_at_exit$10 = function $$at_exit() {
      var $iter = $Kernel_at_exit$10.$$p, block = $iter || nil, $a, self = this;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      if ($iter) $Kernel_at_exit$10.$$p = null;
      
      
      if ($iter) $Kernel_at_exit$10.$$p = null;;
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      return $gvars.__at_exit__['$<<'](block);
    }, $Kernel_at_exit$10.$$arity = 0);
    
    Opal.def(self, '$caller', $Kernel_caller$11 = function $$caller($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return [];
    }, $Kernel_caller$11.$$arity = -1);
    
    Opal.def(self, '$class', $Kernel_class$12 = function() {
      var self = this;

      return self.$$class;
    }, $Kernel_class$12.$$arity = 0);
    
    Opal.def(self, '$copy_instance_variables', $Kernel_copy_instance_variables$13 = function $$copy_instance_variables(other) {
      var self = this;

      
      var keys = Object.keys(other), i, ii, name;
      for (i = 0, ii = keys.length; i < ii; i++) {
        name = keys[i];
        if (name.charAt(0) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, $Kernel_copy_instance_variables$13.$$arity = 1);
    
    Opal.def(self, '$copy_singleton_methods', $Kernel_copy_singleton_methods$14 = function $$copy_singleton_methods(other) {
      var self = this;

      
      var i, name, names, length;

      if (other.hasOwnProperty('$$meta')) {
        var other_singleton_class = Opal.get_singleton_class(other);
        var self_singleton_class = Opal.get_singleton_class(self);
        names = Object.getOwnPropertyNames(other_singleton_class.$$prototype);

        for (i = 0, length = names.length; i < length; i++) {
          name = names[i];
          if (Opal.is_method(name)) {
            self_singleton_class.$$prototype[name] = other_singleton_class.$$prototype[name];
          }
        }

        self_singleton_class.$$const = Object.assign({}, other_singleton_class.$$const);
        Object.setPrototypeOf(
          self_singleton_class.$$prototype,
          Object.getPrototypeOf(other_singleton_class.$$prototype)
        );
      }

      for (i = 0, names = Object.getOwnPropertyNames(other), length = names.length; i < length; i++) {
        name = names[i];
        if (name.charAt(0) === '$' && name.charAt(1) !== '$' && other.hasOwnProperty(name)) {
          self[name] = other[name];
        }
      }
    
    }, $Kernel_copy_singleton_methods$14.$$arity = 1);
    
    Opal.def(self, '$clone', $Kernel_clone$15 = function $$clone($kwargs) {
      var freeze, self = this, copy = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, $Kernel_clone$15.$$arity = -1);
    
    Opal.def(self, '$initialize_clone', $Kernel_initialize_clone$16 = function $$initialize_clone(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, $Kernel_initialize_clone$16.$$arity = 1);
    
    Opal.def(self, '$define_singleton_method', $Kernel_define_singleton_method$17 = function $$define_singleton_method(name, method) {
      var $iter = $Kernel_define_singleton_method$17.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_define_singleton_method$17.$$p = null;
      
      
      if ($iter) $Kernel_define_singleton_method$17.$$p = null;;
      ;
      return $send(self.$singleton_class(), 'define_method', [name, method], block.$to_proc());
    }, $Kernel_define_singleton_method$17.$$arity = -2);
    
    Opal.def(self, '$dup', $Kernel_dup$18 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, $Kernel_dup$18.$$arity = 0);
    
    Opal.def(self, '$initialize_dup', $Kernel_initialize_dup$19 = function $$initialize_dup(other) {
      var self = this;

      return self.$initialize_copy(other)
    }, $Kernel_initialize_dup$19.$$arity = 1);
    
    Opal.def(self, '$enum_for', $Kernel_enum_for$20 = function $$enum_for($a, $b) {
      var $iter = $Kernel_enum_for$20.$$p, block = $iter || nil, $post_args, method, args, self = this;

      if ($iter) $Kernel_enum_for$20.$$p = null;
      
      
      if ($iter) $Kernel_enum_for$20.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        method = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (method == null) {
        method = "each";
      };
      
      args = $post_args;;
      return $send($$($nesting, 'Enumerator'), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());
    }, $Kernel_enum_for$20.$$arity = -1);
    Opal.alias(self, "to_enum", "enum_for");
    
    Opal.def(self, '$equal?', $Kernel_equal$ques$21 = function(other) {
      var self = this;

      return self === other;
    }, $Kernel_equal$ques$21.$$arity = 1);
    
    Opal.def(self, '$exit', $Kernel_exit$22 = function $$exit(status) {
      var $a, self = this, block = nil;
      if ($gvars.__at_exit__ == null) $gvars.__at_exit__ = nil;

      
      
      if (status == null) {
        status = true;
      };
      $gvars.__at_exit__ = ($truthy($a = $gvars.__at_exit__) ? $a : []);
      while (!($truthy($gvars.__at_exit__['$empty?']()))) {
        
        block = $gvars.__at_exit__.$pop();
        block.$call();
      };
      
      if (status.$$is_boolean) {
        status = status ? 0 : 1;
      } else {
        status = $$($nesting, 'Opal').$coerce_to(status, $$($nesting, 'Integer'), "to_int")
      }

      Opal.exit(status);
    ;
      return nil;
    }, $Kernel_exit$22.$$arity = -1);
    
    Opal.def(self, '$extend', $Kernel_extend$23 = function $$extend($a) {
      var $post_args, mods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      mods = $post_args;;
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (!mod.$$is_module) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((mod).$class()) + " (expected Module)");
        }

        (mod).$append_features(singleton);
        (mod).$extend_object(self);
        (mod).$extended(self);
      }
    ;
      return self;
    }, $Kernel_extend$23.$$arity = -1);
    
    Opal.def(self, '$hash', $Kernel_hash$24 = function $$hash() {
      var self = this;

      return self.$__id__()
    }, $Kernel_hash$24.$$arity = 0);
    
    Opal.def(self, '$initialize_copy', $Kernel_initialize_copy$25 = function $$initialize_copy(other) {
      var self = this;

      return nil
    }, $Kernel_initialize_copy$25.$$arity = 1);
    
    Opal.def(self, '$inspect', $Kernel_inspect$26 = function $$inspect() {
      var self = this;

      return self.$to_s()
    }, $Kernel_inspect$26.$$arity = 0);
    
    Opal.def(self, '$instance_of?', $Kernel_instance_of$ques$27 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "class or module required");
      }

      return self.$$class === klass;
    
    }, $Kernel_instance_of$ques$27.$$arity = 1);
    
    Opal.def(self, '$instance_variable_defined?', $Kernel_instance_variable_defined$ques$28 = function(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      return Opal.hasOwnProperty.call(self, name.substr(1));;
    }, $Kernel_instance_variable_defined$ques$28.$$arity = 1);
    
    Opal.def(self, '$instance_variable_get', $Kernel_instance_variable_get$29 = function $$instance_variable_get(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var ivar = self[Opal.ivar(name.substr(1))];

      return ivar == null ? nil : ivar;
    ;
    }, $Kernel_instance_variable_get$29.$$arity = 1);
    
    Opal.def(self, '$instance_variable_set', $Kernel_instance_variable_set$30 = function $$instance_variable_set(name, value) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      return self[Opal.ivar(name.substr(1))] = value;;
    }, $Kernel_instance_variable_set$30.$$arity = 2);
    
    Opal.def(self, '$remove_instance_variable', $Kernel_remove_instance_variable$31 = function $$remove_instance_variable(name) {
      var self = this;

      
      name = $$($nesting, 'Opal')['$instance_variable_name!'](name);
      
      var key = Opal.ivar(name.substr(1)),
          val;
      if (self.hasOwnProperty(key)) {
        val = self[key];
        delete self[key];
        return val;
      }
    ;
      return self.$raise($$($nesting, 'NameError'), "" + "instance variable " + (name) + " not defined");
    }, $Kernel_remove_instance_variable$31.$$arity = 1);
    
    Opal.def(self, '$instance_variables', $Kernel_instance_variables$32 = function $$instance_variables() {
      var self = this;

      
      var result = [], ivar;

      for (var name in self) {
        if (self.hasOwnProperty(name) && name.charAt(0) !== '$') {
          if (name.substr(-1) === '$') {
            ivar = name.slice(0, name.length - 1);
          } else {
            ivar = name;
          }
          result.push('@' + ivar);
        }
      }

      return result;
    
    }, $Kernel_instance_variables$32.$$arity = 0);
    
    Opal.def(self, '$Integer', $Kernel_Integer$33 = function $$Integer(value, base) {
      var self = this;

      
      ;
      
      var i, str, base_digits;

      if (!value.$$is_string) {
        if (base !== undefined) {
          self.$raise($$($nesting, 'ArgumentError'), "base specified for non string value")
        }
        if (value === nil) {
          self.$raise($$($nesting, 'TypeError'), "can't convert nil into Integer")
        }
        if (value.$$is_number) {
          if (value === Infinity || value === -Infinity || isNaN(value)) {
            self.$raise($$($nesting, 'FloatDomainError'), value)
          }
          return Math.floor(value);
        }
        if (value['$respond_to?']("to_int")) {
          i = value.$to_int();
          if (i !== nil) {
            return i;
          }
        }
        return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Integer'), "to_i");
      }

      if (value === "0") {
        return 0;
      }

      if (base === undefined) {
        base = 0;
      } else {
        base = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), "to_int");
        if (base === 1 || base < 0 || base > 36) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))
        }
      }

      str = value.toLowerCase();

      str = str.replace(/(\d)_(?=\d)/g, '$1');

      str = str.replace(/^(\s*[+-]?)(0[bodx]?)/, function (_, head, flag) {
        switch (flag) {
        case '0b':
          if (base === 0 || base === 2) {
            base = 2;
            return head;
          }
        case '0':
        case '0o':
          if (base === 0 || base === 8) {
            base = 8;
            return head;
          }
        case '0d':
          if (base === 0 || base === 10) {
            base = 10;
            return head;
          }
        case '0x':
          if (base === 0 || base === 16) {
            base = 16;
            return head;
          }
        }
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      });

      base = (base === 0 ? 10 : base);

      base_digits = '0-' + (base <= 10 ? base - 1 : '9a-' + String.fromCharCode(97 + (base - 11)));

      if (!(new RegExp('^\\s*[+-]?[' + base_digits + ']+\\s*$')).test(str)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      i = parseInt(str, base);

      if (isNaN(i)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Integer(): \"" + (value) + "\"")
      }

      return i;
    ;
    }, $Kernel_Integer$33.$$arity = -2);
    
    Opal.def(self, '$Float', $Kernel_Float$34 = function $$Float(value) {
      var self = this;

      
      var str;

      if (value === nil) {
        self.$raise($$($nesting, 'TypeError'), "can't convert nil into Float")
      }

      if (value.$$is_string) {
        str = value.toString();

        str = str.replace(/(\d)_(?=\d)/g, '$1');

        //Special case for hex strings only:
        if (/^\s*[-+]?0[xX][0-9a-fA-F]+\s*$/.test(str)) {
          return self.$Integer(str);
        }

        if (!/^\s*[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?\s*$/.test(str)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid value for Float(): \"" + (value) + "\"")
        }

        return parseFloat(str);
      }

      return $$($nesting, 'Opal')['$coerce_to!'](value, $$($nesting, 'Float'), "to_f");
    
    }, $Kernel_Float$34.$$arity = 1);
    
    Opal.def(self, '$Hash', $Kernel_Hash$35 = function $$Hash(arg) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = arg['$nil?']()) ? $a : arg['$==']([])))) {
        return $hash2([], {})};
      if ($truthy($$($nesting, 'Hash')['$==='](arg))) {
        return arg};
      return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'Hash'), "to_hash");
    }, $Kernel_Hash$35.$$arity = 1);
    
    Opal.def(self, '$is_a?', $Kernel_is_a$ques$36 = function(klass) {
      var self = this;

      
      if (!klass.$$is_class && !klass.$$is_module) {
        self.$raise($$($nesting, 'TypeError'), "class or module required");
      }

      return Opal.is_a(self, klass);
    
    }, $Kernel_is_a$ques$36.$$arity = 1);
    
    Opal.def(self, '$itself', $Kernel_itself$37 = function $$itself() {
      var self = this;

      return self
    }, $Kernel_itself$37.$$arity = 0);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$lambda', $Kernel_lambda$38 = function $$lambda() {
      var $iter = $Kernel_lambda$38.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_lambda$38.$$p = null;
      
      
      if ($iter) $Kernel_lambda$38.$$p = null;;
      return Opal.lambda(block);;
    }, $Kernel_lambda$38.$$arity = 0);
    
    Opal.def(self, '$load', $Kernel_load$39 = function $$load(file) {
      var self = this;

      
      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), "to_str");
      return Opal.load(file);
    }, $Kernel_load$39.$$arity = 1);
    
    Opal.def(self, '$loop', $Kernel_loop$40 = function $$loop() {
      var $$41, $a, $iter = $Kernel_loop$40.$$p, $yield = $iter || nil, self = this, e = nil;

      if ($iter) $Kernel_loop$40.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["loop"], ($$41 = function(){var self = $$41.$$s || this;

        return $$$($$($nesting, 'Float'), 'INFINITY')}, $$41.$$s = self, $$41.$$arity = 0, $$41))
      };
      while ($truthy(true)) {
        
        try {
          Opal.yieldX($yield, [])
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StopIteration')])) {e = $err;
            try {
              return e.$result()
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      };
      return self;
    }, $Kernel_loop$40.$$arity = 0);
    
    Opal.def(self, '$nil?', $Kernel_nil$ques$42 = function() {
      var self = this;

      return false
    }, $Kernel_nil$ques$42.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$printf', $Kernel_printf$43 = function $$printf($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(args['$any?']())) {
        self.$print($send(self, 'format', Opal.to_a(args)))};
      return nil;
    }, $Kernel_printf$43.$$arity = -1);
    
    Opal.def(self, '$proc', $Kernel_proc$44 = function $$proc() {
      var $iter = $Kernel_proc$44.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_proc$44.$$p = null;
      
      
      if ($iter) $Kernel_proc$44.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create Proc object without a block")
      };
      block.$$is_lambda = false;
      return block;
    }, $Kernel_proc$44.$$arity = 0);
    
    Opal.def(self, '$puts', $Kernel_puts$45 = function $$puts($a) {
      var $post_args, strs, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      return $send($gvars.stdout, 'puts', Opal.to_a(strs));
    }, $Kernel_puts$45.$$arity = -1);
    
    Opal.def(self, '$p', $Kernel_p$46 = function $$p($a) {
      var $post_args, args, $$47, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      $send(args, 'each', [], ($$47 = function(obj){var self = $$47.$$s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;

      
        
        if (obj == null) {
          obj = nil;
        };
        return $gvars.stdout.$puts(obj.$inspect());}, $$47.$$s = self, $$47.$$arity = 1, $$47));
      if ($truthy($rb_le(args.$length(), 1))) {
        return args['$[]'](0)
      } else {
        return args
      };
    }, $Kernel_p$46.$$arity = -1);
    
    Opal.def(self, '$print', $Kernel_print$48 = function $$print($a) {
      var $post_args, strs, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      return $send($gvars.stdout, 'print', Opal.to_a(strs));
    }, $Kernel_print$48.$$arity = -1);
    
    Opal.def(self, '$warn', $Kernel_warn$49 = function $$warn($a) {
      var $post_args, strs, $b, self = this;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      strs = $post_args;;
      if ($truthy(($truthy($b = $gvars.VERBOSE['$nil?']()) ? $b : strs['$empty?']()))) {
        return nil
      } else {
        return $send($gvars.stderr, 'puts', Opal.to_a(strs))
      };
    }, $Kernel_warn$49.$$arity = -1);
    
    Opal.def(self, '$raise', $Kernel_raise$50 = function $$raise(exception, string, _backtrace) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      
      ;
      
      if (string == null) {
        string = nil;
      };
      
      if (_backtrace == null) {
        _backtrace = nil;
      };
      
      if (exception == null && $gvars["!"] !== nil) {
        throw $gvars["!"];
      }
      if (exception == null) {
        exception = $$($nesting, 'RuntimeError').$new();
      }
      else if (exception.$$is_string) {
        exception = $$($nesting, 'RuntimeError').$new(exception);
      }
      // using respond_to? and not an undefined check to avoid method_missing matching as true
      else if (exception.$$is_class && exception['$respond_to?']("exception")) {
        exception = exception.$exception(string);
      }
      else if (exception['$is_a?']($$($nesting, 'Exception'))) {
        // exception is fine
      }
      else {
        exception = $$($nesting, 'TypeError').$new("exception class/object expected");
      }

      if ($gvars["!"] !== nil) {
        Opal.exceptions.push($gvars["!"]);
      }

      $gvars["!"] = exception;

      throw exception;
    ;
    }, $Kernel_raise$50.$$arity = -1);
    Opal.alias(self, "fail", "raise");
    
    Opal.def(self, '$rand', $Kernel_rand$51 = function $$rand(max) {
      var self = this;

      
      ;
      
      if (max === undefined) {
        return $$$($$($nesting, 'Random'), 'DEFAULT').$rand();
      }

      if (max.$$is_number) {
        if (max < 0) {
          max = Math.abs(max);
        }

        if (max % 1 !== 0) {
          max = max.$to_i();
        }

        if (max === 0) {
          max = undefined;
        }
      }
    ;
      return $$$($$($nesting, 'Random'), 'DEFAULT').$rand(max);
    }, $Kernel_rand$51.$$arity = -1);
    
    Opal.def(self, '$respond_to?', $Kernel_respond_to$ques$52 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      if ($truthy(self['$respond_to_missing?'](name, include_all))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.$$stub) {
        return true;
      }
    ;
      return false;
    }, $Kernel_respond_to$ques$52.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', $Kernel_respond_to_missing$ques$53 = function(method_name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return false;
    }, $Kernel_respond_to_missing$ques$53.$$arity = -2);
    
    Opal.def(self, '$require', $Kernel_require$54 = function $$require(file) {
      var self = this;

      
      file = $$($nesting, 'Opal')['$coerce_to!'](file, $$($nesting, 'String'), "to_str");
      return Opal.require(file);
    }, $Kernel_require$54.$$arity = 1);
    
    Opal.def(self, '$require_relative', $Kernel_require_relative$55 = function $$require_relative(file) {
      var self = this;

      
      $$($nesting, 'Opal')['$try_convert!'](file, $$($nesting, 'String'), "to_str");
      file = $$($nesting, 'File').$expand_path($$($nesting, 'File').$join(Opal.current_file, "..", file));
      return Opal.require(file);
    }, $Kernel_require_relative$55.$$arity = 1);
    
    Opal.def(self, '$require_tree', $Kernel_require_tree$56 = function $$require_tree(path) {
      var self = this;

      
      var result = [];

      path = $$($nesting, 'File').$expand_path(path)
      path = Opal.normalize(path);
      if (path === '.') path = '';
      for (var name in Opal.modules) {
        if ((name)['$start_with?'](path)) {
          result.push([name, Opal.require(name)]);
        }
      }

      return result;
    
    }, $Kernel_require_tree$56.$$arity = 1);
    Opal.alias(self, "send", "__send__");
    Opal.alias(self, "public_send", "__send__");
    
    Opal.def(self, '$singleton_class', $Kernel_singleton_class$57 = function $$singleton_class() {
      var self = this;

      return Opal.get_singleton_class(self);
    }, $Kernel_singleton_class$57.$$arity = 0);
    
    Opal.def(self, '$sleep', $Kernel_sleep$58 = function $$sleep(seconds) {
      var self = this;

      
      
      if (seconds == null) {
        seconds = nil;
      };
      
      if (seconds === nil) {
        self.$raise($$($nesting, 'TypeError'), "can't convert NilClass into time interval")
      }
      if (!seconds.$$is_number) {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (seconds.$class()) + " into time interval")
      }
      if (seconds < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "time interval must be positive")
      }
      var get_time = Opal.global.performance ?
        function() {return performance.now()} :
        function() {return new Date()}

      var t = get_time();
      while (get_time() - t <= seconds * 1000);
      return seconds;
    ;
    }, $Kernel_sleep$58.$$arity = -1);
    
    Opal.def(self, '$srand', $Kernel_srand$59 = function $$srand(seed) {
      var self = this;

      
      
      if (seed == null) {
        seed = $$($nesting, 'Random').$new_seed();
      };
      return $$($nesting, 'Random').$srand(seed);
    }, $Kernel_srand$59.$$arity = -1);
    
    Opal.def(self, '$String', $Kernel_String$60 = function $$String(str) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'Opal')['$coerce_to?'](str, $$($nesting, 'String'), "to_str")) ? $a : $$($nesting, 'Opal')['$coerce_to!'](str, $$($nesting, 'String'), "to_s"))
    }, $Kernel_String$60.$$arity = 1);
    
    Opal.def(self, '$tap', $Kernel_tap$61 = function $$tap() {
      var $iter = $Kernel_tap$61.$$p, block = $iter || nil, self = this;

      if ($iter) $Kernel_tap$61.$$p = null;
      
      
      if ($iter) $Kernel_tap$61.$$p = null;;
      Opal.yield1(block, self);
      return self;
    }, $Kernel_tap$61.$$arity = 0);
    
    Opal.def(self, '$to_proc', $Kernel_to_proc$62 = function $$to_proc() {
      var self = this;

      return self
    }, $Kernel_to_proc$62.$$arity = 0);
    
    Opal.def(self, '$to_s', $Kernel_to_s$63 = function $$to_s() {
      var self = this;

      return "" + "#<" + (self.$class()) + ":0x" + (self.$__id__().$to_s(16)) + ">"
    }, $Kernel_to_s$63.$$arity = 0);
    
    Opal.def(self, '$catch', $Kernel_catch$64 = function(sym) {
      var $iter = $Kernel_catch$64.$$p, $yield = $iter || nil, self = this, e = nil;

      if ($iter) $Kernel_catch$64.$$p = null;
      try {
        return Opal.yieldX($yield, []);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'UncaughtThrowError')])) {e = $err;
          try {
            
            if (e.$sym()['$=='](sym)) {
              return e.$arg()};
            return self.$raise();
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Kernel_catch$64.$$arity = 1);
    
    Opal.def(self, '$throw', $Kernel_throw$65 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.$raise($$($nesting, 'UncaughtThrowError'), args);
    }, $Kernel_throw$65.$$arity = -1);
    
    Opal.def(self, '$open', $Kernel_open$66 = function $$open($a) {
      var $iter = $Kernel_open$66.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_open$66.$$p = null;
      
      
      if ($iter) $Kernel_open$66.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send($$($nesting, 'File'), 'open', Opal.to_a(args), block.$to_proc());
    }, $Kernel_open$66.$$arity = -1);
    
    Opal.def(self, '$yield_self', $Kernel_yield_self$67 = function $$yield_self() {
      var $$68, $iter = $Kernel_yield_self$67.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Kernel_yield_self$67.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["yield_self"], ($$68 = function(){var self = $$68.$$s || this;

        return 1}, $$68.$$s = self, $$68.$$arity = 0, $$68))
      };
      return Opal.yield1($yield, self);;
    }, $Kernel_yield_self$67.$$arity = 0);
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting);

    return self.$include($$($nesting, 'Kernel'))
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/error"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$clone', '$to_s', '$empty?', '$class', '$raise', '$+', '$attr_reader', '$[]', '$>', '$length', '$inspect']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Exception');

    var $nesting = [self].concat($parent_nesting), $Exception_new$1, $Exception_exception$2, $Exception_initialize$3, $Exception_backtrace$4, $Exception_exception$5, $Exception_message$6, $Exception_inspect$7, $Exception_set_backtrace$8, $Exception_to_s$9;

    self.$$prototype.message = nil;
    
    var stack_trace_limit;
    Opal.defs(self, '$new', $Exception_new$1 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var message   = (args.length > 0) ? args[0] : nil;
      var error     = new self.$$constructor(message);
      error.name    = self.$$name;
      error.message = message;
      Opal.send(error, error.$initialize, args);

      // Error.captureStackTrace() will use .name and .toString to build the
      // first line of the stack trace so it must be called after the error
      // has been initialized.
      // https://nodejs.org/dist/latest-v6.x/docs/api/errors.html
      if (Opal.config.enable_stack_trace && Error.captureStackTrace) {
        // Passing Kernel.raise will cut the stack trace from that point above
        Error.captureStackTrace(error, stack_trace_limit);
      }

      return error;
    ;
    }, $Exception_new$1.$$arity = -1);
    stack_trace_limit = self.$new;
    Opal.defs(self, '$exception', $Exception_exception$2 = function $$exception($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'new', Opal.to_a(args));
    }, $Exception_exception$2.$$arity = -1);
    
    Opal.def(self, '$initialize', $Exception_initialize$3 = function $$initialize($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.message = (args.length > 0) ? args[0] : nil;;
    }, $Exception_initialize$3.$$arity = -1);
    
    Opal.def(self, '$backtrace', $Exception_backtrace$4 = function $$backtrace() {
      var self = this;

      
      if (self.backtrace) {
        // nil is a valid backtrace
        return self.backtrace;
      }

      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    }, $Exception_backtrace$4.$$arity = 0);
    
    Opal.def(self, '$exception', $Exception_exception$5 = function $$exception(str) {
      var self = this;

      
      
      if (str == null) {
        str = nil;
      };
      
      if (str === nil || self === str) {
        return self;
      }

      var cloned = self.$clone();
      cloned.message = str;
      cloned.stack = self.stack;
      return cloned;
    ;
    }, $Exception_exception$5.$$arity = -1);
    
    Opal.def(self, '$message', $Exception_message$6 = function $$message() {
      var self = this;

      return self.$to_s()
    }, $Exception_message$6.$$arity = 0);
    
    Opal.def(self, '$inspect', $Exception_inspect$7 = function $$inspect() {
      var self = this, as_str = nil;

      
      as_str = self.$to_s();
      if ($truthy(as_str['$empty?']())) {
        return self.$class().$to_s()
      } else {
        return "" + "#<" + (self.$class().$to_s()) + ": " + (self.$to_s()) + ">"
      };
    }, $Exception_inspect$7.$$arity = 0);
    
    Opal.def(self, '$set_backtrace', $Exception_set_backtrace$8 = function $$set_backtrace(backtrace) {
      var self = this;

      
      var valid = true, i, ii;

      if (backtrace === nil) {
        self.backtrace = nil;
        self.stack = '';
      } else if (backtrace.$$is_string) {
        self.backtrace = [backtrace];
        self.stack = backtrace;
      } else {
        if (backtrace.$$is_array) {
          for (i = 0, ii = backtrace.length; i < ii; i++) {
            if (!backtrace[i].$$is_string) {
              valid = false;
              break;
            }
          }
        } else {
          valid = false;
        }

        if (valid === false) {
          self.$raise($$($nesting, 'TypeError'), "backtrace must be Array of String")
        }

        self.backtrace = backtrace;
        self.stack = backtrace.join('\n');
      }

      return backtrace;
    
    }, $Exception_set_backtrace$8.$$arity = 1);
    return (Opal.def(self, '$to_s', $Exception_to_s$9 = function $$to_s() {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = self.message) ? self.message.$to_s() : $b)) ? $a : self.$class().$to_s())
    }, $Exception_to_s$9.$$arity = 0), nil) && 'to_s';
  })($nesting[0], Error, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ScriptError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SyntaxError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'LoadError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NotImplementedError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'ScriptError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SystemExit');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NoMemoryError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SignalException');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Interrupt');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SecurityError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StandardError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'Exception'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'EncodingError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ZeroDivisionError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NameError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NoMethodError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'NameError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RuntimeError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'FrozenError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'RuntimeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'LocalJumpError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TypeError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ArgumentError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IndexError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StopIteration');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'KeyError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'IndexError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RangeError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'FloatDomainError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'RangeError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IOError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'SystemCallError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Errno');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EINVAL');

      var $nesting = [self].concat($parent_nesting), $EINVAL_new$10;

      return (Opal.defs(self, '$new', $EINVAL_new$10 = function(name) {
        var $iter = $EINVAL_new$10.$$p, $yield = $iter || nil, self = this, message = nil;

        if ($iter) $EINVAL_new$10.$$p = null;
        
        
        if (name == null) {
          name = nil;
        };
        message = "Invalid argument";
        if ($truthy(name)) {
          message = $rb_plus(message, "" + " - " + (name))};
        return $send(self, Opal.find_super_dispatcher(self, 'new', $EINVAL_new$10, false, self.$$class.$$prototype), [message], null);
      }, $EINVAL_new$10.$$arity = -1), nil) && 'new'
    })($nesting[0], $$($nesting, 'SystemCallError'), $nesting)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UncaughtThrowError');

    var $nesting = [self].concat($parent_nesting), $UncaughtThrowError_initialize$11;

    self.$$prototype.sym = nil;
    
    self.$attr_reader("sym", "arg");
    return (Opal.def(self, '$initialize', $UncaughtThrowError_initialize$11 = function $$initialize(args) {
      var $iter = $UncaughtThrowError_initialize$11.$$p, $yield = $iter || nil, self = this;

      if ($iter) $UncaughtThrowError_initialize$11.$$p = null;
      
      self.sym = args['$[]'](0);
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.arg = args['$[]'](1)};
      return $send(self, Opal.find_super_dispatcher(self, 'initialize', $UncaughtThrowError_initialize$11, false), ["" + "uncaught throw " + (self.sym.$inspect())], null);
    }, $UncaughtThrowError_initialize$11.$$arity = 1), nil) && 'initialize';
  })($nesting[0], $$($nesting, 'ArgumentError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NameError');

    var $nesting = [self].concat($parent_nesting), $NameError_initialize$12;

    
    self.$attr_reader("name");
    return (Opal.def(self, '$initialize', $NameError_initialize$12 = function $$initialize(message, name) {
      var $iter = $NameError_initialize$12.$$p, $yield = $iter || nil, self = this;

      if ($iter) $NameError_initialize$12.$$p = null;
      
      
      if (name == null) {
        name = nil;
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NameError_initialize$12, false), [message], null);
      return (self.name = name);
    }, $NameError_initialize$12.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NoMethodError');

    var $nesting = [self].concat($parent_nesting), $NoMethodError_initialize$13;

    
    self.$attr_reader("args");
    return (Opal.def(self, '$initialize', $NoMethodError_initialize$13 = function $$initialize(message, name, args) {
      var $iter = $NoMethodError_initialize$13.$$p, $yield = $iter || nil, self = this;

      if ($iter) $NoMethodError_initialize$13.$$p = null;
      
      
      if (name == null) {
        name = nil;
      };
      
      if (args == null) {
        args = [];
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $NoMethodError_initialize$13, false), [message, name], null);
      return (self.args = args);
    }, $NoMethodError_initialize$13.$$arity = -2), nil) && 'initialize';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'StopIteration');

    var $nesting = [self].concat($parent_nesting);

    return self.$attr_reader("result")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'KeyError');

    var $nesting = [self].concat($parent_nesting), $KeyError_initialize$14, $KeyError_receiver$15, $KeyError_key$16;

    self.$$prototype.receiver = self.$$prototype.key = nil;
    
    
    Opal.def(self, '$initialize', $KeyError_initialize$14 = function $$initialize(message, $kwargs) {
      var receiver, key, $iter = $KeyError_initialize$14.$$p, $yield = $iter || nil, self = this;

      if ($iter) $KeyError_initialize$14.$$p = null;
      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      receiver = $kwargs.$$smap["receiver"];
      if (receiver == null) {
        receiver = nil
      };
      
      key = $kwargs.$$smap["key"];
      if (key == null) {
        key = nil
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $KeyError_initialize$14, false), [message], null);
      self.receiver = receiver;
      return (self.key = key);
    }, $KeyError_initialize$14.$$arity = -2);
    
    Opal.def(self, '$receiver', $KeyError_receiver$15 = function $$receiver() {
      var $a, self = this;

      return ($truthy($a = self.receiver) ? $a : self.$raise($$($nesting, 'ArgumentError'), "no receiver is available"))
    }, $KeyError_receiver$15.$$arity = 0);
    return (Opal.def(self, '$key', $KeyError_key$16 = function $$key() {
      var $a, self = this;

      return ($truthy($a = self.key) ? $a : self.$raise($$($nesting, 'ArgumentError'), "no key is available"))
    }, $KeyError_key$16.$$arity = 0), nil) && 'key';
  })($nesting[0], null, $nesting);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'JS');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Error');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/constants"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  
  Opal.const_set($nesting[0], 'RUBY_PLATFORM', "opal");
  Opal.const_set($nesting[0], 'RUBY_ENGINE', "opal");
  Opal.const_set($nesting[0], 'RUBY_VERSION', "2.5.3");
  Opal.const_set($nesting[0], 'RUBY_ENGINE_VERSION', "1.0.0");
  Opal.const_set($nesting[0], 'RUBY_RELEASE_DATE', "2019-05-12");
  Opal.const_set($nesting[0], 'RUBY_PATCHLEVEL', 0);
  Opal.const_set($nesting[0], 'RUBY_REVISION', 0);
  Opal.const_set($nesting[0], 'RUBY_COPYRIGHT', "opal - Copyright (C) 2013-2019 Adam Beynon and the Opal contributors");
  return Opal.const_set($nesting[0], 'RUBY_DESCRIPTION', "" + "opal " + ($$($nesting, 'RUBY_ENGINE_VERSION')) + " (" + ($$($nesting, 'RUBY_RELEASE_DATE')) + " revision " + ($$($nesting, 'RUBY_REVISION')) + ")");
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/base"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("corelib/runtime");
  self.$require("corelib/helpers");
  self.$require("corelib/module");
  self.$require("corelib/class");
  self.$require("corelib/basic_object");
  self.$require("corelib/kernel");
  self.$require("corelib/error");
  return self.$require("corelib/constants");
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/nil"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$name', '$new', '$>', '$length', '$Rational']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_$excl$2, $NilClass_$$3, $NilClass_$$4, $NilClass_$$5, $NilClass_$eq_eq$6, $NilClass_dup$7, $NilClass_clone$8, $NilClass_inspect$9, $NilClass_nil$ques$10, $NilClass_singleton_class$11, $NilClass_to_a$12, $NilClass_to_h$13, $NilClass_to_i$14, $NilClass_to_s$15, $NilClass_to_c$16, $NilClass_rationalize$17, $NilClass_to_r$18, $NilClass_instance_variables$19;

    
    self.$$prototype.$$meta = self;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$!', $NilClass_$excl$2 = function() {
      var self = this;

      return true
    }, $NilClass_$excl$2.$$arity = 0);
    
    Opal.def(self, '$&', $NilClass_$$3 = function(other) {
      var self = this;

      return false
    }, $NilClass_$$3.$$arity = 1);
    
    Opal.def(self, '$|', $NilClass_$$4 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, $NilClass_$$4.$$arity = 1);
    
    Opal.def(self, '$^', $NilClass_$$5 = function(other) {
      var self = this;

      return other !== false && other !== nil;
    }, $NilClass_$$5.$$arity = 1);
    
    Opal.def(self, '$==', $NilClass_$eq_eq$6 = function(other) {
      var self = this;

      return other === nil;
    }, $NilClass_$eq_eq$6.$$arity = 1);
    
    Opal.def(self, '$dup', $NilClass_dup$7 = function $$dup() {
      var self = this;

      return nil
    }, $NilClass_dup$7.$$arity = 0);
    
    Opal.def(self, '$clone', $NilClass_clone$8 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return nil;
    }, $NilClass_clone$8.$$arity = -1);
    
    Opal.def(self, '$inspect', $NilClass_inspect$9 = function $$inspect() {
      var self = this;

      return "nil"
    }, $NilClass_inspect$9.$$arity = 0);
    
    Opal.def(self, '$nil?', $NilClass_nil$ques$10 = function() {
      var self = this;

      return true
    }, $NilClass_nil$ques$10.$$arity = 0);
    
    Opal.def(self, '$singleton_class', $NilClass_singleton_class$11 = function $$singleton_class() {
      var self = this;

      return $$($nesting, 'NilClass')
    }, $NilClass_singleton_class$11.$$arity = 0);
    
    Opal.def(self, '$to_a', $NilClass_to_a$12 = function $$to_a() {
      var self = this;

      return []
    }, $NilClass_to_a$12.$$arity = 0);
    
    Opal.def(self, '$to_h', $NilClass_to_h$13 = function $$to_h() {
      var self = this;

      return Opal.hash();
    }, $NilClass_to_h$13.$$arity = 0);
    
    Opal.def(self, '$to_i', $NilClass_to_i$14 = function $$to_i() {
      var self = this;

      return 0
    }, $NilClass_to_i$14.$$arity = 0);
    Opal.alias(self, "to_f", "to_i");
    
    Opal.def(self, '$to_s', $NilClass_to_s$15 = function $$to_s() {
      var self = this;

      return ""
    }, $NilClass_to_s$15.$$arity = 0);
    
    Opal.def(self, '$to_c', $NilClass_to_c$16 = function $$to_c() {
      var self = this;

      return $$($nesting, 'Complex').$new(0, 0)
    }, $NilClass_to_c$16.$$arity = 0);
    
    Opal.def(self, '$rationalize', $NilClass_rationalize$17 = function $$rationalize($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy($rb_gt(args.$length(), 1))) {
        self.$raise($$($nesting, 'ArgumentError'))};
      return self.$Rational(0, 1);
    }, $NilClass_rationalize$17.$$arity = -1);
    
    Opal.def(self, '$to_r', $NilClass_to_r$18 = function $$to_r() {
      var self = this;

      return self.$Rational(0, 1)
    }, $NilClass_to_r$18.$$arity = 0);
    return (Opal.def(self, '$instance_variables', $NilClass_instance_variables$19 = function $$instance_variables() {
      var self = this;

      return []
    }, $NilClass_instance_variables$19.$$arity = 0), nil) && 'instance_variables';
  })($nesting[0], null, $nesting);
  return Opal.const_set($nesting[0], 'NIL', nil);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/boolean"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$raise', '$name']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean___id__$2, $Boolean_$excl$3, $Boolean_$$4, $Boolean_$$5, $Boolean_$$6, $Boolean_$eq_eq$7, $Boolean_singleton_class$8, $Boolean_to_s$9, $Boolean_dup$10, $Boolean_clone$11;

    
    Opal.defineProperty(self.$$prototype, '$$is_boolean', true);
    Opal.defineProperty(self.$$prototype, '$$meta', self);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$__id__', $Boolean___id__$2 = function $$__id__() {
      var self = this;

      return self.valueOf() ? 2 : 0;
    }, $Boolean___id__$2.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$!', $Boolean_$excl$3 = function() {
      var self = this;

      return self != true;
    }, $Boolean_$excl$3.$$arity = 0);
    
    Opal.def(self, '$&', $Boolean_$$4 = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    }, $Boolean_$$4.$$arity = 1);
    
    Opal.def(self, '$|', $Boolean_$$5 = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    }, $Boolean_$$5.$$arity = 1);
    
    Opal.def(self, '$^', $Boolean_$$6 = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    }, $Boolean_$$6.$$arity = 1);
    
    Opal.def(self, '$==', $Boolean_$eq_eq$7 = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    }, $Boolean_$eq_eq$7.$$arity = 1);
    Opal.alias(self, "equal?", "==");
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$singleton_class', $Boolean_singleton_class$8 = function $$singleton_class() {
      var self = this;

      return $$($nesting, 'Boolean')
    }, $Boolean_singleton_class$8.$$arity = 0);
    
    Opal.def(self, '$to_s', $Boolean_to_s$9 = function $$to_s() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, $Boolean_to_s$9.$$arity = 0);
    
    Opal.def(self, '$dup', $Boolean_dup$10 = function $$dup() {
      var self = this;

      return self
    }, $Boolean_dup$10.$$arity = 0);
    return (Opal.def(self, '$clone', $Boolean_clone$11 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return self;
    }, $Boolean_clone$11.$$arity = -1), nil) && 'clone';
  })($nesting[0], Boolean, $nesting);
  Opal.const_set($nesting[0], 'TrueClass', $$($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'FalseClass', $$($nesting, 'Boolean'));
  Opal.const_set($nesting[0], 'TRUE', true);
  return Opal.const_set($nesting[0], 'FALSE', false);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/comparable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$>', '$<', '$===', '$raise', '$class', '$equal?', '$<=>']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Comparable');

    var $nesting = [self].concat($parent_nesting), $Comparable_$eq_eq$1, $Comparable_$gt$2, $Comparable_$gt_eq$3, $Comparable_$lt$4, $Comparable_$lt_eq$5, $Comparable_between$ques$6, $Comparable_clamp$7, $case = nil;

    
    
    function normalize(what) {
      if (Opal.is_a(what, Opal.Integer)) { return what; }

      if ($rb_gt(what, 0)) { return 1; }
      if ($rb_lt(what, 0)) { return -1; }
      return 0;
    }

    function fail_comparison(lhs, rhs) {
      var class_name;
      (function() {$case = rhs;
    if (nil['$===']($case) || true['$===']($case) || false['$===']($case) || $$($nesting, 'Integer')['$===']($case) || $$($nesting, 'Float')['$===']($case)) {return class_name = rhs.$inspect();}
    else {return class_name = rhs.$$class;}})()
      self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + ((lhs).$class()) + " with " + (class_name) + " failed")
    }
  ;
    
    Opal.def(self, '$==', $Comparable_$eq_eq$1 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy(self['$equal?'](other))) {
        return true};
      
      if (self["$<=>"] == Opal.Kernel["$<=>"]) {
        return false;
      }

      // check for infinite recursion
      if (self.$$comparable) {
        delete self.$$comparable;
        return false;
      }
    ;
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        return false
      };
      return normalize(cmp) == 0;;
    }, $Comparable_$eq_eq$1.$$arity = 1);
    
    Opal.def(self, '$>', $Comparable_$gt$2 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) > 0;;
    }, $Comparable_$gt$2.$$arity = 1);
    
    Opal.def(self, '$>=', $Comparable_$gt_eq$3 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) >= 0;;
    }, $Comparable_$gt_eq$3.$$arity = 1);
    
    Opal.def(self, '$<', $Comparable_$lt$4 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) < 0;;
    }, $Comparable_$lt$4.$$arity = 1);
    
    Opal.def(self, '$<=', $Comparable_$lt_eq$5 = function(other) {
      var self = this, cmp = nil;

      
      if ($truthy((cmp = self['$<=>'](other)))) {
      } else {
        fail_comparison(self, other)
      };
      return normalize(cmp) <= 0;;
    }, $Comparable_$lt_eq$5.$$arity = 1);
    
    Opal.def(self, '$between?', $Comparable_between$ques$6 = function(min, max) {
      var self = this;

      
      if ($rb_lt(self, min)) {
        return false};
      if ($rb_gt(self, max)) {
        return false};
      return true;
    }, $Comparable_between$ques$6.$$arity = 2);
    
    Opal.def(self, '$clamp', $Comparable_clamp$7 = function $$clamp(min, max) {
      var self = this, cmp = nil;

      
      cmp = min['$<=>'](max);
      if ($truthy(cmp)) {
      } else {
        fail_comparison(min, max)
      };
      if ($truthy(normalize(cmp) > 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "min argument must be smaller than max argument")};
      if ($truthy(normalize(self['$<=>'](min)) < 0)) {
        return min};
      if ($truthy(normalize(self['$<=>'](max)) > 0)) {
        return max};
      return self;
    }, $Comparable_clamp$7.$$arity = 2);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/regexp"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$nil?', '$[]', '$raise', '$escape', '$options', '$to_str', '$new', '$join', '$coerce_to!', '$!', '$match', '$coerce_to?', '$begin', '$coerce_to', '$=~', '$attr_reader', '$===', '$inspect', '$to_a']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'RegexpError');

    var $nesting = [self].concat($parent_nesting);

    return nil
  })($nesting[0], $$($nesting, 'StandardError'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Regexp');

    var $nesting = [self].concat($parent_nesting), $Regexp_$eq_eq$6, $Regexp_$eq_eq_eq$7, $Regexp_$eq_tilde$8, $Regexp_inspect$9, $Regexp_match$10, $Regexp_match$ques$11, $Regexp_$$12, $Regexp_source$13, $Regexp_options$14, $Regexp_casefold$ques$15;

    
    Opal.const_set($nesting[0], 'IGNORECASE', 1);
    Opal.const_set($nesting[0], 'EXTENDED', 2);
    Opal.const_set($nesting[0], 'MULTILINE', 4);
    Opal.defineProperty(self.$$prototype, '$$is_regexp', true);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1, $escape$2, $last_match$3, $union$4, $new$5;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var $iter = $allocate$1.$$p, $yield = $iter || nil, self = this, allocated = nil, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) $allocate$1.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        allocated = $send(self, Opal.find_super_dispatcher(self, 'allocate', $allocate$1, false), $zuper, $iter);
        allocated.uninitialized = true;
        return allocated;
      }, $allocate$1.$$arity = 0);
      
      Opal.def(self, '$escape', $escape$2 = function $$escape(string) {
        var self = this;

        return Opal.escape_regexp(string);
      }, $escape$2.$$arity = 1);
      
      Opal.def(self, '$last_match', $last_match$3 = function $$last_match(n) {
        var self = this;
        if ($gvars["~"] == null) $gvars["~"] = nil;

        
        
        if (n == null) {
          n = nil;
        };
        if ($truthy(n['$nil?']())) {
          return $gvars["~"]
        } else {
          return $gvars["~"]['$[]'](n)
        };
      }, $last_match$3.$$arity = -1);
      Opal.alias(self, "quote", "escape");
      
      Opal.def(self, '$union', $union$4 = function $$union($a) {
        var $post_args, parts, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        parts = $post_args;;
        
        var is_first_part_array, quoted_validated, part, options, each_part_options;
        if (parts.length == 0) {
          return /(?!)/;
        }
        // return fast if there's only one element
        if (parts.length == 1 && parts[0].$$is_regexp) {
          return parts[0];
        }
        // cover the 2 arrays passed as arguments case
        is_first_part_array = parts[0].$$is_array;
        if (parts.length > 1 && is_first_part_array) {
          self.$raise($$($nesting, 'TypeError'), "no implicit conversion of Array into String")
        }
        // deal with splat issues (related to https://github.com/opal/opal/issues/858)
        if (is_first_part_array) {
          parts = parts[0];
        }
        options = undefined;
        quoted_validated = [];
        for (var i=0; i < parts.length; i++) {
          part = parts[i];
          if (part.$$is_string) {
            quoted_validated.push(self.$escape(part));
          }
          else if (part.$$is_regexp) {
            each_part_options = (part).$options();
            if (options != undefined && options != each_part_options) {
              self.$raise($$($nesting, 'TypeError'), "All expressions must use the same options")
            }
            options = each_part_options;
            quoted_validated.push('('+part.source+')');
          }
          else {
            quoted_validated.push(self.$escape((part).$to_str()));
          }
        }
      ;
        return self.$new((quoted_validated).$join("|"), options);
      }, $union$4.$$arity = -1);
      return (Opal.def(self, '$new', $new$5 = function(regexp, options) {
        var self = this;

        
        ;
        
        if (regexp.$$is_regexp) {
          return new RegExp(regexp);
        }

        regexp = $$($nesting, 'Opal')['$coerce_to!'](regexp, $$($nesting, 'String'), "to_str");

        if (regexp.charAt(regexp.length - 1) === '\\' && regexp.charAt(regexp.length - 2) !== '\\') {
          self.$raise($$($nesting, 'RegexpError'), "" + "too short escape sequence: /" + (regexp) + "/")
        }

        if (options === undefined || options['$!']()) {
          return new RegExp(regexp);
        }

        if (options.$$is_number) {
          var temp = '';
          if ($$($nesting, 'IGNORECASE') & options) { temp += 'i'; }
          if ($$($nesting, 'MULTILINE')  & options) { temp += 'm'; }
          options = temp;
        }
        else {
          options = 'i';
        }

        return new RegExp(regexp, options);
      ;
      }, $new$5.$$arity = -2), nil) && 'new';
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$==', $Regexp_$eq_eq$6 = function(other) {
      var self = this;

      return other instanceof RegExp && self.toString() === other.toString();
    }, $Regexp_$eq_eq$6.$$arity = 1);
    
    Opal.def(self, '$===', $Regexp_$eq_eq_eq$7 = function(string) {
      var self = this;

      return self.$match($$($nesting, 'Opal')['$coerce_to?'](string, $$($nesting, 'String'), "to_str")) !== nil
    }, $Regexp_$eq_eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$=~', $Regexp_$eq_tilde$8 = function(string) {
      var $a, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      return ($truthy($a = self.$match(string)) ? $gvars["~"].$begin(0) : $a)
    }, $Regexp_$eq_tilde$8.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$inspect', $Regexp_inspect$9 = function $$inspect() {
      var self = this;

      
      var regexp_format = /^\/(.*)\/([^\/]*)$/;
      var value = self.toString();
      var matches = regexp_format.exec(value);
      if (matches) {
        var regexp_pattern = matches[1];
        var regexp_flags = matches[2];
        var chars = regexp_pattern.split('');
        var chars_length = chars.length;
        var char_escaped = false;
        var regexp_pattern_escaped = '';
        for (var i = 0; i < chars_length; i++) {
          var current_char = chars[i];
          if (!char_escaped && current_char == '/') {
            regexp_pattern_escaped = regexp_pattern_escaped.concat('\\');
          }
          regexp_pattern_escaped = regexp_pattern_escaped.concat(current_char);
          if (current_char == '\\') {
            if (char_escaped) {
              // does not over escape
              char_escaped = false;
            } else {
              char_escaped = true;
            }
          } else {
            char_escaped = false;
          }
        }
        return '/' + regexp_pattern_escaped + '/' + regexp_flags;
      } else {
        return value;
      }
    
    }, $Regexp_inspect$9.$$arity = 0);
    
    Opal.def(self, '$match', $Regexp_match$10 = function $$match(string, pos) {
      var $iter = $Regexp_match$10.$$p, block = $iter || nil, self = this;
      if ($gvars["~"] == null) $gvars["~"] = nil;

      if ($iter) $Regexp_match$10.$$p = null;
      
      
      if ($iter) $Regexp_match$10.$$p = null;;
      ;
      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        if (string === nil) return ($gvars["~"] = nil);
        var m = self.exec($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str"));
        if (m) {
          ($gvars["~"] = $$($nesting, 'MatchData').$new(self, m));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        } else {
          return ($gvars["~"] = nil);
        }
      }

      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), "to_int");

      if (string === nil) {
        return ($gvars["~"] = nil);
      }

      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return ($gvars["~"] = nil);
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      while (true) {
        md = re.exec(string);
        if (md === null) {
          return ($gvars["~"] = nil);
        }
        if (md.index >= pos) {
          ($gvars["~"] = $$($nesting, 'MatchData').$new(re, md));
          return block === nil ? $gvars["~"] : Opal.yield1(block, $gvars["~"]);
        }
        re.lastIndex = md.index + 1;
      }
    ;
    }, $Regexp_match$10.$$arity = -2);
    
    Opal.def(self, '$match?', $Regexp_match$ques$11 = function(string, pos) {
      var self = this;

      
      ;
      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }

      if (pos === undefined) {
        return string === nil ? false : self.test($$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str"));
      }

      pos = $$($nesting, 'Opal').$coerce_to(pos, $$($nesting, 'Integer'), "to_int");

      if (string === nil) {
        return false;
      }

      string = $$($nesting, 'Opal').$coerce_to(string, $$($nesting, 'String'), "to_str");

      if (pos < 0) {
        pos += string.length;
        if (pos < 0) {
          return false;
        }
      }

      // global RegExp maintains state, so not using self/this
      var md, re = Opal.global_regexp(self);

      md = re.exec(string);
      if (md === null || md.index < pos) {
        return false;
      } else {
        return true;
      }
    ;
    }, $Regexp_match$ques$11.$$arity = -2);
    
    Opal.def(self, '$~', $Regexp_$$12 = function() {
      var self = this;
      if ($gvars._ == null) $gvars._ = nil;

      return self['$=~']($gvars._)
    }, $Regexp_$$12.$$arity = 0);
    
    Opal.def(self, '$source', $Regexp_source$13 = function $$source() {
      var self = this;

      return self.source;
    }, $Regexp_source$13.$$arity = 0);
    
    Opal.def(self, '$options', $Regexp_options$14 = function $$options() {
      var self = this;

      
      if (self.uninitialized) {
        self.$raise($$($nesting, 'TypeError'), "uninitialized Regexp")
      }
      var result = 0;
      // should be supported in IE6 according to https://msdn.microsoft.com/en-us/library/7f5z26w4(v=vs.94).aspx
      if (self.multiline) {
        result |= $$($nesting, 'MULTILINE');
      }
      if (self.ignoreCase) {
        result |= $$($nesting, 'IGNORECASE');
      }
      return result;
    
    }, $Regexp_options$14.$$arity = 0);
    
    Opal.def(self, '$casefold?', $Regexp_casefold$ques$15 = function() {
      var self = this;

      return self.ignoreCase;
    }, $Regexp_casefold$ques$15.$$arity = 0);
    return Opal.alias(self, "to_s", "source");
  })($nesting[0], RegExp, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MatchData');

    var $nesting = [self].concat($parent_nesting), $MatchData_initialize$16, $MatchData_$$$17, $MatchData_offset$18, $MatchData_$eq_eq$19, $MatchData_begin$20, $MatchData_end$21, $MatchData_captures$22, $MatchData_inspect$23, $MatchData_length$24, $MatchData_to_a$25, $MatchData_to_s$26, $MatchData_values_at$27;

    self.$$prototype.matches = nil;
    
    self.$attr_reader("post_match", "pre_match", "regexp", "string");
    
    Opal.def(self, '$initialize', $MatchData_initialize$16 = function $$initialize(regexp, match_groups) {
      var self = this;

      
      $gvars["~"] = self;
      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = match_groups.input.slice(0, match_groups.index);
      self.post_match = match_groups.input.slice(match_groups.index + match_groups[0].length);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    ;
    }, $MatchData_initialize$16.$$arity = 2);
    
    Opal.def(self, '$[]', $MatchData_$$$17 = function($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self.matches, '[]', Opal.to_a(args));
    }, $MatchData_$$$17.$$arity = -1);
    
    Opal.def(self, '$offset', $MatchData_offset$18 = function $$offset(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#offset only supports 0th element")
      }
      return [self.begin, self.begin + self.matches[n].length];
    
    }, $MatchData_offset$18.$$arity = 1);
    
    Opal.def(self, '$==', $MatchData_$eq_eq$19 = function(other) {
      var $a, $b, $c, $d, self = this;

      
      if ($truthy($$($nesting, 'MatchData')['$==='](other))) {
      } else {
        return false
      };
      return ($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = self.string == other.string) ? self.regexp.toString() == other.regexp.toString() : $d)) ? self.pre_match == other.pre_match : $c)) ? self.post_match == other.post_match : $b)) ? self.begin == other.begin : $a);
    }, $MatchData_$eq_eq$19.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$begin', $MatchData_begin$20 = function $$begin(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#begin only supports 0th element")
      }
      return self.begin;
    
    }, $MatchData_begin$20.$$arity = 1);
    
    Opal.def(self, '$end', $MatchData_end$21 = function $$end(n) {
      var self = this;

      
      if (n !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "MatchData#end only supports 0th element")
      }
      return self.begin + self.matches[n].length;
    
    }, $MatchData_end$21.$$arity = 1);
    
    Opal.def(self, '$captures', $MatchData_captures$22 = function $$captures() {
      var self = this;

      return self.matches.slice(1)
    }, $MatchData_captures$22.$$arity = 0);
    
    Opal.def(self, '$inspect', $MatchData_inspect$23 = function $$inspect() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    
    }, $MatchData_inspect$23.$$arity = 0);
    
    Opal.def(self, '$length', $MatchData_length$24 = function $$length() {
      var self = this;

      return self.matches.length
    }, $MatchData_length$24.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$to_a', $MatchData_to_a$25 = function $$to_a() {
      var self = this;

      return self.matches
    }, $MatchData_to_a$25.$$arity = 0);
    
    Opal.def(self, '$to_s', $MatchData_to_s$26 = function $$to_s() {
      var self = this;

      return self.matches[0]
    }, $MatchData_to_s$26.$$arity = 0);
    return (Opal.def(self, '$values_at', $MatchData_values_at$27 = function $$values_at($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var i, a, index, values = [];

      for (i = 0; i < args.length; i++) {

        if (args[i].$$is_range) {
          a = (args[i]).$to_a();
          a.unshift(i, 1);
          Array.prototype.splice.apply(args, a);
        }

        index = $$($nesting, 'Opal')['$coerce_to!'](args[i], $$($nesting, 'Integer'), "to_int");

        if (index < 0) {
          index += self.matches.length;
          if (index < 0) {
            values.push(nil);
            continue;
          }
        }

        values.push(self.matches[index]);
      }

      return values;
    ;
    }, $MatchData_values_at$27.$$arity = -1), nil) && 'values_at';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/string"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$coerce_to', '$raise', '$===', '$format', '$to_s', '$respond_to?', '$to_str', '$<=>', '$==', '$=~', '$new', '$force_encoding', '$casecmp', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$copy_singleton_methods', '$initialize_clone', '$initialize_dup', '$enum_for', '$size', '$chomp', '$[]', '$to_i', '$each_line', '$encoding', '$class', '$match', '$match?', '$captures', '$proc', '$succ', '$escape']);
  
  self.$require("corelib/comparable");
  self.$require("corelib/regexp");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String___id__$1, $String_try_convert$2, $String_new$3, $String_initialize$4, $String_$percent$5, $String_$$6, $String_$plus$7, $String_$lt_eq_gt$8, $String_$eq_eq$9, $String_$eq_tilde$10, $String_$$$11, $String_b$12, $String_capitalize$13, $String_casecmp$14, $String_casecmp$ques$15, $String_center$16, $String_chars$17, $String_chomp$18, $String_chop$19, $String_chr$20, $String_clone$21, $String_dup$22, $String_count$23, $String_delete$24, $String_delete_prefix$25, $String_delete_suffix$26, $String_downcase$27, $String_each_char$28, $String_each_line$30, $String_empty$ques$31, $String_end_with$ques$32, $String_gsub$33, $String_hash$34, $String_hex$35, $String_include$ques$36, $String_index$37, $String_inspect$38, $String_intern$39, $String_lines$40, $String_length$41, $String_ljust$42, $String_lstrip$43, $String_ascii_only$ques$44, $String_match$45, $String_match$ques$46, $String_next$47, $String_oct$48, $String_ord$49, $String_partition$50, $String_reverse$51, $String_rindex$52, $String_rjust$53, $String_rpartition$54, $String_rstrip$55, $String_scan$56, $String_split$57, $String_squeeze$58, $String_start_with$ques$59, $String_strip$60, $String_sub$61, $String_sum$62, $String_swapcase$63, $String_to_f$64, $String_to_i$65, $String_to_proc$66, $String_to_s$68, $String_tr$69, $String_tr_s$70, $String_upcase$71, $String_upto$72, $String_instance_variables$73, $String__load$74, $String_unicode_normalize$75, $String_unicode_normalized$ques$76, $String_unpack$77, $String_unpack1$78;

    
    self.$include($$($nesting, 'Comparable'));
    
    Opal.defineProperty(self.$$prototype, '$$is_string', true);

    Opal.defineProperty(self.$$prototype, '$$cast', function(string) {
      var klass = this.$$class;
      if (klass.$$constructor === String) {
        return string;
      } else {
        return new klass.$$constructor(string);
      }
    });
  ;
    
    Opal.def(self, '$__id__', $String___id__$1 = function $$__id__() {
      var self = this;

      return self.toString();
    }, $String___id__$1.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    Opal.defs(self, '$try_convert', $String_try_convert$2 = function $$try_convert(what) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](what, $$($nesting, 'String'), "to_str")
    }, $String_try_convert$2.$$arity = 1);
    Opal.defs(self, '$new', $String_new$3 = function(str) {
      var self = this;

      
      
      if (str == null) {
        str = "";
      };
      str = $$($nesting, 'Opal').$coerce_to(str, $$($nesting, 'String'), "to_str");
      return new self.$$constructor(str);;
    }, $String_new$3.$$arity = -1);
    
    Opal.def(self, '$initialize', $String_initialize$4 = function $$initialize(str) {
      var self = this;

      
      ;
      
      if (str === undefined) {
        return self;
      }
    ;
      return self.$raise($$($nesting, 'NotImplementedError'), "Mutable strings are not supported in Opal.");
    }, $String_initialize$4.$$arity = -1);
    
    Opal.def(self, '$%', $String_$percent$5 = function(data) {
      var self = this;

      if ($truthy($$($nesting, 'Array')['$==='](data))) {
        return $send(self, 'format', [self].concat(Opal.to_a(data)))
      } else {
        return self.$format(self, data)
      }
    }, $String_$percent$5.$$arity = 1);
    
    Opal.def(self, '$*', $String_$$6 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative argument")
      }

      if (count === 0) {
        return self.$$cast('');
      }

      var result = '',
          string = self.toString();

      // All credit for the bit-twiddling magic code below goes to Mozilla
      // polyfill implementation of String.prototype.repeat() posted here:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat

      if (string.length * count >= 1 << 28) {
        self.$raise($$($nesting, 'RangeError'), "multiply count must not overflow maximum string size")
      }

      for (;;) {
        if ((count & 1) === 1) {
          result += string;
        }
        count >>>= 1;
        if (count === 0) {
          break;
        }
        string += string;
      }

      return self.$$cast(result);
    
    }, $String_$$6.$$arity = 1);
    
    Opal.def(self, '$+', $String_$plus$7 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), "to_str");
      return self + other.$to_s();
    }, $String_$plus$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $String_$lt_eq_gt$8 = function(other) {
      var self = this;

      if ($truthy(other['$respond_to?']("to_str"))) {
        
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);;
      } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      
      }
    }, $String_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$==', $String_$eq_eq$9 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        return self.toString() === other.toString();
      }
      if ($$($nesting, 'Opal')['$respond_to?'](other, "to_str")) {
        return other['$=='](self);
      }
      return false;
    
    }, $String_$eq_eq$9.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    Opal.alias(self, "===", "==");
    
    Opal.def(self, '$=~', $String_$eq_tilde$10 = function(other) {
      var self = this;

      
      if (other.$$is_string) {
        self.$raise($$($nesting, 'TypeError'), "type mismatch: String given");
      }

      return other['$=~'](self);
    
    }, $String_$eq_tilde$10.$$arity = 1);
    
    Opal.def(self, '$[]', $String_$$$11 = function(index, length) {
      var self = this;

      
      ;
      
      var size = self.length, exclude;

      if (index.$$is_range) {
        exclude = index.excl;
        length  = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), "to_int");
        index   = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), "to_int");

        if (Math.abs(index) > size) {
          return nil;
        }

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.$$cast(self.substr(index, length));
      }


      if (index.$$is_string) {
        if (length != null) {
          self.$raise($$($nesting, 'TypeError'))
        }
        return self.indexOf(index) !== -1 ? self.$$cast(index) : nil;
      }


      if (index.$$is_regexp) {
        var match = self.match(index);

        if (match === null) {
          ($gvars["~"] = nil)
          return nil;
        }

        ($gvars["~"] = $$($nesting, 'MatchData').$new(index, match))

        if (length == null) {
          return self.$$cast(match[0]);
        }

        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");

        if (length < 0 && -length < match.length) {
          return self.$$cast(match[length += match.length]);
        }

        if (length >= 0 && length < match.length) {
          return self.$$cast(match[length]);
        }

        return nil;
      }


      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += size;
      }

      if (length == null) {
        if (index >= size || index < 0) {
          return nil;
        }
        return self.$$cast(self.substr(index, 1));
      }

      length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");

      if (length < 0) {
        return nil;
      }

      if (index > size || index < 0) {
        return nil;
      }

      return self.$$cast(self.substr(index, length));
    ;
    }, $String_$$$11.$$arity = -2);
    Opal.alias(self, "byteslice", "[]");
    
    Opal.def(self, '$b', $String_b$12 = function $$b() {
      var self = this;

      return self.$force_encoding("binary")
    }, $String_b$12.$$arity = 0);
    
    Opal.def(self, '$capitalize', $String_capitalize$13 = function $$capitalize() {
      var self = this;

      return self.$$cast(self.charAt(0).toUpperCase() + self.substr(1).toLowerCase());
    }, $String_capitalize$13.$$arity = 0);
    
    Opal.def(self, '$casecmp', $String_casecmp$14 = function $$casecmp(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
      } else {
        return nil
      };
      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), "to_str").$to_s();
      
      var ascii_only = /^[\x00-\x7F]*$/;
      if (ascii_only.test(self) && ascii_only.test(other)) {
        self = self.toLowerCase();
        other = other.toLowerCase();
      }
    ;
      return self['$<=>'](other);
    }, $String_casecmp$14.$$arity = 1);
    
    Opal.def(self, '$casecmp?', $String_casecmp$ques$15 = function(other) {
      var self = this;

      
      var cmp = self.$casecmp(other);
      if (cmp === nil) {
        return nil;
      } else {
        return cmp === 0;
      }
    
    }, $String_casecmp$ques$15.$$arity = 1);
    
    Opal.def(self, '$center', $String_center$16 = function $$center(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), "to_int");
      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var ljustified = self.$ljust($rb_divide($rb_plus(width, self.length), 2).$ceil(), padstr),
          rjustified = self.$rjust($rb_divide($rb_plus(width, self.length), 2).$floor(), padstr);

      return self.$$cast(rjustified + ljustified.slice(self.length));
    ;
    }, $String_center$16.$$arity = -2);
    
    Opal.def(self, '$chars', $String_chars$17 = function $$chars() {
      var $iter = $String_chars$17.$$p, block = $iter || nil, self = this;

      if ($iter) $String_chars$17.$$p = null;
      
      
      if ($iter) $String_chars$17.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$each_char().$to_a()
      };
      return $send(self, 'each_char', [], block.$to_proc());
    }, $String_chars$17.$$arity = 0);
    
    Opal.def(self, '$chomp', $String_chomp$18 = function $$chomp(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ($truthy(separator === nil || self.length === 0)) {
        return self};
      separator = $$($nesting, 'Opal')['$coerce_to!'](separator, $$($nesting, 'String'), "to_str").$to_s();
      
      var result;

      if (separator === "\n") {
        result = self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        result = self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length >= separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          result = self.substr(0, self.length - separator.length);
        }
      }

      if (result != null) {
        return self.$$cast(result);
      }
    ;
      return self;
    }, $String_chomp$18.$$arity = -1);
    
    Opal.def(self, '$chop', $String_chop$19 = function $$chop() {
      var self = this;

      
      var length = self.length, result;

      if (length <= 1) {
        result = "";
      } else if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        result = self.substr(0, length - 2);
      } else {
        result = self.substr(0, length - 1);
      }

      return self.$$cast(result);
    
    }, $String_chop$19.$$arity = 0);
    
    Opal.def(self, '$chr', $String_chr$20 = function $$chr() {
      var self = this;

      return self.charAt(0);
    }, $String_chr$20.$$arity = 0);
    
    Opal.def(self, '$clone', $String_clone$21 = function $$clone() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$copy_singleton_methods(self);
      copy.$initialize_clone(self);
      return copy;
    }, $String_clone$21.$$arity = 0);
    
    Opal.def(self, '$dup', $String_dup$22 = function $$dup() {
      var self = this, copy = nil;

      
      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    }, $String_dup$22.$$arity = 0);
    
    Opal.def(self, '$count', $String_count$23 = function $$count($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return 0;
      }
      return self.length - self.replace(new RegExp(char_class, 'g'), '').length;
    ;
    }, $String_count$23.$$arity = -1);
    
    Opal.def(self, '$delete', $String_delete$24 = function($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        self.$raise($$($nesting, 'ArgumentError'), "ArgumentError: wrong number of arguments (0 for 1+)")
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.$$cast(self.replace(new RegExp(char_class, 'g'), ''));
    ;
    }, $String_delete$24.$$arity = -1);
    
    Opal.def(self, '$delete_prefix', $String_delete_prefix$25 = function $$delete_prefix(prefix) {
      var self = this;

      
      if (!prefix.$$is_string) {
        (prefix = $$($nesting, 'Opal').$coerce_to(prefix, $$($nesting, 'String'), "to_str"))
      }

      if (self.slice(0, prefix.length) === prefix) {
        return self.$$cast(self.slice(prefix.length));
      } else {
        return self;
      }
    
    }, $String_delete_prefix$25.$$arity = 1);
    
    Opal.def(self, '$delete_suffix', $String_delete_suffix$26 = function $$delete_suffix(suffix) {
      var self = this;

      
      if (!suffix.$$is_string) {
        (suffix = $$($nesting, 'Opal').$coerce_to(suffix, $$($nesting, 'String'), "to_str"))
      }

      if (self.slice(self.length - suffix.length) === suffix) {
        return self.$$cast(self.slice(0, self.length - suffix.length));
      } else {
        return self;
      }
    
    }, $String_delete_suffix$26.$$arity = 1);
    
    Opal.def(self, '$downcase', $String_downcase$27 = function $$downcase() {
      var self = this;

      return self.$$cast(self.toLowerCase());
    }, $String_downcase$27.$$arity = 0);
    
    Opal.def(self, '$each_char', $String_each_char$28 = function $$each_char() {
      var $iter = $String_each_char$28.$$p, block = $iter || nil, $$29, self = this;

      if ($iter) $String_each_char$28.$$p = null;
      
      
      if ($iter) $String_each_char$28.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_char"], ($$29 = function(){var self = $$29.$$s || this;

        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.charAt(i));
      }
    ;
      return self;
    }, $String_each_char$28.$$arity = 0);
    
    Opal.def(self, '$each_line', $String_each_line$30 = function $$each_line(separator) {
      var $iter = $String_each_line$30.$$p, block = $iter || nil, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) $String_each_line$30.$$p = null;
      
      
      if ($iter) $String_each_line$30.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_line", separator)
      };
      
      if (separator === nil) {
        Opal.yield1(block, self);

        return self;
      }

      separator = $$($nesting, 'Opal').$coerce_to(separator, $$($nesting, 'String'), "to_str")

      var a, i, n, length, chomped, trailing, splitted;

      if (separator.length === 0) {
        for (a = self.split(/(\n{2,})/), i = 0, n = a.length; i < n; i += 2) {
          if (a[i] || a[i + 1]) {
            var value = (a[i] || "") + (a[i + 1] || "");
            Opal.yield1(block, self.$$cast(value));
          }
        }

        return self;
      }

      chomped  = self.$chomp(separator);
      trailing = self.length != chomped.length;
      splitted = chomped.split(separator);

      for (i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          Opal.yield1(block, self.$$cast(splitted[i] + separator));
        }
        else {
          Opal.yield1(block, self.$$cast(splitted[i]));
        }
      }
    ;
      return self;
    }, $String_each_line$30.$$arity = -1);
    
    Opal.def(self, '$empty?', $String_empty$ques$31 = function() {
      var self = this;

      return self.length === 0;
    }, $String_empty$ques$31.$$arity = 0);
    
    Opal.def(self, '$end_with?', $String_end_with$ques$32 = function($a) {
      var $post_args, suffixes, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      suffixes = $post_args;;
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $$($nesting, 'Opal').$coerce_to(suffixes[i], $$($nesting, 'String'), "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    ;
      return false;
    }, $String_end_with$ques$32.$$arity = -1);
    Opal.alias(self, "equal?", "===");
    
    Opal.def(self, '$gsub', $String_gsub$33 = function $$gsub(pattern, replacement) {
      var $iter = $String_gsub$33.$$p, block = $iter || nil, self = this;

      if ($iter) $String_gsub$33.$$p = null;
      
      
      if ($iter) $String_gsub$33.$$p = null;;
      ;
      
      if (replacement === undefined && block === nil) {
        return self.$enum_for("gsub", pattern);
      }

      var result = '', match_data = nil, index = 0, match, _replacement;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      var lastIndex;
      while (true) {
        match = pattern.exec(self);

        if (match === null) {
          ($gvars["~"] = nil)
          result += self.slice(index);
          break;
        }

        match_data = $$($nesting, 'MatchData').$new(pattern, match);

        if (replacement === undefined) {
          lastIndex = pattern.lastIndex;
          _replacement = block(match[0]);
          pattern.lastIndex = lastIndex; // save and restore lastIndex
        }
        else if (replacement.$$is_hash) {
          _replacement = (replacement)['$[]'](match[0]).$to_s();
        }
        else {
          if (!replacement.$$is_string) {
            replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), "to_str");
          }
          _replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');
        }

        if (pattern.lastIndex === match.index) {
          result += (_replacement + self.slice(index, match.index + 1))
          pattern.lastIndex += 1;
        }
        else {
          result += (self.slice(index, match.index) + _replacement)
        }
        index = pattern.lastIndex;
      }

      ($gvars["~"] = match_data)
      return self.$$cast(result);
    ;
    }, $String_gsub$33.$$arity = -2);
    
    Opal.def(self, '$hash', $String_hash$34 = function $$hash() {
      var self = this;

      return self.toString();
    }, $String_hash$34.$$arity = 0);
    
    Opal.def(self, '$hex', $String_hex$35 = function $$hex() {
      var self = this;

      return self.$to_i(16)
    }, $String_hex$35.$$arity = 0);
    
    Opal.def(self, '$include?', $String_include$ques$36 = function(other) {
      var self = this;

      
      if (!other.$$is_string) {
        (other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'String'), "to_str"))
      }
      return self.indexOf(other) !== -1;
    
    }, $String_include$ques$36.$$arity = 1);
    
    Opal.def(self, '$index', $String_index$37 = function $$index(search, offset) {
      var self = this;

      
      ;
      
      var index,
          match,
          regex;

      if (offset === undefined) {
        offset = 0;
      } else {
        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        regex = Opal.global_multiline_regexp(search);
        while (true) {
          match = regex.exec(self);
          if (match === null) {
            ($gvars["~"] = nil);
            index = -1;
            break;
          }
          if (match.index >= offset) {
            ($gvars["~"] = $$($nesting, 'MatchData').$new(regex, match))
            index = match.index;
            break;
          }
          regex.lastIndex = match.index + 1;
        }
      } else {
        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), "to_str");
        if (search.length === 0 && offset > self.length) {
          index = -1;
        } else {
          index = self.indexOf(search, offset);
        }
      }

      return index === -1 ? nil : index;
    ;
    }, $String_index$37.$$arity = -2);
    
    Opal.def(self, '$inspect', $String_inspect$38 = function $$inspect() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\u007F-\u009F\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta = {
            '\u0007': '\\a',
            '\u001b': '\\e',
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '\v': '\\v',
            '"' : '\\"',
            '\\': '\\\\'
          },
          escaped = self.replace(escapable, function (chr) {
            return meta[chr] || '\\u' + ('0000' + chr.charCodeAt(0).toString(16).toUpperCase()).slice(-4);
          });
      return '"' + escaped.replace(/\#[\$\@\{]/g, '\\$&') + '"';
    
    }, $String_inspect$38.$$arity = 0);
    
    Opal.def(self, '$intern', $String_intern$39 = function $$intern() {
      var self = this;

      return self.toString();
    }, $String_intern$39.$$arity = 0);
    
    Opal.def(self, '$lines', $String_lines$40 = function $$lines(separator) {
      var $iter = $String_lines$40.$$p, block = $iter || nil, self = this, e = nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if ($iter) $String_lines$40.$$p = null;
      
      
      if ($iter) $String_lines$40.$$p = null;;
      
      if (separator == null) {
        separator = $gvars["/"];
      };
      e = $send(self, 'each_line', [separator], block.$to_proc());
      if ($truthy(block)) {
        return self
      } else {
        return e.$to_a()
      };
    }, $String_lines$40.$$arity = -1);
    
    Opal.def(self, '$length', $String_length$41 = function $$length() {
      var self = this;

      return self.length;
    }, $String_length$41.$$arity = 0);
    
    Opal.def(self, '$ljust', $String_ljust$42 = function $$ljust(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), "to_int");
      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self.$$cast(self + result.slice(0, width));
    ;
    }, $String_ljust$42.$$arity = -2);
    
    Opal.def(self, '$lstrip', $String_lstrip$43 = function $$lstrip() {
      var self = this;

      return self.replace(/^\s*/, '');
    }, $String_lstrip$43.$$arity = 0);
    
    Opal.def(self, '$ascii_only?', $String_ascii_only$ques$44 = function() {
      var self = this;

      
      if (self.$encoding()['$==']($$$($$($nesting, 'Encoding'), 'UTF_16BE'))) {
        return false};
      return /^[\x00-\x7F]*$/.test(self);;
    }, $String_ascii_only$ques$44.$$arity = 0);
    
    Opal.def(self, '$match', $String_match$45 = function $$match(pattern, pos) {
      var $iter = $String_match$45.$$p, block = $iter || nil, $a, self = this;

      if ($iter) $String_match$45.$$p = null;
      
      
      if ($iter) $String_match$45.$$p = null;;
      ;
      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return $send(pattern, 'match', [self, pos], block.$to_proc());
    }, $String_match$45.$$arity = -2);
    
    Opal.def(self, '$match?', $String_match$ques$46 = function(pattern, pos) {
      var $a, self = this;

      
      ;
      if ($truthy(($truthy($a = $$($nesting, 'String')['$==='](pattern)) ? $a : pattern['$respond_to?']("to_str")))) {
        pattern = $$($nesting, 'Regexp').$new(pattern.$to_str())};
      if ($truthy($$($nesting, 'Regexp')['$==='](pattern))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return pattern['$match?'](self, pos);
    }, $String_match$ques$46.$$arity = -2);
    
    Opal.def(self, '$next', $String_next$47 = function $$next() {
      var self = this;

      
      var i = self.length;
      if (i === 0) {
        return self.$$cast('');
      }
      var result = self;
      var first_alphanum_char_index = self.search(/[a-zA-Z0-9]/);
      var carry = false;
      var code;
      while (i--) {
        code = self.charCodeAt(i);
        if ((code >= 48 && code <= 57) ||
          (code >= 65 && code <= 90) ||
          (code >= 97 && code <= 122)) {
          switch (code) {
          case 57:
            carry = true;
            code = 48;
            break;
          case 90:
            carry = true;
            code = 65;
            break;
          case 122:
            carry = true;
            code = 97;
            break;
          default:
            carry = false;
            code += 1;
          }
        } else {
          if (first_alphanum_char_index === -1) {
            if (code === 255) {
              carry = true;
              code = 0;
            } else {
              carry = false;
              code += 1;
            }
          } else {
            carry = true;
          }
        }
        result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i + 1);
        if (carry && (i === 0 || i === first_alphanum_char_index)) {
          switch (code) {
          case 65:
            break;
          case 97:
            break;
          default:
            code += 1;
          }
          if (i === 0) {
            result = String.fromCharCode(code) + result;
          } else {
            result = result.slice(0, i) + String.fromCharCode(code) + result.slice(i);
          }
          carry = false;
        }
        if (!carry) {
          break;
        }
      }
      return self.$$cast(result);
    
    }, $String_next$47.$$arity = 0);
    
    Opal.def(self, '$oct', $String_oct$48 = function $$oct() {
      var self = this;

      
      var result,
          string = self,
          radix = 8;

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/i, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x') {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          radix = 2;
          break;
        case '0':
        case '0o':
          radix = 8;
          break;
        case '0d':
          radix = 10;
          break;
        case '0x':
          radix = 16;
          break;
        }
        return head + tail;
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    
    }, $String_oct$48.$$arity = 0);
    
    Opal.def(self, '$ord', $String_ord$49 = function $$ord() {
      var self = this;

      return self.charCodeAt(0);
    }, $String_ord$49.$$arity = 0);
    
    Opal.def(self, '$partition', $String_partition$50 = function $$partition(sep) {
      var self = this;

      
      var i, m;

      if (sep.$$is_regexp) {
        m = sep.exec(self);
        if (m === null) {
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(sep, m);
          sep = m[0];
          i = m.index;
        }
      } else {
        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), "to_str");
        i = self.indexOf(sep);
      }

      if (i === -1) {
        return [self, '', ''];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, $String_partition$50.$$arity = 1);
    
    Opal.def(self, '$reverse', $String_reverse$51 = function $$reverse() {
      var self = this;

      return self.split('').reverse().join('');
    }, $String_reverse$51.$$arity = 0);
    
    Opal.def(self, '$rindex', $String_rindex$52 = function $$rindex(search, offset) {
      var self = this;

      
      ;
      
      var i, m, r, _m;

      if (offset === undefined) {
        offset = self.length;
      } else {
        offset = $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), "to_int");
        if (offset < 0) {
          offset += self.length;
          if (offset < 0) {
            return nil;
          }
        }
      }

      if (search.$$is_regexp) {
        m = null;
        r = Opal.global_multiline_regexp(search);
        while (true) {
          _m = r.exec(self);
          if (_m === null || _m.index > offset) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }
        if (m === null) {
          ($gvars["~"] = nil)
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(r, m);
          i = m.index;
        }
      } else {
        search = $$($nesting, 'Opal').$coerce_to(search, $$($nesting, 'String'), "to_str");
        i = self.lastIndexOf(search, offset);
      }

      return i === -1 ? nil : i;
    ;
    }, $String_rindex$52.$$arity = -2);
    
    Opal.def(self, '$rjust', $String_rjust$53 = function $$rjust(width, padstr) {
      var self = this;

      
      
      if (padstr == null) {
        padstr = " ";
      };
      width = $$($nesting, 'Opal').$coerce_to(width, $$($nesting, 'Integer'), "to_int");
      padstr = $$($nesting, 'Opal').$coerce_to(padstr, $$($nesting, 'String'), "to_str").$to_s();
      if ($truthy(padstr['$empty?']())) {
        self.$raise($$($nesting, 'ArgumentError'), "zero width padding")};
      if ($truthy(width <= self.length)) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return self.$$cast(result + padstr.slice(0, remaining) + self);
    ;
    }, $String_rjust$53.$$arity = -2);
    
    Opal.def(self, '$rpartition', $String_rpartition$54 = function $$rpartition(sep) {
      var self = this;

      
      var i, m, r, _m;

      if (sep.$$is_regexp) {
        m = null;
        r = Opal.global_multiline_regexp(sep);

        while (true) {
          _m = r.exec(self);
          if (_m === null) {
            break;
          }
          m = _m;
          r.lastIndex = m.index + 1;
        }

        if (m === null) {
          i = -1;
        } else {
          $$($nesting, 'MatchData').$new(r, m);
          sep = m[0];
          i = m.index;
        }

      } else {
        sep = $$($nesting, 'Opal').$coerce_to(sep, $$($nesting, 'String'), "to_str");
        i = self.lastIndexOf(sep);
      }

      if (i === -1) {
        return ['', '', self];
      }

      return [
        self.slice(0, i),
        self.slice(i, i + sep.length),
        self.slice(i + sep.length)
      ];
    
    }, $String_rpartition$54.$$arity = 1);
    
    Opal.def(self, '$rstrip', $String_rstrip$55 = function $$rstrip() {
      var self = this;

      return self.replace(/[\s\u0000]*$/, '');
    }, $String_rstrip$55.$$arity = 0);
    
    Opal.def(self, '$scan', $String_scan$56 = function $$scan(pattern) {
      var $iter = $String_scan$56.$$p, block = $iter || nil, self = this;

      if ($iter) $String_scan$56.$$p = null;
      
      
      if ($iter) $String_scan$56.$$p = null;;
      
      var result = [],
          match_data = nil,
          match;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
      }

      while ((match = pattern.exec(self)) != null) {
        match_data = $$($nesting, 'MatchData').$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push((match_data).$captures());
        } else {
          match.length == 1 ? block(match[0]) : block.call(self, (match_data).$captures());
        }
        if (pattern.lastIndex === match.index) {
          pattern.lastIndex += 1;
        }
      }

      ($gvars["~"] = match_data)

      return (block !== nil ? self : result);
    ;
    }, $String_scan$56.$$arity = 1);
    Opal.alias(self, "size", "length");
    Opal.alias(self, "slice", "[]");
    
    Opal.def(self, '$split', $String_split$57 = function $$split(pattern, limit) {
      var $a, self = this;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      
      ;
      ;
      
      if (self.length === 0) {
        return [];
      }

      if (limit === undefined) {
        limit = 0;
      } else {
        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), "to_int");
        if (limit === 1) {
          return [self];
        }
      }

      if (pattern === undefined || pattern === nil) {
        pattern = ($truthy($a = $gvars[";"]) ? $a : " ");
      }

      var result = [],
          string = self.toString(),
          index = 0,
          match,
          i, ii;

      if (pattern.$$is_regexp) {
        pattern = Opal.global_multiline_regexp(pattern);
      } else {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str").$to_s();
        if (pattern === ' ') {
          pattern = /\s+/gm;
          string = string.replace(/^\s+/, '');
        } else {
          pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'gm');
        }
      }

      result = string.split(pattern);

      if (result.length === 1 && result[0] === string) {
        return [self.$$cast(result[0])];
      }

      while ((i = result.indexOf(undefined)) !== -1) {
        result.splice(i, 1);
      }

      function castResult() {
        for (i = 0; i < result.length; i++) {
          result[i] = self.$$cast(result[i]);
        }
      }

      if (limit === 0) {
        while (result[result.length - 1] === '') {
          result.length -= 1;
        }
        castResult();
        return result;
      }

      match = pattern.exec(string);

      if (limit < 0) {
        if (match !== null && match[0] === '' && pattern.source.indexOf('(?=') === -1) {
          for (i = 0, ii = match.length; i < ii; i++) {
            result.push('');
          }
        }
        castResult();
        return result;
      }

      if (match !== null && match[0] === '') {
        result.splice(limit - 1, result.length - 1, result.slice(limit - 1).join(''));
        castResult();
        return result;
      }

      if (limit >= result.length) {
        castResult();
        return result;
      }

      i = 0;
      while (match !== null) {
        i++;
        index = pattern.lastIndex;
        if (i + 1 === limit) {
          break;
        }
        match = pattern.exec(string);
      }
      result.splice(limit - 1, result.length - 1, string.slice(index));
      castResult();
      return result;
    ;
    }, $String_split$57.$$arity = -1);
    
    Opal.def(self, '$squeeze', $String_squeeze$58 = function $$squeeze($a) {
      var $post_args, sets, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      sets = $post_args;;
      
      if (sets.length === 0) {
        return self.$$cast(self.replace(/(.)\1+/g, '$1'));
      }
      var char_class = char_class_from_char_sets(sets);
      if (char_class === null) {
        return self;
      }
      return self.$$cast(self.replace(new RegExp('(' + char_class + ')\\1+', 'g'), '$1'));
    ;
    }, $String_squeeze$58.$$arity = -1);
    
    Opal.def(self, '$start_with?', $String_start_with$ques$59 = function($a) {
      var $post_args, prefixes, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      prefixes = $post_args;;
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $$($nesting, 'Opal').$coerce_to(prefixes[i], $$($nesting, 'String'), "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    ;
    }, $String_start_with$ques$59.$$arity = -1);
    
    Opal.def(self, '$strip', $String_strip$60 = function $$strip() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/[\s\u0000]*$/, '');
    }, $String_strip$60.$$arity = 0);
    
    Opal.def(self, '$sub', $String_sub$61 = function $$sub(pattern, replacement) {
      var $iter = $String_sub$61.$$p, block = $iter || nil, self = this;

      if ($iter) $String_sub$61.$$p = null;
      
      
      if ($iter) $String_sub$61.$$p = null;;
      ;
      
      if (!pattern.$$is_regexp) {
        pattern = $$($nesting, 'Opal').$coerce_to(pattern, $$($nesting, 'String'), "to_str");
        pattern = new RegExp(pattern.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'));
      }

      var result, match = pattern.exec(self);

      if (match === null) {
        ($gvars["~"] = nil)
        result = self.toString();
      } else {
        $$($nesting, 'MatchData').$new(pattern, match)

        if (replacement === undefined) {

          if (block === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (1 for 2)")
          }
          result = self.slice(0, match.index) + block(match[0]) + self.slice(match.index + match[0].length);

        } else if (replacement.$$is_hash) {

          result = self.slice(0, match.index) + (replacement)['$[]'](match[0]).$to_s() + self.slice(match.index + match[0].length);

        } else {

          replacement = $$($nesting, 'Opal').$coerce_to(replacement, $$($nesting, 'String'), "to_str");

          replacement = replacement.replace(/([\\]+)([0-9+&`'])/g, function (original, slashes, command) {
            if (slashes.length % 2 === 0) {
              return original;
            }
            switch (command) {
            case "+":
              for (var i = match.length - 1; i > 0; i--) {
                if (match[i] !== undefined) {
                  return slashes.slice(1) + match[i];
                }
              }
              return '';
            case "&": return slashes.slice(1) + match[0];
            case "`": return slashes.slice(1) + self.slice(0, match.index);
            case "'": return slashes.slice(1) + self.slice(match.index + match[0].length);
            default:  return slashes.slice(1) + (match[command] || '');
            }
          }).replace(/\\\\/g, '\\');

          result = self.slice(0, match.index) + replacement + self.slice(match.index + match[0].length);
        }
      }

      return self.$$cast(result);
    ;
    }, $String_sub$61.$$arity = -2);
    Opal.alias(self, "succ", "next");
    
    Opal.def(self, '$sum', $String_sum$62 = function $$sum(n) {
      var self = this;

      
      
      if (n == null) {
        n = 16;
      };
      
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");

      var result = 0,
          length = self.length,
          i = 0;

      for (; i < length; i++) {
        result += self.charCodeAt(i);
      }

      if (n <= 0) {
        return result;
      }

      return result & (Math.pow(2, n) - 1);
    ;
    }, $String_sum$62.$$arity = -1);
    
    Opal.def(self, '$swapcase', $String_swapcase$63 = function $$swapcase() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    }, $String_swapcase$63.$$arity = 0);
    
    Opal.def(self, '$to_f', $String_to_f$64 = function $$to_f() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    }, $String_to_f$64.$$arity = 0);
    
    Opal.def(self, '$to_i', $String_to_i$65 = function $$to_i(base) {
      var self = this;

      
      
      if (base == null) {
        base = 10;
      };
      
      var result,
          string = self.toLowerCase(),
          radix = $$($nesting, 'Opal').$coerce_to(base, $$($nesting, 'Integer'), "to_int");

      if (radix === 1 || radix < 0 || radix > 36) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (radix))
      }

      if (/^\s*_/.test(string)) {
        return 0;
      }

      string = string.replace(/^(\s*[+-]?)(0[bodx]?)(.+)$/, function (original, head, flag, tail) {
        switch (tail.charAt(0)) {
        case '+':
        case '-':
          return original;
        case '0':
          if (tail.charAt(1) === 'x' && flag === '0x' && (radix === 0 || radix === 16)) {
            return original;
          }
        }
        switch (flag) {
        case '0b':
          if (radix === 0 || radix === 2) {
            radix = 2;
            return head + tail;
          }
          break;
        case '0':
        case '0o':
          if (radix === 0 || radix === 8) {
            radix = 8;
            return head + tail;
          }
          break;
        case '0d':
          if (radix === 0 || radix === 10) {
            radix = 10;
            return head + tail;
          }
          break;
        case '0x':
          if (radix === 0 || radix === 16) {
            radix = 16;
            return head + tail;
          }
          break;
        }
        return original
      });

      result = parseInt(string.replace(/_(?!_)/g, ''), radix);
      return isNaN(result) ? 0 : result;
    ;
    }, $String_to_i$65.$$arity = -1);
    
    Opal.def(self, '$to_proc', $String_to_proc$66 = function $$to_proc() {
      var $$67, $iter = $String_to_proc$66.$$p, $yield = $iter || nil, self = this, method_name = nil;

      if ($iter) $String_to_proc$66.$$p = null;
      
      method_name = $rb_plus("$", self.valueOf());
      return $send(self, 'proc', [], ($$67 = function($a){var self = $$67.$$s || this, $iter = $$67.$$p, block = $iter || nil, $post_args, args;

      
        
        if ($iter) $$67.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        
        if (args.length === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "no receiver given")
        }

        var recv = args[0];

        if (recv == null) recv = nil;

        var body = recv[method_name];

        if (!body) {
          return recv.$method_missing.apply(recv, args);
        }

        if (typeof block === 'function') {
          body.$$p = block;
        }

        if (args.length === 1) {
          return body.call(recv);
        } else {
          return body.apply(recv, args.slice(1));
        }
      ;}, $$67.$$s = self, $$67.$$arity = -1, $$67));
    }, $String_to_proc$66.$$arity = 0);
    
    Opal.def(self, '$to_s', $String_to_s$68 = function $$to_s() {
      var self = this;

      return self.toString();
    }, $String_to_s$68.$$arity = 0);
    Opal.alias(self, "to_str", "to_s");
    Opal.alias(self, "to_sym", "intern");
    
    Opal.def(self, '$tr', $String_tr$69 = function $$tr(from, to) {
      var self = this;

      
      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), "to_str").$to_s();
      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0 || from === to) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_to == null) {
              last_to = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_to.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_to = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return self.$$cast(new_str);
    ;
    }, $String_tr$69.$$arity = 2);
    
    Opal.def(self, '$tr_s', $String_tr_s$70 = function $$tr_s(from, to) {
      var self = this;

      
      from = $$($nesting, 'Opal').$coerce_to(from, $$($nesting, 'String'), "to_str").$to_s();
      to = $$($nesting, 'Opal').$coerce_to(to, $$($nesting, 'String'), "to_str").$to_s();
      
      if (from.length == 0) {
        return self;
      }

      var i, in_range, c, ch, start, end, length;
      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^' && from_chars.length > 1) {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      in_range = false;
      for (i = 0; i < from_length; i++) {
        ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          start = last_from.charCodeAt(0);
          end = ch.charCodeAt(0);
          if (start > end) {
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
          }
          for (c = start + 1; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          in_range = false;
          for (i = 0; i < to_length; i++) {
            ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              start = last_from.charCodeAt(0);
              end = ch.charCodeAt(0);
              if (start > end) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (String.fromCharCode(start)) + "-" + (String.fromCharCode(end)) + "\" in string transliteration")
              }
              for (c = start + 1; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (i = 0, length = self.length; i < length; i++) {
        ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return self.$$cast(new_str);
    ;
    }, $String_tr_s$70.$$arity = 2);
    
    Opal.def(self, '$upcase', $String_upcase$71 = function $$upcase() {
      var self = this;

      return self.$$cast(self.toUpperCase());
    }, $String_upcase$71.$$arity = 0);
    
    Opal.def(self, '$upto', $String_upto$72 = function $$upto(stop, excl) {
      var $iter = $String_upto$72.$$p, block = $iter || nil, self = this;

      if ($iter) $String_upto$72.$$p = null;
      
      
      if ($iter) $String_upto$72.$$p = null;;
      
      if (excl == null) {
        excl = false;
      };
      if ((block !== nil)) {
      } else {
        return self.$enum_for("upto", stop, excl)
      };
      stop = $$($nesting, 'Opal').$coerce_to(stop, $$($nesting, 'String'), "to_str");
      
      var a, b, s = self.toString();

      if (s.length === 1 && stop.length === 1) {

        a = s.charCodeAt(0);
        b = stop.charCodeAt(0);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(String.fromCharCode(a));

          a += 1;
        }

      } else if (parseInt(s, 10).toString() === s && parseInt(stop, 10).toString() === stop) {

        a = parseInt(s, 10);
        b = parseInt(stop, 10);

        while (a <= b) {
          if (excl && a === b) {
            break;
          }

          block(a.toString());

          a += 1;
        }

      } else {

        while (s.length <= stop.length && s <= stop) {
          if (excl && s === stop) {
            break;
          }

          block(s);

          s = (s).$succ();
        }

      }
      return self;
    ;
    }, $String_upto$72.$$arity = -2);
    
    function char_class_from_char_sets(sets) {
      function explode_sequences_in_character_set(set) {
        var result = '',
            i, len = set.length,
            curr_char,
            skip_next_dash,
            char_code_from,
            char_code_upto,
            char_code;
        for (i = 0; i < len; i++) {
          curr_char = set.charAt(i);
          if (curr_char === '-' && i > 0 && i < (len - 1) && !skip_next_dash) {
            char_code_from = set.charCodeAt(i - 1);
            char_code_upto = set.charCodeAt(i + 1);
            if (char_code_from > char_code_upto) {
              self.$raise($$($nesting, 'ArgumentError'), "" + "invalid range \"" + (char_code_from) + "-" + (char_code_upto) + "\" in string transliteration")
            }
            for (char_code = char_code_from + 1; char_code < char_code_upto + 1; char_code++) {
              result += String.fromCharCode(char_code);
            }
            skip_next_dash = true;
            i++;
          } else {
            skip_next_dash = (curr_char === '\\');
            result += curr_char;
          }
        }
        return result;
      }

      function intersection(setA, setB) {
        if (setA.length === 0) {
          return setB;
        }
        var result = '',
            i, len = setA.length,
            chr;
        for (i = 0; i < len; i++) {
          chr = setA.charAt(i);
          if (setB.indexOf(chr) !== -1) {
            result += chr;
          }
        }
        return result;
      }

      var i, len, set, neg, chr, tmp,
          pos_intersection = '',
          neg_intersection = '';

      for (i = 0, len = sets.length; i < len; i++) {
        set = $$($nesting, 'Opal').$coerce_to(sets[i], $$($nesting, 'String'), "to_str");
        neg = (set.charAt(0) === '^' && set.length > 1);
        set = explode_sequences_in_character_set(neg ? set.slice(1) : set);
        if (neg) {
          neg_intersection = intersection(neg_intersection, set);
        } else {
          pos_intersection = intersection(pos_intersection, set);
        }
      }

      if (pos_intersection.length > 0 && neg_intersection.length > 0) {
        tmp = '';
        for (i = 0, len = pos_intersection.length; i < len; i++) {
          chr = pos_intersection.charAt(i);
          if (neg_intersection.indexOf(chr) === -1) {
            tmp += chr;
          }
        }
        pos_intersection = tmp;
        neg_intersection = '';
      }

      if (pos_intersection.length > 0) {
        return '[' + $$($nesting, 'Regexp').$escape(pos_intersection) + ']';
      }

      if (neg_intersection.length > 0) {
        return '[^' + $$($nesting, 'Regexp').$escape(neg_intersection) + ']';
      }

      return null;
    }
  ;
    
    Opal.def(self, '$instance_variables', $String_instance_variables$73 = function $$instance_variables() {
      var self = this;

      return []
    }, $String_instance_variables$73.$$arity = 0);
    Opal.defs(self, '$_load', $String__load$74 = function $$_load($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'new', Opal.to_a(args));
    }, $String__load$74.$$arity = -1);
    
    Opal.def(self, '$unicode_normalize', $String_unicode_normalize$75 = function $$unicode_normalize(form) {
      var self = this;

      
      ;
      return self.toString();;
    }, $String_unicode_normalize$75.$$arity = -1);
    
    Opal.def(self, '$unicode_normalized?', $String_unicode_normalized$ques$76 = function(form) {
      var self = this;

      
      ;
      return true;
    }, $String_unicode_normalized$ques$76.$$arity = -1);
    
    Opal.def(self, '$unpack', $String_unpack$77 = function $$unpack(format) {
      var self = this;

      return self.$raise("To use String#unpack, you must first require 'corelib/string/unpack'.")
    }, $String_unpack$77.$$arity = 1);
    return (Opal.def(self, '$unpack1', $String_unpack1$78 = function $$unpack1(format) {
      var self = this;

      return self.$raise("To use String#unpack1, you must first require 'corelib/string/unpack'.")
    }, $String_unpack1$78.$$arity = 1), nil) && 'unpack1';
  })($nesting[0], String, $nesting);
  return Opal.const_set($nesting[0], 'Symbol', $$($nesting, 'String'));
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/enumerable"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy, $hash2 = Opal.hash2, $lambda = Opal.lambda;

  Opal.add_stubs(['$each', '$public_send', '$destructure', '$to_enum', '$enumerator_size', '$new', '$yield', '$raise', '$slice_when', '$!', '$enum_for', '$flatten', '$map', '$warn', '$proc', '$==', '$nil?', '$respond_to?', '$coerce_to!', '$>', '$*', '$coerce_to', '$try_convert', '$<', '$+', '$-', '$ceil', '$/', '$size', '$__send__', '$length', '$<=', '$[]', '$push', '$<<', '$[]=', '$===', '$inspect', '$<=>', '$first', '$reverse', '$sort', '$to_proc', '$compare', '$call', '$dup', '$to_a', '$sort!', '$map!', '$key?', '$values', '$zip']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_all$ques$1, $Enumerable_any$ques$5, $Enumerable_chunk$9, $Enumerable_chunk_while$12, $Enumerable_collect$14, $Enumerable_collect_concat$16, $Enumerable_count$19, $Enumerable_cycle$23, $Enumerable_detect$25, $Enumerable_drop$27, $Enumerable_drop_while$28, $Enumerable_each_cons$29, $Enumerable_each_entry$31, $Enumerable_each_slice$33, $Enumerable_each_with_index$35, $Enumerable_each_with_object$37, $Enumerable_entries$39, $Enumerable_find_all$40, $Enumerable_find_index$42, $Enumerable_first$45, $Enumerable_grep$48, $Enumerable_grep_v$50, $Enumerable_group_by$52, $Enumerable_include$ques$54, $Enumerable_inject$56, $Enumerable_lazy$57, $Enumerable_enumerator_size$59, $Enumerable_max$60, $Enumerable_max_by$61, $Enumerable_min$63, $Enumerable_min_by$64, $Enumerable_minmax$66, $Enumerable_minmax_by$68, $Enumerable_none$ques$69, $Enumerable_one$ques$73, $Enumerable_partition$77, $Enumerable_reject$79, $Enumerable_reverse_each$81, $Enumerable_slice_before$83, $Enumerable_slice_after$85, $Enumerable_slice_when$88, $Enumerable_sort$90, $Enumerable_sort_by$92, $Enumerable_sum$97, $Enumerable_take$99, $Enumerable_take_while$100, $Enumerable_uniq$102, $Enumerable_zip$104;

    
    
    function comparableForPattern(value) {
      if (value.length === 0) {
        value = [nil];
      }

      if (value.length > 1) {
        value = [value];
      }

      return value;
    }
  ;
    
    Opal.def(self, '$all?', $Enumerable_all$ques$1 = function(pattern) {try {

      var $iter = $Enumerable_all$ques$1.$$p, block = $iter || nil, $$2, $$3, $$4, self = this;

      if ($iter) $Enumerable_all$ques$1.$$p = null;
      
      
      if ($iter) $Enumerable_all$ques$1.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$2 = function($a){var self = $$2.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$2.$$s = self, $$2.$$arity = -1, $$2))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$3 = function($a){var self = $$3.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$3.$$s = self, $$3.$$arity = -1, $$3))
      } else {
        $send(self, 'each', [], ($$4 = function($a){var self = $$4.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
            return nil
          } else {
            Opal.ret(false)
          };}, $$4.$$s = self, $$4.$$arity = -1, $$4))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_all$ques$1.$$arity = -1);
    
    Opal.def(self, '$any?', $Enumerable_any$ques$5 = function(pattern) {try {

      var $iter = $Enumerable_any$ques$5.$$p, block = $iter || nil, $$6, $$7, $$8, self = this;

      if ($iter) $Enumerable_any$ques$5.$$p = null;
      
      
      if ($iter) $Enumerable_any$ques$5.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$6 = function($a){var self = $$6.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            Opal.ret(true)
          } else {
            return nil
          };}, $$6.$$s = self, $$6.$$arity = -1, $$6))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$7 = function($a){var self = $$7.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(true)
          } else {
            return nil
          };}, $$7.$$s = self, $$7.$$arity = -1, $$7))
      } else {
        $send(self, 'each', [], ($$8 = function($a){var self = $$8.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
            Opal.ret(true)
          } else {
            return nil
          };}, $$8.$$s = self, $$8.$$arity = -1, $$8))
      };
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_any$ques$5.$$arity = -1);
    
    Opal.def(self, '$chunk', $Enumerable_chunk$9 = function $$chunk() {
      var $iter = $Enumerable_chunk$9.$$p, block = $iter || nil, $$10, $$11, self = this;

      if ($iter) $Enumerable_chunk$9.$$p = null;
      
      
      if ($iter) $Enumerable_chunk$9.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'to_enum', ["chunk"], ($$10 = function(){var self = $$10.$$s || this;

        return self.$enumerator_size()}, $$10.$$s = self, $$10.$$arity = 0, $$10))
      };
      return $send($$$('::', 'Enumerator'), 'new', [], ($$11 = function(yielder){var self = $$11.$$s || this;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var previous = nil, accumulate = [];

        function releaseAccumulate() {
          if (accumulate.length > 0) {
            yielder.$yield(previous, accumulate)
          }
        }

        self.$each.$$p = function(value) {
          var key = Opal.yield1(block, value);

          if (key === nil) {
            releaseAccumulate();
            accumulate = [];
            previous = nil;
          } else {
            if (previous === nil || previous === key) {
              accumulate.push(value);
            } else {
              releaseAccumulate();
              accumulate = [value];
            }

            previous = key;
          }
        }

        self.$each();

        releaseAccumulate();
      ;}, $$11.$$s = self, $$11.$$arity = 1, $$11));
    }, $Enumerable_chunk$9.$$arity = 0);
    
    Opal.def(self, '$chunk_while', $Enumerable_chunk_while$12 = function $$chunk_while() {
      var $iter = $Enumerable_chunk_while$12.$$p, block = $iter || nil, $$13, self = this;

      if ($iter) $Enumerable_chunk_while$12.$$p = null;
      
      
      if ($iter) $Enumerable_chunk_while$12.$$p = null;;
      if ((block !== nil)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "no block given")
      };
      return $send(self, 'slice_when', [], ($$13 = function(before, after){var self = $$13.$$s || this;

      
        
        if (before == null) {
          before = nil;
        };
        
        if (after == null) {
          after = nil;
        };
        return Opal.yieldX(block, [before, after])['$!']();}, $$13.$$s = self, $$13.$$arity = 2, $$13));
    }, $Enumerable_chunk_while$12.$$arity = 0);
    
    Opal.def(self, '$collect', $Enumerable_collect$14 = function $$collect() {
      var $iter = $Enumerable_collect$14.$$p, block = $iter || nil, $$15, self = this;

      if ($iter) $Enumerable_collect$14.$$p = null;
      
      
      if ($iter) $Enumerable_collect$14.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect"], ($$15 = function(){var self = $$15.$$s || this;

        return self.$enumerator_size()}, $$15.$$s = self, $$15.$$arity = 0, $$15))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var value = Opal.yieldX(block, arguments);

        result.push(value);
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_collect$14.$$arity = 0);
    
    Opal.def(self, '$collect_concat', $Enumerable_collect_concat$16 = function $$collect_concat() {
      var $iter = $Enumerable_collect_concat$16.$$p, block = $iter || nil, $$17, $$18, self = this;

      if ($iter) $Enumerable_collect_concat$16.$$p = null;
      
      
      if ($iter) $Enumerable_collect_concat$16.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect_concat"], ($$17 = function(){var self = $$17.$$s || this;

        return self.$enumerator_size()}, $$17.$$s = self, $$17.$$arity = 0, $$17))
      };
      return $send(self, 'map', [], ($$18 = function(item){var self = $$18.$$s || this;

      
        
        if (item == null) {
          item = nil;
        };
        return Opal.yield1(block, item);;}, $$18.$$s = self, $$18.$$arity = 1, $$18)).$flatten(1);
    }, $Enumerable_collect_concat$16.$$arity = 0);
    
    Opal.def(self, '$count', $Enumerable_count$19 = function $$count(object) {
      var $iter = $Enumerable_count$19.$$p, block = $iter || nil, $$20, $$21, $$22, self = this, result = nil;

      if ($iter) $Enumerable_count$19.$$p = null;
      
      
      if ($iter) $Enumerable_count$19.$$p = null;;
      ;
      result = 0;
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      if ($truthy(object != null)) {
        block = $send(self, 'proc', [], ($$20 = function($a){var self = $$20.$$s || this, $post_args, args;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return $$($nesting, 'Opal').$destructure(args)['$=='](object);}, $$20.$$s = self, $$20.$$arity = -1, $$20))
      } else if ($truthy(block['$nil?']())) {
        block = $send(self, 'proc', [], ($$21 = function(){var self = $$21.$$s || this;

        return true}, $$21.$$s = self, $$21.$$arity = 0, $$21))};
      $send(self, 'each', [], ($$22 = function($a){var self = $$22.$$s || this, $post_args, args;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        if ($truthy(Opal.yieldX(block, args))) {
          return result++;
        } else {
          return nil
        };}, $$22.$$s = self, $$22.$$arity = -1, $$22));
      return result;
    }, $Enumerable_count$19.$$arity = -1);
    
    Opal.def(self, '$cycle', $Enumerable_cycle$23 = function $$cycle(n) {
      var $iter = $Enumerable_cycle$23.$$p, block = $iter || nil, $$24, self = this;

      if ($iter) $Enumerable_cycle$23.$$p = null;
      
      
      if ($iter) $Enumerable_cycle$23.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["cycle", n], ($$24 = function(){var self = $$24.$$s || this;

        if ($truthy(n['$nil?']())) {
            if ($truthy(self['$respond_to?']("size"))) {
              return $$$($$($nesting, 'Float'), 'INFINITY')
            } else {
              return nil
            }
          } else {
            
            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, $$24.$$s = self, $$24.$$arity = 0, $$24))
      };
      if ($truthy(n['$nil?']())) {
      } else {
        
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        if ($truthy(n <= 0)) {
          return nil};
      };
      
      var result,
          all = [], i, length, value;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }

      if (n === nil) {
        while (true) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }
        }
      }
      else {
        while (n > 1) {
          for (i = 0, length = all.length; i < length; i++) {
            value = Opal.yield1(block, all[i]);
          }

          n--;
        }
      }
    ;
    }, $Enumerable_cycle$23.$$arity = -1);
    
    Opal.def(self, '$detect', $Enumerable_detect$25 = function $$detect(ifnone) {try {

      var $iter = $Enumerable_detect$25.$$p, block = $iter || nil, $$26, self = this;

      if ($iter) $Enumerable_detect$25.$$p = null;
      
      
      if ($iter) $Enumerable_detect$25.$$p = null;;
      ;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("detect", ifnone)
      };
      $send(self, 'each', [], ($$26 = function($a){var self = $$26.$$s || this, $post_args, args, value = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
          Opal.ret(value)
        } else {
          return nil
        };}, $$26.$$s = self, $$26.$$arity = -1, $$26));
      
      if (ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          return ifnone();
        } else {
          return ifnone;
        }
      }
    ;
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_detect$25.$$arity = -1);
    
    Opal.def(self, '$drop', $Enumerable_drop$27 = function $$drop(number) {
      var self = this;

      
      number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), "to_int");
      if ($truthy(number < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each.$$p = function() {
        if (number <= current) {
          result.push($$($nesting, 'Opal').$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    ;
    }, $Enumerable_drop$27.$$arity = 1);
    
    Opal.def(self, '$drop_while', $Enumerable_drop_while$28 = function $$drop_while() {
      var $iter = $Enumerable_drop_while$28.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_drop_while$28.$$p = null;
      
      
      if ($iter) $Enumerable_drop_while$28.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        if (dropping) {
          var value = Opal.yield1(block, param);

          if ($falsy(value)) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_drop_while$28.$$arity = 0);
    
    Opal.def(self, '$each_cons', $Enumerable_each_cons$29 = function $$each_cons(n) {
      var $iter = $Enumerable_each_cons$29.$$p, block = $iter || nil, $$30, self = this;

      if ($iter) $Enumerable_each_cons$29.$$p = null;
      
      
      if ($iter) $Enumerable_each_cons$29.$$p = null;;
      if ($truthy(arguments.length != 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 1)")};
      n = $$($nesting, 'Opal').$try_convert(n, $$($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid size")};
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_cons", n], ($$30 = function(){var self = $$30.$$s || this, $a, enum_size = nil;

        
          enum_size = self.$enumerator_size();
          if ($truthy(enum_size['$nil?']())) {
            return nil
          } else if ($truthy(($truthy($a = enum_size['$=='](0)) ? $a : $rb_lt(enum_size, n)))) {
            return 0
          } else {
            return $rb_plus($rb_minus(enum_size, n), 1)
          };}, $$30.$$s = self, $$30.$$arity = 0, $$30))
      };
      
      var buffer = [], result = nil;

      self.$each.$$p = function() {
        var element = $$($nesting, 'Opal').$destructure(arguments);
        buffer.push(element);
        if (buffer.length > n) {
          buffer.shift();
        }
        if (buffer.length == n) {
          Opal.yield1(block, buffer.slice(0, n));
        }
      }

      self.$each();

      return result;
    ;
    }, $Enumerable_each_cons$29.$$arity = 1);
    
    Opal.def(self, '$each_entry', $Enumerable_each_entry$31 = function $$each_entry($a) {
      var $iter = $Enumerable_each_entry$31.$$p, block = $iter || nil, $post_args, data, $$32, self = this;

      if ($iter) $Enumerable_each_entry$31.$$p = null;
      
      
      if ($iter) $Enumerable_each_entry$31.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      data = $post_args;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'to_enum', ["each_entry"].concat(Opal.to_a(data)), ($$32 = function(){var self = $$32.$$s || this;

        return self.$enumerator_size()}, $$32.$$s = self, $$32.$$arity = 0, $$32))
      };
      
      self.$each.$$p = function() {
        var item = $$($nesting, 'Opal').$destructure(arguments);

        Opal.yield1(block, item);
      }

      self.$each.apply(self, data);

      return self;
    ;
    }, $Enumerable_each_entry$31.$$arity = -1);
    
    Opal.def(self, '$each_slice', $Enumerable_each_slice$33 = function $$each_slice(n) {
      var $iter = $Enumerable_each_slice$33.$$p, block = $iter || nil, $$34, self = this;

      if ($iter) $Enumerable_each_slice$33.$$p = null;
      
      
      if ($iter) $Enumerable_each_slice$33.$$p = null;;
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
      if ($truthy(n <= 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "invalid slice size")};
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_slice", n], ($$34 = function(){var self = $$34.$$s || this;

        if ($truthy(self['$respond_to?']("size"))) {
            return $rb_divide(self.$size(), n).$ceil()
          } else {
            return nil
          }}, $$34.$$s = self, $$34.$$arity = 0, $$34))
      };
      
      var result,
          slice = []

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          Opal.yield1(block, slice);
          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        Opal.yield1(block, slice);
      }
    ;
      return nil;
    }, $Enumerable_each_slice$33.$$arity = 1);
    
    Opal.def(self, '$each_with_index', $Enumerable_each_with_index$35 = function $$each_with_index($a) {
      var $iter = $Enumerable_each_with_index$35.$$p, block = $iter || nil, $post_args, args, $$36, self = this;

      if ($iter) $Enumerable_each_with_index$35.$$p = null;
      
      
      if ($iter) $Enumerable_each_with_index$35.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_with_index"].concat(Opal.to_a(args)), ($$36 = function(){var self = $$36.$$s || this;

        return self.$enumerator_size()}, $$36.$$s = self, $$36.$$arity = 0, $$36))
      };
      
      var result,
          index = 0;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        block(param, index);

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    ;
      return self;
    }, $Enumerable_each_with_index$35.$$arity = -1);
    
    Opal.def(self, '$each_with_object', $Enumerable_each_with_object$37 = function $$each_with_object(object) {
      var $iter = $Enumerable_each_with_object$37.$$p, block = $iter || nil, $$38, self = this;

      if ($iter) $Enumerable_each_with_object$37.$$p = null;
      
      
      if ($iter) $Enumerable_each_with_object$37.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_with_object", object], ($$38 = function(){var self = $$38.$$s || this;

        return self.$enumerator_size()}, $$38.$$s = self, $$38.$$arity = 0, $$38))
      };
      
      var result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments);

        block(param, object);
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return object;
    }, $Enumerable_each_with_object$37.$$arity = 1);
    
    Opal.def(self, '$entries', $Enumerable_entries$39 = function $$entries($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = [];

      self.$each.$$p = function() {
        result.push($$($nesting, 'Opal').$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    ;
    }, $Enumerable_entries$39.$$arity = -1);
    Opal.alias(self, "find", "detect");
    
    Opal.def(self, '$find_all', $Enumerable_find_all$40 = function $$find_all() {
      var $iter = $Enumerable_find_all$40.$$p, block = $iter || nil, $$41, self = this;

      if ($iter) $Enumerable_find_all$40.$$p = null;
      
      
      if ($iter) $Enumerable_find_all$40.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["find_all"], ($$41 = function(){var self = $$41.$$s || this;

        return self.$enumerator_size()}, $$41.$$s = self, $$41.$$arity = 0, $$41))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_find_all$40.$$arity = 0);
    
    Opal.def(self, '$find_index', $Enumerable_find_index$42 = function $$find_index(object) {try {

      var $iter = $Enumerable_find_index$42.$$p, block = $iter || nil, $$43, $$44, self = this, index = nil;

      if ($iter) $Enumerable_find_index$42.$$p = null;
      
      
      if ($iter) $Enumerable_find_index$42.$$p = null;;
      ;
      if ($truthy(object === undefined && block === nil)) {
        return self.$enum_for("find_index")};
      
      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }
    ;
      index = 0;
      if ($truthy(object != null)) {
        $send(self, 'each', [], ($$43 = function($a){var self = $$43.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($$($nesting, 'Opal').$destructure(value)['$=='](object)) {
            Opal.ret(index)};
          return index += 1;;}, $$43.$$s = self, $$43.$$arity = -1, $$43))
      } else {
        $send(self, 'each', [], ($$44 = function($a){var self = $$44.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(index)};
          return index += 1;;}, $$44.$$s = self, $$44.$$arity = -1, $$44))
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_find_index$42.$$arity = -1);
    
    Opal.def(self, '$first', $Enumerable_first$45 = function $$first(number) {try {

      var $$46, $$47, self = this, result = nil, current = nil;

      
      ;
      if ($truthy(number === undefined)) {
        return $send(self, 'each', [], ($$46 = function(value){var self = $$46.$$s || this;

        
          
          if (value == null) {
            value = nil;
          };
          Opal.ret(value);}, $$46.$$s = self, $$46.$$arity = 1, $$46))
      } else {
        
        result = [];
        number = $$($nesting, 'Opal').$coerce_to(number, $$($nesting, 'Integer'), "to_int");
        if ($truthy(number < 0)) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to take negative size")};
        if ($truthy(number == 0)) {
          return []};
        current = 0;
        $send(self, 'each', [], ($$47 = function($a){var self = $$47.$$s || this, $post_args, args;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          result.push($$($nesting, 'Opal').$destructure(args));
          if ($truthy(number <= ++current)) {
            Opal.ret(result)
          } else {
            return nil
          };}, $$47.$$s = self, $$47.$$arity = -1, $$47));
        return result;
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_first$45.$$arity = -1);
    Opal.alias(self, "flat_map", "collect_concat");
    
    Opal.def(self, '$grep', $Enumerable_grep$48 = function $$grep(pattern) {
      var $iter = $Enumerable_grep$48.$$p, block = $iter || nil, $$49, self = this, result = nil;

      if ($iter) $Enumerable_grep$48.$$p = null;
      
      
      if ($iter) $Enumerable_grep$48.$$p = null;;
      result = [];
      $send(self, 'each', [], ($$49 = function($a){var self = $$49.$$s || this, $post_args, value, cmp = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        value = $post_args;;
        cmp = comparableForPattern(value);
        if ($truthy($send(pattern, '__send__', ["==="].concat(Opal.to_a(cmp))))) {
        } else {
          return nil;
        };
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]};
          value = Opal.yieldX(block, Opal.to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)};
        return result.$push(value);}, $$49.$$s = self, $$49.$$arity = -1, $$49));
      return result;
    }, $Enumerable_grep$48.$$arity = 1);
    
    Opal.def(self, '$grep_v', $Enumerable_grep_v$50 = function $$grep_v(pattern) {
      var $iter = $Enumerable_grep_v$50.$$p, block = $iter || nil, $$51, self = this, result = nil;

      if ($iter) $Enumerable_grep_v$50.$$p = null;
      
      
      if ($iter) $Enumerable_grep_v$50.$$p = null;;
      result = [];
      $send(self, 'each', [], ($$51 = function($a){var self = $$51.$$s || this, $post_args, value, cmp = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        value = $post_args;;
        cmp = comparableForPattern(value);
        if ($truthy($send(pattern, '__send__', ["==="].concat(Opal.to_a(cmp))))) {
          return nil;};
        if ((block !== nil)) {
          
          if ($truthy($rb_gt(value.$length(), 1))) {
            value = [value]};
          value = Opal.yieldX(block, Opal.to_a(value));
        } else if ($truthy($rb_le(value.$length(), 1))) {
          value = value['$[]'](0)};
        return result.$push(value);}, $$51.$$s = self, $$51.$$arity = -1, $$51));
      return result;
    }, $Enumerable_grep_v$50.$$arity = 1);
    
    Opal.def(self, '$group_by', $Enumerable_group_by$52 = function $$group_by() {
      var $iter = $Enumerable_group_by$52.$$p, block = $iter || nil, $$53, $a, self = this, hash = nil, $writer = nil;

      if ($iter) $Enumerable_group_by$52.$$p = null;
      
      
      if ($iter) $Enumerable_group_by$52.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["group_by"], ($$53 = function(){var self = $$53.$$s || this;

        return self.$enumerator_size()}, $$53.$$s = self, $$53.$$arity = 0, $$53))
      };
      hash = $hash2([], {});
      
      var result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        ($truthy($a = hash['$[]'](value)) ? $a : (($writer = [value, []]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
      return hash;
    }, $Enumerable_group_by$52.$$arity = 0);
    
    Opal.def(self, '$include?', $Enumerable_include$ques$54 = function(obj) {try {

      var $$55, self = this;

      
      $send(self, 'each', [], ($$55 = function($a){var self = $$55.$$s || this, $post_args, args;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        if ($$($nesting, 'Opal').$destructure(args)['$=='](obj)) {
          Opal.ret(true)
        } else {
          return nil
        };}, $$55.$$s = self, $$55.$$arity = -1, $$55));
      return false;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_include$ques$54.$$arity = 1);
    
    Opal.def(self, '$inject', $Enumerable_inject$56 = function $$inject(object, sym) {
      var $iter = $Enumerable_inject$56.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_inject$56.$$p = null;
      
      
      if ($iter) $Enumerable_inject$56.$$p = null;;
      ;
      ;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each.$$p = function() {
          var value = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = Opal.yieldX(block, [result, value]);

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$$($nesting, 'Symbol')['$==='](object)) {
            self.$raise($$($nesting, 'TypeError'), "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each.$$p = function() {
          var value = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    }, $Enumerable_inject$56.$$arity = -1);
    
    Opal.def(self, '$lazy', $Enumerable_lazy$57 = function $$lazy() {
      var $$58, self = this;

      return $send($$$($$($nesting, 'Enumerator'), 'Lazy'), 'new', [self, self.$enumerator_size()], ($$58 = function(enum$, $a){var self = $$58.$$s || this, $post_args, args;

      
        
        if (enum$ == null) {
          enum$ = nil;
        };
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        return $send(enum$, 'yield', Opal.to_a(args));}, $$58.$$s = self, $$58.$$arity = -2, $$58))
    }, $Enumerable_lazy$57.$$arity = 0);
    
    Opal.def(self, '$enumerator_size', $Enumerable_enumerator_size$59 = function $$enumerator_size() {
      var self = this;

      if ($truthy(self['$respond_to?']("size"))) {
        return self.$size()
      } else {
        return nil
      }
    }, $Enumerable_enumerator_size$59.$$arity = 0);
    Opal.alias(self, "map", "collect");
    
    Opal.def(self, '$max', $Enumerable_max$60 = function $$max(n) {
      var $iter = $Enumerable_max$60.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_max$60.$$p = null;
      
      
      if ($iter) $Enumerable_max$60.$$p = null;;
      ;
      
      if (n === undefined || n === nil) {
        var result, value;

        self.$each.$$p = function() {
          var item = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = item;
            return;
          }

          if (block !== nil) {
            value = Opal.yieldX(block, [item, result]);
          } else {
            value = (item)['$<=>'](result);
          }

          if (value === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value > 0) {
            result = item;
          }
        }

        self.$each();

        if (result === undefined) {
          return nil;
        } else {
          return result;
        }
      }
    ;
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
      return $send(self, 'sort', [], block.$to_proc()).$reverse().$first(n);
    }, $Enumerable_max$60.$$arity = -1);
    
    Opal.def(self, '$max_by', $Enumerable_max_by$61 = function $$max_by() {
      var $iter = $Enumerable_max_by$61.$$p, block = $iter || nil, $$62, self = this;

      if ($iter) $Enumerable_max_by$61.$$p = null;
      
      
      if ($iter) $Enumerable_max_by$61.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["max_by"], ($$62 = function(){var self = $$62.$$s || this;

        return self.$enumerator_size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, $Enumerable_max_by$61.$$arity = 0);
    Opal.alias(self, "member?", "include?");
    
    Opal.def(self, '$min', $Enumerable_min$63 = function $$min() {
      var $iter = $Enumerable_min$63.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_min$63.$$p = null;
      
      
      if ($iter) $Enumerable_min$63.$$p = null;;
      
      var result;

      if (block !== nil) {
        self.$each.$$p = function() {
          var param = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each.$$p = function() {
          var param = $$($nesting, 'Opal').$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($$($nesting, 'Opal').$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, $Enumerable_min$63.$$arity = 0);
    
    Opal.def(self, '$min_by', $Enumerable_min_by$64 = function $$min_by() {
      var $iter = $Enumerable_min_by$64.$$p, block = $iter || nil, $$65, self = this;

      if ($iter) $Enumerable_min_by$64.$$p = null;
      
      
      if ($iter) $Enumerable_min_by$64.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["min_by"], ($$65 = function(){var self = $$65.$$s || this;

        return self.$enumerator_size()}, $$65.$$s = self, $$65.$$arity = 0, $$65))
      };
      
      var result,
          by;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    ;
    }, $Enumerable_min_by$64.$$arity = 0);
    
    Opal.def(self, '$minmax', $Enumerable_minmax$66 = function $$minmax() {
      var $iter = $Enumerable_minmax$66.$$p, block = $iter || nil, $a, $$67, self = this;

      if ($iter) $Enumerable_minmax$66.$$p = null;
      
      
      if ($iter) $Enumerable_minmax$66.$$p = null;;
      block = ($truthy($a = block) ? $a : $send(self, 'proc', [], ($$67 = function(a, b){var self = $$67.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return a['$<=>'](b);}, $$67.$$s = self, $$67.$$arity = 2, $$67)));
      
      var min = nil, max = nil, first_time = true;

      self.$each.$$p = function() {
        var element = $$($nesting, 'Opal').$destructure(arguments);
        if (first_time) {
          min = max = element;
          first_time = false;
        } else {
          var min_cmp = block.$call(min, element);

          if (min_cmp === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed")
          } else if (min_cmp > 0) {
            min = element;
          }

          var max_cmp = block.$call(max, element);

          if (max_cmp === nil) {
            self.$raise($$($nesting, 'ArgumentError'), "comparison failed")
          } else if (max_cmp < 0) {
            max = element;
          }
        }
      }

      self.$each();

      return [min, max];
    ;
    }, $Enumerable_minmax$66.$$arity = 0);
    
    Opal.def(self, '$minmax_by', $Enumerable_minmax_by$68 = function $$minmax_by() {
      var $iter = $Enumerable_minmax_by$68.$$p, block = $iter || nil, self = this;

      if ($iter) $Enumerable_minmax_by$68.$$p = null;
      
      
      if ($iter) $Enumerable_minmax_by$68.$$p = null;;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, $Enumerable_minmax_by$68.$$arity = 0);
    
    Opal.def(self, '$none?', $Enumerable_none$ques$69 = function(pattern) {try {

      var $iter = $Enumerable_none$ques$69.$$p, block = $iter || nil, $$70, $$71, $$72, self = this;

      if ($iter) $Enumerable_none$ques$69.$$p = null;
      
      
      if ($iter) $Enumerable_none$ques$69.$$p = null;;
      ;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$70 = function($a){var self = $$70.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$70.$$s = self, $$70.$$arity = -1, $$70))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$71 = function($a){var self = $$71.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$71.$$s = self, $$71.$$arity = -1, $$71))
      } else {
        $send(self, 'each', [], ($$72 = function($a){var self = $$72.$$s || this, $post_args, value, item = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          item = $$($nesting, 'Opal').$destructure(value);
          if ($truthy(item)) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$72.$$s = self, $$72.$$arity = -1, $$72))
      };
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_none$ques$69.$$arity = -1);
    
    Opal.def(self, '$one?', $Enumerable_one$ques$73 = function(pattern) {try {

      var $iter = $Enumerable_one$ques$73.$$p, block = $iter || nil, $$74, $$75, $$76, self = this, count = nil;

      if ($iter) $Enumerable_one$ques$73.$$p = null;
      
      
      if ($iter) $Enumerable_one$ques$73.$$p = null;;
      ;
      count = 0;
      if ($truthy(pattern !== undefined)) {
        $send(self, 'each', [], ($$74 = function($a){var self = $$74.$$s || this, $post_args, value, comparable = nil;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          comparable = comparableForPattern(value);
          if ($truthy($send(pattern, 'public_send', ["==="].concat(Opal.to_a(comparable))))) {
            
            count = $rb_plus(count, 1);
            if ($truthy($rb_gt(count, 1))) {
              Opal.ret(false)
            } else {
              return nil
            };
          } else {
            return nil
          };}, $$74.$$s = self, $$74.$$arity = -1, $$74))
      } else if ((block !== nil)) {
        $send(self, 'each', [], ($$75 = function($a){var self = $$75.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy(Opal.yieldX(block, Opal.to_a(value)))) {
          } else {
            return nil;
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$75.$$s = self, $$75.$$arity = -1, $$75))
      } else {
        $send(self, 'each', [], ($$76 = function($a){var self = $$76.$$s || this, $post_args, value;

        
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          value = $post_args;;
          if ($truthy($$($nesting, 'Opal').$destructure(value))) {
          } else {
            return nil;
          };
          count = $rb_plus(count, 1);
          if ($truthy($rb_gt(count, 1))) {
            Opal.ret(false)
          } else {
            return nil
          };}, $$76.$$s = self, $$76.$$arity = -1, $$76))
      };
      return count['$=='](1);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_one$ques$73.$$arity = -1);
    
    Opal.def(self, '$partition', $Enumerable_partition$77 = function $$partition() {
      var $iter = $Enumerable_partition$77.$$p, block = $iter || nil, $$78, self = this;

      if ($iter) $Enumerable_partition$77.$$p = null;
      
      
      if ($iter) $Enumerable_partition$77.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["partition"], ($$78 = function(){var self = $$78.$$s || this;

        return self.$enumerator_size()}, $$78.$$s = self, $$78.$$arity = 0, $$78))
      };
      
      var truthy = [], falsy = [], result;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($truthy(value)) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    ;
    }, $Enumerable_partition$77.$$arity = 0);
    Opal.alias(self, "reduce", "inject");
    
    Opal.def(self, '$reject', $Enumerable_reject$79 = function $$reject() {
      var $iter = $Enumerable_reject$79.$$p, block = $iter || nil, $$80, self = this;

      if ($iter) $Enumerable_reject$79.$$p = null;
      
      
      if ($iter) $Enumerable_reject$79.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject"], ($$80 = function(){var self = $$80.$$s || this;

        return self.$enumerator_size()}, $$80.$$s = self, $$80.$$arity = 0, $$80))
      };
      
      var result = [];

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = Opal.yield1(block, param);

        if ($falsy(value)) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    ;
    }, $Enumerable_reject$79.$$arity = 0);
    
    Opal.def(self, '$reverse_each', $Enumerable_reverse_each$81 = function $$reverse_each() {
      var $iter = $Enumerable_reverse_each$81.$$p, block = $iter || nil, $$82, self = this;

      if ($iter) $Enumerable_reverse_each$81.$$p = null;
      
      
      if ($iter) $Enumerable_reverse_each$81.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reverse_each"], ($$82 = function(){var self = $$82.$$s || this;

        return self.$enumerator_size()}, $$82.$$s = self, $$82.$$arity = 0, $$82))
      };
      
      var result = [];

      self.$each.$$p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        Opal.yieldX(block, result[i]);
      }

      return result;
    ;
    }, $Enumerable_reverse_each$81.$$arity = 0);
    Opal.alias(self, "select", "find_all");
    
    Opal.def(self, '$slice_before', $Enumerable_slice_before$83 = function $$slice_before(pattern) {
      var $iter = $Enumerable_slice_before$83.$$p, block = $iter || nil, $$84, self = this;

      if ($iter) $Enumerable_slice_before$83.$$p = null;
      
      
      if ($iter) $Enumerable_slice_before$83.$$p = null;;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      return $send($$($nesting, 'Enumerator'), 'new', [], ($$84 = function(e){var self = $$84.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each.$$p = function() {
              var param = $$($nesting, 'Opal').$destructure(arguments),
                  value = Opal.yield1(block, param);

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each.$$p = function() {
              var param = $$($nesting, 'Opal').$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ($truthy(value) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each.$$p = function() {
            var param = $$($nesting, 'Opal').$destructure(arguments),
                value = pattern['$==='](param);

            if ($truthy(value) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, $$84.$$s = self, $$84.$$arity = 1, $$84));
    }, $Enumerable_slice_before$83.$$arity = -1);
    
    Opal.def(self, '$slice_after', $Enumerable_slice_after$85 = function $$slice_after(pattern) {
      var $iter = $Enumerable_slice_after$85.$$p, block = $iter || nil, $$86, $$87, self = this;

      if ($iter) $Enumerable_slice_after$85.$$p = null;
      
      
      if ($iter) $Enumerable_slice_after$85.$$p = null;;
      ;
      if ($truthy(pattern === undefined && block === nil)) {
        self.$raise($$($nesting, 'ArgumentError'), "both pattern and block are given")};
      if ($truthy(pattern !== undefined && block !== nil || arguments.length > 1)) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " expected 1)")};
      if ($truthy(pattern !== undefined)) {
        block = $send(self, 'proc', [], ($$86 = function(e){var self = $$86.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return pattern['$==='](e);}, $$86.$$s = self, $$86.$$arity = 1, $$86))};
      return $send($$($nesting, 'Enumerator'), 'new', [], ($$87 = function(yielder){var self = $$87.$$s || this;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var accumulate;

        self.$each.$$p = function() {
          var element = $$($nesting, 'Opal').$destructure(arguments),
              end_chunk = Opal.yield1(block, element);

          if (accumulate == null) {
            accumulate = [];
          }

          if ($truthy(end_chunk)) {
            accumulate.push(element);
            yielder.$yield(accumulate);
            accumulate = null;
          } else {
            accumulate.push(element)
          }
        }

        self.$each();

        if (accumulate != null) {
          yielder.$yield(accumulate);
        }
      ;}, $$87.$$s = self, $$87.$$arity = 1, $$87));
    }, $Enumerable_slice_after$85.$$arity = -1);
    
    Opal.def(self, '$slice_when', $Enumerable_slice_when$88 = function $$slice_when() {
      var $iter = $Enumerable_slice_when$88.$$p, block = $iter || nil, $$89, self = this;

      if ($iter) $Enumerable_slice_when$88.$$p = null;
      
      
      if ($iter) $Enumerable_slice_when$88.$$p = null;;
      if ((block !== nil)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1)")
      };
      return $send($$($nesting, 'Enumerator'), 'new', [], ($$89 = function(yielder){var self = $$89.$$s || this;

      
        
        if (yielder == null) {
          yielder = nil;
        };
        
        var slice = nil, last_after = nil;

        self.$each_cons.$$p = function() {
          var params = $$($nesting, 'Opal').$destructure(arguments),
              before = params[0],
              after = params[1],
              match = Opal.yieldX(block, [before, after]);

          last_after = after;

          if (slice === nil) {
            slice = [];
          }

          if ($truthy(match)) {
            slice.push(before);
            yielder.$yield(slice);
            slice = [];
          } else {
            slice.push(before);
          }
        }

        self.$each_cons(2);

        if (slice !== nil) {
          slice.push(last_after);
          yielder.$yield(slice);
        }
      ;}, $$89.$$s = self, $$89.$$arity = 1, $$89));
    }, $Enumerable_slice_when$88.$$arity = 0);
    
    Opal.def(self, '$sort', $Enumerable_sort$90 = function $$sort() {
      var $iter = $Enumerable_sort$90.$$p, block = $iter || nil, $$91, self = this, ary = nil;

      if ($iter) $Enumerable_sort$90.$$p = null;
      
      
      if ($iter) $Enumerable_sort$90.$$p = null;;
      ary = self.$to_a();
      if ((block !== nil)) {
      } else {
        block = $lambda(($$91 = function(a, b){var self = $$91.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          
          if (b == null) {
            b = nil;
          };
          return a['$<=>'](b);}, $$91.$$s = self, $$91.$$arity = 2, $$91))
      };
      return $send(ary, 'sort', [], block.$to_proc());
    }, $Enumerable_sort$90.$$arity = 0);
    
    Opal.def(self, '$sort_by', $Enumerable_sort_by$92 = function $$sort_by() {
      var $iter = $Enumerable_sort_by$92.$$p, block = $iter || nil, $$93, $$94, $$95, $$96, self = this, dup = nil;

      if ($iter) $Enumerable_sort_by$92.$$p = null;
      
      
      if ($iter) $Enumerable_sort_by$92.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["sort_by"], ($$93 = function(){var self = $$93.$$s || this;

        return self.$enumerator_size()}, $$93.$$s = self, $$93.$$arity = 0, $$93))
      };
      dup = $send(self, 'map', [], ($$94 = function(){var self = $$94.$$s || this, arg = nil;

      
        arg = $$($nesting, 'Opal').$destructure(arguments);
        return [Opal.yield1(block, arg), arg];}, $$94.$$s = self, $$94.$$arity = 0, $$94));
      $send(dup, 'sort!', [], ($$95 = function(a, b){var self = $$95.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return (a[0])['$<=>'](b[0]);}, $$95.$$s = self, $$95.$$arity = 2, $$95));
      return $send(dup, 'map!', [], ($$96 = function(i){var self = $$96.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return i[1];;}, $$96.$$s = self, $$96.$$arity = 1, $$96));
    }, $Enumerable_sort_by$92.$$arity = 0);
    
    Opal.def(self, '$sum', $Enumerable_sum$97 = function $$sum(initial) {
      var $$98, $iter = $Enumerable_sum$97.$$p, $yield = $iter || nil, self = this, result = nil;

      if ($iter) $Enumerable_sum$97.$$p = null;
      
      
      if (initial == null) {
        initial = 0;
      };
      result = initial;
      $send(self, 'each', [], ($$98 = function($a){var self = $$98.$$s || this, $post_args, args, item = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        item = (function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, Opal.to_a(args));
        } else {
          return $$($nesting, 'Opal').$destructure(args)
        }; return nil; })();
        return (result = $rb_plus(result, item));}, $$98.$$s = self, $$98.$$arity = -1, $$98));
      return result;
    }, $Enumerable_sum$97.$$arity = -1);
    
    Opal.def(self, '$take', $Enumerable_take$99 = function $$take(num) {
      var self = this;

      return self.$first(num)
    }, $Enumerable_take$99.$$arity = 1);
    
    Opal.def(self, '$take_while', $Enumerable_take_while$100 = function $$take_while() {try {

      var $iter = $Enumerable_take_while$100.$$p, block = $iter || nil, $$101, self = this, result = nil;

      if ($iter) $Enumerable_take_while$100.$$p = null;
      
      
      if ($iter) $Enumerable_take_while$100.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("take_while")
      };
      result = [];
      return $send(self, 'each', [], ($$101 = function($a){var self = $$101.$$s || this, $post_args, args, value = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        if ($truthy(Opal.yield1(block, value))) {
        } else {
          Opal.ret(result)
        };
        return result.push(value);;}, $$101.$$s = self, $$101.$$arity = -1, $$101));
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, $Enumerable_take_while$100.$$arity = 0);
    
    Opal.def(self, '$uniq', $Enumerable_uniq$102 = function $$uniq() {
      var $iter = $Enumerable_uniq$102.$$p, block = $iter || nil, $$103, self = this, hash = nil;

      if ($iter) $Enumerable_uniq$102.$$p = null;
      
      
      if ($iter) $Enumerable_uniq$102.$$p = null;;
      hash = $hash2([], {});
      $send(self, 'each', [], ($$103 = function($a){var self = $$103.$$s || this, $post_args, args, value = nil, produced = nil, $writer = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        value = $$($nesting, 'Opal').$destructure(args);
        produced = (function() {if ((block !== nil)) {
          return Opal.yield1(block, value);
        } else {
          return value
        }; return nil; })();
        if ($truthy(hash['$key?'](produced))) {
          return nil
        } else {
          
          $writer = [produced, value];
          $send(hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        };}, $$103.$$s = self, $$103.$$arity = -1, $$103));
      return hash.$values();
    }, $Enumerable_uniq$102.$$arity = 0);
    Opal.alias(self, "to_a", "entries");
    
    Opal.def(self, '$zip', $Enumerable_zip$104 = function $$zip($a) {
      var $iter = $Enumerable_zip$104.$$p, block = $iter || nil, $post_args, others, self = this;

      if ($iter) $Enumerable_zip$104.$$p = null;
      
      
      if ($iter) $Enumerable_zip$104.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      return $send(self.$to_a(), 'zip', Opal.to_a(others));
    }, $Enumerable_zip$104.$$arity = -1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/enumerator"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $falsy = Opal.falsy;

  Opal.add_stubs(['$require', '$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$size', '$destructure', '$inspect', '$any?', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Enumerator');

    var $nesting = [self].concat($parent_nesting), $Enumerator_for$1, $Enumerator_initialize$2, $Enumerator_each$3, $Enumerator_size$4, $Enumerator_with_index$5, $Enumerator_inspect$7;

    self.$$prototype.size = self.$$prototype.args = self.$$prototype.object = self.$$prototype.method = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    self.$$prototype.$$is_enumerator = true;
    Opal.defs(self, '$for', $Enumerator_for$1 = function(object, $a, $b) {
      var $iter = $Enumerator_for$1.$$p, block = $iter || nil, $post_args, method, args, self = this;

      if ($iter) $Enumerator_for$1.$$p = null;
      
      
      if ($iter) $Enumerator_for$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      if ($post_args.length > 0) {
        method = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (method == null) {
        method = "each";
      };
      
      args = $post_args;;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    }, $Enumerator_for$1.$$arity = -2);
    
    Opal.def(self, '$initialize', $Enumerator_initialize$2 = function $$initialize($a) {
      var $iter = $Enumerator_initialize$2.$$p, block = $iter || nil, $post_args, self = this;

      if ($iter) $Enumerator_initialize$2.$$p = null;
      
      
      if ($iter) $Enumerator_initialize$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      if ($truthy(block)) {
        
        self.object = $send($$($nesting, 'Generator'), 'new', [], block.$to_proc());
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ($truthy(self.size)) {
          return (self.size = $$($nesting, 'Opal').$coerce_to(self.size, $$($nesting, 'Integer'), "to_int"))
        } else {
          return nil
        };
      } else {
        
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return (self.size = nil);
      };
    }, $Enumerator_initialize$2.$$arity = -1);
    
    Opal.def(self, '$each', $Enumerator_each$3 = function $$each($a) {
      var $iter = $Enumerator_each$3.$$p, block = $iter || nil, $post_args, args, $b, self = this;

      if ($iter) $Enumerator_each$3.$$p = null;
      
      
      if ($iter) $Enumerator_each$3.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(($truthy($b = block['$nil?']()) ? args['$empty?']() : $b))) {
        return self};
      args = $rb_plus(self.args, args);
      if ($truthy(block['$nil?']())) {
        return $send(self.$class(), 'new', [self.object, self.method].concat(Opal.to_a(args)))};
      return $send(self.object, '__send__', [self.method].concat(Opal.to_a(args)), block.$to_proc());
    }, $Enumerator_each$3.$$arity = -1);
    
    Opal.def(self, '$size', $Enumerator_size$4 = function $$size() {
      var self = this;

      if ($truthy($$($nesting, 'Proc')['$==='](self.size))) {
        return $send(self.size, 'call', Opal.to_a(self.args))
      } else {
        return self.size
      }
    }, $Enumerator_size$4.$$arity = 0);
    
    Opal.def(self, '$with_index', $Enumerator_with_index$5 = function $$with_index(offset) {
      var $iter = $Enumerator_with_index$5.$$p, block = $iter || nil, $$6, self = this;

      if ($iter) $Enumerator_with_index$5.$$p = null;
      
      
      if ($iter) $Enumerator_with_index$5.$$p = null;;
      
      if (offset == null) {
        offset = 0;
      };
      offset = (function() {if ($truthy(offset)) {
        return $$($nesting, 'Opal').$coerce_to(offset, $$($nesting, 'Integer'), "to_int")
      } else {
        return 0
      }; return nil; })();
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["with_index", offset], ($$6 = function(){var self = $$6.$$s || this;

        return self.$size()}, $$6.$$s = self, $$6.$$arity = 0, $$6))
      };
      
      var result, index = offset;

      self.$each.$$p = function() {
        var param = $$($nesting, 'Opal').$destructure(arguments),
            value = block(param, index);

        index++;

        return value;
      }

      return self.$each();
    ;
    }, $Enumerator_with_index$5.$$arity = -1);
    Opal.alias(self, "with_object", "each_with_object");
    
    Opal.def(self, '$inspect', $Enumerator_inspect$7 = function $$inspect() {
      var self = this, result = nil;

      
      result = "" + "#<" + (self.$class()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ($truthy(self.args['$any?']())) {
        result = $rb_plus(result, "" + "(" + (self.args.$inspect()['$[]']($$($nesting, 'Range').$new(1, -2))) + ")")};
      return $rb_plus(result, ">");
    }, $Enumerator_inspect$7.$$arity = 0);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Generator');

      var $nesting = [self].concat($parent_nesting), $Generator_initialize$8, $Generator_each$9;

      self.$$prototype.block = nil;
      
      self.$include($$($nesting, 'Enumerable'));
      
      Opal.def(self, '$initialize', $Generator_initialize$8 = function $$initialize() {
        var $iter = $Generator_initialize$8.$$p, block = $iter || nil, self = this;

        if ($iter) $Generator_initialize$8.$$p = null;
        
        
        if ($iter) $Generator_initialize$8.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'LocalJumpError'), "no block given")
        };
        return (self.block = block);
      }, $Generator_initialize$8.$$arity = 0);
      return (Opal.def(self, '$each', $Generator_each$9 = function $$each($a) {
        var $iter = $Generator_each$9.$$p, block = $iter || nil, $post_args, args, self = this, yielder = nil;

        if ($iter) $Generator_each$9.$$p = null;
        
        
        if ($iter) $Generator_each$9.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        yielder = $send($$($nesting, 'Yielder'), 'new', [], block.$to_proc());
        
        try {
          args.unshift(yielder);

          Opal.yieldX(self.block, args);
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, $Generator_each$9.$$arity = -1), nil) && 'each';
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Yielder');

      var $nesting = [self].concat($parent_nesting), $Yielder_initialize$10, $Yielder_yield$11, $Yielder_$lt$lt$12;

      self.$$prototype.block = nil;
      
      
      Opal.def(self, '$initialize', $Yielder_initialize$10 = function $$initialize() {
        var $iter = $Yielder_initialize$10.$$p, block = $iter || nil, self = this;

        if ($iter) $Yielder_initialize$10.$$p = null;
        
        
        if ($iter) $Yielder_initialize$10.$$p = null;;
        return (self.block = block);
      }, $Yielder_initialize$10.$$arity = 0);
      
      Opal.def(self, '$yield', $Yielder_yield$11 = function($a) {
        var $post_args, values, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        values = $post_args;;
        
        var value = Opal.yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      }, $Yielder_yield$11.$$arity = -1);
      return (Opal.def(self, '$<<', $Yielder_$lt$lt$12 = function($a) {
        var $post_args, values, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        values = $post_args;;
        $send(self, 'yield', Opal.to_a(values));
        return self;
      }, $Yielder_$lt$lt$12.$$arity = -1), nil) && '<<';
    })($nesting[0], null, $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Lazy');

      var $nesting = [self].concat($parent_nesting), $Lazy_initialize$13, $Lazy_lazy$16, $Lazy_collect$17, $Lazy_collect_concat$19, $Lazy_drop$23, $Lazy_drop_while$25, $Lazy_enum_for$27, $Lazy_find_all$28, $Lazy_grep$30, $Lazy_reject$33, $Lazy_take$35, $Lazy_take_while$37, $Lazy_inspect$39;

      self.$$prototype.enumerator = nil;
      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'StopLazyError');

        var $nesting = [self].concat($parent_nesting);

        return nil
      })($nesting[0], $$($nesting, 'Exception'), $nesting);
      
      Opal.def(self, '$initialize', $Lazy_initialize$13 = function $$initialize(object, size) {
        var $iter = $Lazy_initialize$13.$$p, block = $iter || nil, $$14, self = this;

        if ($iter) $Lazy_initialize$13.$$p = null;
        
        
        if ($iter) $Lazy_initialize$13.$$p = null;;
        
        if (size == null) {
          size = nil;
        };
        if ((block !== nil)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Lazy_initialize$13, false), [size], ($$14 = function(yielder, $a){var self = $$14.$$s || this, $post_args, each_args, $$15;

        
          
          if (yielder == null) {
            yielder = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          each_args = $post_args;;
          try {
            return $send(object, 'each', Opal.to_a(each_args), ($$15 = function($b){var self = $$15.$$s || this, $post_args, args;

            
              
              $post_args = Opal.slice.call(arguments, 0, arguments.length);
              
              args = $post_args;;
              
            args.unshift(yielder);

            Opal.yieldX(block, args);
          ;}, $$15.$$s = self, $$15.$$arity = -1, $$15))
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };}, $$14.$$s = self, $$14.$$arity = -2, $$14));
      }, $Lazy_initialize$13.$$arity = -2);
      Opal.alias(self, "force", "to_a");
      
      Opal.def(self, '$lazy', $Lazy_lazy$16 = function $$lazy() {
        var self = this;

        return self
      }, $Lazy_lazy$16.$$arity = 0);
      
      Opal.def(self, '$collect', $Lazy_collect$17 = function $$collect() {
        var $iter = $Lazy_collect$17.$$p, block = $iter || nil, $$18, self = this;

        if ($iter) $Lazy_collect$17.$$p = null;
        
        
        if ($iter) $Lazy_collect$17.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, self.$enumerator_size()], ($$18 = function(enum$, $a){var self = $$18.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          enum$.$yield(value);
        ;}, $$18.$$s = self, $$18.$$arity = -2, $$18));
      }, $Lazy_collect$17.$$arity = 0);
      
      Opal.def(self, '$collect_concat', $Lazy_collect_concat$19 = function $$collect_concat() {
        var $iter = $Lazy_collect_concat$19.$$p, block = $iter || nil, $$20, self = this;

        if ($iter) $Lazy_collect_concat$19.$$p = null;
        
        
        if ($iter) $Lazy_collect_concat$19.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy map without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$20 = function(enum$, $a){var self = $$20.$$s || this, $post_args, args, $$21, $$22;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            $send((value), 'each', [], ($$21 = function(v){var self = $$21.$$s || this;

          
            
            if (v == null) {
              v = nil;
            };
            return enum$.$yield(v);}, $$21.$$s = self, $$21.$$arity = 1, $$21))
          }
          else {
            var array = $$($nesting, 'Opal').$try_convert(value, $$($nesting, 'Array'), "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              $send((value), 'each', [], ($$22 = function(v){var self = $$22.$$s || this;

          
            
            if (v == null) {
              v = nil;
            };
            return enum$.$yield(v);}, $$22.$$s = self, $$22.$$arity = 1, $$22));
            }
          }
        ;}, $$20.$$s = self, $$20.$$arity = -2, $$20));
      }, $Lazy_collect_concat$19.$$arity = 0);
      
      Opal.def(self, '$drop', $Lazy_drop$23 = function $$drop(n) {
        var $$24, self = this, current_size = nil, set_size = nil, dropped = nil;

        
        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
          } else {
            return current_size
          }
        } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$24 = function(enum$, $a){var self = $$24.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy($rb_lt(dropped, n))) {
            return (dropped = $rb_plus(dropped, 1))
          } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          };}, $$24.$$s = self, $$24.$$arity = -2, $$24));
      }, $Lazy_drop$23.$$arity = 1);
      
      Opal.def(self, '$drop_while', $Lazy_drop_while$25 = function $$drop_while() {
        var $iter = $Lazy_drop_while$25.$$p, block = $iter || nil, $$26, self = this, succeeding = nil;

        if ($iter) $Lazy_drop_while$25.$$p = null;
        
        
        if ($iter) $Lazy_drop_while$25.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$26 = function(enum$, $a){var self = $$26.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy(succeeding)) {
            
            var value = Opal.yieldX(block, args);

            if ($falsy(value)) {
              succeeding = false;

              $send(enum$, 'yield', Opal.to_a(args));
            }
          
          } else {
            return $send(enum$, 'yield', Opal.to_a(args))
          };}, $$26.$$s = self, $$26.$$arity = -2, $$26));
      }, $Lazy_drop_while$25.$$arity = 0);
      
      Opal.def(self, '$enum_for', $Lazy_enum_for$27 = function $$enum_for($a, $b) {
        var $iter = $Lazy_enum_for$27.$$p, block = $iter || nil, $post_args, method, args, self = this;

        if ($iter) $Lazy_enum_for$27.$$p = null;
        
        
        if ($iter) $Lazy_enum_for$27.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        if ($post_args.length > 0) {
          method = $post_args[0];
          $post_args.splice(0, 1);
        }
        if (method == null) {
          method = "each";
        };
        
        args = $post_args;;
        return $send(self.$class(), 'for', [self, method].concat(Opal.to_a(args)), block.$to_proc());
      }, $Lazy_enum_for$27.$$arity = -1);
      
      Opal.def(self, '$find_all', $Lazy_find_all$28 = function $$find_all() {
        var $iter = $Lazy_find_all$28.$$p, block = $iter || nil, $$29, self = this;

        if ($iter) $Lazy_find_all$28.$$p = null;
        
        
        if ($iter) $Lazy_find_all$28.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy select without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$29 = function(enum$, $a){var self = $$29.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        ;}, $$29.$$s = self, $$29.$$arity = -2, $$29));
      }, $Lazy_find_all$28.$$arity = 0);
      Opal.alias(self, "flat_map", "collect_concat");
      
      Opal.def(self, '$grep', $Lazy_grep$30 = function $$grep(pattern) {
        var $iter = $Lazy_grep$30.$$p, block = $iter || nil, $$31, $$32, self = this;

        if ($iter) $Lazy_grep$30.$$p = null;
        
        
        if ($iter) $Lazy_grep$30.$$p = null;;
        if ($truthy(block)) {
          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$31 = function(enum$, $a){var self = $$31.$$s || this, $post_args, args;

          
            
            if (enum$ == null) {
              enum$ = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            
            var param = $$($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              value = Opal.yield1(block, param);

              enum$.$yield(Opal.yield1(block, param));
            }
          ;}, $$31.$$s = self, $$31.$$arity = -2, $$31))
        } else {
          return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$32 = function(enum$, $a){var self = $$32.$$s || this, $post_args, args;

          
            
            if (enum$ == null) {
              enum$ = nil;
            };
            
            $post_args = Opal.slice.call(arguments, 1, arguments.length);
            
            args = $post_args;;
            
            var param = $$($nesting, 'Opal').$destructure(args),
                value = pattern['$==='](param);

            if ($truthy(value)) {
              enum$.$yield(param);
            }
          ;}, $$32.$$s = self, $$32.$$arity = -2, $$32))
        };
      }, $Lazy_grep$30.$$arity = 1);
      Opal.alias(self, "map", "collect");
      Opal.alias(self, "select", "find_all");
      
      Opal.def(self, '$reject', $Lazy_reject$33 = function $$reject() {
        var $iter = $Lazy_reject$33.$$p, block = $iter || nil, $$34, self = this;

        if ($iter) $Lazy_reject$33.$$p = null;
        
        
        if ($iter) $Lazy_reject$33.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy reject without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$34 = function(enum$, $a){var self = $$34.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($falsy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
        ;}, $$34.$$s = self, $$34.$$arity = -2, $$34));
      }, $Lazy_reject$33.$$arity = 0);
      
      Opal.def(self, '$take', $Lazy_take$35 = function $$take(n) {
        var $$36, self = this, current_size = nil, set_size = nil, taken = nil;

        
        n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(n, 0))) {
          self.$raise($$($nesting, 'ArgumentError'), "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ($truthy($$($nesting, 'Integer')['$==='](current_size))) {
          if ($truthy($rb_lt(n, current_size))) {
            return n
          } else {
            return current_size
          }
        } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return $send($$($nesting, 'Lazy'), 'new', [self, set_size], ($$36 = function(enum$, $a){var self = $$36.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          if ($truthy($rb_lt(taken, n))) {
            
            $send(enum$, 'yield', Opal.to_a(args));
            return (taken = $rb_plus(taken, 1));
          } else {
            return self.$raise($$($nesting, 'StopLazyError'))
          };}, $$36.$$s = self, $$36.$$arity = -2, $$36));
      }, $Lazy_take$35.$$arity = 1);
      
      Opal.def(self, '$take_while', $Lazy_take_while$37 = function $$take_while() {
        var $iter = $Lazy_take_while$37.$$p, block = $iter || nil, $$38, self = this;

        if ($iter) $Lazy_take_while$37.$$p = null;
        
        
        if ($iter) $Lazy_take_while$37.$$p = null;;
        if ($truthy(block)) {
        } else {
          self.$raise($$($nesting, 'ArgumentError'), "tried to call lazy take_while without a block")
        };
        return $send($$($nesting, 'Lazy'), 'new', [self, nil], ($$38 = function(enum$, $a){var self = $$38.$$s || this, $post_args, args;

        
          
          if (enum$ == null) {
            enum$ = nil;
          };
          
          $post_args = Opal.slice.call(arguments, 1, arguments.length);
          
          args = $post_args;;
          
          var value = Opal.yieldX(block, args);

          if ($truthy(value)) {
            $send(enum$, 'yield', Opal.to_a(args));
          }
          else {
            self.$raise($$($nesting, 'StopLazyError'));
          }
        ;}, $$38.$$s = self, $$38.$$arity = -2, $$38));
      }, $Lazy_take_while$37.$$arity = 0);
      Opal.alias(self, "to_enum", "enum_for");
      return (Opal.def(self, '$inspect', $Lazy_inspect$39 = function $$inspect() {
        var self = this;

        return "" + "#<" + (self.$class()) + ": " + (self.enumerator.$inspect()) + ">"
      }, $Lazy_inspect$39.$$arity = 0), nil) && 'inspect';
    })($nesting[0], self, $nesting);
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/numeric"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$include', '$instance_of?', '$class', '$Float', '$respond_to?', '$coerce', '$__send__', '$===', '$raise', '$equal?', '$-', '$*', '$div', '$<', '$-@', '$ceil', '$to_f', '$denominator', '$to_r', '$==', '$floor', '$/', '$%', '$Complex', '$zero?', '$numerator', '$abs', '$arg', '$coerce_to!', '$round', '$to_i', '$truncate', '$>']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_coerce$1, $Numeric___coerced__$2, $Numeric_$lt_eq_gt$3, $Numeric_$plus$$4, $Numeric_$minus$$5, $Numeric_$percent$6, $Numeric_abs$7, $Numeric_abs2$8, $Numeric_angle$9, $Numeric_ceil$10, $Numeric_conj$11, $Numeric_denominator$12, $Numeric_div$13, $Numeric_divmod$14, $Numeric_fdiv$15, $Numeric_floor$16, $Numeric_i$17, $Numeric_imag$18, $Numeric_integer$ques$19, $Numeric_nonzero$ques$20, $Numeric_numerator$21, $Numeric_polar$22, $Numeric_quo$23, $Numeric_real$24, $Numeric_real$ques$25, $Numeric_rect$26, $Numeric_round$27, $Numeric_to_c$28, $Numeric_to_int$29, $Numeric_truncate$30, $Numeric_zero$ques$31, $Numeric_positive$ques$32, $Numeric_negative$ques$33, $Numeric_dup$34, $Numeric_clone$35, $Numeric_finite$ques$36, $Numeric_infinite$ques$37;

    
    self.$include($$($nesting, 'Comparable'));
    
    Opal.def(self, '$coerce', $Numeric_coerce$1 = function $$coerce(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
        return [other, self]};
      return [self.$Float(other), self.$Float(self)];
    }, $Numeric_coerce$1.$$arity = 1);
    
    Opal.def(self, '$__coerced__', $Numeric___coerced__$2 = function $$__coerced__(method, other) {
      var $a, $b, self = this, a = nil, b = nil, $case = nil;

      if ($truthy(other['$respond_to?']("coerce"))) {
        
        $b = other.$coerce(self), $a = Opal.to_ary($b), (a = ($a[0] == null ? nil : $a[0])), (b = ($a[1] == null ? nil : $a[1])), $b;
        return a.$__send__(method, b);
      } else {
        return (function() {$case = method;
        if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {return self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Numeric")}
        else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {return self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}
        else { return nil }})()
      }
    }, $Numeric___coerced__$2.$$arity = 2);
    
    Opal.def(self, '$<=>', $Numeric_$lt_eq_gt$3 = function(other) {
      var self = this;

      
      if ($truthy(self['$equal?'](other))) {
        return 0};
      return nil;
    }, $Numeric_$lt_eq_gt$3.$$arity = 1);
    
    Opal.def(self, '$+@', $Numeric_$plus$$4 = function() {
      var self = this;

      return self
    }, $Numeric_$plus$$4.$$arity = 0);
    
    Opal.def(self, '$-@', $Numeric_$minus$$5 = function() {
      var self = this;

      return $rb_minus(0, self)
    }, $Numeric_$minus$$5.$$arity = 0);
    
    Opal.def(self, '$%', $Numeric_$percent$6 = function(other) {
      var self = this;

      return $rb_minus(self, $rb_times(other, self.$div(other)))
    }, $Numeric_$percent$6.$$arity = 1);
    
    Opal.def(self, '$abs', $Numeric_abs$7 = function $$abs() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return self['$-@']()
      } else {
        return self
      }
    }, $Numeric_abs$7.$$arity = 0);
    
    Opal.def(self, '$abs2', $Numeric_abs2$8 = function $$abs2() {
      var self = this;

      return $rb_times(self, self)
    }, $Numeric_abs2$8.$$arity = 0);
    
    Opal.def(self, '$angle', $Numeric_angle$9 = function $$angle() {
      var self = this;

      if ($rb_lt(self, 0)) {
        return $$$($$($nesting, 'Math'), 'PI')
      } else {
        return 0
      }
    }, $Numeric_angle$9.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.def(self, '$ceil', $Numeric_ceil$10 = function $$ceil(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$ceil(ndigits);
    }, $Numeric_ceil$10.$$arity = -1);
    
    Opal.def(self, '$conj', $Numeric_conj$11 = function $$conj() {
      var self = this;

      return self
    }, $Numeric_conj$11.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.def(self, '$denominator', $Numeric_denominator$12 = function $$denominator() {
      var self = this;

      return self.$to_r().$denominator()
    }, $Numeric_denominator$12.$$arity = 0);
    
    Opal.def(self, '$div', $Numeric_div$13 = function $$div(other) {
      var self = this;

      
      if (other['$=='](0)) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by o")};
      return $rb_divide(self, other).$floor();
    }, $Numeric_div$13.$$arity = 1);
    
    Opal.def(self, '$divmod', $Numeric_divmod$14 = function $$divmod(other) {
      var self = this;

      return [self.$div(other), self['$%'](other)]
    }, $Numeric_divmod$14.$$arity = 1);
    
    Opal.def(self, '$fdiv', $Numeric_fdiv$15 = function $$fdiv(other) {
      var self = this;

      return $rb_divide(self.$to_f(), other)
    }, $Numeric_fdiv$15.$$arity = 1);
    
    Opal.def(self, '$floor', $Numeric_floor$16 = function $$floor(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$floor(ndigits);
    }, $Numeric_floor$16.$$arity = -1);
    
    Opal.def(self, '$i', $Numeric_i$17 = function $$i() {
      var self = this;

      return self.$Complex(0, self)
    }, $Numeric_i$17.$$arity = 0);
    
    Opal.def(self, '$imag', $Numeric_imag$18 = function $$imag() {
      var self = this;

      return 0
    }, $Numeric_imag$18.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.def(self, '$integer?', $Numeric_integer$ques$19 = function() {
      var self = this;

      return false
    }, $Numeric_integer$ques$19.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.def(self, '$nonzero?', $Numeric_nonzero$ques$20 = function() {
      var self = this;

      if ($truthy(self['$zero?']())) {
        return nil
      } else {
        return self
      }
    }, $Numeric_nonzero$ques$20.$$arity = 0);
    
    Opal.def(self, '$numerator', $Numeric_numerator$21 = function $$numerator() {
      var self = this;

      return self.$to_r().$numerator()
    }, $Numeric_numerator$21.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.def(self, '$polar', $Numeric_polar$22 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, $Numeric_polar$22.$$arity = 0);
    
    Opal.def(self, '$quo', $Numeric_quo$23 = function $$quo(other) {
      var self = this;

      return $rb_divide($$($nesting, 'Opal')['$coerce_to!'](self, $$($nesting, 'Rational'), "to_r"), other)
    }, $Numeric_quo$23.$$arity = 1);
    
    Opal.def(self, '$real', $Numeric_real$24 = function $$real() {
      var self = this;

      return self
    }, $Numeric_real$24.$$arity = 0);
    
    Opal.def(self, '$real?', $Numeric_real$ques$25 = function() {
      var self = this;

      return true
    }, $Numeric_real$ques$25.$$arity = 0);
    
    Opal.def(self, '$rect', $Numeric_rect$26 = function $$rect() {
      var self = this;

      return [self, 0]
    }, $Numeric_rect$26.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.def(self, '$round', $Numeric_round$27 = function $$round(digits) {
      var self = this;

      
      ;
      return self.$to_f().$round(digits);
    }, $Numeric_round$27.$$arity = -1);
    
    Opal.def(self, '$to_c', $Numeric_to_c$28 = function $$to_c() {
      var self = this;

      return self.$Complex(self, 0)
    }, $Numeric_to_c$28.$$arity = 0);
    
    Opal.def(self, '$to_int', $Numeric_to_int$29 = function $$to_int() {
      var self = this;

      return self.$to_i()
    }, $Numeric_to_int$29.$$arity = 0);
    
    Opal.def(self, '$truncate', $Numeric_truncate$30 = function $$truncate(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return self.$to_f().$truncate(ndigits);
    }, $Numeric_truncate$30.$$arity = -1);
    
    Opal.def(self, '$zero?', $Numeric_zero$ques$31 = function() {
      var self = this;

      return self['$=='](0)
    }, $Numeric_zero$ques$31.$$arity = 0);
    
    Opal.def(self, '$positive?', $Numeric_positive$ques$32 = function() {
      var self = this;

      return $rb_gt(self, 0)
    }, $Numeric_positive$ques$32.$$arity = 0);
    
    Opal.def(self, '$negative?', $Numeric_negative$ques$33 = function() {
      var self = this;

      return $rb_lt(self, 0)
    }, $Numeric_negative$ques$33.$$arity = 0);
    
    Opal.def(self, '$dup', $Numeric_dup$34 = function $$dup() {
      var self = this;

      return self
    }, $Numeric_dup$34.$$arity = 0);
    
    Opal.def(self, '$clone', $Numeric_clone$35 = function $$clone($kwargs) {
      var freeze, self = this;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      freeze = $kwargs.$$smap["freeze"];
      if (freeze == null) {
        freeze = true
      };
      return self;
    }, $Numeric_clone$35.$$arity = -1);
    
    Opal.def(self, '$finite?', $Numeric_finite$ques$36 = function() {
      var self = this;

      return true
    }, $Numeric_finite$ques$36.$$arity = 0);
    return (Opal.def(self, '$infinite?', $Numeric_infinite$ques$37 = function() {
      var self = this;

      return nil
    }, $Numeric_infinite$ques$37.$$arity = 0), nil) && 'infinite?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/array"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$include', '$to_a', '$warn', '$raise', '$replace', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$===', '$join', '$to_str', '$class', '$hash', '$<=>', '$==', '$object_id', '$inspect', '$enum_for', '$bsearch_index', '$to_proc', '$nil?', '$coerce_to!', '$>', '$*', '$enumerator_size', '$empty?', '$size', '$map', '$equal?', '$dup', '$each', '$[]', '$dig', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$__id__', '$to_s', '$new', '$max', '$min', '$!', '$>=', '$**', '$delete_if', '$reverse', '$rotate', '$rand', '$at', '$keep_if', '$shuffle!', '$<', '$sort', '$sort_by', '$!=', '$times', '$[]=', '$-', '$<<', '$values', '$is_a?', '$last', '$first', '$upto', '$reject', '$pristine', '$singleton_class']);
  
  self.$require("corelib/enumerable");
  self.$require("corelib/numeric");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_$$$1, $Array_initialize$2, $Array_try_convert$3, $Array_$$4, $Array_$$5, $Array_$$6, $Array_$plus$7, $Array_$minus$8, $Array_$lt$lt$9, $Array_$lt_eq_gt$10, $Array_$eq_eq$11, $Array_$$$12, $Array_$$$eq$13, $Array_any$ques$14, $Array_assoc$15, $Array_at$16, $Array_bsearch_index$17, $Array_bsearch$18, $Array_cycle$19, $Array_clear$21, $Array_count$22, $Array_initialize_copy$23, $Array_collect$24, $Array_collect$excl$26, $Array_combination$28, $Array_repeated_combination$30, $Array_compact$32, $Array_compact$excl$33, $Array_concat$34, $Array_delete$37, $Array_delete_at$38, $Array_delete_if$39, $Array_dig$41, $Array_drop$42, $Array_dup$43, $Array_each$44, $Array_each_index$46, $Array_empty$ques$48, $Array_eql$ques$49, $Array_fetch$50, $Array_fill$51, $Array_first$52, $Array_flatten$53, $Array_flatten$excl$54, $Array_hash$55, $Array_include$ques$56, $Array_index$57, $Array_insert$58, $Array_inspect$59, $Array_join$60, $Array_keep_if$61, $Array_last$63, $Array_length$64, $Array_max$65, $Array_min$66, $Array_permutation$67, $Array_repeated_permutation$69, $Array_pop$71, $Array_product$72, $Array_push$73, $Array_rassoc$74, $Array_reject$75, $Array_reject$excl$77, $Array_replace$79, $Array_reverse$80, $Array_reverse$excl$81, $Array_reverse_each$82, $Array_rindex$84, $Array_rotate$85, $Array_rotate$excl$86, $Array_sample$89, $Array_select$90, $Array_select$excl$92, $Array_shift$94, $Array_shuffle$95, $Array_shuffle$excl$96, $Array_slice$excl$97, $Array_sort$98, $Array_sort$excl$99, $Array_sort_by$excl$100, $Array_take$102, $Array_take_while$103, $Array_to_a$104, $Array_to_h$105, $Array_transpose$106, $Array_uniq$109, $Array_uniq$excl$110, $Array_unshift$111, $Array_values_at$112, $Array_zip$115, $Array_inherited$116, $Array_instance_variables$117, $Array_pack$119;

    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defineProperty(self.$$prototype, '$$is_array', true);
    
    function toArraySubclass(obj, klass) {
      if (klass.$$name === Opal.Array) {
        return obj;
      } else {
        return klass.$allocate().$replace((obj).$to_a());
      }
    }
  ;
    Opal.defs(self, '$[]', $Array_$$$1 = function($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      return toArraySubclass(objects, self);;
    }, $Array_$$$1.$$arity = -1);
    
    Opal.def(self, '$initialize', $Array_initialize$2 = function $$initialize(size, obj) {
      var $iter = $Array_initialize$2.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_initialize$2.$$p = null;
      
      
      if ($iter) $Array_initialize$2.$$p = null;;
      
      if (size == null) {
        size = nil;
      };
      
      if (obj == null) {
        obj = nil;
      };
      
      if (obj !== nil && block !== nil) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (size > $$$($$($nesting, 'Integer'), 'MAX')) {
        self.$raise($$($nesting, 'ArgumentError'), "array size too big")
      }

      if (arguments.length > 2) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..2)")
      }

      if (arguments.length === 0) {
        self.splice(0, self.length);
        return self;
      }

      if (arguments.length === 1) {
        if (size.$$is_array) {
          self.$replace(size.$to_a())
          return self;
        } else if (size['$respond_to?']("to_ary")) {
          self.$replace(size.$to_ary())
          return self;
        }
      }

      size = $$($nesting, 'Opal').$coerce_to(size, $$($nesting, 'Integer'), "to_int")

      if (size < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")
      }

      self.splice(0, self.length);
      var i, value;

      if (block === nil) {
        for (i = 0; i < size; i++) {
          self.push(obj);
        }
      }
      else {
        for (i = 0, value; i < size; i++) {
          value = block(i);
          self[i] = value;
        }
      }

      return self;
    ;
    }, $Array_initialize$2.$$arity = -1);
    Opal.defs(self, '$try_convert', $Array_try_convert$3 = function $$try_convert(obj) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Array'), "to_ary")
    }, $Array_try_convert$3.$$arity = 1);
    
    Opal.def(self, '$&', $Array_$$4 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_delete(hash, item) !== undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, $Array_$$4.$$arity = 1);
    
    Opal.def(self, '$|', $Array_$$5 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      
      var hash = $hash2([], {}), i, length, item;

      for (i = 0, length = self.length; i < length; i++) {
        Opal.hash_put(hash, self[i], true);
      }

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      return hash.$keys();
    ;
    }, $Array_$$5.$$arity = 1);
    
    Opal.def(self, '$*', $Array_$$6 = function(other) {
      var self = this;

      
      if ($truthy(other['$respond_to?']("to_str"))) {
        return self.$join(other.$to_str())};
      other = $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Integer'), "to_int");
      if ($truthy(other < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative argument")};
      
      var result = [],
          converted = self.$to_a();

      for (var i = 0; i < other; i++) {
        result = result.concat(converted);
      }

      return toArraySubclass(result, self.$class());
    ;
    }, $Array_$$6.$$arity = 1);
    
    Opal.def(self, '$+', $Array_$plus$7 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      return self.concat(other);;
    }, $Array_$plus$7.$$arity = 1);
    
    Opal.def(self, '$-', $Array_$minus$8 = function(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(other.length === 0)) {
        return self.slice()};
      
      var result = [], hash = $hash2([], {}), i, length, item;

      for (i = 0, length = other.length; i < length; i++) {
        Opal.hash_put(hash, other[i], true);
      }

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];
        if (Opal.hash_get(hash, item) === undefined) {
          result.push(item);
        }
      }

      return result;
    ;
    }, $Array_$minus$8.$$arity = 1);
    
    Opal.def(self, '$<<', $Array_$lt$lt$9 = function(object) {
      var self = this;

      
      self.push(object);
      return self;
    }, $Array_$lt$lt$9.$$arity = 1);
    
    Opal.def(self, '$<=>', $Array_$lt_eq_gt$10 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Array')['$==='](other))) {
        other = other.$to_a()
      } else if ($truthy(other['$respond_to?']("to_ary"))) {
        other = other.$to_ary().$to_a()
      } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      var count = Math.min(self.length, other.length);

      for (var i = 0; i < count; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return (self.length)['$<=>'](other.length);
    ;
    }, $Array_$lt_eq_gt$10.$$arity = 1);
    
    Opal.def(self, '$==', $Array_$eq_eq$11 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eqeq(array, other) {
        var i, length, a, b;

        if (array === other)
          return true;

        if (!other.$$is_array) {
          if ($$($nesting, 'Opal')['$respond_to?'](other, "to_ary")) {
            return (other)['$=='](array);
          } else {
            return false;
          }
        }

        if (array.$$constructor !== Array)
          array = (array).$to_a();
        if (other.$$constructor !== Array)
          other = (other).$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    
    }, $Array_$eq_eq$11.$$arity = 1);
    
    function $array_slice_range(self, index) {
      var size = self.length,
          exclude, from, to, result;

      exclude = index.excl;
      from    = Opal.Opal.$coerce_to(index.begin, Opal.Integer, 'to_int');
      to      = Opal.Opal.$coerce_to(index.end, Opal.Integer, 'to_int');

      if (from < 0) {
        from += size;

        if (from < 0) {
          return nil;
        }
      }

      if (from > size) {
        return nil;
      }

      if (to < 0) {
        to += size;

        if (to < 0) {
          return [];
        }
      }

      if (!exclude) {
        to += 1;
      }

      result = self.slice(from, to);
      return toArraySubclass(result, self.$class());
    }

    function $array_slice_index_length(self, index, length) {
      var size = self.length,
          exclude, from, to, result;

      index = Opal.Opal.$coerce_to(index, Opal.Integer, 'to_int');

      if (index < 0) {
        index += size;

        if (index < 0) {
          return nil;
        }
      }

      if (length === undefined) {
        if (index >= size || index < 0) {
          return nil;
        }

        return self[index];
      }
      else {
        length = Opal.Opal.$coerce_to(length, Opal.Integer, 'to_int');

        if (length < 0 || index > size || index < 0) {
          return nil;
        }

        result = self.slice(index, index + length);
      }
      return toArraySubclass(result, self.$class());
    }
  ;
    
    Opal.def(self, '$[]', $Array_$$$12 = function(index, length) {
      var self = this;

      
      ;
      
      if (index.$$is_range) {
        return $array_slice_range(self, index);
      }
      else {
        return $array_slice_index_length(self, index, length);
      }
    ;
    }, $Array_$$$12.$$arity = -2);
    
    Opal.def(self, '$[]=', $Array_$$$eq$13 = function(index, value, extra) {
      var self = this, data = nil, length = nil;

      
      ;
            var i, size = self.length;;
      if ($truthy($$($nesting, 'Range')['$==='](index))) {
        
        data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {
          return value.$to_a()
        } else if ($truthy(value['$respond_to?']("to_ary"))) {
          return value.$to_ary().$to_a()
        } else {
          return [value]
        }; return nil; })();
        
        var exclude = index.excl,
            from    = $$($nesting, 'Opal').$coerce_to(index.begin, $$($nesting, 'Integer'), "to_int"),
            to      = $$($nesting, 'Opal').$coerce_to(index.end, $$($nesting, 'Integer'), "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($$($nesting, 'RangeError'), "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
      } else {
        
        if ($truthy(extra === undefined)) {
          length = 1
        } else {
          
          length = value;
          value = extra;
          data = (function() {if ($truthy($$($nesting, 'Array')['$==='](value))) {
            return value.$to_a()
          } else if ($truthy(value['$respond_to?']("to_ary"))) {
            return value.$to_ary().$to_a()
          } else {
            return [value]
          }; return nil; })();
        };
        
        var old;

        index  = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($$($nesting, 'IndexError'), "" + "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($$($nesting, 'IndexError'), "" + "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    }, $Array_$$$eq$13.$$arity = -3);
    
    Opal.def(self, '$any?', $Array_any$ques$14 = function(pattern) {
      var $iter = $Array_any$ques$14.$$p, block = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_any$ques$14.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if ($iter) $Array_any$ques$14.$$p = null;;
      ;
      if (self.length === 0) return false;
      return $send(self, Opal.find_super_dispatcher(self, 'any?', $Array_any$ques$14, false), $zuper, $iter);
    }, $Array_any$ques$14.$$arity = -1);
    
    Opal.def(self, '$assoc', $Array_assoc$15 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    }, $Array_assoc$15.$$arity = 1);
    
    Opal.def(self, '$at', $Array_at$16 = function $$at(index) {
      var self = this;

      
      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    ;
    }, $Array_at$16.$$arity = 1);
    
    Opal.def(self, '$bsearch_index', $Array_bsearch_index$17 = function $$bsearch_index() {
      var $iter = $Array_bsearch_index$17.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_bsearch_index$17.$$p = null;
      
      
      if ($iter) $Array_bsearch_index$17.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch_index")
      };
      
      var min = 0,
          max = self.length,
          mid,
          val,
          ret,
          smaller = false,
          satisfied = nil;

      while (min < max) {
        mid = min + Math.floor((max - min) / 2);
        val = self[mid];
        ret = Opal.yield1(block, val);

        if (ret === true) {
          satisfied = mid;
          smaller = true;
        }
        else if (ret === false || ret === nil) {
          smaller = false;
        }
        else if (ret.$$is_number) {
          if (ret === 0) { return mid; }
          smaller = (ret < 0);
        }
        else {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong argument type " + ((ret).$class()) + " (must be numeric, true, false or nil)")
        }

        if (smaller) { max = mid; } else { min = mid + 1; }
      }

      return satisfied;
    ;
    }, $Array_bsearch_index$17.$$arity = 0);
    
    Opal.def(self, '$bsearch', $Array_bsearch$18 = function $$bsearch() {
      var $iter = $Array_bsearch$18.$$p, block = $iter || nil, self = this, index = nil;

      if ($iter) $Array_bsearch$18.$$p = null;
      
      
      if ($iter) $Array_bsearch$18.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch")
      };
      index = $send(self, 'bsearch_index', [], block.$to_proc());
      
      if (index != null && index.$$is_number) {
        return self[index];
      } else {
        return index;
      }
    ;
    }, $Array_bsearch$18.$$arity = 0);
    
    Opal.def(self, '$cycle', $Array_cycle$19 = function $$cycle(n) {
      var $iter = $Array_cycle$19.$$p, block = $iter || nil, $$20, $a, self = this;

      if ($iter) $Array_cycle$19.$$p = null;
      
      
      if ($iter) $Array_cycle$19.$$p = null;;
      
      if (n == null) {
        n = nil;
      };
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["cycle", n], ($$20 = function(){var self = $$20.$$s || this;

        if ($truthy(n['$nil?']())) {
            return $$$($$($nesting, 'Float'), 'INFINITY')
          } else {
            
            n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
            if ($truthy($rb_gt(n, 0))) {
              return $rb_times(self.$enumerator_size(), n)
            } else {
              return 0
            };
          }}, $$20.$$s = self, $$20.$$arity = 0, $$20))
      };
      if ($truthy(($truthy($a = self['$empty?']()) ? $a : n['$=='](0)))) {
        return nil};
      
      var i, length, value;

      if (n === nil) {
        while (true) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }
        }
      }
      else {
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (i = 0, length = self.length; i < length; i++) {
            value = Opal.yield1(block, self[i]);
          }

          n--;
        }
      }
    ;
      return self;
    }, $Array_cycle$19.$$arity = -1);
    
    Opal.def(self, '$clear', $Array_clear$21 = function $$clear() {
      var self = this;

      
      self.splice(0, self.length);
      return self;
    }, $Array_clear$21.$$arity = 0);
    
    Opal.def(self, '$count', $Array_count$22 = function $$count(object) {
      var $iter = $Array_count$22.$$p, block = $iter || nil, $a, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_count$22.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if ($iter) $Array_count$22.$$p = null;;
      
      if (object == null) {
        object = nil;
      };
      if ($truthy(($truthy($a = object) ? $a : block))) {
        return $send(self, Opal.find_super_dispatcher(self, 'count', $Array_count$22, false), $zuper, $iter)
      } else {
        return self.$size()
      };
    }, $Array_count$22.$$arity = -1);
    
    Opal.def(self, '$initialize_copy', $Array_initialize_copy$23 = function $$initialize_copy(other) {
      var self = this;

      return self.$replace(other)
    }, $Array_initialize_copy$23.$$arity = 1);
    
    Opal.def(self, '$collect', $Array_collect$24 = function $$collect() {
      var $iter = $Array_collect$24.$$p, block = $iter || nil, $$25, self = this;

      if ($iter) $Array_collect$24.$$p = null;
      
      
      if ($iter) $Array_collect$24.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect"], ($$25 = function(){var self = $$25.$$s || this;

        return self.$size()}, $$25.$$s = self, $$25.$$arity = 0, $$25))
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        result.push(value);
      }

      return result;
    ;
    }, $Array_collect$24.$$arity = 0);
    
    Opal.def(self, '$collect!', $Array_collect$excl$26 = function() {
      var $iter = $Array_collect$excl$26.$$p, block = $iter || nil, $$27, self = this;

      if ($iter) $Array_collect$excl$26.$$p = null;
      
      
      if ($iter) $Array_collect$excl$26.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["collect!"], ($$27 = function(){var self = $$27.$$s || this;

        return self.$size()}, $$27.$$s = self, $$27.$$arity = 0, $$27))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
        self[i] = value;
      }
    ;
      return self;
    }, $Array_collect$excl$26.$$arity = 0);
    
    function binomial_coefficient(n, k) {
      if (n === k || k === 0) {
        return 1;
      }

      if (k > 0 && n > k) {
        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k);
      }

      return 0;
    }
  ;
    
    Opal.def(self, '$combination', $Array_combination$28 = function $$combination(n) {
      var $$29, $iter = $Array_combination$28.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) $Array_combination$28.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["combination", num], ($$29 = function(){var self = $$29.$$s || this;

        return binomial_coefficient(self.length, num)}, $$29.$$s = self, $$29.$$arity = 0, $$29))
      };
      
      var i, length, stack, chosen, lev, done, next;

      if (num === 0) {
        Opal.yield1($yield, [])
      } else if (num === 1) {
        for (i = 0, length = self.length; i < length; i++) {
          Opal.yield1($yield, [self[i]])
        }
      }
      else if (num === self.length) {
        Opal.yield1($yield, self.slice())
      }
      else if (num >= 0 && num < self.length) {
        stack = [];
        for (i = 0; i <= num + 1; i++) {
          stack.push(0);
        }

        chosen = [];
        lev = 0;
        done = false;
        stack[0] = -1;

        while (!done) {
          chosen[lev] = self[stack[lev+1]];
          while (lev < num - 1) {
            lev++;
            next = stack[lev+1] = stack[lev] + 1;
            chosen[lev] = self[next];
          }
          Opal.yield1($yield, chosen.slice())
          lev++;
          do {
            done = (lev === 0);
            stack[lev]++;
            lev--;
          } while ( stack[lev+1] + num === self.length + lev + 1 );
        }
      }
    ;
      return self;
    }, $Array_combination$28.$$arity = 1);
    
    Opal.def(self, '$repeated_combination', $Array_repeated_combination$30 = function $$repeated_combination(n) {
      var $$31, $iter = $Array_repeated_combination$30.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) $Array_repeated_combination$30.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["repeated_combination", num], ($$31 = function(){var self = $$31.$$s || this;

        return binomial_coefficient(self.length + num - 1, num);}, $$31.$$s = self, $$31.$$arity = 0, $$31))
      };
      
      function iterate(max, from, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = from; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, i, buffer, self);
          buffer.pop();
        }
      }

      if (num >= 0) {
        iterate(num, 0, [], self);
      }
    ;
      return self;
    }, $Array_repeated_combination$30.$$arity = 1);
    
    Opal.def(self, '$compact', $Array_compact$32 = function $$compact() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    }, $Array_compact$32.$$arity = 0);
    
    Opal.def(self, '$compact!', $Array_compact$excl$33 = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    }, $Array_compact$excl$33.$$arity = 0);
    
    Opal.def(self, '$concat', $Array_concat$34 = function $$concat($a) {
      var $post_args, others, $$35, $$36, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      others = $send(others, 'map', [], ($$35 = function(other){var self = $$35.$$s || this;

      
        
        if (other == null) {
          other = nil;
        };
        other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
          return other.$to_a()
        } else {
          return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
        }; return nil; })();
        if ($truthy(other['$equal?'](self))) {
          other = other.$dup()};
        return other;}, $$35.$$s = self, $$35.$$arity = 1, $$35));
      $send(others, 'each', [], ($$36 = function(other){var self = $$36.$$s || this;

      
        
        if (other == null) {
          other = nil;
        };
        
        for (var i = 0, length = other.length; i < length; i++) {
          self.push(other[i]);
        }
      ;}, $$36.$$s = self, $$36.$$arity = 1, $$36));
      return self;
    }, $Array_concat$34.$$arity = -1);
    
    Opal.def(self, '$delete', $Array_delete$37 = function(object) {
      var $iter = $Array_delete$37.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Array_delete$37.$$p = null;
      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      if (self.length === original) {
        if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
        }
        return nil;
      }
      return object;
    
    }, $Array_delete$37.$$arity = 1);
    
    Opal.def(self, '$delete_at', $Array_delete_at$38 = function $$delete_at(index) {
      var self = this;

      
      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    
    }, $Array_delete_at$38.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Array_delete_if$39 = function $$delete_if() {
      var $iter = $Array_delete_if$39.$$p, block = $iter || nil, $$40, self = this;

      if ($iter) $Array_delete_if$39.$$p = null;
      
      
      if ($iter) $Array_delete_if$39.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["delete_if"], ($$40 = function(){var self = $$40.$$s || this;

        return self.$size()}, $$40.$$s = self, $$40.$$arity = 0, $$40))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, $Array_delete_if$39.$$arity = 0);
    
    Opal.def(self, '$dig', $Array_dig$41 = function $$dig(idx, $a) {
      var $post_args, idxs, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      idxs = $post_args;;
      item = self['$[]'](idx);
      
      if (item === nil || idxs.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(idxs));
    }, $Array_dig$41.$$arity = -2);
    
    Opal.def(self, '$drop', $Array_drop$42 = function $$drop(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($$($nesting, 'ArgumentError'))
      }

      return self.slice(number);
    
    }, $Array_drop$42.$$arity = 1);
    
    Opal.def(self, '$dup', $Array_dup$43 = function $$dup() {
      var $iter = $Array_dup$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_dup$43.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      
      if (self.$$class === Opal.Array &&
          self.$$class.$allocate.$$pristine &&
          self.$copy_instance_variables.$$pristine &&
          self.$initialize_dup.$$pristine) {
        return self.slice(0);
      }
    ;
      return $send(self, Opal.find_super_dispatcher(self, 'dup', $Array_dup$43, false), $zuper, $iter);
    }, $Array_dup$43.$$arity = 0);
    
    Opal.def(self, '$each', $Array_each$44 = function $$each() {
      var $iter = $Array_each$44.$$p, block = $iter || nil, $$45, self = this;

      if ($iter) $Array_each$44.$$p = null;
      
      
      if ($iter) $Array_each$44.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each"], ($$45 = function(){var self = $$45.$$s || this;

        return self.$size()}, $$45.$$s = self, $$45.$$arity = 0, $$45))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, self[i]);
      }
    ;
      return self;
    }, $Array_each$44.$$arity = 0);
    
    Opal.def(self, '$each_index', $Array_each_index$46 = function $$each_index() {
      var $iter = $Array_each_index$46.$$p, block = $iter || nil, $$47, self = this;

      if ($iter) $Array_each_index$46.$$p = null;
      
      
      if ($iter) $Array_each_index$46.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_index"], ($$47 = function(){var self = $$47.$$s || this;

        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.yield1(block, i);
      }
    ;
      return self;
    }, $Array_each_index$46.$$arity = 0);
    
    Opal.def(self, '$empty?', $Array_empty$ques$48 = function() {
      var self = this;

      return self.length === 0;
    }, $Array_empty$ques$48.$$arity = 0);
    
    Opal.def(self, '$eql?', $Array_eql$ques$49 = function(other) {
      var self = this;

      
      var recursed = {};

      function _eql(array, other) {
        var i, length, a, b;

        if (!other.$$is_array) {
          return false;
        }

        other = other.$to_a();

        if (array.length !== other.length) {
          return false;
        }

        recursed[(array).$object_id()] = true;

        for (i = 0, length = array.length; i < length; i++) {
          a = array[i];
          b = other[i];
          if (a.$$is_array) {
            if (b.$$is_array && b.length !== a.length) {
              return false;
            }
            if (!recursed.hasOwnProperty((a).$object_id())) {
              if (!_eql(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eql(self, other);
    
    }, $Array_eql$ques$49.$$arity = 1);
    
    Opal.def(self, '$fetch', $Array_fetch$50 = function $$fetch(index, defaults) {
      var $iter = $Array_fetch$50.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_fetch$50.$$p = null;
      
      
      if ($iter) $Array_fetch$50.$$p = null;;
      ;
      
      var original = index;

      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil && defaults != null) {
        self.$warn("warning: block supersedes default value argument")
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($$($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($$($nesting, 'IndexError'), "" + "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    }, $Array_fetch$50.$$arity = -2);
    
    Opal.def(self, '$fill', $Array_fill$51 = function $$fill($a) {
      var $iter = $Array_fill$51.$$p, block = $iter || nil, $post_args, args, $b, $c, self = this, one = nil, two = nil, obj = nil, left = nil, right = nil;

      if ($iter) $Array_fill$51.$$p = null;
      
      
      if ($iter) $Array_fill$51.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
            var i, length, value;;
      if ($truthy(block)) {
        
        if ($truthy(args.length > 2)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $c = args, $b = Opal.to_ary($c), (one = ($b[0] == null ? nil : $b[0])), (two = ($b[1] == null ? nil : $b[1])), $c;
      } else {
        
        if ($truthy(args.length == 0)) {
          self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (0 for 1..3)")
        } else if ($truthy(args.length > 3)) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $c = args, $b = Opal.to_ary($c), (obj = ($b[0] == null ? nil : $b[0])), (one = ($b[1] == null ? nil : $b[1])), (two = ($b[2] == null ? nil : $b[2])), $c;
      };
      if ($truthy($$($nesting, 'Range')['$==='](one))) {
        
        if ($truthy(two)) {
          self.$raise($$($nesting, 'TypeError'), "length invalid with range")};
        left = $$($nesting, 'Opal').$coerce_to(one.$begin(), $$($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          self.$raise($$($nesting, 'RangeError'), "" + (one.$inspect()) + " out of range")};
        right = $$($nesting, 'Opal').$coerce_to(one.$end(), $$($nesting, 'Integer'), "to_int");
        if ($truthy(right < 0)) {
          right += this.length};
        if ($truthy(one['$exclude_end?']())) {
        } else {
          right += 1
        };
        if ($truthy(right <= left)) {
          return self};
      } else if ($truthy(one)) {
        
        left = $$($nesting, 'Opal').$coerce_to(one, $$($nesting, 'Integer'), "to_int");
        if ($truthy(left < 0)) {
          left += this.length};
        if ($truthy(left < 0)) {
          left = 0};
        if ($truthy(two)) {
          
          right = $$($nesting, 'Opal').$coerce_to(two, $$($nesting, 'Integer'), "to_int");
          if ($truthy(right == 0)) {
            return self};
          right += left;
        } else {
          right = this.length
        };
      } else {
        
        left = 0;
        right = this.length;
      };
      if ($truthy(left > this.length)) {
        
        for (i = this.length; i < right; i++) {
          self[i] = nil;
        }
      };
      if ($truthy(right > this.length)) {
        this.length = right};
      if ($truthy(block)) {
        
        for (length = this.length; left < right; left++) {
          value = block(left);
          self[left] = value;
        }
      
      } else {
        
        for (length = this.length; left < right; left++) {
          self[left] = obj;
        }
      
      };
      return self;
    }, $Array_fill$51.$$arity = -1);
    
    Opal.def(self, '$first', $Array_first$52 = function $$first(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size");
      }

      return self.slice(0, count);
    ;
    }, $Array_first$52.$$arity = -1);
    
    Opal.def(self, '$flatten', $Array_flatten$53 = function $$flatten(level) {
      var self = this;

      
      ;
      
      function _flatten(array, level) {
        var result = [],
            i, length,
            item, ary;

        array = (array).$to_a();

        for (i = 0, length = array.length; i < length; i++) {
          item = array[i];

          if (!$$($nesting, 'Opal')['$respond_to?'](item, "to_ary", true)) {
            result.push(item);
            continue;
          }

          ary = (item).$to_ary();

          if (ary === nil) {
            result.push(item);
            continue;
          }

          if (!ary.$$is_array) {
            self.$raise($$($nesting, 'TypeError'));
          }

          if (ary === self) {
            self.$raise($$($nesting, 'ArgumentError'));
          }

          switch (level) {
          case undefined:
            result = result.concat(_flatten(ary));
            break;
          case 0:
            result.push(ary);
            break;
          default:
            result.push.apply(result, _flatten(ary, level - 1));
          }
        }
        return result;
      }

      if (level !== undefined) {
        level = $$($nesting, 'Opal').$coerce_to(level, $$($nesting, 'Integer'), "to_int");
      }

      return toArraySubclass(_flatten(self, level), self.$class());
    ;
    }, $Array_flatten$53.$$arity = -1);
    
    Opal.def(self, '$flatten!', $Array_flatten$excl$54 = function(level) {
      var self = this;

      
      ;
      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    }, $Array_flatten$excl$54.$$arity = -1);
    
    Opal.def(self, '$hash', $Array_hash$55 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          result = ['A'],
          hash_id = self.$object_id(),
          item, i, key;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        // return early for recursive structures
        if (Opal.hash_ids[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (i = 0; i < self.length; i++) {
          item = self[i];
          result.push(item.$hash());
        }

        return result.join(',');
      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, $Array_hash$55.$$arity = 0);
    
    Opal.def(self, '$include?', $Array_include$ques$56 = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    }, $Array_include$ques$56.$$arity = 1);
    
    Opal.def(self, '$index', $Array_index$57 = function $$index(object) {
      var $iter = $Array_index$57.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_index$57.$$p = null;
      
      
      if ($iter) $Array_index$57.$$p = null;;
      ;
      
      var i, length, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = 0, length = self.length; i < length; i++) {
          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    ;
    }, $Array_index$57.$$arity = -1);
    
    Opal.def(self, '$insert', $Array_insert$58 = function $$insert(index, $a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      objects = $post_args;;
      
      index = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($$($nesting, 'IndexError'), "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    }, $Array_insert$58.$$arity = -2);
    
    Opal.def(self, '$inspect', $Array_inspect$59 = function $$inspect() {
      var self = this;

      
      var result = [],
          id     = self.$__id__();

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self['$[]'](i);

        if ((item).$__id__() === id) {
          result.push('[...]');
        }
        else {
          result.push((item).$inspect());
        }
      }

      return '[' + result.join(', ') + ']';
    
    }, $Array_inspect$59.$$arity = 0);
    
    Opal.def(self, '$join', $Array_join$60 = function $$join(sep) {
      var self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      
      
      if (sep == null) {
        sep = nil;
      };
      if ($truthy(self.length === 0)) {
        return ""};
      if ($truthy(sep === nil)) {
        sep = $gvars[","]};
      
      var result = [];
      var i, length, item, tmp;

      for (i = 0, length = self.length; i < length; i++) {
        item = self[i];

        if ($$($nesting, 'Opal')['$respond_to?'](item, "to_str")) {
          tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($$($nesting, 'Opal')['$respond_to?'](item, "to_ary")) {
          tmp = (item).$to_ary();

          if (tmp === self) {
            self.$raise($$($nesting, 'ArgumentError'));
          }

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($$($nesting, 'Opal')['$respond_to?'](item, "to_s")) {
          tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($$($nesting, 'NoMethodError').$new("" + (Opal.inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s", "to_str"));
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($$($nesting, 'Opal')['$coerce_to!'](sep, $$($nesting, 'String'), "to_str").$to_s());
      }
    ;
    }, $Array_join$60.$$arity = -1);
    
    Opal.def(self, '$keep_if', $Array_keep_if$61 = function $$keep_if() {
      var $iter = $Array_keep_if$61.$$p, block = $iter || nil, $$62, self = this;

      if ($iter) $Array_keep_if$61.$$p = null;
      
      
      if ($iter) $Array_keep_if$61.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["keep_if"], ($$62 = function(){var self = $$62.$$s || this;

        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    ;
      return self;
    }, $Array_keep_if$61.$$arity = 0);
    
    Opal.def(self, '$last', $Array_last$63 = function $$last(count) {
      var self = this;

      
      ;
      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");

      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    ;
    }, $Array_last$63.$$arity = -1);
    
    Opal.def(self, '$length', $Array_length$64 = function $$length() {
      var self = this;

      return self.length;
    }, $Array_length$64.$$arity = 0);
    Opal.alias(self, "map", "collect");
    Opal.alias(self, "map!", "collect!");
    
    Opal.def(self, '$max', $Array_max$65 = function $$max(n) {
      var $iter = $Array_max$65.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_max$65.$$p = null;
      
      
      if ($iter) $Array_max$65.$$p = null;;
      ;
      return $send(self.$each(), 'max', [n], block.$to_proc());
    }, $Array_max$65.$$arity = -1);
    
    Opal.def(self, '$min', $Array_min$66 = function $$min() {
      var $iter = $Array_min$66.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_min$66.$$p = null;
      
      
      if ($iter) $Array_min$66.$$p = null;;
      return $send(self.$each(), 'min', [], block.$to_proc());
    }, $Array_min$66.$$arity = 0);
    
    // Returns the product of from, from-1, ..., from - how_many + 1.
    function descending_factorial(from, how_many) {
      var count = how_many >= 0 ? 1 : 0;
      while (how_many) {
        count *= from;
        from--;
        how_many--;
      }
      return count;
    }
  ;
    
    Opal.def(self, '$permutation', $Array_permutation$67 = function $$permutation(num) {
      var $iter = $Array_permutation$67.$$p, block = $iter || nil, $$68, self = this, perm = nil, used = nil;

      if ($iter) $Array_permutation$67.$$p = null;
      
      
      if ($iter) $Array_permutation$67.$$p = null;;
      ;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["permutation", num], ($$68 = function(){var self = $$68.$$s || this;

        return descending_factorial(self.length, num === undefined ? self.length : num);}, $$68.$$s = self, $$68.$$arity = 0, $$68))
      };
      
      var permute, offensive, output;

      if (num === undefined) {
        num = self.length;
      }
      else {
        num = $$($nesting, 'Opal').$coerce_to(num, $$($nesting, 'Integer'), "to_int")
      }

      if (num < 0 || self.length < num) {
        // no permutations, yield nothing
      }
      else if (num === 0) {
        // exactly one permutation: the zero-length array
        Opal.yield1(block, [])
      }
      else if (num === 1) {
        // this is a special, easy case
        for (var i = 0; i < self.length; i++) {
          Opal.yield1(block, [self[i]])
        }
      }
      else {
        // this is the general case
        (perm = $$($nesting, 'Array').$new(num));
        (used = $$($nesting, 'Array').$new(self.length, false));

        permute = function(num, perm, index, used, blk) {
          self = this;
          for(var i = 0; i < self.length; i++){
            if(used['$[]'](i)['$!']()) {
              perm[index] = i;
              if(index < num - 1) {
                used[i] = true;
                permute.call(self, num, perm, index + 1, used, blk);
                used[i] = false;
              }
              else {
                output = [];
                for (var j = 0; j < perm.length; j++) {
                  output.push(self[perm[j]]);
                }
                Opal.yield1(blk, output);
              }
            }
          }
        }

        if ((block !== nil)) {
          // offensive (both definitions) copy.
          offensive = self.slice();
          permute.call(offensive, num, perm, 0, used, block);
        }
        else {
          permute.call(self, num, perm, 0, used, block);
        }
      }
    ;
      return self;
    }, $Array_permutation$67.$$arity = -1);
    
    Opal.def(self, '$repeated_permutation', $Array_repeated_permutation$69 = function $$repeated_permutation(n) {
      var $$70, $iter = $Array_repeated_permutation$69.$$p, $yield = $iter || nil, self = this, num = nil;

      if ($iter) $Array_repeated_permutation$69.$$p = null;
      
      num = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["repeated_permutation", num], ($$70 = function(){var self = $$70.$$s || this;

        if ($truthy($rb_ge(num, 0))) {
            return self.$size()['$**'](num)
          } else {
            return 0
          }}, $$70.$$s = self, $$70.$$arity = 0, $$70))
      };
      
      function iterate(max, buffer, self) {
        if (buffer.length == max) {
          var copy = buffer.slice();
          Opal.yield1($yield, copy)
          return;
        }
        for (var i = 0; i < self.length; i++) {
          buffer.push(self[i]);
          iterate(max, buffer, self);
          buffer.pop();
        }
      }

      iterate(num, [], self.slice());
    ;
      return self;
    }, $Array_repeated_permutation$69.$$arity = 1);
    
    Opal.def(self, '$pop', $Array_pop$71 = function $$pop(count) {
      var self = this;

      
      ;
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.pop();};
      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      if ($truthy(count > self.length)) {
        return self.splice(0, self.length);
      } else {
        return self.splice(self.length - count, self.length);
      };
    }, $Array_pop$71.$$arity = -1);
    
    Opal.def(self, '$product', $Array_product$72 = function $$product($a) {
      var $iter = $Array_product$72.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Array_product$72.$$p = null;
      
      
      if ($iter) $Array_product$72.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = (block !== nil) ? null : [],
          n = args.length + 1,
          counters = new Array(n),
          lengths  = new Array(n),
          arrays   = new Array(n),
          i, m, subarray, len, resultlen = 1;

      arrays[0] = self;
      for (i = 1; i < n; i++) {
        arrays[i] = $$($nesting, 'Opal').$coerce_to(args[i - 1], $$($nesting, 'Array'), "to_ary");
      }

      for (i = 0; i < n; i++) {
        len = arrays[i].length;
        if (len === 0) {
          return result || self;
        }
        resultlen *= len;
        if (resultlen > 2147483647) {
          self.$raise($$($nesting, 'RangeError'), "too big to product")
        }
        lengths[i] = len;
        counters[i] = 0;
      }

      outer_loop: for (;;) {
        subarray = [];
        for (i = 0; i < n; i++) {
          subarray.push(arrays[i][counters[i]]);
        }
        if (result) {
          result.push(subarray);
        } else {
          Opal.yield1(block, subarray)
        }
        m = n - 1;
        counters[m]++;
        while (counters[m] === lengths[m]) {
          counters[m] = 0;
          if (--m < 0) break outer_loop;
          counters[m]++;
        }
      }

      return result || self;
    ;
    }, $Array_product$72.$$arity = -1);
    
    Opal.def(self, '$push', $Array_push$73 = function $$push($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    ;
      return self;
    }, $Array_push$73.$$arity = -1);
    Opal.alias(self, "append", "push");
    
    Opal.def(self, '$rassoc', $Array_rassoc$74 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    }, $Array_rassoc$74.$$arity = 1);
    
    Opal.def(self, '$reject', $Array_reject$75 = function $$reject() {
      var $iter = $Array_reject$75.$$p, block = $iter || nil, $$76, self = this;

      if ($iter) $Array_reject$75.$$p = null;
      
      
      if ($iter) $Array_reject$75.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject"], ($$76 = function(){var self = $$76.$$s || this;

        return self.$size()}, $$76.$$s = self, $$76.$$arity = 0, $$76))
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        value = block(self[i]);

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    ;
    }, $Array_reject$75.$$arity = 0);
    
    Opal.def(self, '$reject!', $Array_reject$excl$77 = function() {
      var $iter = $Array_reject$excl$77.$$p, block = $iter || nil, $$78, self = this, original = nil;

      if ($iter) $Array_reject$excl$77.$$p = null;
      
      
      if ($iter) $Array_reject$excl$77.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reject!"], ($$78 = function(){var self = $$78.$$s || this;

        return self.$size()}, $$78.$$s = self, $$78.$$arity = 0, $$78))
      };
      original = self.$length();
      $send(self, 'delete_if', [], block.$to_proc());
      if (self.$length()['$=='](original)) {
        return nil
      } else {
        return self
      };
    }, $Array_reject$excl$77.$$arity = 0);
    
    Opal.def(self, '$replace', $Array_replace$79 = function $$replace(other) {
      var self = this;

      
      other = (function() {if ($truthy($$($nesting, 'Array')['$==='](other))) {
        return other.$to_a()
      } else {
        return $$($nesting, 'Opal').$coerce_to(other, $$($nesting, 'Array'), "to_ary").$to_a()
      }; return nil; })();
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    ;
      return self;
    }, $Array_replace$79.$$arity = 1);
    
    Opal.def(self, '$reverse', $Array_reverse$80 = function $$reverse() {
      var self = this;

      return self.slice(0).reverse();
    }, $Array_reverse$80.$$arity = 0);
    
    Opal.def(self, '$reverse!', $Array_reverse$excl$81 = function() {
      var self = this;

      return self.reverse();
    }, $Array_reverse$excl$81.$$arity = 0);
    
    Opal.def(self, '$reverse_each', $Array_reverse_each$82 = function $$reverse_each() {
      var $iter = $Array_reverse_each$82.$$p, block = $iter || nil, $$83, self = this;

      if ($iter) $Array_reverse_each$82.$$p = null;
      
      
      if ($iter) $Array_reverse_each$82.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["reverse_each"], ($$83 = function(){var self = $$83.$$s || this;

        return self.$size()}, $$83.$$s = self, $$83.$$arity = 0, $$83))
      };
      $send(self.$reverse(), 'each', [], block.$to_proc());
      return self;
    }, $Array_reverse_each$82.$$arity = 0);
    
    Opal.def(self, '$rindex', $Array_rindex$84 = function $$rindex(object) {
      var $iter = $Array_rindex$84.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_rindex$84.$$p = null;
      
      
      if ($iter) $Array_rindex$84.$$p = null;;
      ;
      
      var i, value;

      if (object != null && block !== nil) {
        self.$warn("warning: given block not used")
      }

      if (object != null) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (i = self.length - 1; i >= 0; i--) {
          if (i >= self.length) {
            break;
          }

          value = block(self[i]);

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    ;
    }, $Array_rindex$84.$$arity = -1);
    
    Opal.def(self, '$rotate', $Array_rotate$85 = function $$rotate(n) {
      var self = this;

      
      
      if (n == null) {
        n = 1;
      };
      n = $$($nesting, 'Opal').$coerce_to(n, $$($nesting, 'Integer'), "to_int");
      
      var ary, idx, firstPart, lastPart;

      if (self.length === 1) {
        return self.slice();
      }
      if (self.length === 0) {
        return [];
      }

      ary = self.slice();
      idx = n % ary.length;

      firstPart = ary.slice(idx);
      lastPart = ary.slice(0, idx);
      return firstPart.concat(lastPart);
    ;
    }, $Array_rotate$85.$$arity = -1);
    
    Opal.def(self, '$rotate!', $Array_rotate$excl$86 = function(cnt) {
      var self = this, ary = nil;

      
      
      if (cnt == null) {
        cnt = 1;
      };
      
      if (self.length === 0 || self.length === 1) {
        return self;
      }
    ;
      cnt = $$($nesting, 'Opal').$coerce_to(cnt, $$($nesting, 'Integer'), "to_int");
      ary = self.$rotate(cnt);
      return self.$replace(ary);
    }, $Array_rotate$excl$86.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SampleRandom');

      var $nesting = [self].concat($parent_nesting), $SampleRandom_initialize$87, $SampleRandom_rand$88;

      self.$$prototype.rng = nil;
      
      
      Opal.def(self, '$initialize', $SampleRandom_initialize$87 = function $$initialize(rng) {
        var self = this;

        return (self.rng = rng)
      }, $SampleRandom_initialize$87.$$arity = 1);
      return (Opal.def(self, '$rand', $SampleRandom_rand$88 = function $$rand(size) {
        var self = this, random = nil;

        
        random = $$($nesting, 'Opal').$coerce_to(self.rng.$rand(size), $$($nesting, 'Integer'), "to_int");
        if ($truthy(random < 0)) {
          self.$raise($$($nesting, 'RangeError'), "random value must be >= 0")};
        if ($truthy(random < size)) {
        } else {
          self.$raise($$($nesting, 'RangeError'), "random value must be less than Array size")
        };
        return random;
      }, $SampleRandom_rand$88.$$arity = 1), nil) && 'rand';
    })($nesting[0], null, $nesting);
    
    Opal.def(self, '$sample', $Array_sample$89 = function $$sample(count, options) {
      var $a, self = this, o = nil, rng = nil;

      
      ;
      ;
      if ($truthy(count === undefined)) {
        return self.$at($$($nesting, 'Kernel').$rand(self.length))};
      if ($truthy(options === undefined)) {
        if ($truthy((o = $$($nesting, 'Opal')['$coerce_to?'](count, $$($nesting, 'Hash'), "to_hash")))) {
          
          options = o;
          count = nil;
        } else {
          
          options = nil;
          count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
        }
      } else {
        
        count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
        options = $$($nesting, 'Opal').$coerce_to(options, $$($nesting, 'Hash'), "to_hash");
      };
      if ($truthy(($truthy($a = count) ? count < 0 : $a))) {
        self.$raise($$($nesting, 'ArgumentError'), "count must be greater than 0")};
      if ($truthy(options)) {
        rng = options['$[]']("random")};
      rng = (function() {if ($truthy(($truthy($a = rng) ? rng['$respond_to?']("rand") : $a))) {
        return $$($nesting, 'SampleRandom').$new(rng)
      } else {
        return $$($nesting, 'Kernel')
      }; return nil; })();
      if ($truthy(count)) {
      } else {
        return self[rng.$rand(self.length)]
      };
      

      var abandon, spin, result, i, j, k, targetIndex, oldValue;

      if (count > self.length) {
        count = self.length;
      }

      switch (count) {
        case 0:
          return [];
          break;
        case 1:
          return [self[rng.$rand(self.length)]];
          break;
        case 2:
          i = rng.$rand(self.length);
          j = rng.$rand(self.length);
          if (i === j) {
            j = i === 0 ? i + 1 : i - 1;
          }
          return [self[i], self[j]];
          break;
        default:
          if (self.length / count > 3) {
            abandon = false;
            spin = 0;

            result = $$($nesting, 'Array').$new(count);
            i = 1;

            result[0] = rng.$rand(self.length);
            while (i < count) {
              k = rng.$rand(self.length);
              j = 0;

              while (j < i) {
                while (k === result[j]) {
                  spin++;
                  if (spin > 100) {
                    abandon = true;
                    break;
                  }
                  k = rng.$rand(self.length);
                }
                if (abandon) { break; }

                j++;
              }

              if (abandon) { break; }

              result[i] = k;

              i++;
            }

            if (!abandon) {
              i = 0;
              while (i < count) {
                result[i] = self[result[i]];
                i++;
              }

              return result;
            }
          }

          result = self.slice();

          for (var c = 0; c < count; c++) {
            targetIndex = rng.$rand(self.length);
            oldValue = result[c];
            result[c] = result[targetIndex];
            result[targetIndex] = oldValue;
          }

          return count === self.length ? result : (result)['$[]'](0, count);
      }
    ;
    }, $Array_sample$89.$$arity = -1);
    
    Opal.def(self, '$select', $Array_select$90 = function $$select() {
      var $iter = $Array_select$90.$$p, block = $iter || nil, $$91, self = this;

      if ($iter) $Array_select$90.$$p = null;
      
      
      if ($iter) $Array_select$90.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["select"], ($$91 = function(){var self = $$91.$$s || this;

        return self.$size()}, $$91.$$s = self, $$91.$$arity = 0, $$91))
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = Opal.yield1(block, item);

        if (Opal.truthy(value)) {
          result.push(item);
        }
      }

      return result;
    ;
    }, $Array_select$90.$$arity = 0);
    
    Opal.def(self, '$select!', $Array_select$excl$92 = function() {
      var $iter = $Array_select$excl$92.$$p, block = $iter || nil, $$93, self = this;

      if ($iter) $Array_select$excl$92.$$p = null;
      
      
      if ($iter) $Array_select$excl$92.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["select!"], ($$93 = function(){var self = $$93.$$s || this;

        return self.$size()}, $$93.$$s = self, $$93.$$arity = 0, $$93))
      };
      
      var original = self.length;
      $send(self, 'keep_if', [], block.$to_proc());
      return self.length === original ? nil : self;
    ;
    }, $Array_select$excl$92.$$arity = 0);
    
    Opal.def(self, '$shift', $Array_shift$94 = function $$shift(count) {
      var self = this;

      
      ;
      if ($truthy(count === undefined)) {
        
        if ($truthy(self.length === 0)) {
          return nil};
        return self.shift();};
      count = $$($nesting, 'Opal').$coerce_to(count, $$($nesting, 'Integer'), "to_int");
      if ($truthy(count < 0)) {
        self.$raise($$($nesting, 'ArgumentError'), "negative array size")};
      if ($truthy(self.length === 0)) {
        return []};
      return self.splice(0, count);;
    }, $Array_shift$94.$$arity = -1);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$shuffle', $Array_shuffle$95 = function $$shuffle(rng) {
      var self = this;

      
      ;
      return self.$dup().$to_a()['$shuffle!'](rng);
    }, $Array_shuffle$95.$$arity = -1);
    
    Opal.def(self, '$shuffle!', $Array_shuffle$excl$96 = function(rng) {
      var self = this;

      
      ;
      
      var randgen, i = self.length, j, tmp;

      if (rng !== undefined) {
        rng = $$($nesting, 'Opal')['$coerce_to?'](rng, $$($nesting, 'Hash'), "to_hash");

        if (rng !== nil) {
          rng = rng['$[]']("random");

          if (rng !== nil && rng['$respond_to?']("rand")) {
            randgen = rng;
          }
        }
      }

      while (i) {
        if (randgen) {
          j = randgen.$rand(i).$to_int();

          if (j < 0) {
            self.$raise($$($nesting, 'RangeError'), "" + "random number too small " + (j))
          }

          if (j >= i) {
            self.$raise($$($nesting, 'RangeError'), "" + "random number too big " + (j))
          }
        }
        else {
          j = self.$rand(i);
        }

        tmp = self[--i];
        self[i] = self[j];
        self[j] = tmp;
      }

      return self;
    ;
    }, $Array_shuffle$excl$96.$$arity = -1);
    Opal.alias(self, "slice", "[]");
    
    Opal.def(self, '$slice!', $Array_slice$excl$97 = function(index, length) {
      var self = this, result = nil, range = nil, range_start = nil, range_end = nil, start = nil;

      
      ;
      result = nil;
      if ($truthy(length === undefined)) {
        if ($truthy($$($nesting, 'Range')['$==='](index))) {
          
          range = index;
          result = self['$[]'](range);
          range_start = $$($nesting, 'Opal').$coerce_to(range.$begin(), $$($nesting, 'Integer'), "to_int");
          range_end = $$($nesting, 'Opal').$coerce_to(range.$end(), $$($nesting, 'Integer'), "to_int");
          
          if (range_start < 0) {
            range_start += self.length;
          }

          if (range_end < 0) {
            range_end += self.length;
          } else if (range_end >= self.length) {
            range_end = self.length - 1;
            if (range.excl) {
              range_end += 1;
            }
          }

          var range_length = range_end - range_start;
          if (range.excl) {
            range_end -= 1;
          } else {
            range_length += 1;
          }

          if (range_start < self.length && range_start >= 0 && range_end < self.length && range_end >= 0 && range_length > 0) {
            self.splice(range_start, range_length);
          }
        ;
        } else {
          
          start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start += self.length;
          }

          if (start < 0 || start >= self.length) {
            return nil;
          }

          result = self[start];

          if (start === 0) {
            self.shift();
          } else {
            self.splice(start, 1);
          }
        ;
        }
      } else {
        
        start = $$($nesting, 'Opal').$coerce_to(index, $$($nesting, 'Integer'), "to_int");
        length = $$($nesting, 'Opal').$coerce_to(length, $$($nesting, 'Integer'), "to_int");
        
        if (length < 0) {
          return nil;
        }

        var end = start + length;

        result = self['$[]'](start, length);

        if (start < 0) {
          start += self.length;
        }

        if (start + length > self.length) {
          length = self.length - start;
        }

        if (start < self.length && start >= 0) {
          self.splice(start, length);
        }
      ;
      };
      return result;
    }, $Array_slice$excl$97.$$arity = -2);
    
    Opal.def(self, '$sort', $Array_sort$98 = function $$sort() {
      var $iter = $Array_sort$98.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_sort$98.$$p = null;
      
      
      if ($iter) $Array_sort$98.$$p = null;;
      if ($truthy(self.length > 1)) {
      } else {
        return self
      };
      
      if (block === nil) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      return self.slice().sort(function(x, y) {
        var ret = block(x, y);

        if (ret === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
        }

        return $rb_gt(ret, 0) ? 1 : ($rb_lt(ret, 0) ? -1 : 0);
      });
    ;
    }, $Array_sort$98.$$arity = 0);
    
    Opal.def(self, '$sort!', $Array_sort$excl$99 = function() {
      var $iter = $Array_sort$excl$99.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_sort$excl$99.$$p = null;
      
      
      if ($iter) $Array_sort$excl$99.$$p = null;;
      
      var result;

      if ((block !== nil)) {
        result = $send((self.slice()), 'sort', [], block.$to_proc());
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    }, $Array_sort$excl$99.$$arity = 0);
    
    Opal.def(self, '$sort_by!', $Array_sort_by$excl$100 = function() {
      var $iter = $Array_sort_by$excl$100.$$p, block = $iter || nil, $$101, self = this;

      if ($iter) $Array_sort_by$excl$100.$$p = null;
      
      
      if ($iter) $Array_sort_by$excl$100.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["sort_by!"], ($$101 = function(){var self = $$101.$$s || this;

        return self.$size()}, $$101.$$s = self, $$101.$$arity = 0, $$101))
      };
      return self.$replace($send(self, 'sort_by', [], block.$to_proc()));
    }, $Array_sort_by$excl$100.$$arity = 0);
    
    Opal.def(self, '$take', $Array_take$102 = function $$take(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($$($nesting, 'ArgumentError'));
      }

      return self.slice(0, count);
    
    }, $Array_take$102.$$arity = 1);
    
    Opal.def(self, '$take_while', $Array_take_while$103 = function $$take_while() {
      var $iter = $Array_take_while$103.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_take_while$103.$$p = null;
      
      
      if ($iter) $Array_take_while$103.$$p = null;;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        value = block(item);

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    ;
    }, $Array_take_while$103.$$arity = 0);
    
    Opal.def(self, '$to_a', $Array_to_a$104 = function $$to_a() {
      var self = this;

      return self
    }, $Array_to_a$104.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    
    Opal.def(self, '$to_h', $Array_to_h$105 = function $$to_h() {
      var self = this;

      
      var i, len = self.length, ary, key, val, hash = $hash2([], {});

      for (i = 0; i < len; i++) {
        ary = $$($nesting, 'Opal')['$coerce_to?'](self[i], $$($nesting, 'Array'), "to_ary");
        if (!ary.$$is_array) {
          self.$raise($$($nesting, 'TypeError'), "" + "wrong element type " + ((ary).$class()) + " at " + (i) + " (expected array)")
        }
        if (ary.length !== 2) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong array length at " + (i) + " (expected 2, was " + ((ary).$length()) + ")")
        }
        key = ary[0];
        val = ary[1];
        Opal.hash_put(hash, key, val);
      }

      return hash;
    
    }, $Array_to_h$105.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$transpose', $Array_transpose$106 = function $$transpose() {
      var $$107, self = this, result = nil, max = nil;

      
      if ($truthy(self['$empty?']())) {
        return []};
      result = [];
      max = nil;
      $send(self, 'each', [], ($$107 = function(row){var self = $$107.$$s || this, $a, $$108;

      
        
        if (row == null) {
          row = nil;
        };
        row = (function() {if ($truthy($$($nesting, 'Array')['$==='](row))) {
          return row.$to_a()
        } else {
          return $$($nesting, 'Opal').$coerce_to(row, $$($nesting, 'Array'), "to_ary").$to_a()
        }; return nil; })();
        max = ($truthy($a = max) ? $a : row.length);
        if ($truthy((row.length)['$!='](max))) {
          self.$raise($$($nesting, 'IndexError'), "" + "element size differs (" + (row.length) + " should be " + (max) + ")")};
        return $send((row.length), 'times', [], ($$108 = function(i){var self = $$108.$$s || this, $b, entry = nil, $writer = nil;

        
          
          if (i == null) {
            i = nil;
          };
          entry = ($truthy($b = result['$[]'](i)) ? $b : (($writer = [i, []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          return entry['$<<'](row.$at(i));}, $$108.$$s = self, $$108.$$arity = 1, $$108));}, $$107.$$s = self, $$107.$$arity = 1, $$107));
      return result;
    }, $Array_transpose$106.$$arity = 0);
    
    Opal.def(self, '$uniq', $Array_uniq$109 = function $$uniq() {
      var $iter = $Array_uniq$109.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_uniq$109.$$p = null;
      
      
      if ($iter) $Array_uniq$109.$$p = null;;
      
      var hash = $hash2([], {}), i, length, item, key;

      if (block === nil) {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          if (Opal.hash_get(hash, item) === undefined) {
            Opal.hash_put(hash, item, item);
          }
        }
      }
      else {
        for (i = 0, length = self.length; i < length; i++) {
          item = self[i];
          key = Opal.yield1(block, item);
          if (Opal.hash_get(hash, key) === undefined) {
            Opal.hash_put(hash, key, item);
          }
        }
      }

      return toArraySubclass((hash).$values(), self.$class());
    ;
    }, $Array_uniq$109.$$arity = 0);
    
    Opal.def(self, '$uniq!', $Array_uniq$excl$110 = function() {
      var $iter = $Array_uniq$excl$110.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_uniq$excl$110.$$p = null;
      
      
      if ($iter) $Array_uniq$excl$110.$$p = null;;
      
      var original_length = self.length, hash = $hash2([], {}), i, length, item, key;

      for (i = 0, length = original_length; i < length; i++) {
        item = self[i];
        key = (block === nil ? item : Opal.yield1(block, item));

        if (Opal.hash_get(hash, key) === undefined) {
          Opal.hash_put(hash, key, item);
          continue;
        }

        self.splice(i, 1);
        length--;
        i--;
      }

      return self.length === original_length ? nil : self;
    ;
    }, $Array_uniq$excl$110.$$arity = 0);
    
    Opal.def(self, '$unshift', $Array_unshift$111 = function $$unshift($a) {
      var $post_args, objects, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      objects = $post_args;;
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    ;
      return self;
    }, $Array_unshift$111.$$arity = -1);
    Opal.alias(self, "prepend", "unshift");
    
    Opal.def(self, '$values_at', $Array_values_at$112 = function $$values_at($a) {
      var $post_args, args, $$113, self = this, out = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      out = [];
      $send(args, 'each', [], ($$113 = function(elem){var self = $$113.$$s || this, $$114, finish = nil, start = nil, i = nil;

      
        
        if (elem == null) {
          elem = nil;
        };
        if ($truthy(elem['$is_a?']($$($nesting, 'Range')))) {
          
          finish = $$($nesting, 'Opal').$coerce_to(elem.$last(), $$($nesting, 'Integer'), "to_int");
          start = $$($nesting, 'Opal').$coerce_to(elem.$first(), $$($nesting, 'Integer'), "to_int");
          
          if (start < 0) {
            start = start + self.length;
            return nil;;
          }
        ;
          
          if (finish < 0) {
            finish = finish + self.length;
          }
          if (elem['$exclude_end?']()) {
            finish--;
          }
          if (finish < start) {
            return nil;;
          }
        ;
          return $send(start, 'upto', [finish], ($$114 = function(i){var self = $$114.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return out['$<<'](self.$at(i));}, $$114.$$s = self, $$114.$$arity = 1, $$114));
        } else {
          
          i = $$($nesting, 'Opal').$coerce_to(elem, $$($nesting, 'Integer'), "to_int");
          return out['$<<'](self.$at(i));
        };}, $$113.$$s = self, $$113.$$arity = 1, $$113));
      return out;
    }, $Array_values_at$112.$$arity = -1);
    
    Opal.def(self, '$zip', $Array_zip$115 = function $$zip($a) {
      var $iter = $Array_zip$115.$$p, block = $iter || nil, $post_args, others, $b, self = this;

      if ($iter) $Array_zip$115.$$p = null;
      
      
      if ($iter) $Array_zip$115.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      others = $post_args;;
      
      var result = [], size = self.length, part, o, i, j, jj;

      for (j = 0, jj = others.length; j < jj; j++) {
        o = others[j];
        if (o.$$is_array) {
          continue;
        }
        if (o.$$is_enumerator) {
          if (o.$size() === Infinity) {
            others[j] = o.$take(size);
          } else {
            others[j] = o.$to_a();
          }
          continue;
        }
        others[j] = ($truthy($b = $$($nesting, 'Opal')['$coerce_to?'](o, $$($nesting, 'Array'), "to_ary")) ? $b : $$($nesting, 'Opal')['$coerce_to!'](o, $$($nesting, 'Enumerator'), "each")).$to_a();
      }

      for (i = 0; i < size; i++) {
        part = [self[i]];

        for (j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    ;
    }, $Array_zip$115.$$arity = -1);
    Opal.defs(self, '$inherited', $Array_inherited$116 = function $$inherited(klass) {
      var self = this;

      
      klass.$$prototype.$to_a = function() {
        return this.slice(0, this.length);
      }
    
    }, $Array_inherited$116.$$arity = 1);
    
    Opal.def(self, '$instance_variables', $Array_instance_variables$117 = function $$instance_variables() {
      var $$118, $iter = $Array_instance_variables$117.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Array_instance_variables$117.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      return $send($send(self, Opal.find_super_dispatcher(self, 'instance_variables', $Array_instance_variables$117, false), $zuper, $iter), 'reject', [], ($$118 = function(ivar){var self = $$118.$$s || this, $a;

      
        
        if (ivar == null) {
          ivar = nil;
        };
        return ($truthy($a = /^@\d+$/.test(ivar)) ? $a : ivar['$==']("@length"));}, $$118.$$s = self, $$118.$$arity = 1, $$118))
    }, $Array_instance_variables$117.$$arity = 0);
    $$($nesting, 'Opal').$pristine(self.$singleton_class(), "allocate");
    $$($nesting, 'Opal').$pristine(self, "copy_instance_variables", "initialize_dup");
    return (Opal.def(self, '$pack', $Array_pack$119 = function $$pack($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return self.$raise("To use Array#pack, you must first require 'corelib/array/pack'.");
    }, $Array_pack$119.$$arity = -1), nil) && 'pack';
  })($nesting[0], Array, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/hash"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$require', '$include', '$coerce_to?', '$[]', '$merge!', '$allocate', '$raise', '$coerce_to!', '$each', '$fetch', '$>=', '$>', '$==', '$compare_by_identity', '$lambda?', '$abs', '$arity', '$enum_for', '$size', '$respond_to?', '$class', '$dig', '$new', '$inspect', '$map', '$to_proc', '$flatten', '$eql?', '$default', '$dup', '$default_proc', '$default_proc=', '$-', '$default=', '$proc']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_$$$1, $Hash_allocate$2, $Hash_try_convert$3, $Hash_initialize$4, $Hash_$eq_eq$5, $Hash_$gt_eq$6, $Hash_$gt$8, $Hash_$lt$9, $Hash_$lt_eq$10, $Hash_$$$11, $Hash_$$$eq$12, $Hash_assoc$13, $Hash_clear$14, $Hash_clone$15, $Hash_compact$16, $Hash_compact$excl$17, $Hash_compare_by_identity$18, $Hash_compare_by_identity$ques$19, $Hash_default$20, $Hash_default$eq$21, $Hash_default_proc$22, $Hash_default_proc$eq$23, $Hash_delete$24, $Hash_delete_if$25, $Hash_dig$27, $Hash_each$28, $Hash_each_key$30, $Hash_each_value$32, $Hash_empty$ques$34, $Hash_fetch$35, $Hash_fetch_values$36, $Hash_flatten$38, $Hash_has_key$ques$39, $Hash_has_value$ques$40, $Hash_hash$41, $Hash_index$42, $Hash_indexes$43, $Hash_inspect$44, $Hash_invert$45, $Hash_keep_if$46, $Hash_keys$48, $Hash_length$49, $Hash_merge$50, $Hash_merge$excl$51, $Hash_rassoc$52, $Hash_rehash$53, $Hash_reject$54, $Hash_reject$excl$56, $Hash_replace$58, $Hash_select$59, $Hash_select$excl$61, $Hash_shift$63, $Hash_slice$64, $Hash_to_a$65, $Hash_to_h$66, $Hash_to_hash$67, $Hash_to_proc$68, $Hash_transform_keys$70, $Hash_transform_keys$excl$72, $Hash_transform_values$74, $Hash_transform_values$excl$76, $Hash_values$78;

    
    self.$include($$($nesting, 'Enumerable'));
    self.$$prototype.$$is_hash = true;
    Opal.defs(self, '$[]', $Hash_$$$1 = function($a) {
      var $post_args, argv, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      argv = $post_args;;
      
      var hash, argc = argv.length, i;

      if (argc === 1) {
        hash = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Hash'), "to_hash");
        if (hash !== nil) {
          return self.$allocate()['$merge!'](hash);
        }

        argv = $$($nesting, 'Opal')['$coerce_to?'](argv['$[]'](0), $$($nesting, 'Array'), "to_ary");
        if (argv === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "odd number of arguments for Hash")
        }

        argc = argv.length;
        hash = self.$allocate();

        for (i = 0; i < argc; i++) {
          if (!argv[i].$$is_array) continue;
          switch(argv[i].length) {
          case 1:
            hash.$store(argv[i][0], nil);
            break;
          case 2:
            hash.$store(argv[i][0], argv[i][1]);
            break;
          default:
            self.$raise($$($nesting, 'ArgumentError'), "" + "invalid number of elements (" + (argv[i].length) + " for 1..2)")
          }
        }

        return hash;
      }

      if (argc % 2 !== 0) {
        self.$raise($$($nesting, 'ArgumentError'), "odd number of arguments for Hash")
      }

      hash = self.$allocate();

      for (i = 0; i < argc; i += 2) {
        hash.$store(argv[i], argv[i + 1]);
      }

      return hash;
    ;
    }, $Hash_$$$1.$$arity = -1);
    Opal.defs(self, '$allocate', $Hash_allocate$2 = function $$allocate() {
      var self = this;

      
      var hash = new self.$$constructor();

      Opal.hash_init(hash);

      hash.$$none = nil;
      hash.$$proc = nil;

      return hash;
    
    }, $Hash_allocate$2.$$arity = 0);
    Opal.defs(self, '$try_convert', $Hash_try_convert$3 = function $$try_convert(obj) {
      var self = this;

      return $$($nesting, 'Opal')['$coerce_to?'](obj, $$($nesting, 'Hash'), "to_hash")
    }, $Hash_try_convert$3.$$arity = 1);
    
    Opal.def(self, '$initialize', $Hash_initialize$4 = function $$initialize(defaults) {
      var $iter = $Hash_initialize$4.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_initialize$4.$$p = null;
      
      
      if ($iter) $Hash_initialize$4.$$p = null;;
      ;
      
      if (defaults !== undefined && block !== nil) {
        self.$raise($$($nesting, 'ArgumentError'), "wrong number of arguments (1 for 0)")
      }
      self.$$none = (defaults === undefined ? nil : defaults);
      self.$$proc = block;

      return self;
    ;
    }, $Hash_initialize$4.$$arity = -1);
    
    Opal.def(self, '$==', $Hash_$eq_eq$5 = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.$$is_hash) {
        return false;
      }

      if (self.$$keys.length !== other.$$keys.length) {
        return false;
      }

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, other_value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
          other_value = other.$$smap[key];
        } else {
          value = key.value;
          other_value = Opal.hash_get(other, key.key);
        }

        if (other_value === undefined || !value['$eql?'](other_value)) {
          return false;
        }
      }

      return true;
    
    }, $Hash_$eq_eq$5.$$arity = 1);
    
    Opal.def(self, '$>=', $Hash_$gt_eq$6 = function(other) {
      var $$7, self = this, result = nil;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length < other.$$keys.length) {
        return false
      }
    ;
      result = true;
      $send(other, 'each', [], ($$7 = function(other_key, other_val){var self = $$7.$$s || this, val = nil;

      
        
        if (other_key == null) {
          other_key = nil;
        };
        
        if (other_val == null) {
          other_val = nil;
        };
        val = self.$fetch(other_key, null);
        
        if (val == null || val !== other_val) {
          result = false;
          return;
        }
      ;}, $$7.$$s = self, $$7.$$arity = 2, $$7));
      return result;
    }, $Hash_$gt_eq$6.$$arity = 1);
    
    Opal.def(self, '$>', $Hash_$gt$8 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      if (self.$$keys.length <= other.$$keys.length) {
        return false
      }
    ;
      return $rb_ge(self, other);
    }, $Hash_$gt$8.$$arity = 1);
    
    Opal.def(self, '$<', $Hash_$lt$9 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      return $rb_gt(other, self);
    }, $Hash_$lt$9.$$arity = 1);
    
    Opal.def(self, '$<=', $Hash_$lt_eq$10 = function(other) {
      var self = this;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      return $rb_ge(other, self);
    }, $Hash_$lt_eq$10.$$arity = 1);
    
    Opal.def(self, '$[]', $Hash_$$$11 = function(key) {
      var self = this;

      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      return self.$default(key);
    
    }, $Hash_$$$11.$$arity = 1);
    
    Opal.def(self, '$[]=', $Hash_$$$eq$12 = function(key, value) {
      var self = this;

      
      Opal.hash_put(self, key, value);
      return value;
    
    }, $Hash_$$$eq$12.$$arity = 2);
    
    Opal.def(self, '$assoc', $Hash_assoc$13 = function $$assoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          if ((key)['$=='](object)) {
            return [key, self.$$smap[key]];
          }
        } else {
          if ((key.key)['$=='](object)) {
            return [key.key, key.value];
          }
        }
      }

      return nil;
    
    }, $Hash_assoc$13.$$arity = 1);
    
    Opal.def(self, '$clear', $Hash_clear$14 = function $$clear() {
      var self = this;

      
      Opal.hash_init(self);
      return self;
    
    }, $Hash_clear$14.$$arity = 0);
    
    Opal.def(self, '$clone', $Hash_clone$15 = function $$clone() {
      var self = this;

      
      var hash = new self.$$class();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, $Hash_clone$15.$$arity = 0);
    
    Opal.def(self, '$compact', $Hash_compact$16 = function $$compact() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    
    }, $Hash_compact$16.$$arity = 0);
    
    Opal.def(self, '$compact!', $Hash_compact$excl$17 = function() {
      var self = this;

      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if (value === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    
    }, $Hash_compact$excl$17.$$arity = 0);
    
    Opal.def(self, '$compare_by_identity', $Hash_compare_by_identity$18 = function $$compare_by_identity() {
      var self = this;

      
      var i, ii, key, keys = self.$$keys, identity_hash;

      if (self.$$by_identity) return self;
      if (self.$$keys.length === 0) {
        self.$$by_identity = true
        return self;
      }

      identity_hash = $hash2([], {}).$compare_by_identity();
      for(i = 0, ii = keys.length; i < ii; i++) {
        key = keys[i];
        if (!key.$$is_string) key = key.key;
        Opal.hash_put(identity_hash, key, Opal.hash_get(self, key));
      }

      self.$$by_identity = true;
      self.$$map = identity_hash.$$map;
      self.$$smap = identity_hash.$$smap;
      return self;
    
    }, $Hash_compare_by_identity$18.$$arity = 0);
    
    Opal.def(self, '$compare_by_identity?', $Hash_compare_by_identity$ques$19 = function() {
      var self = this;

      return self.$$by_identity === true;
    }, $Hash_compare_by_identity$ques$19.$$arity = 0);
    
    Opal.def(self, '$default', $Hash_default$20 = function(key) {
      var self = this;

      
      ;
      
      if (key !== undefined && self.$$proc !== nil && self.$$proc !== undefined) {
        return self.$$proc.$call(self, key);
      }
      if (self.$$none === undefined) {
        return nil;
      }
      return self.$$none;
    ;
    }, $Hash_default$20.$$arity = -1);
    
    Opal.def(self, '$default=', $Hash_default$eq$21 = function(object) {
      var self = this;

      
      self.$$proc = nil;
      self.$$none = object;

      return object;
    
    }, $Hash_default$eq$21.$$arity = 1);
    
    Opal.def(self, '$default_proc', $Hash_default_proc$22 = function $$default_proc() {
      var self = this;

      
      if (self.$$proc !== undefined) {
        return self.$$proc;
      }
      return nil;
    
    }, $Hash_default_proc$22.$$arity = 0);
    
    Opal.def(self, '$default_proc=', $Hash_default_proc$eq$23 = function(default_proc) {
      var self = this;

      
      var proc = default_proc;

      if (proc !== nil) {
        proc = $$($nesting, 'Opal')['$coerce_to!'](proc, $$($nesting, 'Proc'), "to_proc");

        if ((proc)['$lambda?']() && (proc).$arity().$abs() !== 2) {
          self.$raise($$($nesting, 'TypeError'), "default_proc takes two arguments");
        }
      }

      self.$$none = nil;
      self.$$proc = proc;

      return default_proc;
    
    }, $Hash_default_proc$eq$23.$$arity = 1);
    
    Opal.def(self, '$delete', $Hash_delete$24 = function(key) {
      var $iter = $Hash_delete$24.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_delete$24.$$p = null;
      
      
      if ($iter) $Hash_delete$24.$$p = null;;
      
      var value = Opal.hash_delete(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return Opal.yield1(block, key);
      }

      return nil;
    ;
    }, $Hash_delete$24.$$arity = 1);
    
    Opal.def(self, '$delete_if', $Hash_delete_if$25 = function $$delete_if() {
      var $iter = $Hash_delete_if$25.$$p, block = $iter || nil, $$26, self = this;

      if ($iter) $Hash_delete_if$25.$$p = null;
      
      
      if ($iter) $Hash_delete_if$25.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["delete_if"], ($$26 = function(){var self = $$26.$$s || this;

        return self.$size()}, $$26.$$s = self, $$26.$$arity = 0, $$26))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, $Hash_delete_if$25.$$arity = 0);
    Opal.alias(self, "dup", "clone");
    
    Opal.def(self, '$dig', $Hash_dig$27 = function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      keys = $post_args;;
      item = self['$[]'](key);
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, $Hash_dig$27.$$arity = -2);
    
    Opal.def(self, '$each', $Hash_each$28 = function $$each() {
      var $iter = $Hash_each$28.$$p, block = $iter || nil, $$29, self = this;

      if ($iter) $Hash_each$28.$$p = null;
      
      
      if ($iter) $Hash_each$28.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each"], ($$29 = function(){var self = $$29.$$s || this;

        return self.$size()}, $$29.$$s = self, $$29.$$arity = 0, $$29))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.yield1(block, [key, value]);
      }

      return self;
    ;
    }, $Hash_each$28.$$arity = 0);
    
    Opal.def(self, '$each_key', $Hash_each_key$30 = function $$each_key() {
      var $iter = $Hash_each_key$30.$$p, block = $iter || nil, $$31, self = this;

      if ($iter) $Hash_each_key$30.$$p = null;
      
      
      if ($iter) $Hash_each_key$30.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each_key"], ($$31 = function(){var self = $$31.$$s || this;

        return self.$size()}, $$31.$$s = self, $$31.$$arity = 0, $$31))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? key : key.key);
      }

      return self;
    ;
    }, $Hash_each_key$30.$$arity = 0);
    Opal.alias(self, "each_pair", "each");
    
    Opal.def(self, '$each_value', $Hash_each_value$32 = function $$each_value() {
      var $iter = $Hash_each_value$32.$$p, block = $iter || nil, $$33, self = this;

      if ($iter) $Hash_each_value$32.$$p = null;
      
      
      if ($iter) $Hash_each_value$32.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["each_value"], ($$33 = function(){var self = $$33.$$s || this;

        return self.$size()}, $$33.$$s = self, $$33.$$arity = 0, $$33))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        block(key.$$is_string ? self.$$smap[key] : key.value);
      }

      return self;
    ;
    }, $Hash_each_value$32.$$arity = 0);
    
    Opal.def(self, '$empty?', $Hash_empty$ques$34 = function() {
      var self = this;

      return self.$$keys.length === 0;
    }, $Hash_empty$ques$34.$$arity = 0);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$fetch', $Hash_fetch$35 = function $$fetch(key, defaults) {
      var $iter = $Hash_fetch$35.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_fetch$35.$$p = null;
      
      
      if ($iter) $Hash_fetch$35.$$p = null;;
      ;
      
      var value = Opal.hash_get(self, key);

      if (value !== undefined) {
        return value;
      }

      if (block !== nil) {
        return block(key);
      }

      if (defaults !== undefined) {
        return defaults;
      }
    ;
      return self.$raise($$($nesting, 'KeyError').$new("" + "key not found: " + (key.$inspect()), $hash2(["key", "receiver"], {"key": key, "receiver": self})));
    }, $Hash_fetch$35.$$arity = -2);
    
    Opal.def(self, '$fetch_values', $Hash_fetch_values$36 = function $$fetch_values($a) {
      var $iter = $Hash_fetch_values$36.$$p, block = $iter || nil, $post_args, keys, $$37, self = this;

      if ($iter) $Hash_fetch_values$36.$$p = null;
      
      
      if ($iter) $Hash_fetch_values$36.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      keys = $post_args;;
      return $send(keys, 'map', [], ($$37 = function(key){var self = $$37.$$s || this;

      
        
        if (key == null) {
          key = nil;
        };
        return $send(self, 'fetch', [key], block.$to_proc());}, $$37.$$s = self, $$37.$$arity = 1, $$37));
    }, $Hash_fetch_values$36.$$arity = -1);
    
    Opal.def(self, '$flatten', $Hash_flatten$38 = function $$flatten(level) {
      var self = this;

      
      
      if (level == null) {
        level = 1;
      };
      level = $$($nesting, 'Opal')['$coerce_to!'](level, $$($nesting, 'Integer'), "to_int");
      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push(key);

        if (value.$$is_array) {
          if (level === 1) {
            result.push(value);
            continue;
          }

          result = result.concat((value).$flatten(level - 2));
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, $Hash_flatten$38.$$arity = -1);
    
    Opal.def(self, '$has_key?', $Hash_has_key$ques$39 = function(key) {
      var self = this;

      return Opal.hash_get(self, key) !== undefined;
    }, $Hash_has_key$ques$39.$$arity = 1);
    
    Opal.def(self, '$has_value?', $Hash_has_value$ques$40 = function(value) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (((key.$$is_string ? self.$$smap[key] : key.value))['$=='](value)) {
          return true;
        }
      }

      return false;
    
    }, $Hash_has_value$ques$40.$$arity = 1);
    
    Opal.def(self, '$hash', $Hash_hash$41 = function $$hash() {
      var self = this;

      
      var top = (Opal.hash_ids === undefined),
          hash_id = self.$object_id(),
          result = ['Hash'],
          key, item;

      try {
        if (top) {
          Opal.hash_ids = Object.create(null);
        }

        if (Opal[hash_id]) {
          return 'self';
        }

        for (key in Opal.hash_ids) {
          item = Opal.hash_ids[key];
          if (self['$eql?'](item)) {
            return 'self';
          }
        }

        Opal.hash_ids[hash_id] = self;

        for (var i = 0, keys = self.$$keys, length = keys.length; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            result.push([key, self.$$smap[key].$hash()]);
          } else {
            result.push([key.key_hash, key.value.$hash()]);
          }
        }

        return result.sort().join();

      } finally {
        if (top) {
          Opal.hash_ids = undefined;
        }
      }
    
    }, $Hash_hash$41.$$arity = 0);
    Opal.alias(self, "include?", "has_key?");
    
    Opal.def(self, '$index', $Hash_index$42 = function $$index(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    }, $Hash_index$42.$$arity = 1);
    
    Opal.def(self, '$indexes', $Hash_indexes$43 = function $$indexes($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      var result = [];

      for (var i = 0, length = args.length, key, value; i < length; i++) {
        key = args[i];
        value = Opal.hash_get(self, key);

        if (value === undefined) {
          result.push(self.$default());
          continue;
        }

        result.push(value);
      }

      return result;
    ;
    }, $Hash_indexes$43.$$arity = -1);
    Opal.alias(self, "indices", "indexes");
    var inspect_ids;
    
    Opal.def(self, '$inspect', $Hash_inspect$44 = function $$inspect() {
      var self = this;

      
      var top = (inspect_ids === undefined),
          hash_id = self.$object_id(),
          result = [];

      try {
        if (top) {
          inspect_ids = {};
        }

        if (inspect_ids.hasOwnProperty(hash_id)) {
          return '{...}';
        }

        inspect_ids[hash_id] = true;

        for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
          key = keys[i];

          if (key.$$is_string) {
            value = self.$$smap[key];
          } else {
            value = key.value;
            key = key.key;
          }

          result.push(key.$inspect() + '=>' + value.$inspect());
        }

        return '{' + result.join(', ') + '}';

      } finally {
        if (top) {
          inspect_ids = undefined;
        }
      }
    
    }, $Hash_inspect$44.$$arity = 0);
    
    Opal.def(self, '$invert', $Hash_invert$45 = function $$invert() {
      var self = this;

      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        Opal.hash_put(hash, value, key);
      }

      return hash;
    
    }, $Hash_invert$45.$$arity = 0);
    
    Opal.def(self, '$keep_if', $Hash_keep_if$46 = function $$keep_if() {
      var $iter = $Hash_keep_if$46.$$p, block = $iter || nil, $$47, self = this;

      if ($iter) $Hash_keep_if$46.$$p = null;
      
      
      if ($iter) $Hash_keep_if$46.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["keep_if"], ($$47 = function(){var self = $$47.$$s || this;

        return self.$size()}, $$47.$$s = self, $$47.$$arity = 0, $$47))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
        }
      }

      return self;
    ;
    }, $Hash_keep_if$46.$$arity = 0);
    Opal.alias(self, "key", "index");
    Opal.alias(self, "key?", "has_key?");
    
    Opal.def(self, '$keys', $Hash_keys$48 = function $$keys() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(key);
        } else {
          result.push(key.key);
        }
      }

      return result;
    
    }, $Hash_keys$48.$$arity = 0);
    
    Opal.def(self, '$length', $Hash_length$49 = function $$length() {
      var self = this;

      return self.$$keys.length;
    }, $Hash_length$49.$$arity = 0);
    Opal.alias(self, "member?", "has_key?");
    
    Opal.def(self, '$merge', $Hash_merge$50 = function $$merge(other) {
      var $iter = $Hash_merge$50.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_merge$50.$$p = null;
      
      
      if ($iter) $Hash_merge$50.$$p = null;;
      return $send(self.$dup(), 'merge!', [other], block.$to_proc());
    }, $Hash_merge$50.$$arity = 1);
    
    Opal.def(self, '$merge!', $Hash_merge$excl$51 = function(other) {
      var $iter = $Hash_merge$excl$51.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_merge$excl$51.$$p = null;
      
      
      if ($iter) $Hash_merge$excl$51.$$p = null;;
      
      if (!other.$$is_hash) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      }

      var i, other_keys = other.$$keys, length = other_keys.length, key, value, other_value;

      if (block === nil) {
        for (i = 0; i < length; i++) {
          key = other_keys[i];

          if (key.$$is_string) {
            other_value = other.$$smap[key];
          } else {
            other_value = key.value;
            key = key.key;
          }

          Opal.hash_put(self, key, other_value);
        }

        return self;
      }

      for (i = 0; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        value = Opal.hash_get(self, key);

        if (value === undefined) {
          Opal.hash_put(self, key, other_value);
          continue;
        }

        Opal.hash_put(self, key, block(key, value, other_value));
      }

      return self;
    ;
    }, $Hash_merge$excl$51.$$arity = 1);
    
    Opal.def(self, '$rassoc', $Hash_rassoc$52 = function $$rassoc(object) {
      var self = this;

      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        if ((value)['$=='](object)) {
          return [key, value];
        }
      }

      return nil;
    
    }, $Hash_rassoc$52.$$arity = 1);
    
    Opal.def(self, '$rehash', $Hash_rehash$53 = function $$rehash() {
      var self = this;

      
      Opal.hash_rehash(self);
      return self;
    
    }, $Hash_rehash$53.$$arity = 0);
    
    Opal.def(self, '$reject', $Hash_reject$54 = function $$reject() {
      var $iter = $Hash_reject$54.$$p, block = $iter || nil, $$55, self = this;

      if ($iter) $Hash_reject$54.$$p = null;
      
      
      if ($iter) $Hash_reject$54.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["reject"], ($$55 = function(){var self = $$55.$$s || this;

        return self.$size()}, $$55.$$s = self, $$55.$$arity = 0, $$55))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, $Hash_reject$54.$$arity = 0);
    
    Opal.def(self, '$reject!', $Hash_reject$excl$56 = function() {
      var $iter = $Hash_reject$excl$56.$$p, block = $iter || nil, $$57, self = this;

      if ($iter) $Hash_reject$excl$56.$$p = null;
      
      
      if ($iter) $Hash_reject$excl$56.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["reject!"], ($$57 = function(){var self = $$57.$$s || this;

        return self.$size()}, $$57.$$s = self, $$57.$$arity = 0, $$57))
      };
      
      var changes_were_made = false;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            changes_were_made = true;
            length--;
            i--;
          }
        }
      }

      return changes_were_made ? self : nil;
    ;
    }, $Hash_reject$excl$56.$$arity = 0);
    
    Opal.def(self, '$replace', $Hash_replace$58 = function $$replace(other) {
      var self = this, $writer = nil;

      
      other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Hash'), "to_hash");
      
      Opal.hash_init(self);

      for (var i = 0, other_keys = other.$$keys, length = other_keys.length, key, value, other_value; i < length; i++) {
        key = other_keys[i];

        if (key.$$is_string) {
          other_value = other.$$smap[key];
        } else {
          other_value = key.value;
          key = key.key;
        }

        Opal.hash_put(self, key, other_value);
      }
    ;
      if ($truthy(other.$default_proc())) {
        
        $writer = [other.$default_proc()];
        $send(self, 'default_proc=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      } else {
        
        $writer = [other.$default()];
        $send(self, 'default=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];
      };
      return self;
    }, $Hash_replace$58.$$arity = 1);
    
    Opal.def(self, '$select', $Hash_select$59 = function $$select() {
      var $iter = $Hash_select$59.$$p, block = $iter || nil, $$60, self = this;

      if ($iter) $Hash_select$59.$$p = null;
      
      
      if ($iter) $Hash_select$59.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["select"], ($$60 = function(){var self = $$60.$$s || this;

        return self.$size()}, $$60.$$s = self, $$60.$$arity = 0, $$60))
      };
      
      var hash = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj !== false && obj !== nil) {
          Opal.hash_put(hash, key, value);
        }
      }

      return hash;
    ;
    }, $Hash_select$59.$$arity = 0);
    
    Opal.def(self, '$select!', $Hash_select$excl$61 = function() {
      var $iter = $Hash_select$excl$61.$$p, block = $iter || nil, $$62, self = this;

      if ($iter) $Hash_select$excl$61.$$p = null;
      
      
      if ($iter) $Hash_select$excl$61.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["select!"], ($$62 = function(){var self = $$62.$$s || this;

        return self.$size()}, $$62.$$s = self, $$62.$$arity = 0, $$62))
      };
      
      var result = nil;

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value, obj; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        obj = block(key, value);

        if (obj === false || obj === nil) {
          if (Opal.hash_delete(self, key) !== undefined) {
            length--;
            i--;
          }
          result = self;
        }
      }

      return result;
    ;
    }, $Hash_select$excl$61.$$arity = 0);
    
    Opal.def(self, '$shift', $Hash_shift$63 = function $$shift() {
      var self = this;

      
      var keys = self.$$keys,
          key;

      if (keys.length > 0) {
        key = keys[0];

        key = key.$$is_string ? key : key.key;

        return [key, Opal.hash_delete(self, key)];
      }

      return self.$default(nil);
    
    }, $Hash_shift$63.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$slice', $Hash_slice$64 = function $$slice($a) {
      var $post_args, keys, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      keys = $post_args;;
      
      var result = Opal.hash();

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], value = Opal.hash_get(self, key);

        if (value !== undefined) {
          Opal.hash_put(result, key, value);
        }
      }

      return result;
    ;
    }, $Hash_slice$64.$$arity = -1);
    Opal.alias(self, "store", "[]=");
    
    Opal.def(self, '$to_a', $Hash_to_a$65 = function $$to_a() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push([key, value]);
      }

      return result;
    
    }, $Hash_to_a$65.$$arity = 0);
    
    Opal.def(self, '$to_h', $Hash_to_h$66 = function $$to_h() {
      var self = this;

      
      if (self.$$class === Opal.Hash) {
        return self;
      }

      var hash = new Opal.Hash();

      Opal.hash_init(hash);
      Opal.hash_clone(self, hash);

      return hash;
    
    }, $Hash_to_h$66.$$arity = 0);
    
    Opal.def(self, '$to_hash', $Hash_to_hash$67 = function $$to_hash() {
      var self = this;

      return self
    }, $Hash_to_hash$67.$$arity = 0);
    
    Opal.def(self, '$to_proc', $Hash_to_proc$68 = function $$to_proc() {
      var $$69, self = this;

      return $send(self, 'proc', [], ($$69 = function(key){var self = $$69.$$s || this;

      
        ;
        
        if (key == null) {
          self.$raise($$($nesting, 'ArgumentError'), "no key given")
        }
      ;
        return self['$[]'](key);}, $$69.$$s = self, $$69.$$arity = -1, $$69))
    }, $Hash_to_proc$68.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$transform_keys', $Hash_transform_keys$70 = function $$transform_keys() {
      var $iter = $Hash_transform_keys$70.$$p, block = $iter || nil, $$71, self = this;

      if ($iter) $Hash_transform_keys$70.$$p = null;
      
      
      if ($iter) $Hash_transform_keys$70.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_keys"], ($$71 = function(){var self = $$71.$$s || this;

        return self.$size()}, $$71.$$s = self, $$71.$$arity = 0, $$71))
      };
      
      var result = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        key = Opal.yield1(block, key);

        Opal.hash_put(result, key, value);
      }

      return result;
    ;
    }, $Hash_transform_keys$70.$$arity = 0);
    
    Opal.def(self, '$transform_keys!', $Hash_transform_keys$excl$72 = function() {
      var $iter = $Hash_transform_keys$excl$72.$$p, block = $iter || nil, $$73, self = this;

      if ($iter) $Hash_transform_keys$excl$72.$$p = null;
      
      
      if ($iter) $Hash_transform_keys$excl$72.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_keys!"], ($$73 = function(){var self = $$73.$$s || this;

        return self.$size()}, $$73.$$s = self, $$73.$$arity = 0, $$73))
      };
      
      var keys = Opal.slice.call(self.$$keys),
          i, length = keys.length, key, value, new_key;

      for (i = 0; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        new_key = Opal.yield1(block, key);

        Opal.hash_delete(self, key);
        Opal.hash_put(self, new_key, value);
      }

      return self;
    ;
    }, $Hash_transform_keys$excl$72.$$arity = 0);
    
    Opal.def(self, '$transform_values', $Hash_transform_values$74 = function $$transform_values() {
      var $iter = $Hash_transform_values$74.$$p, block = $iter || nil, $$75, self = this;

      if ($iter) $Hash_transform_values$74.$$p = null;
      
      
      if ($iter) $Hash_transform_values$74.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_values"], ($$75 = function(){var self = $$75.$$s || this;

        return self.$size()}, $$75.$$s = self, $$75.$$arity = 0, $$75))
      };
      
      var result = Opal.hash();

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(result, key, value);
      }

      return result;
    ;
    }, $Hash_transform_values$74.$$arity = 0);
    
    Opal.def(self, '$transform_values!', $Hash_transform_values$excl$76 = function() {
      var $iter = $Hash_transform_values$excl$76.$$p, block = $iter || nil, $$77, self = this;

      if ($iter) $Hash_transform_values$excl$76.$$p = null;
      
      
      if ($iter) $Hash_transform_values$excl$76.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["transform_values!"], ($$77 = function(){var self = $$77.$$s || this;

        return self.$size()}, $$77.$$s = self, $$77.$$arity = 0, $$77))
      };
      
      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        value = Opal.yield1(block, value);

        Opal.hash_put(self, key, value);
      }

      return self;
    ;
    }, $Hash_transform_values$excl$76.$$arity = 0);
    Opal.alias(self, "update", "merge!");
    Opal.alias(self, "value?", "has_value?");
    Opal.alias(self, "values_at", "indexes");
    return (Opal.def(self, '$values', $Hash_values$78 = function $$values() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          result.push(self.$$smap[key]);
        } else {
          result.push(key.value);
        }
      }

      return result;
    
    }, $Hash_values$78.$$arity = 0), nil) && 'values';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/number"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$bridge', '$raise', '$name', '$class', '$Float', '$respond_to?', '$coerce_to!', '$__coerced__', '$===', '$!', '$>', '$**', '$new', '$<', '$to_f', '$==', '$nan?', '$infinite?', '$enum_for', '$+', '$-', '$gcd', '$lcm', '$%', '$/', '$frexp', '$to_i', '$ldexp', '$rationalize', '$*', '$<<', '$to_r', '$truncate', '$-@', '$size', '$<=', '$>=', '$<=>', '$compare', '$any?']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Number');

    var $nesting = [self].concat($parent_nesting), $Number_coerce$2, $Number___id__$3, $Number_$plus$4, $Number_$minus$5, $Number_$$6, $Number_$slash$7, $Number_$percent$8, $Number_$$9, $Number_$$10, $Number_$$11, $Number_$lt$12, $Number_$lt_eq$13, $Number_$gt$14, $Number_$gt_eq$15, $Number_$lt_eq_gt$16, $Number_$lt$lt$17, $Number_$gt$gt$18, $Number_$$$19, $Number_$plus$$20, $Number_$minus$$21, $Number_$$22, $Number_$$$23, $Number_$eq_eq_eq$24, $Number_$eq_eq$25, $Number_abs$26, $Number_abs2$27, $Number_allbits$ques$28, $Number_anybits$ques$29, $Number_angle$30, $Number_bit_length$31, $Number_ceil$32, $Number_chr$33, $Number_denominator$34, $Number_downto$35, $Number_equal$ques$37, $Number_even$ques$38, $Number_floor$39, $Number_gcd$40, $Number_gcdlcm$41, $Number_integer$ques$42, $Number_is_a$ques$43, $Number_instance_of$ques$44, $Number_lcm$45, $Number_next$46, $Number_nobits$ques$47, $Number_nonzero$ques$48, $Number_numerator$49, $Number_odd$ques$50, $Number_ord$51, $Number_pow$52, $Number_pred$53, $Number_quo$54, $Number_rationalize$55, $Number_remainder$56, $Number_round$57, $Number_step$58, $Number_times$60, $Number_to_f$62, $Number_to_i$63, $Number_to_r$64, $Number_to_s$65, $Number_truncate$66, $Number_digits$67, $Number_divmod$68, $Number_upto$69, $Number_zero$ques$71, $Number_size$72, $Number_nan$ques$73, $Number_finite$ques$74, $Number_infinite$ques$75, $Number_positive$ques$76, $Number_negative$ques$77;

    
    $$($nesting, 'Opal').$bridge(Number, self);
    Opal.defineProperty(self.$$prototype, '$$is_number', true);
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$1;

      
      
      Opal.def(self, '$allocate', $allocate$1 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$1.$$arity = 0);
      
      
      Opal.udef(self, '$' + "new");;
      return nil;;
    })(Opal.get_singleton_class(self), $nesting);
    
    Opal.def(self, '$coerce', $Number_coerce$2 = function $$coerce(other) {
      var self = this;

      
      if (other === nil) {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
      else if (other.$$is_string) {
        return [self.$Float(other), self];
      }
      else if (other['$respond_to?']("to_f")) {
        return [$$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Float'), "to_f"), self];
      }
      else if (other.$$is_number) {
        return [other, self];
      }
      else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (other.$class()) + " into Float");
      }
    
    }, $Number_coerce$2.$$arity = 1);
    
    Opal.def(self, '$__id__', $Number___id__$3 = function $$__id__() {
      var self = this;

      return (self * 2) + 1;
    }, $Number___id__$3.$$arity = 0);
    Opal.alias(self, "object_id", "__id__");
    
    Opal.def(self, '$+', $Number_$plus$4 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self + other;
      }
      else {
        return self.$__coerced__("+", other);
      }
    
    }, $Number_$plus$4.$$arity = 1);
    
    Opal.def(self, '$-', $Number_$minus$5 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self - other;
      }
      else {
        return self.$__coerced__("-", other);
      }
    
    }, $Number_$minus$5.$$arity = 1);
    
    Opal.def(self, '$*', $Number_$$6 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self * other;
      }
      else {
        return self.$__coerced__("*", other);
      }
    
    }, $Number_$$6.$$arity = 1);
    
    Opal.def(self, '$/', $Number_$slash$7 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self / other;
      }
      else {
        return self.$__coerced__("/", other);
      }
    
    }, $Number_$slash$7.$$arity = 1);
    Opal.alias(self, "fdiv", "/");
    
    Opal.def(self, '$%', $Number_$percent$8 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        if (other == -Infinity) {
          return other;
        }
        else if (other == 0) {
          self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0");
        }
        else if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$__coerced__("%", other);
      }
    
    }, $Number_$percent$8.$$arity = 1);
    
    Opal.def(self, '$&', $Number_$$9 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self & other;
      }
      else {
        return self.$__coerced__("&", other);
      }
    
    }, $Number_$$9.$$arity = 1);
    
    Opal.def(self, '$|', $Number_$$10 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self | other;
      }
      else {
        return self.$__coerced__("|", other);
      }
    
    }, $Number_$$10.$$arity = 1);
    
    Opal.def(self, '$^', $Number_$$11 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self ^ other;
      }
      else {
        return self.$__coerced__("^", other);
      }
    
    }, $Number_$$11.$$arity = 1);
    
    Opal.def(self, '$<', $Number_$lt$12 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self < other;
      }
      else {
        return self.$__coerced__("<", other);
      }
    
    }, $Number_$lt$12.$$arity = 1);
    
    Opal.def(self, '$<=', $Number_$lt_eq$13 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self <= other;
      }
      else {
        return self.$__coerced__("<=", other);
      }
    
    }, $Number_$lt_eq$13.$$arity = 1);
    
    Opal.def(self, '$>', $Number_$gt$14 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self > other;
      }
      else {
        return self.$__coerced__(">", other);
      }
    
    }, $Number_$gt$14.$$arity = 1);
    
    Opal.def(self, '$>=', $Number_$gt_eq$15 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self >= other;
      }
      else {
        return self.$__coerced__(">=", other);
      }
    
    }, $Number_$gt_eq$15.$$arity = 1);
    
    var spaceship_operator = function(self, other) {
      if (other.$$is_number) {
        if (isNaN(self) || isNaN(other)) {
          return nil;
        }

        if (self > other) {
          return 1;
        } else if (self < other) {
          return -1;
        } else {
          return 0;
        }
      }
      else {
        return self.$__coerced__("<=>", other);
      }
    }
  ;
    
    Opal.def(self, '$<=>', $Number_$lt_eq_gt$16 = function(other) {
      var self = this;

      try {
        return spaceship_operator(self, other);
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Number_$lt_eq_gt$16.$$arity = 1);
    
    Opal.def(self, '$<<', $Number_$lt$lt$17 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), "to_int");
      return count > 0 ? self << count : self >> -count;
    }, $Number_$lt$lt$17.$$arity = 1);
    
    Opal.def(self, '$>>', $Number_$gt$gt$18 = function(count) {
      var self = this;

      
      count = $$($nesting, 'Opal')['$coerce_to!'](count, $$($nesting, 'Integer'), "to_int");
      return count > 0 ? self >> count : self << -count;
    }, $Number_$gt$gt$18.$$arity = 1);
    
    Opal.def(self, '$[]', $Number_$$$19 = function(bit) {
      var self = this;

      
      bit = $$($nesting, 'Opal')['$coerce_to!'](bit, $$($nesting, 'Integer'), "to_int");
      
      if (bit < 0) {
        return 0;
      }
      if (bit >= 32) {
        return self < 0 ? 1 : 0;
      }
      return (self >> bit) & 1;
    ;
    }, $Number_$$$19.$$arity = 1);
    
    Opal.def(self, '$+@', $Number_$plus$$20 = function() {
      var self = this;

      return +self;
    }, $Number_$plus$$20.$$arity = 0);
    
    Opal.def(self, '$-@', $Number_$minus$$21 = function() {
      var self = this;

      return -self;
    }, $Number_$minus$$21.$$arity = 0);
    
    Opal.def(self, '$~', $Number_$$22 = function() {
      var self = this;

      return ~self;
    }, $Number_$$22.$$arity = 0);
    
    Opal.def(self, '$**', $Number_$$$23 = function(other) {
      var $a, $b, self = this;

      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
        if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](self)['$!']()) ? $a : $rb_gt(other, 0)))) {
          return Math.pow(self, other);
        } else {
          return $$($nesting, 'Rational').$new(self, 1)['$**'](other)
        }
      } else if ($truthy((($a = $rb_lt(self, 0)) ? ($truthy($b = $$($nesting, 'Float')['$==='](other)) ? $b : $$($nesting, 'Rational')['$==='](other)) : $rb_lt(self, 0)))) {
        return $$($nesting, 'Complex').$new(self, 0)['$**'](other.$to_f())
      } else if ($truthy(other.$$is_number != null)) {
        return Math.pow(self, other);
      } else {
        return self.$__coerced__("**", other)
      }
    }, $Number_$$$23.$$arity = 1);
    
    Opal.def(self, '$===', $Number_$eq_eq_eq$24 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, $Number_$eq_eq_eq$24.$$arity = 1);
    
    Opal.def(self, '$==', $Number_$eq_eq$25 = function(other) {
      var self = this;

      
      if (other.$$is_number) {
        return self.valueOf() === other.valueOf();
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    
    }, $Number_$eq_eq$25.$$arity = 1);
    
    Opal.def(self, '$abs', $Number_abs$26 = function $$abs() {
      var self = this;

      return Math.abs(self);
    }, $Number_abs$26.$$arity = 0);
    
    Opal.def(self, '$abs2', $Number_abs2$27 = function $$abs2() {
      var self = this;

      return Math.abs(self * self);
    }, $Number_abs2$27.$$arity = 0);
    
    Opal.def(self, '$allbits?', $Number_allbits$ques$28 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) == mask;;
    }, $Number_allbits$ques$28.$$arity = 1);
    
    Opal.def(self, '$anybits?', $Number_anybits$ques$29 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) !== 0;;
    }, $Number_anybits$ques$29.$$arity = 1);
    
    Opal.def(self, '$angle', $Number_angle$30 = function $$angle() {
      var self = this;

      
      if ($truthy(self['$nan?']())) {
        return self};
      
      if (self == 0) {
        if (1 / self > 0) {
          return 0;
        }
        else {
          return Math.PI;
        }
      }
      else if (self < 0) {
        return Math.PI;
      }
      else {
        return 0;
      }
    ;
    }, $Number_angle$30.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    Opal.alias(self, "phase", "angle");
    
    Opal.def(self, '$bit_length', $Number_bit_length$31 = function $$bit_length() {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
      } else {
        self.$raise($$($nesting, 'NoMethodError').$new("" + "undefined method `bit_length` for " + (self) + ":Float", "bit_length"))
      };
      
      if (self === 0 || self === -1) {
        return 0;
      }

      var result = 0,
          value  = self < 0 ? ~self : self;

      while (value != 0) {
        result   += 1;
        value  >>>= 1;
      }

      return result;
    ;
    }, $Number_bit_length$31.$$arity = 0);
    
    Opal.def(self, '$ceil', $Number_ceil$32 = function $$ceil(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.ceil(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, $Number_ceil$32.$$arity = -1);
    
    Opal.def(self, '$chr', $Number_chr$33 = function $$chr(encoding) {
      var self = this;

      
      ;
      return String.fromCharCode(self);;
    }, $Number_chr$33.$$arity = -1);
    
    Opal.def(self, '$denominator', $Number_denominator$34 = function $$denominator() {
      var $a, $iter = $Number_denominator$34.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_denominator$34.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return 1
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'denominator', $Number_denominator$34, false), $zuper, $iter)
      }
    }, $Number_denominator$34.$$arity = 0);
    
    Opal.def(self, '$downto', $Number_downto$35 = function $$downto(stop) {
      var $iter = $Number_downto$35.$$p, block = $iter || nil, $$36, self = this;

      if ($iter) $Number_downto$35.$$p = null;
      
      
      if ($iter) $Number_downto$35.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["downto", stop], ($$36 = function(){var self = $$36.$$s || this;

        
          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_gt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(self, stop), 1)
          };}, $$36.$$s = self, $$36.$$arity = 0, $$36))
      };
      
      if (!stop.$$is_number) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i >= stop; i--) {
        block(i);
      }
    ;
      return self;
    }, $Number_downto$35.$$arity = 1);
    Opal.alias(self, "eql?", "==");
    
    Opal.def(self, '$equal?', $Number_equal$ques$37 = function(other) {
      var $a, self = this;

      return ($truthy($a = self['$=='](other)) ? $a : isNaN(self) && isNaN(other))
    }, $Number_equal$ques$37.$$arity = 1);
    
    Opal.def(self, '$even?', $Number_even$ques$38 = function() {
      var self = this;

      return self % 2 === 0;
    }, $Number_even$ques$38.$$arity = 0);
    
    Opal.def(self, '$floor', $Number_floor$39 = function $$floor(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = Math.floor(f * factor) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, $Number_floor$39.$$arity = -1);
    
    Opal.def(self, '$gcd', $Number_gcd$40 = function $$gcd(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    ;
    }, $Number_gcd$40.$$arity = 1);
    
    Opal.def(self, '$gcdlcm', $Number_gcdlcm$41 = function $$gcdlcm(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()]
    }, $Number_gcdlcm$41.$$arity = 1);
    
    Opal.def(self, '$integer?', $Number_integer$ques$42 = function() {
      var self = this;

      return self % 1 === 0;
    }, $Number_integer$ques$42.$$arity = 0);
    
    Opal.def(self, '$is_a?', $Number_is_a$ques$43 = function(klass) {
      var $a, $iter = $Number_is_a$ques$43.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_is_a$ques$43.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'is_a?', $Number_is_a$ques$43, false), $zuper, $iter);
    }, $Number_is_a$ques$43.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$instance_of?', $Number_instance_of$ques$44 = function(klass) {
      var $a, $iter = $Number_instance_of$ques$44.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_instance_of$ques$44.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Integer'))) ? $$($nesting, 'Integer')['$==='](self) : klass['$==']($$($nesting, 'Integer'))))) {
        return true};
      if ($truthy((($a = klass['$==']($$($nesting, 'Float'))) ? $$($nesting, 'Float')['$==='](self) : klass['$==']($$($nesting, 'Float'))))) {
        return true};
      return $send(self, Opal.find_super_dispatcher(self, 'instance_of?', $Number_instance_of$ques$44, false), $zuper, $iter);
    }, $Number_instance_of$ques$44.$$arity = 1);
    
    Opal.def(self, '$lcm', $Number_lcm$45 = function $$lcm(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    ;
    }, $Number_lcm$45.$$arity = 1);
    Opal.alias(self, "magnitude", "abs");
    Opal.alias(self, "modulo", "%");
    
    Opal.def(self, '$next', $Number_next$46 = function $$next() {
      var self = this;

      return self + 1;
    }, $Number_next$46.$$arity = 0);
    
    Opal.def(self, '$nobits?', $Number_nobits$ques$47 = function(mask) {
      var self = this;

      
      mask = $$($nesting, 'Opal')['$coerce_to!'](mask, $$($nesting, 'Integer'), "to_int");
      return (self & mask) == 0;;
    }, $Number_nobits$ques$47.$$arity = 1);
    
    Opal.def(self, '$nonzero?', $Number_nonzero$ques$48 = function() {
      var self = this;

      return self == 0 ? nil : self;
    }, $Number_nonzero$ques$48.$$arity = 0);
    
    Opal.def(self, '$numerator', $Number_numerator$49 = function $$numerator() {
      var $a, $iter = $Number_numerator$49.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_numerator$49.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
        return self
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'numerator', $Number_numerator$49, false), $zuper, $iter)
      }
    }, $Number_numerator$49.$$arity = 0);
    
    Opal.def(self, '$odd?', $Number_odd$ques$50 = function() {
      var self = this;

      return self % 2 !== 0;
    }, $Number_odd$ques$50.$$arity = 0);
    
    Opal.def(self, '$ord', $Number_ord$51 = function $$ord() {
      var self = this;

      return self
    }, $Number_ord$51.$$arity = 0);
    
    Opal.def(self, '$pow', $Number_pow$52 = function $$pow(b, m) {
      var self = this;

      
      ;
      
      if (self == 0) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      }

      if (m === undefined) {
        return self['$**'](b);
      } else {
        if (!($$($nesting, 'Integer')['$==='](b))) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 2nd argument not allowed unless a 1st argument is integer")
        }

        if (b < 0) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 1st argument cannot be negative when 2nd argument specified")
        }

        if (!($$($nesting, 'Integer')['$==='](m))) {
          self.$raise($$($nesting, 'TypeError'), "Integer#pow() 2nd argument not allowed unless all arguments are integers")
        }

        if (m === 0) {
          self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
        }

        return self['$**'](b)['$%'](m)
      }
    ;
    }, $Number_pow$52.$$arity = -2);
    
    Opal.def(self, '$pred', $Number_pred$53 = function $$pred() {
      var self = this;

      return self - 1;
    }, $Number_pred$53.$$arity = 0);
    
    Opal.def(self, '$quo', $Number_quo$54 = function $$quo(other) {
      var $iter = $Number_quo$54.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_quo$54.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $send(self, Opal.find_super_dispatcher(self, 'quo', $Number_quo$54, false), $zuper, $iter)
      } else {
        return $rb_divide(self, other)
      }
    }, $Number_quo$54.$$arity = 1);
    
    Opal.def(self, '$rationalize', $Number_rationalize$55 = function $$rationalize(eps) {
      var $a, $b, self = this, f = nil, n = nil;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $$($nesting, 'Rational').$new(self, 1)
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "Infinity")
      } else if ($truthy(self['$nan?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(eps == null)) {
        
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (n = ($a[1] == null ? nil : $a[1])), $b;
        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();
        n = $rb_minus(n, $$$($$($nesting, 'Float'), 'MANT_DIG'));
        return $$($nesting, 'Rational').$new($rb_times(2, f), (1)['$<<']($rb_minus(1, n))).$rationalize($$($nesting, 'Rational').$new(1, (1)['$<<']($rb_minus(1, n))));
      } else {
        return self.$to_r().$rationalize(eps)
      };
    }, $Number_rationalize$55.$$arity = -1);
    
    Opal.def(self, '$remainder', $Number_remainder$56 = function $$remainder(y) {
      var self = this;

      return $rb_minus(self, $rb_times(y, $rb_divide(self, y).$truncate()))
    }, $Number_remainder$56.$$arity = 1);
    
    Opal.def(self, '$round', $Number_round$57 = function $$round(ndigits) {
      var $a, $b, self = this, _ = nil, exp = nil;

      
      ;
      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        
        if ($truthy(ndigits == null)) {
          return self};
        if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](ndigits)) ? ndigits['$infinite?']() : $a))) {
          self.$raise($$($nesting, 'RangeError'), "Infinity")};
        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_lt(ndigits, $$$($$($nesting, 'Integer'), 'MIN')))) {
          self.$raise($$($nesting, 'RangeError'), "out of bounds")};
        if ($truthy(ndigits >= 0)) {
          return self};
        ndigits = ndigits['$-@']();
        
        if (0.415241 * ndigits - 0.125 > self.$size()) {
          return 0;
        }

        var f = Math.pow(10, ndigits),
            x = Math.floor((Math.abs(x) + f / 2) / f) * f;

        return self < 0 ? -x : x;
      ;
      } else {
        
        if ($truthy(($truthy($a = self['$nan?']()) ? ndigits == null : $a))) {
          self.$raise($$($nesting, 'FloatDomainError'), "NaN")};
        ndigits = $$($nesting, 'Opal')['$coerce_to!'](ndigits || 0, $$($nesting, 'Integer'), "to_int");
        if ($truthy($rb_le(ndigits, 0))) {
          if ($truthy(self['$nan?']())) {
            self.$raise($$($nesting, 'RangeError'), "NaN")
          } else if ($truthy(self['$infinite?']())) {
            self.$raise($$($nesting, 'FloatDomainError'), "Infinity")}
        } else if (ndigits['$=='](0)) {
          return Math.round(self)
        } else if ($truthy(($truthy($a = self['$nan?']()) ? $a : self['$infinite?']()))) {
          return self};
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (_ = ($a[0] == null ? nil : $a[0])), (exp = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy($rb_ge(ndigits, $rb_minus($rb_plus($$$($$($nesting, 'Float'), 'DIG'), 2), (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_divide(exp, 4)
        } else {
          return $rb_minus($rb_divide(exp, 3), 1)
        }; return nil; })())))) {
          return self};
        if ($truthy($rb_lt(ndigits, (function() {if ($truthy($rb_gt(exp, 0))) {
          return $rb_plus($rb_divide(exp, 3), 1)
        } else {
          return $rb_divide(exp, 4)
        }; return nil; })()['$-@']()))) {
          return 0};
        return Math.round(self * Math.pow(10, ndigits)) / Math.pow(10, ndigits);;
      };
    }, $Number_round$57.$$arity = -1);
    
    Opal.def(self, '$step', $Number_step$58 = function $$step($a, $b, $c) {
      var $iter = $Number_step$58.$$p, block = $iter || nil, $post_args, $kwargs, limit, step, to, by, $$59, self = this, positional_args = nil, keyword_args = nil;

      if ($iter) $Number_step$58.$$p = null;
      
      
      if ($iter) $Number_step$58.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      $kwargs = Opal.extract_kwargs($post_args);
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      if ($post_args.length > 0) {
        limit = $post_args[0];
        $post_args.splice(0, 1);
      };
      
      if ($post_args.length > 0) {
        step = $post_args[0];
        $post_args.splice(0, 1);
      };
      
      to = $kwargs.$$smap["to"];;
      
      by = $kwargs.$$smap["by"];;
      
      if (limit !== undefined && to !== undefined) {
        self.$raise($$($nesting, 'ArgumentError'), "to is given twice")
      }

      if (step !== undefined && by !== undefined) {
        self.$raise($$($nesting, 'ArgumentError'), "step is given twice")
      }

      function validateParameters() {
        if (to !== undefined) {
          limit = to;
        }

        if (limit === undefined) {
          limit = nil;
        }

        if (step === nil) {
          self.$raise($$($nesting, 'TypeError'), "step must be numeric")
        }

        if (step === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be 0")
        }

        if (by !== undefined) {
          step = by;
        }

        if (step === nil || step == null) {
          step = 1;
        }

        var sign = step['$<=>'](0);

        if (sign === nil) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "0 can't be coerced into " + (step.$class()))
        }

        if (limit === nil || limit == null) {
          limit = sign > 0 ? $$$($$($nesting, 'Float'), 'INFINITY') : $$$($$($nesting, 'Float'), 'INFINITY')['$-@']();
        }

        $$($nesting, 'Opal').$compare(self, limit)
      }

      function stepFloatSize() {
        if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else if (step === Infinity || step === -Infinity) {
          return 1;
        } else {
          var abs = Math.abs, floor = Math.floor,
              err = (abs(self) + abs(limit) + abs(limit - self)) / abs(step) * $$$($$($nesting, 'Float'), 'EPSILON');

          if (err === Infinity || err === -Infinity) {
            return 0;
          } else {
            if (err > 0.5) {
              err = 0.5;
            }

            return floor((limit - self) / step + err) + 1
          }
        }
      }

      function stepSize() {
        validateParameters();

        if (step === 0) {
          return Infinity;
        }

        if (step % 1 !== 0) {
          return stepFloatSize();
        } else if ((step > 0 && self > limit) || (step < 0 && self < limit)) {
          return 0;
        } else {
          var ceil = Math.ceil, abs = Math.abs,
              lhs = abs(self - limit) + 1,
              rhs = abs(step);

          return ceil(lhs / rhs);
        }
      }
    ;
      if ((block !== nil)) {
      } else {
        
        positional_args = [];
        keyword_args = $hash2([], {});
        
        if (limit !== undefined) {
          positional_args.push(limit);
        }

        if (step !== undefined) {
          positional_args.push(step);
        }

        if (to !== undefined) {
          Opal.hash_put(keyword_args, "to", to);
        }

        if (by !== undefined) {
          Opal.hash_put(keyword_args, "by", by);
        }

        if (keyword_args['$any?']()) {
          positional_args.push(keyword_args);
        }
      ;
        return $send(self, 'enum_for', ["step"].concat(Opal.to_a(positional_args)), ($$59 = function(){var self = $$59.$$s || this;

        return stepSize();}, $$59.$$s = self, $$59.$$arity = 0, $$59));
      };
      
      validateParameters();

      if (step === 0) {
        while (true) {
          block(self);
        }
      }

      if (self % 1 !== 0 || limit % 1 !== 0 || step % 1 !== 0) {
        var n = stepFloatSize();

        if (n > 0) {
          if (step === Infinity || step === -Infinity) {
            block(self);
          } else {
            var i = 0, d;

            if (step > 0) {
              while (i < n) {
                d = i * step + self;
                if (limit < d) {
                  d = limit;
                }
                block(d);
                i += 1;
              }
            } else {
              while (i < n) {
                d = i * step + self;
                if (limit > d) {
                  d = limit;
                }
                block(d);
                i += 1
              }
            }
          }
        }
      } else {
        var value = self;

        if (step > 0) {
          while (value <= limit) {
            block(value);
            value += step;
          }
        } else {
          while (value >= limit) {
            block(value);
            value += step
          }
        }
      }

      return self;
    ;
    }, $Number_step$58.$$arity = -1);
    Opal.alias(self, "succ", "next");
    
    Opal.def(self, '$times', $Number_times$60 = function $$times() {
      var $iter = $Number_times$60.$$p, block = $iter || nil, $$61, self = this;

      if ($iter) $Number_times$60.$$p = null;
      
      
      if ($iter) $Number_times$60.$$p = null;;
      if ($truthy(block)) {
      } else {
        return $send(self, 'enum_for', ["times"], ($$61 = function(){var self = $$61.$$s || this;

        return self}, $$61.$$s = self, $$61.$$arity = 0, $$61))
      };
      
      for (var i = 0; i < self; i++) {
        block(i);
      }
    ;
      return self;
    }, $Number_times$60.$$arity = 0);
    
    Opal.def(self, '$to_f', $Number_to_f$62 = function $$to_f() {
      var self = this;

      return self
    }, $Number_to_f$62.$$arity = 0);
    
    Opal.def(self, '$to_i', $Number_to_i$63 = function $$to_i() {
      var self = this;

      return parseInt(self, 10);
    }, $Number_to_i$63.$$arity = 0);
    Opal.alias(self, "to_int", "to_i");
    
    Opal.def(self, '$to_r', $Number_to_r$64 = function $$to_r() {
      var $a, $b, self = this, f = nil, e = nil;

      if ($truthy($$($nesting, 'Integer')['$==='](self))) {
        return $$($nesting, 'Rational').$new(self, 1)
      } else {
        
        $b = $$($nesting, 'Math').$frexp(self), $a = Opal.to_ary($b), (f = ($a[0] == null ? nil : $a[0])), (e = ($a[1] == null ? nil : $a[1])), $b;
        f = $$($nesting, 'Math').$ldexp(f, $$$($$($nesting, 'Float'), 'MANT_DIG')).$to_i();
        e = $rb_minus(e, $$$($$($nesting, 'Float'), 'MANT_DIG'));
        return $rb_times(f, $$$($$($nesting, 'Float'), 'RADIX')['$**'](e)).$to_r();
      }
    }, $Number_to_r$64.$$arity = 0);
    
    Opal.def(self, '$to_s', $Number_to_s$65 = function $$to_s(base) {
      var $a, self = this;

      
      
      if (base == null) {
        base = 10;
      };
      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), "to_int");
      if ($truthy(($truthy($a = $rb_lt(base, 2)) ? $a : $rb_gt(base, 36)))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))};
      return self.toString(base);;
    }, $Number_to_s$65.$$arity = -1);
    
    Opal.def(self, '$truncate', $Number_truncate$66 = function $$truncate(ndigits) {
      var self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      
      var f = self.$to_f();

      if (f % 1 === 0 && ndigits >= 0) {
        return f;
      }

      var factor = Math.pow(10, ndigits),
          result = parseInt(f * factor, 10) / factor;

      if (f % 1 === 0) {
        result = Math.round(result);
      }

      return result;
    ;
    }, $Number_truncate$66.$$arity = -1);
    Opal.alias(self, "inspect", "to_s");
    
    Opal.def(self, '$digits', $Number_digits$67 = function $$digits(base) {
      var self = this;

      
      
      if (base == null) {
        base = 10;
      };
      if ($rb_lt(self, 0)) {
        self.$raise($$$($$($nesting, 'Math'), 'DomainError'), "out of domain")};
      base = $$($nesting, 'Opal')['$coerce_to!'](base, $$($nesting, 'Integer'), "to_int");
      if ($truthy($rb_lt(base, 2))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid radix " + (base))};
      
      var value = self, result = [];

      while (value !== 0) {
        result.push(value % base);
        value = parseInt(value / base, 10);
      }

      return result;
    ;
    }, $Number_digits$67.$$arity = -1);
    
    Opal.def(self, '$divmod', $Number_divmod$68 = function $$divmod(other) {
      var $a, $iter = $Number_divmod$68.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Number_divmod$68.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if ($truthy(($truthy($a = self['$nan?']()) ? $a : other['$nan?']()))) {
        return self.$raise($$($nesting, 'FloatDomainError'), "NaN")
      } else if ($truthy(self['$infinite?']())) {
        return self.$raise($$($nesting, 'FloatDomainError'), "Infinity")
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'divmod', $Number_divmod$68, false), $zuper, $iter)
      }
    }, $Number_divmod$68.$$arity = 1);
    
    Opal.def(self, '$upto', $Number_upto$69 = function $$upto(stop) {
      var $iter = $Number_upto$69.$$p, block = $iter || nil, $$70, self = this;

      if ($iter) $Number_upto$69.$$p = null;
      
      
      if ($iter) $Number_upto$69.$$p = null;;
      if ((block !== nil)) {
      } else {
        return $send(self, 'enum_for', ["upto", stop], ($$70 = function(){var self = $$70.$$s || this;

        
          if ($truthy($$($nesting, 'Numeric')['$==='](stop))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
          };
          if ($truthy($rb_lt(stop, self))) {
            return 0
          } else {
            return $rb_plus($rb_minus(stop, self), 1)
          };}, $$70.$$s = self, $$70.$$arity = 0, $$70))
      };
      
      if (!stop.$$is_number) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "comparison of " + (self.$class()) + " with " + (stop.$class()) + " failed")
      }
      for (var i = self; i <= stop; i++) {
        block(i);
      }
    ;
      return self;
    }, $Number_upto$69.$$arity = 1);
    
    Opal.def(self, '$zero?', $Number_zero$ques$71 = function() {
      var self = this;

      return self == 0;
    }, $Number_zero$ques$71.$$arity = 0);
    
    Opal.def(self, '$size', $Number_size$72 = function $$size() {
      var self = this;

      return 4
    }, $Number_size$72.$$arity = 0);
    
    Opal.def(self, '$nan?', $Number_nan$ques$73 = function() {
      var self = this;

      return isNaN(self);
    }, $Number_nan$ques$73.$$arity = 0);
    
    Opal.def(self, '$finite?', $Number_finite$ques$74 = function() {
      var self = this;

      return self != Infinity && self != -Infinity && !isNaN(self);
    }, $Number_finite$ques$74.$$arity = 0);
    
    Opal.def(self, '$infinite?', $Number_infinite$ques$75 = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    }, $Number_infinite$ques$75.$$arity = 0);
    
    Opal.def(self, '$positive?', $Number_positive$ques$76 = function() {
      var self = this;

      return self != 0 && (self == Infinity || 1 / self > 0);
    }, $Number_positive$ques$76.$$arity = 0);
    return (Opal.def(self, '$negative?', $Number_negative$ques$77 = function() {
      var self = this;

      return self == -Infinity || 1 / self < 0;
    }, $Number_negative$ques$77.$$arity = 0), nil) && 'negative?';
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  Opal.const_set($nesting[0], 'Fixnum', $$($nesting, 'Number'));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Integer');

    var $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$78, $eq_eq_eq$79, $sqrt$80;

      
      
      Opal.def(self, '$allocate', $allocate$78 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$78.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      
      Opal.def(self, '$===', $eq_eq_eq$79 = function(other) {
        var self = this;

        
        if (!other.$$is_number) {
          return false;
        }

        return (other % 1) === 0;
      
      }, $eq_eq_eq$79.$$arity = 1);
      return (Opal.def(self, '$sqrt', $sqrt$80 = function $$sqrt(n) {
        var self = this;

        
        n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
        
        if (n < 0) {
          self.$raise($$$($$($nesting, 'Math'), 'DomainError'), "Numerical argument is out of domain - \"isqrt\"")
        }

        return parseInt(Math.sqrt(n), 10);
      ;
      }, $sqrt$80.$$arity = 1), nil) && 'sqrt';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'MAX', Math.pow(2, 30) - 1);
    return Opal.const_set($nesting[0], 'MIN', -Math.pow(2, 30));
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Float');

    var $nesting = [self].concat($parent_nesting);

    
    self.$$is_number_class = true;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $allocate$81, $eq_eq_eq$82;

      
      
      Opal.def(self, '$allocate', $allocate$81 = function $$allocate() {
        var self = this;

        return self.$raise($$($nesting, 'TypeError'), "" + "allocator undefined for " + (self.$name()))
      }, $allocate$81.$$arity = 0);
      
      Opal.udef(self, '$' + "new");;
      return (Opal.def(self, '$===', $eq_eq_eq$82 = function(other) {
        var self = this;

        return !!other.$$is_number;
      }, $eq_eq_eq$82.$$arity = 1), nil) && '===';
    })(Opal.get_singleton_class(self), $nesting);
    Opal.const_set($nesting[0], 'INFINITY', Infinity);
    Opal.const_set($nesting[0], 'MAX', Number.MAX_VALUE);
    Opal.const_set($nesting[0], 'MIN', Number.MIN_VALUE);
    Opal.const_set($nesting[0], 'NAN', NaN);
    Opal.const_set($nesting[0], 'DIG', 15);
    Opal.const_set($nesting[0], 'MANT_DIG', 53);
    Opal.const_set($nesting[0], 'RADIX', 2);
    return Opal.const_set($nesting[0], 'EPSILON', Number.EPSILON || 2.2204460492503130808472633361816E-16);
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/range"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$raise', '$<=>', '$include?', '$<=', '$<', '$enum_for', '$upto', '$to_proc', '$respond_to?', '$class', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$last', '$to_a', '$>', '$-', '$abs', '$to_i', '$coerce_to!', '$ceil', '$/', '$size', '$loop', '$+', '$*', '$>=', '$each_with_index', '$%', '$bsearch', '$inspect', '$[]', '$hash']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Range');

    var $nesting = [self].concat($parent_nesting), $Range_initialize$1, $Range_$eq_eq$2, $Range_$eq_eq_eq$3, $Range_cover$ques$4, $Range_each$5, $Range_eql$ques$6, $Range_exclude_end$ques$7, $Range_first$8, $Range_last$9, $Range_max$10, $Range_min$11, $Range_size$12, $Range_step$13, $Range_bsearch$17, $Range_to_s$18, $Range_inspect$19, $Range_marshal_load$20, $Range_hash$21;

    self.$$prototype.begin = self.$$prototype.end = self.$$prototype.excl = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    self.$$prototype.$$is_range = true;
    self.$attr_reader("begin", "end");
    
    Opal.def(self, '$initialize', $Range_initialize$1 = function $$initialize(first, last, exclude) {
      var self = this;

      
      
      if (exclude == null) {
        exclude = false;
      };
      if ($truthy(self.begin)) {
        self.$raise($$($nesting, 'NameError'), "'initialize' called twice")};
      if ($truthy(first['$<=>'](last))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "bad value for range")
      };
      self.begin = first;
      self.end = last;
      return (self.excl = exclude);
    }, $Range_initialize$1.$$arity = -3);
    
    Opal.def(self, '$==', $Range_$eq_eq$2 = function(other) {
      var self = this;

      
      if (!other.$$is_range) {
        return false;
      }

      return self.excl  === other.excl &&
             self.begin ==  other.begin &&
             self.end   ==  other.end;
    
    }, $Range_$eq_eq$2.$$arity = 1);
    
    Opal.def(self, '$===', $Range_$eq_eq_eq$3 = function(value) {
      var self = this;

      return self['$include?'](value)
    }, $Range_$eq_eq_eq$3.$$arity = 1);
    
    Opal.def(self, '$cover?', $Range_cover$ques$4 = function(value) {
      var $a, self = this, beg_cmp = nil, end_cmp = nil;

      
      beg_cmp = self.begin['$<=>'](value);
      if ($truthy(($truthy($a = beg_cmp) ? $rb_le(beg_cmp, 0) : $a))) {
      } else {
        return false
      };
      end_cmp = value['$<=>'](self.end);
      if ($truthy(self.excl)) {
        return ($truthy($a = end_cmp) ? $rb_lt(end_cmp, 0) : $a)
      } else {
        return ($truthy($a = end_cmp) ? $rb_le(end_cmp, 0) : $a)
      };
    }, $Range_cover$ques$4.$$arity = 1);
    
    Opal.def(self, '$each', $Range_each$5 = function $$each() {
      var $iter = $Range_each$5.$$p, block = $iter || nil, $a, self = this, current = nil, last = nil;

      if ($iter) $Range_each$5.$$p = null;
      
      
      if ($iter) $Range_each$5.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each")
      };
      
      var i, limit;

      if (self.begin.$$is_number && self.end.$$is_number) {
        if (self.begin % 1 !== 0 || self.end % 1 !== 0) {
          self.$raise($$($nesting, 'TypeError'), "can't iterate from Float")
        }

        for (i = self.begin, limit = self.end + (function() {if ($truthy(self.excl)) {
        return 0
      } else {
        return 1
      }; return nil; })(); i < limit; i++) {
          block(i);
        }

        return self;
      }

      if (self.begin.$$is_string && self.end.$$is_string) {
        $send(self.begin, 'upto', [self.end, self.excl], block.$to_proc())
        return self;
      }
    ;
      current = self.begin;
      last = self.end;
      if ($truthy(current['$respond_to?']("succ"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't iterate from " + (current.$class()))
      };
      while ($truthy($rb_lt(current['$<=>'](last), 0))) {
        
        Opal.yield1(block, current);
        current = current.$succ();
      };
      if ($truthy(($truthy($a = self.excl['$!']()) ? current['$=='](last) : $a))) {
        Opal.yield1(block, current)};
      return self;
    }, $Range_each$5.$$arity = 0);
    
    Opal.def(self, '$eql?', $Range_eql$ques$6 = function(other) {
      var $a, $b, self = this;

      
      if ($truthy($$($nesting, 'Range')['$==='](other))) {
      } else {
        return false
      };
      return ($truthy($a = ($truthy($b = self.excl['$==='](other['$exclude_end?']())) ? self.begin['$eql?'](other.$begin()) : $b)) ? self.end['$eql?'](other.$end()) : $a);
    }, $Range_eql$ques$6.$$arity = 1);
    
    Opal.def(self, '$exclude_end?', $Range_exclude_end$ques$7 = function() {
      var self = this;

      return self.excl
    }, $Range_exclude_end$ques$7.$$arity = 0);
    
    Opal.def(self, '$first', $Range_first$8 = function $$first(n) {
      var $iter = $Range_first$8.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Range_first$8.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      ;
      if ($truthy(n == null)) {
        return self.begin};
      return $send(self, Opal.find_super_dispatcher(self, 'first', $Range_first$8, false), $zuper, $iter);
    }, $Range_first$8.$$arity = -1);
    Opal.alias(self, "include?", "cover?");
    
    Opal.def(self, '$last', $Range_last$9 = function $$last(n) {
      var self = this;

      
      ;
      if ($truthy(n == null)) {
        return self.end};
      return self.$to_a().$last(n);
    }, $Range_last$9.$$arity = -1);
    
    Opal.def(self, '$max', $Range_max$10 = function $$max() {
      var $a, $iter = $Range_max$10.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Range_max$10.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'max', $Range_max$10, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
      } else {
        return self.excl ? self.end - 1 : self.end
      }
    }, $Range_max$10.$$arity = 0);
    Opal.alias(self, "member?", "cover?");
    
    Opal.def(self, '$min', $Range_min$11 = function $$min() {
      var $a, $iter = $Range_min$11.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $Range_min$11.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      if (($yield !== nil)) {
        return $send(self, Opal.find_super_dispatcher(self, 'min', $Range_min$11, false), $zuper, $iter)
      } else if ($truthy($rb_gt(self.begin, self.end))) {
        return nil
      } else if ($truthy(($truthy($a = self.excl) ? self.begin['$=='](self.end) : $a))) {
        return nil
      } else {
        return self.begin
      }
    }, $Range_min$11.$$arity = 0);
    
    Opal.def(self, '$size', $Range_size$12 = function $$size() {
      var $a, self = this, range_begin = nil, range_end = nil, infinity = nil;

      
      range_begin = self.begin;
      range_end = self.end;
      if ($truthy(self.excl)) {
        range_end = $rb_minus(range_end, 1)};
      if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](range_begin)) ? $$($nesting, 'Numeric')['$==='](range_end) : $a))) {
      } else {
        return nil
      };
      if ($truthy($rb_lt(range_end, range_begin))) {
        return 0};
      infinity = $$$($$($nesting, 'Float'), 'INFINITY');
      if ($truthy([range_begin.$abs(), range_end.$abs()]['$include?'](infinity))) {
        return infinity};
      return (Math.abs(range_end - range_begin) + 1).$to_i();
    }, $Range_size$12.$$arity = 0);
    
    Opal.def(self, '$step', $Range_step$13 = function $$step(n) {
      var $$14, $$15, $$16, $iter = $Range_step$13.$$p, $yield = $iter || nil, self = this, i = nil;

      if ($iter) $Range_step$13.$$p = null;
      
      
      if (n == null) {
        n = 1;
      };
      
      function coerceStepSize() {
        if (!n.$$is_number) {
          n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int")
        }

        if (n < 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be negative")
        } else if (n === 0) {
          self.$raise($$($nesting, 'ArgumentError'), "step can't be 0")
        }
      }

      function enumeratorSize() {
        if (!self.begin['$respond_to?']("succ")) {
          return nil;
        }

        if (self.begin.$$is_string && self.end.$$is_string) {
          return nil;
        }

        if (n % 1 === 0) {
          return $rb_divide(self.$size(), n).$ceil();
        } else {
          // n is a float
          var begin = self.begin, end = self.end,
              abs = Math.abs, floor = Math.floor,
              err = (abs(begin) + abs(end) + abs(end - begin)) / abs(n) * $$$($$($nesting, 'Float'), 'EPSILON'),
              size;

          if (err > 0.5) {
            err = 0.5;
          }

          if (self.excl) {
            size = floor((end - begin) / n - err);
            if (size * n + begin < end) {
              size++;
            }
          } else {
            size = floor((end - begin) / n + err) + 1
          }

          return size;
        }
      }
    ;
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["step", n], ($$14 = function(){var self = $$14.$$s || this;

        
          coerceStepSize();
          return enumeratorSize();
        }, $$14.$$s = self, $$14.$$arity = 0, $$14))
      };
      coerceStepSize();
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
        
        i = 0;
        (function(){var $brk = Opal.new_brk(); try {return $send(self, 'loop', [], ($$15 = function(){var self = $$15.$$s || this, current = nil;
          if (self.begin == null) self.begin = nil;
          if (self.excl == null) self.excl = nil;
          if (self.end == null) self.end = nil;

        
          current = $rb_plus(self.begin, $rb_times(i, n));
          if ($truthy(self.excl)) {
            if ($truthy($rb_ge(current, self.end))) {
              
              Opal.brk(nil, $brk)}
          } else if ($truthy($rb_gt(current, self.end))) {
            
            Opal.brk(nil, $brk)};
          Opal.yield1($yield, current);
          return (i = $rb_plus(i, 1));}, $$15.$$s = self, $$15.$$brk = $brk, $$15.$$arity = 0, $$15))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
      } else {
        
        
        if (self.begin.$$is_string && self.end.$$is_string && n % 1 !== 0) {
          self.$raise($$($nesting, 'TypeError'), "no implicit conversion to float from string")
        }
      ;
        $send(self, 'each_with_index', [], ($$16 = function(value, idx){var self = $$16.$$s || this;

        
          
          if (value == null) {
            value = nil;
          };
          
          if (idx == null) {
            idx = nil;
          };
          if (idx['$%'](n)['$=='](0)) {
            return Opal.yield1($yield, value);
          } else {
            return nil
          };}, $$16.$$s = self, $$16.$$arity = 2, $$16));
      };
      return self;
    }, $Range_step$13.$$arity = -1);
    
    Opal.def(self, '$bsearch', $Range_bsearch$17 = function $$bsearch() {
      var $iter = $Range_bsearch$17.$$p, block = $iter || nil, self = this;

      if ($iter) $Range_bsearch$17.$$p = null;
      
      
      if ($iter) $Range_bsearch$17.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("bsearch")
      };
      if ($truthy(self.begin.$$is_number && self.end.$$is_number)) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't do binary search for " + (self.begin.$class()))
      };
      return $send(self.$to_a(), 'bsearch', [], block.$to_proc());
    }, $Range_bsearch$17.$$arity = 0);
    
    Opal.def(self, '$to_s', $Range_to_s$18 = function $$to_s() {
      var self = this;

      return "" + (self.begin) + ((function() {if ($truthy(self.excl)) {
        return "..."
      } else {
        return ".."
      }; return nil; })()) + (self.end)
    }, $Range_to_s$18.$$arity = 0);
    
    Opal.def(self, '$inspect', $Range_inspect$19 = function $$inspect() {
      var self = this;

      return "" + (self.begin.$inspect()) + ((function() {if ($truthy(self.excl)) {
        return "..."
      } else {
        return ".."
      }; return nil; })()) + (self.end.$inspect())
    }, $Range_inspect$19.$$arity = 0);
    
    Opal.def(self, '$marshal_load', $Range_marshal_load$20 = function $$marshal_load(args) {
      var self = this;

      
      self.begin = args['$[]']("begin");
      self.end = args['$[]']("end");
      return (self.excl = args['$[]']("excl"));
    }, $Range_marshal_load$20.$$arity = 1);
    return (Opal.def(self, '$hash', $Range_hash$21 = function $$hash() {
      var self = this;

      return [self.begin, self.end, self.excl].$hash()
    }, $Range_hash$21.$$arity = 0), nil) && 'hash';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/proc"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$coerce_to!']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_new$1, $Proc_call$2, $Proc_to_proc$3, $Proc_lambda$ques$4, $Proc_arity$5, $Proc_source_location$6, $Proc_binding$7, $Proc_parameters$8, $Proc_curry$9, $Proc_dup$10;

    
    Opal.defineProperty(self.$$prototype, '$$is_proc', true);
    Opal.defineProperty(self.$$prototype, '$$is_lambda', false);
    Opal.defs(self, '$new', $Proc_new$1 = function() {
      var $iter = $Proc_new$1.$$p, block = $iter || nil, self = this;

      if ($iter) $Proc_new$1.$$p = null;
      
      
      if ($iter) $Proc_new$1.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "tried to create a Proc object without a block")
      };
      return block;
    }, $Proc_new$1.$$arity = 0);
    
    Opal.def(self, '$call', $Proc_call$2 = function $$call($a) {
      var $iter = $Proc_call$2.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Proc_call$2.$$p = null;
      
      
      if ($iter) $Proc_call$2.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      if (block !== nil) {
        self.$$p = block;
      }

      var result, $brk = self.$$brk;

      if ($brk) {
        try {
          if (self.$$is_lambda) {
            result = self.apply(null, args);
          }
          else {
            result = Opal.yieldX(self, args);
          }
        } catch (err) {
          if (err === $brk) {
            return $brk.$v
          }
          else {
            throw err
          }
        }
      }
      else {
        if (self.$$is_lambda) {
          result = self.apply(null, args);
        }
        else {
          result = Opal.yieldX(self, args);
        }
      }

      return result;
    ;
    }, $Proc_call$2.$$arity = -1);
    Opal.alias(self, "[]", "call");
    Opal.alias(self, "===", "call");
    Opal.alias(self, "yield", "call");
    
    Opal.def(self, '$to_proc', $Proc_to_proc$3 = function $$to_proc() {
      var self = this;

      return self
    }, $Proc_to_proc$3.$$arity = 0);
    
    Opal.def(self, '$lambda?', $Proc_lambda$ques$4 = function() {
      var self = this;

      return !!self.$$is_lambda;
    }, $Proc_lambda$ques$4.$$arity = 0);
    
    Opal.def(self, '$arity', $Proc_arity$5 = function $$arity() {
      var self = this;

      
      if (self.$$is_curried) {
        return -1;
      } else {
        return self.$$arity;
      }
    
    }, $Proc_arity$5.$$arity = 0);
    
    Opal.def(self, '$source_location', $Proc_source_location$6 = function $$source_location() {
      var self = this;

      
      if (self.$$is_curried) { return nil; };
      return nil;
    }, $Proc_source_location$6.$$arity = 0);
    
    Opal.def(self, '$binding', $Proc_binding$7 = function $$binding() {
      var self = this;

      
      if (self.$$is_curried) { self.$raise($$($nesting, 'ArgumentError'), "Can't create Binding") };
      return nil;
    }, $Proc_binding$7.$$arity = 0);
    
    Opal.def(self, '$parameters', $Proc_parameters$8 = function $$parameters() {
      var self = this;

      
      if (self.$$is_curried) {
        return [["rest"]];
      } else if (self.$$parameters) {
        if (self.$$is_lambda) {
          return self.$$parameters;
        } else {
          var result = [], i, length;

          for (i = 0, length = self.$$parameters.length; i < length; i++) {
            var parameter = self.$$parameters[i];

            if (parameter[0] === 'req') {
              // required arguments always have name
              parameter = ['opt', parameter[1]];
            }

            result.push(parameter);
          }

          return result;
        }
      } else {
        return [];
      }
    
    }, $Proc_parameters$8.$$arity = 0);
    
    Opal.def(self, '$curry', $Proc_curry$9 = function $$curry(arity) {
      var self = this;

      
      ;
      
      if (arity === undefined) {
        arity = self.length;
      }
      else {
        arity = $$($nesting, 'Opal')['$coerce_to!'](arity, $$($nesting, 'Integer'), "to_int");
        if (self.$$is_lambda && arity !== self.length) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arity) + " for " + (self.length) + ")")
        }
      }

      function curried () {
        var args = $slice.call(arguments),
            length = args.length,
            result;

        if (length > arity && self.$$is_lambda && !self.$$is_curried) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (length) + " for " + (arity) + ")")
        }

        if (length >= arity) {
          return self.$call.apply(self, args);
        }

        result = function () {
          return curried.apply(null,
            args.concat($slice.call(arguments)));
        }
        result.$$is_lambda = self.$$is_lambda;
        result.$$is_curried = true;

        return result;
      };

      curried.$$is_lambda = self.$$is_lambda;
      curried.$$is_curried = true;
      return curried;
    ;
    }, $Proc_curry$9.$$arity = -1);
    
    Opal.def(self, '$dup', $Proc_dup$10 = function $$dup() {
      var self = this;

      
      var original_proc = self.$$original_proc || self,
          proc = function () {
            return original_proc.apply(this, arguments);
          };

      for (var prop in self) {
        if (self.hasOwnProperty(prop)) {
          proc[prop] = self[prop];
        }
      }

      return proc;
    
    }, $Proc_dup$10.$$arity = 0);
    return Opal.alias(self, "clone", "dup");
  })($nesting[0], Function, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/method"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_reader', '$arity', '$new', '$class', '$join', '$source_location', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Method');

    var $nesting = [self].concat($parent_nesting), $Method_initialize$1, $Method_arity$2, $Method_parameters$3, $Method_source_location$4, $Method_comments$5, $Method_call$6, $Method_unbind$7, $Method_to_proc$8, $Method_inspect$9;

    self.$$prototype.method = self.$$prototype.receiver = self.$$prototype.owner = self.$$prototype.name = nil;
    
    self.$attr_reader("owner", "receiver", "name");
    
    Opal.def(self, '$initialize', $Method_initialize$1 = function $$initialize(receiver, owner, method, name) {
      var self = this;

      
      self.receiver = receiver;
      self.owner = owner;
      self.name = name;
      return (self.method = method);
    }, $Method_initialize$1.$$arity = 4);
    
    Opal.def(self, '$arity', $Method_arity$2 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, $Method_arity$2.$$arity = 0);
    
    Opal.def(self, '$parameters', $Method_parameters$3 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, $Method_parameters$3.$$arity = 0);
    
    Opal.def(self, '$source_location', $Method_source_location$4 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, $Method_source_location$4.$$arity = 0);
    
    Opal.def(self, '$comments', $Method_comments$5 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, $Method_comments$5.$$arity = 0);
    
    Opal.def(self, '$call', $Method_call$6 = function $$call($a) {
      var $iter = $Method_call$6.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Method_call$6.$$p = null;
      
      
      if ($iter) $Method_call$6.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      
      self.method.$$p = block;

      return self.method.apply(self.receiver, args);
    ;
    }, $Method_call$6.$$arity = -1);
    Opal.alias(self, "[]", "call");
    
    Opal.def(self, '$unbind', $Method_unbind$7 = function $$unbind() {
      var self = this;

      return $$($nesting, 'UnboundMethod').$new(self.receiver.$class(), self.owner, self.method, self.name)
    }, $Method_unbind$7.$$arity = 0);
    
    Opal.def(self, '$to_proc', $Method_to_proc$8 = function $$to_proc() {
      var self = this;

      
      var proc = self.$call.bind(self);
      proc.$$unbound = self.method;
      proc.$$is_lambda = true;
      proc.$$arity = self.method.$$arity;
      proc.$$parameters = self.method.$$parameters;
      return proc;
    
    }, $Method_to_proc$8.$$arity = 0);
    return (Opal.def(self, '$inspect', $Method_inspect$9 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.receiver.$class()) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, $Method_inspect$9.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'UnboundMethod');

    var $nesting = [self].concat($parent_nesting), $UnboundMethod_initialize$10, $UnboundMethod_arity$11, $UnboundMethod_parameters$12, $UnboundMethod_source_location$13, $UnboundMethod_comments$14, $UnboundMethod_bind$15, $UnboundMethod_inspect$16;

    self.$$prototype.method = self.$$prototype.owner = self.$$prototype.name = self.$$prototype.source = nil;
    
    self.$attr_reader("source", "owner", "name");
    
    Opal.def(self, '$initialize', $UnboundMethod_initialize$10 = function $$initialize(source, owner, method, name) {
      var self = this;

      
      self.source = source;
      self.owner = owner;
      self.method = method;
      return (self.name = name);
    }, $UnboundMethod_initialize$10.$$arity = 4);
    
    Opal.def(self, '$arity', $UnboundMethod_arity$11 = function $$arity() {
      var self = this;

      return self.method.$arity()
    }, $UnboundMethod_arity$11.$$arity = 0);
    
    Opal.def(self, '$parameters', $UnboundMethod_parameters$12 = function $$parameters() {
      var self = this;

      return self.method.$$parameters
    }, $UnboundMethod_parameters$12.$$arity = 0);
    
    Opal.def(self, '$source_location', $UnboundMethod_source_location$13 = function $$source_location() {
      var $a, self = this;

      return ($truthy($a = self.method.$$source_location) ? $a : ["(eval)", 0])
    }, $UnboundMethod_source_location$13.$$arity = 0);
    
    Opal.def(self, '$comments', $UnboundMethod_comments$14 = function $$comments() {
      var $a, self = this;

      return ($truthy($a = self.method.$$comments) ? $a : [])
    }, $UnboundMethod_comments$14.$$arity = 0);
    
    Opal.def(self, '$bind', $UnboundMethod_bind$15 = function $$bind(object) {
      var self = this;

      
      if (self.owner.$$is_module || Opal.is_a(object, self.owner)) {
        return $$($nesting, 'Method').$new(object, self.owner, self.method, self.name);
      }
      else {
        self.$raise($$($nesting, 'TypeError'), "" + "can't bind singleton method to a different class (expected " + (object) + ".kind_of?(" + (self.owner) + " to be true)");
      }
    
    }, $UnboundMethod_bind$15.$$arity = 1);
    return (Opal.def(self, '$inspect', $UnboundMethod_inspect$16 = function $$inspect() {
      var self = this;

      return "" + "#<" + (self.$class()) + ": " + (self.source) + "#" + (self.name) + " (defined in " + (self.owner) + " in " + (self.$source_location().$join(":")) + ")>"
    }, $UnboundMethod_inspect$16.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/variables"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $gvars = Opal.gvars, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new']);
  
  $gvars['&'] = $gvars['~'] = $gvars['`'] = $gvars["'"] = nil;
  $gvars.LOADED_FEATURES = ($gvars["\""] = Opal.loaded_features);
  $gvars.LOAD_PATH = ($gvars[":"] = []);
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  Opal.const_set($nesting[0], 'ARGV', []);
  Opal.const_set($nesting[0], 'ARGF', $$($nesting, 'Object').$new());
  Opal.const_set($nesting[0], 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  return ($gvars.SAFE = 0);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/regexp_anchors"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$new']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Opal');

    var $nesting = [self].concat($parent_nesting);

    
    Opal.const_set($nesting[0], 'REGEXP_START', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "^"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'REGEXP_END', (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
      return "$"
    } else {
      return nil
    }; return nil; })());
    Opal.const_set($nesting[0], 'FORBIDDEN_STARTING_IDENTIFIER_CHARS', "\\u0001-\\u002F\\u003A-\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'FORBIDDEN_ENDING_IDENTIFIER_CHARS', "\\u0001-\\u0020\\u0022-\\u002F\\u003A-\\u003E\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'INLINE_IDENTIFIER_REGEXP', $$($nesting, 'Regexp').$new("" + "[^" + ($$($nesting, 'FORBIDDEN_STARTING_IDENTIFIER_CHARS')) + "]*[^" + ($$($nesting, 'FORBIDDEN_ENDING_IDENTIFIER_CHARS')) + "]"));
    Opal.const_set($nesting[0], 'FORBIDDEN_CONST_NAME_CHARS', "\\u0001-\\u0020\\u0021-\\u002F\\u003B-\\u003F\\u0040\\u005B-\\u005E\\u0060\\u007B-\\u007F");
    Opal.const_set($nesting[0], 'CONST_NAME_REGEXP', $$($nesting, 'Regexp').$new("" + ($$($nesting, 'REGEXP_START')) + "(::)?[A-Z][^" + ($$($nesting, 'FORBIDDEN_CONST_NAME_CHARS')) + "]*" + ($$($nesting, 'REGEXP_END'))));
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal/mini"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("corelib/nil");
  self.$require("corelib/boolean");
  self.$require("corelib/string");
  self.$require("corelib/comparable");
  self.$require("corelib/enumerable");
  self.$require("corelib/enumerator");
  self.$require("corelib/array");
  self.$require("corelib/hash");
  self.$require("corelib/number");
  self.$require("corelib/range");
  self.$require("corelib/proc");
  self.$require("corelib/method");
  self.$require("corelib/regexp");
  self.$require("corelib/variables");
  return self.$require("opal/regexp_anchors");
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/kernel/format"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$==', '$length', '$respond_to?', '$[]', '$coerce_to?', '$nil?', '$to_a', '$raise', '$to_int', '$fetch', '$Integer', '$Float', '$to_ary', '$to_str', '$coerce_to', '$inspect', '$to_s']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_format$1;

    
    
    Opal.def(self, '$format', $Kernel_format$1 = function $$format(format_string, $a) {
      var $post_args, args, $b, self = this, ary = nil;
      if ($gvars.DEBUG == null) $gvars.DEBUG = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy((($b = args.$length()['$=='](1)) ? args['$[]'](0)['$respond_to?']("to_ary") : args.$length()['$=='](1)))) {
        
        ary = $$($nesting, 'Opal')['$coerce_to?'](args['$[]'](0), $$($nesting, 'Array'), "to_ary");
        if ($truthy(ary['$nil?']())) {
        } else {
          args = ary.$to_a()
        };};
      
      var result = '',
          //used for slicing:
          begin_slice = 0,
          end_slice,
          //used for iterating over the format string:
          i,
          len = format_string.length,
          //used for processing field values:
          arg,
          str,
          //used for processing %g and %G fields:
          exponent,
          //used for keeping track of width and precision:
          width,
          precision,
          //used for holding temporary values:
          tmp_num,
          //used for processing %{} and %<> fileds:
          hash_parameter_key,
          closing_brace_char,
          //used for processing %b, %B, %o, %x, and %X fields:
          base_number,
          base_prefix,
          base_neg_zero_regex,
          base_neg_zero_digit,
          //used for processing arguments:
          next_arg,
          seq_arg_num = 1,
          pos_arg_num = 0,
          //used for keeping track of flags:
          flags,
          FNONE  = 0,
          FSHARP = 1,
          FMINUS = 2,
          FPLUS  = 4,
          FZERO  = 8,
          FSPACE = 16,
          FWIDTH = 32,
          FPREC  = 64,
          FPREC0 = 128;

      function CHECK_FOR_FLAGS() {
        if (flags&FWIDTH) { self.$raise($$($nesting, 'ArgumentError'), "flag after width") }
        if (flags&FPREC0) { self.$raise($$($nesting, 'ArgumentError'), "flag after precision") }
      }

      function CHECK_FOR_WIDTH() {
        if (flags&FWIDTH) { self.$raise($$($nesting, 'ArgumentError'), "width given twice") }
        if (flags&FPREC0) { self.$raise($$($nesting, 'ArgumentError'), "width after precision") }
      }

      function GET_NTH_ARG(num) {
        if (num >= args.length) { self.$raise($$($nesting, 'ArgumentError'), "too few arguments") }
        return args[num];
      }

      function GET_NEXT_ARG() {
        switch (pos_arg_num) {
        case -1: self.$raise($$($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with numbered")
        case -2: self.$raise($$($nesting, 'ArgumentError'), "" + "unnumbered(" + (seq_arg_num) + ") mixed with named")
        }
        pos_arg_num = seq_arg_num++;
        return GET_NTH_ARG(pos_arg_num - 1);
      }

      function GET_POS_ARG(num) {
        if (pos_arg_num > 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after unnumbered(" + (pos_arg_num) + ")")
        }
        if (pos_arg_num === -2) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "numbered(" + (num) + ") after named")
        }
        if (num < 1) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid index - " + (num) + "$")
        }
        pos_arg_num = -1;
        return GET_NTH_ARG(num - 1);
      }

      function GET_ARG() {
        return (next_arg === undefined ? GET_NEXT_ARG() : next_arg);
      }

      function READ_NUM(label) {
        var num, str = '';
        for (;; i++) {
          if (i === len) {
            self.$raise($$($nesting, 'ArgumentError'), "malformed format string - %*[0-9]")
          }
          if (format_string.charCodeAt(i) < 48 || format_string.charCodeAt(i) > 57) {
            i--;
            num = parseInt(str, 10) || 0;
            if (num > 2147483647) {
              self.$raise($$($nesting, 'ArgumentError'), "" + (label) + " too big")
            }
            return num;
          }
          str += format_string.charAt(i);
        }
      }

      function READ_NUM_AFTER_ASTER(label) {
        var arg, num = READ_NUM(label);
        if (format_string.charAt(i + 1) === '$') {
          i++;
          arg = GET_POS_ARG(num);
        } else {
          arg = GET_NEXT_ARG();
        }
        return (arg).$to_int();
      }

      for (i = format_string.indexOf('%'); i !== -1; i = format_string.indexOf('%', i)) {
        str = undefined;

        flags = FNONE;
        width = -1;
        precision = -1;
        next_arg = undefined;

        end_slice = i;

        i++;

        switch (format_string.charAt(i)) {
        case '%':
          begin_slice = i;
        case '':
        case '\n':
        case '\0':
          i++;
          continue;
        }

        format_sequence: for (; i < len; i++) {
          switch (format_string.charAt(i)) {

          case ' ':
            CHECK_FOR_FLAGS();
            flags |= FSPACE;
            continue format_sequence;

          case '#':
            CHECK_FOR_FLAGS();
            flags |= FSHARP;
            continue format_sequence;

          case '+':
            CHECK_FOR_FLAGS();
            flags |= FPLUS;
            continue format_sequence;

          case '-':
            CHECK_FOR_FLAGS();
            flags |= FMINUS;
            continue format_sequence;

          case '0':
            CHECK_FOR_FLAGS();
            flags |= FZERO;
            continue format_sequence;

          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
            tmp_num = READ_NUM('width');
            if (format_string.charAt(i + 1) === '$') {
              if (i + 2 === len) {
                str = '%';
                i++;
                break format_sequence;
              }
              if (next_arg !== undefined) {
                self.$raise($$($nesting, 'ArgumentError'), "" + "value given twice - %" + (tmp_num) + "$")
              }
              next_arg = GET_POS_ARG(tmp_num);
              i++;
            } else {
              CHECK_FOR_WIDTH();
              flags |= FWIDTH;
              width = tmp_num;
            }
            continue format_sequence;

          case '<':
          case '\{':
            closing_brace_char = (format_string.charAt(i) === '<' ? '>' : '\}');
            hash_parameter_key = '';

            i++;

            for (;; i++) {
              if (i === len) {
                self.$raise($$($nesting, 'ArgumentError'), "malformed name - unmatched parenthesis")
              }
              if (format_string.charAt(i) === closing_brace_char) {

                if (pos_arg_num > 0) {
                  self.$raise($$($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after unnumbered(" + (pos_arg_num) + ")")
                }
                if (pos_arg_num === -1) {
                  self.$raise($$($nesting, 'ArgumentError'), "" + "named " + (hash_parameter_key) + " after numbered")
                }
                pos_arg_num = -2;

                if (args[0] === undefined || !args[0].$$is_hash) {
                  self.$raise($$($nesting, 'ArgumentError'), "one hash required")
                }

                next_arg = (args[0]).$fetch(hash_parameter_key);

                if (closing_brace_char === '>') {
                  continue format_sequence;
                } else {
                  str = next_arg.toString();
                  if (precision !== -1) { str = str.slice(0, precision); }
                  if (flags&FMINUS) {
                    while (str.length < width) { str = str + ' '; }
                  } else {
                    while (str.length < width) { str = ' ' + str; }
                  }
                  break format_sequence;
                }
              }
              hash_parameter_key += format_string.charAt(i);
            }

          case '*':
            i++;
            CHECK_FOR_WIDTH();
            flags |= FWIDTH;
            width = READ_NUM_AFTER_ASTER('width');
            if (width < 0) {
              flags |= FMINUS;
              width = -width;
            }
            continue format_sequence;

          case '.':
            if (flags&FPREC0) {
              self.$raise($$($nesting, 'ArgumentError'), "precision given twice")
            }
            flags |= FPREC|FPREC0;
            precision = 0;
            i++;
            if (format_string.charAt(i) === '*') {
              i++;
              precision = READ_NUM_AFTER_ASTER('precision');
              if (precision < 0) {
                flags &= ~FPREC;
              }
              continue format_sequence;
            }
            precision = READ_NUM('precision');
            continue format_sequence;

          case 'd':
          case 'i':
          case 'u':
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              str = (-arg).toString();
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            break format_sequence;

          case 'b':
          case 'B':
          case 'o':
          case 'x':
          case 'X':
            switch (format_string.charAt(i)) {
            case 'b':
            case 'B':
              base_number = 2;
              base_prefix = '0b';
              base_neg_zero_regex = /^1+/;
              base_neg_zero_digit = '1';
              break;
            case 'o':
              base_number = 8;
              base_prefix = '0';
              base_neg_zero_regex = /^3?7+/;
              base_neg_zero_digit = '7';
              break;
            case 'x':
            case 'X':
              base_number = 16;
              base_prefix = '0x';
              base_neg_zero_regex = /^f+/;
              base_neg_zero_digit = 'f';
              break;
            }
            arg = self.$Integer(GET_ARG());
            if (arg >= 0) {
              str = arg.toString(base_number);
              while (str.length < precision) { str = '0' + str; }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && precision === -1) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0) - ((flags&FSHARP && arg !== 0) ? base_prefix.length : 0)) { str = '0' + str; }
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FSHARP && arg !== 0) { str = base_prefix + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (flags&FPLUS || flags&FSPACE) {
                str = (-arg).toString(base_number);
                while (str.length < precision) { str = '0' + str; }
                if (flags&FMINUS) {
                  if (flags&FSHARP) { str = base_prefix + str; }
                  str = '-' + str;
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 1 - (flags&FSHARP ? 2 : 0)) { str = '0' + str; }
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                  } else {
                    if (flags&FSHARP) { str = base_prefix + str; }
                    str = '-' + str;
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              } else {
                str = (arg >>> 0).toString(base_number).replace(base_neg_zero_regex, base_neg_zero_digit);
                while (str.length < precision - 2) { str = base_neg_zero_digit + str; }
                if (flags&FMINUS) {
                  str = '..' + str;
                  if (flags&FSHARP) { str = base_prefix + str; }
                  while (str.length < width) { str = str + ' '; }
                } else {
                  if (flags&FZERO && precision === -1) {
                    while (str.length < width - 2 - (flags&FSHARP ? base_prefix.length : 0)) { str = base_neg_zero_digit + str; }
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                  } else {
                    str = '..' + str;
                    if (flags&FSHARP) { str = base_prefix + str; }
                    while (str.length < width) { str = ' ' + str; }
                  }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase()) {
              str = str.toUpperCase();
            }
            break format_sequence;

          case 'f':
          case 'e':
          case 'E':
          case 'g':
          case 'G':
            arg = self.$Float(GET_ARG());
            if (arg >= 0 || isNaN(arg)) {
              if (arg === Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = arg.toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = arg.toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = arg.toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = arg.toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== Infinity && !isNaN(arg)) {
                  while (str.length < width - ((flags&FPLUS || flags&FSPACE) ? 1 : 0)) { str = '0' + str; }
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                } else {
                  if (flags&FPLUS || flags&FSPACE) { str = (flags&FPLUS ? '+' : ' ') + str; }
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            } else {
              if (arg === -Infinity) {
                str = 'Inf';
              } else {
                switch (format_string.charAt(i)) {
                case 'f':
                  str = (-arg).toFixed(precision === -1 ? 6 : precision);
                  break;
                case 'e':
                case 'E':
                  str = (-arg).toExponential(precision === -1 ? 6 : precision);
                  break;
                case 'g':
                case 'G':
                  str = (-arg).toExponential();
                  exponent = parseInt(str.split('e')[1], 10);
                  if (!(exponent < -4 || exponent >= (precision === -1 ? 6 : precision))) {
                    str = (-arg).toPrecision(precision === -1 ? (flags&FSHARP ? 6 : undefined) : precision);
                  }
                  break;
                }
              }
              if (flags&FMINUS) {
                str = '-' + str;
                while (str.length < width) { str = str + ' '; }
              } else {
                if (flags&FZERO && arg !== -Infinity) {
                  while (str.length < width - 1) { str = '0' + str; }
                  str = '-' + str;
                } else {
                  str = '-' + str;
                  while (str.length < width) { str = ' ' + str; }
                }
              }
            }
            if (format_string.charAt(i) === format_string.charAt(i).toUpperCase() && arg !== Infinity && arg !== -Infinity && !isNaN(arg)) {
              str = str.toUpperCase();
            }
            str = str.replace(/([eE][-+]?)([0-9])$/, '$10$2');
            break format_sequence;

          case 'a':
          case 'A':
            // Not implemented because there are no specs for this field type.
            self.$raise($$($nesting, 'NotImplementedError'), "`A` and `a` format field types are not implemented in Opal yet")

          case 'c':
            arg = GET_ARG();
            if ((arg)['$respond_to?']("to_ary")) { arg = (arg).$to_ary()[0]; }
            if ((arg)['$respond_to?']("to_str")) {
              str = (arg).$to_str();
            } else {
              str = String.fromCharCode($$($nesting, 'Opal').$coerce_to(arg, $$($nesting, 'Integer'), "to_int"));
            }
            if (str.length !== 1) {
              self.$raise($$($nesting, 'ArgumentError'), "%c requires a character")
            }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 'p':
            str = (GET_ARG()).$inspect();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          case 's':
            str = (GET_ARG()).$to_s();
            if (precision !== -1) { str = str.slice(0, precision); }
            if (flags&FMINUS) {
              while (str.length < width) { str = str + ' '; }
            } else {
              while (str.length < width) { str = ' ' + str; }
            }
            break format_sequence;

          default:
            self.$raise($$($nesting, 'ArgumentError'), "" + "malformed format string - %" + (format_string.charAt(i)))
          }
        }

        if (str === undefined) {
          self.$raise($$($nesting, 'ArgumentError'), "malformed format string - %")
        }

        result += format_string.slice(begin_slice, end_slice) + str;
        begin_slice = i + 1;
      }

      if ($gvars.DEBUG && pos_arg_num >= 0 && seq_arg_num < args.length) {
        self.$raise($$($nesting, 'ArgumentError'), "too many arguments for format string")
      }

      return result + format_string.slice(begin_slice);
    ;
    }, $Kernel_format$1.$$arity = -2);
    Opal.alias(self, "sprintf", "format");
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/string/encoding"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var $$12, $$15, $$18, $$21, $$24, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$+', '$[]', '$new', '$to_proc', '$each', '$const_set', '$sub', '$==', '$default_external', '$upcase', '$raise', '$attr_accessor', '$attr_reader', '$register', '$length', '$bytes', '$to_a', '$each_byte', '$bytesize', '$enum_for', '$each_codepoint', '$force_encoding', '$dup', '$coerce_to!', '$find', '$getbyte']);
  
  self.$require("corelib/string");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Encoding');

    var $nesting = [self].concat($parent_nesting), $Encoding_register$1, $Encoding_find$3, $Encoding_initialize$4, $Encoding_ascii_compatible$ques$5, $Encoding_dummy$ques$6, $Encoding_to_s$7, $Encoding_inspect$8, $Encoding_each_byte$9, $Encoding_getbyte$10, $Encoding_bytesize$11;

    self.$$prototype.ascii = self.$$prototype.dummy = self.$$prototype.name = nil;
    
    Opal.defineProperty(self, '$$register', {});
    Opal.defs(self, '$register', $Encoding_register$1 = function $$register(name, options) {
      var $iter = $Encoding_register$1.$$p, block = $iter || nil, $a, $$2, self = this, names = nil, encoding = nil, register = nil;

      if ($iter) $Encoding_register$1.$$p = null;
      
      
      if ($iter) $Encoding_register$1.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      names = $rb_plus([name], ($truthy($a = options['$[]']("aliases")) ? $a : []));
      encoding = $send($$($nesting, 'Class'), 'new', [self], block.$to_proc()).$new(name, names, ($truthy($a = options['$[]']("ascii")) ? $a : false), ($truthy($a = options['$[]']("dummy")) ? $a : false));
      register = self["$$register"];
      return $send(names, 'each', [], ($$2 = function(encoding_name){var self = $$2.$$s || this;

      
        
        if (encoding_name == null) {
          encoding_name = nil;
        };
        self.$const_set(encoding_name.$sub("-", "_"), encoding);
        return register["" + "$$" + (encoding_name)] = encoding;}, $$2.$$s = self, $$2.$$arity = 1, $$2));
    }, $Encoding_register$1.$$arity = -2);
    Opal.defs(self, '$find', $Encoding_find$3 = function $$find(name) {
      var $a, self = this, register = nil, encoding = nil;

      
      if (name['$==']("default_external")) {
        return self.$default_external()};
      register = self["$$register"];
      encoding = ($truthy($a = register["" + "$$" + (name)]) ? $a : register["" + "$$" + (name.$upcase())]);
      if ($truthy(encoding)) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "unknown encoding name - " + (name))
      };
      return encoding;
    }, $Encoding_find$3.$$arity = 1);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("default_external")
    })(Opal.get_singleton_class(self), $nesting);
    self.$attr_reader("name", "names");
    
    Opal.def(self, '$initialize', $Encoding_initialize$4 = function $$initialize(name, names, ascii, dummy) {
      var self = this;

      
      self.name = name;
      self.names = names;
      self.ascii = ascii;
      return (self.dummy = dummy);
    }, $Encoding_initialize$4.$$arity = 4);
    
    Opal.def(self, '$ascii_compatible?', $Encoding_ascii_compatible$ques$5 = function() {
      var self = this;

      return self.ascii
    }, $Encoding_ascii_compatible$ques$5.$$arity = 0);
    
    Opal.def(self, '$dummy?', $Encoding_dummy$ques$6 = function() {
      var self = this;

      return self.dummy
    }, $Encoding_dummy$ques$6.$$arity = 0);
    
    Opal.def(self, '$to_s', $Encoding_to_s$7 = function $$to_s() {
      var self = this;

      return self.name
    }, $Encoding_to_s$7.$$arity = 0);
    
    Opal.def(self, '$inspect', $Encoding_inspect$8 = function $$inspect() {
      var self = this;

      return "" + "#<Encoding:" + (self.name) + ((function() {if ($truthy(self.dummy)) {
        return " (dummy)"
      } else {
        return nil
      }; return nil; })()) + ">"
    }, $Encoding_inspect$8.$$arity = 0);
    
    Opal.def(self, '$each_byte', $Encoding_each_byte$9 = function $$each_byte($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, $Encoding_each_byte$9.$$arity = -1);
    
    Opal.def(self, '$getbyte', $Encoding_getbyte$10 = function $$getbyte($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, $Encoding_getbyte$10.$$arity = -1);
    
    Opal.def(self, '$bytesize', $Encoding_bytesize$11 = function $$bytesize($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'));
    }, $Encoding_bytesize$11.$$arity = -1);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'EncodingError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CompatibilityError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'EncodingError'), $nesting);
  })($nesting[0], null, $nesting);
  $send($$($nesting, 'Encoding'), 'register', ["UTF-8", $hash2(["aliases", "ascii"], {"aliases": ["CP65001"], "ascii": true})], ($$12 = function(){var self = $$12.$$s || this, $each_byte$13, $bytesize$14;

  
    
    Opal.def(self, '$each_byte', $each_byte$13 = function $$each_byte(string) {
      var $iter = $each_byte$13.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$13.$$p = null;
      
      
      if ($iter) $each_byte$13.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        if (code <= 0x7f) {
          Opal.yield1(block, code);
        }
        else {
          var encoded = encodeURIComponent(string.charAt(i)).substr(1).split('%');

          for (var j = 0, encoded_length = encoded.length; j < encoded_length; j++) {
            Opal.yield1(block, parseInt(encoded[j], 16));
          }
        }
      }
    ;
    }, $each_byte$13.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$14 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$14.$$arity = 1), nil) && 'bytesize';}, $$12.$$s = self, $$12.$$arity = 0, $$12));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-16LE"], ($$15 = function(){var self = $$15.$$s || this, $each_byte$16, $bytesize$17;

  
    
    Opal.def(self, '$each_byte', $each_byte$16 = function $$each_byte(string) {
      var $iter = $each_byte$16.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$16.$$p = null;
      
      
      if ($iter) $each_byte$16.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, $each_byte$16.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$17 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$17.$$arity = 1), nil) && 'bytesize';}, $$15.$$s = self, $$15.$$arity = 0, $$15));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-16BE"], ($$18 = function(){var self = $$18.$$s || this, $each_byte$19, $bytesize$20;

  
    
    Opal.def(self, '$each_byte', $each_byte$19 = function $$each_byte(string) {
      var $iter = $each_byte$19.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$19.$$p = null;
      
      
      if ($iter) $each_byte$19.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code >> 8);
        Opal.yield1(block, code & 0xff);
      }
    ;
    }, $each_byte$19.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$20 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$20.$$arity = 1), nil) && 'bytesize';}, $$18.$$s = self, $$18.$$arity = 0, $$18));
  $send($$($nesting, 'Encoding'), 'register', ["UTF-32LE"], ($$21 = function(){var self = $$21.$$s || this, $each_byte$22, $bytesize$23;

  
    
    Opal.def(self, '$each_byte', $each_byte$22 = function $$each_byte(string) {
      var $iter = $each_byte$22.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$22.$$p = null;
      
      
      if ($iter) $each_byte$22.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);

        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, $each_byte$22.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$23 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$23.$$arity = 1), nil) && 'bytesize';}, $$21.$$s = self, $$21.$$arity = 0, $$21));
  $send($$($nesting, 'Encoding'), 'register', ["ASCII-8BIT", $hash2(["aliases", "ascii", "dummy"], {"aliases": ["BINARY", "US-ASCII", "ASCII"], "ascii": true, "dummy": true})], ($$24 = function(){var self = $$24.$$s || this, $each_byte$25, $bytesize$26;

  
    
    Opal.def(self, '$each_byte', $each_byte$25 = function $$each_byte(string) {
      var $iter = $each_byte$25.$$p, block = $iter || nil, self = this;

      if ($iter) $each_byte$25.$$p = null;
      
      
      if ($iter) $each_byte$25.$$p = null;;
      
      for (var i = 0, length = string.length; i < length; i++) {
        var code = string.charCodeAt(i);
        Opal.yield1(block, code & 0xff);
        Opal.yield1(block, code >> 8);
      }
    ;
    }, $each_byte$25.$$arity = 1);
    return (Opal.def(self, '$bytesize', $bytesize$26 = function $$bytesize(string) {
      var self = this;

      return string.$bytes().$length()
    }, $bytesize$26.$$arity = 1), nil) && 'bytesize';}, $$24.$$s = self, $$24.$$arity = 0, $$24));
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_bytes$27, $String_bytesize$28, $String_each_byte$29, $String_each_codepoint$30, $String_codepoints$31, $String_encode$32, $String_force_encoding$33, $String_getbyte$34, $String_valid_encoding$ques$35;

    self.$$prototype.encoding = nil;
    
    self.$attr_reader("encoding");
    Opal.defineProperty(String.prototype, 'encoding', $$$($$($nesting, 'Encoding'), 'UTF_16LE'));
    
    Opal.def(self, '$bytes', $String_bytes$27 = function $$bytes() {
      var self = this;

      return self.$each_byte().$to_a()
    }, $String_bytes$27.$$arity = 0);
    
    Opal.def(self, '$bytesize', $String_bytesize$28 = function $$bytesize() {
      var self = this;

      return self.encoding.$bytesize(self)
    }, $String_bytesize$28.$$arity = 0);
    
    Opal.def(self, '$each_byte', $String_each_byte$29 = function $$each_byte() {
      var $iter = $String_each_byte$29.$$p, block = $iter || nil, self = this;

      if ($iter) $String_each_byte$29.$$p = null;
      
      
      if ($iter) $String_each_byte$29.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_byte")
      };
      $send(self.encoding, 'each_byte', [self], block.$to_proc());
      return self;
    }, $String_each_byte$29.$$arity = 0);
    
    Opal.def(self, '$each_codepoint', $String_each_codepoint$30 = function $$each_codepoint() {
      var $iter = $String_each_codepoint$30.$$p, block = $iter || nil, self = this;

      if ($iter) $String_each_codepoint$30.$$p = null;
      
      
      if ($iter) $String_each_codepoint$30.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$enum_for("each_codepoint")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        Opal.yield1(block, self.codePointAt(i));
      }
    ;
      return self;
    }, $String_each_codepoint$30.$$arity = 0);
    
    Opal.def(self, '$codepoints', $String_codepoints$31 = function $$codepoints() {
      var $iter = $String_codepoints$31.$$p, block = $iter || nil, self = this;

      if ($iter) $String_codepoints$31.$$p = null;
      
      
      if ($iter) $String_codepoints$31.$$p = null;;
      if ((block !== nil)) {
        return $send(self, 'each_codepoint', [], block.$to_proc())};
      return self.$each_codepoint().$to_a();
    }, $String_codepoints$31.$$arity = 0);
    
    Opal.def(self, '$encode', $String_encode$32 = function $$encode(encoding) {
      var self = this;

      return self.$dup().$force_encoding(encoding)
    }, $String_encode$32.$$arity = 1);
    
    Opal.def(self, '$force_encoding', $String_force_encoding$33 = function $$force_encoding(encoding) {
      var self = this;

      
      if (encoding === self.encoding) { return self; }

      encoding = $$($nesting, 'Opal')['$coerce_to!'](encoding, $$($nesting, 'String'), "to_s");
      encoding = $$($nesting, 'Encoding').$find(encoding);

      if (encoding === self.encoding) { return self; }

      self.encoding = encoding;
      return self;
    
    }, $String_force_encoding$33.$$arity = 1);
    
    Opal.def(self, '$getbyte', $String_getbyte$34 = function $$getbyte(idx) {
      var self = this;

      return self.encoding.$getbyte(self, idx)
    }, $String_getbyte$34.$$arity = 1);
    return (Opal.def(self, '$valid_encoding?', $String_valid_encoding$ques$35 = function() {
      var self = this;

      return true
    }, $String_valid_encoding$ques$35.$$arity = 0), nil) && 'valid_encoding?';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/math"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$raise', '$Float', '$type_error', '$Integer', '$module_function', '$checked', '$float!', '$===', '$gamma', '$-', '$integer!', '$/', '$infinite?']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Math');

    var $nesting = [self].concat($parent_nesting), $Math_checked$1, $Math_float$excl$2, $Math_integer$excl$3, $Math_acos$4, $Math_acosh$5, $Math_asin$6, $Math_asinh$7, $Math_atan$8, $Math_atan2$9, $Math_atanh$10, $Math_cbrt$11, $Math_cos$12, $Math_cosh$13, $Math_erf$14, $Math_erfc$15, $Math_exp$16, $Math_frexp$17, $Math_gamma$18, $Math_hypot$19, $Math_ldexp$20, $Math_lgamma$21, $Math_log$22, $Math_log10$23, $Math_log2$24, $Math_sin$25, $Math_sinh$26, $Math_sqrt$27, $Math_tan$28, $Math_tanh$29;

    
    Opal.const_set($nesting[0], 'E', Math.E);
    Opal.const_set($nesting[0], 'PI', Math.PI);
    Opal.const_set($nesting[0], 'DomainError', $$($nesting, 'Class').$new($$($nesting, 'StandardError')));
    Opal.defs(self, '$checked', $Math_checked$1 = function $$checked(method, $a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      if (isNaN(args[0]) || (args.length == 2 && isNaN(args[1]))) {
        return NaN;
      }

      var result = Math[method].apply(null, args);

      if (isNaN(result)) {
        self.$raise($$($nesting, 'DomainError'), "" + "Numerical argument is out of domain - \"" + (method) + "\"");
      }

      return result;
    ;
    }, $Math_checked$1.$$arity = -2);
    Opal.defs(self, '$float!', $Math_float$excl$2 = function(value) {
      var self = this;

      try {
        return self.$Float(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return self.$raise($$($nesting, 'Opal').$type_error(value, $$($nesting, 'Float')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Math_float$excl$2.$$arity = 1);
    Opal.defs(self, '$integer!', $Math_integer$excl$3 = function(value) {
      var self = this;

      try {
        return self.$Integer(value)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'ArgumentError')])) {
          try {
            return self.$raise($$($nesting, 'Opal').$type_error(value, $$($nesting, 'Integer')))
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $Math_integer$excl$3.$$arity = 1);
    self.$module_function();
    
    Opal.def(self, '$acos', $Math_acos$4 = function $$acos(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("acos", $$($nesting, 'Math')['$float!'](x))
    }, $Math_acos$4.$$arity = 1);
    if ($truthy((typeof(Math.acosh) !== "undefined"))) {
    } else {
      
      Math.acosh = function(x) {
        return Math.log(x + Math.sqrt(x * x - 1));
      }
    
    };
    
    Opal.def(self, '$acosh', $Math_acosh$5 = function $$acosh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("acosh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_acosh$5.$$arity = 1);
    
    Opal.def(self, '$asin', $Math_asin$6 = function $$asin(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("asin", $$($nesting, 'Math')['$float!'](x))
    }, $Math_asin$6.$$arity = 1);
    if ($truthy((typeof(Math.asinh) !== "undefined"))) {
    } else {
      
      Math.asinh = function(x) {
        return Math.log(x + Math.sqrt(x * x + 1))
      }
    
    };
    
    Opal.def(self, '$asinh', $Math_asinh$7 = function $$asinh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("asinh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_asinh$7.$$arity = 1);
    
    Opal.def(self, '$atan', $Math_atan$8 = function $$atan(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atan", $$($nesting, 'Math')['$float!'](x))
    }, $Math_atan$8.$$arity = 1);
    
    Opal.def(self, '$atan2', $Math_atan2$9 = function $$atan2(y, x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atan2", $$($nesting, 'Math')['$float!'](y), $$($nesting, 'Math')['$float!'](x))
    }, $Math_atan2$9.$$arity = 2);
    if ($truthy((typeof(Math.atanh) !== "undefined"))) {
    } else {
      
      Math.atanh = function(x) {
        return 0.5 * Math.log((1 + x) / (1 - x));
      }
    
    };
    
    Opal.def(self, '$atanh', $Math_atanh$10 = function $$atanh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("atanh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_atanh$10.$$arity = 1);
    if ($truthy((typeof(Math.cbrt) !== "undefined"))) {
    } else {
      
      Math.cbrt = function(x) {
        if (x == 0) {
          return 0;
        }

        if (x < 0) {
          return -Math.cbrt(-x);
        }

        var r  = x,
            ex = 0;

        while (r < 0.125) {
          r *= 8;
          ex--;
        }

        while (r > 1.0) {
          r *= 0.125;
          ex++;
        }

        r = (-0.46946116 * r + 1.072302) * r + 0.3812513;

        while (ex < 0) {
          r *= 0.5;
          ex++;
        }

        while (ex > 0) {
          r *= 2;
          ex--;
        }

        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);
        r = (2.0 / 3.0) * r + (1.0 / 3.0) * x / (r * r);

        return r;
      }
    
    };
    
    Opal.def(self, '$cbrt', $Math_cbrt$11 = function $$cbrt(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cbrt", $$($nesting, 'Math')['$float!'](x))
    }, $Math_cbrt$11.$$arity = 1);
    
    Opal.def(self, '$cos', $Math_cos$12 = function $$cos(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cos", $$($nesting, 'Math')['$float!'](x))
    }, $Math_cos$12.$$arity = 1);
    if ($truthy((typeof(Math.cosh) !== "undefined"))) {
    } else {
      
      Math.cosh = function(x) {
        return (Math.exp(x) + Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.def(self, '$cosh', $Math_cosh$13 = function $$cosh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("cosh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_cosh$13.$$arity = 1);
    if ($truthy((typeof(Math.erf) !== "undefined"))) {
    } else {
      
      Opal.defineProperty(Math, 'erf', function(x) {
        var A1 =  0.254829592,
            A2 = -0.284496736,
            A3 =  1.421413741,
            A4 = -1.453152027,
            A5 =  1.061405429,
            P  =  0.3275911;

        var sign = 1;

        if (x < 0) {
            sign = -1;
        }

        x = Math.abs(x);

        var t = 1.0 / (1.0 + P * x);
        var y = 1.0 - (((((A5 * t + A4) * t) + A3) * t + A2) * t + A1) * t * Math.exp(-x * x);

        return sign * y;
      });
    
    };
    
    Opal.def(self, '$erf', $Math_erf$14 = function $$erf(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("erf", $$($nesting, 'Math')['$float!'](x))
    }, $Math_erf$14.$$arity = 1);
    if ($truthy((typeof(Math.erfc) !== "undefined"))) {
    } else {
      
      Opal.defineProperty(Math, 'erfc', function(x) {
        var z = Math.abs(x),
            t = 1.0 / (0.5 * z + 1.0);

        var A1 = t * 0.17087277 + -0.82215223,
            A2 = t * A1 + 1.48851587,
            A3 = t * A2 + -1.13520398,
            A4 = t * A3 + 0.27886807,
            A5 = t * A4 + -0.18628806,
            A6 = t * A5 + 0.09678418,
            A7 = t * A6 + 0.37409196,
            A8 = t * A7 + 1.00002368,
            A9 = t * A8,
            A10 = -z * z - 1.26551223 + A9;

        var a = t * Math.exp(A10);

        if (x < 0.0) {
          return 2.0 - a;
        }
        else {
          return a;
        }
      });
    
    };
    
    Opal.def(self, '$erfc', $Math_erfc$15 = function $$erfc(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("erfc", $$($nesting, 'Math')['$float!'](x))
    }, $Math_erfc$15.$$arity = 1);
    
    Opal.def(self, '$exp', $Math_exp$16 = function $$exp(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("exp", $$($nesting, 'Math')['$float!'](x))
    }, $Math_exp$16.$$arity = 1);
    
    Opal.def(self, '$frexp', $Math_frexp$17 = function $$frexp(x) {
      var self = this;

      
      x = $$($nesting, 'Math')['$float!'](x);
      
      if (isNaN(x)) {
        return [NaN, 0];
      }

      var ex   = Math.floor(Math.log(Math.abs(x)) / Math.log(2)) + 1,
          frac = x / Math.pow(2, ex);

      return [frac, ex];
    ;
    }, $Math_frexp$17.$$arity = 1);
    
    Opal.def(self, '$gamma', $Math_gamma$18 = function $$gamma(n) {
      var self = this;

      
      n = $$($nesting, 'Math')['$float!'](n);
      
      var i, t, x, value, result, twoN, threeN, fourN, fiveN;

      var G = 4.7421875;

      var P = [
         0.99999999999999709182,
         57.156235665862923517,
        -59.597960355475491248,
         14.136097974741747174,
        -0.49191381609762019978,
         0.33994649984811888699e-4,
         0.46523628927048575665e-4,
        -0.98374475304879564677e-4,
         0.15808870322491248884e-3,
        -0.21026444172410488319e-3,
         0.21743961811521264320e-3,
        -0.16431810653676389022e-3,
         0.84418223983852743293e-4,
        -0.26190838401581408670e-4,
         0.36899182659531622704e-5
      ];


      if (isNaN(n)) {
        return NaN;
      }

      if (n === 0 && 1 / n < 0) {
        return -Infinity;
      }

      if (n === -1 || n === -Infinity) {
        self.$raise($$($nesting, 'DomainError'), "Numerical argument is out of domain - \"gamma\"");
      }

      if ($$($nesting, 'Integer')['$==='](n)) {
        if (n <= 0) {
          return isFinite(n) ? Infinity : NaN;
        }

        if (n > 171) {
          return Infinity;
        }

        value  = n - 2;
        result = n - 1;

        while (value > 1) {
          result *= value;
          value--;
        }

        if (result == 0) {
          result = 1;
        }

        return result;
      }

      if (n < 0.5) {
        return Math.PI / (Math.sin(Math.PI * n) * $$($nesting, 'Math').$gamma($rb_minus(1, n)));
      }

      if (n >= 171.35) {
        return Infinity;
      }

      if (n > 85.0) {
        twoN   = n * n;
        threeN = twoN * n;
        fourN  = threeN * n;
        fiveN  = fourN * n;

        return Math.sqrt(2 * Math.PI / n) * Math.pow((n / Math.E), n) *
          (1 + 1 / (12 * n) + 1 / (288 * twoN) - 139 / (51840 * threeN) -
          571 / (2488320 * fourN) + 163879 / (209018880 * fiveN) +
          5246819 / (75246796800 * fiveN * n));
      }

      n -= 1;
      x  = P[0];

      for (i = 1; i < P.length; ++i) {
        x += P[i] / (n + i);
      }

      t = n + G + 0.5;

      return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * x;
    ;
    }, $Math_gamma$18.$$arity = 1);
    if ($truthy((typeof(Math.hypot) !== "undefined"))) {
    } else {
      
      Math.hypot = function(x, y) {
        return Math.sqrt(x * x + y * y)
      }
    
    };
    
    Opal.def(self, '$hypot', $Math_hypot$19 = function $$hypot(x, y) {
      var self = this;

      return $$($nesting, 'Math').$checked("hypot", $$($nesting, 'Math')['$float!'](x), $$($nesting, 'Math')['$float!'](y))
    }, $Math_hypot$19.$$arity = 2);
    
    Opal.def(self, '$ldexp', $Math_ldexp$20 = function $$ldexp(mantissa, exponent) {
      var self = this;

      
      mantissa = $$($nesting, 'Math')['$float!'](mantissa);
      exponent = $$($nesting, 'Math')['$integer!'](exponent);
      
      if (isNaN(exponent)) {
        self.$raise($$($nesting, 'RangeError'), "float NaN out of range of integer");
      }

      return mantissa * Math.pow(2, exponent);
    ;
    }, $Math_ldexp$20.$$arity = 2);
    
    Opal.def(self, '$lgamma', $Math_lgamma$21 = function $$lgamma(n) {
      var self = this;

      
      if (n == -1) {
        return [Infinity, 1];
      }
      else {
        return [Math.log(Math.abs($$($nesting, 'Math').$gamma(n))), $$($nesting, 'Math').$gamma(n) < 0 ? -1 : 1];
      }
    
    }, $Math_lgamma$21.$$arity = 1);
    
    Opal.def(self, '$log', $Math_log$22 = function $$log(x, base) {
      var self = this;

      
      ;
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($$($nesting, 'Opal').$type_error(x, $$($nesting, 'Float')))};
      if ($truthy(base == null)) {
        return $$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](x))
      } else {
        
        if ($truthy($$($nesting, 'String')['$==='](base))) {
          self.$raise($$($nesting, 'Opal').$type_error(base, $$($nesting, 'Float')))};
        return $rb_divide($$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](x)), $$($nesting, 'Math').$checked("log", $$($nesting, 'Math')['$float!'](base)));
      };
    }, $Math_log$22.$$arity = -2);
    if ($truthy((typeof(Math.log10) !== "undefined"))) {
    } else {
      
      Math.log10 = function(x) {
        return Math.log(x) / Math.LN10;
      }
    
    };
    
    Opal.def(self, '$log10', $Math_log10$23 = function $$log10(x) {
      var self = this;

      
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($$($nesting, 'Opal').$type_error(x, $$($nesting, 'Float')))};
      return $$($nesting, 'Math').$checked("log10", $$($nesting, 'Math')['$float!'](x));
    }, $Math_log10$23.$$arity = 1);
    if ($truthy((typeof(Math.log2) !== "undefined"))) {
    } else {
      
      Math.log2 = function(x) {
        return Math.log(x) / Math.LN2;
      }
    
    };
    
    Opal.def(self, '$log2', $Math_log2$24 = function $$log2(x) {
      var self = this;

      
      if ($truthy($$($nesting, 'String')['$==='](x))) {
        self.$raise($$($nesting, 'Opal').$type_error(x, $$($nesting, 'Float')))};
      return $$($nesting, 'Math').$checked("log2", $$($nesting, 'Math')['$float!'](x));
    }, $Math_log2$24.$$arity = 1);
    
    Opal.def(self, '$sin', $Math_sin$25 = function $$sin(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sin", $$($nesting, 'Math')['$float!'](x))
    }, $Math_sin$25.$$arity = 1);
    if ($truthy((typeof(Math.sinh) !== "undefined"))) {
    } else {
      
      Math.sinh = function(x) {
        return (Math.exp(x) - Math.exp(-x)) / 2;
      }
    
    };
    
    Opal.def(self, '$sinh', $Math_sinh$26 = function $$sinh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sinh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_sinh$26.$$arity = 1);
    
    Opal.def(self, '$sqrt', $Math_sqrt$27 = function $$sqrt(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("sqrt", $$($nesting, 'Math')['$float!'](x))
    }, $Math_sqrt$27.$$arity = 1);
    
    Opal.def(self, '$tan', $Math_tan$28 = function $$tan(x) {
      var self = this;

      
      x = $$($nesting, 'Math')['$float!'](x);
      if ($truthy(x['$infinite?']())) {
        return $$$($$($nesting, 'Float'), 'NAN')};
      return $$($nesting, 'Math').$checked("tan", $$($nesting, 'Math')['$float!'](x));
    }, $Math_tan$28.$$arity = 1);
    if ($truthy((typeof(Math.tanh) !== "undefined"))) {
    } else {
      
      Math.tanh = function(x) {
        if (x == Infinity) {
          return 1;
        }
        else if (x == -Infinity) {
          return -1;
        }
        else {
          return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
        }
      }
    
    };
    
    Opal.def(self, '$tanh', $Math_tanh$29 = function $$tanh(x) {
      var self = this;

      return $$($nesting, 'Math').$checked("tanh", $$($nesting, 'Math')['$float!'](x))
    }, $Math_tanh$29.$$arity = 1);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/complex"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$===', '$real?', '$raise', '$new', '$*', '$cos', '$sin', '$attr_reader', '$class', '$==', '$real', '$imag', '$Complex', '$-@', '$+', '$__coerced__', '$-', '$nan?', '$/', '$conj', '$abs2', '$quo', '$polar', '$exp', '$log', '$>', '$!=', '$divmod', '$**', '$hypot', '$atan2', '$lcm', '$denominator', '$finite?', '$infinite?', '$numerator', '$abs', '$arg', '$rationalize', '$to_f', '$to_i', '$to_r', '$inspect', '$positive?', '$zero?', '$Rational']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Complex');

    var $nesting = [self].concat($parent_nesting), $Complex_rect$1, $Complex_polar$2, $Complex_initialize$3, $Complex_coerce$4, $Complex_$eq_eq$5, $Complex_$minus$$6, $Complex_$plus$7, $Complex_$minus$8, $Complex_$$9, $Complex_$slash$10, $Complex_$$$11, $Complex_abs$12, $Complex_abs2$13, $Complex_angle$14, $Complex_conj$15, $Complex_denominator$16, $Complex_eql$ques$17, $Complex_fdiv$18, $Complex_finite$ques$19, $Complex_hash$20, $Complex_infinite$ques$21, $Complex_inspect$22, $Complex_numerator$23, $Complex_polar$24, $Complex_rationalize$25, $Complex_real$ques$26, $Complex_rect$27, $Complex_to_f$28, $Complex_to_i$29, $Complex_to_r$30, $Complex_to_s$31;

    self.$$prototype.real = self.$$prototype.imag = nil;
    
    Opal.defs(self, '$rect', $Complex_rect$1 = function $$rect(real, imag) {
      var $a, $b, $c, self = this;

      
      
      if (imag == null) {
        imag = 0;
      };
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Numeric')['$==='](real)) ? real['$real?']() : $c)) ? $$($nesting, 'Numeric')['$==='](imag) : $b)) ? imag['$real?']() : $a))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not a real")
      };
      return self.$new(real, imag);
    }, $Complex_rect$1.$$arity = -2);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "rectangular", "rect")
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$polar', $Complex_polar$2 = function $$polar(r, theta) {
      var $a, $b, $c, self = this;

      
      
      if (theta == null) {
        theta = 0;
      };
      if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Numeric')['$==='](r)) ? r['$real?']() : $c)) ? $$($nesting, 'Numeric')['$==='](theta) : $b)) ? theta['$real?']() : $a))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not a real")
      };
      return self.$new($rb_times(r, $$($nesting, 'Math').$cos(theta)), $rb_times(r, $$($nesting, 'Math').$sin(theta)));
    }, $Complex_polar$2.$$arity = -2);
    self.$attr_reader("real", "imag");
    
    Opal.def(self, '$initialize', $Complex_initialize$3 = function $$initialize(real, imag) {
      var self = this;

      
      
      if (imag == null) {
        imag = 0;
      };
      self.real = real;
      return (self.imag = imag);
    }, $Complex_initialize$3.$$arity = -2);
    
    Opal.def(self, '$coerce', $Complex_coerce$4 = function $$coerce(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return [other, self]
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return [$$($nesting, 'Complex').$new(other, 0), self]
      } else {
        return self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      }
    }, $Complex_coerce$4.$$arity = 1);
    
    Opal.def(self, '$==', $Complex_$eq_eq$5 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return (($a = self.real['$=='](other.$real())) ? self.imag['$=='](other.$imag()) : self.real['$=='](other.$real()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return (($a = self.real['$=='](other)) ? self.imag['$=='](0) : self.real['$=='](other))
      } else {
        return other['$=='](self)
      }
    }, $Complex_$eq_eq$5.$$arity = 1);
    
    Opal.def(self, '$-@', $Complex_$minus$$6 = function() {
      var self = this;

      return self.$Complex(self.real['$-@'](), self.imag['$-@']())
    }, $Complex_$minus$$6.$$arity = 0);
    
    Opal.def(self, '$+', $Complex_$plus$7 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_plus(self.real, other.$real()), $rb_plus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_plus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("+", other)
      }
    }, $Complex_$plus$7.$$arity = 1);
    
    Opal.def(self, '$-', $Complex_$minus$8 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus(self.real, other.$real()), $rb_minus(self.imag, other.$imag()))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_minus(self.real, other), self.imag)
      } else {
        return self.$__coerced__("-", other)
      }
    }, $Complex_$minus$8.$$arity = 1);
    
    Opal.def(self, '$*', $Complex_$$9 = function(other) {
      var $a, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        return self.$Complex($rb_minus($rb_times(self.real, other.$real()), $rb_times(self.imag, other.$imag())), $rb_plus($rb_times(self.real, other.$imag()), $rb_times(self.imag, other.$real())))
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex($rb_times(self.real, other), $rb_times(self.imag, other))
      } else {
        return self.$__coerced__("*", other)
      }
    }, $Complex_$$9.$$arity = 1);
    
    Opal.def(self, '$/', $Complex_$slash$10 = function(other) {
      var $a, $b, $c, $d, self = this;

      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = ($truthy($d = $$($nesting, 'Number')['$==='](self.real)) ? self.real['$nan?']() : $d)) ? $c : ($truthy($d = $$($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $d))) ? $b : ($truthy($c = $$($nesting, 'Number')['$==='](other.$real())) ? other.$real()['$nan?']() : $c))) ? $a : ($truthy($b = $$($nesting, 'Number')['$==='](other.$imag())) ? other.$imag()['$nan?']() : $b)))) {
          return $$($nesting, 'Complex').$new($$$($$($nesting, 'Float'), 'NAN'), $$$($$($nesting, 'Float'), 'NAN'))
        } else {
          return $rb_divide($rb_times(self, other.$conj()), other.$abs2())
        }
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](other)) ? other['$real?']() : $a))) {
        return self.$Complex(self.real.$quo(other), self.imag.$quo(other))
      } else {
        return self.$__coerced__("/", other)
      }
    }, $Complex_$slash$10.$$arity = 1);
    
    Opal.def(self, '$**', $Complex_$$$11 = function(other) {
      var $a, $b, $c, $d, self = this, r = nil, theta = nil, ore = nil, oim = nil, nr = nil, ntheta = nil, x = nil, z = nil, n = nil, div = nil, mod = nil;

      
      if (other['$=='](0)) {
        return $$($nesting, 'Complex').$new(1, 0)};
      if ($truthy($$($nesting, 'Complex')['$==='](other))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        ore = other.$real();
        oim = other.$imag();
        nr = $$($nesting, 'Math').$exp($rb_minus($rb_times(ore, $$($nesting, 'Math').$log(r)), $rb_times(oim, theta)));
        ntheta = $rb_plus($rb_times(theta, ore), $rb_times(oim, $$($nesting, 'Math').$log(r)));
        return $$($nesting, 'Complex').$polar(nr, ntheta);
      } else if ($truthy($$($nesting, 'Integer')['$==='](other))) {
        if ($truthy($rb_gt(other, 0))) {
          
          x = self;
          z = x;
          n = $rb_minus(other, 1);
          while ($truthy(n['$!='](0))) {
            
            $c = n.$divmod(2), $b = Opal.to_ary($c), (div = ($b[0] == null ? nil : $b[0])), (mod = ($b[1] == null ? nil : $b[1])), $c;
            while (mod['$=='](0)) {
              
              x = self.$Complex($rb_minus($rb_times(x.$real(), x.$real()), $rb_times(x.$imag(), x.$imag())), $rb_times($rb_times(2, x.$real()), x.$imag()));
              n = div;
              $d = n.$divmod(2), $c = Opal.to_ary($d), (div = ($c[0] == null ? nil : $c[0])), (mod = ($c[1] == null ? nil : $c[1])), $d;
            };
            z = $rb_times(z, x);
            n = $rb_minus(n, 1);
          };
          return z;
        } else {
          return $rb_divide($$($nesting, 'Rational').$new(1, 1), self)['$**'](other['$-@']())
        }
      } else if ($truthy(($truthy($a = $$($nesting, 'Float')['$==='](other)) ? $a : $$($nesting, 'Rational')['$==='](other)))) {
        
        $b = self.$polar(), $a = Opal.to_ary($b), (r = ($a[0] == null ? nil : $a[0])), (theta = ($a[1] == null ? nil : $a[1])), $b;
        return $$($nesting, 'Complex').$polar(r['$**'](other), $rb_times(theta, other));
      } else {
        return self.$__coerced__("**", other)
      };
    }, $Complex_$$$11.$$arity = 1);
    
    Opal.def(self, '$abs', $Complex_abs$12 = function $$abs() {
      var self = this;

      return $$($nesting, 'Math').$hypot(self.real, self.imag)
    }, $Complex_abs$12.$$arity = 0);
    
    Opal.def(self, '$abs2', $Complex_abs2$13 = function $$abs2() {
      var self = this;

      return $rb_plus($rb_times(self.real, self.real), $rb_times(self.imag, self.imag))
    }, $Complex_abs2$13.$$arity = 0);
    
    Opal.def(self, '$angle', $Complex_angle$14 = function $$angle() {
      var self = this;

      return $$($nesting, 'Math').$atan2(self.imag, self.real)
    }, $Complex_angle$14.$$arity = 0);
    Opal.alias(self, "arg", "angle");
    
    Opal.def(self, '$conj', $Complex_conj$15 = function $$conj() {
      var self = this;

      return self.$Complex(self.real, self.imag['$-@']())
    }, $Complex_conj$15.$$arity = 0);
    Opal.alias(self, "conjugate", "conj");
    
    Opal.def(self, '$denominator', $Complex_denominator$16 = function $$denominator() {
      var self = this;

      return self.real.$denominator().$lcm(self.imag.$denominator())
    }, $Complex_denominator$16.$$arity = 0);
    Opal.alias(self, "divide", "/");
    
    Opal.def(self, '$eql?', $Complex_eql$ques$17 = function(other) {
      var $a, $b, self = this;

      return ($truthy($a = ($truthy($b = $$($nesting, 'Complex')['$==='](other)) ? self.real.$class()['$=='](self.imag.$class()) : $b)) ? self['$=='](other) : $a)
    }, $Complex_eql$ques$17.$$arity = 1);
    
    Opal.def(self, '$fdiv', $Complex_fdiv$18 = function $$fdiv(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Numeric')['$==='](other))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (other.$class()) + " can't be coerced into Complex")
      };
      return $rb_divide(self, other);
    }, $Complex_fdiv$18.$$arity = 1);
    
    Opal.def(self, '$finite?', $Complex_finite$ques$19 = function() {
      var $a, self = this;

      return ($truthy($a = self.real['$finite?']()) ? self.imag['$finite?']() : $a)
    }, $Complex_finite$ques$19.$$arity = 0);
    
    Opal.def(self, '$hash', $Complex_hash$20 = function $$hash() {
      var self = this;

      return "" + "Complex:" + (self.real) + ":" + (self.imag)
    }, $Complex_hash$20.$$arity = 0);
    Opal.alias(self, "imaginary", "imag");
    
    Opal.def(self, '$infinite?', $Complex_infinite$ques$21 = function() {
      var $a, self = this;

      return ($truthy($a = self.real['$infinite?']()) ? $a : self.imag['$infinite?']())
    }, $Complex_infinite$ques$21.$$arity = 0);
    
    Opal.def(self, '$inspect', $Complex_inspect$22 = function $$inspect() {
      var self = this;

      return "" + "(" + (self) + ")"
    }, $Complex_inspect$22.$$arity = 0);
    Opal.alias(self, "magnitude", "abs");
    
    Opal.udef(self, '$' + "negative?");;
    
    Opal.def(self, '$numerator', $Complex_numerator$23 = function $$numerator() {
      var self = this, d = nil;

      
      d = self.$denominator();
      return self.$Complex($rb_times(self.real.$numerator(), $rb_divide(d, self.real.$denominator())), $rb_times(self.imag.$numerator(), $rb_divide(d, self.imag.$denominator())));
    }, $Complex_numerator$23.$$arity = 0);
    Opal.alias(self, "phase", "arg");
    
    Opal.def(self, '$polar', $Complex_polar$24 = function $$polar() {
      var self = this;

      return [self.$abs(), self.$arg()]
    }, $Complex_polar$24.$$arity = 0);
    
    Opal.udef(self, '$' + "positive?");;
    Opal.alias(self, "quo", "/");
    
    Opal.def(self, '$rationalize', $Complex_rationalize$25 = function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }
    ;
      if ($truthy(self.imag['$!='](0))) {
        self.$raise($$($nesting, 'RangeError'), "" + "can't' convert " + (self) + " into Rational")};
      return self.$real().$rationalize(eps);
    }, $Complex_rationalize$25.$$arity = -1);
    
    Opal.def(self, '$real?', $Complex_real$ques$26 = function() {
      var self = this;

      return false
    }, $Complex_real$ques$26.$$arity = 0);
    
    Opal.def(self, '$rect', $Complex_rect$27 = function $$rect() {
      var self = this;

      return [self.real, self.imag]
    }, $Complex_rect$27.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.def(self, '$to_f', $Complex_to_f$28 = function $$to_f() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Float")
      };
      return self.real.$to_f();
    }, $Complex_to_f$28.$$arity = 0);
    
    Opal.def(self, '$to_i', $Complex_to_i$29 = function $$to_i() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Integer")
      };
      return self.real.$to_i();
    }, $Complex_to_i$29.$$arity = 0);
    
    Opal.def(self, '$to_r', $Complex_to_r$30 = function $$to_r() {
      var self = this;

      
      if (self.imag['$=='](0)) {
      } else {
        self.$raise($$($nesting, 'RangeError'), "" + "can't convert " + (self) + " into Rational")
      };
      return self.real.$to_r();
    }, $Complex_to_r$30.$$arity = 0);
    
    Opal.def(self, '$to_s', $Complex_to_s$31 = function $$to_s() {
      var $a, $b, $c, self = this, result = nil;

      
      result = self.real.$inspect();
      result = $rb_plus(result, (function() {if ($truthy(($truthy($a = ($truthy($b = ($truthy($c = $$($nesting, 'Number')['$==='](self.imag)) ? self.imag['$nan?']() : $c)) ? $b : self.imag['$positive?']())) ? $a : self.imag['$zero?']()))) {
        return "+"
      } else {
        return "-"
      }; return nil; })());
      result = $rb_plus(result, self.imag.$abs().$inspect());
      if ($truthy(($truthy($a = $$($nesting, 'Number')['$==='](self.imag)) ? ($truthy($b = self.imag['$nan?']()) ? $b : self.imag['$infinite?']()) : $a))) {
        result = $rb_plus(result, "*")};
      return $rb_plus(result, "i");
    }, $Complex_to_s$31.$$arity = 0);
    return Opal.const_set($nesting[0], 'I', self.$new(0, 1));
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_Complex$32;

    
    Opal.def(self, '$Complex', $Kernel_Complex$32 = function $$Complex(real, imag) {
      var self = this;

      
      
      if (imag == null) {
        imag = nil;
      };
      if ($truthy(imag)) {
        return $$($nesting, 'Complex').$new(real, imag)
      } else {
        return $$($nesting, 'Complex').$new(real, 0)
      };
    }, $Kernel_Complex$32.$$arity = -2)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_c$33;

    return (Opal.def(self, '$to_c', $String_to_c$33 = function $$to_c() {
      var self = this;

      
      var str = self,
          re = /[+-]?[\d_]+(\.[\d_]+)?(e\d+)?/,
          match = str.match(re),
          real, imag, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      // handles both floats and rationals
      function cutNumber() {
        if (isFloat()) {
          var numerator = parseFloat(cutFloat());

          if (str[0] === '/') {
            // rational real part
            str = str.slice(1);

            if (isFloat()) {
              var denominator = parseFloat(cutFloat());
              return self.$Rational(numerator, denominator);
            } else {
              // reverting '/'
              str = '/' + str;
              return numerator;
            }
          } else {
            // float real part, no denominator
            return numerator;
          }
        } else {
          return null;
        }
      }

      real = cutNumber();

      if (!real) {
        if (str[0] === 'i') {
          // i => Complex(0, 1)
          return self.$Complex(0, 1);
        }
        if (str[0] === '-' && str[1] === 'i') {
          // -i => Complex(0, -1)
          return self.$Complex(0, -1);
        }
        if (str[0] === '+' && str[1] === 'i') {
          // +i => Complex(0, 1)
          return self.$Complex(0, 1);
        }
        // anything => Complex(0, 0)
        return self.$Complex(0, 0);
      }

      imag = cutNumber();
      if (!imag) {
        if (str[0] === 'i') {
          // 3i => Complex(0, 3)
          return self.$Complex(0, real);
        } else {
          // 3 => Complex(3, 0)
          return self.$Complex(real, 0);
        }
      } else {
        // 3+2i => Complex(3, 2)
        return self.$Complex(real, imag);
      }
    
    }, $String_to_c$33.$$arity = 0), nil) && 'to_c'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/rational"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $module = Opal.module;

  Opal.add_stubs(['$require', '$to_i', '$==', '$raise', '$<', '$-@', '$new', '$gcd', '$/', '$nil?', '$===', '$reduce', '$to_r', '$equal?', '$!', '$coerce_to!', '$to_f', '$numerator', '$denominator', '$<=>', '$-', '$*', '$__coerced__', '$+', '$Rational', '$>', '$**', '$abs', '$ceil', '$with_precision', '$floor', '$<=', '$truncate', '$send', '$convert']);
  
  self.$require("corelib/numeric");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Rational');

    var $nesting = [self].concat($parent_nesting), $Rational_reduce$1, $Rational_convert$2, $Rational_initialize$3, $Rational_numerator$4, $Rational_denominator$5, $Rational_coerce$6, $Rational_$eq_eq$7, $Rational_$lt_eq_gt$8, $Rational_$plus$9, $Rational_$minus$10, $Rational_$$11, $Rational_$slash$12, $Rational_$$$13, $Rational_abs$14, $Rational_ceil$15, $Rational_floor$16, $Rational_hash$17, $Rational_inspect$18, $Rational_rationalize$19, $Rational_round$20, $Rational_to_f$21, $Rational_to_i$22, $Rational_to_r$23, $Rational_to_s$24, $Rational_truncate$25, $Rational_with_precision$26;

    self.$$prototype.num = self.$$prototype.den = nil;
    
    Opal.defs(self, '$reduce', $Rational_reduce$1 = function $$reduce(num, den) {
      var self = this, gcd = nil;

      
      num = num.$to_i();
      den = den.$to_i();
      if (den['$=='](0)) {
        self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      } else if ($truthy($rb_lt(den, 0))) {
        
        num = num['$-@']();
        den = den['$-@']();
      } else if (den['$=='](1)) {
        return self.$new(num, den)};
      gcd = num.$gcd(den);
      return self.$new($rb_divide(num, gcd), $rb_divide(den, gcd));
    }, $Rational_reduce$1.$$arity = 2);
    Opal.defs(self, '$convert', $Rational_convert$2 = function $$convert(num, den) {
      var $a, $b, self = this;

      
      if ($truthy(($truthy($a = num['$nil?']()) ? $a : den['$nil?']()))) {
        self.$raise($$($nesting, 'TypeError'), "cannot convert nil into Rational")};
      if ($truthy(($truthy($a = $$($nesting, 'Integer')['$==='](num)) ? $$($nesting, 'Integer')['$==='](den) : $a))) {
        return self.$reduce(num, den)};
      if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Float')['$==='](num)) ? $b : $$($nesting, 'String')['$==='](num))) ? $a : $$($nesting, 'Complex')['$==='](num)))) {
        num = num.$to_r()};
      if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'Float')['$==='](den)) ? $b : $$($nesting, 'String')['$==='](den))) ? $a : $$($nesting, 'Complex')['$==='](den)))) {
        den = den.$to_r()};
      if ($truthy(($truthy($a = den['$equal?'](1)) ? $$($nesting, 'Integer')['$==='](num)['$!']() : $a))) {
        return $$($nesting, 'Opal')['$coerce_to!'](num, $$($nesting, 'Rational'), "to_r")
      } else if ($truthy(($truthy($a = $$($nesting, 'Numeric')['$==='](num)) ? $$($nesting, 'Numeric')['$==='](den) : $a))) {
        return $rb_divide(num, den)
      } else {
        return self.$reduce(num, den)
      };
    }, $Rational_convert$2.$$arity = 2);
    
    Opal.def(self, '$initialize', $Rational_initialize$3 = function $$initialize(num, den) {
      var self = this;

      
      self.num = num;
      return (self.den = den);
    }, $Rational_initialize$3.$$arity = 2);
    
    Opal.def(self, '$numerator', $Rational_numerator$4 = function $$numerator() {
      var self = this;

      return self.num
    }, $Rational_numerator$4.$$arity = 0);
    
    Opal.def(self, '$denominator', $Rational_denominator$5 = function $$denominator() {
      var self = this;

      return self.den
    }, $Rational_denominator$5.$$arity = 0);
    
    Opal.def(self, '$coerce', $Rational_coerce$6 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return [other, self]}
      else if ($$($nesting, 'Integer')['$===']($case)) {return [other.$to_r(), self]}
      else if ($$($nesting, 'Float')['$===']($case)) {return [other, self.$to_f()]}
      else { return nil }})()
    }, $Rational_coerce$6.$$arity = 1);
    
    Opal.def(self, '$==', $Rational_$eq_eq$7 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return (($a = self.num['$=='](other.$numerator())) ? self.den['$=='](other.$denominator()) : self.num['$=='](other.$numerator()))}
      else if ($$($nesting, 'Integer')['$===']($case)) {return (($a = self.num['$=='](other)) ? self.den['$=='](1) : self.num['$=='](other))}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$=='](other)}
      else {return other['$=='](self)}})()
    }, $Rational_$eq_eq$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $Rational_$lt_eq_gt$8 = function(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {return $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()))['$<=>'](0)}
      else if ($$($nesting, 'Integer')['$===']($case)) {return $rb_minus(self.num, $rb_times(self.den, other))['$<=>'](0)}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$<=>'](other)}
      else {return self.$__coerced__("<=>", other)}})()
    }, $Rational_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$+', $Rational_$plus$9 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_plus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_plus(self.num, $rb_times(other, self.den)), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_plus(self.$to_f(), other)}
      else {return self.$__coerced__("+", other)}})()
    }, $Rational_$plus$9.$$arity = 1);
    
    Opal.def(self, '$-', $Rational_$minus$10 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_minus($rb_times(self.num, other.$denominator()), $rb_times(self.den, other.$numerator()));
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_minus(self.num, $rb_times(other, self.den)), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_minus(self.$to_f(), other)}
      else {return self.$__coerced__("-", other)}})()
    }, $Rational_$minus$10.$$arity = 1);
    
    Opal.def(self, '$*', $Rational_$$11 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$numerator());
      den = $rb_times(self.den, other.$denominator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {return self.$Rational($rb_times(self.num, other), self.den)}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_times(self.$to_f(), other)}
      else {return self.$__coerced__("*", other)}})()
    }, $Rational_$$11.$$arity = 1);
    
    Opal.def(self, '$/', $Rational_$slash$12 = function(other) {
      var self = this, $case = nil, num = nil, den = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Rational')['$===']($case)) {
      num = $rb_times(self.num, other.$denominator());
      den = $rb_times(self.den, other.$numerator());
      return self.$Rational(num, den);}
      else if ($$($nesting, 'Integer')['$===']($case)) {if (other['$=='](0)) {
        return $rb_divide(self.$to_f(), 0.0)
      } else {
        return self.$Rational(self.num, $rb_times(self.den, other))
      }}
      else if ($$($nesting, 'Float')['$===']($case)) {return $rb_divide(self.$to_f(), other)}
      else {return self.$__coerced__("/", other)}})()
    }, $Rational_$slash$12.$$arity = 1);
    
    Opal.def(self, '$**', $Rational_$$$13 = function(other) {
      var $a, self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Integer')['$===']($case)) {if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return $$$($$($nesting, 'Float'), 'INFINITY')
      } else if ($truthy($rb_gt(other, 0))) {
        return self.$Rational(self.num['$**'](other), self.den['$**'](other))
      } else if ($truthy($rb_lt(other, 0))) {
        return self.$Rational(self.den['$**'](other['$-@']()), self.num['$**'](other['$-@']()))
      } else {
        return self.$Rational(1, 1)
      }}
      else if ($$($nesting, 'Float')['$===']($case)) {return self.$to_f()['$**'](other)}
      else if ($$($nesting, 'Rational')['$===']($case)) {if (other['$=='](0)) {
        return self.$Rational(1, 1)
      } else if (other.$denominator()['$=='](1)) {
        if ($truthy($rb_lt(other, 0))) {
          return self.$Rational(self.den['$**'](other.$numerator().$abs()), self.num['$**'](other.$numerator().$abs()))
        } else {
          return self.$Rational(self.num['$**'](other.$numerator()), self.den['$**'](other.$numerator()))
        }
      } else if ($truthy((($a = self['$=='](0)) ? $rb_lt(other, 0) : self['$=='](0)))) {
        return self.$raise($$($nesting, 'ZeroDivisionError'), "divided by 0")
      } else {
        return self.$to_f()['$**'](other)
      }}
      else {return self.$__coerced__("**", other)}})()
    }, $Rational_$$$13.$$arity = 1);
    
    Opal.def(self, '$abs', $Rational_abs$14 = function $$abs() {
      var self = this;

      return self.$Rational(self.num.$abs(), self.den.$abs())
    }, $Rational_abs$14.$$arity = 0);
    
    Opal.def(self, '$ceil', $Rational_ceil$15 = function $$ceil(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$ceil()
      } else {
        return self.$with_precision("ceil", precision)
      };
    }, $Rational_ceil$15.$$arity = -1);
    Opal.alias(self, "divide", "/");
    
    Opal.def(self, '$floor', $Rational_floor$16 = function $$floor(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        return $rb_divide(self.num['$-@'](), self.den)['$-@']().$floor()
      } else {
        return self.$with_precision("floor", precision)
      };
    }, $Rational_floor$16.$$arity = -1);
    
    Opal.def(self, '$hash', $Rational_hash$17 = function $$hash() {
      var self = this;

      return "" + "Rational:" + (self.num) + ":" + (self.den)
    }, $Rational_hash$17.$$arity = 0);
    
    Opal.def(self, '$inspect', $Rational_inspect$18 = function $$inspect() {
      var self = this;

      return "" + "(" + (self) + ")"
    }, $Rational_inspect$18.$$arity = 0);
    Opal.alias(self, "quo", "/");
    
    Opal.def(self, '$rationalize', $Rational_rationalize$19 = function $$rationalize(eps) {
      var self = this;

      
      ;
      
      if (arguments.length > 1) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (arguments.length) + " for 0..1)");
      }

      if (eps == null) {
        return self;
      }

      var e = eps.$abs(),
          a = $rb_minus(self, e),
          b = $rb_plus(self, e);

      var p0 = 0,
          p1 = 1,
          q0 = 1,
          q1 = 0,
          p2, q2;

      var c, k, t;

      while (true) {
        c = (a).$ceil();

        if ($rb_le(c, b)) {
          break;
        }

        k  = c - 1;
        p2 = k * p1 + p0;
        q2 = k * q1 + q0;
        t  = $rb_divide(1, $rb_minus(b, k));
        b  = $rb_divide(1, $rb_minus(a, k));
        a  = t;

        p0 = p1;
        q0 = q1;
        p1 = p2;
        q1 = q2;
      }

      return self.$Rational(c * p1 + p0, c * q1 + q0);
    ;
    }, $Rational_rationalize$19.$$arity = -1);
    
    Opal.def(self, '$round', $Rational_round$20 = function $$round(precision) {
      var self = this, num = nil, den = nil, approx = nil;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
      } else {
        return self.$with_precision("round", precision)
      };
      if (self.num['$=='](0)) {
        return 0};
      if (self.den['$=='](1)) {
        return self.num};
      num = $rb_plus($rb_times(self.num.$abs(), 2), self.den);
      den = $rb_times(self.den, 2);
      approx = $rb_divide(num, den).$truncate();
      if ($truthy($rb_lt(self.num, 0))) {
        return approx['$-@']()
      } else {
        return approx
      };
    }, $Rational_round$20.$$arity = -1);
    
    Opal.def(self, '$to_f', $Rational_to_f$21 = function $$to_f() {
      var self = this;

      return $rb_divide(self.num, self.den)
    }, $Rational_to_f$21.$$arity = 0);
    
    Opal.def(self, '$to_i', $Rational_to_i$22 = function $$to_i() {
      var self = this;

      return self.$truncate()
    }, $Rational_to_i$22.$$arity = 0);
    
    Opal.def(self, '$to_r', $Rational_to_r$23 = function $$to_r() {
      var self = this;

      return self
    }, $Rational_to_r$23.$$arity = 0);
    
    Opal.def(self, '$to_s', $Rational_to_s$24 = function $$to_s() {
      var self = this;

      return "" + (self.num) + "/" + (self.den)
    }, $Rational_to_s$24.$$arity = 0);
    
    Opal.def(self, '$truncate', $Rational_truncate$25 = function $$truncate(precision) {
      var self = this;

      
      
      if (precision == null) {
        precision = 0;
      };
      if (precision['$=='](0)) {
        if ($truthy($rb_lt(self.num, 0))) {
          return self.$ceil()
        } else {
          return self.$floor()
        }
      } else {
        return self.$with_precision("truncate", precision)
      };
    }, $Rational_truncate$25.$$arity = -1);
    return (Opal.def(self, '$with_precision', $Rational_with_precision$26 = function $$with_precision(method, precision) {
      var self = this, p = nil, s = nil;

      
      if ($truthy($$($nesting, 'Integer')['$==='](precision))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "not an Integer")
      };
      p = (10)['$**'](precision);
      s = $rb_times(self, p);
      if ($truthy($rb_lt(precision, 1))) {
        return $rb_divide(s.$send(method), p).$to_i()
      } else {
        return self.$Rational(s.$send(method), p)
      };
    }, $Rational_with_precision$26.$$arity = 2), nil) && 'with_precision';
  })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_Rational$27;

    
    Opal.def(self, '$Rational', $Kernel_Rational$27 = function $$Rational(numerator, denominator) {
      var self = this;

      
      
      if (denominator == null) {
        denominator = 1;
      };
      return $$($nesting, 'Rational').$convert(numerator, denominator);
    }, $Kernel_Rational$27.$$arity = -2)
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_r$28;

    return (Opal.def(self, '$to_r', $String_to_r$28 = function $$to_r() {
      var self = this;

      
      var str = self.trimLeft(),
          re = /^[+-]?[\d_]+(\.[\d_]+)?/,
          match = str.match(re),
          numerator, denominator;

      function isFloat() {
        return re.test(str);
      }

      function cutFloat() {
        var match = str.match(re);
        var number = match[0];
        str = str.slice(number.length);
        return number.replace(/_/g, '');
      }

      if (isFloat()) {
        numerator = parseFloat(cutFloat());

        if (str[0] === '/') {
          // rational real part
          str = str.slice(1);

          if (isFloat()) {
            denominator = parseFloat(cutFloat());
            return self.$Rational(numerator, denominator);
          } else {
            return self.$Rational(numerator, 1);
          }
        } else {
          return self.$Rational(numerator, 1);
        }
      } else {
        return self.$Rational(0, 1);
      }
    
    }, $String_to_r$28.$$arity = 0), nil) && 'to_r'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/time"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$===', '$raise', '$coerce_to!', '$respond_to?', '$to_str', '$to_i', '$new', '$<=>', '$to_f', '$nil?', '$>', '$<', '$strftime', '$year', '$month', '$day', '$+', '$round', '$/', '$-', '$copy_instance_variables', '$initialize_dup', '$is_a?', '$zero?', '$wday', '$utc?', '$mon', '$yday', '$hour', '$min', '$sec', '$rjust', '$ljust', '$zone', '$to_s', '$[]', '$cweek_cyear', '$isdst', '$<=', '$!=', '$==', '$ceil']);
  
  self.$require("corelib/comparable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_at$1, $Time_new$2, $Time_local$3, $Time_gm$4, $Time_now$5, $Time_$plus$6, $Time_$minus$7, $Time_$lt_eq_gt$8, $Time_$eq_eq$9, $Time_asctime$10, $Time_day$11, $Time_yday$12, $Time_isdst$13, $Time_dup$14, $Time_eql$ques$15, $Time_friday$ques$16, $Time_hash$17, $Time_hour$18, $Time_inspect$19, $Time_min$20, $Time_mon$21, $Time_monday$ques$22, $Time_saturday$ques$23, $Time_sec$24, $Time_succ$25, $Time_usec$26, $Time_zone$27, $Time_getgm$28, $Time_gmtime$29, $Time_gmt$ques$30, $Time_gmt_offset$31, $Time_strftime$32, $Time_sunday$ques$33, $Time_thursday$ques$34, $Time_to_a$35, $Time_to_f$36, $Time_to_i$37, $Time_tuesday$ques$38, $Time_wday$39, $Time_wednesday$ques$40, $Time_year$41, $Time_cweek_cyear$42;

    
    self.$include($$($nesting, 'Comparable'));
    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;
    Opal.defs(self, '$at', $Time_at$1 = function $$at(seconds, frac) {
      var self = this;

      
      ;
      
      var result;

      if ($$($nesting, 'Time')['$==='](seconds)) {
        if (frac !== undefined) {
          self.$raise($$($nesting, 'TypeError'), "can't convert Time into an exact number")
        }
        result = new Date(seconds.getTime());
        result.is_utc = seconds.is_utc;
        return result;
      }

      if (!seconds.$$is_number) {
        seconds = $$($nesting, 'Opal')['$coerce_to!'](seconds, $$($nesting, 'Integer'), "to_int");
      }

      if (frac === undefined) {
        return new Date(seconds * 1000);
      }

      if (!frac.$$is_number) {
        frac = $$($nesting, 'Opal')['$coerce_to!'](frac, $$($nesting, 'Integer'), "to_int");
      }

      return new Date(seconds * 1000 + (frac / 1000));
    ;
    }, $Time_at$1.$$arity = -2);
    
    function time_params(year, month, day, hour, min, sec) {
      if (year.$$is_string) {
        year = parseInt(year, 10);
      } else {
        year = $$($nesting, 'Opal')['$coerce_to!'](year, $$($nesting, 'Integer'), "to_int");
      }

      if (month === nil) {
        month = 1;
      } else if (!month.$$is_number) {
        if ((month)['$respond_to?']("to_str")) {
          month = (month).$to_str();
          switch (month.toLowerCase()) {
          case 'jan': month =  1; break;
          case 'feb': month =  2; break;
          case 'mar': month =  3; break;
          case 'apr': month =  4; break;
          case 'may': month =  5; break;
          case 'jun': month =  6; break;
          case 'jul': month =  7; break;
          case 'aug': month =  8; break;
          case 'sep': month =  9; break;
          case 'oct': month = 10; break;
          case 'nov': month = 11; break;
          case 'dec': month = 12; break;
          default: month = (month).$to_i();
          }
        } else {
          month = $$($nesting, 'Opal')['$coerce_to!'](month, $$($nesting, 'Integer'), "to_int");
        }
      }

      if (month < 1 || month > 12) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "month out of range: " + (month))
      }
      month = month - 1;

      if (day === nil) {
        day = 1;
      } else if (day.$$is_string) {
        day = parseInt(day, 10);
      } else {
        day = $$($nesting, 'Opal')['$coerce_to!'](day, $$($nesting, 'Integer'), "to_int");
      }

      if (day < 1 || day > 31) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "day out of range: " + (day))
      }

      if (hour === nil) {
        hour = 0;
      } else if (hour.$$is_string) {
        hour = parseInt(hour, 10);
      } else {
        hour = $$($nesting, 'Opal')['$coerce_to!'](hour, $$($nesting, 'Integer'), "to_int");
      }

      if (hour < 0 || hour > 24) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "hour out of range: " + (hour))
      }

      if (min === nil) {
        min = 0;
      } else if (min.$$is_string) {
        min = parseInt(min, 10);
      } else {
        min = $$($nesting, 'Opal')['$coerce_to!'](min, $$($nesting, 'Integer'), "to_int");
      }

      if (min < 0 || min > 59) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "min out of range: " + (min))
      }

      if (sec === nil) {
        sec = 0;
      } else if (!sec.$$is_number) {
        if (sec.$$is_string) {
          sec = parseInt(sec, 10);
        } else {
          sec = $$($nesting, 'Opal')['$coerce_to!'](sec, $$($nesting, 'Integer'), "to_int");
        }
      }

      if (sec < 0 || sec > 60) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "sec out of range: " + (sec))
      }

      return [year, month, day, hour, min, sec];
    }
  ;
    Opal.defs(self, '$new', $Time_new$2 = function(year, month, day, hour, min, sec, utc_offset) {
      var self = this;

      
      ;
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (utc_offset == null) {
        utc_offset = nil;
      };
      
      var args, result;

      if (year === undefined) {
        return new Date();
      }

      if (utc_offset !== nil) {
        self.$raise($$($nesting, 'ArgumentError'), "Opal does not support explicitly specifying UTC offset for Time")
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    ;
    }, $Time_new$2.$$arity = -1);
    Opal.defs(self, '$local', $Time_local$3 = function $$local(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (millisecond == null) {
        millisecond = nil;
      };
      
      if (_dummy1 == null) {
        _dummy1 = nil;
      };
      
      if (_dummy2 == null) {
        _dummy2 = nil;
      };
      
      if (_dummy3 == null) {
        _dummy3 = nil;
      };
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(year, month, day, hour, min, 0, sec * 1000);
      if (year < 100) {
        result.setFullYear(year);
      }
      return result;
    ;
    }, $Time_local$3.$$arity = -2);
    Opal.defs(self, '$gm', $Time_gm$4 = function $$gm(year, month, day, hour, min, sec, millisecond, _dummy1, _dummy2, _dummy3) {
      var self = this;

      
      
      if (month == null) {
        month = nil;
      };
      
      if (day == null) {
        day = nil;
      };
      
      if (hour == null) {
        hour = nil;
      };
      
      if (min == null) {
        min = nil;
      };
      
      if (sec == null) {
        sec = nil;
      };
      
      if (millisecond == null) {
        millisecond = nil;
      };
      
      if (_dummy1 == null) {
        _dummy1 = nil;
      };
      
      if (_dummy2 == null) {
        _dummy2 = nil;
      };
      
      if (_dummy3 == null) {
        _dummy3 = nil;
      };
      
      var args, result;

      if (arguments.length === 10) {
        args  = $slice.call(arguments);
        year  = args[5];
        month = args[4];
        day   = args[3];
        hour  = args[2];
        min   = args[1];
        sec   = args[0];
      }

      args  = time_params(year, month, day, hour, min, sec);
      year  = args[0];
      month = args[1];
      day   = args[2];
      hour  = args[3];
      min   = args[4];
      sec   = args[5];

      result = new Date(Date.UTC(year, month, day, hour, min, 0, sec * 1000));
      if (year < 100) {
        result.setUTCFullYear(year);
      }
      result.is_utc = true;
      return result;
    ;
    }, $Time_gm$4.$$arity = -2);
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      
      Opal.alias(self, "mktime", "local");
      return Opal.alias(self, "utc", "gm");
    })(Opal.get_singleton_class(self), $nesting);
    Opal.defs(self, '$now', $Time_now$5 = function $$now() {
      var self = this;

      return self.$new()
    }, $Time_now$5.$$arity = 0);
    
    Opal.def(self, '$+', $Time_$plus$6 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        self.$raise($$($nesting, 'TypeError'), "time + time?")};
      
      if (!other.$$is_number) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() + (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, $Time_$plus$6.$$arity = 1);
    
    Opal.def(self, '$-', $Time_$minus$7 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        return (self.getTime() - other.getTime()) / 1000};
      
      if (!other.$$is_number) {
        other = $$($nesting, 'Opal')['$coerce_to!'](other, $$($nesting, 'Integer'), "to_int");
      }
      var result = new Date(self.getTime() - (other * 1000));
      result.is_utc = self.is_utc;
      return result;
    ;
    }, $Time_$minus$7.$$arity = 1);
    
    Opal.def(self, '$<=>', $Time_$lt_eq_gt$8 = function(other) {
      var self = this, r = nil;

      if ($truthy($$($nesting, 'Time')['$==='](other))) {
        return self.$to_f()['$<=>'](other.$to_f())
      } else {
        
        r = other['$<=>'](self);
        if ($truthy(r['$nil?']())) {
          return nil
        } else if ($truthy($rb_gt(r, 0))) {
          return -1
        } else if ($truthy($rb_lt(r, 0))) {
          return 1
        } else {
          return 0
        };
      }
    }, $Time_$lt_eq_gt$8.$$arity = 1);
    
    Opal.def(self, '$==', $Time_$eq_eq$9 = function(other) {
      var $a, self = this;

      return ($truthy($a = $$($nesting, 'Time')['$==='](other)) ? self.$to_f() === other.$to_f() : $a)
    }, $Time_$eq_eq$9.$$arity = 1);
    
    Opal.def(self, '$asctime', $Time_asctime$10 = function $$asctime() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y")
    }, $Time_asctime$10.$$arity = 0);
    Opal.alias(self, "ctime", "asctime");
    
    Opal.def(self, '$day', $Time_day$11 = function $$day() {
      var self = this;

      return self.is_utc ? self.getUTCDate() : self.getDate();
    }, $Time_day$11.$$arity = 0);
    
    Opal.def(self, '$yday', $Time_yday$12 = function $$yday() {
      var self = this, start_of_year = nil, start_of_day = nil, one_day = nil;

      
      start_of_year = $$($nesting, 'Time').$new(self.$year()).$to_i();
      start_of_day = $$($nesting, 'Time').$new(self.$year(), self.$month(), self.$day()).$to_i();
      one_day = 86400;
      return $rb_plus($rb_divide($rb_minus(start_of_day, start_of_year), one_day).$round(), 1);
    }, $Time_yday$12.$$arity = 0);
    
    Opal.def(self, '$isdst', $Time_isdst$13 = function $$isdst() {
      var self = this;

      
      var jan = new Date(self.getFullYear(), 0, 1),
          jul = new Date(self.getFullYear(), 6, 1);
      return self.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    
    }, $Time_isdst$13.$$arity = 0);
    Opal.alias(self, "dst?", "isdst");
    
    Opal.def(self, '$dup', $Time_dup$14 = function $$dup() {
      var self = this, copy = nil;

      
      copy = new Date(self.getTime());
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    }, $Time_dup$14.$$arity = 0);
    
    Opal.def(self, '$eql?', $Time_eql$ques$15 = function(other) {
      var $a, self = this;

      return ($truthy($a = other['$is_a?']($$($nesting, 'Time'))) ? self['$<=>'](other)['$zero?']() : $a)
    }, $Time_eql$ques$15.$$arity = 1);
    
    Opal.def(self, '$friday?', $Time_friday$ques$16 = function() {
      var self = this;

      return self.$wday() == 5
    }, $Time_friday$ques$16.$$arity = 0);
    
    Opal.def(self, '$hash', $Time_hash$17 = function $$hash() {
      var self = this;

      return 'Time:' + self.getTime();
    }, $Time_hash$17.$$arity = 0);
    
    Opal.def(self, '$hour', $Time_hour$18 = function $$hour() {
      var self = this;

      return self.is_utc ? self.getUTCHours() : self.getHours();
    }, $Time_hour$18.$$arity = 0);
    
    Opal.def(self, '$inspect', $Time_inspect$19 = function $$inspect() {
      var self = this;

      if ($truthy(self['$utc?']())) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
      } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      }
    }, $Time_inspect$19.$$arity = 0);
    Opal.alias(self, "mday", "day");
    
    Opal.def(self, '$min', $Time_min$20 = function $$min() {
      var self = this;

      return self.is_utc ? self.getUTCMinutes() : self.getMinutes();
    }, $Time_min$20.$$arity = 0);
    
    Opal.def(self, '$mon', $Time_mon$21 = function $$mon() {
      var self = this;

      return (self.is_utc ? self.getUTCMonth() : self.getMonth()) + 1;
    }, $Time_mon$21.$$arity = 0);
    
    Opal.def(self, '$monday?', $Time_monday$ques$22 = function() {
      var self = this;

      return self.$wday() == 1
    }, $Time_monday$ques$22.$$arity = 0);
    Opal.alias(self, "month", "mon");
    
    Opal.def(self, '$saturday?', $Time_saturday$ques$23 = function() {
      var self = this;

      return self.$wday() == 6
    }, $Time_saturday$ques$23.$$arity = 0);
    
    Opal.def(self, '$sec', $Time_sec$24 = function $$sec() {
      var self = this;

      return self.is_utc ? self.getUTCSeconds() : self.getSeconds();
    }, $Time_sec$24.$$arity = 0);
    
    Opal.def(self, '$succ', $Time_succ$25 = function $$succ() {
      var self = this;

      
      var result = new Date(self.getTime() + 1000);
      result.is_utc = self.is_utc;
      return result;
    
    }, $Time_succ$25.$$arity = 0);
    
    Opal.def(self, '$usec', $Time_usec$26 = function $$usec() {
      var self = this;

      return self.getMilliseconds() * 1000;
    }, $Time_usec$26.$$arity = 0);
    
    Opal.def(self, '$zone', $Time_zone$27 = function $$zone() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\((.+)\)(?:\s|$)/)[1]
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    }, $Time_zone$27.$$arity = 0);
    
    Opal.def(self, '$getgm', $Time_getgm$28 = function $$getgm() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.is_utc = true;
      return result;
    
    }, $Time_getgm$28.$$arity = 0);
    Opal.alias(self, "getutc", "getgm");
    
    Opal.def(self, '$gmtime', $Time_gmtime$29 = function $$gmtime() {
      var self = this;

      
      self.is_utc = true;
      return self;
    
    }, $Time_gmtime$29.$$arity = 0);
    Opal.alias(self, "utc", "gmtime");
    
    Opal.def(self, '$gmt?', $Time_gmt$ques$30 = function() {
      var self = this;

      return self.is_utc === true;
    }, $Time_gmt$ques$30.$$arity = 0);
    
    Opal.def(self, '$gmt_offset', $Time_gmt_offset$31 = function $$gmt_offset() {
      var self = this;

      return self.is_utc ? 0 : -self.getTimezoneOffset() * 60;
    }, $Time_gmt_offset$31.$$arity = 0);
    
    Opal.def(self, '$strftime', $Time_strftime$32 = function $$strftime(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        width = parseInt(width, 10);

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.$year();
            break;

          case 'C':
            zero    = !blank;
            result += Math.round(self.$year() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.$year() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += self.$mon();
            break;

          case 'B':
            result += long_months[self.$mon() - 1];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.$mon() - 1];
            break;

          case 'd':
            zero    = !blank
            result += self.$day();
            break;

          case 'e':
            blank   = !zero
            result += self.$day();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.$hour();
            break;

          case 'k':
            blank   = !zero;
            result += self.$hour();
            break;

          case 'I':
            zero    = !blank;
            result += (self.$hour() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.$hour() % 12 || 12);
            break;

          case 'P':
            result += (self.$hour() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.$hour() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.$min();
            break;

          case 'S':
            zero    = !blank;
            result += self.$sec()
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.$wday()];
            break;

          case 'a':
            result += short_days[self.$wday()];
            break;

          case 'u':
            result += (self.$wday() + 1);
            break;

          case 'w':
            result += self.$wday();
            break;

          case 'V':
            result += self.$cweek_cyear()['$[]'](0).$to_s().$rjust(2, "0");
            break;

          case 'G':
            result += self.$cweek_cyear()['$[]'](1);
            break;

          case 'g':
            result += self.$cweek_cyear()['$[]'](1)['$[]']($range(-2, -1, false));
            break;

          case 's':
            result += self.$to_i();
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    }, $Time_strftime$32.$$arity = 1);
    
    Opal.def(self, '$sunday?', $Time_sunday$ques$33 = function() {
      var self = this;

      return self.$wday() == 0
    }, $Time_sunday$ques$33.$$arity = 0);
    
    Opal.def(self, '$thursday?', $Time_thursday$ques$34 = function() {
      var self = this;

      return self.$wday() == 4
    }, $Time_thursday$ques$34.$$arity = 0);
    
    Opal.def(self, '$to_a', $Time_to_a$35 = function $$to_a() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()]
    }, $Time_to_a$35.$$arity = 0);
    
    Opal.def(self, '$to_f', $Time_to_f$36 = function $$to_f() {
      var self = this;

      return self.getTime() / 1000;
    }, $Time_to_f$36.$$arity = 0);
    
    Opal.def(self, '$to_i', $Time_to_i$37 = function $$to_i() {
      var self = this;

      return parseInt(self.getTime() / 1000, 10);
    }, $Time_to_i$37.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$tuesday?', $Time_tuesday$ques$38 = function() {
      var self = this;

      return self.$wday() == 2
    }, $Time_tuesday$ques$38.$$arity = 0);
    Opal.alias(self, "tv_sec", "to_i");
    Opal.alias(self, "tv_usec", "usec");
    Opal.alias(self, "utc?", "gmt?");
    Opal.alias(self, "gmtoff", "gmt_offset");
    Opal.alias(self, "utc_offset", "gmt_offset");
    
    Opal.def(self, '$wday', $Time_wday$39 = function $$wday() {
      var self = this;

      return self.is_utc ? self.getUTCDay() : self.getDay();
    }, $Time_wday$39.$$arity = 0);
    
    Opal.def(self, '$wednesday?', $Time_wednesday$ques$40 = function() {
      var self = this;

      return self.$wday() == 3
    }, $Time_wednesday$ques$40.$$arity = 0);
    
    Opal.def(self, '$year', $Time_year$41 = function $$year() {
      var self = this;

      return self.is_utc ? self.getUTCFullYear() : self.getFullYear();
    }, $Time_year$41.$$arity = 0);
    return (Opal.def(self, '$cweek_cyear', $Time_cweek_cyear$42 = function $$cweek_cyear() {
      var $a, self = this, jan01 = nil, jan01_wday = nil, first_monday = nil, year = nil, offset = nil, week = nil, dec31 = nil, dec31_wday = nil;

      
      jan01 = $$($nesting, 'Time').$new(self.$year(), 1, 1);
      jan01_wday = jan01.$wday();
      first_monday = 0;
      year = self.$year();
      if ($truthy(($truthy($a = $rb_le(jan01_wday, 4)) ? jan01_wday['$!='](0) : $a))) {
        offset = $rb_minus(jan01_wday, 1)
      } else {
        
        offset = $rb_minus($rb_minus(jan01_wday, 7), 1);
        if (offset['$=='](-8)) {
          offset = -1};
      };
      week = $rb_divide($rb_plus(self.$yday(), offset), 7.0).$ceil();
      if ($truthy($rb_le(week, 0))) {
        return $$($nesting, 'Time').$new($rb_minus(self.$year(), 1), 12, 31).$cweek_cyear()
      } else if (week['$=='](53)) {
        
        dec31 = $$($nesting, 'Time').$new(self.$year(), 12, 31);
        dec31_wday = dec31.$wday();
        if ($truthy(($truthy($a = $rb_le(dec31_wday, 3)) ? dec31_wday['$!='](0) : $a))) {
          
          week = 1;
          year = $rb_plus(year, 1);};};
      return [week, year];
    }, $Time_cweek_cyear$42.$$arity = 0), nil) && 'cweek_cyear';
  })($nesting[0], Date, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/struct"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$const_name!', '$unshift', '$map', '$coerce_to!', '$new', '$each', '$define_struct_attribute', '$allocate', '$initialize', '$alias_method', '$module_eval', '$to_proc', '$const_set', '$==', '$raise', '$<<', '$members', '$define_method', '$instance_eval', '$class', '$last', '$>', '$length', '$-', '$keys', '$any?', '$join', '$[]', '$[]=', '$each_with_index', '$hash', '$===', '$<', '$-@', '$size', '$>=', '$include?', '$to_sym', '$instance_of?', '$__id__', '$eql?', '$enum_for', '$name', '$+', '$each_pair', '$inspect', '$each_with_object', '$flatten', '$to_a', '$respond_to?', '$dig']);
  
  self.$require("corelib/enumerable");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $Struct_new$1, $Struct_define_struct_attribute$6, $Struct_members$9, $Struct_inherited$10, $Struct_initialize$12, $Struct_members$15, $Struct_hash$16, $Struct_$$$17, $Struct_$$$eq$18, $Struct_$eq_eq$19, $Struct_eql$ques$20, $Struct_each$21, $Struct_each_pair$24, $Struct_length$27, $Struct_to_a$28, $Struct_inspect$30, $Struct_to_h$32, $Struct_values_at$34, $Struct_dig$36;

    
    self.$include($$($nesting, 'Enumerable'));
    Opal.defs(self, '$new', $Struct_new$1 = function(const_name, $a, $b) {
      var $iter = $Struct_new$1.$$p, block = $iter || nil, $post_args, $kwargs, args, keyword_init, $$2, $$3, self = this, klass = nil;

      if ($iter) $Struct_new$1.$$p = null;
      
      
      if ($iter) $Struct_new$1.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      $kwargs = Opal.extract_kwargs($post_args);
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      args = $post_args;;
      
      keyword_init = $kwargs.$$smap["keyword_init"];
      if (keyword_init == null) {
        keyword_init = false
      };
      if ($truthy(const_name)) {
        
        try {
          const_name = $$($nesting, 'Opal')['$const_name!'](const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'TypeError'), $$($nesting, 'NameError')])) {
            try {
              
              args.$unshift(const_name);
              const_name = nil;
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };};
      $send(args, 'map', [], ($$2 = function(arg){var self = $$2.$$s || this;

      
        
        if (arg == null) {
          arg = nil;
        };
        return $$($nesting, 'Opal')['$coerce_to!'](arg, $$($nesting, 'String'), "to_str");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
      klass = $send($$($nesting, 'Class'), 'new', [self], ($$3 = function(){var self = $$3.$$s || this, $$4;

      
        $send(args, 'each', [], ($$4 = function(arg){var self = $$4.$$s || this;

        
          
          if (arg == null) {
            arg = nil;
          };
          return self.$define_struct_attribute(arg);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        return (function(self, $parent_nesting) {
          var $nesting = [self].concat($parent_nesting), $new$5;

          
          
          Opal.def(self, '$new', $new$5 = function($a) {
            var $post_args, args, self = this, instance = nil;

            
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            instance = self.$allocate();
            instance.$$data = {};
            $send(instance, 'initialize', Opal.to_a(args));
            return instance;
          }, $new$5.$$arity = -1);
          return self.$alias_method("[]", "new");
        })(Opal.get_singleton_class(self), $nesting);}, $$3.$$s = self, $$3.$$arity = 0, $$3));
      if ($truthy(block)) {
        $send(klass, 'module_eval', [], block.$to_proc())};
      klass.$$keyword_init = keyword_init;
      if ($truthy(const_name)) {
        $$($nesting, 'Struct').$const_set(const_name, klass)};
      return klass;
    }, $Struct_new$1.$$arity = -2);
    Opal.defs(self, '$define_struct_attribute', $Struct_define_struct_attribute$6 = function $$define_struct_attribute(name) {
      var $$7, $$8, self = this;

      
      if (self['$==']($$($nesting, 'Struct'))) {
        self.$raise($$($nesting, 'ArgumentError'), "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      $send(self, 'define_method', [name], ($$7 = function(){var self = $$7.$$s || this;

      return self.$$data[name];}, $$7.$$s = self, $$7.$$arity = 0, $$7));
      return $send(self, 'define_method', ["" + (name) + "="], ($$8 = function(value){var self = $$8.$$s || this;

      
        
        if (value == null) {
          value = nil;
        };
        return self.$$data[name] = value;;}, $$8.$$s = self, $$8.$$arity = 1, $$8));
    }, $Struct_define_struct_attribute$6.$$arity = 1);
    Opal.defs(self, '$members', $Struct_members$9 = function $$members() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      
      if (self['$==']($$($nesting, 'Struct'))) {
        self.$raise($$($nesting, 'ArgumentError'), "the Struct class has no members")};
      return (self.members = ($truthy($a = self.members) ? $a : []));
    }, $Struct_members$9.$$arity = 0);
    Opal.defs(self, '$inherited', $Struct_inherited$10 = function $$inherited(klass) {
      var $$11, self = this, members = nil;
      if (self.members == null) self.members = nil;

      
      members = self.members;
      return $send(klass, 'instance_eval', [], ($$11 = function(){var self = $$11.$$s || this;

      return (self.members = members)}, $$11.$$s = self, $$11.$$arity = 0, $$11));
    }, $Struct_inherited$10.$$arity = 1);
    
    Opal.def(self, '$initialize', $Struct_initialize$12 = function $$initialize($a) {
      var $post_args, args, $b, $$13, $$14, self = this, kwargs = nil, extra = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy(self.$class().$$keyword_init)) {
        
        kwargs = ($truthy($b = args.$last()) ? $b : $hash2([], {}));
        if ($truthy(($truthy($b = $rb_gt(args.$length(), 1)) ? $b : (args.length === 1 && !kwargs.$$is_hash)))) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (given " + (args.$length()) + ", expected 0)")};
        extra = $rb_minus(kwargs.$keys(), self.$class().$members());
        if ($truthy(extra['$any?']())) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "unknown keywords: " + (extra.$join(", ")))};
        return $send(self.$class().$members(), 'each', [], ($$13 = function(name){var self = $$13.$$s || this, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          $writer = [name, kwargs['$[]'](name)];
          $send(self, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      } else {
        
        if ($truthy($rb_gt(args.$length(), self.$class().$members().$length()))) {
          self.$raise($$($nesting, 'ArgumentError'), "struct size differs")};
        return $send(self.$class().$members(), 'each_with_index', [], ($$14 = function(name, index){var self = $$14.$$s || this, $writer = nil;

        
          
          if (name == null) {
            name = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          $writer = [name, args['$[]'](index)];
          $send(self, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, $$14.$$s = self, $$14.$$arity = 2, $$14));
      };
    }, $Struct_initialize$12.$$arity = -1);
    
    Opal.def(self, '$members', $Struct_members$15 = function $$members() {
      var self = this;

      return self.$class().$members()
    }, $Struct_members$15.$$arity = 0);
    
    Opal.def(self, '$hash', $Struct_hash$16 = function $$hash() {
      var self = this;

      return $$($nesting, 'Hash').$new(self.$$data).$hash()
    }, $Struct_hash$16.$$arity = 0);
    
    Opal.def(self, '$[]', $Struct_$$$17 = function(name) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy($$($nesting, 'String')['$==='](name))) {
        
        if(!self.$$data.hasOwnProperty(name)) {
          self.$raise($$($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      return self.$$data[name];;
    }, $Struct_$$$17.$$arity = 1);
    
    Opal.def(self, '$[]=', $Struct_$$$eq$18 = function(name, value) {
      var self = this;

      
      if ($truthy($$($nesting, 'Integer')['$==='](name))) {
        
        if ($truthy($rb_lt(name, self.$class().$members().$size()['$-@']()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too small for struct(size:" + (self.$class().$members().$size()) + ")")};
        if ($truthy($rb_ge(name, self.$class().$members().$size()))) {
          self.$raise($$($nesting, 'IndexError'), "" + "offset " + (name) + " too large for struct(size:" + (self.$class().$members().$size()) + ")")};
        name = self.$class().$members()['$[]'](name);
      } else if ($truthy($$($nesting, 'String')['$==='](name))) {
        if ($truthy(self.$class().$members()['$include?'](name.$to_sym()))) {
        } else {
          self.$raise($$($nesting, 'NameError').$new("" + "no member '" + (name) + "' in struct", name))
        }
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + (name.$class()) + " into Integer")
      };
      name = $$($nesting, 'Opal')['$coerce_to!'](name, $$($nesting, 'String'), "to_str");
      return self.$$data[name] = value;;
    }, $Struct_$$$eq$18.$$arity = 2);
    
    Opal.def(self, '$==', $Struct_$eq_eq$19 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
      } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$=='](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, $Struct_$eq_eq$19.$$arity = 1);
    
    Opal.def(self, '$eql?', $Struct_eql$ques$20 = function(other) {
      var self = this;

      
      if ($truthy(other['$instance_of?'](self.$class()))) {
      } else {
        return false
      };
      
      var recursed1 = {}, recursed2 = {};

      function _eqeq(struct, other) {
        var key, a, b;

        recursed1[(struct).$__id__()] = true;
        recursed2[(other).$__id__()] = true;

        for (key in struct.$$data) {
          a = struct.$$data[key];
          b = other.$$data[key];

          if ($$($nesting, 'Struct')['$==='](a)) {
            if (!recursed1.hasOwnProperty((a).$__id__()) || !recursed2.hasOwnProperty((b).$__id__())) {
              if (!_eqeq(a, b)) {
                return false;
              }
            }
          } else {
            if (!(a)['$eql?'](b)) {
              return false;
            }
          }
        }

        return true;
      }

      return _eqeq(self, other);
    ;
    }, $Struct_eql$ques$20.$$arity = 1);
    
    Opal.def(self, '$each', $Struct_each$21 = function $$each() {
      var $$22, $$23, $iter = $Struct_each$21.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Struct_each$21.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each"], ($$22 = function(){var self = $$22.$$s || this;

        return self.$size()}, $$22.$$s = self, $$22.$$arity = 0, $$22))
      };
      $send(self.$class().$members(), 'each', [], ($$23 = function(name){var self = $$23.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        return Opal.yield1($yield, self['$[]'](name));;}, $$23.$$s = self, $$23.$$arity = 1, $$23));
      return self;
    }, $Struct_each$21.$$arity = 0);
    
    Opal.def(self, '$each_pair', $Struct_each_pair$24 = function $$each_pair() {
      var $$25, $$26, $iter = $Struct_each_pair$24.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Struct_each_pair$24.$$p = null;
      
      if (($yield !== nil)) {
      } else {
        return $send(self, 'enum_for', ["each_pair"], ($$25 = function(){var self = $$25.$$s || this;

        return self.$size()}, $$25.$$s = self, $$25.$$arity = 0, $$25))
      };
      $send(self.$class().$members(), 'each', [], ($$26 = function(name){var self = $$26.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        return Opal.yield1($yield, [name, self['$[]'](name)]);;}, $$26.$$s = self, $$26.$$arity = 1, $$26));
      return self;
    }, $Struct_each_pair$24.$$arity = 0);
    
    Opal.def(self, '$length', $Struct_length$27 = function $$length() {
      var self = this;

      return self.$class().$members().$length()
    }, $Struct_length$27.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$to_a', $Struct_to_a$28 = function $$to_a() {
      var $$29, self = this;

      return $send(self.$class().$members(), 'map', [], ($$29 = function(name){var self = $$29.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        return self['$[]'](name);}, $$29.$$s = self, $$29.$$arity = 1, $$29))
    }, $Struct_to_a$28.$$arity = 0);
    Opal.alias(self, "values", "to_a");
    
    Opal.def(self, '$inspect', $Struct_inspect$30 = function $$inspect() {
      var $a, $$31, self = this, result = nil;

      
      result = "#<struct ";
      if ($truthy(($truthy($a = $$($nesting, 'Struct')['$==='](self)) ? self.$class().$name() : $a))) {
        result = $rb_plus(result, "" + (self.$class()) + " ")};
      result = $rb_plus(result, $send(self.$each_pair(), 'map', [], ($$31 = function(name, value){var self = $$31.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return "" + (name) + "=" + (value.$inspect());}, $$31.$$s = self, $$31.$$arity = 2, $$31)).$join(", "));
      result = $rb_plus(result, ">");
      return result;
    }, $Struct_inspect$30.$$arity = 0);
    Opal.alias(self, "to_s", "inspect");
    
    Opal.def(self, '$to_h', $Struct_to_h$32 = function $$to_h() {
      var $$33, self = this;

      return $send(self.$class().$members(), 'each_with_object', [$hash2([], {})], ($$33 = function(name, h){var self = $$33.$$s || this, $writer = nil;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (h == null) {
          h = nil;
        };
        $writer = [name, self['$[]'](name)];
        $send(h, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, $$33.$$s = self, $$33.$$arity = 2, $$33))
    }, $Struct_to_h$32.$$arity = 0);
    
    Opal.def(self, '$values_at', $Struct_values_at$34 = function $$values_at($a) {
      var $post_args, args, $$35, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      args = $send(args, 'map', [], ($$35 = function(arg){var self = $$35.$$s || this;

      
        
        if (arg == null) {
          arg = nil;
        };
        return arg.$$is_range ? arg.$to_a() : arg;}, $$35.$$s = self, $$35.$$arity = 1, $$35)).$flatten();
      
      var result = [];
      for (var i = 0, len = args.length; i < len; i++) {
        if (!args[i].$$is_number) {
          self.$raise($$($nesting, 'TypeError'), "" + "no implicit conversion of " + ((args[i]).$class()) + " into Integer")
        }
        result.push(self['$[]'](args[i]));
      }
      return result;
    ;
    }, $Struct_values_at$34.$$arity = -1);
    return (Opal.def(self, '$dig', $Struct_dig$36 = function $$dig(key, $a) {
      var $post_args, keys, self = this, item = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      keys = $post_args;;
      item = (function() {if ($truthy(key.$$is_string && self.$$data.hasOwnProperty(key))) {
        return self.$$data[key] || nil;
      } else {
        return nil
      }; return nil; })();
      
      if (item === nil || keys.length === 0) {
        return item;
      }
    ;
      if ($truthy(item['$respond_to?']("dig"))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + (item.$class()) + " does not have #dig method")
      };
      return $send(item, 'dig', Opal.to_a(keys));
    }, $Struct_dig$36.$$arity = -2), nil) && 'dig';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/io"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $gvars = Opal.gvars, $truthy = Opal.truthy, $writer = nil;

  Opal.add_stubs(['$attr_accessor', '$size', '$write', '$join', '$map', '$String', '$empty?', '$concat', '$chomp', '$getbyte', '$getc', '$raise', '$new', '$write_proc=', '$-', '$extend']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'IO');

    var $nesting = [self].concat($parent_nesting), $IO_tty$ques$1, $IO_closed$ques$2, $IO_write$3, $IO_flush$4;

    self.$$prototype.tty = self.$$prototype.closed = nil;
    
    Opal.const_set($nesting[0], 'SEEK_SET', 0);
    Opal.const_set($nesting[0], 'SEEK_CUR', 1);
    Opal.const_set($nesting[0], 'SEEK_END', 2);
    
    Opal.def(self, '$tty?', $IO_tty$ques$1 = function() {
      var self = this;

      return self.tty
    }, $IO_tty$ques$1.$$arity = 0);
    
    Opal.def(self, '$closed?', $IO_closed$ques$2 = function() {
      var self = this;

      return self.closed
    }, $IO_closed$ques$2.$$arity = 0);
    self.$attr_accessor("write_proc");
    
    Opal.def(self, '$write', $IO_write$3 = function $$write(string) {
      var self = this;

      
      self.write_proc(string);
      return string.$size();
    }, $IO_write$3.$$arity = 1);
    self.$attr_accessor("sync", "tty");
    
    Opal.def(self, '$flush', $IO_flush$4 = function $$flush() {
      var self = this;

      return nil
    }, $IO_flush$4.$$arity = 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Writable');

      var $nesting = [self].concat($parent_nesting), $Writable_$lt$lt$5, $Writable_print$6, $Writable_puts$8;

      
      
      Opal.def(self, '$<<', $Writable_$lt$lt$5 = function(string) {
        var self = this;

        
        self.$write(string);
        return self;
      }, $Writable_$lt$lt$5.$$arity = 1);
      
      Opal.def(self, '$print', $Writable_print$6 = function $$print($a) {
        var $post_args, args, $$7, self = this;
        if ($gvars[","] == null) $gvars[","] = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        self.$write($send(args, 'map', [], ($$7 = function(arg){var self = $$7.$$s || this;

        
          
          if (arg == null) {
            arg = nil;
          };
          return self.$String(arg);}, $$7.$$s = self, $$7.$$arity = 1, $$7)).$join($gvars[","]));
        return nil;
      }, $Writable_print$6.$$arity = -1);
      
      Opal.def(self, '$puts', $Writable_puts$8 = function $$puts($a) {
        var $post_args, args, $$9, self = this, newline = nil;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        newline = $gvars["/"];
        if ($truthy(args['$empty?']())) {
          self.$write($gvars["/"])
        } else {
          self.$write($send(args, 'map', [], ($$9 = function(arg){var self = $$9.$$s || this;

          
            
            if (arg == null) {
              arg = nil;
            };
            return self.$String(arg).$chomp();}, $$9.$$s = self, $$9.$$arity = 1, $$9)).$concat([nil]).$join(newline))
        };
        return nil;
      }, $Writable_puts$8.$$arity = -1);
    })($nesting[0], $nesting);
    return (function($base, $parent_nesting) {
      var self = $module($base, 'Readable');

      var $nesting = [self].concat($parent_nesting), $Readable_readbyte$10, $Readable_readchar$11, $Readable_readline$12, $Readable_readpartial$13;

      
      
      Opal.def(self, '$readbyte', $Readable_readbyte$10 = function $$readbyte() {
        var self = this;

        return self.$getbyte()
      }, $Readable_readbyte$10.$$arity = 0);
      
      Opal.def(self, '$readchar', $Readable_readchar$11 = function $$readchar() {
        var self = this;

        return self.$getc()
      }, $Readable_readchar$11.$$arity = 0);
      
      Opal.def(self, '$readline', $Readable_readline$12 = function $$readline(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        
        
        if (sep == null) {
          sep = $gvars["/"];
        };
        return self.$raise($$($nesting, 'NotImplementedError'));
      }, $Readable_readline$12.$$arity = -1);
      
      Opal.def(self, '$readpartial', $Readable_readpartial$13 = function $$readpartial(integer, outbuf) {
        var self = this;

        
        
        if (outbuf == null) {
          outbuf = nil;
        };
        return self.$raise($$($nesting, 'NotImplementedError'));
      }, $Readable_readpartial$13.$$arity = -2);
    })($nesting[0], $nesting);
  })($nesting[0], null, $nesting);
  Opal.const_set($nesting[0], 'STDERR', ($gvars.stderr = $$($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDIN', ($gvars.stdin = $$($nesting, 'IO').$new()));
  Opal.const_set($nesting[0], 'STDOUT', ($gvars.stdout = $$($nesting, 'IO').$new()));
  var console = Opal.global.console;
  
  $writer = [typeof(process) === 'object' && typeof(process.stdout) === 'object' ? function(s){process.stdout.write(s)} : function(s){console.log(s)}];
  $send($$($nesting, 'STDOUT'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  
  $writer = [typeof(process) === 'object' && typeof(process.stderr) === 'object' ? function(s){process.stderr.write(s)} : function(s){console.warn(s)}];
  $send($$($nesting, 'STDERR'), 'write_proc=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  $$($nesting, 'STDOUT').$extend($$$($$($nesting, 'IO'), 'Writable'));
  return $$($nesting, 'STDERR').$extend($$$($$($nesting, 'IO'), 'Writable'));
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/main"] = function(Opal) {
  var $to_s$1, $include$2, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$include']);
  
  Opal.defs(self, '$to_s', $to_s$1 = function $$to_s() {
    var self = this;

    return "main"
  }, $to_s$1.$$arity = 0);
  return (Opal.defs(self, '$include', $include$2 = function $$include(mod) {
    var self = this;

    return $$($nesting, 'Object').$include(mod)
  }, $include$2.$$arity = 1), nil) && 'include';
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/dir"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$[]']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Dir');

    var $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $chdir$1, $pwd$2, $home$3;

      
      
      Opal.def(self, '$chdir', $chdir$1 = function $$chdir(dir) {
        var $iter = $chdir$1.$$p, $yield = $iter || nil, self = this, prev_cwd = nil;

        if ($iter) $chdir$1.$$p = null;
        return (function() { try {
        
        prev_cwd = Opal.current_dir;
        Opal.current_dir = dir;
        return Opal.yieldX($yield, []);;
        } finally {
          Opal.current_dir = prev_cwd
        }; })()
      }, $chdir$1.$$arity = 1);
      
      Opal.def(self, '$pwd', $pwd$2 = function $$pwd() {
        var self = this;

        return Opal.current_dir || '.';
      }, $pwd$2.$$arity = 0);
      Opal.alias(self, "getwd", "pwd");
      return (Opal.def(self, '$home', $home$3 = function $$home() {
        var $a, self = this;

        return ($truthy($a = $$($nesting, 'ENV')['$[]']("HOME")) ? $a : ".")
      }, $home$3.$$arity = 0), nil) && 'home';
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $range = Opal.range, $send = Opal.send;

  Opal.add_stubs(['$respond_to?', '$to_path', '$pwd', '$split', '$sub', '$+', '$unshift', '$join', '$home', '$raise', '$start_with?', '$absolute_path', '$coerce_to!', '$basename', '$empty?', '$rindex', '$[]', '$nil?', '$==', '$-', '$length', '$gsub', '$find', '$=~', '$map', '$each_with_index', '$flatten', '$reject', '$to_proc', '$end_with?']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'File');

    var $nesting = [self].concat($parent_nesting), windows_root_rx = nil;

    
    Opal.const_set($nesting[0], 'Separator', Opal.const_set($nesting[0], 'SEPARATOR', "/"));
    Opal.const_set($nesting[0], 'ALT_SEPARATOR', nil);
    Opal.const_set($nesting[0], 'PATH_SEPARATOR', ":");
    Opal.const_set($nesting[0], 'FNM_SYSCASE', 0);
    windows_root_rx = /^[a-zA-Z]:(?:\\|\/)/;
    return (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $absolute_path$1, $expand_path$2, $dirname$3, $basename$4, $extname$5, $exist$ques$6, $directory$ques$7, $join$9, $split$12;

      
      
      Opal.def(self, '$absolute_path', $absolute_path$1 = function $$absolute_path(path, basedir) {
        var $a, self = this, sep = nil, sep_chars = nil, new_parts = nil, path_abs = nil, basedir_abs = nil, parts = nil, leading_sep = nil, abs = nil, new_path = nil;

        
        
        if (basedir == null) {
          basedir = nil;
        };
        sep = $$($nesting, 'SEPARATOR');
        sep_chars = $sep_chars();
        new_parts = [];
        path = (function() {if ($truthy(path['$respond_to?']("to_path"))) {
          return path.$to_path()
        } else {
          return path
        }; return nil; })();
        basedir = ($truthy($a = basedir) ? $a : $$($nesting, 'Dir').$pwd());
        path_abs = path.substr(0, sep.length) === sep || windows_root_rx.test(path);
        basedir_abs = basedir.substr(0, sep.length) === sep || windows_root_rx.test(basedir);
        if ($truthy(path_abs)) {
          
          parts = path.$split(new RegExp("" + "[" + (sep_chars) + "]"));
          leading_sep = windows_root_rx.test(path) ? '' : path.$sub(new RegExp("" + "^([" + (sep_chars) + "]+).*$"), "\\1");
          abs = true;
        } else {
          
          parts = $rb_plus(basedir.$split(new RegExp("" + "[" + (sep_chars) + "]")), path.$split(new RegExp("" + "[" + (sep_chars) + "]")));
          leading_sep = windows_root_rx.test(basedir) ? '' : basedir.$sub(new RegExp("" + "^([" + (sep_chars) + "]+).*$"), "\\1");
          abs = basedir_abs;
        };
        
        var part;
        for (var i = 0, ii = parts.length; i < ii; i++) {
          part = parts[i];

          if (
            (part === nil) ||
            (part === ''  && ((new_parts.length === 0) || abs)) ||
            (part === '.' && ((new_parts.length === 0) || abs))
          ) {
            continue;
          }
          if (part === '..') {
            new_parts.pop();
          } else {
            new_parts.push(part);
          }
        }

        if (!abs && parts[0] !== '.') {
          new_parts.$unshift(".")
        }
      ;
        new_path = new_parts.$join(sep);
        if ($truthy(abs)) {
          new_path = $rb_plus(leading_sep, new_path)};
        return new_path;
      }, $absolute_path$1.$$arity = -2);
      
      Opal.def(self, '$expand_path', $expand_path$2 = function $$expand_path(path, basedir) {
        var self = this, sep = nil, sep_chars = nil, home = nil, leading_sep = nil, home_path_regexp = nil;

        
        
        if (basedir == null) {
          basedir = nil;
        };
        sep = $$($nesting, 'SEPARATOR');
        sep_chars = $sep_chars();
        if ($truthy(path[0] === '~' || (basedir && basedir[0] === '~'))) {
          
          home = $$($nesting, 'Dir').$home();
          if ($truthy(home)) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "couldn't find HOME environment -- expanding `~'")
          };
          leading_sep = windows_root_rx.test(home) ? '' : home.$sub(new RegExp("" + "^([" + (sep_chars) + "]+).*$"), "\\1");
          if ($truthy(home['$start_with?'](leading_sep))) {
          } else {
            self.$raise($$($nesting, 'ArgumentError'), "non-absolute home")
          };
          home = $rb_plus(home, sep);
          home_path_regexp = new RegExp("" + "^\\~(?:" + (sep) + "|$)");
          path = path.$sub(home_path_regexp, home);
          if ($truthy(basedir)) {
            basedir = basedir.$sub(home_path_regexp, home)};};
        return self.$absolute_path(path, basedir);
      }, $expand_path$2.$$arity = -2);
      Opal.alias(self, "realpath", "expand_path");
      
      // Coerce a given path to a path string using #to_path and #to_str
      function $coerce_to_path(path) {
        if ($truthy((path)['$respond_to?']("to_path"))) {
          path = path.$to_path();
        }

        path = $$($nesting, 'Opal')['$coerce_to!'](path, $$($nesting, 'String'), "to_str");

        return path;
      }

      // Return a RegExp compatible char class
      function $sep_chars() {
        if ($$($nesting, 'ALT_SEPARATOR') === nil) {
          return Opal.escape_regexp($$($nesting, 'SEPARATOR'));
        } else {
          return Opal.escape_regexp($rb_plus($$($nesting, 'SEPARATOR'), $$($nesting, 'ALT_SEPARATOR')));
        }
      }
    ;
      
      Opal.def(self, '$dirname', $dirname$3 = function $$dirname(path) {
        var self = this, sep_chars = nil;

        
        sep_chars = $sep_chars();
        path = $coerce_to_path(path);
        
        var absolute = path.match(new RegExp("" + "^[" + (sep_chars) + "]"));

        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove trailing separators
        path = path.replace(new RegExp("" + "[^" + (sep_chars) + "]+$"), ''); // remove trailing basename
        path = path.replace(new RegExp("" + "[" + (sep_chars) + "]+$"), ''); // remove final trailing separators

        if (path === '') {
          return absolute ? '/' : '.';
        }

        return path;
      ;
      }, $dirname$3.$$arity = 1);
      
      Opal.def(self, '$basename', $basename$4 = function $$basename(name, suffix) {
        var self = this, sep_chars = nil;

        
        
        if (suffix == null) {
          suffix = nil;
        };
        sep_chars = $sep_chars();
        name = $coerce_to_path(name);
        
        if (name.length == 0) {
          return name;
        }

        if (suffix !== nil) {
          suffix = $$($nesting, 'Opal')['$coerce_to!'](suffix, $$($nesting, 'String'), "to_str")
        } else {
          suffix = null;
        }

        name = name.replace(new RegExp("" + "(.)[" + (sep_chars) + "]*$"), '$1');
        name = name.replace(new RegExp("" + "^(?:.*[" + (sep_chars) + "])?([^" + (sep_chars) + "]+)$"), '$1');

        if (suffix === ".*") {
          name = name.replace(/\.[^\.]+$/, '');
        } else if(suffix !== null) {
          suffix = Opal.escape_regexp(suffix);
          name = name.replace(new RegExp("" + (suffix) + "$"), '');
        }

        return name;
      ;
      }, $basename$4.$$arity = -2);
      
      Opal.def(self, '$extname', $extname$5 = function $$extname(path) {
        var $a, self = this, filename = nil, last_dot_idx = nil;

        
        path = $coerce_to_path(path);
        filename = self.$basename(path);
        if ($truthy(filename['$empty?']())) {
          return ""};
        last_dot_idx = filename['$[]']($range(1, -1, false)).$rindex(".");
        if ($truthy(($truthy($a = last_dot_idx['$nil?']()) ? $a : $rb_plus(last_dot_idx, 1)['$==']($rb_minus(filename.$length(), 1))))) {
          return ""
        } else {
          return filename['$[]'](Opal.Range.$new($rb_plus(last_dot_idx, 1), -1, false))
        };
      }, $extname$5.$$arity = 1);
      
      Opal.def(self, '$exist?', $exist$ques$6 = function(path) {
        var self = this;

        return Opal.modules[path] != null
      }, $exist$ques$6.$$arity = 1);
      Opal.alias(self, "exists?", "exist?");
      
      Opal.def(self, '$directory?', $directory$ques$7 = function(path) {
        var $$8, self = this, files = nil, file = nil;

        
        files = [];
        
        for (var key in Opal.modules) {
          files.push(key)
        }
      ;
        path = path.$gsub(new RegExp("" + "(^." + ($$($nesting, 'SEPARATOR')) + "+|" + ($$($nesting, 'SEPARATOR')) + "+$)"));
        file = $send(files, 'find', [], ($$8 = function(f){var self = $$8.$$s || this;

        
          
          if (f == null) {
            f = nil;
          };
          return f['$=~'](new RegExp("" + "^" + (path)));}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        return file;
      }, $directory$ques$7.$$arity = 1);
      
      Opal.def(self, '$join', $join$9 = function $$join($a) {
        var $post_args, paths, $$10, $$11, self = this, result = nil;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        paths = $post_args;;
        if ($truthy(paths['$empty?']())) {
          return ""};
        result = "";
        paths = $send(paths.$flatten().$each_with_index(), 'map', [], ($$10 = function(item, index){var self = $$10.$$s || this, $b;

        
          
          if (item == null) {
            item = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          if ($truthy((($b = index['$=='](0)) ? item['$empty?']() : index['$=='](0)))) {
            return $$($nesting, 'SEPARATOR')
          } else if ($truthy((($b = paths.$length()['$==']($rb_plus(index, 1))) ? item['$empty?']() : paths.$length()['$==']($rb_plus(index, 1))))) {
            return $$($nesting, 'SEPARATOR')
          } else {
            return item
          };}, $$10.$$s = self, $$10.$$arity = 2, $$10));
        paths = $send(paths, 'reject', [], "empty?".$to_proc());
        $send(paths, 'each_with_index', [], ($$11 = function(item, index){var self = $$11.$$s || this, $b, next_item = nil;

        
          
          if (item == null) {
            item = nil;
          };
          
          if (index == null) {
            index = nil;
          };
          next_item = paths['$[]']($rb_plus(index, 1));
          if ($truthy(next_item['$nil?']())) {
            return (result = "" + (result) + (item))
          } else {
            
            if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? next_item['$start_with?']($$($nesting, 'SEPARATOR')) : $b))) {
              item = item.$sub(new RegExp("" + ($$($nesting, 'SEPARATOR')) + "+$"), "")};
            return (result = (function() {if ($truthy(($truthy($b = item['$end_with?']($$($nesting, 'SEPARATOR'))) ? $b : next_item['$start_with?']($$($nesting, 'SEPARATOR'))))) {
              return "" + (result) + (item)
            } else {
              return "" + (result) + (item) + ($$($nesting, 'SEPARATOR'))
            }; return nil; })());
          };}, $$11.$$s = self, $$11.$$arity = 2, $$11));
        return result;
      }, $join$9.$$arity = -1);
      return (Opal.def(self, '$split', $split$12 = function $$split(path) {
        var self = this;

        return path.$split($$($nesting, 'SEPARATOR'))
      }, $split$12.$$arity = 1), nil) && 'split';
    })(Opal.get_singleton_class(self), $nesting);
  })($nesting[0], $$($nesting, 'IO'), $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/process"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy;

  Opal.add_stubs(['$const_set', '$size', '$<<', '$__register_clock__', '$to_f', '$now', '$new', '$[]', '$raise']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Process');

    var $nesting = [self].concat($parent_nesting), $Process___register_clock__$1, $Process_pid$2, $Process_times$3, $Process_clock_gettime$4, monotonic = nil;

    
    self.__clocks__ = [];
    Opal.defs(self, '$__register_clock__', $Process___register_clock__$1 = function $$__register_clock__(name, func) {
      var self = this;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      self.$const_set(name, self.__clocks__.$size());
      return self.__clocks__['$<<'](func);
    }, $Process___register_clock__$1.$$arity = 2);
    self.$__register_clock__("CLOCK_REALTIME", function() { return Date.now() });
    monotonic = false;
    
    if (Opal.global.performance) {
      monotonic = function() {
        return performance.now()
      };
    }
    else if (Opal.global.process && process.hrtime) {
      // let now be the base to get smaller numbers
      var hrtime_base = process.hrtime();

      monotonic = function() {
        var hrtime = process.hrtime(hrtime_base);
        var us = (hrtime[1] / 1000) | 0; // cut below microsecs;
        return ((hrtime[0] * 1000) + (us / 1000));
      };
    }
  ;
    if ($truthy(monotonic)) {
      self.$__register_clock__("CLOCK_MONOTONIC", monotonic)};
    Opal.defs(self, '$pid', $Process_pid$2 = function $$pid() {
      var self = this;

      return 0
    }, $Process_pid$2.$$arity = 0);
    Opal.defs(self, '$times', $Process_times$3 = function $$times() {
      var self = this, t = nil;

      
      t = $$($nesting, 'Time').$now().$to_f();
      return $$$($$($nesting, 'Benchmark'), 'Tms').$new(t, t, t, t, t);
    }, $Process_times$3.$$arity = 0);
    return (Opal.defs(self, '$clock_gettime', $Process_clock_gettime$4 = function $$clock_gettime(clock_id, unit) {
      var $a, self = this, clock = nil;
      if (self.__clocks__ == null) self.__clocks__ = nil;

      
      
      if (unit == null) {
        unit = "float_second";
      };
      ($truthy($a = (clock = self.__clocks__['$[]'](clock_id))) ? $a : self.$raise($$$($$($nesting, 'Errno'), 'EINVAL'), "" + "clock_gettime(" + (clock_id) + ") " + (self.__clocks__['$[]'](clock_id))));
      
      var ms = clock();
      switch (unit) {
        case 'float_second':      return  (ms / 1000);         // number of seconds as a float (default)
        case 'float_millisecond': return  (ms / 1);            // number of milliseconds as a float
        case 'float_microsecond': return  (ms * 1000);         // number of microseconds as a float
        case 'second':            return ((ms / 1000)    | 0); // number of seconds as an integer
        case 'millisecond':       return ((ms / 1)       | 0); // number of milliseconds as an integer
        case 'microsecond':       return ((ms * 1000)    | 0); // number of microseconds as an integer
        case 'nanosecond':        return ((ms * 1000000) | 0); // number of nanoseconds as an integer
        default: self.$raise($$($nesting, 'ArgumentError'), "" + "unexpected unit: " + (unit))
      }
    ;
    }, $Process_clock_gettime$4.$$arity = -2), nil) && 'clock_gettime';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Signal');

    var $nesting = [self].concat($parent_nesting), $Signal_trap$5;

    return (Opal.defs(self, '$trap', $Signal_trap$5 = function $$trap($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Signal_trap$5.$$arity = -1), nil) && 'trap'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'GC');

    var $nesting = [self].concat($parent_nesting), $GC_start$6;

    return (Opal.defs(self, '$start', $GC_start$6 = function $$start() {
      var self = this;

      return nil
    }, $GC_start$6.$$arity = 0), nil) && 'start'
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/random"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$new_seed', '$coerce_to!', '$reseed', '$rand', '$seed', '$<', '$raise', '$encode', '$join', '$new', '$chr', '$===', '$==', '$state', '$const_defined?', '$const_set']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting), $Random_initialize$1, $Random_reseed$2, $Random_new_seed$3, $Random_rand$4, $Random_srand$5, $Random_urandom$6, $Random_$eq_eq$8, $Random_bytes$9, $Random_rand$11, $Random_generator$eq$12;

    
    self.$attr_reader("seed", "state");
    
    Opal.def(self, '$initialize', $Random_initialize$1 = function $$initialize(seed) {
      var self = this;

      
      
      if (seed == null) {
        seed = $$($nesting, 'Random').$new_seed();
      };
      seed = $$($nesting, 'Opal')['$coerce_to!'](seed, $$($nesting, 'Integer'), "to_int");
      self.state = seed;
      return self.$reseed(seed);
    }, $Random_initialize$1.$$arity = -1);
    
    Opal.def(self, '$reseed', $Random_reseed$2 = function $$reseed(seed) {
      var self = this;

      
      self.seed = seed;
      return self.$rng = Opal.$$rand.reseed(seed);;
    }, $Random_reseed$2.$$arity = 1);
    Opal.defs(self, '$new_seed', $Random_new_seed$3 = function $$new_seed() {
      var self = this;

      return Opal.$$rand.new_seed();
    }, $Random_new_seed$3.$$arity = 0);
    Opal.defs(self, '$rand', $Random_rand$4 = function $$rand(limit) {
      var self = this;

      
      ;
      return $$($nesting, 'DEFAULT').$rand(limit);
    }, $Random_rand$4.$$arity = -1);
    Opal.defs(self, '$srand', $Random_srand$5 = function $$srand(n) {
      var self = this, previous_seed = nil;

      
      
      if (n == null) {
        n = $$($nesting, 'Random').$new_seed();
      };
      n = $$($nesting, 'Opal')['$coerce_to!'](n, $$($nesting, 'Integer'), "to_int");
      previous_seed = $$($nesting, 'DEFAULT').$seed();
      $$($nesting, 'DEFAULT').$reseed(n);
      return previous_seed;
    }, $Random_srand$5.$$arity = -1);
    Opal.defs(self, '$urandom', $Random_urandom$6 = function $$urandom(size) {
      var $$7, self = this;

      
      size = $$($nesting, 'Opal')['$coerce_to!'](size, $$($nesting, 'Integer'), "to_int");
      if ($truthy($rb_lt(size, 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "negative string size (or size too big)")};
      return $send($$($nesting, 'Array'), 'new', [size], ($$7 = function(){var self = $$7.$$s || this;

      return self.$rand(255).$chr()}, $$7.$$s = self, $$7.$$arity = 0, $$7)).$join().$encode("ASCII-8BIT");
    }, $Random_urandom$6.$$arity = 1);
    
    Opal.def(self, '$==', $Random_$eq_eq$8 = function(other) {
      var $a, self = this;

      
      if ($truthy($$($nesting, 'Random')['$==='](other))) {
      } else {
        return false
      };
      return (($a = self.$seed()['$=='](other.$seed())) ? self.$state()['$=='](other.$state()) : self.$seed()['$=='](other.$seed()));
    }, $Random_$eq_eq$8.$$arity = 1);
    
    Opal.def(self, '$bytes', $Random_bytes$9 = function $$bytes(length) {
      var $$10, self = this;

      
      length = $$($nesting, 'Opal')['$coerce_to!'](length, $$($nesting, 'Integer'), "to_int");
      return $send($$($nesting, 'Array'), 'new', [length], ($$10 = function(){var self = $$10.$$s || this;

      return self.$rand(255).$chr()}, $$10.$$s = self, $$10.$$arity = 0, $$10)).$join().$encode("ASCII-8BIT");
    }, $Random_bytes$9.$$arity = 1);
    
    Opal.def(self, '$rand', $Random_rand$11 = function $$rand(limit) {
      var self = this;

      
      ;
      
      function randomFloat() {
        self.state++;
        return Opal.$$rand.rand(self.$rng);
      }

      function randomInt() {
        return Math.floor(randomFloat() * limit);
      }

      function randomRange() {
        var min = limit.begin,
            max = limit.end;

        if (min === nil || max === nil) {
          return nil;
        }

        var length = max - min;

        if (length < 0) {
          return nil;
        }

        if (length === 0) {
          return min;
        }

        if (max % 1 === 0 && min % 1 === 0 && !limit.excl) {
          length++;
        }

        return self.$rand(length) + min;
      }

      if (limit == null) {
        return randomFloat();
      } else if (limit.$$is_range) {
        return randomRange();
      } else if (limit.$$is_number) {
        if (limit <= 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        if (limit % 1 === 0) {
          // integer
          return randomInt();
        } else {
          return randomFloat() * limit;
        }
      } else {
        limit = $$($nesting, 'Opal')['$coerce_to!'](limit, $$($nesting, 'Integer'), "to_int");

        if (limit <= 0) {
          self.$raise($$($nesting, 'ArgumentError'), "" + "invalid argument - " + (limit))
        }

        return randomInt();
      }
    ;
    }, $Random_rand$11.$$arity = -1);
    return (Opal.defs(self, '$generator=', $Random_generator$eq$12 = function(generator) {
      var self = this;

      
      Opal.$$rand = generator;
      if ($truthy(self['$const_defined?']("DEFAULT"))) {
        return $$($nesting, 'DEFAULT').$reseed()
      } else {
        return self.$const_set("DEFAULT", self.$new(self.$new_seed()))
      };
    }, $Random_generator$eq$12.$$arity = 1), nil) && 'generator=';
  })($nesting[0], null, $nesting)
};

/*
This is based on an adaptation of Makoto Matsumoto and Takuji Nishimura's code
done by Sean McCullough <banksean@gmail.com> and Dave Heitzman
<daveheitzman@yahoo.com>, subsequently readapted from an updated version of
ruby's random.c (rev c38a183032a7826df1adabd8aa0725c713d53e1c).

The original copyright notice from random.c follows.

  This is based on trimmed version of MT19937.  To get the original version,
  contact <http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html>.

  The original copyright notice follows.

     A C-program for MT19937, with initialization improved 2002/2/10.
     Coded by Takuji Nishimura and Makoto Matsumoto.
     This is a faster version by taking Shawn Cokus's optimization,
     Matthe Bellew's simplification, Isaku Wada's real version.

     Before using, initialize the state by using init_genrand(mt, seed)
     or init_by_array(mt, init_key, key_length).

     Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
     All rights reserved.

     Redistribution and use in source and binary forms, with or without
     modification, are permitted provided that the following conditions
     are met:

       1. Redistributions of source code must retain the above copyright
          notice, this list of conditions and the following disclaimer.

       2. Redistributions in binary form must reproduce the above copyright
          notice, this list of conditions and the following disclaimer in the
          documentation and/or other materials provided with the distribution.

       3. The names of its contributors may not be used to endorse or promote
          products derived from this software without specific prior written
          permission.

     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
     CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
     EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
     PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


     Any feedback is very welcome.
     http://www.math.keio.ac.jp/matumoto/emt.html
     email: matumoto@math.keio.ac.jp
*/
var MersenneTwister = (function() {
  /* Period parameters */
  var N = 624;
  var M = 397;
  var MATRIX_A = 0x9908b0df;      /* constant vector a */
  var UMASK = 0x80000000;         /* most significant w-r bits */
  var LMASK = 0x7fffffff;         /* least significant r bits */
  var MIXBITS = function(u,v) { return ( ((u) & UMASK) | ((v) & LMASK) ); };
  var TWIST = function(u,v) { return (MIXBITS((u),(v)) >>> 1) ^ ((v & 0x1) ? MATRIX_A : 0x0); };

  function init(s) {
    var mt = {left: 0, next: N, state: new Array(N)};
    init_genrand(mt, s);
    return mt;
  }

  /* initializes mt[N] with a seed */
  function init_genrand(mt, s) {
    var j, i;
    mt.state[0] = s >>> 0;
    for (j=1; j<N; j++) {
      mt.state[j] = (1812433253 * ((mt.state[j-1] ^ (mt.state[j-1] >> 30) >>> 0)) + j);
      /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
      /* In the previous versions, MSBs of the seed affect   */
      /* only MSBs of the array state[].                     */
      /* 2002/01/09 modified by Makoto Matsumoto             */
      mt.state[j] &= 0xffffffff;  /* for >32 bit machines */
    }
    mt.left = 1;
    mt.next = N;
  }

  /* generate N words at one time */
  function next_state(mt) {
    var p = 0, _p = mt.state;
    var j;

    mt.left = N;
    mt.next = 0;

    for (j=N-M+1; --j; p++)
      _p[p] = _p[p+(M)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    for (j=M; --j; p++)
      _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[p+(1)]);

    _p[p] = _p[p+(M-N)] ^ TWIST(_p[p+(0)], _p[0]);
  }

  /* generates a random number on [0,0xffffffff]-interval */
  function genrand_int32(mt) {
    /* mt must be initialized */
    var y;

    if (--mt.left <= 0) next_state(mt);
    y = mt.state[mt.next++];

    /* Tempering */
    y ^= (y >>> 11);
    y ^= (y << 7) & 0x9d2c5680;
    y ^= (y << 15) & 0xefc60000;
    y ^= (y >>> 18);

    return y >>> 0;
  }

  function int_pair_to_real_exclusive(a, b) {
    a >>>= 5;
    b >>>= 6;
    return(a*67108864.0+b)*(1.0/9007199254740992.0);
  }

  // generates a random number on [0,1) with 53-bit resolution
  function genrand_real(mt) {
    /* mt must be initialized */
    var a = genrand_int32(mt), b = genrand_int32(mt);
    return int_pair_to_real_exclusive(a, b);
  }

  return { genrand_real: genrand_real, init: init };
})();
Opal.loaded(["corelib/random/MersenneTwister.js"]);
/* Generated by Opal 1.0.0 */
Opal.modules["corelib/random/mersenne_twister"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$require', '$generator=', '$-']);
  
  self.$require("corelib/random/MersenneTwister");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Random');

    var $nesting = [self].concat($parent_nesting), $writer = nil;

    
    var MAX_INT = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
    Opal.const_set($nesting[0], 'MERSENNE_TWISTER_GENERATOR', {
    new_seed: function() { return Math.round(Math.random() * MAX_INT); },
    reseed: function(seed) { return MersenneTwister.init(seed); },
    rand: function(mt) { return MersenneTwister.genrand_real(mt); }
  });
    
    $writer = [$$($nesting, 'MERSENNE_TWISTER_GENERATOR')];
    $send(self, 'generator=', Opal.to_a($writer));
    return $writer[$rb_minus($writer["length"], 1)];;
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["corelib/unsupported"] = function(Opal) {
  var $public$35, $private$36, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$raise', '$warn', '$%']);
  
  
  var warnings = {};

  function handle_unsupported_feature(message) {
    switch (Opal.config.unsupported_features_severity) {
    case 'error':
      $$($nesting, 'Kernel').$raise($$($nesting, 'NotImplementedError'), message)
      break;
    case 'warning':
      warn(message)
      break;
    default: // ignore
      // noop
    }
  }

  function warn(string) {
    if (warnings[string]) {
      return;
    }

    warnings[string] = true;
    self.$warn(string);
  }
;
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_$lt$lt$1, $String_capitalize$excl$2, $String_chomp$excl$3, $String_chop$excl$4, $String_downcase$excl$5, $String_gsub$excl$6, $String_lstrip$excl$7, $String_next$excl$8, $String_reverse$excl$9, $String_slice$excl$10, $String_squeeze$excl$11, $String_strip$excl$12, $String_sub$excl$13, $String_succ$excl$14, $String_swapcase$excl$15, $String_tr$excl$16, $String_tr_s$excl$17, $String_upcase$excl$18, $String_prepend$19, $String_$$$eq$20, $String_clear$21, $String_encode$excl$22, $String_unicode_normalize$excl$23;

    
    var ERROR = "String#%s not supported. Mutable String methods are not supported in Opal.";
    
    Opal.def(self, '$<<', $String_$lt$lt$1 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("<<"));
    }, $String_$lt$lt$1.$$arity = -1);
    
    Opal.def(self, '$capitalize!', $String_capitalize$excl$2 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("capitalize!"));
    }, $String_capitalize$excl$2.$$arity = -1);
    
    Opal.def(self, '$chomp!', $String_chomp$excl$3 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("chomp!"));
    }, $String_chomp$excl$3.$$arity = -1);
    
    Opal.def(self, '$chop!', $String_chop$excl$4 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("chop!"));
    }, $String_chop$excl$4.$$arity = -1);
    
    Opal.def(self, '$downcase!', $String_downcase$excl$5 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("downcase!"));
    }, $String_downcase$excl$5.$$arity = -1);
    
    Opal.def(self, '$gsub!', $String_gsub$excl$6 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("gsub!"));
    }, $String_gsub$excl$6.$$arity = -1);
    
    Opal.def(self, '$lstrip!', $String_lstrip$excl$7 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("lstrip!"));
    }, $String_lstrip$excl$7.$$arity = -1);
    
    Opal.def(self, '$next!', $String_next$excl$8 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("next!"));
    }, $String_next$excl$8.$$arity = -1);
    
    Opal.def(self, '$reverse!', $String_reverse$excl$9 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("reverse!"));
    }, $String_reverse$excl$9.$$arity = -1);
    
    Opal.def(self, '$slice!', $String_slice$excl$10 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("slice!"));
    }, $String_slice$excl$10.$$arity = -1);
    
    Opal.def(self, '$squeeze!', $String_squeeze$excl$11 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("squeeze!"));
    }, $String_squeeze$excl$11.$$arity = -1);
    
    Opal.def(self, '$strip!', $String_strip$excl$12 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("strip!"));
    }, $String_strip$excl$12.$$arity = -1);
    
    Opal.def(self, '$sub!', $String_sub$excl$13 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("sub!"));
    }, $String_sub$excl$13.$$arity = -1);
    
    Opal.def(self, '$succ!', $String_succ$excl$14 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("succ!"));
    }, $String_succ$excl$14.$$arity = -1);
    
    Opal.def(self, '$swapcase!', $String_swapcase$excl$15 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("swapcase!"));
    }, $String_swapcase$excl$15.$$arity = -1);
    
    Opal.def(self, '$tr!', $String_tr$excl$16 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("tr!"));
    }, $String_tr$excl$16.$$arity = -1);
    
    Opal.def(self, '$tr_s!', $String_tr_s$excl$17 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("tr_s!"));
    }, $String_tr_s$excl$17.$$arity = -1);
    
    Opal.def(self, '$upcase!', $String_upcase$excl$18 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("upcase!"));
    }, $String_upcase$excl$18.$$arity = -1);
    
    Opal.def(self, '$prepend', $String_prepend$19 = function $$prepend($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("prepend"));
    }, $String_prepend$19.$$arity = -1);
    
    Opal.def(self, '$[]=', $String_$$$eq$20 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("[]="));
    }, $String_$$$eq$20.$$arity = -1);
    
    Opal.def(self, '$clear', $String_clear$21 = function $$clear($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("clear"));
    }, $String_clear$21.$$arity = -1);
    
    Opal.def(self, '$encode!', $String_encode$excl$22 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("encode!"));
    }, $String_encode$excl$22.$$arity = -1);
    return (Opal.def(self, '$unicode_normalize!', $String_unicode_normalize$excl$23 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), (ERROR)['$%']("unicode_normalize!"));
    }, $String_unicode_normalize$excl$23.$$arity = -1), nil) && 'unicode_normalize!';
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_freeze$24, $Kernel_frozen$ques$25;

    
    var ERROR = "Object freezing is not supported by Opal";
    
    Opal.def(self, '$freeze', $Kernel_freeze$24 = function $$freeze() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, $Kernel_freeze$24.$$arity = 0);
    
    Opal.def(self, '$frozen?', $Kernel_frozen$ques$25 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, $Kernel_frozen$ques$25.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_taint$26, $Kernel_untaint$27, $Kernel_tainted$ques$28;

    
    var ERROR = "Object tainting is not supported by Opal";
    
    Opal.def(self, '$taint', $Kernel_taint$26 = function $$taint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, $Kernel_taint$26.$$arity = 0);
    
    Opal.def(self, '$untaint', $Kernel_untaint$27 = function $$untaint() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return self;
    }, $Kernel_untaint$27.$$arity = 0);
    
    Opal.def(self, '$tainted?', $Kernel_tainted$ques$28 = function() {
      var self = this;

      
      handle_unsupported_feature(ERROR);
      return false;
    }, $Kernel_tainted$ques$28.$$arity = 0);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_public$29, $Module_private_class_method$30, $Module_private_method_defined$ques$31, $Module_private_constant$32;

    
    
    Opal.def(self, '$public', $Module_public$29 = function($a) {
      var $post_args, methods, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      methods = $post_args;;
      
      if (methods.length === 0) {
        self.$$module_function = false;
      }

      return nil;
    ;
    }, $Module_public$29.$$arity = -1);
    Opal.alias(self, "private", "public");
    Opal.alias(self, "protected", "public");
    Opal.alias(self, "nesting", "public");
    
    Opal.def(self, '$private_class_method', $Module_private_class_method$30 = function $$private_class_method($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self;
    }, $Module_private_class_method$30.$$arity = -1);
    Opal.alias(self, "public_class_method", "private_class_method");
    
    Opal.def(self, '$private_method_defined?', $Module_private_method_defined$ques$31 = function(obj) {
      var self = this;

      return false
    }, $Module_private_method_defined$ques$31.$$arity = 1);
    
    Opal.def(self, '$private_constant', $Module_private_constant$32 = function $$private_constant($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return nil;
    }, $Module_private_constant$32.$$arity = -1);
    Opal.alias(self, "protected_method_defined?", "private_method_defined?");
    Opal.alias(self, "public_instance_methods", "instance_methods");
    Opal.alias(self, "public_instance_method", "instance_method");
    return Opal.alias(self, "public_method_defined?", "method_defined?");
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_private_methods$33;

    
    
    Opal.def(self, '$private_methods', $Kernel_private_methods$33 = function $$private_methods($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return [];
    }, $Kernel_private_methods$33.$$arity = -1);
    Opal.alias(self, "private_instance_methods", "private_methods");
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_eval$34;

    
    Opal.def(self, '$eval', $Kernel_eval$34 = function($a) {
      var $post_args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      ;
      return self.$raise($$($nesting, 'NotImplementedError'), "" + "To use Kernel#eval, you must first require 'opal-parser'. " + ("" + "See https://github.com/opal/opal/blob/" + ($$($nesting, 'RUBY_ENGINE_VERSION')) + "/docs/opal_parser.md for details."));
    }, $Kernel_eval$34.$$arity = -1)
  })($nesting[0], $nesting);
  Opal.defs(self, '$public', $public$35 = function($a) {
    var $post_args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    ;
    return nil;
  }, $public$35.$$arity = -1);
  return (Opal.defs(self, '$private', $private$36 = function($a) {
    var $post_args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    ;
    return nil;
  }, $private$36.$$arity = -1), nil) && 'private';
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require']);
  
  self.$require("opal/base");
  self.$require("opal/mini");
  self.$require("corelib/kernel/format");
  self.$require("corelib/string/encoding");
  self.$require("corelib/math");
  self.$require("corelib/complex");
  self.$require("corelib/rational");
  self.$require("corelib/time");
  self.$require("corelib/struct");
  self.$require("corelib/io");
  self.$require("corelib/main");
  self.$require("corelib/dir");
  self.$require("corelib/file");
  self.$require("corelib/process");
  self.$require("corelib/random");
  self.$require("corelib/random/mersenne_twister.js");
  return self.$require("corelib/unsupported");
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal-platform"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $truthy = Opal.truthy, browser = nil, node = nil, nashorn = nil, headless_chrome = nil;

  
  browser = typeof(document) !== "undefined";
  node = typeof(process) !== "undefined" && process.versions && process.versions.node;
  nashorn = typeof(Java) !== "undefined" && Java.type;
  headless_chrome = typeof(navigator) !== "undefined" && /\bHeadlessChrome\//.test(navigator.userAgent);
  return Opal.const_set($nesting[0], 'OPAL_PLATFORM', (function() {if ($truthy(nashorn)) {
    return "nashorn"
  } else if ($truthy(node)) {
    return "nodejs"
  } else if ($truthy(headless_chrome)) {
    return "headless-chrome"
  } else {
    return nil
  }; return nil; })());
};

/**
 * this file is updated for zupfnoter-cli such that we have
 *
 * module.exports.Ajv = e();
 */

/* ajv 4.8.2: Another JSON Schema Validator */
!function (e) {
  if ("object" == typeof exports && "undefined" != typeof module) module.exports.Ajv = e(); else if ("function" == typeof define && define.amd) define([], e); else {
    var r;
    r = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, r.Ajv = e()
  }
}(function () {
  var e;
  return function e(r, t, a) {
    function s(i, n) {
      if (!t[i]) {
        if (!r[i]) {
          var l = "function" == typeof require && require;
          if (!n && l) return l(i, !0);
          if (o) return o(i, !0);
          var c = new Error("Cannot find module '" + i + "'");
          throw c.code = "MODULE_NOT_FOUND", c
        }
        var h = t[i] = {exports: {}};
        r[i][0].call(h.exports, function (e) {
          var t = r[i][1][e];
          return s(t ? t : e)
        }, h, h.exports, e, r, t, a)
      }
      return t[i].exports
    }

    for (var o = "function" == typeof require && require, i = 0; i < a.length; i++) s(a[i]);
    return s
  }({
    1: [function (e, r, t) {
      "use strict";

      function a(e, r) {
        r !== !1 && (r = !0);
        var t, s = e.async, o = e.transpile;
        switch (typeof o) {
          case"string":
            var i = m[o];
            if (!i) throw new Error("bad transpiler: " + o);
            return e._transpileFunc = i(e, r);
          case"undefined":
          case"boolean":
            if ("string" == typeof s) {
              if (t = p[s], !t) throw new Error("bad async mode: " + s);
              return e.transpile = t(e, r)
            }
            for (var n = 0; n < v.length; n++) {
              var l = v[n];
              if (a(l, !1)) return d.copy(l, e), e.transpile
            }
            throw new Error("generators, nodent and regenerator are not available");
          case"function":
            return e._transpileFunc = e.transpile;
          default:
            throw new Error("bad transpiler: " + o)
        }
      }

      function s(e, r) {
        try {
          return new Function("(function*(){})()")(), !0
        } catch (e) {
          if (r) throw new Error("generators not supported")
        }
      }

      function o(e, r) {
        try {
          return new Function("(async function(){})()")(), !0
        } catch (e) {
          if (r) throw new Error("es7 async functions not supported")
        }
      }

      function i(r, t) {
        try {
          return u || (u = e("regenerator"), u.runtime()), r.async && r.async !== !0 || (r.async = "es7"), n
        } catch (e) {
          if (t) throw new Error("regenerator not available")
        }
      }

      function n(e) {
        return u.compile(e).code
      }

      function l(r, t) {
        try {
          return f || (f = e("nodent")({
            log: !1,
            dontInstallRequireHook: !0
          })), "es7" != r.async && (r.async && r.async !== !0 && console.warn("nodent transpiles only es7 async functions"), r.async = "es7"), c
        } catch (e) {
          if (t) throw new Error("nodent not available")
        }
      }

      function c(e) {
        return f.compile(e, "", {promises: !0, sourcemap: !1}).code
      }

      function h(e, r) {
        function t(e, r, a) {
          function o(a) {
            function o(a, o) {
              if (a) return r(a);
              if (!s._refs[i] && !s._schemas[i]) try {
                s.addSchema(o, i)
              } catch (e) {
                return void r(e)
              }
              t(e, r)
            }

            var i = a.missingSchema;
            if (s._refs[i] || s._schemas[i]) return r(new Error("Schema " + i + " is loaded but " + a.missingRef + " cannot be resolved"));
            var n = s._loadingSchemas[i];
            n ? "function" == typeof n ? s._loadingSchemas[i] = [n, o] : n[n.length] = o : (s._loadingSchemas[i] = o, s._opts.loadSchema(i, function (e, r) {
              var t = s._loadingSchemas[i];
              if (delete s._loadingSchemas[i], "function" == typeof t) t(e, r); else for (var a = 0; a < t.length; a++) t[a](e, r)
            }))
          }

          function i(e, t) {
            return a ? void setTimeout(function () {
              r(e, t)
            }) : r(e, t)
          }

          var n;
          try {
            n = s.compile(e)
          } catch (e) {
            return void(e.missingSchema ? o(e) : i(e))
          }
          i(null, n)
        }

        var a, s = this;
        try {
          a = this._addSchema(e)
        } catch (e) {
          return void setTimeout(function () {
            r(e)
          })
        }
        if (a.validate) setTimeout(function () {
          r(null, a.validate)
        }); else {
          if ("function" != typeof this._opts.loadSchema) throw new Error("options.loadSchema should be a function");
          t(e, r, !0)
        }
      }

      r.exports = {setup: a, compile: h};
      var u, f, d = e("./compile/util"), p = {"*": s, "co*": s, es7: o}, m = {nodent: l, regenerator: i},
        v = [{async: "co*"}, {async: "es7", transpile: "nodent"}, {async: "co*", transpile: "regenerator"}]
    }, {"./compile/util": 11}], 2: [function (e, r, t) {
      "use strict";
      var a = r.exports = function () {
        this._cache = {}
      };
      a.prototype.put = function (e, r) {
        this._cache[e] = r
      }, a.prototype.get = function (e) {
        return this._cache[e]
      }, a.prototype.del = function (e) {
        delete this._cache[e]
      }, a.prototype.clear = function () {
        this._cache = {}
      }
    }, {}], 3: [function (e, r, t) {
      "use strict";
      r.exports = {
        $ref: e("../dotjs/ref"),
        allOf: e("../dotjs/allOf"),
        anyOf: e("../dotjs/anyOf"),
        dependencies: e("../dotjs/dependencies"),
        enum: e("../dotjs/enum"),
        format: e("../dotjs/format"),
        items: e("../dotjs/items"),
        maximum: e("../dotjs/_limit"),
        minimum: e("../dotjs/_limit"),
        maxItems: e("../dotjs/_limitItems"),
        minItems: e("../dotjs/_limitItems"),
        maxLength: e("../dotjs/_limitLength"),
        minLength: e("../dotjs/_limitLength"),
        maxProperties: e("../dotjs/_limitProperties"),
        minProperties: e("../dotjs/_limitProperties"),
        multipleOf: e("../dotjs/multipleOf"),
        not: e("../dotjs/not"),
        oneOf: e("../dotjs/oneOf"),
        pattern: e("../dotjs/pattern"),
        properties: e("../dotjs/properties"),
        required: e("../dotjs/required"),
        uniqueItems: e("../dotjs/uniqueItems"),
        validate: e("../dotjs/validate")
      }
    }, {
      "../dotjs/_limit": 14,
      "../dotjs/_limitItems": 15,
      "../dotjs/_limitLength": 16,
      "../dotjs/_limitProperties": 17,
      "../dotjs/allOf": 18,
      "../dotjs/anyOf": 19,
      "../dotjs/dependencies": 22,
      "../dotjs/enum": 23,
      "../dotjs/format": 24,
      "../dotjs/items": 25,
      "../dotjs/multipleOf": 26,
      "../dotjs/not": 27,
      "../dotjs/oneOf": 28,
      "../dotjs/pattern": 29,
      "../dotjs/properties": 31,
      "../dotjs/ref": 32,
      "../dotjs/required": 33,
      "../dotjs/uniqueItems": 35,
      "../dotjs/validate": 36
    }], 4: [function (e, r, t) {
      "use strict";
      r.exports = function e(r, t) {
        if (r === t) return !0;
        var a, s = Array.isArray(r), o = Array.isArray(t);
        if (s && o) {
          if (r.length != t.length) return !1;
          for (a = 0; a < r.length; a++) if (!e(r[a], t[a])) return !1;
          return !0
        }
        if (s != o) return !1;
        if (r && t && "object" == typeof r && "object" == typeof t) {
          var i = Object.keys(r);
          if (i.length !== Object.keys(t).length) return !1;
          for (a = 0; a < i.length; a++) if (void 0 === t[i[a]]) return !1;
          for (a = 0; a < i.length; a++) if (!e(r[i[a]], t[i[a]])) return !1;
          return !0
        }
        return !1
      }
    }, {}], 5: [function (e, r, t) {
      "use strict";

      function a(e) {
        e = "full" == e ? "full" : "fast";
        var r = d.copy(a[e]);
        for (var t in a.compare) r[t] = {validate: r[t], compare: a.compare[t]};
        return r
      }

      function s(e) {
        var r = e.match(p);
        if (!r) return !1;
        var t = +r[1], a = +r[2];
        return t >= 1 && t <= 12 && a >= 1 && a <= m[t]
      }

      function o(e, r) {
        var t = e.match(v);
        if (!t) return !1;
        var a = t[1], s = t[2], o = t[3], i = t[5];
        return a <= 23 && s <= 59 && o <= 59 && (!r || i)
      }

      function i(e) {
        var r = e.split(w);
        return 2 == r.length && s(r[0]) && o(r[1], !0)
      }

      function n(e) {
        return e.length <= 255 && y.test(e)
      }

      function l(e) {
        return j.test(e) && g.test(e)
      }

      function c(e) {
        try {
          return new RegExp(e), !0
        } catch (e) {
          return !1
        }
      }

      function h(e, r) {
        if (e && r) return e > r ? 1 : e < r ? -1 : e === r ? 0 : void 0
      }

      function u(e, r) {
        if (e && r && (e = e.match(v), r = r.match(v), e && r)) return e = e[1] + e[2] + e[3] + (e[4] || ""), r = r[1] + r[2] + r[3] + (r[4] || ""), e > r ? 1 : e < r ? -1 : e === r ? 0 : void 0
      }

      function f(e, r) {
        if (e && r) {
          e = e.split(w), r = r.split(w);
          var t = h(e[0], r[0]);
          if (void 0 !== t) return t || u(e[1], r[1])
        }
      }

      var d = e("./util"), p = /^\d\d\d\d-(\d\d)-(\d\d)$/, m = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        v = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i,
        y = /^[0-9a-z](?:(?:[-0-9a-z]{0,61})?[0-9a-z])?(\.[0-9a-z](?:(?:[-0-9a-z]{0,61})?[0-9a-z])?)*$/i,
        g = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i,
        P = /^(?:urn\:uuid\:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
        E = /^(?:\/(?:[^~\/]|~0|~1)+)*(?:\/)?$|^\#(?:\/(?:[a-z0-9_\-\.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)+)*(?:\/)?$/i,
        b = /^(?:0|[1-9][0-9]*)(?:\#|(?:\/(?:[^~\/]|~0|~1)+)*(?:\/)?)$/;
      r.exports = a, a.fast = {
        date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
        time: /^[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
        "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s][0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
        uri: /^(?:[a-z][a-z0-9+-.]*)?(?:\:|\/)\/?[^\s]*$/i,
        email: /^[a-z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
        hostname: y,
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex: c,
        uuid: P,
        "json-pointer": E,
        "relative-json-pointer": b
      }, a.full = {
        date: s,
        time: o,
        "date-time": i,
        uri: l,
        email: /^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
        hostname: n,
        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
        regex: c,
        uuid: P,
        "json-pointer": E,
        "relative-json-pointer": b
      }, a.compare = {date: h, time: u, "date-time": f};
      var w = /t|\s/i, j = /\/|\:/
    }, {"./util": 11}], 6: [function (e, r, t) {
      "use strict";

      function a() {
        if (void 0 === d) try {
          d = e("js-beautify").js_beautify
        } catch (e) {
          d = !1
        }
      }

      function s(e, r, t, n) {
        function j() {
          var e = N.validate, r = e.apply(null, arguments);
          return j.errors = e.errors, r
        }

        function S(e, t, o, i) {
          var n = !t || t && t.schema == e;
          if (t.schema != r.schema) return s.call(k, e, t, o, i);
          var v = e.$async === !0;
          v && !q.transpile && y.setup(q);
          var j = g({
            isTop: !0,
            schema: e,
            isRoot: n,
            baseId: i,
            root: t,
            schemaPath: "",
            errSchemaPath: "#",
            errorPath: '""',
            RULES: H,
            validate: g,
            util: m,
            resolve: p,
            resolveRef: $,
            usePattern: R,
            useDefault: I,
            useCustomRule: A,
            opts: q,
            formats: F,
            self: k
          });
          j = f(L, h) + f(Q, l) + f(U, c) + f(z, u) + j + "return validate;", q.beautify && (a(), d ? j = d(j, q.beautify) : console.error('"npm install js-beautify" to use beautify option'));
          var S, x, _ = q._transpileFunc;
          try {
            x = v && _ ? _(j) : j;
            var O = new Function("self", "RULES", "formats", "root", "refVal", "defaults", "customRules", "co", "equal", "ucs2length", "ValidationError", x);
            S = O(k, H, F, r, L, U, z, P, b, E, w), L[0] = S
          } catch (e) {
            throw console.error("Error compiling schema, function code:", x), e
          }
          return S.schema = e, S.errors = null, S.refs = D, S.refVal = L, S.root = n ? S : t, v && (S.$async = !0), T && (S.sourceCode = j), q.sourceCode === !0 && (S.source = {
            patterns: Q,
            defaults: U
          }), S
        }

        function $(e, a, o) {
          a = p.url(e, a);
          var i, n, l = D[a];
          if (void 0 !== l) return i = L[l], n = "refVal[" + l + "]", O(i, n);
          if (!o && r.refs) {
            var c = r.refs[a];
            if (void 0 !== c) return i = r.refVal[c], n = x(a, i), O(i, n)
          }
          n = x(a);
          var h = p.call(k, S, r, a);
          if (!h) {
            var u = t && t[a];
            u && (h = p.inlineRef(u, q.inlineRefs) ? u : s.call(k, u, r, t, e))
          }
          return h ? (_(a, h), O(h, n)) : void 0
        }

        function x(e, r) {
          var t = L.length;
          return L[t] = r, D[e] = t, "refVal" + t
        }

        function _(e, r) {
          var t = D[e];
          L[t] = r
        }

        function O(e, r) {
          return "object" == typeof e ? {code: r, schema: e, inline: !0} : {code: r, $async: e && e.$async}
        }

        function R(e) {
          var r = C[e];
          return void 0 === r && (r = C[e] = Q.length, Q[r] = e), "pattern" + r
        }

        function I(e) {
          switch (typeof e) {
            case"boolean":
            case"number":
              return "" + e;
            case"string":
              return m.toQuotedString(e);
            case"object":
              if (null === e) return "null";
              var r = v(e), t = V[r];
              return void 0 === t && (t = V[r] = U.length, U[t] = e), "default" + t
          }
        }

        function A(e, r, t, a) {
          var s = e.definition.validateSchema;
          if (s && k._opts.validateSchema !== !1) {
            var o = s(r);
            if (!o) {
              var i = "keyword schema is invalid: " + k.errorsText(s.errors);
              if ("log" != k._opts.validateSchema) throw new Error(i);
              console.error(i)
            }
          }
          var n, l = e.definition.compile, c = e.definition.inline, h = e.definition.macro;
          l ? n = l.call(k, r, t, a) : h ? (n = h.call(k, r, t, a), q.validateSchema !== !1 && k.validateSchema(n, !0)) : n = c ? c.call(k, a, e.keyword, r, t) : e.definition.validate;
          var u = z.length;
          return z[u] = n, {code: "customRule" + u, validate: n}
        }

        var k = this, q = this._opts, L = [void 0], D = {}, Q = [], C = {}, U = [], V = {}, z = [],
          T = q.sourceCode !== !1;
        r = r || {schema: e, refVal: L, refs: D};
        var M = o.call(this, e, r, n), N = this._compilations[M.index];
        if (M.compiling) return N.callValidate = j;
        var F = this._formats, H = this.RULES;
        try {
          var J = S(e, r, t, n);
          N.validate = J;
          var G = N.callValidate;
          return G && (G.schema = J.schema, G.errors = null, G.refs = J.refs, G.refVal = J.refVal, G.root = J.root, G.$async = J.$async, T && (G.sourceCode = J.sourceCode)), J
        } finally {
          i.call(this, e, r, n)
        }
      }

      function o(e, r, t) {
        var a = n.call(this, e, r, t);
        return a >= 0 ? {index: a, compiling: !0} : (a = this._compilations.length, this._compilations[a] = {
          schema: e,
          root: r,
          baseId: t
        }, {index: a, compiling: !1})
      }

      function i(e, r, t) {
        var a = n.call(this, e, r, t);
        a >= 0 && this._compilations.splice(a, 1)
      }

      function n(e, r, t) {
        for (var a = 0; a < this._compilations.length; a++) {
          var s = this._compilations[a];
          if (s.schema == e && s.root == r && s.baseId == t) return a
        }
        return -1
      }

      function l(e, r) {
        return "var pattern" + e + " = new RegExp(" + m.toQuotedString(r[e]) + ");"
      }

      function c(e) {
        return "var default" + e + " = defaults[" + e + "];"
      }

      function h(e, r) {
        return r[e] ? "var refVal" + e + " = refVal[" + e + "];" : ""
      }

      function u(e) {
        return "var customRule" + e + " = customRules[" + e + "];"
      }

      function f(e, r) {
        if (!e.length) return "";
        for (var t = "", a = 0; a < e.length; a++) t += r(a, e);
        return t
      }

      var d, p = e("./resolve"), m = e("./util"), v = e("json-stable-stringify"), y = e("../async"),
        g = e("../dotjs/validate"), P = e("co"), E = m.ucs2length, b = e("./equal"), w = e("./validation_error");
      r.exports = s
    }, {
      "../async": 1,
      "../dotjs/validate": 36,
      "./equal": 4,
      "./resolve": 7,
      "./util": 11,
      "./validation_error": 12,
      co: 41,
      "json-stable-stringify": 42
    }], 7: [function (e, r, t) {
      "use strict";

      function a(e, r, t) {
        var o = this._refs[t];
        if ("string" == typeof o) {
          if (!this._refs[o]) return a.call(this, e, r, o);
          o = this._refs[o]
        }
        if (o = o || this._schemas[t], o instanceof g) return n(o.schema, this._opts.inlineRefs) ? o.schema : o.validate || this._compile(o);
        var i, l, c, h = s.call(this, r, t);
        return h && (i = h.schema, r = h.root, c = h.baseId), i instanceof g ? l = i.validate || e.call(this, i.schema, r, void 0, c) : i && (l = n(i, this._opts.inlineRefs) ? i : e.call(this, i, r, void 0, c)), l
      }

      function s(e, r) {
        var t = m.parse(r, !1, !0), a = u(t), s = h(e.schema.id);
        if (a !== s) {
          var n = f(a), l = this._refs[n];
          if ("string" == typeof l) return o.call(this, e, l, t);
          if (l instanceof g) l.validate || this._compile(l), e = l; else {
            if (l = this._schemas[n], !(l instanceof g)) return;
            if (l.validate || this._compile(l), n == f(r)) return {schema: l, root: e, baseId: s};
            e = l
          }
          if (!e.schema) return;
          s = h(e.schema.id)
        }
        return i.call(this, t, s, e.schema, e)
      }

      function o(e, r, t) {
        var a = s.call(this, e, r);
        if (a) {
          var o = a.schema, n = a.baseId;
          return e = a.root, o.id && (n = d(n, o.id)), i.call(this, t, n, o, e)
        }
      }

      function i(e, r, t, a) {
        if (e.hash = e.hash || "", "#/" == e.hash.slice(0, 2)) {
          for (var o = e.hash.split("/"), i = 1; i < o.length; i++) {
            var n = o[i];
            if (n) {
              if (n = y.unescapeFragment(n), t = t[n], !t) break;
              if (t.id && !P[n] && (r = d(r, t.id)), t.$ref) {
                var l = d(r, t.$ref), c = s.call(this, a, l);
                c && (t = c.schema, a = c.root, r = c.baseId)
              }
            }
          }
          return t && t != a.schema ? {schema: t, root: a, baseId: r} : void 0
        }
      }

      function n(e, r) {
        return r !== !1 && (void 0 === r || r === !0 ? l(e) : r ? c(e) <= r : void 0)
      }

      function l(e) {
        var r;
        if (Array.isArray(e)) {
          for (var t = 0; t < e.length; t++) if (r = e[t], "object" == typeof r && !l(r)) return !1
        } else for (var a in e) {
          if ("$ref" == a) return !1;
          if (r = e[a], "object" == typeof r && !l(r)) return !1
        }
        return !0
      }

      function c(e) {
        var r, t = 0;
        if (Array.isArray(e)) {
          for (var a = 0; a < e.length; a++) if (r = e[a], "object" == typeof r && (t += c(r)), t == 1 / 0) return 1 / 0
        } else for (var s in e) {
          if ("$ref" == s) return 1 / 0;
          if (E[s]) t++; else if (r = e[s], "object" == typeof r && (t += c(r) + 1), t == 1 / 0) return 1 / 0
        }
        return t
      }

      function h(e, r) {
        r !== !1 && (e = f(e));
        var t = m.parse(e, !1, !0);
        return u(t)
      }

      function u(e) {
        var r = e.protocol || "//" == e.href.slice(0, 2) ? "//" : "";
        return (e.protocol || "") + r + (e.host || "") + (e.path || "") + "#"
      }

      function f(e) {
        return e ? e.replace(b, "") : ""
      }

      function d(e, r) {
        return r = f(r), m.resolve(e, r)
      }

      function p(e) {
        function r(e, t, s) {
          if (Array.isArray(e)) for (var o = 0; o < e.length; o++) r.call(this, e[o], t + "/" + o, s); else if (e && "object" == typeof e) {
            if ("string" == typeof e.id) {
              var i = s = s ? m.resolve(s, e.id) : e.id;
              i = f(i);
              var n = this._refs[i];
              if ("string" == typeof n && (n = this._refs[n]), n && n.schema) {
                if (!v(e, n.schema)) throw new Error('id "' + i + '" resolves to more than one schema')
              } else if (i != f(t)) if ("#" == i[0]) {
                if (a[i] && !v(e, a[i])) throw new Error('id "' + i + '" resolves to more than one schema');
                a[i] = e
              } else this._refs[i] = t
            }
            for (var l in e) r.call(this, e[l], t + "/" + y.escapeFragment(l), s)
          }
        }

        var t = f(e.id), a = {};
        return r.call(this, e, h(t, !1), t), a
      }

      var m = e("url"), v = e("./equal"), y = e("./util"), g = e("./schema_obj");
      r.exports = a, a.normalizeId = f, a.fullPath = h, a.url = d, a.ids = p, a.inlineRef = n, a.schema = s;
      var P = y.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]),
        E = y.toHash(["type", "format", "pattern", "maxLength", "minLength", "maxProperties", "minProperties", "maxItems", "minItems", "maximum", "minimum", "uniqueItems", "multipleOf", "required", "enum"]),
        b = /#\/?$/
    }, {"./equal": 4, "./schema_obj": 9, "./util": 11, url: 50}], 8: [function (e, r, t) {
      "use strict";
      var a = e("./_rules"), s = e("./util").toHash;
      r.exports = function () {
        var e = [{type: "number", rules: ["maximum", "minimum", "multipleOf"]}, {
            type: "string",
            rules: ["maxLength", "minLength", "pattern", "format"]
          }, {type: "array", rules: ["maxItems", "minItems", "uniqueItems", "items"]}, {
            type: "object",
            rules: ["maxProperties", "minProperties", "required", "dependencies", "properties"]
          }, {rules: ["$ref", "enum", "not", "anyOf", "oneOf", "allOf"]}],
          r = ["type", "additionalProperties", "patternProperties"],
          t = ["additionalItems", "$schema", "id", "title", "description", "default"],
          o = ["number", "integer", "string", "array", "object", "boolean", "null"];
        return e.all = s(r), e.forEach(function (t) {
          t.rules = t.rules.map(function (t) {
            r.push(t);
            var s = e.all[t] = {keyword: t, code: a[t]};
            return s
          })
        }), e.keywords = s(r.concat(t)), e.types = s(o), e.custom = {}, e
      }
    }, {"./_rules": 3, "./util": 11}], 9: [function (e, r, t) {
      "use strict";

      function a(e) {
        s.copy(e, this)
      }

      var s = e("./util");
      r.exports = a
    }, {"./util": 11}], 10: [function (e, r, t) {
      "use strict";
      r.exports = function (e) {
        for (var r, t = 0, a = e.length, s = 0; s < a;) t++, r = e.charCodeAt(s++), r >= 55296 && r <= 56319 && s < a && (r = e.charCodeAt(s), 56320 == (64512 & r) && s++);
        return t
      }
    }, {}], 11: [function (e, r, t) {
      "use strict";

      function a(e, r) {
        r = r || {};
        for (var t in e) r[t] = e[t];
        return r
      }

      function s(e, r, t) {
        var a = t ? " !== " : " === ", s = t ? " || " : " && ", o = t ? "!" : "", i = t ? "" : "!";
        switch (e) {
          case"null":
            return r + a + "null";
          case"array":
            return o + "Array.isArray(" + r + ")";
          case"object":
            return "(" + o + r + s + "typeof " + r + a + '"object"' + s + i + "Array.isArray(" + r + "))";
          case"integer":
            return "(typeof " + r + a + '"number"' + s + i + "(" + r + " % 1)" + s + r + a + r + ")";
          default:
            return "typeof " + r + a + '"' + e + '"'
        }
      }

      function o(e, r) {
        switch (e.length) {
          case 1:
            return s(e[0], r, !0);
          default:
            var t = "", a = n(e);
            a.array && a.object && (t = a.null ? "(" : "(!" + r + " || ", t += "typeof " + r + ' !== "object")', delete a.null, delete a.array, delete a.object), a.number && delete a.integer;
            for (var o in a) t += (t ? " && " : "") + s(o, r, !0);
            return t
        }
      }

      function i(e, r) {
        if (Array.isArray(r)) {
          for (var t = [], a = 0; a < r.length; a++) {
            var s = r[a];
            $[s] ? t[t.length] = s : "array" === e && "array" === s && (t[t.length] = s)
          }
          if (t.length) return t
        } else {
          if ($[r]) return [r];
          if ("array" === e && "array" === r) return ["array"]
        }
      }

      function n(e) {
        for (var r = {}, t = 0; t < e.length; t++) r[e[t]] = !0;
        return r
      }

      function l(e) {
        return "number" == typeof e ? "[" + e + "]" : x.test(e) ? "." + e : "['" + c(e) + "']"
      }

      function c(e) {
        return e.replace(_, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t")
      }

      function h(e, r) {
        r += "[^0-9]";
        var t = e.match(new RegExp(r, "g"));
        return t ? t.length : 0
      }

      function u(e, r, t) {
        return r += "([^0-9])", t = t.replace(/\$/g, "$$$$"), e.replace(new RegExp(r, "g"), t + "$1")
      }

      function f(e) {
        return e.replace(O, "").replace(R, "").replace(I, "if (!($1))")
      }

      function d(e, r) {
        var t = e.match(A);
        return t && 2 === t.length ? r ? e.replace(q, "").replace(Q, C) : e.replace(k, "").replace(L, D) : e
      }

      function p(e, r) {
        for (var t in e) if (r[t]) return !0
      }

      function m(e, r, t) {
        for (var a in e) if (a != t && r[a]) return !0
      }

      function v(e) {
        return "'" + c(e) + "'"
      }

      function y(e, r, t, a) {
        var s = t ? "'/' + " + r + (a ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : a ? "'[' + " + r + " + ']'" : "'[\\'' + " + r + " + '\\']'";
        return E(e, s)
      }

      function g(e, r, t) {
        var a = v(t ? "/" + j(r) : l(r));
        return E(e, a)
      }

      function P(e, r, t) {
        var a, s, o, i;
        if ("" === e) return "rootData";
        if ("/" == e[0]) {
          if (!U.test(e)) throw new Error("Invalid JSON-pointer: " + e);
          s = e, o = "rootData"
        } else {
          if (i = e.match(V), !i) throw new Error("Invalid JSON-pointer: " + e);
          if (a = +i[1], s = i[2], "#" == s) {
            if (a >= r) throw new Error("Cannot access property/index " + a + " levels up, current level is " + r);
            return t[r - a]
          }
          if (a > r) throw new Error("Cannot access data " + a + " levels up, current level is " + r);
          if (o = "data" + (r - a || ""), !s) return o
        }
        for (var n = o, c = s.split("/"), h = 0; h < c.length; h++) {
          var u = c[h];
          u && (o += l(S(u)), n += " && " + o)
        }
        return n
      }

      function E(e, r) {
        return '""' == e ? r : (e + " + " + r).replace(/' \+ '/g, "")
      }

      function b(e) {
        return S(decodeURIComponent(e))
      }

      function w(e) {
        return encodeURIComponent(j(e))
      }

      function j(e) {
        return e.replace(/~/g, "~0").replace(/\//g, "~1")
      }

      function S(e) {
        return e.replace(/~1/g, "/").replace(/~0/g, "~")
      }

      r.exports = {
        copy: a,
        checkDataType: s,
        checkDataTypes: o,
        coerceToTypes: i,
        toHash: n,
        getProperty: l,
        escapeQuotes: c,
        ucs2length: e("./ucs2length"),
        varOccurences: h,
        varReplace: u,
        cleanUpCode: f,
        cleanUpVarErrors: d,
        schemaHasRules: p,
        schemaHasRulesExcept: m,
        stableStringify: e("json-stable-stringify"),
        toQuotedString: v,
        getPathExpr: y,
        getPath: g,
        getData: P,
        unescapeFragment: b,
        escapeFragment: w,
        escapeJsonPointer: j
      };
      var $ = n(["string", "number", "integer", "boolean", "null"]), x = /^[a-z$_][a-z$_0-9]*$/i, _ = /'|\\/g,
        O = /else\s*{\s*}/g, R = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,
        I = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g, A = /[^v\.]errors/g,
        k = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,
        q = /var errors = 0;|var vErrors = null;/g, L = "return errors === 0;",
        D = "validate.errors = null; return true;",
        Q = /if \(errors === 0\) return true;\s*else throw new ValidationError\(vErrors\);/, C = "return true;",
        U = /^\/(?:[^~]|~0|~1)*$/, V = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/
    }, {"./ucs2length": 10, "json-stable-stringify": 42}], 12: [function (e, r, t) {
      "use strict";

      function a(e) {
        this.message = "validation failed", this.errors = e, this.ajv = this.validation = !0
      }

      r.exports = a, a.prototype = Object.create(Error.prototype), a.prototype.constructor = a
    }, {}], 13: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "valid" + s;
        if (a += "var " + u + " = undefined;", e.opts.format === !1) return a += " " + u + " = true; ";
        var f = e.schema.format, d = e.opts.v5 && f.$data, p = "";
        if (d) {
          var m = e.util.getData(f.$data, o, e.dataPathArr), v = "format" + s, y = "compare" + s;
          a += " var " + v + " = formats[" + m + "] , " + y + " = " + v + " && " + v + ".compare;"
        } else {
          var v = e.formats[f];
          if (!v || !v.compare) return a += "  " + u + " = true; ";
          var y = "formats" + e.util.getProperty(f) + ".compare"
        }
        var g, P = "formatMaximum" == r, E = "formatExclusive" + (P ? "Maximum" : "Minimum"), b = e.schema[E],
          w = e.opts.v5 && b && b.$data, j = P ? "<" : ">", S = "result" + s, $ = e.opts.v5 && i && i.$data;
        if ($ ? (a += " var schema" + s + " = " + e.util.getData(i.$data, o, e.dataPathArr) + "; ", g = "schema" + s) : g = i, w) {
          var x = e.util.getData(b.$data, o, e.dataPathArr), _ = "exclusive" + s, O = "op" + s, R = "' + " + O + " + '";
          a += " var schemaExcl" + s + " = " + x + "; ", x = "schemaExcl" + s, a += " if (typeof " + x + " != 'boolean' && " + x + " !== undefined) { " + u + " = false; ";
          var t = E, I = I || [];
          I.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "_formatExclusiveLimit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", e.opts.messages !== !1 && (a += " , message: '" + E + " should be boolean' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
          var A = a;
          a = I.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + A + "]); " : " validate.errors = [" + A + "]; return false; " : " var err = " + A + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " }  ", c && (p += "}", a += " else { "), $ && (a += " if (" + g + " === undefined) " + u + " = true; else if (typeof " + g + " != 'string') " + u + " = false; else { ", p += "}"), d && (a += " if (!" + y + ") " + u + " = true; else { ", p += "}"), a += " var " + S + " = " + y + "(" + h + ",  ", a += $ ? "" + g : "" + e.util.toQuotedString(i), a += " ); if (" + S + " === undefined) " + u + " = false; var " + _ + " = " + x + " === true; if (" + u + " === undefined) { " + u + " = " + _ + " ? " + S + " " + j + " 0 : " + S + " " + j + "= 0; } if (!" + u + ") var op" + s + " = " + _ + " ? '" + j + "' : '" + j + "=';"
        } else {
          var _ = b === !0, R = j;
          _ || (R += "=");
          var O = "'" + R + "'";
          $ && (a += " if (" + g + " === undefined) " + u + " = true; else if (typeof " + g + " != 'string') " + u + " = false; else { ", p += "}"), d && (a += " if (!" + y + ") " + u + " = true; else { ", p += "}"), a += " var " + S + " = " + y + "(" + h + ",  ", a += $ ? "" + g : "" + e.util.toQuotedString(i), a += " ); if (" + S + " === undefined) " + u + " = false; if (" + u + " === undefined) " + u + " = " + S + " " + j, _ || (a += "="), a += " 0;"
        }
        a += "" + p + "if (!" + u + ") { ";
        var t = r, I = I || [];
        I.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "_formatLimit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { comparison: " + O + ", limit:  ", a += $ ? "" + g : "" + e.util.toQuotedString(i), a += " , exclusive: " + _ + " } ", e.opts.messages !== !1 && (a += " , message: 'should be " + R + ' "', a += $ ? "' + " + g + " + '" : "" + e.util.escapeQuotes(i), a += "\"' "), e.opts.verbose && (a += " , schema:  ", a += $ ? "validate.schema" + n : "" + e.util.toQuotedString(i), a += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
        var A = a;
        return a = I.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + A + "]); " : " validate.errors = [" + A + "]; return false; " : " var err = " + A + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += "}"
      }
    }, {}], 14: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = e.opts.v5 && n && n.$data;
        f ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n;
        var d = "maximum" == r, p = d ? "exclusiveMaximum" : "exclusiveMinimum", m = e.schema[p],
          v = e.opts.v5 && m && m.$data, y = d ? "<" : ">", g = d ? ">" : "<";
        if (v) {
          var P = e.util.getData(m.$data, i, e.dataPathArr), E = "exclusive" + o, b = "op" + o, w = "' + " + b + " + '";
          s += " var schemaExcl" + o + " = " + P + "; ", P = "schemaExcl" + o, s += " var exclusive" + o + "; if (typeof " + P + " != 'boolean' && typeof " + P + " != 'undefined') { ";
          var t = p, j = j || [];
          j.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: {} ", e.opts.messages !== !1 && (s += " , message: '" + p + " should be boolean' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
          var S = s;
          s = j.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + S + "]); " : " validate.errors = [" + S + "]; return false; " : " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } else if( ", f && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " ((exclusive" + o + " = " + P + " === true) ? " + u + " " + g + "= " + a + " : " + u + " " + g + " " + a + ") || " + u + " !== " + u + ") { var op" + o + " = exclusive" + o + " ? '" + y + "' : '" + y + "=';"
        } else {
          var E = m === !0, w = y;
          E || (w += "=");
          var b = "'" + w + "'";
          s += " if ( ", f && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " " + u + " " + g, E && (s += "="), s += " " + a + " || " + u + " !== " + u + ") {"
        }
        var t = r, j = j || [];
        j.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "_limit") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { comparison: " + b + ", limit: " + a + ", exclusive: " + E + " } ", e.opts.messages !== !1 && (s += " , message: 'should be " + w + " ", s += f ? "' + " + a : "" + n + "'"), e.opts.verbose && (s += " , schema:  ", s += f ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var S = s;
        return s = j.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + S + "]); " : " validate.errors = [" + S + "]; return false; " : " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } ", h && (s += " else { "), s
      }
    }, {}], 15: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = e.opts.v5 && n && n.$data;
        f ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n;
        var d = "maxItems" == r ? ">" : "<";
        s += "if ( ", f && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " " + u + ".length " + d + " " + a + ") { ";
        var t = r, p = p || [];
        p.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "_limitItems") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { limit: " + a + " } ", e.opts.messages !== !1 && (s += " , message: 'should NOT have ", s += "maxItems" == r ? "more" : "less", s += " than ", s += f ? "' + " + a + " + '" : "" + n, s += " items' "), e.opts.verbose && (s += " , schema:  ", s += f ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var m = s;
        return s = p.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", h && (s += " else { "), s
      }
    }, {}], 16: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = e.opts.v5 && n && n.$data;
        f ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n;
        var d = "maxLength" == r ? ">" : "<";
        s += "if ( ", f && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += e.opts.unicode === !1 ? " " + u + ".length " : " ucs2length(" + u + ") ", s += " " + d + " " + a + ") { ";
        var t = r, p = p || [];
        p.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "_limitLength") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { limit: " + a + " } ", e.opts.messages !== !1 && (s += " , message: 'should NOT be ", s += "maxLength" == r ? "longer" : "shorter", s += " than ", s += f ? "' + " + a + " + '" : "" + n, s += " characters' "), e.opts.verbose && (s += " , schema:  ", s += f ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var m = s;
        return s = p.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ",
          s += "} ", h && (s += " else { "), s
      }
    }, {}], 17: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = e.opts.v5 && n && n.$data;
        f ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n;
        var d = "maxProperties" == r ? ">" : "<";
        s += "if ( ", f && (s += " (" + a + " !== undefined && typeof " + a + " != 'number') || "), s += " Object.keys(" + u + ").length " + d + " " + a + ") { ";
        var t = r, p = p || [];
        p.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "_limitProperties") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { limit: " + a + " } ", e.opts.messages !== !1 && (s += " , message: 'should NOT have ", s += "maxProperties" == r ? "more" : "less", s += " than ", s += f ? "' + " + a + " + '" : "" + n, s += " properties' "), e.opts.verbose && (s += " , schema:  ", s += f ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var m = s;
        return s = p.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", h && (s += " else { "), s
      }
    }, {}], 18: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t = " ", a = e.schema[r], s = e.schemaPath + "." + r, o = e.errSchemaPath + "/" + r, i = !e.opts.allErrors,
          n = e.util.copy(e), l = "";
        n.level++;
        var c = n.baseId, h = a;
        if (h) for (var u, f = -1, d = h.length - 1; f < d;) u = h[f += 1], e.util.schemaHasRules(u, e.RULES.all) && (n.schema = u, n.schemaPath = s + "[" + f + "]", n.errSchemaPath = o + "/" + f, t += "  " + e.validate(n) + " ", n.baseId = c, i && (t += " if (valid" + n.level + ") { ", l += "}"));
        return i && (t += " " + l.slice(0, -1)), t = e.util.cleanUpCode(t)
      }
    }, {}], 19: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "valid" + s,
          f = "errs__" + s, d = e.util.copy(e), p = "";
        d.level++;
        var m = i.every(function (r) {
          return e.util.schemaHasRules(r, e.RULES.all)
        });
        if (m) {
          var v = d.baseId;
          a += " var " + f + " = errors; var " + u + " = false;  ";
          var y = e.compositeRule;
          e.compositeRule = d.compositeRule = !0;
          var g = i;
          if (g) for (var P, E = -1, b = g.length - 1; E < b;) P = g[E += 1], d.schema = P, d.schemaPath = n + "[" + E + "]", d.errSchemaPath = l + "/" + E, a += "  " + e.validate(d) + " ", d.baseId = v, a += " " + u + " = " + u + " || valid" + d.level + "; if (!" + u + ") { ", p += "}";
          e.compositeRule = d.compositeRule = y, a += " " + p + " if (!" + u + ") {  var err =   ", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "anyOf") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", e.opts.messages !== !1 && (a += " , message: 'should match some schema in anyOf' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else {  errors = " + f + "; if (vErrors !== null) { if (" + f + ") vErrors.length = " + f + "; else vErrors = null; } ", e.opts.allErrors && (a += " } "), a = e.util.cleanUpCode(a)
        } else c && (a += " if (true) { ");
        return a
      }
    }, {}], 20: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = "valid" + o,
          d = e.opts.v5 && n && n.$data;
        d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n, d || (s += " var schema" + o + " = validate.schema" + l + ";"), s += "var " + f + " = equal(" + u + ", schema" + o + "); if (!" + f + ") {   ";
        var p = p || [];
        p.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "constant") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: {} ", e.opts.messages !== !1 && (s += " , message: 'should be equal to constant' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var m = s;
        return s = p.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " }"
      }
    }, {}], 21: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = "errs__" + o,
          d = e.opts.v5 && n && n.$data;
        d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n;
        var p, m, v, y, g, P = this, E = "definition" + o, b = P.definition;
        if (d && b.$data) {
          g = "keywordValidate" + o;
          var w = b.validateSchema;
          s += " var " + E + " = RULES.custom['" + r + "'].definition; var " + g + " = " + E + ".validate;"
        } else y = e.useCustomRule(P, n, e.schema, e), a = "validate.schema" + l, g = y.code, p = b.compile, m = b.inline, v = b.macro;
        var j = g + ".errors", S = "i" + o, $ = "ruleErr" + o, x = b.async;
        if (x && !e.async) throw new Error("async keyword in sync schema");
        if (m || v || (s += "" + j + " = null;"), s += "var " + f + " = errors;var valid" + o + ";", m && b.statements) s += " " + y.validate; else if (v) {
          var _ = e.util.copy(e);
          _.level++, _.schema = y.validate, _.schemaPath = "";
          var O = e.compositeRule;
          e.compositeRule = _.compositeRule = !0;
          var R = e.validate(_).replace(/validate\.schema/g, g);
          e.compositeRule = _.compositeRule = O, s += " " + R
        } else if (!m) {
          var I = I || [];
          I.push(s), s = "", s += "  " + g + ".call( ", s += e.opts.passContext ? "this" : "self", s += p || b.schema === !1 ? " , " + u + " " : " , " + a + " , " + u + " , validate.schema" + e.schemaPath + " ", s += " , (dataPath || '')", '""' != e.errorPath && (s += " + " + e.errorPath), s += i ? " , data" + (i - 1 || "") + " , " + e.dataPathArr[i] + " " : " , parentData , parentDataProperty ", s += " , rootData )  ";
          var A = s;
          s = I.pop(), b.errors !== !1 && (x ? (j = "customErrors" + o, s += " var " + j + " = null; try { valid" + o + " = " + e.yieldAwait + A + "; } catch (e) { valid" + o + " = false; if (e instanceof ValidationError) " + j + " = e.errors; else throw e; } ") : s += " " + g + ".errors = null; ")
        }
        s += "if (", w && (s += " !" + E + ".validateSchema(" + a + ") || "), s += " ! ", s += m ? b.statements ? " valid" + o + " " : " (" + y.validate + ") " : v ? " valid" + _.level + " " : x ? b.errors === !1 ? " (" + e.yieldAwait + A + ") " : " valid" + o + " " : " " + A + " ", s += ") { ", t = P.keyword;
        var I = I || [];
        I.push(s), s = "";
        var I = I || [];
        I.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "custom") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { keyword: '" + P.keyword + "' } ", e.opts.messages !== !1 && (s += " , message: 'should pass \"" + P.keyword + "\" keyword validation' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var k = s;
        s = I.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + k + "]); " : " validate.errors = [" + k + "]; return false; " : " var err = " + k + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        var q = s;
        return s = I.pop(), m ? b.errors ? "full" != b.errors && (s += "  for (var " + S + "=" + f + "; " + S + "<errors; " + S + "++) { var " + $ + " = vErrors[" + S + "]; if (" + $ + ".dataPath === undefined) { " + $ + ".dataPath = (dataPath || '') + " + e.errorPath + "; } if (" + $ + ".schemaPath === undefined) { " + $ + '.schemaPath = "' + c + '"; } ', e.opts.verbose && (s += " " + $ + ".schema = " + a + "; " + $ + ".data = " + u + "; "), s += " } ") : b.errors === !1 ? s += " " + q + " " : (s += " if (" + f + " == errors) { " + q + " } else {  for (var " + S + "=" + f + "; " + S + "<errors; " + S + "++) { var " + $ + " = vErrors[" + S + "]; if (" + $ + ".dataPath === undefined) { " + $ + ".dataPath = (dataPath || '') + " + e.errorPath + "; } if (" + $ + ".schemaPath === undefined) { " + $ + '.schemaPath = "' + c + '"; } ', e.opts.verbose && (s += " " + $ + ".schema = " + a + "; " + $ + ".data = " + u + "; "), s += " } } ") : v ? (s += "   var err =   ", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "custom") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { keyword: '" + P.keyword + "' } ", e.opts.messages !== !1 && (s += " , message: 'should pass \"" + P.keyword + "\" keyword validation' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ", s += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", !e.compositeRule && h && (s += e.async ? " throw new ValidationError(vErrors); " : " validate.errors = vErrors; return false ")) : b.errors === !1 ? s += " " + q + " " : (s += " if (Array.isArray(" + j + ")) { if (vErrors === null) vErrors = " + j + "; else vErrors = vErrors.concat(" + j + "); errors = vErrors.length;  for (var " + S + "=" + f + "; " + S + "<errors; " + S + "++) { var " + $ + " = vErrors[" + S + "];  " + $ + ".dataPath = (dataPath || '') + " + e.errorPath + ";   " + $ + '.schemaPath = "' + c + '";  ', e.opts.verbose && (s += " " + $ + ".schema = " + a + "; " + $ + ".data = " + u + "; "), s += " } } else { " + q + " } "), s += " } ", h && (s += " else { "), s
      }
    }, {}], 22: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "errs__" + s,
          f = e.util.copy(e), d = "";
        f.level++;
        var p = {}, m = {};
        for (P in i) {
          var v = i[P], y = Array.isArray(v) ? m : p;
          y[P] = v
        }
        a += "var " + u + " = errors;";
        var g = e.errorPath;
        a += "var missing" + s + ";";
        for (var P in m) {
          if (y = m[P], a += " if (" + h + e.util.getProperty(P) + " !== undefined ", c) {
            a += " && ( ";
            var E = y;
            if (E) for (var b, w = -1, j = E.length - 1; w < j;) {
              b = E[w += 1], w && (a += " || ");
              var S = e.util.getProperty(b);
              a += " ( " + h + S + " === undefined && (missing" + s + " = " + e.util.toQuotedString(e.opts.jsonPointers ? b : S) + ") ) "
            }
            a += ")) {  ";
            var $ = "missing" + s, x = "' + " + $ + " + '";
            e.opts._errorDataPathProperty && (e.errorPath = e.opts.jsonPointers ? e.util.getPathExpr(g, $, !0) : g + " + " + $);
            var _ = _ || [];
            _.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "dependencies") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { property: '" + e.util.escapeQuotes(P) + "', missingProperty: '" + x + "', depsCount: " + y.length + ", deps: '" + e.util.escapeQuotes(1 == y.length ? y[0] : y.join(", ")) + "' } ", e.opts.messages !== !1 && (a += " , message: 'should have ", a += 1 == y.length ? "property " + e.util.escapeQuotes(y[0]) : "properties " + e.util.escapeQuotes(y.join(", ")), a += " when property " + e.util.escapeQuotes(P) + " is present' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
            var O = a;
            a = _.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + O + "]); " : " validate.errors = [" + O + "]; return false; " : " var err = " + O + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
          } else {
            a += " ) { ";
            var R = y;
            if (R) for (var I, A = -1, k = R.length - 1; A < k;) {
              I = R[A += 1];
              var S = e.util.getProperty(I), x = e.util.escapeQuotes(I);
              e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(g, I, e.opts.jsonPointers)), a += " if (" + h + S + " === undefined) {  var err =   ", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "dependencies") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { property: '" + e.util.escapeQuotes(P) + "', missingProperty: '" + x + "', depsCount: " + y.length + ", deps: '" + e.util.escapeQuotes(1 == y.length ? y[0] : y.join(", ")) + "' } ", e.opts.messages !== !1 && (a += " , message: 'should have ", a += 1 == y.length ? "property " + e.util.escapeQuotes(y[0]) : "properties " + e.util.escapeQuotes(y.join(", ")), a += " when property " + e.util.escapeQuotes(P) + " is present' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "
            }
          }
          a += " }   ", c && (d += "}", a += " else { ")
        }
        e.errorPath = g;
        var q = f.baseId;
        for (var P in p) {
          var v = p[P];
          e.util.schemaHasRules(v, e.RULES.all) && (a += " valid" + f.level + " = true; if (" + h + "['" + P + "'] !== undefined) { ", f.schema = v, f.schemaPath = n + e.util.getProperty(P), f.errSchemaPath = l + "/" + e.util.escapeFragment(P), a += "  " + e.validate(f) + " ", f.baseId = q, a += " }  ", c && (a += " if (valid" + f.level + ") { ", d += "}"))
        }
        return c && (a += "   " + d + " if (" + u + " == errors) {"), a = e.util.cleanUpCode(a)
      }
    }, {}], 23: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = "valid" + o,
          d = e.opts.v5 && n && n.$data;
        d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n;
        var p = "i" + o;
        d || (s += " var schema" + o + " = validate.schema" + l + ";"), s += "var " + f + ";", d && (s += " if (schema" + o + " === undefined) " + f + " = true; else if (!Array.isArray(schema" + o + ")) " + f + " = false; else {"), s += "" + f + " = false;for (var " + p + "=0; " + p + "<schema" + o + ".length; " + p + "++) if (equal(" + u + ", schema" + o + "[" + p + "])) { " + f + " = true; break; }", d && (s += "  }  "), s += " if (!" + f + ") {   ";
        var m = m || [];
        m.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "enum") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { allowedValues: schema" + o + " } ", e.opts.messages !== !1 && (s += " , message: 'should be equal to one of the allowed values' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var v = s;
        return s = m.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + v + "]); " : " validate.errors = [" + v + "]; return false; " : " var err = " + v + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " }", h && (s += " else { "), s
      }
    }, {}], 24: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || "");
        if (e.opts.format === !1) return c && (a += " if (true) { "), a;
        var u, f = e.opts.v5 && i && i.$data;
        f ? (a += " var schema" + s + " = " + e.util.getData(i.$data, o, e.dataPathArr) + "; ", u = "schema" + s) : u = i;
        var d = e.opts.unknownFormats, p = Array.isArray(d);
        if (f) {
          var m = "format" + s;
          a += " var " + m + " = formats[" + u + "]; var isObject" + s + " = typeof " + m + " == 'object' && !(" + m + " instanceof RegExp) && " + m + ".validate; if (isObject" + s + ") { ", e.async && (a += " var async" + s + " = " + m + ".async; "), a += " " + m + " = " + m + ".validate; } if (  ", f && (a += " (" + u + " !== undefined && typeof " + u + " != 'string') || "), a += " (", (d === !0 || p) && (a += " (" + u + " && !" + m + " ", p && (a += " && self._opts.unknownFormats.indexOf(" + u + ") == -1 "), a += ") || "), a += " (" + m + " && !(typeof " + m + " == 'function' ? ", a += e.async ? " (async" + s + " ? " + e.yieldAwait + " " + m + "(" + h + ") : " + m + "(" + h + ")) " : " " + m + "(" + h + ") ", a += " : " + m + ".test(" + h + "))))) {"
        } else {
          var m = e.formats[i];
          if (!m) {
            if (d === !0 || p && d.indexOf(i) == -1) throw new Error('unknown format "' + i + '" is used in schema at path "' + e.errSchemaPath + '"');
            return p || (console.warn('unknown format "' + i + '" ignored in schema at path "' + e.errSchemaPath + '"'), "ignore" !== d && console.warn("In the next major version it will throw exception. See option unknownFormats for more information")), c && (a += " if (true) { "), a
          }
          var v = "object" == typeof m && !(m instanceof RegExp) && m.validate;
          if (v) {
            var y = m.async === !0;
            m = m.validate
          }
          if (y) {
            if (!e.async) throw new Error("async format in sync schema");
            var g = "formats" + e.util.getProperty(i) + ".validate";
            a += " if (!(" + e.yieldAwait + " " + g + "(" + h + "))) { "
          } else {
            a += " if (! ";
            var g = "formats" + e.util.getProperty(i);
            v && (g += ".validate"), a += "function" == typeof m ? " " + g + "(" + h + ") " : " " + g + ".test(" + h + ") ", a += ") { "
          }
        }
        var P = P || [];
        P.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "format") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { format:  ", a += f ? "" + u : "" + e.util.toQuotedString(i), a += "  } ", e.opts.messages !== !1 && (a += " , message: 'should match format \"", a += f ? "' + " + u + " + '" : "" + e.util.escapeQuotes(i), a += "\"' "), e.opts.verbose && (a += " , schema:  ", a += f ? "validate.schema" + n : "" + e.util.toQuotedString(i), a += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
        var E = a;
        return a = P.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + E + "]); " : " validate.errors = [" + E + "]; return false; " : " var err = " + E + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } ", c && (a += " else { "), a
      }
    }, {}], 25: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "valid" + s,
          f = "errs__" + s, d = e.util.copy(e), p = "";
        d.level++;
        var m = d.dataLevel = e.dataLevel + 1, v = "data" + m, y = e.baseId;
        if (a += "var " + f + " = errors;var " + u + ";", Array.isArray(i)) {
          var g = e.schema.additionalItems;
          if (g === !1) {
            a += " " + u + " = " + h + ".length <= " + i.length + "; ";
            var P = l;
            l = e.errSchemaPath + "/additionalItems", a += "  if (!" + u + ") {   ";
            var E = E || [];
            E.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "additionalItems") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { limit: " + i.length + " } ", e.opts.messages !== !1 && (a += " , message: 'should NOT have more than " + i.length + " items' "), e.opts.verbose && (a += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
            var b = a;
            a = E.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + b + "]); " : " validate.errors = [" + b + "]; return false; " : " var err = " + b + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } ", l = P, c && (p += "}", a += " else { ")
          }
          var w = i;
          if (w) for (var j, S = -1, $ = w.length - 1; S < $;) if (j = w[S += 1], e.util.schemaHasRules(j, e.RULES.all)) {
            a += " valid" + d.level + " = true; if (" + h + ".length > " + S + ") { ";
            var x = h + "[" + S + "]";
            d.schema = j, d.schemaPath = n + "[" + S + "]", d.errSchemaPath = l + "/" + S, d.errorPath = e.util.getPathExpr(e.errorPath, S, e.opts.jsonPointers, !0), d.dataPathArr[m] = S;
            var _ = e.validate(d);
            d.baseId = y, a += e.util.varOccurences(_, v) < 2 ? " " + e.util.varReplace(_, v, x) + " " : " var " + v + " = " + x + "; " + _ + " ", a += " }  ", c && (a += " if (valid" + d.level + ") { ", p += "}")
          }
          if ("object" == typeof g && e.util.schemaHasRules(g, e.RULES.all)) {
            d.schema = g, d.schemaPath = e.schemaPath + ".additionalItems", d.errSchemaPath = e.errSchemaPath + "/additionalItems", a += " valid" + d.level + " = true; if (" + h + ".length > " + i.length + ") {  for (var i" + s + " = " + i.length + "; i" + s + " < " + h + ".length; i" + s + "++) { ", d.errorPath = e.util.getPathExpr(e.errorPath, "i" + s, e.opts.jsonPointers, !0);
            var x = h + "[i" + s + "]";
            d.dataPathArr[m] = "i" + s;
            var _ = e.validate(d);
            d.baseId = y, a += e.util.varOccurences(_, v) < 2 ? " " + e.util.varReplace(_, v, x) + " " : " var " + v + " = " + x + "; " + _ + " ", c && (a += " if (!valid" + d.level + ") break; "), a += " } }  ", c && (a += " if (valid" + d.level + ") { ", p += "}")
          }
        } else if (e.util.schemaHasRules(i, e.RULES.all)) {
          d.schema = i, d.schemaPath = n, d.errSchemaPath = l, a += "  for (var i" + s + " = 0; i" + s + " < " + h + ".length; i" + s + "++) { ", d.errorPath = e.util.getPathExpr(e.errorPath, "i" + s, e.opts.jsonPointers, !0);
          var x = h + "[i" + s + "]";
          d.dataPathArr[m] = "i" + s;
          var _ = e.validate(d);
          d.baseId = y, a += e.util.varOccurences(_, v) < 2 ? " " + e.util.varReplace(_, v, x) + " " : " var " + v + " = " + x + "; " + _ + " ", c && (a += " if (!valid" + d.level + ") break; "), a += " }  ", c && (a += " if (valid" + d.level + ") { ", p += "}")
        }
        return c && (a += " " + p + " if (" + f + " == errors) {"), a = e.util.cleanUpCode(a)
      }
    }, {}], 26: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = e.opts.v5 && n && n.$data;
        f ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n, s += "var division" + o + ";if (", f && (s += " " + a + " !== undefined && ( typeof " + a + " != 'number' || "), s += " (division" + o + " = " + u + " / " + a + ", ", s += e.opts.multipleOfPrecision ? " Math.abs(Math.round(division" + o + ") - division" + o + ") > 1e-" + e.opts.multipleOfPrecision + " " : " division" + o + " !== parseInt(division" + o + ") ", s += " ) ", f && (s += "  )  "), s += " ) {   ";
        var d = d || [];
        d.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "multipleOf") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { multipleOf: " + a + " } ", e.opts.messages !== !1 && (s += " , message: 'should be multiple of ", s += f ? "' + " + a : "" + n + "'"), e.opts.verbose && (s += " , schema:  ", s += f ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var p = s;
        return s = d.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + p + "]); " : " validate.errors = [" + p + "]; return false; " : " var err = " + p + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", h && (s += " else { "), s
      }
    }, {}], 27: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "errs__" + s,
          f = e.util.copy(e);
        if (f.level++, e.util.schemaHasRules(i, e.RULES.all)) {
          f.schema = i, f.schemaPath = n, f.errSchemaPath = l, a += " var " + u + " = errors;  ";
          var d = e.compositeRule;
          e.compositeRule = f.compositeRule = !0, f.createErrors = !1;
          var p;
          f.opts.allErrors && (p = f.opts.allErrors, f.opts.allErrors = !1), a += " " + e.validate(f) + " ", f.createErrors = !0, p && (f.opts.allErrors = p), e.compositeRule = f.compositeRule = d, a += " if (valid" + f.level + ") {   ";
          var m = m || [];
          m.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "not") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", e.opts.messages !== !1 && (a += " , message: 'should NOT be valid' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
          var v = a;
          a = m.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + v + "]); " : " validate.errors = [" + v + "]; return false; " : " var err = " + v + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } else {  errors = " + u + "; if (vErrors !== null) { if (" + u + ") vErrors.length = " + u + "; else vErrors = null; } ", e.opts.allErrors && (a += " } ")
        } else a += "  var err =   ", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "not") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", e.opts.messages !== !1 && (a += " , message: 'should NOT be valid' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", c && (a += " if (false) { ");
        return a
      }
    }, {}], 28: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "valid" + s,
          f = "errs__" + s, d = e.util.copy(e), p = "";
        d.level++, a += "var " + f + " = errors;var prevValid" + s + " = false;var " + u + " = false;";
        var m = d.baseId, v = e.compositeRule;
        e.compositeRule = d.compositeRule = !0;
        var y = i;
        if (y) for (var g, P = -1, E = y.length - 1; P < E;) g = y[P += 1], e.util.schemaHasRules(g, e.RULES.all) ? (d.schema = g, d.schemaPath = n + "[" + P + "]", d.errSchemaPath = l + "/" + P, a += "  " + e.validate(d) + " ", d.baseId = m) : a += " var valid" + d.level + " = true; ", P && (a += " if (valid" + d.level + " && prevValid" + s + ") " + u + " = false; else { ", p += "}"), a += " if (valid" + d.level + ") " + u + " = prevValid" + s + " = true;";
        e.compositeRule = d.compositeRule = v, a += "" + p + "if (!" + u + ") {   ";
        var b = b || [];
        b.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "oneOf") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: {} ", e.opts.messages !== !1 && (a += " , message: 'should match exactly one schema in oneOf' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
        var w = a;
        return a = b.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + w + "]); " : " validate.errors = [" + w + "]; return false; " : " var err = " + w + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += "} else {  errors = " + f + "; if (vErrors !== null) { if (" + f + ") vErrors.length = " + f + "; else vErrors = null; }", e.opts.allErrors && (a += " } "), a
      }
    }, {}], 29: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = e.opts.v5 && n && n.$data;
        f ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n;
        var d = f ? "(new RegExp(" + a + "))" : e.usePattern(n);
        s += "if ( ", f && (s += " (" + a + " !== undefined && typeof " + a + " != 'string') || "), s += " !" + d + ".test(" + u + ") ) {   ";
        var p = p || [];
        p.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "pattern") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { pattern:  ", s += f ? "" + a : "" + e.util.toQuotedString(n), s += "  } ", e.opts.messages !== !1 && (s += " , message: 'should match pattern \"", s += f ? "' + " + a + " + '" : "" + e.util.escapeQuotes(n), s += "\"' "), e.opts.verbose && (s += " , schema:  ", s += f ? "validate.schema" + l : "" + e.util.toQuotedString(n), s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
        var m = s;
        return s = p.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += "} ", h && (s += " else { "), s
      }
    }, {}], 30: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "valid" + s, f = "key" + s,
          d = "patternMatched" + s, p = "", m = e.opts.ownProperties;
        a += "var " + u + " = true;";
        var v = i;
        if (v) for (var y, g = -1, P = v.length - 1; g < P;) {
          y = v[g += 1], a += " var " + d + " = false; for (var " + f + " in " + h + ") {  ", m && (a += " if (!Object.prototype.hasOwnProperty.call(" + h + ", " + f + ")) continue; "), a += " " + d + " = " + e.usePattern(y) + ".test(" + f + "); if (" + d + ") break; } ";
          var E = e.util.escapeQuotes(y);
          a += " if (!" + d + ") { " + u + " = false;  var err =   ", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "patternRequired") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingPattern: '" + E + "' } ", e.opts.messages !== !1 && (a += " , message: 'should have property matching pattern \\'" + E + "\\'' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ", a += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ", c && (p += "}", a += " else { ")
        }
        return a += "" + p
      }
    }, {}], 31: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "valid" + s,
          f = "errs__" + s, d = e.util.copy(e), p = "";
        d.level++;
        var m = "key" + s, v = d.dataLevel = e.dataLevel + 1, y = "data" + v, g = Object.keys(i || {}),
          P = e.schema.patternProperties || {}, E = Object.keys(P), b = e.schema.additionalProperties,
          w = g.length || E.length, j = b === !1, S = "object" == typeof b && Object.keys(b).length,
          $ = e.opts.removeAdditional, x = j || S || $, _ = e.opts.ownProperties, O = e.baseId, R = e.schema.required;
        if (R && (!e.opts.v5 || !R.$data) && R.length < e.opts.loopRequired) var I = e.util.toHash(R);
        if (e.opts.v5) var A = e.schema.patternGroups || {}, k = Object.keys(A);
        if (a += "var " + f + " = errors;var valid" + d.level + " = true;", x) {
          if (a += " for (var " + m + " in " + h + ") {  ", _ && (a += " if (!Object.prototype.hasOwnProperty.call(" + h + ", " + m + ")) continue; "), w) {
            if (a += " var isAdditional" + s + " = !(false ", g.length) if (g.length > 5) a += " || validate.schema" + n + "[" + m + "] "; else {
              var q = g;
              if (q) for (var L, D = -1, Q = q.length - 1; D < Q;) L = q[D += 1], a += " || " + m + " == " + e.util.toQuotedString(L) + " "
            }
            if (E.length) {
              var C = E;
              if (C) for (var U, V = -1, z = C.length - 1; V < z;) U = C[V += 1], a += " || " + e.usePattern(U) + ".test(" + m + ") "
            }
            if (e.opts.v5 && k && k.length) {
              var T = k;
              if (T) for (var M, V = -1, N = T.length - 1; V < N;) M = T[V += 1], a += " || " + e.usePattern(M) + ".test(" + m + ") "
            }
            a += " ); if (isAdditional" + s + ") { "
          }
          if ("all" == $) a += " delete " + h + "[" + m + "]; "; else {
            var F = e.errorPath, H = "' + key" + s + " + '";
            if (e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(e.errorPath, "key" + s, e.opts.jsonPointers)), j) if ($) a += " delete " + h + "[" + m + "]; "; else {
              a += " valid" + d.level + " = false; ";
              var J = l;
              l = e.errSchemaPath + "/additionalProperties";
              var G = G || [];
              G.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "additionalProperties") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { additionalProperty: '" + H + "' } ", e.opts.messages !== !1 && (a += " , message: 'should NOT have additional properties' "), e.opts.verbose && (a += " , schema: false , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
              var K = a;
              a = G.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + K + "]); " : " validate.errors = [" + K + "]; return false; " : " var err = " + K + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", l = J, c && (a += " break; ")
            } else if (S) if ("failing" == $) {
              a += " var " + f + " = errors;  ";
              var B = e.compositeRule;
              e.compositeRule = d.compositeRule = !0, d.schema = b, d.schemaPath = e.schemaPath + ".additionalProperties", d.errSchemaPath = e.errSchemaPath + "/additionalProperties", d.errorPath = e.opts._errorDataPathProperty ? e.errorPath : e.util.getPathExpr(e.errorPath, "key" + s, e.opts.jsonPointers);
              var Z = h + "[key" + s + "]";
              d.dataPathArr[v] = "key" + s;
              var Y = e.validate(d);
              d.baseId = O, a += e.util.varOccurences(Y, y) < 2 ? " " + e.util.varReplace(Y, y, Z) + " " : " var " + y + " = " + Z + "; " + Y + " ", a += " if (!valid" + d.level + ") { errors = " + f + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + h + "[" + m + "]; }  ", e.compositeRule = d.compositeRule = B
            } else {
              d.schema = b, d.schemaPath = e.schemaPath + ".additionalProperties", d.errSchemaPath = e.errSchemaPath + "/additionalProperties", d.errorPath = e.opts._errorDataPathProperty ? e.errorPath : e.util.getPathExpr(e.errorPath, "key" + s, e.opts.jsonPointers);
              var Z = h + "[key" + s + "]";
              d.dataPathArr[v] = "key" + s;
              var Y = e.validate(d);
              d.baseId = O, a += e.util.varOccurences(Y, y) < 2 ? " " + e.util.varReplace(Y, y, Z) + " " : " var " + y + " = " + Z + "; " + Y + " ", c && (a += " if (!valid" + d.level + ") break; ")
            }
            e.errorPath = F
          }
          w && (a += " } "), a += " }  ", c && (a += " if (valid" + d.level + ") { ", p += "}")
        }
        var W = e.opts.useDefaults && !e.compositeRule;
        if (g.length) {
          var X = g;
          if (X) for (var L, ee = -1, re = X.length - 1; ee < re;) {
            L = X[ee += 1];
            var te = i[L];
            if (e.util.schemaHasRules(te, e.RULES.all)) {
              var ae = e.util.getProperty(L), Z = h + ae, se = W && void 0 !== te.default;
              d.schema = te, d.schemaPath = n + ae, d.errSchemaPath = l + "/" + e.util.escapeFragment(L), d.errorPath = e.util.getPath(e.errorPath, L, e.opts.jsonPointers), d.dataPathArr[v] = e.util.toQuotedString(L);
              var Y = e.validate(d);
              if (d.baseId = O, e.util.varOccurences(Y, y) < 2) {
                Y = e.util.varReplace(Y, y, Z);
                var oe = Z
              } else {
                var oe = y;
                a += " var " + y + " = " + Z + "; "
              }
              if (se) a += " " + Y + " "; else {
                if (I && I[L]) {
                  a += " if (" + oe + " === undefined) { valid" + d.level + " = false; ";
                  var F = e.errorPath, J = l, ie = e.util.escapeQuotes(L);
                  e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(F, L, e.opts.jsonPointers)), l = e.errSchemaPath + "/required";
                  var G = G || [];
                  G.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "required") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { missingProperty: '" + ie + "' } ", e.opts.messages !== !1 && (a += " , message: '", a += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + ie + "\\'", a += "' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
                  var K = a;
                  a = G.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + K + "]); " : " validate.errors = [" + K + "]; return false; " : " var err = " + K + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", l = J, e.errorPath = F, a += " } else { "
                } else a += c ? " if (" + oe + " === undefined) { valid" + d.level + " = true; } else { " : " if (" + oe + " !== undefined) { ";
                a += " " + Y + " } "
              }
            }
            c && (a += " if (valid" + d.level + ") { ", p += "}")
          }
        }
        var ne = E;
        if (ne) for (var U, le = -1, ce = ne.length - 1; le < ce;) {
          U = ne[le += 1];
          var te = P[U];
          if (e.util.schemaHasRules(te, e.RULES.all)) {
            d.schema = te, d.schemaPath = e.schemaPath + ".patternProperties" + e.util.getProperty(U), d.errSchemaPath = e.errSchemaPath + "/patternProperties/" + e.util.escapeFragment(U), a += " for (var " + m + " in " + h + ") {  ", _ && (a += " if (!Object.prototype.hasOwnProperty.call(" + h + ", " + m + ")) continue; "),
              a += " if (" + e.usePattern(U) + ".test(" + m + ")) { ", d.errorPath = e.util.getPathExpr(e.errorPath, "key" + s, e.opts.jsonPointers);
            var Z = h + "[key" + s + "]";
            d.dataPathArr[v] = "key" + s;
            var Y = e.validate(d);
            d.baseId = O, a += e.util.varOccurences(Y, y) < 2 ? " " + e.util.varReplace(Y, y, Z) + " " : " var " + y + " = " + Z + "; " + Y + " ", c && (a += " if (!valid" + d.level + ") break; "), a += " } ", c && (a += " else valid" + d.level + " = true; "), a += " }  ", c && (a += " if (valid" + d.level + ") { ", p += "}")
          }
        }
        if (e.opts.v5) {
          var he = k;
          if (he) for (var M, ue = -1, fe = he.length - 1; ue < fe;) {
            M = he[ue += 1];
            var de = A[M], te = de.schema;
            if (e.util.schemaHasRules(te, e.RULES.all)) {
              d.schema = te, d.schemaPath = e.schemaPath + ".patternGroups" + e.util.getProperty(M) + ".schema", d.errSchemaPath = e.errSchemaPath + "/patternGroups/" + e.util.escapeFragment(M) + "/schema", a += " var pgPropCount" + s + " = 0; for (var " + m + " in " + h + ") {  ", _ && (a += " if (!Object.prototype.hasOwnProperty.call(" + h + ", " + m + ")) continue; "), a += " if (" + e.usePattern(M) + ".test(" + m + ")) { pgPropCount" + s + "++; ", d.errorPath = e.util.getPathExpr(e.errorPath, "key" + s, e.opts.jsonPointers);
              var Z = h + "[key" + s + "]";
              d.dataPathArr[v] = "key" + s;
              var Y = e.validate(d);
              d.baseId = O, a += e.util.varOccurences(Y, y) < 2 ? " " + e.util.varReplace(Y, y, Z) + " " : " var " + y + " = " + Z + "; " + Y + " ", c && (a += " if (!valid" + d.level + ") break; "), a += " } ", c && (a += " else valid" + d.level + " = true; "), a += " }  ", c && (a += " if (valid" + d.level + ") { ", p += "}");
              var pe = de.minimum, me = de.maximum;
              if (void 0 !== pe || void 0 !== me) {
                a += " var " + u + " = true; ";
                var J = l;
                if (void 0 !== pe) {
                  var ve = pe, ye = "minimum", ge = "less";
                  a += " " + u + " = pgPropCount" + s + " >= " + pe + "; ", l = e.errSchemaPath + "/patternGroups/minimum", a += "  if (!" + u + ") {   ";
                  var G = G || [];
                  G.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "patternGroups") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { reason: '" + ye + "', limit: " + ve + ", pattern: '" + e.util.escapeQuotes(M) + "' } ", e.opts.messages !== !1 && (a += " , message: 'should NOT have " + ge + " than " + ve + ' properties matching pattern "' + e.util.escapeQuotes(M) + "\"' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
                  var K = a;
                  a = G.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + K + "]); " : " validate.errors = [" + K + "]; return false; " : " var err = " + K + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } ", void 0 !== me && (a += " else ")
                }
                if (void 0 !== me) {
                  var ve = me, ye = "maximum", ge = "more";
                  a += " " + u + " = pgPropCount" + s + " <= " + me + "; ", l = e.errSchemaPath + "/patternGroups/maximum", a += "  if (!" + u + ") {   ";
                  var G = G || [];
                  G.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "patternGroups") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { reason: '" + ye + "', limit: " + ve + ", pattern: '" + e.util.escapeQuotes(M) + "' } ", e.opts.messages !== !1 && (a += " , message: 'should NOT have " + ge + " than " + ve + ' properties matching pattern "' + e.util.escapeQuotes(M) + "\"' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
                  var K = a;
                  a = G.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + K + "]); " : " validate.errors = [" + K + "]; return false; " : " var err = " + K + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", a += " } "
                }
                l = J, c && (a += " if (" + u + ") { ", p += "}")
              }
            }
          }
        }
        return c && (a += " " + p + " if (" + f + " == errors) {"), a = e.util.cleanUpCode(a)
      }
    }, {}], 32: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s, o = " ", i = e.level, n = e.dataLevel, l = e.schema[r], c = e.errSchemaPath + "/" + r,
          h = !e.opts.allErrors, u = "data" + (n || ""), f = "valid" + i;
        if ("#" == l || "#/" == l) e.isRoot ? (a = e.async, s = "validate") : (a = e.root.schema.$async === !0, s = "root.refVal[0]"); else {
          var d = e.resolveRef(e.baseId, l, e.isRoot);
          if (void 0 === d) {
            var p = "can't resolve reference " + l + " from id " + e.baseId;
            if ("fail" == e.opts.missingRefs) {
              console.log(p);
              var m = m || [];
              m.push(o), o = "", e.createErrors !== !1 ? (o += " { keyword: '" + (t || "$ref") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { ref: '" + e.util.escapeQuotes(l) + "' } ", e.opts.messages !== !1 && (o += " , message: 'can\\'t resolve reference " + e.util.escapeQuotes(l) + "' "), e.opts.verbose && (o += " , schema: " + e.util.toQuotedString(l) + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), o += " } ") : o += " {} ";
              var v = o;
              o = m.pop(), o += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + v + "]); " : " validate.errors = [" + v + "]; return false; " : " var err = " + v + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", h && (o += " if (false) { ")
            } else {
              if ("ignore" != e.opts.missingRefs) {
                var y = new Error(p);
                throw y.missingRef = e.resolve.url(e.baseId, l), y.missingSchema = e.resolve.normalizeId(e.resolve.fullPath(y.missingRef)), y
              }
              console.log(p), h && (o += " if (true) { ")
            }
          } else if (d.inline) {
            var g = e.util.copy(e);
            g.level++, g.schema = d.schema, g.schemaPath = "", g.errSchemaPath = l;
            var P = e.validate(g).replace(/validate\.schema/g, d.code);
            o += " " + P + " ", h && (o += " if (valid" + g.level + ") { ")
          } else a = d.$async === !0, s = d.code
        }
        if (s) {
          var m = m || [];
          m.push(o), o = "", o += e.opts.passContext ? " " + s + ".call(this, " : " " + s + "( ", o += " " + u + ", (dataPath || '')", '""' != e.errorPath && (o += " + " + e.errorPath), o += n ? " , data" + (n - 1 || "") + " , " + e.dataPathArr[n] + " " : " , parentData , parentDataProperty ", o += ", rootData)  ";
          var E = o;
          if (o = m.pop(), a) {
            if (!e.async) throw new Error("async schema referenced by sync schema");
            o += " try { ", h && (o += "var " + f + " ="), o += " " + e.yieldAwait + " " + E + "; } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; } ", h && (o += " if (" + f + ") { ")
          } else o += " if (!" + E + ") { if (vErrors === null) vErrors = " + s + ".errors; else vErrors = vErrors.concat(" + s + ".errors); errors = vErrors.length; } ", h && (o += " else { ")
        }
        return o
      }
    }, {}], 33: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = "valid" + o,
          d = e.opts.v5 && n && n.$data;
        if (d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n, !d) if (n.length < e.opts.loopRequired && e.schema.properties && Object.keys(e.schema.properties).length) {
          var p = [], m = n;
          if (m) for (var v, y = -1, g = m.length - 1; y < g;) {
            v = m[y += 1];
            var P = e.schema.properties[v];
            P && e.util.schemaHasRules(P, e.RULES.all) || (p[p.length] = v)
          }
        } else var p = n;
        if (d || p.length) {
          var E = e.errorPath, b = d || p.length >= e.opts.loopRequired;
          if (h) if (s += " var missing" + o + "; ", b) {
            d || (s += " var schema" + o + " = validate.schema" + l + "; ");
            var w = "i" + o, j = "schema" + o + "[" + w + "]", S = "' + " + j + " + '";
            e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(E, j, e.opts.jsonPointers)), s += " var " + f + " = true; ", d && (s += " if (schema" + o + " === undefined) " + f + " = true; else if (!Array.isArray(schema" + o + ")) " + f + " = false; else {"), s += " for (var " + w + " = 0; " + w + " < schema" + o + ".length; " + w + "++) { " + f + " = " + u + "[schema" + o + "[" + w + "]] !== undefined; if (!" + f + ") break; } ", d && (s += "  }  "), s += "  if (!" + f + ") {   ";
            var $ = $ || [];
            $.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "required") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { missingProperty: '" + S + "' } ", e.opts.messages !== !1 && (s += " , message: '", s += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
            var x = s;
            s = $.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + x + "]); " : " validate.errors = [" + x + "]; return false; " : " var err = " + x + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } else { "
          } else {
            s += " if ( ";
            var _ = p;
            if (_) for (var O, w = -1, R = _.length - 1; w < R;) {
              O = _[w += 1], w && (s += " || ");
              var I = e.util.getProperty(O);
              s += " ( " + u + I + " === undefined && (missing" + o + " = " + e.util.toQuotedString(e.opts.jsonPointers ? O : I) + ") ) "
            }
            s += ") {  ";
            var j = "missing" + o, S = "' + " + j + " + '";
            e.opts._errorDataPathProperty && (e.errorPath = e.opts.jsonPointers ? e.util.getPathExpr(E, j, !0) : E + " + " + j);
            var $ = $ || [];
            $.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "required") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { missingProperty: '" + S + "' } ", e.opts.messages !== !1 && (s += " , message: '", s += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
            var x = s;
            s = $.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + x + "]); " : " validate.errors = [" + x + "]; return false; " : " var err = " + x + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } else { "
          } else if (b) {
            d || (s += " var schema" + o + " = validate.schema" + l + "; ");
            var w = "i" + o, j = "schema" + o + "[" + w + "]", S = "' + " + j + " + '";
            e.opts._errorDataPathProperty && (e.errorPath = e.util.getPathExpr(E, j, e.opts.jsonPointers)), d && (s += " if (schema" + o + " && !Array.isArray(schema" + o + ")) {  var err =   ", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "required") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { missingProperty: '" + S + "' } ", e.opts.messages !== !1 && (s += " , message: '", s += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ", s += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (schema" + o + " !== undefined) { "), s += " for (var " + w + " = 0; " + w + " < schema" + o + ".length; " + w + "++) { if (" + u + "[schema" + o + "[" + w + "]] === undefined) {  var err =   ", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "required") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { missingProperty: '" + S + "' } ", e.opts.messages !== !1 && (s += " , message: '", s += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ", s += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ", d && (s += "  }  ")
          } else {
            var A = p;
            if (A) for (var k, q = -1, L = A.length - 1; q < L;) {
              k = A[q += 1];
              var I = e.util.getProperty(k), S = e.util.escapeQuotes(k);
              e.opts._errorDataPathProperty && (e.errorPath = e.util.getPath(E, k, e.opts.jsonPointers)), s += " if (" + u + I + " === undefined) {  var err =   ", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "required") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { missingProperty: '" + S + "' } ", e.opts.messages !== !1 && (s += " , message: '", s += e.opts._errorDataPathProperty ? "is a required property" : "should have required property \\'" + S + "\\'", s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + l + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ", s += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } "
            }
          }
          e.errorPath = E
        } else h && (s += " if (true) {");
        return s
      }
    }, {}], 34: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a = " ", s = e.level, o = e.dataLevel, i = e.schema[r], n = e.schemaPath + "." + r,
          l = e.errSchemaPath + "/" + r, c = !e.opts.allErrors, h = "data" + (o || ""), u = "valid" + s,
          f = "errs__" + s, d = e.util.copy(e), p = "";
        d.level++;
        var m, v = "ifPassed" + e.level, y = d.baseId;
        a += "var " + v + ";";
        var g = i;
        if (g) for (var P, E = -1, b = g.length - 1; E < b;) {
          if (P = g[E += 1], E && !m && (a += " if (!" + v + ") { ", p += "}"), P.if && e.util.schemaHasRules(P.if, e.RULES.all)) {
            a += " var " + f + " = errors;   ";
            var w = e.compositeRule;
            if (e.compositeRule = d.compositeRule = !0, d.createErrors = !1, d.schema = P.if, d.schemaPath = n + "[" + E + "].if", d.errSchemaPath = l + "/" + E + "/if", a += "  " + e.validate(d) + " ", d.baseId = y, d.createErrors = !0, e.compositeRule = d.compositeRule = w, a += " " + v + " = valid" + d.level + "; if (" + v + ") {  ", "boolean" == typeof P.then) {
              if (P.then === !1) {
                var j = j || [];
                j.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "switch") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { caseIndex: " + E + " } ", e.opts.messages !== !1 && (a += " , message: 'should pass \"switch\" keyword validation' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
                var S = a;
                a = j.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + S + "]); " : " validate.errors = [" + S + "]; return false; " : " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
              }
              a += " var valid" + d.level + " = " + P.then + "; "
            } else d.schema = P.then, d.schemaPath = n + "[" + E + "].then", d.errSchemaPath = l + "/" + E + "/then", a += "  " + e.validate(d) + " ", d.baseId = y;
            a += "  } else {  errors = " + f + "; if (vErrors !== null) { if (" + f + ") vErrors.length = " + f + "; else vErrors = null; } } "
          } else if (a += " " + v + " = true;  ", "boolean" == typeof P.then) {
            if (P.then === !1) {
              var j = j || [];
              j.push(a), a = "", e.createErrors !== !1 ? (a += " { keyword: '" + (t || "switch") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(l) + " , params: { caseIndex: " + E + " } ", e.opts.messages !== !1 && (a += " , message: 'should pass \"switch\" keyword validation' "), e.opts.verbose && (a += " , schema: validate.schema" + n + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + h + " "), a += " } ") : a += " {} ";
              var S = a;
              a = j.pop(), a += !e.compositeRule && c ? e.async ? " throw new ValidationError([" + S + "]); " : " validate.errors = [" + S + "]; return false; " : " var err = " + S + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; "
            }
            a += " var valid" + d.level + " = " + P.then + "; "
          } else d.schema = P.then, d.schemaPath = n + "[" + E + "].then", d.errSchemaPath = l + "/" + E + "/then", a += "  " + e.validate(d) + " ", d.baseId = y;
          m = P.continue
        }
        return a += "" + p + "var " + u + " = valid" + d.level + "; ", a = e.util.cleanUpCode(a)
      }
    }, {}], 35: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        var t, a, s = " ", o = e.level, i = e.dataLevel, n = e.schema[r], l = e.schemaPath + "." + r,
          c = e.errSchemaPath + "/" + r, h = !e.opts.allErrors, u = "data" + (i || ""), f = "valid" + o,
          d = e.opts.v5 && n && n.$data;
        if (d ? (s += " var schema" + o + " = " + e.util.getData(n.$data, i, e.dataPathArr) + "; ", a = "schema" + o) : a = n, (n || d) && e.opts.uniqueItems !== !1) {
          d && (s += " var " + f + "; if (" + a + " === false || " + a + " === undefined) " + f + " = true; else if (typeof " + a + " != 'boolean') " + f + " = false; else { "), s += " var " + f + " = true; if (" + u + ".length > 1) { var i = " + u + ".length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal(" + u + "[i], " + u + "[j])) { " + f + " = false; break outer; } } } } ", d && (s += "  }  "), s += " if (!" + f + ") {   ";
          var p = p || [];
          p.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (t || "uniqueItems") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(c) + " , params: { i: i, j: j } ", e.opts.messages !== !1 && (s += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' "), e.opts.verbose && (s += " , schema:  ", s += d ? "validate.schema" + l : "" + n, s += "         , parentSchema: validate.schema" + e.schemaPath + " , data: " + u + " "), s += " } ") : s += " {} ";
          var m = s;
          s = p.pop(), s += !e.compositeRule && h ? e.async ? " throw new ValidationError([" + m + "]); " : " validate.errors = [" + m + "]; return false; " : " var err = " + m + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } ", h && (s += " else { ")
        } else h && (s += " if (true) { ");
        return s
      }
    }, {}], 36: [function (e, r, t) {
      "use strict";
      r.exports = function (e, r) {
        function t(e) {
          for (var r = 0; r < e.rules.length; r++) if (a(e.rules[r])) return !0
        }

        function a(r) {
          return void 0 !== e.schema[r.keyword] || "properties" == r.keyword && (e.schema.additionalProperties === !1 || "object" == typeof e.schema.additionalProperties || e.schema.patternProperties && Object.keys(e.schema.patternProperties).length || e.opts.v5 && e.schema.patternGroups && Object.keys(e.schema.patternGroups).length)
        }

        var s = "", o = e.schema.$async === !0;
        if (e.isTop) {
          var i = e.isTop, n = e.level = 0, l = e.dataLevel = 0, c = "data";
          if (e.rootId = e.resolve.fullPath(e.root.schema.id), e.baseId = e.baseId || e.rootId, o) {
            e.async = !0;
            var h = "es7" == e.opts.async;
            e.yieldAwait = h ? "await" : "yield"
          }
          delete e.isTop, e.dataPathArr = [void 0], s += " var validate = ", o ? h ? s += " (async function " : ("co*" == e.opts.async && (s += "co.wrap"), s += "(function* ") : s += " (function ", s += " (data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; var vErrors = null; ", s += " var errors = 0;     ", s += " if (rootData === undefined) rootData = data;"
        } else {
          var n = e.level, l = e.dataLevel, c = "data" + (l || "");
          if (e.schema.id && (e.baseId = e.resolve.url(e.baseId, e.schema.id)), o && !e.async) throw new Error("async schema in sync schema");
          s += " var errs_" + n + " = errors;"
        }
        var u, f = "valid" + n, d = !e.opts.allErrors, p = "", m = "", v = e.schema.type, y = Array.isArray(v);
        if (v && e.opts.coerceTypes) {
          var g = e.util.coerceToTypes(e.opts.coerceTypes, v);
          if (g) {
            var P = e.schemaPath + ".type", E = e.errSchemaPath + "/type", b = y ? "checkDataTypes" : "checkDataType";
            s += " if (" + e.util[b](v, c, !0) + ") {  ";
            var w = "dataType" + n, j = "coerced" + n;
            s += " var " + w + " = typeof " + c + "; ", "array" == e.opts.coerceTypes && (s += " if (" + w + " == 'object' && Array.isArray(" + c + ")) " + w + " = 'array'; "), s += " var " + j + " = undefined; ";
            var S = "", $ = g;
            if ($) for (var x, _ = -1, O = $.length - 1; _ < O;) x = $[_ += 1], _ && (s += " if (" + j + " === undefined) { ", S += "}"), "array" == e.opts.coerceTypes && "array" != x && (s += " if (" + w + " == 'array' && " + c + ".length == 1) { " + j + " = " + c + " = " + c + "[0]; " + w + " = typeof " + c + ";  } "), "string" == x ? s += " if (" + w + " == 'number' || " + w + " == 'boolean') " + j + " = '' + " + c + "; else if (" + c + " === null) " + j + " = ''; " : "number" == x || "integer" == x ? (s += " if (" + w + " == 'boolean' || " + c + " === null || (" + w + " == 'string' && " + c + " && " + c + " == +" + c + " ", "integer" == x && (s += " && !(" + c + " % 1)"), s += ")) " + j + " = +" + c + "; ") : "boolean" == x ? s += " if (" + c + " === 'false' || " + c + " === 0 || " + c + " === null) " + j + " = false; else if (" + c + " === 'true' || " + c + " === 1) " + j + " = true; " : "null" == x ? s += " if (" + c + " === '' || " + c + " === 0 || " + c + " === false) " + j + " = null; " : "array" == e.opts.coerceTypes && "array" == x && (s += " if (" + w + " == 'string' || " + w + " == 'number' || " + w + " == 'boolean' || " + c + " == null) " + j + " = [" + c + "]; ");
            s += " " + S + " if (" + j + " === undefined) {   ";
            var R = R || [];
            R.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (u || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(E) + " , params: { type: '", s += y ? "" + v.join(",") : "" + v, s += "' } ", e.opts.messages !== !1 && (s += " , message: 'should be ", s += y ? "" + v.join(",") : "" + v, s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + P + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), s += " } ") : s += " {} ";
            var I = s;
            if (s = R.pop(), s += !e.compositeRule && d ? e.async ? " throw new ValidationError([" + I + "]); " : " validate.errors = [" + I + "]; return false; " : " var err = " + I + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } else { ", l) {
              var A = "data" + (l - 1 || ""), k = e.dataPathArr[l];
              s += " " + c + " = " + A + "[" + k + "] = " + j + "; "
            } else s += " data = " + j + "; if (parentData !== undefined) parentData[parentDataProperty] = " + j + "; ";
            s += " } } "
          }
        }
        var q;
        if (e.schema.$ref && (q = e.util.schemaHasRulesExcept(e.schema, e.RULES.all, "$ref"))) {
          if ("fail" == e.opts.extendRefs) throw new Error('$ref: validation keywords used in schema at path "' + e.errSchemaPath + '"');
          "ignore" == e.opts.extendRefs ? (q = !1, console.log('$ref: keywords ignored in schema at path "' + e.errSchemaPath + '"')) : e.opts.extendRefs !== !0 && console.log('$ref: all keywords used in schema at path "' + e.errSchemaPath + '". It will change in the next major version, see issue #260. Use option { extendRefs: true } to keep current behaviour')
        }
        if (e.schema.$ref && !q) s += " " + e.RULES.all.$ref.code(e, "$ref") + " ", d && (s += " } if (errors === ", s += i ? "0" : "errs_" + n, s += ") { ", m += "}"); else {
          var L = e.RULES;
          if (L) for (var D, Q = -1, C = L.length - 1; Q < C;) if (D = L[Q += 1], t(D)) {
            if (D.type && (s += " if (" + e.util.checkDataType(D.type, c) + ") { "), e.opts.useDefaults && !e.compositeRule) if ("object" == D.type && e.schema.properties) {
              var U = e.schema.properties, V = Object.keys(U), z = V;
              if (z) for (var T, M = -1, N = z.length - 1; M < N;) {
                T = z[M += 1];
                var F = U[T];
                if (void 0 !== F.default) {
                  var H = c + e.util.getProperty(T);
                  s += "  if (" + H + " === undefined) " + H + " = ", s += "shared" == e.opts.useDefaults ? " " + e.useDefault(F.default) + " " : " " + JSON.stringify(F.default) + " ", s += "; "
                }
              }
            } else if ("array" == D.type && Array.isArray(e.schema.items)) {
              var J = e.schema.items;
              if (J) for (var F, _ = -1, G = J.length - 1; _ < G;) if (F = J[_ += 1], void 0 !== F.default) {
                var H = c + "[" + _ + "]";
                s += "  if (" + H + " === undefined) " + H + " = ", s += "shared" == e.opts.useDefaults ? " " + e.useDefault(F.default) + " " : " " + JSON.stringify(F.default) + " ", s += "; "
              }
            }
            var K = D.rules;
            if (K) for (var B, Z = -1, Y = K.length - 1; Z < Y;) B = K[Z += 1], a(B) && (s += " " + B.code(e, B.keyword) + " ", d && (p += "}"));
            if (d && (s += " " + p + " ", p = ""), D.type && (s += " } ", v && v === D.type)) {
              var W = !0;
              s += " else { ";
              var P = e.schemaPath + ".type", E = e.errSchemaPath + "/type", R = R || [];
              R.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (u || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(E) + " , params: { type: '", s += y ? "" + v.join(",") : "" + v, s += "' } ", e.opts.messages !== !1 && (s += " , message: 'should be ", s += y ? "" + v.join(",") : "" + v, s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + P + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), s += " } ") : s += " {} ";
              var I = s;
              s = R.pop(), s += !e.compositeRule && d ? e.async ? " throw new ValidationError([" + I + "]); " : " validate.errors = [" + I + "]; return false; " : " var err = " + I + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " } "
            }
            d && (s += " if (errors === ", s += i ? "0" : "errs_" + n, s += ") { ", m += "}")
          }
        }
        if (v && !W && (!e.opts.coerceTypes || !g)) {
          var P = e.schemaPath + ".type", E = e.errSchemaPath + "/type", b = y ? "checkDataTypes" : "checkDataType";
          s += " if (" + e.util[b](v, c, !0) + ") {   ";
          var R = R || [];
          R.push(s), s = "", e.createErrors !== !1 ? (s += " { keyword: '" + (u || "type") + "' , dataPath: (dataPath || '') + " + e.errorPath + " , schemaPath: " + e.util.toQuotedString(E) + " , params: { type: '", s += y ? "" + v.join(",") : "" + v, s += "' } ", e.opts.messages !== !1 && (s += " , message: 'should be ", s += y ? "" + v.join(",") : "" + v, s += "' "), e.opts.verbose && (s += " , schema: validate.schema" + P + " , parentSchema: validate.schema" + e.schemaPath + " , data: " + c + " "), s += " } ") : s += " {} ";
          var I = s;
          s = R.pop(), s += !e.compositeRule && d ? e.async ? " throw new ValidationError([" + I + "]); " : " validate.errors = [" + I + "]; return false; " : " var err = " + I + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ", s += " }"
        }
        return d && (s += " " + m + " "), i ? (o ? (s += " if (errors === 0) return true;           ", s += " else throw new ValidationError(vErrors); ") : (s += " validate.errors = vErrors; ", s += " return errors === 0;       "), s += " }); return validate;") : s += " var " + f + " = errors === errs_" + n + ";", s = e.util.cleanUpCode(s), i && d && (s = e.util.cleanUpVarErrors(s, o)), s
      }
    }, {}], 37: [function (e, r, t) {
      "use strict";
      var a = /^[a-z_$][a-z0-9_$]*$/i, s = e("./dotjs/custom");
      r.exports = function (e, r) {
        function t(e, r, t) {
          for (var a, o = 0; o < i.RULES.length; o++) {
            var n = i.RULES[o];
            if (n.type == r) {
              a = n;
              break
            }
          }
          a || (a = {type: r, rules: []}, i.RULES.push(a));
          var l = {keyword: e, definition: t, custom: !0, code: s};
          a.rules.push(l), i.RULES.custom[e] = l
        }

        function o(e) {
          if (!i.RULES.types[e]) throw new Error("Unknown type " + e)
        }

        var i = this;
        if (this.RULES.keywords[e]) throw new Error("Keyword " + e + " is already defined");
        if (!a.test(e)) throw new Error("Keyword " + e + " is not a valid identifier");
        if (r) {
          var n = r.type;
          if (Array.isArray(n)) {
            var l, c = n.length;
            for (l = 0; l < c; l++) o(n[l]);
            for (l = 0; l < c; l++) t(e, n[l], r)
          } else n && o(n), t(e, n, r);
          var h = r.$data === !0 && this._opts.v5;
          if (h && !r.validate) throw new Error('$data support: neither "validate" nor "compile" functions are defined');
          var u = r.metaSchema;
          u && (h && (u = {anyOf: [u, {$ref: "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#/definitions/$data"}]}), r.validateSchema = i.compile(u, !0))
        }
        this.RULES.keywords[e] = this.RULES.all[e] = !0
      }
    }, {"./dotjs/custom": 21}], 38: [function (e, r, t) {
      r.exports = {
        id: "http://json-schema.org/draft-04/schema#",
        $schema: "http://json-schema.org/draft-04/schema#",
        description: "Core schema meta-schema",
        definitions: {
          schemaArray: {type: "array", minItems: 1, items: {$ref: "#"}},
          positiveInteger: {type: "integer", minimum: 0},
          positiveIntegerDefault0: {allOf: [{$ref: "#/definitions/positiveInteger"}, {default: 0}]},
          simpleTypes: {enum: ["array", "boolean", "integer", "null", "number", "object", "string"]},
          stringArray: {type: "array", items: {type: "string"}, minItems: 1, uniqueItems: !0}
        },
        type: "object",
        properties: {
          id: {type: "string", format: "uri"},
          $schema: {type: "string", format: "uri"},
          title: {type: "string"},
          description: {type: "string"},
          default: {},
          multipleOf: {type: "number", minimum: 0, exclusiveMinimum: !0},
          maximum: {type: "number"},
          exclusiveMaximum: {type: "boolean", default: !1},
          minimum: {type: "number"},
          exclusiveMinimum: {type: "boolean", default: !1},
          maxLength: {$ref: "#/definitions/positiveInteger"},
          minLength: {$ref: "#/definitions/positiveIntegerDefault0"},
          pattern: {type: "string", format: "regex"},
          additionalItems: {anyOf: [{type: "boolean"}, {$ref: "#"}], default: {}},
          items: {anyOf: [{$ref: "#"}, {$ref: "#/definitions/schemaArray"}], default: {}},
          maxItems: {$ref: "#/definitions/positiveInteger"},
          minItems: {$ref: "#/definitions/positiveIntegerDefault0"},
          uniqueItems: {type: "boolean", default: !1},
          maxProperties: {$ref: "#/definitions/positiveInteger"},
          minProperties: {$ref: "#/definitions/positiveIntegerDefault0"},
          required: {$ref: "#/definitions/stringArray"},
          additionalProperties: {anyOf: [{type: "boolean"}, {$ref: "#"}], default: {}},
          definitions: {type: "object", additionalProperties: {$ref: "#"}, default: {}},
          properties: {type: "object", additionalProperties: {$ref: "#"}, default: {}},
          patternProperties: {type: "object", additionalProperties: {$ref: "#"}, default: {}},
          dependencies: {
            type: "object",
            additionalProperties: {anyOf: [{$ref: "#"}, {$ref: "#/definitions/stringArray"}]}
          },
          enum: {type: "array", minItems: 1, uniqueItems: !0},
          type: {
            anyOf: [{$ref: "#/definitions/simpleTypes"}, {
              type: "array",
              items: {$ref: "#/definitions/simpleTypes"},
              minItems: 1,
              uniqueItems: !0
            }]
          },
          allOf: {$ref: "#/definitions/schemaArray"},
          anyOf: {$ref: "#/definitions/schemaArray"},
          oneOf: {$ref: "#/definitions/schemaArray"},
          not: {$ref: "#"}
        },
        dependencies: {exclusiveMaximum: ["maximum"], exclusiveMinimum: ["minimum"]},
        default: {}
      }
    }, {}], 39: [function (e, r, t) {
      r.exports = {
        id: "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#",
        $schema: "http://json-schema.org/draft-04/schema#",
        description: "Core schema meta-schema (v5 proposals)",
        definitions: {
          schemaArray: {type: "array", minItems: 1, items: {$ref: "#"}},
          positiveInteger: {type: "integer", minimum: 0},
          positiveIntegerDefault0: {allOf: [{$ref: "#/definitions/positiveInteger"}, {default: 0}]},
          simpleTypes: {enum: ["array", "boolean", "integer", "null", "number", "object", "string"]},
          stringArray: {type: "array", items: {type: "string"}, minItems: 1, uniqueItems: !0},
          $data: {
            type: "object",
            required: ["$data"],
            properties: {$data: {type: "string", anyOf: [{format: "relative-json-pointer"}, {format: "json-pointer"}]}},
            additionalProperties: !1
          }
        },
        type: "object",
        properties: {
          id: {type: "string", format: "uri"},
          $schema: {type: "string", format: "uri"},
          title: {type: "string"},
          description: {type: "string"},
          default: {},
          multipleOf: {anyOf: [{type: "number", minimum: 0, exclusiveMinimum: !0}, {$ref: "#/definitions/$data"}]},
          maximum: {anyOf: [{type: "number"}, {$ref: "#/definitions/$data"}]},
          exclusiveMaximum: {anyOf: [{type: "boolean", default: !1}, {$ref: "#/definitions/$data"}]},
          minimum: {anyOf: [{type: "number"}, {$ref: "#/definitions/$data"}]},
          exclusiveMinimum: {anyOf: [{type: "boolean", default: !1}, {$ref: "#/definitions/$data"}]},
          maxLength: {anyOf: [{$ref: "#/definitions/positiveInteger"}, {$ref: "#/definitions/$data"}]},
          minLength: {anyOf: [{$ref: "#/definitions/positiveIntegerDefault0"}, {$ref: "#/definitions/$data"}]},
          pattern: {anyOf: [{type: "string", format: "regex"}, {$ref: "#/definitions/$data"}]},
          additionalItems: {anyOf: [{type: "boolean"}, {$ref: "#"}, {$ref: "#/definitions/$data"}], default: {}},
          items: {anyOf: [{$ref: "#"}, {$ref: "#/definitions/schemaArray"}], default: {}},
          maxItems: {anyOf: [{$ref: "#/definitions/positiveInteger"}, {$ref: "#/definitions/$data"}]},
          minItems: {anyOf: [{$ref: "#/definitions/positiveIntegerDefault0"}, {$ref: "#/definitions/$data"}]},
          uniqueItems: {anyOf: [{type: "boolean", default: !1}, {$ref: "#/definitions/$data"}]},
          maxProperties: {anyOf: [{$ref: "#/definitions/positiveInteger"}, {$ref: "#/definitions/$data"}]},
          minProperties: {anyOf: [{$ref: "#/definitions/positiveIntegerDefault0"}, {$ref: "#/definitions/$data"}]},
          required: {anyOf: [{$ref: "#/definitions/stringArray"}, {$ref: "#/definitions/$data"}]},
          additionalProperties: {anyOf: [{type: "boolean"}, {$ref: "#"}, {$ref: "#/definitions/$data"}], default: {}},
          definitions: {type: "object", additionalProperties: {$ref: "#"}, default: {}},
          properties: {type: "object", additionalProperties: {$ref: "#"}, default: {}},
          patternProperties: {type: "object", additionalProperties: {$ref: "#"}, default: {}},
          dependencies: {
            type: "object",
            additionalProperties: {anyOf: [{$ref: "#"}, {$ref: "#/definitions/stringArray"}]}
          },
          enum: {anyOf: [{type: "array", minItems: 1, uniqueItems: !0}, {$ref: "#/definitions/$data"}]},
          type: {
            anyOf: [{$ref: "#/definitions/simpleTypes"}, {
              type: "array",
              items: {$ref: "#/definitions/simpleTypes"},
              minItems: 1,
              uniqueItems: !0
            }]
          },
          allOf: {$ref: "#/definitions/schemaArray"},
          anyOf: {$ref: "#/definitions/schemaArray"},
          oneOf: {$ref: "#/definitions/schemaArray"},
          not: {$ref: "#"},
          format: {anyOf: [{type: "string"}, {$ref: "#/definitions/$data"}]},
          formatMaximum: {anyOf: [{type: "string"}, {$ref: "#/definitions/$data"}]},
          formatMinimum: {anyOf: [{type: "string"}, {$ref: "#/definitions/$data"}]},
          formatExclusiveMaximum: {anyOf: [{type: "boolean", default: !1}, {$ref: "#/definitions/$data"}]},
          formatExclusiveMinimum: {anyOf: [{type: "boolean", default: !1}, {$ref: "#/definitions/$data"}]},
          constant: {anyOf: [{}, {$ref: "#/definitions/$data"}]},
          contains: {$ref: "#"},
          patternGroups: {
            type: "object",
            additionalProperties: {
              type: "object",
              required: ["schema"],
              properties: {
                maximum: {anyOf: [{$ref: "#/definitions/positiveInteger"}, {$ref: "#/definitions/$data"}]},
                minimum: {anyOf: [{$ref: "#/definitions/positiveIntegerDefault0"}, {$ref: "#/definitions/$data"}]},
                schema: {$ref: "#"}
              },
              additionalProperties: !1
            },
            default: {}
          },
          switch: {
            type: "array",
            items: {
              required: ["then"],
              properties: {
                if: {$ref: "#"},
                then: {anyOf: [{type: "boolean"}, {$ref: "#"}]},
                continue: {type: "boolean"}
              },
              additionalProperties: !1,
              dependencies: {continue: ["if"]}
            }
          }
        },
        dependencies: {
          exclusiveMaximum: ["maximum"],
          exclusiveMinimum: ["minimum"],
          formatMaximum: ["format"],
          formatMinimum: ["format"],
          formatExclusiveMaximum: ["formatMaximum"],
          formatExclusiveMinimum: ["formatMinimum"]
        },
        default: {}
      }
    }, {}], 40: [function (e, r, t) {
      "use strict";

      function a(r) {
        function t(e, t, s) {
          var o = {inline: s || a[e], statements: !0, errors: "full"};
          t && (o.type = t), r.addKeyword(e, o)
        }

        var a = {
          switch: e("./dotjs/switch"),
          constant: e("./dotjs/constant"),
          _formatLimit: e("./dotjs/_formatLimit"),
          patternRequired: e("./dotjs/patternRequired")
        };
        if (r._opts.meta !== !1) {
          var i = e("./refs/json-schema-v5.json");
          r.addMetaSchema(i, o)
        }
        t("constant"), r.addKeyword("contains", {
          type: "array",
          macro: s
        }), t("formatMaximum", "string", a._formatLimit), t("formatMinimum", "string", a._formatLimit), r.addKeyword("formatExclusiveMaximum"), r.addKeyword("formatExclusiveMinimum"), r.addKeyword("patternGroups"), t("patternRequired", "object"), t("switch")
      }

      function s(e) {
        return {not: {items: {not: e}}}
      }

      var o = "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json";
      r.exports = {enable: a, META_SCHEMA_ID: o}
    }, {
      "./dotjs/_formatLimit": 13,
      "./dotjs/constant": 20,
      "./dotjs/patternRequired": 30,
      "./dotjs/switch": 34,
      "./refs/json-schema-v5.json": 39
    }], 41: [function (e, r, t) {
      function a(e) {
        var r = this, t = f.call(arguments, 1);
        return new Promise(function (a, o) {
          function i(r) {
            var t;
            try {
              t = e.next(r)
            } catch (e) {
              return o(e)
            }
            c(t)
          }

          function n(r) {
            var t;
            try {
              t = e.throw(r)
            } catch (e) {
              return o(e)
            }
            c(t)
          }

          function c(e) {
            if (e.done) return a(e.value);
            var t = s.call(r, e.value);
            return t && l(t) ? t.then(i, n) : n(new TypeError('You may only yield a function, promise, generator, array, or object, but the following object was passed: "' + String(e.value) + '"'))
          }

          return "function" == typeof e && (e = e.apply(r, t)),
            e && "function" == typeof e.next ? void i() : a(e)
        })
      }

      function s(e) {
        return e ? l(e) ? e : h(e) || c(e) ? a.call(this, e) : "function" == typeof e ? o.call(this, e) : Array.isArray(e) ? i.call(this, e) : u(e) ? n.call(this, e) : e : e
      }

      function o(e) {
        var r = this;
        return new Promise(function (t, a) {
          e.call(r, function (e, r) {
            return e ? a(e) : (arguments.length > 2 && (r = f.call(arguments, 1)), void t(r))
          })
        })
      }

      function i(e) {
        return Promise.all(e.map(s, this))
      }

      function n(e) {
        function r(e, r) {
          t[r] = void 0, o.push(e.then(function (e) {
            t[r] = e
          }))
        }

        for (var t = new e.constructor, a = Object.keys(e), o = [], i = 0; i < a.length; i++) {
          var n = a[i], c = s.call(this, e[n]);
          c && l(c) ? r(c, n) : t[n] = e[n]
        }
        return Promise.all(o).then(function () {
          return t
        })
      }

      function l(e) {
        return "function" == typeof e.then
      }

      function c(e) {
        return "function" == typeof e.next && "function" == typeof e.throw
      }

      function h(e) {
        var r = e.constructor;
        return !!r && ("GeneratorFunction" === r.name || "GeneratorFunction" === r.displayName || c(r.prototype))
      }

      function u(e) {
        return Object == e.constructor
      }

      var f = Array.prototype.slice;
      r.exports = a.default = a.co = a, a.wrap = function (e) {
        function r() {
          return a.call(this, e.apply(this, arguments))
        }

        return r.__generatorFunction__ = e, r
      }
    }, {}], 42: [function (e, r, t) {
      var a = "undefined" != typeof JSON ? JSON : e("jsonify");
      r.exports = function (e, r) {
        r || (r = {}), "function" == typeof r && (r = {cmp: r});
        var t = r.space || "";
        "number" == typeof t && (t = Array(t + 1).join(" "));
        var i = "boolean" == typeof r.cycles && r.cycles, n = r.replacer || function (e, r) {
          return r
        }, l = r.cmp && function (e) {
          return function (r) {
            return function (t, a) {
              var s = {key: t, value: r[t]}, o = {key: a, value: r[a]};
              return e(s, o)
            }
          }
        }(r.cmp), c = [];
        return function e(r, h, u, f) {
          var d = t ? "\n" + new Array(f + 1).join(t) : "", p = t ? ": " : ":";
          if (u && u.toJSON && "function" == typeof u.toJSON && (u = u.toJSON()), u = n.call(r, h, u), void 0 !== u) {
            if ("object" != typeof u || null === u) return a.stringify(u);
            if (s(u)) {
              for (var m = [], v = 0; v < u.length; v++) {
                var y = e(u, v, u[v], f + 1) || a.stringify(null);
                m.push(d + t + y)
              }
              return "[" + m.join(",") + d + "]"
            }
            if (c.indexOf(u) !== -1) {
              if (i) return a.stringify("__cycle__");
              throw new TypeError("Converting circular structure to JSON")
            }
            c.push(u);
            for (var g = o(u).sort(l && l(u)), m = [], v = 0; v < g.length; v++) {
              var h = g[v], P = e(u, h, u[h], f + 1);
              if (P) {
                var E = a.stringify(h) + p + P;
                m.push(d + t + E)
              }
            }
            return c.splice(c.indexOf(u), 1), "{" + m.join(",") + d + "}"
          }
        }({"": e}, "", e, 0)
      };
      var s = Array.isArray || function (e) {
        return "[object Array]" === {}.toString.call(e)
      }, o = Object.keys || function (e) {
        var r = Object.prototype.hasOwnProperty || function () {
          return !0
        }, t = [];
        for (var a in e) r.call(e, a) && t.push(a);
        return t
      }
    }, {jsonify: 43}], 43: [function (e, r, t) {
      t.parse = e("./lib/parse"), t.stringify = e("./lib/stringify")
    }, {"./lib/parse": 44, "./lib/stringify": 45}], 44: [function (e, r, t) {
      var a, s, o, i, n = {'"': '"', "\\": "\\", "/": "/", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t"},
        l = function (e) {
          throw{name: "SyntaxError", message: e, at: a, text: o}
        }, c = function (e) {
          return e && e !== s && l("Expected '" + e + "' instead of '" + s + "'"), s = o.charAt(a), a += 1, s
        }, h = function () {
          var e, r = "";
          for ("-" === s && (r = "-", c("-")); s >= "0" && s <= "9";) r += s, c();
          if ("." === s) for (r += "."; c() && s >= "0" && s <= "9";) r += s;
          if ("e" === s || "E" === s) for (r += s, c(), "-" !== s && "+" !== s || (r += s, c()); s >= "0" && s <= "9";) r += s, c();
          return e = +r, isFinite(e) ? e : void l("Bad number")
        }, u = function () {
          var e, r, t, a = "";
          if ('"' === s) for (; c();) {
            if ('"' === s) return c(), a;
            if ("\\" === s) if (c(), "u" === s) {
              for (t = 0, r = 0; r < 4 && (e = parseInt(c(), 16), isFinite(e)); r += 1) t = 16 * t + e;
              a += String.fromCharCode(t)
            } else {
              if ("string" != typeof n[s]) break;
              a += n[s]
            } else a += s
          }
          l("Bad string")
        }, f = function () {
          for (; s && s <= " ";) c()
        }, d = function () {
          switch (s) {
            case"t":
              return c("t"), c("r"), c("u"), c("e"), !0;
            case"f":
              return c("f"), c("a"), c("l"), c("s"), c("e"), !1;
            case"n":
              return c("n"), c("u"), c("l"), c("l"), null
          }
          l("Unexpected '" + s + "'")
        }, p = function () {
          var e = [];
          if ("[" === s) {
            if (c("["), f(), "]" === s) return c("]"), e;
            for (; s;) {
              if (e.push(i()), f(), "]" === s) return c("]"), e;
              c(","), f()
            }
          }
          l("Bad array")
        }, m = function () {
          var e, r = {};
          if ("{" === s) {
            if (c("{"), f(), "}" === s) return c("}"), r;
            for (; s;) {
              if (e = u(), f(), c(":"), Object.hasOwnProperty.call(r, e) && l('Duplicate key "' + e + '"'), r[e] = i(), f(), "}" === s) return c("}"), r;
              c(","), f()
            }
          }
          l("Bad object")
        };
      i = function () {
        switch (f(), s) {
          case"{":
            return m();
          case"[":
            return p();
          case'"':
            return u();
          case"-":
            return h();
          default:
            return s >= "0" && s <= "9" ? h() : d()
        }
      }, r.exports = function (e, r) {
        var t;
        return o = e, a = 0, s = " ", t = i(), f(), s && l("Syntax error"), "function" == typeof r ? function e(t, a) {
          var s, o, i = t[a];
          if (i && "object" == typeof i) for (s in i) Object.prototype.hasOwnProperty.call(i, s) && (o = e(i, s), void 0 !== o ? i[s] = o : delete i[s]);
          return r.call(t, a, i)
        }({"": t}, "") : t
      }
    }, {}], 45: [function (e, r, t) {
      function a(e) {
        return l.lastIndex = 0, l.test(e) ? '"' + e.replace(l, function (e) {
          var r = c[e];
          return "string" == typeof r ? r : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4)
        }) + '"' : '"' + e + '"'
      }

      function s(e, r) {
        var t, l, c, h, u, f = o, d = r[e];
        switch (d && "object" == typeof d && "function" == typeof d.toJSON && (d = d.toJSON(e)), "function" == typeof n && (d = n.call(r, e, d)), typeof d) {
          case"string":
            return a(d);
          case"number":
            return isFinite(d) ? String(d) : "null";
          case"boolean":
          case"null":
            return String(d);
          case"object":
            if (!d) return "null";
            if (o += i, u = [], "[object Array]" === Object.prototype.toString.apply(d)) {
              for (h = d.length, t = 0; t < h; t += 1) u[t] = s(t, d) || "null";
              return c = 0 === u.length ? "[]" : o ? "[\n" + o + u.join(",\n" + o) + "\n" + f + "]" : "[" + u.join(",") + "]", o = f, c
            }
            if (n && "object" == typeof n) for (h = n.length, t = 0; t < h; t += 1) l = n[t], "string" == typeof l && (c = s(l, d), c && u.push(a(l) + (o ? ": " : ":") + c)); else for (l in d) Object.prototype.hasOwnProperty.call(d, l) && (c = s(l, d), c && u.push(a(l) + (o ? ": " : ":") + c));
            return c = 0 === u.length ? "{}" : o ? "{\n" + o + u.join(",\n" + o) + "\n" + f + "}" : "{" + u.join(",") + "}", o = f, c
        }
      }

      var o, i, n,
        l = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        c = {"\b": "\\b", "\t": "\\t", "\n": "\\n", "\f": "\\f", "\r": "\\r", '"': '\\"', "\\": "\\\\"};
      r.exports = function (e, r, t) {
        var a;
        if (o = "", i = "", "number" == typeof t) for (a = 0; a < t; a += 1) i += " "; else "string" == typeof t && (i = t);
        if (n = r, r && "function" != typeof r && ("object" != typeof r || "number" != typeof r.length)) throw new Error("JSON.stringify");
        return s("", {"": e})
      }
    }, {}], 46: [function (r, t, a) {
      (function (r) {
        !function (s) {
          function o(e) {
            throw new RangeError(L[e])
          }

          function i(e, r) {
            for (var t = e.length, a = []; t--;) a[t] = r(e[t]);
            return a
          }

          function n(e, r) {
            var t = e.split("@"), a = "";
            t.length > 1 && (a = t[0] + "@", e = t[1]), e = e.replace(q, ".");
            var s = e.split("."), o = i(s, r).join(".");
            return a + o
          }

          function l(e) {
            for (var r, t, a = [], s = 0, o = e.length; s < o;) r = e.charCodeAt(s++), r >= 55296 && r <= 56319 && s < o ? (t = e.charCodeAt(s++), 56320 == (64512 & t) ? a.push(((1023 & r) << 10) + (1023 & t) + 65536) : (a.push(r), s--)) : a.push(r);
            return a
          }

          function c(e) {
            return i(e, function (e) {
              var r = "";
              return e > 65535 && (e -= 65536, r += C(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), r += C(e)
            }).join("")
          }

          function h(e) {
            return e - 48 < 10 ? e - 22 : e - 65 < 26 ? e - 65 : e - 97 < 26 ? e - 97 : j
          }

          function u(e, r) {
            return e + 22 + 75 * (e < 26) - ((0 != r) << 5)
          }

          function f(e, r, t) {
            var a = 0;
            for (e = t ? Q(e / _) : e >> 1, e += Q(e / r); e > D * $ >> 1; a += j) e = Q(e / D);
            return Q(a + (D + 1) * e / (e + x))
          }

          function d(e) {
            var r, t, a, s, i, n, l, u, d, p, m = [], v = e.length, y = 0, g = R, P = O;
            for (t = e.lastIndexOf(I), t < 0 && (t = 0), a = 0; a < t; ++a) e.charCodeAt(a) >= 128 && o("not-basic"), m.push(e.charCodeAt(a));
            for (s = t > 0 ? t + 1 : 0; s < v;) {
              for (i = y, n = 1, l = j; s >= v && o("invalid-input"), u = h(e.charCodeAt(s++)), (u >= j || u > Q((w - y) / n)) && o("overflow"), y += u * n, d = l <= P ? S : l >= P + $ ? $ : l - P, !(u < d); l += j) p = j - d, n > Q(w / p) && o("overflow"), n *= p;
              r = m.length + 1, P = f(y - i, r, 0 == i), Q(y / r) > w - g && o("overflow"), g += Q(y / r), y %= r, m.splice(y++, 0, g)
            }
            return c(m)
          }

          function p(e) {
            var r, t, a, s, i, n, c, h, d, p, m, v, y, g, P, E = [];
            for (e = l(e), v = e.length, r = R, t = 0, i = O, n = 0; n < v; ++n) m = e[n], m < 128 && E.push(C(m));
            for (a = s = E.length, s && E.push(I); a < v;) {
              for (c = w, n = 0; n < v; ++n) m = e[n], m >= r && m < c && (c = m);
              for (y = a + 1, c - r > Q((w - t) / y) && o("overflow"), t += (c - r) * y, r = c, n = 0; n < v; ++n) if (m = e[n], m < r && ++t > w && o("overflow"), m == r) {
                for (h = t, d = j; p = d <= i ? S : d >= i + $ ? $ : d - i, !(h < p); d += j) P = h - p, g = j - p, E.push(C(u(p + P % g, 0))), h = Q(P / g);
                E.push(C(u(h, 0))), i = f(t, y, a == s), t = 0, ++a
              }
              ++t, ++r
            }
            return E.join("")
          }

          function m(e) {
            return n(e, function (e) {
              return A.test(e) ? d(e.slice(4).toLowerCase()) : e
            })
          }

          function v(e) {
            return n(e, function (e) {
              return k.test(e) ? "xn--" + p(e) : e
            })
          }

          var y = "object" == typeof a && a && !a.nodeType && a, g = "object" == typeof t && t && !t.nodeType && t,
            P = "object" == typeof r && r;
          P.global !== P && P.window !== P && P.self !== P || (s = P);
          var E, b, w = 2147483647, j = 36, S = 1, $ = 26, x = 38, _ = 700, O = 72, R = 128, I = "-", A = /^xn--/,
            k = /[^\x20-\x7E]/, q = /[\x2E\u3002\uFF0E\uFF61]/g, L = {
              overflow: "Overflow: input needs wider integers to process",
              "not-basic": "Illegal input >= 0x80 (not a basic code point)",
              "invalid-input": "Invalid input"
            }, D = j - S, Q = Math.floor, C = String.fromCharCode;
          if (E = {
              version: "1.4.1",
              ucs2: {decode: l, encode: c},
              decode: d,
              encode: p,
              toASCII: v,
              toUnicode: m
            }, "function" == typeof e && "object" == typeof e.amd && e.amd) e("punycode", function () {
            return E
          }); else if (y && g) if (t.exports == y) g.exports = E; else for (b in E) E.hasOwnProperty(b) && (y[b] = E[b]); else s.punycode = E
        }(this)
      }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {})
    }, {}], 47: [function (e, r, t) {
      "use strict";

      function a(e, r) {
        return Object.prototype.hasOwnProperty.call(e, r)
      }

      r.exports = function (e, r, t, o) {
        r = r || "&", t = t || "=";
        var i = {};
        if ("string" != typeof e || 0 === e.length) return i;
        var n = /\+/g;
        e = e.split(r);
        var l = 1e3;
        o && "number" == typeof o.maxKeys && (l = o.maxKeys);
        var c = e.length;
        l > 0 && c > l && (c = l);
        for (var h = 0; h < c; ++h) {
          var u, f, d, p, m = e[h].replace(n, "%20"), v = m.indexOf(t);
          v >= 0 ? (u = m.substr(0, v), f = m.substr(v + 1)) : (u = m, f = ""), d = decodeURIComponent(u), p = decodeURIComponent(f), a(i, d) ? s(i[d]) ? i[d].push(p) : i[d] = [i[d], p] : i[d] = p
        }
        return i
      };
      var s = Array.isArray || function (e) {
        return "[object Array]" === Object.prototype.toString.call(e)
      }
    }, {}], 48: [function (e, r, t) {
      "use strict";

      function a(e, r) {
        if (e.map) return e.map(r);
        for (var t = [], a = 0; a < e.length; a++) t.push(r(e[a], a));
        return t
      }

      var s = function (e) {
        switch (typeof e) {
          case"string":
            return e;
          case"boolean":
            return e ? "true" : "false";
          case"number":
            return isFinite(e) ? e : "";
          default:
            return ""
        }
      };
      r.exports = function (e, r, t, n) {
        return r = r || "&", t = t || "=", null === e && (e = void 0), "object" == typeof e ? a(i(e), function (i) {
          var n = encodeURIComponent(s(i)) + t;
          return o(e[i]) ? a(e[i], function (e) {
            return n + encodeURIComponent(s(e))
          }).join(r) : n + encodeURIComponent(s(e[i]))
        }).join(r) : n ? encodeURIComponent(s(n)) + t + encodeURIComponent(s(e)) : ""
      };
      var o = Array.isArray || function (e) {
        return "[object Array]" === Object.prototype.toString.call(e)
      }, i = Object.keys || function (e) {
        var r = [];
        for (var t in e) Object.prototype.hasOwnProperty.call(e, t) && r.push(t);
        return r
      }
    }, {}], 49: [function (e, r, t) {
      "use strict";
      t.decode = t.parse = e("./decode"), t.encode = t.stringify = e("./encode")
    }, {"./decode": 47, "./encode": 48}], 50: [function (e, r, t) {
      "use strict";

      function a() {
        this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null
      }

      function s(e, r, t) {
        if (e && c.isObject(e) && e instanceof a) return e;
        var s = new a;
        return s.parse(e, r, t), s
      }

      function o(e) {
        return c.isString(e) && (e = s(e)), e instanceof a ? e.format() : a.prototype.format.call(e)
      }

      function i(e, r) {
        return s(e, !1, !0).resolve(r)
      }

      function n(e, r) {
        return e ? s(e, !1, !0).resolveObject(r) : r
      }

      var l = e("punycode"), c = e("./util");
      t.parse = s, t.resolve = i, t.resolveObject = n, t.format = o, t.Url = a;
      var h = /^([a-z0-9.+-]+:)/i, u = /:[0-9]*$/, f = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
        d = ["<", ">", '"', "`", " ", "\r", "\n", "\t"], p = ["{", "}", "|", "\\", "^", "`"].concat(d),
        m = ["'"].concat(p), v = ["%", "/", "?", ";", "#"].concat(m), y = ["/", "?", "#"], g = 255,
        P = /^[+a-z0-9A-Z_-]{0,63}$/, E = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, b = {javascript: !0, "javascript:": !0},
        w = {javascript: !0, "javascript:": !0}, j = {
          http: !0,
          https: !0,
          ftp: !0,
          gopher: !0,
          file: !0,
          "http:": !0,
          "https:": !0,
          "ftp:": !0,
          "gopher:": !0,
          "file:": !0
        }, S = e("querystring");
      a.prototype.parse = function (e, r, t) {
        if (!c.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + typeof e);
        var a = e.indexOf("?"), s = a !== -1 && a < e.indexOf("#") ? "?" : "#", o = e.split(s), i = /\\/g;
        o[0] = o[0].replace(i, "/"), e = o.join(s);
        var n = e;
        if (n = n.trim(), !t && 1 === e.split("#").length) {
          var u = f.exec(n);
          if (u) return this.path = n, this.href = n, this.pathname = u[1], u[2] ? (this.search = u[2], this.query = r ? S.parse(this.search.substr(1)) : this.search.substr(1)) : r && (this.search = "", this.query = {}), this
        }
        var d = h.exec(n);
        if (d) {
          d = d[0];
          var p = d.toLowerCase();
          this.protocol = p, n = n.substr(d.length)
        }
        if (t || d || n.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var $ = "//" === n.substr(0, 2);
          !$ || d && w[d] || (n = n.substr(2), this.slashes = !0)
        }
        if (!w[d] && ($ || d && !j[d])) {
          for (var x = -1, _ = 0; _ < y.length; _++) {
            var O = n.indexOf(y[_]);
            O !== -1 && (x === -1 || O < x) && (x = O)
          }
          var R, I;
          I = x === -1 ? n.lastIndexOf("@") : n.lastIndexOf("@", x), I !== -1 && (R = n.slice(0, I), n = n.slice(I + 1), this.auth = decodeURIComponent(R)), x = -1;
          for (var _ = 0; _ < v.length; _++) {
            var O = n.indexOf(v[_]);
            O !== -1 && (x === -1 || O < x) && (x = O)
          }
          x === -1 && (x = n.length), this.host = n.slice(0, x), n = n.slice(x), this.parseHost(), this.hostname = this.hostname || "";
          var A = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
          if (!A) for (var k = this.hostname.split(/\./), _ = 0, q = k.length; _ < q; _++) {
            var L = k[_];
            if (L && !L.match(P)) {
              for (var D = "", Q = 0, C = L.length; Q < C; Q++) D += L.charCodeAt(Q) > 127 ? "x" : L[Q];
              if (!D.match(P)) {
                var U = k.slice(0, _), V = k.slice(_ + 1), z = L.match(E);
                z && (U.push(z[1]), V.unshift(z[2])), V.length && (n = "/" + V.join(".") + n), this.hostname = U.join(".");
                break
              }
            }
          }
          this.hostname = this.hostname.length > g ? "" : this.hostname.toLowerCase(), A || (this.hostname = l.toASCII(this.hostname));
          var T = this.port ? ":" + this.port : "", M = this.hostname || "";
          this.host = M + T, this.href += this.host, A && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== n[0] && (n = "/" + n))
        }
        if (!b[p]) for (var _ = 0, q = m.length; _ < q; _++) {
          var N = m[_];
          if (n.indexOf(N) !== -1) {
            var F = encodeURIComponent(N);
            F === N && (F = escape(N)), n = n.split(N).join(F)
          }
        }
        var H = n.indexOf("#");
        H !== -1 && (this.hash = n.substr(H), n = n.slice(0, H));
        var J = n.indexOf("?");
        if (J !== -1 ? (this.search = n.substr(J), this.query = n.substr(J + 1), r && (this.query = S.parse(this.query)), n = n.slice(0, J)) : r && (this.search = "", this.query = {}), n && (this.pathname = n), j[p] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
          var T = this.pathname || "", G = this.search || "";
          this.path = T + G
        }
        return this.href = this.format(), this
      }, a.prototype.format = function () {
        var e = this.auth || "";
        e && (e = encodeURIComponent(e), e = e.replace(/%3A/i, ":"), e += "@");
        var r = this.protocol || "", t = this.pathname || "", a = this.hash || "", s = !1, o = "";
        this.host ? s = e + this.host : this.hostname && (s = e + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]"), this.port && (s += ":" + this.port)), this.query && c.isObject(this.query) && Object.keys(this.query).length && (o = S.stringify(this.query));
        var i = this.search || o && "?" + o || "";
        return r && ":" !== r.substr(-1) && (r += ":"), this.slashes || (!r || j[r]) && s !== !1 ? (s = "//" + (s || ""), t && "/" !== t.charAt(0) && (t = "/" + t)) : s || (s = ""), a && "#" !== a.charAt(0) && (a = "#" + a), i && "?" !== i.charAt(0) && (i = "?" + i), t = t.replace(/[?#]/g, function (e) {
          return encodeURIComponent(e)
        }), i = i.replace("#", "%23"), r + s + t + i + a
      }, a.prototype.resolve = function (e) {
        return this.resolveObject(s(e, !1, !0)).format()
      }, a.prototype.resolveObject = function (e) {
        if (c.isString(e)) {
          var r = new a;
          r.parse(e, !1, !0), e = r
        }
        for (var t = new a, s = Object.keys(this), o = 0; o < s.length; o++) {
          var i = s[o];
          t[i] = this[i]
        }
        if (t.hash = e.hash, "" === e.href) return t.href = t.format(), t;
        if (e.slashes && !e.protocol) {
          for (var n = Object.keys(e), l = 0; l < n.length; l++) {
            var h = n[l];
            "protocol" !== h && (t[h] = e[h])
          }
          return j[t.protocol] && t.hostname && !t.pathname && (t.path = t.pathname = "/"), t.href = t.format(), t
        }
        if (e.protocol && e.protocol !== t.protocol) {
          if (!j[e.protocol]) {
            for (var u = Object.keys(e), f = 0; f < u.length; f++) {
              var d = u[f];
              t[d] = e[d]
            }
            return t.href = t.format(), t
          }
          if (t.protocol = e.protocol, e.host || w[e.protocol]) t.pathname = e.pathname; else {
            for (var p = (e.pathname || "").split("/"); p.length && !(e.host = p.shift());) ;
            e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== p[0] && p.unshift(""), p.length < 2 && p.unshift(""), t.pathname = p.join("/")
          }
          if (t.search = e.search, t.query = e.query, t.host = e.host || "", t.auth = e.auth, t.hostname = e.hostname || e.host, t.port = e.port, t.pathname || t.search) {
            var m = t.pathname || "", v = t.search || "";
            t.path = m + v
          }
          return t.slashes = t.slashes || e.slashes, t.href = t.format(), t
        }
        var y = t.pathname && "/" === t.pathname.charAt(0), g = e.host || e.pathname && "/" === e.pathname.charAt(0),
          P = g || y || t.host && e.pathname, E = P, b = t.pathname && t.pathname.split("/") || [],
          p = e.pathname && e.pathname.split("/") || [], S = t.protocol && !j[t.protocol];
        if (S && (t.hostname = "", t.port = null, t.host && ("" === b[0] ? b[0] = t.host : b.unshift(t.host)), t.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === p[0] ? p[0] = e.host : p.unshift(e.host)), e.host = null), P = P && ("" === p[0] || "" === b[0])), g) t.host = e.host || "" === e.host ? e.host : t.host, t.hostname = e.hostname || "" === e.hostname ? e.hostname : t.hostname, t.search = e.search, t.query = e.query, b = p; else if (p.length) b || (b = []), b.pop(), b = b.concat(p), t.search = e.search, t.query = e.query; else if (!c.isNullOrUndefined(e.search)) {
          if (S) {
            t.hostname = t.host = b.shift();
            var $ = !!(t.host && t.host.indexOf("@") > 0) && t.host.split("@");
            $ && (t.auth = $.shift(), t.host = t.hostname = $.shift())
          }
          return t.search = e.search, t.query = e.query, c.isNull(t.pathname) && c.isNull(t.search) || (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.href = t.format(), t
        }
        if (!b.length) return t.pathname = null, t.path = t.search ? "/" + t.search : null, t.href = t.format(), t;
        for (var x = b.slice(-1)[0], _ = (t.host || e.host || b.length > 1) && ("." === x || ".." === x) || "" === x, O = 0, R = b.length; R >= 0; R--) x = b[R], "." === x ? b.splice(R, 1) : ".." === x ? (b.splice(R, 1), O++) : O && (b.splice(R, 1), O--);
        if (!P && !E) for (; O--; O) b.unshift("..");
        !P || "" === b[0] || b[0] && "/" === b[0].charAt(0) || b.unshift(""), _ && "/" !== b.join("/").substr(-1) && b.push("");
        var I = "" === b[0] || b[0] && "/" === b[0].charAt(0);
        if (S) {
          t.hostname = t.host = I ? "" : b.length ? b.shift() : "";
          var $ = !!(t.host && t.host.indexOf("@") > 0) && t.host.split("@");
          $ && (t.auth = $.shift(), t.host = t.hostname = $.shift())
        }
        return P = P || t.host && b.length, P && !I && b.unshift(""), b.length ? t.pathname = b.join("/") : (t.pathname = null, t.path = null), c.isNull(t.pathname) && c.isNull(t.search) || (t.path = (t.pathname ? t.pathname : "") + (t.search ? t.search : "")), t.auth = e.auth || t.auth, t.slashes = t.slashes || e.slashes, t.href = t.format(), t
      }, a.prototype.parseHost = function () {
        var e = this.host, r = u.exec(e);
        r && (r = r[0], ":" !== r && (this.port = r.substr(1)), e = e.substr(0, e.length - r.length)), e && (this.hostname = e)
      }
    }, {"./util": 51, punycode: 46, querystring: 49}], 51: [function (e, r, t) {
      "use strict";
      r.exports = {
        isString: function (e) {
          return "string" == typeof e
        }, isObject: function (e) {
          return "object" == typeof e && null !== e
        }, isNull: function (e) {
          return null === e
        }, isNullOrUndefined: function (e) {
          return null == e
        }
      }
    }, {}], ajv: [function (e, r, t) {
      "use strict";

      function a(e) {
        return v.test(e)
      }

      function Ajv(r) {
        function t(e, r) {
          var t;
          if ("string" == typeof e) {
            if (t = j(e), !t) throw new Error('no schema with key or ref "' + e + '"')
          } else {
            var a = O(e);
            t = a.validate || R(a)
          }
          var s = t(r);
          return t.$async === !0 ? "*" == C._opts.async ? p(s) : s : (C.errors = t.errors, s)
        }

        function g(e, r) {
          var t = O(e, void 0, r);
          return t.validate || R(t)
        }

        function P(e, r, t, a) {
          if (Array.isArray(e)) for (var s = 0; s < e.length; s++) P(e[s], void 0, t, a); else r = o.normalizeId(r || e.id), D(r), C._schemas[r] = O(e, t, a, !0)
        }

        function E(e, r, t) {
          P(e, r, t, !0)
        }

        function b(e, r) {
          var s = e.$schema || C._opts.defaultMeta || w(), o = C._formats.uri;
          C._formats.uri = "function" == typeof o ? a : v;
          var i;
          try {
            i = t(s, e)
          } finally {
            C._formats.uri = o
          }
          if (!i && r) {
            var n = "schema is invalid: " + I();
            if ("log" != C._opts.validateSchema) throw new Error(n);
            console.error(n)
          }
          return i
        }

        function w() {
          var e = C._opts.meta;
          return C._opts.defaultMeta = "object" == typeof e ? e.id || e : C._opts.v5 ? u.META_SCHEMA_ID : m
        }

        function j(e) {
          var r = $(e);
          switch (typeof r) {
            case"object":
              return r.validate || R(r);
            case"string":
              return j(r);
            case"undefined":
              return S(e)
          }
        }

        function S(e) {
          var r = o.schema.call(C, {schema: {}}, e);
          if (r) {
            var t = r.schema, a = r.root, i = r.baseId, l = s.call(C, t, a, void 0, i);
            return C._fragments[e] = new n({ref: e, fragment: !0, schema: t, root: a, baseId: i, validate: l}), l
          }
        }

        function $(e) {
          return e = o.normalizeId(e), C._schemas[e] || C._refs[e] || C._fragments[e]
        }

        function x(e) {
          if (e instanceof RegExp) return _(C._schemas, e), void _(C._refs, e);
          switch (typeof e) {
            case"undefined":
              return _(C._schemas), _(C._refs), void C._cache.clear();
            case"string":
              var r = $(e);
              return r && C._cache.del(r.jsonStr), delete C._schemas[e], void delete C._refs[e];
            case"object":
              var t = l(e);
              C._cache.del(t);
              var a = e.id;
              a && (a = o.normalizeId(a), delete C._schemas[a], delete C._refs[a])
          }
        }

        function _(e, r) {
          for (var t in e) {
            var a = e[t];
            a.meta || r && !r.test(t) || (C._cache.del(a.jsonStr), delete e[t])
          }
        }

        function O(e, r, t, a) {
          if ("object" != typeof e) throw new Error("schema should be object");
          var s = l(e), i = C._cache.get(s);
          if (i) return i;
          a = a || C._opts.addUsedSchema !== !1;
          var c = o.normalizeId(e.id);
          c && a && D(c);
          var h, u = C._opts.validateSchema !== !1 && !r;
          u && !(h = e.id && e.id == e.$schema) && b(e, !0);
          var f = o.ids.call(C, e), d = new n({id: c, schema: e, localRefs: f, jsonStr: s, meta: t});
          return "#" != c[0] && a && (C._refs[c] = d), C._cache.put(s, d), u && h && b(e, !0), d
        }

        function R(e, r) {
          function t() {
            var r = e.validate, a = r.apply(null, arguments);
            return t.errors = r.errors, a
          }

          if (e.compiling) return e.validate = t, t.schema = e.schema, t.errors = null, t.root = r ? r : t, e.schema.$async === !0 && (t.$async = !0), t;
          e.compiling = !0;
          var a;
          e.meta && (a = C._opts, C._opts = C._metaOpts);
          var o;
          try {
            o = s.call(C, e.schema, r, e.localRefs)
          } finally {
            e.compiling = !1, e.meta && (C._opts = a)
          }
          return e.validate = o, e.refs = o.refs, e.refVal = o.refVal, e.root = o.root, o
        }

        function I(e, r) {
          if (e = e || C.errors, !e) return "No errors";
          r = r || {};
          for (var t = void 0 === r.separator ? ", " : r.separator, a = void 0 === r.dataVar ? "data" : r.dataVar, s = "", o = 0; o < e.length; o++) {
            var i = e[o];
            i && (s += a + i.dataPath + " " + i.message + t)
          }
          return s.slice(0, -t.length)
        }

        function A(e, r) {
          "string" == typeof r && (r = new RegExp(r)), C._formats[e] = r
        }

        function k() {
          if (C._opts.meta !== !1) {
            var r = e("./refs/json-schema-draft-04.json");
            E(r, m, !0), C._refs["http://json-schema.org/schema"] = m
          }
        }

        function q() {
          var e = C._opts.schemas;
          if (e) if (Array.isArray(e)) P(e); else for (var r in e) P(e[r], r)
        }

        function L() {
          for (var e in C._opts.formats) {
            var r = C._opts.formats[e];
            A(e, r)
          }
        }

        function D(e) {
          if (C._schemas[e] || C._refs[e]) throw new Error('schema with key or id "' + e + '" already exists')
        }

        function Q() {
          for (var e = f.copy(C._opts), r = 0; r < y.length; r++) delete e[y[r]];
          return e
        }

        if (!(this instanceof Ajv)) return new Ajv(r);
        var C = this;
        r = this._opts = f.copy(r) || {}, this._schemas = {}, this._refs = {}, this._fragments = {}, this._formats = c(r.format), this._cache = r.cache || new i, this._loadingSchemas = {}, this._compilations = [], this.RULES = h(), this.validate = t, this.compile = g, this.addSchema = P, this.addMetaSchema = E, this.validateSchema = b, this.getSchema = j, this.removeSchema = x, this.addFormat = A, this.errorsText = I, this._addSchema = O, this._compile = R, r.loopRequired = r.loopRequired || 1 / 0, (r.async || r.transpile) && d.setup(r), r.beautify === !0 && (r.beautify = {indent_size: 2}), "property" == r.errorDataPath && (r._errorDataPathProperty = !0), this._metaOpts = Q(), r.formats && L(), k(), r.v5 && u.enable(this), "object" == typeof r.meta && E(r.meta), q()
      }

      var s = e("./compile"), o = e("./compile/resolve"), i = e("./cache"), n = e("./compile/schema_obj"),
        l = e("json-stable-stringify"), c = e("./compile/formats"), h = e("./compile/rules"), u = e("./v5"),
        f = e("./compile/util"), d = e("./async"), p = e("co");
      r.exports = Ajv, Ajv.prototype.compileAsync = d.compile, Ajv.prototype.addKeyword = e("./keyword"), Ajv.ValidationError = e("./compile/validation_error");
      var m = "http://json-schema.org/draft-04/schema", v = /^(?:(?:[a-z][a-z0-9+-.]*:)?\/\/)?[^\s]*$/i,
        y = ["removeAdditional", "useDefaults", "coerceTypes"]
    }, {
      "./async": 1,
      "./cache": 2,
      "./compile": 6,
      "./compile/formats": 5,
      "./compile/resolve": 7,
      "./compile/rules": 8,
      "./compile/schema_obj": 9,
      "./compile/util": 11,
      "./compile/validation_error": 12,
      "./keyword": 37,
      "./refs/json-schema-draft-04.json": 38,
      "./v5": 40,
      co: 41,
      "json-stable-stringify": 42
    }]
  }, {}, [])("ajv")
});
//# sourceMappingURL=dist/ajv.min.js.map
Opal.loaded(["./ajv.min.js"]);
/* Generated by Opal 1.0.0 */
Opal.modules["vector2d/calculations"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$-', '$*', '$x', '$y', '$+', '$normalized?', '$normalize', '$acos', '$dot_product', '$calculate_each', '$sqrt', '$squared_distance', '$coerce', '$class', '$cross_product', '$angle_between', '$private', '$new', '$send']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector2d');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Calculations');

      var $nesting = [self].concat($parent_nesting), $Calculations_$$4, $Calculations_$slash$5, $Calculations_$plus$6, $Calculations_$minus$7, $Calculations_distance$8, $Calculations_squared_distance$9, $Calculations_dot_product$10, $Calculations_cross_product$11, $Calculations_angle_between$12, $Calculations_calculate_each$13;

      
      (function($base, $parent_nesting) {
        var self = $module($base, 'ClassMethods');

        var $nesting = [self].concat($parent_nesting), $ClassMethods_cross_product$1, $ClassMethods_dot_product$2, $ClassMethods_angle_between$3;

        
        
        Opal.def(self, '$cross_product', $ClassMethods_cross_product$1 = function $$cross_product(vector1, vector2) {
          var self = this;

          return $rb_minus($rb_times(vector1.$x(), vector2.$y()), $rb_times(vector1.$y(), vector2.$x()))
        }, $ClassMethods_cross_product$1.$$arity = 2);
        
        Opal.def(self, '$dot_product', $ClassMethods_dot_product$2 = function $$dot_product(vector1, vector2) {
          var self = this;

          return $rb_plus($rb_times(vector1.$x(), vector2.$x()), $rb_times(vector1.$y(), vector2.$y()))
        }, $ClassMethods_dot_product$2.$$arity = 2);
        
        Opal.def(self, '$angle_between', $ClassMethods_angle_between$3 = function $$angle_between(vector1, vector2) {
          var self = this, one = nil, two = nil;

          
          one = (function() {if ($truthy(vector1['$normalized?']())) {
            return vector1
          } else {
            return vector1.$normalize()
          }; return nil; })();
          two = (function() {if ($truthy(vector2['$normalized?']())) {
            return vector2
          } else {
            return vector2.$normalize()
          }; return nil; })();
          return $$($nesting, 'Math').$acos(self.$dot_product(one, two));
        }, $ClassMethods_angle_between$3.$$arity = 2);
      })($nesting[0], $nesting);
      
      Opal.def(self, '$*', $Calculations_$$4 = function(other) {
        var self = this;

        return self.$calculate_each("*", other)
      }, $Calculations_$$4.$$arity = 1);
      
      Opal.def(self, '$/', $Calculations_$slash$5 = function(other) {
        var self = this;

        return self.$calculate_each("/", other)
      }, $Calculations_$slash$5.$$arity = 1);
      
      Opal.def(self, '$+', $Calculations_$plus$6 = function(other) {
        var self = this;

        return self.$calculate_each("+", other)
      }, $Calculations_$plus$6.$$arity = 1);
      
      Opal.def(self, '$-', $Calculations_$minus$7 = function(other) {
        var self = this;

        return self.$calculate_each("-", other)
      }, $Calculations_$minus$7.$$arity = 1);
      
      Opal.def(self, '$distance', $Calculations_distance$8 = function $$distance(other) {
        var self = this;

        return $$($nesting, 'Math').$sqrt(self.$squared_distance(other))
      }, $Calculations_distance$8.$$arity = 1);
      
      Opal.def(self, '$squared_distance', $Calculations_squared_distance$9 = function $$squared_distance(other) {
        var $a, $b, self = this, v = nil, _ = nil, dx = nil, dy = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        dx = $rb_minus(v.$x(), self.$x());
        dy = $rb_minus(v.$y(), self.$y());
        return $rb_plus($rb_times(dx, dx), $rb_times(dy, dy));
      }, $Calculations_squared_distance$9.$$arity = 1);
      
      Opal.def(self, '$dot_product', $Calculations_dot_product$10 = function $$dot_product(other) {
        var $a, $b, self = this, v = nil, _ = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        return self.$class().$dot_product(self, v);
      }, $Calculations_dot_product$10.$$arity = 1);
      
      Opal.def(self, '$cross_product', $Calculations_cross_product$11 = function $$cross_product(other) {
        var $a, $b, self = this, v = nil, _ = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        return self.$class().$cross_product(self, v);
      }, $Calculations_cross_product$11.$$arity = 1);
      
      Opal.def(self, '$angle_between', $Calculations_angle_between$12 = function $$angle_between(other) {
        var $a, $b, self = this, v = nil, _ = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        return self.$class().$angle_between(self, v);
      }, $Calculations_angle_between$12.$$arity = 1);
      self.$private();
      
      Opal.def(self, '$calculate_each', $Calculations_calculate_each$13 = function $$calculate_each(method, other) {
        var $a, $b, self = this, v = nil, _ = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        return self.$class().$new(self.$x().$send(method, v.$x()), self.$y().$send(method, v.$y()));
      }, $Calculations_calculate_each$13.$$arity = 2);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["vector2d/coercions"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$===', '$parse', '$raise', '$class', '$x', '$y', '$new', '$to_i', '$to_f']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector2d');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Coercions');

      var $nesting = [self].concat($parent_nesting), $Coercions_coerce$1, $Coercions_inspect$2, $Coercions_to_a$3, $Coercions_to_hash$4, $Coercions_to_i_vector$5, $Coercions_to_f_vector$6, $Coercions_to_s$7;

      
      
      Opal.def(self, '$coerce', $Coercions_coerce$1 = function $$coerce(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Vector2d')['$===']($case)) {return [other, self]}
        else if ($$($nesting, 'Array')['$===']($case) || $$($nesting, 'Numeric')['$===']($case) || $$($nesting, 'String')['$===']($case) || $$($nesting, 'Hash')['$===']($case)) {return [$$($nesting, 'Vector2d').$parse(other), self]}
        else {return self.$raise($$($nesting, 'TypeError'), "" + (self.$class()) + " can't be coerced into " + (other.$class()))}})()
      }, $Coercions_coerce$1.$$arity = 1);
      
      Opal.def(self, '$inspect', $Coercions_inspect$2 = function $$inspect() {
        var self = this;

        return "" + "Vector2d(" + (self.$x()) + "," + (self.$y()) + ")"
      }, $Coercions_inspect$2.$$arity = 0);
      
      Opal.def(self, '$to_a', $Coercions_to_a$3 = function $$to_a() {
        var self = this;

        return [self.$x(), self.$y()]
      }, $Coercions_to_a$3.$$arity = 0);
      
      Opal.def(self, '$to_hash', $Coercions_to_hash$4 = function $$to_hash() {
        var self = this;

        return $hash2(["x", "y"], {"x": self.$x(), "y": self.$y()})
      }, $Coercions_to_hash$4.$$arity = 0);
      
      Opal.def(self, '$to_i_vector', $Coercions_to_i_vector$5 = function $$to_i_vector() {
        var self = this;

        return self.$class().$new(self.$x().$to_i(), self.$y().$to_i())
      }, $Coercions_to_i_vector$5.$$arity = 0);
      
      Opal.def(self, '$to_f_vector', $Coercions_to_f_vector$6 = function $$to_f_vector() {
        var self = this;

        return self.$class().$new(self.$x().$to_f(), self.$y().$to_f())
      }, $Coercions_to_f_vector$6.$$arity = 0);
      
      Opal.def(self, '$to_s', $Coercions_to_s$7 = function $$to_s() {
        var self = this;

        return "" + (self.$x()) + "x" + (self.$y())
      }, $Coercions_to_s$7.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["vector2d/fitting"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$coerce', '$>', '$x', '$y', '$fit', '$/', '$to_f_vector', '$*', '$==', '$<', '$alias_method']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector2d');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Fitting');

      var $nesting = [self].concat($parent_nesting), $Fitting_contain$1, $Fitting_fit$2, $Fitting_fit_either$3;

      
      
      Opal.def(self, '$contain', $Fitting_contain$1 = function $$contain(other) {
        var $a, $b, self = this, v = nil, _ = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        if ($truthy(($truthy($a = $rb_gt(v.$x(), self.$x())) ? $a : $rb_gt(v.$y(), self.$y())))) {
          return other.$fit(self)
        } else {
          return other
        };
      }, $Fitting_contain$1.$$arity = 1);
      
      Opal.def(self, '$fit', $Fitting_fit$2 = function $$fit(other) {
        var $a, $b, self = this, v = nil, _ = nil, scale = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        scale = $rb_divide(v.$to_f_vector(), self);
        return $rb_times(self, (function() {if ($truthy(($truthy($a = scale.$y()['$=='](0)) ? $a : ($truthy($b = $rb_gt(scale.$x(), 0)) ? $rb_lt(scale.$x(), scale.$y()) : $b)))) {
          return scale.$x()
        } else {
          return scale.$y()
        }; return nil; })());
      }, $Fitting_fit$2.$$arity = 1);
      self.$alias_method("constrain_both", "fit");
      
      Opal.def(self, '$fit_either', $Fitting_fit_either$3 = function $$fit_either(other) {
        var $a, $b, self = this, v = nil, _ = nil, scale = nil;

        
        $b = self.$coerce(other), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (_ = ($a[1] == null ? nil : $a[1])), $b;
        scale = $rb_divide(v.$to_f_vector(), self);
        if ($truthy(($truthy($a = $rb_gt(scale.$x(), 0)) ? $rb_gt(scale.$y(), 0) : $a))) {
          
          scale = (function() {if ($truthy($rb_lt(scale.$x(), scale.$y()))) {
            return scale.$y()
          } else {
            return scale.$x()
          }; return nil; })();
          return $rb_times(self, scale);
        } else {
          return self.$fit(v)
        };
      }, $Fitting_fit_either$3.$$arity = 1);
      self.$alias_method("constrain_one", "fit_either");
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["vector2d/properties"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$atan2', '$y', '$x', '$abs', '$/', '$to_f', '$sqrt', '$squared_length', '$+', '$*', '$==', '$length']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector2d');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Properties');

      var $nesting = [self].concat($parent_nesting), $Properties_angle$1, $Properties_aspect_ratio$2, $Properties_length$3, $Properties_squared_length$4, $Properties_normalized$ques$5;

      
      
      Opal.def(self, '$angle', $Properties_angle$1 = function $$angle() {
        var self = this;

        return $$($nesting, 'Math').$atan2(self.$y(), self.$x())
      }, $Properties_angle$1.$$arity = 0);
      
      Opal.def(self, '$aspect_ratio', $Properties_aspect_ratio$2 = function $$aspect_ratio() {
        var self = this;

        return $rb_divide(self.$x().$to_f(), self.$y().$to_f()).$abs()
      }, $Properties_aspect_ratio$2.$$arity = 0);
      
      Opal.def(self, '$length', $Properties_length$3 = function $$length() {
        var self = this;

        return $$($nesting, 'Math').$sqrt(self.$squared_length())
      }, $Properties_length$3.$$arity = 0);
      
      Opal.def(self, '$squared_length', $Properties_squared_length$4 = function $$squared_length() {
        var self = this;

        return $rb_plus($rb_times(self.$x(), self.$x()), $rb_times(self.$y(), self.$y()))
      }, $Properties_squared_length$4.$$arity = 0);
      
      Opal.def(self, '$normalized?', $Properties_normalized$ques$5 = function() {
        var self = this;

        return self.$length().$to_f()['$=='](1.0)
      }, $Properties_normalized$ques$5.$$arity = 0);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["vector2d/transformations"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$new', '$class', '$ceil', '$x', '$y', '$floor', '$resize', '$-@', '$*', '$/', '$length', '$-', '$cos', '$sin', '$+', '$round', '$min']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector2d');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'Transformations');

      var $nesting = [self].concat($parent_nesting), $Transformations_ceil$1, $Transformations_floor$2, $Transformations_normalize$3, $Transformations_perpendicular$4, $Transformations_resize$5, $Transformations_reverse$6, $Transformations_rotate$7, $Transformations_round$8, $Transformations_truncate$9;

      
      
      Opal.def(self, '$ceil', $Transformations_ceil$1 = function $$ceil() {
        var self = this;

        return self.$class().$new(self.$x().$ceil(), self.$y().$ceil())
      }, $Transformations_ceil$1.$$arity = 0);
      
      Opal.def(self, '$floor', $Transformations_floor$2 = function $$floor() {
        var self = this;

        return self.$class().$new(self.$x().$floor(), self.$y().$floor())
      }, $Transformations_floor$2.$$arity = 0);
      
      Opal.def(self, '$normalize', $Transformations_normalize$3 = function $$normalize() {
        var self = this;

        return self.$resize(1.0)
      }, $Transformations_normalize$3.$$arity = 0);
      
      Opal.def(self, '$perpendicular', $Transformations_perpendicular$4 = function $$perpendicular() {
        var self = this;

        return $$($nesting, 'Vector2d').$new(self.$y()['$-@'](), self.$x())
      }, $Transformations_perpendicular$4.$$arity = 0);
      
      Opal.def(self, '$resize', $Transformations_resize$5 = function $$resize(new_length) {
        var self = this;

        return $rb_times(self, $rb_divide(new_length, self.$length()))
      }, $Transformations_resize$5.$$arity = 1);
      
      Opal.def(self, '$reverse', $Transformations_reverse$6 = function $$reverse() {
        var self = this;

        return self.$class().$new(self.$x()['$-@'](), self.$y()['$-@']())
      }, $Transformations_reverse$6.$$arity = 0);
      
      Opal.def(self, '$rotate', $Transformations_rotate$7 = function $$rotate(angle) {
        var self = this;

        return $$($nesting, 'Vector2d').$new($rb_minus($rb_times(self.$x(), $$($nesting, 'Math').$cos(angle)), $rb_times(self.$y(), $$($nesting, 'Math').$sin(angle))), $rb_plus($rb_times(self.$x(), $$($nesting, 'Math').$sin(angle)), $rb_times(self.$y(), $$($nesting, 'Math').$cos(angle))))
      }, $Transformations_rotate$7.$$arity = 1);
      
      Opal.def(self, '$round', $Transformations_round$8 = function $$round(digits) {
        var self = this;

        
        
        if (digits == null) {
          digits = 0;
        };
        return self.$class().$new(self.$x().$round(digits), self.$y().$round(digits));
      }, $Transformations_round$8.$$arity = -1);
      
      Opal.def(self, '$truncate', $Transformations_truncate$9 = function $$truncate(max) {
        var self = this;

        return self.$resize([max, self.$length()].$min())
      }, $Transformations_truncate$9.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["vector2d/version"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector2d');

    var $nesting = [self].concat($parent_nesting);

    return Opal.const_set($nesting[0], 'VERSION', "2.1.0")
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["vector2d"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var $Vector2d$7, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$extend', '$include', '$nil?', '$parse_single_arg', '$new', '$private', '$===', '$parse', '$parse_str', '$parse_hash', '$dup', '$has_key?', '$[]', '$[]=', '$-', '$=~', '$map', '$split', '$to_proc', '$raise', '$attr_reader', '$x', '$y']);
  
  self.$require("vector2d/calculations");
  self.$require("vector2d/coercions");
  self.$require("vector2d/fitting");
  self.$require("vector2d/properties");
  self.$require("vector2d/transformations");
  self.$require("vector2d/version");
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Vector2d');

    var $nesting = [self].concat($parent_nesting), $Vector2d_initialize$5, $Vector2d_$eq_eq$6;

    
    self.$extend($$$($$$($$($nesting, 'Vector2d'), 'Calculations'), 'ClassMethods'));
    self.$include($$$($$($nesting, 'Vector2d'), 'Calculations'));
    self.$include($$$($$($nesting, 'Vector2d'), 'Coercions'));
    self.$include($$$($$($nesting, 'Vector2d'), 'Fitting'));
    self.$include($$$($$($nesting, 'Vector2d'), 'Properties'));
    self.$include($$$($$($nesting, 'Vector2d'), 'Transformations'));
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting), $parse$1, $parse_single_arg$2, $parse_hash$3, $parse_str$4;

      
      
      Opal.def(self, '$parse', $parse$1 = function $$parse(arg, second_arg) {
        var self = this;

        
        
        if (second_arg == null) {
          second_arg = nil;
        };
        if ($truthy(second_arg['$nil?']())) {
          return self.$parse_single_arg(arg)
        } else {
          return self.$new(arg, second_arg)
        };
      }, $parse$1.$$arity = -2);
      self.$private();
      
      Opal.def(self, '$parse_single_arg', $parse_single_arg$2 = function $$parse_single_arg(arg) {
        var self = this, $case = nil;

        return (function() {$case = arg;
        if ($$($nesting, 'Vector2d')['$===']($case)) {return arg}
        else if ($$($nesting, 'Array')['$===']($case)) {return $send(self, 'parse', Opal.to_a(arg))}
        else if ($$($nesting, 'String')['$===']($case)) {return self.$parse_str(arg)}
        else if ($$($nesting, 'Hash')['$===']($case)) {return self.$parse_hash(arg.$dup())}
        else {return self.$new(arg, arg)}})()
      }, $parse_single_arg$2.$$arity = 1);
      
      Opal.def(self, '$parse_hash', $parse_hash$3 = function $$parse_hash(hash) {
        var $a, self = this, $writer = nil;

        
        if ($truthy(hash['$has_key?']("x"))) {
          ($truthy($a = hash['$[]']("x")) ? $a : (($writer = ["x", hash['$[]']("x")]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))};
        if ($truthy(hash['$has_key?']("y"))) {
          ($truthy($a = hash['$[]']("y")) ? $a : (($writer = ["y", hash['$[]']("y")]), $send(hash, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))};
        return self.$new(hash['$[]']("x"), hash['$[]']("y"));
      }, $parse_hash$3.$$arity = 1);
      return (Opal.def(self, '$parse_str', $parse_str$4 = function $$parse_str(str) {
        var self = this;

        if ($truthy(str['$=~'](/^[\s]*[\d\.]*[\s]*x[\s]*[\d\.]*[\s]*$/))) {
          return $send(self, 'new', Opal.to_a($send(str.$split("x"), 'map', [], "to_f".$to_proc())))
        } else {
          return self.$raise($$($nesting, 'ArgumentError'), "not a valid string input")
        }
      }, $parse_str$4.$$arity = 1), nil) && 'parse_str';
    })(Opal.get_singleton_class(self), $nesting);
    self.$attr_reader("x", "y");
    
    Opal.def(self, '$initialize', $Vector2d_initialize$5 = function $$initialize(x, y) {
      var $a, self = this;

      return $a = [x, y], (self.x = $a[0]), (self.y = $a[1]), $a
    }, $Vector2d_initialize$5.$$arity = 2);
    return (Opal.def(self, '$==', $Vector2d_$eq_eq$6 = function(comp) {
      var $a, self = this;

      return ($truthy($a = comp.$x()['$==='](self.$x())) ? comp.$y()['$==='](self.$y()) : $a)
    }, $Vector2d_$eq_eq$6.$$arity = 1), nil) && '==';
  })($nesting[0], null, $nesting);
  return (Opal.def(self, '$Vector2d', $Vector2d$7 = function $$Vector2d($a) {
    var $post_args, args, self = this;

    
    
    $post_args = Opal.slice.call(arguments, 0, arguments.length);
    
    args = $post_args;;
    return $send($$($nesting, 'Vector2d'), 'parse', Opal.to_a(args));
  }, $Vector2d$7.$$arity = -1), nil) && 'Vector2d';
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal-ajv"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $gvars = Opal.gvars, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$==', '$add_schema', '$_schema', '$to_n', '$each', '$start_with?', '$gsub', '$[]', '$push', '$error', '$new', '$strict=', '$-', '$get', '$keys', '$validate_filenameparts', '$+', '$validate', '$select', '$include?', '$inject', '$[]=', '$keep_if', '$>', '$length', '$t', '$join', '$uniq', '$flatten', '$values']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Ajv');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'JsonValidator');

      var $nesting = [self].concat($parent_nesting), $JsonValidator_initialize$1, $JsonValidator_add_schema$2, $JsonValidator_validate$3, $JsonValidator_validate_conf$5, $JsonValidator_validate_filenameparts$7, $JsonValidator__schema$12;

      self.$$prototype.root = nil;
      
      
      Opal.def(self, '$initialize', $JsonValidator_initialize$1 = function $$initialize() {
        var self = this, ajv = nil;

        
        ajv = nil;
        if ($$($nesting, 'OPAL_PLATFORM')['$==']("nodejs")) {
          ajv = Ajv
        } else {
          ajv = Ajv
        };
        self.root = ajv({allErrors: true, jsonPointers: true, extendRefs: true});
        return self.$add_schema(self.$_schema(), "zupfnoter");
      }, $JsonValidator_initialize$1.$$arity = 0);
      
      Opal.def(self, '$add_schema', $JsonValidator_add_schema$2 = function $$add_schema(schema, schemaname) {
        var self = this;

        
        
      self.root.addSchema(schema.$to_n(), schemaname)
      ;
        return nil;
      }, $JsonValidator_add_schema$2.$$arity = 2);
      
      Opal.def(self, '$validate', $JsonValidator_validate$3 = function $$validate(schemaname, data) {
        var $$4, self = this, valid = nil, result = nil, errors = nil;

        
        valid = false;
        
      valid = self.root.validate(schemaname, data.$to_n())
     ;
        result = [];
        if ($truthy(valid)) {
        } else {
          
          errors = self.root.errors;
          $send(errors, 'each', [], ($$4 = function(error){var self = $$4.$$s || this, path = nil, message = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (error == null) {
              error = nil;
            };
            path = error.dataPath;
            if ($truthy(path['$start_with?']("/"))) {
              path = path['$[]']($range(1, -1, false)).$gsub("/", ".")};
            result.$push(path);
            message = path+ ': ' + error.message + "\n" + JSON.stringify(error.params, null, " ");
            return $gvars.log.$error(message);}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        };
        return result;
      }, $JsonValidator_validate$3.$$arity = 2);
      
      Opal.def(self, '$validate_conf', $JsonValidator_validate_conf$5 = function $$validate_conf(conf) {
        var $$6, self = this, resconf = nil, $writer = nil, extract0 = nil, x = nil, result = nil;

        
        resconf = $$($nesting, 'Confstack').$new();
        
        $writer = [false];
        $send(resconf, 'strict=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        resconf.$push(conf.$get());
        extract0 = resconf.$get("extract.0");
        $send(resconf.$get("extract").$keys(), 'each', [], ($$6 = function(key){var self = $$6.$$s || this;

        
          
          if (key == null) {
            key = nil;
          };
          return resconf.$push($hash2(["extract"], {"extract": $hash(key, extract0)}));}, $$6.$$s = self, $$6.$$arity = 1, $$6));
        resconf.$push($hash2(["extract"], {"extract": conf.$get("extract")}));
        x = resconf.$get();
        result = self.$validate_filenameparts(resconf);
        return (result = $rb_plus(result, self.$validate("zupfnoter", resconf.$get())));
      }, $JsonValidator_validate_conf$5.$$arity = 1);
      
      Opal.def(self, '$validate_filenameparts', $JsonValidator_validate_filenameparts$7 = function $$validate_filenameparts(conf) {
        var $$8, $$9, $$10, $$11, self = this, filenamekeys = nil, filenameparts = nil;

        
        filenamekeys = $send(conf.$keys(), 'select', [], ($$8 = function(i){var self = $$8.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i['$include?']("filenamepart");}, $$8.$$s = self, $$8.$$arity = 1, $$8));
        filenameparts = $send(filenamekeys, 'inject', [$hash2([], {})], ($$9 = function(result, element){var self = $$9.$$s || this, $a, $writer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

        
          
          if (result == null) {
            result = nil;
          };
          
          if (element == null) {
            element = nil;
          };
          ($truthy($a = result['$[]']($gvars.conf['$[]'](element))) ? $a : (($writer = [$gvars.conf['$[]'](element), []]), $send(result, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          result['$[]']($gvars.conf['$[]'](element)).$push(element);
          return result;}, $$9.$$s = self, $$9.$$arity = 2, $$9));
        filenameparts = $send(filenameparts, 'keep_if', [], ($$10 = function(k, v){var self = $$10.$$s || this;

        
          
          if (k == null) {
            k = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          return $rb_gt(v.$length(), 1);}, $$10.$$s = self, $$10.$$arity = 2, $$10));
        $send(filenameparts, 'each', [], ($$11 = function(k, v){var self = $$11.$$s || this, message = nil;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (k == null) {
            k = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          message = $rb_plus($rb_plus($$($nesting, 'I18n').$t("duplicate filenameparts"), ": "), v.$join(", "));
          return $gvars.log.$error(message);}, $$11.$$s = self, $$11.$$arity = 2, $$11));
        return filenameparts.$values().$flatten().$uniq();
      }, $JsonValidator_validate_filenameparts$7.$$arity = 1);
      return (Opal.def(self, '$_schema', $JsonValidator__schema$12 = function $$_schema() {
        var self = this;

        return $hash2(["$schema", "description", "type", "required", "definitions", "properties"], {"$schema": "http://json-schema.org/draft-04/schema#", "description": "Generated from x.json with shasum 0b1781e0803dc084178858e9fbe2b4e0b65c08e7", "type": "object", "required": ["produce", "abc_parser", "restposition", "wrap", "defaults", "templates", "annotations", "extract", "layout", "neatjson"], "definitions": $hash2(["apanchor", "pos", "notes_entry", "nb_annotation_xx", "minc_entry", "nconf_entry", "align", "notebound_pos", "notebound_repeat_outdated", "annotated_bezier", "extract_layout"], {"apanchor": $hash2(["type", "enum"], {"type": "string", "enum": ["manual", "box", "center"]}), "pos": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 2, "uniqueItems": false, "items": $hash2(["type"], {"type": "number"})}), "notes_entry": $hash2(["type", "required", "properties"], {"type": "object", "required": ["pos", "text", "style"], "properties": $hash2(["pos", "text", "align", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "text": $hash2(["type"], {"type": "string"}), "align": $hash2(["$ref"], {"$ref": "#/definitions/align"}), "style": $hash2(["type"], {"type": "string"})})}), "nb_annotation_xx": $hash2(["type", "required", "properties"], {"type": "object", "required": ["voices", "pos", "autopos", "style"], "properties": $hash2(["voices", "pos", "autopos", "apanchor", "style"], {"voices": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2([], {})}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "autopos": $hash2(["type"], {"type": "boolean"}), "apanchor": $hash2(["$ref"], {"$ref": "#/definitions/apanchor"}), "style": $hash2(["type"], {"type": "string"})})}), "minc_entry": $hash2(["type", "required", "additionalProperties", "properties"], {"type": "object", "required": ["minc_f"], "additionalProperties": false, "properties": $hash2(["minc_f"], {"minc_f": $hash2(["type"], {"type": "number"})})}), "nconf_entry": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["t_d*"], {"t_d*": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["n_d*"], {"n_d*": $hash2(["type", "additionalProperties", "properties"], {"type": "object", "additionalProperties": false, "properties": $hash2(["nshift"], {"nshift": $hash2(["type"], {"type": "number"})})})})})})}), "align": $hash2(["type", "enum"], {"type": "string", "enum": ["l", "r", "auto"]}), "notebound_pos": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["v_d*"], {"v_d*": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["t_\\d*|\\d*"], {"t_\\d*|\\d*": $hash2(["type", "additionalProperties", "properties", "patternProperties"], {"type": "object", "additionalProperties": false, "properties": $hash2(["pos", "align", "show", "text", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "align": $hash2(["$ref"], {"$ref": "#/definitions/align"}), "show": $hash2(["type"], {"type": "boolean"}), "text": $hash2(["type"], {"type": "string"}), "style": $hash2(["type"], {"type": "string"})}), "patternProperties": $hash2(["\\d+"], {"\\d+": $hash2(["type", "additionalProperties", "properties"], {"type": "object", "additionalProperties": false, "properties": $hash2(["pos", "align", "show", "text", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "align": $hash2(["$ref"], {"$ref": "#/definitions/align"}), "show": $hash2(["type"], {"type": "boolean"}), "text": $hash2(["type"], {"type": "string"}), "style": $hash2(["type"], {"type": "string"})})})})})})})})}), "notebound_repeat_outdated": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["v_d*"], {"v_d*": $hash2(["text", "style", "pos"], {"text": "integer", "style": $hash2(["type"], {"type": "string"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"})})})}), "annotated_bezier": $hash2(["type", "properties"], {"type": "object", "properties": $hash2(["cp1", "cp2", "pos", "shape", "show", "style"], {"cp1": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "cp2": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "shape": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2(["type"], {"type": "string"})}), "show": $hash2(["type"], {"type": "boolean"}), "style": $hash2(["type"], {"type": "string"})})}), "extract_layout": $hash2(["type", "requiredx", "additionalProperties", "properties"], {"type": "object", "requiredx": ["limit_a3", "LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "grid"], "additionalProperties": false, "properties": $hash2(["limit_a3", "beams", "bottomup", "jumpline_anchor", "jumpline_vcut", "LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "PITCH_OFFSET", "X_SPACING", "X_OFFSET", "instrument", "tuning", "DRAWING_AREA_SIZE", "ELLIPSE_SIZE", "REST_SIZE", "grid", "color", "packer"], {"limit_a3": $hash2(["type"], {"type": "boolean"}), "beams": $hash2(["type"], {"type": "boolean"}), "bottomup": $hash2(["type"], {"type": "boolean"}), "jumpline_anchor": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "jumpline_vcut": $hash2(["type"], {"type": "number"}), "LINE_THIN": $hash2(["type"], {"type": "number"}), "LINE_MEDIUM": $hash2(["type"], {"type": "number"}), "LINE_THICK": $hash2(["type"], {"type": "number"}), "PITCH_OFFSET": $hash2(["type"], {"type": "integer"}), "X_SPACING": $hash2(["type"], {"type": "number"}), "X_OFFSET": $hash2(["type"], {"type": "number"}), "instrument": $hash2(["type"], {"type": "string"}), "tuning": $hash2(["type"], {"type": "string"}), "DRAWING_AREA_SIZE": $hash2(["type", "minItems", "items"], {"type": "array", "minItems": 2, "items": $hash2(["type"], {"type": "number"})}), "ELLIPSE_SIZE": $hash2(["type", "minItems", "items"], {"type": "array", "minItems": 2, "items": $hash2(["type"], {"type": "number"})}), "REST_SIZE": $hash2(["type", "minItems", "items"], {"type": "array", "minItems": 2, "items": $hash2(["type"], {"type": "number"})}), "grid": $hash2(["type"], {"type": "boolean"}), "color": $hash2(["type", "properties"], {"type": "object", "properties": $hash2(["color_default", "color_variant1", "color_variant2"], {"color_default": $hash2(["type"], {"type": "string"}), "color_variant1": $hash2(["type"], {"type": "string"}), "color_variant2": $hash2(["type"], {"type": "string"})})}), "packer": $hash2(["type", "properties"], {"type": "object", "properties": $hash2(["pack_method", "pack_max_spread_factor", "pack_min_increment"], {"pack_method": $hash2(["type"], {"type": "integer"}), "pack_max_spread_factor": $hash2(["type"], {"type": "number"}), "pack_min_increment": $hash2(["type"], {"type": "number"})})})})})}), "properties": $hash2(["confstack", "produce", "template", "abc_parser", "restposition", "wrap", "defaults", "templates", "annotations", "extract", "layout", "neatjson"], {"confstack": $hash2(["type", "required", "properties"], {"type": "object", "required": ["env"], "properties": $hash2(["env"], {"env": $hash2(["type"], {"type": "string"})})}), "produce": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "template": $hash2(["type", "additionalProperties", "properties"], {"type": "object", "additionalProperties": false, "properties": $hash2(["filebase", "title"], {"filebase": $hash2(["type"], {"type": "string"}), "title": $hash2(["type"], {"type": "string"})})}), "abc_parser": $hash2(["type"], {"type": "string"}), "restposition": $hash2(["type", "additionalProperties", "required", "properties"], {"type": "object", "additionalProperties": false, "required": ["default", "repeatstart", "repeatend"], "properties": $hash2(["default", "repeatstart", "repeatend"], {"default": $hash2(["type"], {"type": "string"}), "repeatstart": $hash2(["type"], {"type": "string"}), "repeatend": $hash2(["type"], {"type": "string"})})}), "wrap": $hash2(["type"], {"type": "integer"}), "defaults": $hash2(["type", "required", "properties"], {"type": "object", "required": ["notebound"], "properties": $hash2(["notebound"], {"notebound": $hash2(["type", "required", "properties"], {"type": "object", "required": ["annotation", "partname", "variantend", "tuplet", "chord"], "properties": $hash2(["annotation", "chord", "partname", "variantend", "tuplet"], {"annotation": $hash2(["type", "required", "properties"], {"type": "object", "required": ["pos"], "properties": $hash2(["pos", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "style": $hash2(["type"], {"type": "string"})})}), "chord": $hash2(["type", "required", "properties"], {"type": "object", "required": ["pos"], "properties": $hash2(["pos", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "style": $hash2(["type"], {"type": "string"})})}), "partname": $hash2(["type", "required", "properties"], {"type": "object", "required": ["pos"], "properties": $hash2(["pos", "style", "show"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "style": $hash2(["type"], {"type": "string"}), "show": $hash2(["type"], {"type": "boolean"})})}), "variantend": $hash2(["type", "required", "properties"], {"type": "object", "required": ["pos"], "properties": $hash2(["pos", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "style": $hash2(["type"], {"type": "string"})})}), "tuplet": $hash2(["$ref", "required"], {"$ref": "#/definitions/annotated_bezier", "required": ["cp1", "cp2", "shape"]})})})})}), "templates": $hash2(["type", "required", "properties"], {"type": "object", "required": ["notes", "lyrics", "tuplet", "annotations"], "properties": $hash2(["notes", "lyrics", "tuplet", "annotations"], {"notes": $hash2(["$ref"], {"$ref": "#/definitions/notes_entry"}), "lyrics": $hash2(["type", "required", "properties"], {"type": "object", "required": ["verses", "pos"], "properties": $hash2(["verses", "pos", "style"], {"verses": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "style": $hash2(["type"], {"type": "string"})})}), "tuplet": $hash2(["type", "required", "properties"], {"type": "object", "required": ["cp1", "cp2", "shape"], "properties": $hash2(["cp1", "cp2", "shape"], {"cp1": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "cp2": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "shape": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "string"})})})}), "annotations": $hash2(["type", "required", "properties"], {"type": "object", "required": ["text", "pos"], "properties": $hash2(["text", "pos", "style"], {"text": $hash2(["type"], {"type": "string"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "style": $hash2(["type"], {"type": "string"})})})})}), "annotations": $hash2(["type", "required", "properties"], {"type": "object", "required": ["vl", "vt", "vr"], "properties": $hash2(["vl", "vt", "vr"], {"vl": $hash2(["type", "required", "properties"], {"type": "object", "required": ["text", "pos"], "properties": $hash2(["text", "pos"], {"text": $hash2(["type"], {"type": "string"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"})})}), "vt": $hash2(["type", "required", "properties"], {"type": "object", "required": ["text", "pos"], "properties": $hash2(["text", "pos"], {"text": $hash2(["type"], {"type": "string"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"})})}), "vr": $hash2(["type", "required", "properties"], {"type": "object", "required": ["text", "pos"], "properties": $hash2(["text", "pos"], {"text": $hash2(["type"], {"type": "string"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"})})})})}), "extract": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2(["d*", "4", "5"], {"d*": $hash2(["type", "additionalProperties", "requiredx", "properties"], {"type": "object", "additionalProperties": false, "requiredx": ["title", "filenamepart", "startpos", "voices", "synchlines", "flowlines", "subflowlines", "jumplines", "repeatsigns", "layoutlines", "legend", "lyrics", "layout", "nonflowrest", "notes", "barnumbers", "countnotes", "chords", "stringnames", "printer"], "properties": $hash2(["title", "filenamepart", "startpos", "voices", "synchlines", "flowlines", "subflowlines", "jumplines", "repeatsigns", "layoutlines", "legend", "lyrics", "layout", "nonflowrest", "notes", "notebound", "tuplets", "barnumbers", "countnotes", "chords", "stringnames", "instrument_shape", "sortmark", "printer", "images"], {"title": $hash2(["type"], {"type": "string"}), "filenamepart": $hash2([], {}), "startpos": $hash2(["type"], {"type": "integer"}), "voices": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "synchlines": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})})}), "flowlines": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "subflowlines": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "jumplines": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "repeatsigns": $hash2(["type", "requiredx", "properties"], {"type": "object", "requiredx": ["voices", "left", "right"], "properties": $hash2(["voices", "left", "right"], {"voices": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2([], {})}), "left": $hash2(["type", "required", "properties"], {"type": "object", "required": ["pos", "text", "style"], "properties": $hash2(["pos", "text", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "text": $hash2(["type"], {"type": "string"}), "style": $hash2(["type"], {"type": "string"})})}), "right": $hash2(["type", "required", "properties"], {"type": "object", "required": ["pos", "text", "style"], "properties": $hash2(["pos", "text", "style"], {"pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "text": $hash2(["type"], {"type": "string"}), "style": $hash2(["type"], {"type": "string"})})})})}), "layoutlines": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "legend": $hash2(["type", "required", "properties"], {"type": "object", "required": ["spos", "pos"], "properties": $hash2(["spos", "pos", "tstyle", "align", "style", "salign"], {"spos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "tstyle": $hash2(["type"], {"type": "string"}), "align": $hash2(["$ref"], {"$ref": "#/definitions/align"}), "style": $hash2(["type"], {"type": "string"}), "salign": $hash2(["$ref"], {"$ref": "#/definitions/align"})})}), "lyrics": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2([".*"], {".*": $hash2(["type", "required"], {"type": "object", "required": ["verses", "pos"]})})}), "layout": $hash2(["$ref"], {"$ref": "#/definitions/extract_layout"}), "nonflowrest": $hash2(["type"], {"type": "boolean"}), "notes": $hash2(["patternProperties"], {"patternProperties": $hash2([".*"], {".*": $hash2(["$ref"], {"$ref": "#/definitions/notes_entry"})})}), "notebound": $hash2(["type", "additionalProperties", "properties"], {"type": "object", "additionalProperties": false, "properties": $hash2(["annotation", "chord", "barnumber", "c_jumplines", "countnote", "decoration", "flowline", "minc", "nconf", "partname", "repeat_begin", "repeat_end", "tuplet", "variantend"], {"annotation": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"}), "chord": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"}), "barnumber": $hash2(["$ref", "align"], {"$ref": "#/definitions/notebound_pos", "align": $hash2(["$ref"], {"$ref": "#/definitions/align"})}), "c_jumplines": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["v_d*"], {"v_d*": $hash2(["p_repeat", "p_begin", "p_end", "p_follow"], {"p_repeat": $hash2(["type"], {"type": "number"}), "p_begin": $hash2(["type"], {"type": "number"}), "p_end": $hash2(["type"], {"type": "number"}), "p_follow": $hash2(["type"], {"type": "number"})})})}), "countnote": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"}), "decoration": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2(["d+"], {"d+": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"})})}), "flowline": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2(["v_d+"], {"v_d+": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2(["d*"], {"d*": $hash2(["$ref"], {"$ref": "#/definitions/annotated_bezier"})})})})}), "minc": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["d*"], {"d*": $hash2(["$ref"], {"$ref": "#/definitions/minc_entry"})})}), "nconf": $hash2(["type", "additionalProperties", "patternProperties"], {"type": "object", "additionalProperties": false, "patternProperties": $hash2(["v_d*"], {"v_d*": $hash2(["$ref"], {"$ref": "#/definitions/nconf_entry"})})}), "partname": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"}), "repeat_begin": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"}), "repeat_end": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"}), "tuplet": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2(["v_d*"], {"v_d*": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2(["d*"], {"d*": $hash2(["$ref"], {"$ref": "#/definitions/annotated_bezier"})})})})}), "variantend": $hash2(["$ref"], {"$ref": "#/definitions/notebound_pos"})})}), "tuplets": $hash2(["type", "properties"], {"type": "object", "properties": $hash2(["text"], {"text": $hash2(["type"], {"type": "string"})})}), "barnumbers": $hash2(["type", "required", "properties"], {"type": "object", "required": ["voices", "pos", "autopos", "style", "prefix"], "properties": $hash2(["voices", "pos", "autopos", "apanchor", "style", "prefix"], {"voices": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2([], {})}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "autopos": $hash2(["type"], {"type": "boolean"}), "apanchor": $hash2(["$ref"], {"$ref": "#/definitions/apanchor"}), "style": $hash2(["type"], {"type": "string"}), "prefix": $hash2(["type"], {"type": "string"})})}), "countnotes": $hash2(["type", "required", "properties", "cntextleft", "cntextright"], {"type": "object", "required": ["voices", "pos", "autopos", "style"], "properties": $hash2(["voices", "pos", "autopos", "apanchor", "style"], {"voices": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2([], {})}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "autopos": $hash2(["type"], {"type": "boolean"}), "apanchor": $hash2(["$ref"], {"$ref": "#/definitions/apanchor"}), "style": $hash2(["type"], {"type": "string"})}), "cntextleft": $hash2(["type"], {"type": "string"}), "cntextright": $hash2(["type"], {"type": "string"})}), "chords": $hash2(["ref", "style"], {"ref": "#/definitions/nb_annotations", "style": $hash2(["type"], {"type": "string"})}), "stringnames": $hash2(["type", "required", "properties"], {"type": "object", "required": ["text", "vpos", "style", "marks"], "properties": $hash2(["text", "vpos", "style", "marks"], {"text": $hash2(["type"], {"type": "string"}), "vpos": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "style": $hash2(["type"], {"type": "string"}), "marks": $hash2(["type", "required", "properties"], {"type": "object", "required": ["vpos", "hpos"], "properties": $hash2(["vpos", "hpos"], {"vpos": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "hpos": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 0, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})})})})})}), "instrument_shape": $hash2(["type"], {"type": "string"}), "sortmark": $hash2(["type", "properties"], {"type": "object", "properties": $hash2(["show"], {"show": $hash2(["type"], {"type": "boolean"})})}), "printer": $hash2(["type", "required", "properties"], {"type": "object", "required": ["a3_offset", "a4_offset", "show_border"], "properties": $hash2(["a3_offset", "a4_offset", "show_border"], {"a3_offset": $hash2(["type", "minItems", "axItems", "uniqueItems", "items"], {"type": "array", "minItems": 2, "axItems": 2, "uniqueItems": false, "items": $hash2(["type"], {"type": "integer"})}), "a4_offset": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 2, "uniqueItems": false, "items": $hash2(["type"], {"type": "integer"})}), "show_border": $hash2(["type"], {"type": "boolean"})})}), "images": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2(["d*"], {"d*": $hash2(["type", "properties"], {"type": "object", "properties": $hash2(["imagename", "show", "pos", "height"], {"imagename": $hash2(["type"], {"type": "string"}), "show": $hash2(["type"], {"type": "boolean"}), "pos": $hash2(["$ref"], {"$ref": "#/definitions/pos"}), "height": $hash2(["type"], {"type": "number"})})})})})})}), "4": $hash2(["type", "required", "properties"], {"type": "object", "required": ["title", "voices"], "properties": $hash2(["title", "filenamepart", "voices"], {"title": $hash2(["type"], {"type": "string"}), "filenamepart": $hash2([], {}), "voices": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})})})}), "5": $hash2(["type", "required", "properties"], {"type": "object", "required": ["title", "voices"], "properties": $hash2(["title", "filenamepart", "voices"], {"title": $hash2(["type"], {"type": "string"}), "filenamepart": $hash2([], {}), "voices": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})})})})})}), "layout": $hash2(["type", "required", "properties"], {"type": "object", "required": ["grid", "limit_a3", "SHOW_SLUR", "LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "X_SPACING", "X_OFFSET", "Y_SCALE", "DRAWING_AREA_SIZE", "BEAT_RESOLUTION", "SHORTEST_NOTE", "BEAT_PER_DURATION", "PITCH_OFFSET", "FONT_STYLE_DEF", "MM_PER_POINT", "DURATION_TO_STYLE", "REST_TO_GLYPH"], "properties": $hash2(["grid", "limit_a3", "SHOW_SLUR", "LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "X_SPACING", "X_OFFSET", "Y_SCALE", "DRAWING_AREA_SIZE", "BEAT_RESOLUTION", "SHORTEST_NOTE", "BEAT_PER_DURATION", "PITCH_OFFSET", "FONT_STYLE_DEF", "MM_PER_POINT", "DURATION_TO_STYLE", "REST_TO_GLYPH"], {"grid": $hash2(["type"], {"type": "boolean"}), "limit_a3": $hash2(["type"], {"type": "boolean"}), "SHOW_SLUR": $hash2(["type"], {"type": "boolean"}), "LINE_THIN": $hash2(["type"], {"type": "number"}), "LINE_MEDIUM": $hash2(["type"], {"type": "number"}), "LINE_THICK": $hash2(["type"], {"type": "number"}), "ELLIPSE_SIZE": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "number"})}), "REST_SIZE": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "number"})}), "X_SPACING": $hash2(["type"], {"type": "number"}), "X_OFFSET": $hash2(["type"], {"type": "number"}), "Y_SCALE": $hash2(["type"], {"type": "integer"}), "DRAWING_AREA_SIZE": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": $hash2(["type"], {"type": "integer"})}), "BEAT_RESOLUTION": $hash2(["type"], {"type": "integer"}), "SHORTEST_NOTE": $hash2(["type"], {"type": "integer"}), "BEAT_PER_DURATION": $hash2(["type"], {"type": "integer"}), "PITCH_OFFSET": $hash2(["type"], {"type": "integer"}), "FONT_STYLE_DEF": $hash2(["type", "required", "patternProperties"], {"type": "object", "required": ["bold", "italic", "large", "regular", "small_bold", "small_italic", "small", "smaller"], "patternProperties": $hash2([".*"], {".*": $hash2(["type", "required", "properties"], {"type": "object", "required": ["text_color", "font_size", "font_style"], "properties": $hash2(["text_color", "font_size", "font_style"], {"text_color": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 3, "uniqueItems": false, "items": $hash2(["type"], {"type": "integer"})}), "font_size": $hash2(["type"], {"type": "integer"}), "font_style": $hash2(["type"], {"type": "string"})})})})}), "MM_PER_POINT": $hash2(["type"], {"type": "number"}), "DURATION_TO_STYLE": $hash2(["type", "required", "patternProperties"], {"type": "object", "required": ["err", "d64", "d48", "d32", "d24", "d16", "d12", "d8", "d6", "d4", "d3", "d2", "d1"], "patternProperties": $hash2([".*"], {".*": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 3, "uniqueItems": false, "items": $hash2(["type"], {"type": ["number", "string", "boolean"]})})})}), "REST_TO_GLYPH": $hash2(["type", "patternProperties"], {"type": "object", "patternProperties": $hash2([".*"], {".*": $hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": true, "items": [$hash2(["type", "minItems", "uniqueItems", "items"], {"type": "array", "minItems": 1, "uniqueItems": false, "items": $hash2(["type"], {"type": "number"})}), $hash2(["type"], {"type": "string"}), $hash2(["type"], {"type": "boolean"})]})})})})}), "neatjson": $hash2(["type", "required", "properties"], {"type": "object", "required": ["wrap", "aligned", "after_comma", "after_colon_1", "after_colon_n", "before_colon_n", "explicit_sort"], "properties": $hash2(["wrap", "aligned", "after_comma", "after_colon_1", "after_colon_n", "before_colon_n", "sorted", "explicit_sort"], {"wrap": $hash2(["type"], {"type": "integer"}), "aligned": $hash2(["type"], {"type": "boolean"}), "after_comma": $hash2(["type"], {"type": "integer"}), "after_colon_1": $hash2(["type"], {"type": "integer"}), "after_colon_n": $hash2(["type"], {"type": "integer"}), "before_colon_n": $hash2(["type"], {"type": "integer"}), "sorted": $hash2(["type"], {"type": "boolean"}), "explicit_sort": $hash2(["type"], {"type": "object"})})})})})
      }, $JsonValidator__schema$12.$$arity = 0), nil) && '_schema';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["consolelogger"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_reader', '$attr', '$[]', '$now', '$clear_errors', '$clear_annotations', '$send', '$push', '$add_annotation', '$==', '$loglevel', '$join', '$write', '$loglevel?', '$info', '$-', '$>', '$count', '$+', '$call', '$to_sym', '$message', '$invert', '$<=', '$keys', '$private', '$first', '$last', '$<<', '$strftime', '$puts', '$write_html']);
  
  Opal.const_set($nesting[0], 'LOGLEVELS', $hash2(["message", "error", "warning", "info", "debug"], {"message": 0, "error": 1, "warning": 2, "info": 3, "debug": 4}));
  Opal.const_set($nesting[0], 'LOGICONS', $hash2(["message", "error", "warning", "info", "debug"], {"message": "icon-info-circled", "error": "icon-error-alt", "warning": "icon-attention", "info": "icon-info-circled", "debug": "icon-minus-squared"}));
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Logger');

    var $nesting = [self].concat($parent_nesting), $Logger_clear_annotations$1, $Logger_initialize$2, $Logger_clear_annotations$3, $Logger_log_from_worker$4, $Logger_error$5, $Logger_warning$6, $Logger_info$7, $Logger_debug$8, $Logger_message$9, $Logger_timestamp$10, $Logger_timestamp_start$11, $Logger_clear_errors$12, $Logger_has_errors$ques$13, $Logger_get_errors$14, $Logger_get_status$15, $Logger_set_status$16, $Logger_benchmark$17, $Logger_console_log$18, $Logger_loglevel$eq$19, $Logger_loglevel$20, $Logger_loglevel$ques$21, $Logger_loglevels$22, $Logger_add_annotation$23, $Logger_write$24;

    self.$$prototype.captured_errors = self.$$prototype.timestamp = self.$$prototype.annotations = self.$$prototype.benchmarkstack = self.$$prototype.loglevel = nil;
    
    self.$attr_reader("annotations");
    self.$attr("benchmarkstack");
    
    Opal.def(self, '$clear_annotations', $Logger_clear_annotations$1 = function $$clear_annotations() {
      var self = this;

      return (self.annotations = [])
    }, $Logger_clear_annotations$1.$$arity = 0);
    
    Opal.def(self, '$initialize', $Logger_initialize$2 = function $$initialize(element_id) {
      var self = this;

      
      self.console = element_id;
      self.loglevel = $$($nesting, 'LOGLEVELS')['$[]']("info");
      self.timestamp = $$($nesting, 'Time').$now();
      self.benchmarkstack = 0;
      self.$clear_errors();
      return self.$clear_annotations();
    }, $Logger_initialize$2.$$arity = 1);
    
    Opal.def(self, '$clear_annotations', $Logger_clear_annotations$3 = function $$clear_annotations() {
      var self = this;

      return (self.annotations = [])
    }, $Logger_clear_annotations$3.$$arity = 0);
    
    Opal.def(self, '$log_from_worker', $Logger_log_from_worker$4 = function $$log_from_worker(payload) {
      var self = this;

      return $send(self, 'send', [payload['$[]']("type")].concat(Opal.to_a(payload['$[]']("args"))))
    }, $Logger_log_from_worker$4.$$arity = 1);
    
    Opal.def(self, '$error', $Logger_error$5 = function $$error(msg, start_pos, end_pos, backtrace) {
      var self = this, backtrace_message = nil;

      
      
      if (start_pos == null) {
        start_pos = nil;
      };
      
      if (end_pos == null) {
        end_pos = nil;
      };
      
      if (backtrace == null) {
        backtrace = [];
      };
      self.captured_errors.$push(msg);
      self.$add_annotation(msg, start_pos, end_pos, "error");
      if (self.$loglevel()['$==']("debug")) {
        backtrace_message = backtrace.$join("\n")};
      return self.$write("error", "" + (msg) + (backtrace_message));
    }, $Logger_error$5.$$arity = -2);
    
    Opal.def(self, '$warning', $Logger_warning$6 = function $$warning(msg, start_pos, end_pos) {
      var self = this;

      
      
      if (start_pos == null) {
        start_pos = nil;
      };
      
      if (end_pos == null) {
        end_pos = nil;
      };
      if ($truthy(self['$loglevel?']("warning"))) {
        self.$add_annotation(msg, start_pos, end_pos, "warning")};
      return self.$write("warning", msg);
    }, $Logger_warning$6.$$arity = -2);
    
    Opal.def(self, '$info', $Logger_info$7 = function $$info(msg, start_pos, end_pos) {
      var self = this;

      
      
      if (start_pos == null) {
        start_pos = nil;
      };
      
      if (end_pos == null) {
        end_pos = nil;
      };
      self.$add_annotation(msg, start_pos, end_pos, "info");
      return self.$write("info", msg);
    }, $Logger_info$7.$$arity = -2);
    
    Opal.def(self, '$debug', $Logger_debug$8 = function $$debug(msg, start_pos, end_pos) {
      var self = this;

      
      
      if (start_pos == null) {
        start_pos = nil;
      };
      
      if (end_pos == null) {
        end_pos = nil;
      };
      self.$add_annotation(msg, start_pos, end_pos, "debug");
      return self.$write("debug", msg);
    }, $Logger_debug$8.$$arity = -2);
    
    Opal.def(self, '$message', $Logger_message$9 = function $$message(msg, start_pos, end_pos) {
      var self = this;

      
      
      if (start_pos == null) {
        start_pos = nil;
      };
      
      if (end_pos == null) {
        end_pos = nil;
      };
      self.$add_annotation(msg, start_pos, end_pos, "message");
      return self.$write("message", msg);
    }, $Logger_message$9.$$arity = -2);
    
    Opal.def(self, '$timestamp', $Logger_timestamp$10 = function $$timestamp(msg, start_pos, end_pos) {
      var self = this;
      if ($gvars.log == null) $gvars.log = nil;

      
      
      if (start_pos == null) {
        start_pos = nil;
      };
      
      if (end_pos == null) {
        end_pos = nil;
      };
      return $gvars.log.$info("" + "Timestamp " + ($rb_minus($$($nesting, 'Time').$now(), self.timestamp)) + " sec: " + (msg));
    }, $Logger_timestamp$10.$$arity = -2);
    
    Opal.def(self, '$timestamp_start', $Logger_timestamp_start$11 = function $$timestamp_start() {
      var self = this;

      return (self.timestamp = $$($nesting, 'Time').$now())
    }, $Logger_timestamp_start$11.$$arity = 0);
    
    Opal.def(self, '$clear_errors', $Logger_clear_errors$12 = function $$clear_errors() {
      var self = this;

      return (self.captured_errors = [])
    }, $Logger_clear_errors$12.$$arity = 0);
    
    Opal.def(self, '$has_errors?', $Logger_has_errors$ques$13 = function() {
      var self = this;

      return $rb_gt(self.captured_errors.$count(), 0)
    }, $Logger_has_errors$ques$13.$$arity = 0);
    
    Opal.def(self, '$get_errors', $Logger_get_errors$14 = function $$get_errors() {
      var self = this;

      return self.captured_errors
    }, $Logger_get_errors$14.$$arity = 0);
    
    Opal.def(self, '$get_status', $Logger_get_status$15 = function $$get_status() {
      var self = this;

      return $hash2(["annotations", "captured_errors"], {"annotations": self.annotations, "captured_errors": self.captured_errors})
    }, $Logger_get_status$15.$$arity = 0);
    
    Opal.def(self, '$set_status', $Logger_set_status$16 = function $$set_status(status) {
      var self = this;

      
      self.annotations = status['$[]']("annotations");
      return (self.captured_errors = status['$[]']("captured_errors"));
    }, $Logger_set_status$16.$$arity = 1);
    
    Opal.def(self, '$benchmark', $Logger_benchmark$17 = function $$benchmark(msg) {
      var $iter = $Logger_benchmark$17.$$p, block = $iter || nil, self = this, s = nil, result = nil;
      if ($gvars.log == null) $gvars.log = nil;

      if ($iter) $Logger_benchmark$17.$$p = null;
      
      
      if ($iter) $Logger_benchmark$17.$$p = null;;
      s = $$($nesting, 'Time').$now();
      self.benchmarkstack = $rb_plus(self.benchmarkstack, 1);
      result = block.$call();
      $gvars.log.$info("" + (self.benchmarkstack) + "  elapsed " + ($rb_minus($$($nesting, 'Time').$now(), s)) + " sec for " + (msg));
      self.benchmarkstack = $rb_minus(self.benchmarkstack, 1);
      return result;
    }, $Logger_benchmark$17.$$arity = 1);
    
    Opal.def(self, '$console_log', $Logger_console_log$18 = function $$console_log(msg) {
      var self = this;

      return console.log(msg)
    }, $Logger_console_log$18.$$arity = 1);
    
    Opal.def(self, '$loglevel=', $Logger_loglevel$eq$19 = function(level) {
      var $a, self = this;
      if ($gvars.log == null) $gvars.log = nil;

      
      self.loglevel = ($truthy($a = $$($nesting, 'LOGLEVELS')['$[]'](level.$to_sym())) ? $a : $$($nesting, 'LOGLEVELS')['$[]']("debug"));
      return $gvars.log.$message("" + "logging messages up to " + ($$($nesting, 'LOGLEVELS').$invert()['$[]'](self.loglevel)));
    }, $Logger_loglevel$eq$19.$$arity = 1);
    
    Opal.def(self, '$loglevel', $Logger_loglevel$20 = function $$loglevel() {
      var self = this;

      return $$($nesting, 'LOGLEVELS').$invert()['$[]'](self.loglevel)
    }, $Logger_loglevel$20.$$arity = 0);
    
    Opal.def(self, '$loglevel?', $Logger_loglevel$ques$21 = function(type) {
      var $a, self = this;

      return $rb_le(($truthy($a = $$($nesting, 'LOGLEVELS')['$[]'](type)) ? $a : $$($nesting, 'LOGLEVELS')['$[]']("warning")), self.loglevel)
    }, $Logger_loglevel$ques$21.$$arity = 1);
    
    Opal.def(self, '$loglevels', $Logger_loglevels$22 = function $$loglevels() {
      var self = this;

      return $$($nesting, 'LOGLEVELS').$keys()
    }, $Logger_loglevels$22.$$arity = 0);
    self.$private();
    
    Opal.def(self, '$add_annotation', $Logger_add_annotation$23 = function $$add_annotation(msg, start_pos, end_pos, type) {
      var $a, self = this, the_start = nil, the_end = nil;

      
      if ($truthy(start_pos)) {
        
        the_start = start_pos;
        the_end = ($truthy($a = end_pos) ? $a : [the_start.$first(), $rb_plus(the_start.$last(), 1)]);
        self.annotations['$<<']($hash2(["start_pos", "end_pos", "text", "type"], {"start_pos": the_start, "end_pos": the_end, "text": msg, "type": type}));};
      return nil;
    }, $Logger_add_annotation$23.$$arity = 4);
    return (Opal.def(self, '$write', $Logger_write$24 = function $$write(type, msg) {
      var self = this, time = nil;

      if ($truthy(self['$loglevel?'](type))) {
        
        time = $$($nesting, 'Time').$now().$strftime("%H:%M:%S");
        return self.$puts(msg);
      } else {
        return nil
      }
    }, $Logger_write$24.$$arity = 2), nil) && 'write';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NodeLogger');

    var $nesting = [self].concat($parent_nesting), $NodeLogger_write$25;

    self.$$prototype.loglevel = nil;
    return (Opal.def(self, '$write', $NodeLogger_write$25 = function $$write(type, msg) {
      var $a, self = this, current_level = nil, time = nil;

      
      current_level = ($truthy($a = $$($nesting, 'LOGLEVELS')['$[]'](type)) ? $a : $$($nesting, 'LOGLEVELS')['$[]']("warning"));
      if ($truthy($rb_le(current_level, self.loglevel))) {
        
        time = $$($nesting, 'Time').$now().$strftime("%H:%M:%S");
        return self.$puts(msg);
      } else {
        return nil
      };
    }, $NodeLogger_write$25.$$arity = 2), nil) && 'write'
  })($nesting[0], $$($nesting, 'Logger'), $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'ConsoleLogger');

    var $nesting = [self].concat($parent_nesting), $ConsoleLogger_initialize$26, $ConsoleLogger_write$27;

    self.$$prototype.loglevel = self.$$prototype.console = nil;
    
    
    Opal.def(self, '$initialize', $ConsoleLogger_initialize$26 = function $$initialize(element_id) {
      var $iter = $ConsoleLogger_initialize$26.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) $ConsoleLogger_initialize$26.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $ConsoleLogger_initialize$26, false), $zuper, $iter);
      return (self.console = element_id);
    }, $ConsoleLogger_initialize$26.$$arity = 1);
    return (Opal.def(self, '$write', $ConsoleLogger_write$27 = function $$write(type, msg) {
      var $a, self = this, current_level = nil, time = nil;

      
      current_level = ($truthy($a = $$($nesting, 'LOGLEVELS')['$[]'](type)) ? $a : $$($nesting, 'LOGLEVELS')['$[]']("warning"));
      if ($truthy($rb_le(current_level, self.loglevel))) {
        
        time = $$($nesting, 'Time').$now().$strftime("%H:%M:%S");
        self.console.$write_html("" + "<li class='" + (type) + "'><i class=\"" + ($$($nesting, 'LOGICONS')['$[]'](type)) + "\"><span class='time'>" + (time) + "</span><span class='msg'>" + (msg) + "</span></li>");
        return self.$puts(msg);
      } else {
        return nil
      };
    }, $ConsoleLogger_write$27.$$arity = 2), nil) && 'write';
  })($nesting[0], $$($nesting, 'Logger'), $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["harpnotes"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars, $hash = Opal.hash, $range = Opal.range;

  Opal.add_stubs(['$attr_accessor', '$first', '$last', '$to_json', '$[]', '$+', '$class', '$map', '$-', '$instance_variables', '$instance_variable_get', '$is_a?', '$raise', '$pitch', '$beat', '$duration', '$first_in_part', '$attr_reader', '$nil?', '$uniq', '$flatten', '$measure_start', '$proxy_note', '$alias_method', '$each', '$beat=', '$get_proxy_object', '$variant', '$sheet_drawable', '$prev_playable', '$prev_playable=', '$next_playable', '$next_playable=', '$!', '$companion=', '$visible?', '$update_beats', '$<<', '$compact', '$expanded_beat_maps', '$select', '$left', '$right', '$product', '$min_by', '$abs', '$new', '$max', '$keys', '$last_beat', '$private', '$inject', '$index', '$/', '$time', '$floor', '$>', '$start_pos', '$error', '$tuplet', '$[]=', '$index=', '$==', '$reset', '$_check1', '$center', '$size', '$conf_key', '$origin', '$_rect_overlap?', '$empty?', '$warning', '$t', '$count', '$push', '$shapes', '$get', '$clone', '$dotted?', '$dotted', '$gsub', '$ord', '$length', '$strip', '$*', '$to_f', '$font_size=', '$font_style=', '$get_text_dimensions', '$split', '$match', '$include', '$lambda', '$===', '$_instrument_zipino', '$_instrument_saitenspiel', '$_instrument_okon', '$_instrument_akkordzither', '$parse', '$join', '$tap', '$Vector2d', '$conf_key=', '$conf_value=', '$draginfo=', '$line_width=', '$%', '$_layout_prepare_options', '$meta_data', '$layout_debug_grid', '$layout_images', '$_layout_voices', '$_layout_synclines', '$_layout_sheetmarks', '$_layout_sortmark', '$_layout_instrument', '$_layout_cutmarks', '$_layout_legend', '$_layout_zn_annotations', '$_layout_lyrics', '$_layout_sheet_annotations', '$printer_config=', '$pop', '$strict=', '$<=>', '$<', '$_layout_voice_handle_visibility', '$_layout_voice_playables', '$benchmark', '$layout_barnumbers_countnotes', '$_layout_voice_flowlines', '$_layout_voice_subflowlines', '$_layout_voice_chordsymbols', '$_layout_voice_tuplets', '$_layout_voice_slurs', '$_layout_voice_gotos', '$color=', '$_laoyut_voice_repeatmarks', '$_layout_voice_notebound_annotations', '$create_annotation_background_rect', '$decorations', '$each_with_index', '$znid', '$round', '$-@', '$policy', '$to', '$from', '$<=', '$next_pitch', '$prev_pitch', '$to_s', '$to_a', '$_mk_pitches_table', '$start_with?', '$downcase', '$_mkflaps_pitches', '$_mk_pitch_to_xpos', '$call', '$flaps_y', '$to_i', '$position', '$style', '$companion', '$text', '$include?', '$make_repeatsign_annotation', '$debug', '$compute_vertical_cut', '$make_path_from_jumpline', '$tie_end?', '$make_slur_path', '$notes', '$compute_color_by_variant_no', '$message', '$tie_start?', '$slur_starts', '$slur_ends', '$tuplet_start?', '$tuplet_end?', '$make_annotated_bezier_path', '$visible', '$first_in_part?', '$layout_playable', '$proxy', '$make_decorations_per_playable', '$more_conf_keys', '$visible=', '$resolve_placeholder', '$align=', '$harpnote_options', '$squeeze', '$delete', '$strftime', '$now', '$checksum', '$upcase', '$build_synch_points', '$make_sheetmark_path', '$compute_beat_compression', '$values', '$min', '$synched_notes', '$voices', '$layout_voice', '$_get_options_by_voice', '$loglevel?', '$check_annotations', '$get_print_options', '$initialize', '$set_instrument_handlers', '$&', '$size_with_dot', '$reverse', '$compute_note_position', '$!=', '$count_note', '$lyrics', '$shift_eu=', '$measure_start?', '$measure_count', '$align', '$shift_eu?', '$compute_beat_compression_1', '$compute_beat_compression_2', '$compute_beat_compression_3', '$compute_beat_compression_10', '$compute_beat_compression_0', '$group_by', '$sort', '$beat_maps', '$duration_to_id', '$get_minc_factor', '$notes_on_beat', '$>=', '$next_first_in_part', '$sort_by', '$layout_note', '$layout_accord', '$layout_pause', '$convert_pitch_to_xpos', '$compute_ellipse_properties_from_note', '$layout_note_shift', '$sheet_drawable=', '$layout_note_flags', '$times', '$odd?', '$check_duration', '$shift', '$unshift', '$x', '$y', '$normalize', '$to_sym', '$start_pos_to_s', '$end_pos', '$rotate', '$angle', '$perpendicular', '$scan']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Harpnotes');

    var $nesting = [self].concat($parent_nesting);

    
    (function($base, $parent_nesting) {
      var self = $module($base, 'Music');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MusicEntity');

        var $nesting = [self].concat($parent_nesting), $MusicEntity_initialize$1, $MusicEntity_visible$ques$2, $MusicEntity_start_pos_to_s$3, $MusicEntity_to_json$4;

        self.$$prototype.visible = self.$$prototype.start_pos = nil;
        
        self.$attr_accessor("beat", "conf_key", "count_note", "decorations", "end_pos", "next_pitch", "next_first_in_part", "next_playable", "prev_pitch", "prev_playable", "start_pos", "time", "endtime", "visible", "variant", "znid", "origin", "sheet_drawable");
        
        Opal.def(self, '$initialize', $MusicEntity_initialize$1 = function $$initialize() {
          var self = this;

          
          self.visible = true;
          return (self.origin = [nil, (self.decorations = [])]);
        }, $MusicEntity_initialize$1.$$arity = 0);
        
        Opal.def(self, '$visible?', $MusicEntity_visible$ques$2 = function() {
          var self = this;

          return self.visible
        }, $MusicEntity_visible$ques$2.$$arity = 0);
        
        Opal.def(self, '$start_pos_to_s', $MusicEntity_start_pos_to_s$3 = function $$start_pos_to_s() {
          var self = this;

          return "" + "[" + (self.start_pos.$first()) + ":" + (self.start_pos.$last()) + "]"
        }, $MusicEntity_start_pos_to_s$3.$$arity = 0);
        return (Opal.def(self, '$to_json', $MusicEntity_to_json$4 = function $$to_json() {
          var $$5, self = this;

          return $$($nesting, 'Hash')['$[]']($rb_plus([["class", self.$class()]], $send($rb_minus(self.$instance_variables(), ["@constructor", "@toString"]), 'map', [], ($$5 = function(v){var self = $$5.$$s || this;

          
            
            if (v == null) {
              v = nil;
            };
            return [v, self.$instance_variable_get(v)];}, $$5.$$s = self, $$5.$$arity = 1, $$5)))).$to_json()
        }, $MusicEntity_to_json$4.$$arity = 0), nil) && 'to_json';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NonPlayable');

        var $nesting = [self].concat($parent_nesting), $NonPlayable_companion$eq$6, $NonPlayable_pitch$7, $NonPlayable_beat$8, $NonPlayable_duration$9;

        self.$$prototype.companion = nil;
        
        self.$attr_accessor("companion");
        
        Opal.def(self, '$companion=', $NonPlayable_companion$eq$6 = function(companion) {
          var self = this;

          
          if ($truthy(companion['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable')))) {
          } else {
            self.$raise("Companion must be playable")
          };
          return (self.companion = companion);
        }, $NonPlayable_companion$eq$6.$$arity = 1);
        
        Opal.def(self, '$pitch', $NonPlayable_pitch$7 = function $$pitch() {
          var self = this;

          try {
            return self.companion.$pitch()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, $NonPlayable_pitch$7.$$arity = 0);
        
        Opal.def(self, '$beat', $NonPlayable_beat$8 = function $$beat() {
          var self = this;

          try {
            return self.companion.$beat()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, $NonPlayable_beat$8.$$arity = 0);
        return (Opal.def(self, '$duration', $NonPlayable_duration$9 = function $$duration() {
          var self = this;

          try {
            return self.companion.$duration()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
        }, $NonPlayable_duration$9.$$arity = 0), nil) && 'duration';
      })($nesting[0], $$($nesting, 'MusicEntity'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Playable');

        var $nesting = [self].concat($parent_nesting), $Playable_initialize$10, $Playable_first_in_part$ques$11, $Playable_tie_end$ques$12, $Playable_tie_start$ques$13, $Playable_tuplet_start$ques$14, $Playable_tuplet_end$ques$15, $Playable_measure_start$ques$16, $Playable_proxy_note$17, $Playable_left$18, $Playable_right$19;

        self.$$prototype.tie_end = self.$$prototype.tie_start = self.$$prototype.tuplet_start = self.$$prototype.tuplet_end = self.$$prototype.measure_start = nil;
        
        self.$attr_accessor("first_in_part", "jump_starts", "jump_ends", "slur_starts", "slur_ends", "tie_start", "tie_end", "duration", "tuplet", "tuplet_start", "tuplet_end", "shift", "count_note", "chord_symbol", "lyrics", "measure_count", "measure_start");
        
        Opal.def(self, '$initialize', $Playable_initialize$10 = function $$initialize() {
          var $iter = $Playable_initialize$10.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Playable_initialize$10.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Playable_initialize$10, false), $zuper, $iter);
          self.slur_starts = [];
          self.slur_ends = [];
          self.tie_start = false;
          self.tie_end = false;
          self.tuplet = 1;
          self.tuplet_start = false;
          self.tuplet_end = false;
          return (self.count_note = nil);
        }, $Playable_initialize$10.$$arity = 0);
        
        Opal.def(self, '$first_in_part?', $Playable_first_in_part$ques$11 = function() {
          var self = this;

          return self.$first_in_part()
        }, $Playable_first_in_part$ques$11.$$arity = 0);
        
        Opal.def(self, '$tie_end?', $Playable_tie_end$ques$12 = function() {
          var self = this;

          return self.tie_end
        }, $Playable_tie_end$ques$12.$$arity = 0);
        
        Opal.def(self, '$tie_start?', $Playable_tie_start$ques$13 = function() {
          var self = this;

          return self.tie_start
        }, $Playable_tie_start$ques$13.$$arity = 0);
        
        Opal.def(self, '$tuplet_start?', $Playable_tuplet_start$ques$14 = function() {
          var self = this;

          return self.tuplet_start
        }, $Playable_tuplet_start$ques$14.$$arity = 0);
        
        Opal.def(self, '$tuplet_end?', $Playable_tuplet_end$ques$15 = function() {
          var self = this;

          return self.tuplet_end
        }, $Playable_tuplet_end$ques$15.$$arity = 0);
        
        Opal.def(self, '$measure_start?', $Playable_measure_start$ques$16 = function() {
          var self = this;

          return self.measure_start
        }, $Playable_measure_start$ques$16.$$arity = 0);
        
        Opal.def(self, '$proxy_note', $Playable_proxy_note$17 = function $$proxy_note() {
          var self = this;

          return self
        }, $Playable_proxy_note$17.$$arity = 0);
        
        Opal.def(self, '$left', $Playable_left$18 = function $$left() {
          var self = this;

          return self
        }, $Playable_left$18.$$arity = 0);
        return (Opal.def(self, '$right', $Playable_right$19 = function $$right() {
          var self = this;

          return self
        }, $Playable_right$19.$$arity = 0), nil) && 'right';
      })($nesting[0], $$($nesting, 'MusicEntity'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Note');

        var $nesting = [self].concat($parent_nesting), $Note_initialize$20;

        
        self.$attr_reader("pitch", "duration");
        return (Opal.def(self, '$initialize', $Note_initialize$20 = function $$initialize(pitch, duration) {
          var $iter = $Note_initialize$20.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Note_initialize$20.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Note_initialize$20, false), [], null);
          if ($truthy(pitch['$nil?']())) {
            self.$raise("trying to create a note with undefined pitch")};
          self.pitch = pitch;
          self.next_pitch = pitch;
          self.next_playable = self;
          self.prev_pitch = pitch;
          self.prev_playable = self;
          return (self.duration = duration);
        }, $Note_initialize$20.$$arity = 2), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Playable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'SynchPoint');

        var $nesting = [self].concat($parent_nesting), $SynchPoint_initialize$21, $SynchPoint_measure_start$22, $SynchPoint_duration$23, $SynchPoint_beat$eq$24, $SynchPoint_pitch$26, $SynchPoint_proxy_note$27, $SynchPoint_variant$28, $SynchPoint_sheet_drawable$29, $SynchPoint_prev_playable$30, $SynchPoint_prev_playable$eq$31, $SynchPoint_next_playable$32, $SynchPoint_next_playable$eq$33, $SynchPoint_get_proxy_object$34, $SynchPoint_left$35, $SynchPoint_right$36;

        self.$$prototype.notes = nil;
        
        self.$attr_reader("notes", "synched_notes");
        
        Opal.def(self, '$initialize', $SynchPoint_initialize$21 = function $$initialize(notes, synched_notes) {
          var $iter = $SynchPoint_initialize$21.$$p, $yield = $iter || nil, self = this;

          if ($iter) $SynchPoint_initialize$21.$$p = null;
          
          
          if (synched_notes == null) {
            synched_notes = [];
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $SynchPoint_initialize$21, false), [], null);
          if ($truthy(notes['$is_a?']($$($nesting, 'Array')))) {
          } else {
            self.$raise("Notes must be an array")
          };
          self.notes = notes;
          return (self.synched_notes = [notes, synched_notes].$flatten().$uniq());
        }, $SynchPoint_initialize$21.$$arity = -2);
        
        Opal.def(self, '$measure_start', $SynchPoint_measure_start$22 = function $$measure_start() {
          var self = this;

          return self.$proxy_note().$measure_start()
        }, $SynchPoint_measure_start$22.$$arity = 0);
        self.$alias_method("measure_start?", "measure_start");
        
        Opal.def(self, '$duration', $SynchPoint_duration$23 = function $$duration() {
          var self = this;

          return self.$proxy_note().$duration()
        }, $SynchPoint_duration$23.$$arity = 0);
        
        Opal.def(self, '$beat=', $SynchPoint_beat$eq$24 = function(value) {
          var $$25, self = this;

          
          self.beat = value;
          return $send(self.notes, 'each', [], ($$25 = function(n){var self = $$25.$$s || this, $writer = nil;

          
            
            if (n == null) {
              n = nil;
            };
            $writer = [value];
            $send(n, 'beat=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$25.$$s = self, $$25.$$arity = 1, $$25));
        }, $SynchPoint_beat$eq$24.$$arity = 1);
        
        Opal.def(self, '$pitch', $SynchPoint_pitch$26 = function $$pitch() {
          var self = this;

          return self.$proxy_note().$pitch()
        }, $SynchPoint_pitch$26.$$arity = 0);
        
        Opal.def(self, '$proxy_note', $SynchPoint_proxy_note$27 = function $$proxy_note() {
          var self = this;

          return self.$get_proxy_object(self.notes)
        }, $SynchPoint_proxy_note$27.$$arity = 0);
        
        Opal.def(self, '$variant', $SynchPoint_variant$28 = function $$variant() {
          var self = this;

          return self.$proxy_note().$variant()
        }, $SynchPoint_variant$28.$$arity = 0);
        
        Opal.def(self, '$sheet_drawable', $SynchPoint_sheet_drawable$29 = function $$sheet_drawable() {
          var self = this;

          return self.$proxy_note().$sheet_drawable()
        }, $SynchPoint_sheet_drawable$29.$$arity = 0);
        
        Opal.def(self, '$prev_playable', $SynchPoint_prev_playable$30 = function $$prev_playable() {
          var self = this;

          return self.$proxy_note().$prev_playable()
        }, $SynchPoint_prev_playable$30.$$arity = 0);
        
        Opal.def(self, '$prev_playable=', $SynchPoint_prev_playable$eq$31 = function(playable) {
          var self = this, $writer = nil;

          
          $writer = [playable];
          $send(self.$proxy_note(), 'prev_playable=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $SynchPoint_prev_playable$eq$31.$$arity = 1);
        
        Opal.def(self, '$next_playable', $SynchPoint_next_playable$32 = function $$next_playable() {
          var self = this;

          return self.$proxy_note().$next_playable()
        }, $SynchPoint_next_playable$32.$$arity = 0);
        
        Opal.def(self, '$next_playable=', $SynchPoint_next_playable$eq$33 = function(playable) {
          var self = this, $writer = nil;

          
          $writer = [playable];
          $send(self.$proxy_note(), 'next_playable=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }, $SynchPoint_next_playable$eq$33.$$arity = 1);
        
        Opal.def(self, '$get_proxy_object', $SynchPoint_get_proxy_object$34 = function $$get_proxy_object(objects) {
          var self = this;

          return objects.$last()
        }, $SynchPoint_get_proxy_object$34.$$arity = 1);
        
        Opal.def(self, '$left', $SynchPoint_left$35 = function $$left() {
          var self = this;

          return self.notes.$first()
        }, $SynchPoint_left$35.$$arity = 0);
        return (Opal.def(self, '$right', $SynchPoint_right$36 = function $$right() {
          var self = this;

          return self.notes.$last()
        }, $SynchPoint_right$36.$$arity = 0), nil) && 'right';
      })($nesting[0], $$($nesting, 'Playable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Pause');

        var $nesting = [self].concat($parent_nesting), $Pause_initialize$37, $Pause_visible$eq$38, $Pause_visible$ques$39;

        self.$$prototype.visible = self.$$prototype.invisible = nil;
        
        self.$attr_accessor("duration", "pitch");
        self.$attr_accessor("invisible");
        
        Opal.def(self, '$initialize', $Pause_initialize$37 = function $$initialize(pitch, duration) {
          var $iter = $Pause_initialize$37.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Pause_initialize$37.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Pause_initialize$37, false), [], null);
          if ($truthy(pitch['$nil?']())) {
            self.$raise("trying to create a rest with undefined pitch")};
          self.pitch = pitch;
          self.duration = duration;
          self.next_playable = self;
          self.prev_pitch = pitch;
          return (self.prev_playable = self);
        }, $Pause_initialize$37.$$arity = 2);
        
        Opal.def(self, '$visible=', $Pause_visible$eq$38 = function(visible) {
          var self = this;

          return (self.visible = visible)
        }, $Pause_visible$eq$38.$$arity = 1);
        return (Opal.def(self, '$visible?', $Pause_visible$ques$39 = function() {
          var $a, self = this;

          return ($truthy($a = self.visible) ? self.invisible['$!']() : $a)
        }, $Pause_visible$ques$39.$$arity = 0), nil) && 'visible?';
      })($nesting[0], $$($nesting, 'Playable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'MeasureStart');

        var $nesting = [self].concat($parent_nesting), $MeasureStart_initialize$40;

        return (Opal.def(self, '$initialize', $MeasureStart_initialize$40 = function $$initialize(companion) {
          var $iter = $MeasureStart_initialize$40.$$p, $yield = $iter || nil, self = this, $writer = nil;

          if ($iter) $MeasureStart_initialize$40.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $MeasureStart_initialize$40, false), [], null);
          
          $writer = [companion];
          $send(self, 'companion=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return (self.visible = companion['$visible?']());
        }, $MeasureStart_initialize$40.$$arity = 1), nil) && 'initialize'
      })($nesting[0], $$($nesting, 'NonPlayable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NewPart');

        var $nesting = [self].concat($parent_nesting), $NewPart_initialize$41;

        
        self.$attr_reader("name");
        return (Opal.def(self, '$initialize', $NewPart_initialize$41 = function $$initialize(title, conf_key) {
          var $iter = $NewPart_initialize$41.$$p, $yield = $iter || nil, self = this;

          if ($iter) $NewPart_initialize$41.$$p = null;
          
          
          if (conf_key == null) {
            conf_key = nil;
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $NewPart_initialize$41, false), [], null);
          self.conf_key = conf_key;
          return (self.name = title);
        }, $NewPart_initialize$41.$$arity = -2), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'NonPlayable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'NoteBoundAnnotation');

        var $nesting = [self].concat($parent_nesting), $NoteBoundAnnotation_initialize$42, $NoteBoundAnnotation_style$43, $NoteBoundAnnotation_text$44, $NoteBoundAnnotation_position$45, $NoteBoundAnnotation_policy$46;

        self.$$prototype.annotations = nil;
        
        
        Opal.def(self, '$initialize', $NoteBoundAnnotation_initialize$42 = function $$initialize(companion, annotation, conf_key) {
          var $iter = $NoteBoundAnnotation_initialize$42.$$p, $yield = $iter || nil, self = this, $writer = nil;

          if ($iter) $NoteBoundAnnotation_initialize$42.$$p = null;
          
          
          if (conf_key == null) {
            conf_key = nil;
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $NoteBoundAnnotation_initialize$42, false), [], null);
          
          $writer = [companion];
          $send(self, 'companion=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.conf_key = conf_key;
          return (self.annotations = annotation);
        }, $NoteBoundAnnotation_initialize$42.$$arity = -3);
        
        Opal.def(self, '$style', $NoteBoundAnnotation_style$43 = function $$style() {
          var $a, self = this;

          return ($truthy($a = self.annotations['$[]']("style")) ? $a : "regular")
        }, $NoteBoundAnnotation_style$43.$$arity = 0);
        
        Opal.def(self, '$text', $NoteBoundAnnotation_text$44 = function $$text() {
          var self = this;

          return self.annotations['$[]']("text")
        }, $NoteBoundAnnotation_text$44.$$arity = 0);
        
        Opal.def(self, '$position', $NoteBoundAnnotation_position$45 = function $$position() {
          var self = this;

          return self.annotations['$[]']("pos")
        }, $NoteBoundAnnotation_position$45.$$arity = 0);
        return (Opal.def(self, '$policy', $NoteBoundAnnotation_policy$46 = function $$policy() {
          var self = this;

          return self.annotations['$[]']("policy")
        }, $NoteBoundAnnotation_policy$46.$$arity = 0), nil) && 'policy';
      })($nesting[0], $$($nesting, 'NonPlayable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Chordsymbol');

        var $nesting = [self].concat($parent_nesting), $Chordsymbol_initialize$47, $Chordsymbol_style$48, $Chordsymbol_text$49, $Chordsymbol_position$50, $Chordsymbol_policy$51;

        self.$$prototype.annotations = nil;
        
        
        Opal.def(self, '$initialize', $Chordsymbol_initialize$47 = function $$initialize(companion, annotation, conf_key) {
          var $iter = $Chordsymbol_initialize$47.$$p, $yield = $iter || nil, self = this, $writer = nil;

          if ($iter) $Chordsymbol_initialize$47.$$p = null;
          
          
          if (conf_key == null) {
            conf_key = nil;
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Chordsymbol_initialize$47, false), [], null);
          
          $writer = [companion];
          $send(self, 'companion=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.conf_key = conf_key;
          return (self.annotations = annotation);
        }, $Chordsymbol_initialize$47.$$arity = -3);
        
        Opal.def(self, '$style', $Chordsymbol_style$48 = function $$style() {
          var $a, self = this;

          return ($truthy($a = self.annotations['$[]']("style")) ? $a : "regular")
        }, $Chordsymbol_style$48.$$arity = 0);
        
        Opal.def(self, '$text', $Chordsymbol_text$49 = function $$text() {
          var self = this;

          return self.annotations['$[]']("text")
        }, $Chordsymbol_text$49.$$arity = 0);
        
        Opal.def(self, '$position', $Chordsymbol_position$50 = function $$position() {
          var self = this;

          return self.annotations['$[]']("pos")
        }, $Chordsymbol_position$50.$$arity = 0);
        return (Opal.def(self, '$policy', $Chordsymbol_policy$51 = function $$policy() {
          var self = this;

          return self.annotations['$[]']("policy")
        }, $Chordsymbol_policy$51.$$arity = 0), nil) && 'policy';
      })($nesting[0], $$($nesting, 'NonPlayable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Goto');

        var $nesting = [self].concat($parent_nesting), $Goto_initialize$52;

        
        self.$attr_reader("from", "to", "policy");
        return (Opal.def(self, '$initialize', $Goto_initialize$52 = function $$initialize(from, to, policy) {
          var $iter = $Goto_initialize$52.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Goto_initialize$52.$$p = null;
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Goto_initialize$52, false), [], null);
          if ($truthy(from['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable')))) {
          } else {
            self.$raise("" + "End point of Jump (" + (from.$class()) + ") must be a Playable")
          };
          if ($truthy(to['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable')))) {
          } else {
            self.$raise("" + "Start point of Jump (" + (to.$class()) + ") must be a Playable")
          };
          self.from = from;
          self.to = to;
          self.policy = policy;
          return (self.conf_key = policy['$[]']("conf_key"));
        }, $Goto_initialize$52.$$arity = 3), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'MusicEntity'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'BeatMap');

        var $nesting = [self].concat($parent_nesting), $BeatMap_initialize$53;

        
        self.$attr_accessor("index");
        return (Opal.def(self, '$initialize', $BeatMap_initialize$53 = function $$initialize(index) {
          var self = this;

          return (self.index = index)
        }, $BeatMap_initialize$53.$$arity = 1), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Hash'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Song');

        var $nesting = [self].concat($parent_nesting), $Song_to_json$54, $Song_initialize$55, $Song_$lt$lt$56, $Song_build_synch_points$57, $Song_last_beat$61, $Song_expanded_beat_maps$63, $Song_update_beats$66;

        self.$$prototype.voices = self.$$prototype.beat_maps = self.$$prototype.meta_data = self.$$prototype.harpnote_options = nil;
        
        self.$attr_reader("voices", "beat_maps");
        self.$attr_accessor("meta_data", "harpnote_options", "checksum");
        
        Opal.def(self, '$to_json', $Song_to_json$54 = function $$to_json() {
          var self = this;

          return $hash2(["voices", "beat_maps", "meta_data", "harpnote_options"], {"voices": self.voices, "beat_maps": self.beat_maps, "meta_data": self.meta_data, "harpnote_options": self.harpnote_options}).$to_json()
        }, $Song_to_json$54.$$arity = 0);
        
        Opal.def(self, '$initialize', $Song_initialize$55 = function $$initialize(voices, note_length_in_beats, metadata) {
          var self = this;

          
          
          if (voices == null) {
            voices = [];
          };
          
          if (note_length_in_beats == null) {
            note_length_in_beats = 8;
          };
          
          if (metadata == null) {
            metadata = $hash2([], {});
          };
          self.voices = voices;
          self.note_length_in_beats = note_length_in_beats;
          self.meta_data = metadata;
          self.views = [];
          return self.$update_beats();
        }, $Song_initialize$55.$$arity = -1);
        
        Opal.def(self, '$<<', $Song_$lt$lt$56 = function(voice) {
          var self = this;

          
          self.voices['$<<'](voice);
          return self.$update_beats();
        }, $Song_$lt$lt$56.$$arity = 1);
        
        Opal.def(self, '$build_synch_points', $Song_build_synch_points$57 = function $$build_synch_points(selector) {
          var $$58, self = this, syncpoints = nil;

          
          
          if (selector == null) {
            selector = nil;
          };
          syncpoints = $send(self.$expanded_beat_maps(), 'map', [], ($$58 = function(beatmap_entry){var self = $$58.$$s || this, $$59, $a, $$60, playables = nil, pfirst = nil, plast = nil, first_left = nil, first_right = nil, last_left = nil, last_right = nil, candidates = nil, synchpoint = nil, result = nil;

          
            
            if (beatmap_entry == null) {
              beatmap_entry = nil;
            };
            playables = $send([beatmap_entry['$[]'](selector.$first()), beatmap_entry['$[]'](selector.$last())].$compact(), 'select', [], ($$59 = function(i){var self = $$59.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return i['$visible?']();}, $$59.$$s = self, $$59.$$arity = 1, $$59));
            pfirst = playables['$[]'](0);
            plast = playables['$[]'](1);
            if ($truthy(($truthy($a = pfirst) ? plast : $a))) {
              
              first_left = pfirst.$left();
              first_right = pfirst.$right();
              last_left = plast.$left();
              last_right = plast.$right();
              candidates = [first_left, first_right].$product([last_left, last_right]);};
            if ($truthy(candidates)) {
              
              synchpoint = $send(candidates, 'min_by', [], ($$60 = function(i){var self = $$60.$$s || this;

              
                
                if (i == null) {
                  i = nil;
                };
                return $rb_minus(i.$last().$pitch(), i.$first().$pitch()).$abs();}, $$60.$$s = self, $$60.$$arity = 1, $$60));
              result = $$($nesting, 'SynchPoint').$new(synchpoint, candidates);};
            return result;}, $$58.$$s = self, $$58.$$arity = 1, $$58)).$flatten().$compact();
          return syncpoints;
        }, $Song_build_synch_points$57.$$arity = -1);
        
        Opal.def(self, '$last_beat', $Song_last_beat$61 = function $$last_beat() {
          var $$62, self = this, max_beat = nil;

          return (max_beat = $send(self.beat_maps, 'map', [], ($$62 = function(map){var self = $$62.$$s || this, $a;

          
            
            if (map == null) {
              map = nil;
            };
            return ($truthy($a = map.$keys().$max()) ? $a : 0);}, $$62.$$s = self, $$62.$$arity = 1, $$62)).$max())
        }, $Song_last_beat$61.$$arity = 0);
        
        Opal.def(self, '$expanded_beat_maps', $Song_expanded_beat_maps$63 = function $$expanded_beat_maps() {
          var $$64, self = this;

          return $send(Opal.Range.$new(0, self.$last_beat(), false), 'map', [], ($$64 = function(beat){var self = $$64.$$s || this, $$65;
            if (self.beat_maps == null) self.beat_maps = nil;

          
            
            if (beat == null) {
              beat = nil;
            };
            return $send(self.beat_maps, 'map', [], ($$65 = function(map){var self = $$65.$$s || this;

            
              
              if (map == null) {
                map = nil;
              };
              return map['$[]'](beat);}, $$65.$$s = self, $$65.$$arity = 1, $$65));}, $$64.$$s = self, $$64.$$arity = 1, $$64))
        }, $Song_expanded_beat_maps$63.$$arity = 0);
        self.$private();
        return (Opal.def(self, '$update_beats', $Song_update_beats$66 = function $$update_beats() {
          var $$67, self = this;

          
          self.beat_maps = $send(self.voices, 'map', [], ($$67 = function(voice){var self = $$67.$$s || this, $$68, $$69, current_beat = nil, voice_map = nil;

          
            
            if (voice == null) {
              voice = nil;
            };
            current_beat = 0;
            voice_map = $send($send(voice, 'select', [], ($$68 = function(e){var self = $$68.$$s || this;

            
              
              if (e == null) {
                e = nil;
              };
              return e['$is_a?']($$($nesting, 'Playable'));}, $$68.$$s = self, $$68.$$arity = 1, $$68)), 'inject', [$$($nesting, 'BeatMap').$new(voice.$index())], ($$69 = function(map, playable){var self = $$69.$$s || this, current_beat_floor = nil, beat_error = nil, pos = nil, $writer = nil;
              if ($gvars.log == null) $gvars.log = nil;

            
              
              if (map == null) {
                map = nil;
              };
              
              if (playable == null) {
                playable = nil;
              };
              current_beat = $rb_divide(playable.$time(), 8);
              current_beat_floor = current_beat.$floor(0);
              beat_error = $rb_minus(current_beat, current_beat_floor);
              if ($truthy($rb_gt(beat_error, 0))) {
                
                pos = playable.$start_pos();
                $gvars.log.$error("" + "unsupported tuplet " + (playable.$tuplet()) + " " + (beat_error), pos);
                current_beat = current_beat_floor;};
              
              $writer = [current_beat, playable];
              $send(map, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [current_beat];
              $send(playable, 'beat=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [voice.$index()];
              $send(map, 'index=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return map;}, $$69.$$s = self, $$69.$$arity = 2, $$69));
            return voice_map;}, $$67.$$s = self, $$67.$$arity = 1, $$67));
          return nil;
        }, $Song_update_beats$66.$$arity = 0), nil) && 'update_beats';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Voice');

        var $nesting = [self].concat($parent_nesting), $Voice_initialize$70, $Voice_show_voice$ques$71, $Voice_show_flowline$ques$72, $Voice_show_jumpline$ques$73;

        self.$$prototype.show_voice = self.$$prototype.show_flowline = self.$$prototype.show_jumpline = nil;
        
        self.$attr_accessor("index", "name", "show_voice", "show_flowline", "show_jumpline");
        
        Opal.def(self, '$initialize', $Voice_initialize$70 = function $$initialize() {
          var $iter = $Voice_initialize$70.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Voice_initialize$70.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          self.show_voice = true;
          self.show_flowline = true;
          self.show_jumpline = true;
          return $send(self, Opal.find_super_dispatcher(self, 'initialize', $Voice_initialize$70, false), $zuper, $iter);
        }, $Voice_initialize$70.$$arity = 0);
        
        Opal.def(self, '$show_voice?', $Voice_show_voice$ques$71 = function() {
          var self = this;

          return self.show_voice['$=='](true)
        }, $Voice_show_voice$ques$71.$$arity = 0);
        
        Opal.def(self, '$show_flowline?', $Voice_show_flowline$ques$72 = function() {
          var self = this;

          return self.show_flowline['$=='](true)
        }, $Voice_show_flowline$ques$72.$$arity = 0);
        return (Opal.def(self, '$show_jumpline?', $Voice_show_jumpline$ques$73 = function() {
          var self = this;

          return self.show_jumpline['$=='](true)
        }, $Voice_show_jumpline$ques$73.$$arity = 0), nil) && 'show_jumpline?';
      })($nesting[0], $$($nesting, 'Array'), $nesting);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Drawing');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CollisionDetector');

        var $nesting = [self].concat($parent_nesting), $CollisionDetector_initialize$74, $CollisionDetector_check_annotations$75, $CollisionDetector_reset$78, $CollisionDetector__check1$79, $CollisionDetector__rect_overlap$ques$81;

        self.$$prototype.coll_stack = nil;
        
        
        Opal.def(self, '$initialize', $CollisionDetector_initialize$74 = function $$initialize() {
          var self = this;

          return self.$reset()
        }, $CollisionDetector_initialize$74.$$arity = 0);
        
        Opal.def(self, '$check_annotations', $CollisionDetector_check_annotations$75 = function $$check_annotations(drawables) {
          var $$76, $$77, self = this;

          return $send($send(drawables, 'select', [], ($$76 = function(i){var self = $$76.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return i['$is_a?']($$($nesting, 'Annotation'));}, $$76.$$s = self, $$76.$$arity = 1, $$76)), 'each', [], ($$77 = function(drawable){var self = $$77.$$s || this;

          
            
            if (drawable == null) {
              drawable = nil;
            };
            return self.$_check1(drawable.$center(), drawable.$size(), drawable.$conf_key(), drawable.$origin());}, $$77.$$s = self, $$77.$$arity = 1, $$77))
        }, $CollisionDetector_check_annotations$75.$$arity = 1);
        
        Opal.def(self, '$reset', $CollisionDetector_reset$78 = function $$reset() {
          var self = this;

          return (self.coll_stack = [])
        }, $CollisionDetector_reset$78.$$arity = 0);
        
        Opal.def(self, '$_check1', $CollisionDetector__check1$79 = function $$_check1(point, size, confkey, playable) {
          var $a, $b, $$80, self = this, x = nil, y = nil, xsize = nil, ysize = nil, rect = nil, collision = nil, startpos = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          $b = point, $a = Opal.to_ary($b), (x = ($a[0] == null ? nil : $a[0])), (y = ($a[1] == null ? nil : $a[1])), $b;
          $b = size, $a = Opal.to_ary($b), (xsize = ($a[0] == null ? nil : $a[0])), (ysize = ($a[1] == null ? nil : $a[1])), $b;
          rect = [x, y, $rb_plus(x, xsize), $rb_plus(y, ysize)];
          collision = $send(self.coll_stack, 'select', [], ($$80 = function(i){var self = $$80.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return self['$_rect_overlap?'](i, rect);}, $$80.$$s = self, $$80.$$arity = 1, $$80));
          startpos = [0, 0];
          if ($truthy(collision['$empty?']())) {
          } else {
            
            
            try {
              startpos = playable['$[]']("start_pos")
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  
                  $gvars.log.$error("" + "BUG: Annotation without origin " + ("./harpnotes.rb".$force_encoding("US-ASCII")) + " " + (778));
                  [0, 0];
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            $gvars.log.$warning($rb_plus($$($nesting, 'I18n').$t("annotations too close ["), "" + (collision.$count()) + "] " + (confkey)), startpos);
          };
          self.coll_stack.$push(rect);
          return point;
        }, $CollisionDetector__check1$79.$$arity = 4);
        return (Opal.def(self, '$_rect_overlap?', $CollisionDetector__rect_overlap$ques$81 = function(rect1, rect2) {
          var $a, $b, $c, self = this, left1 = nil, top1 = nil, right1 = nil, bottom1 = nil, left2 = nil, top2 = nil, right2 = nil, bottom2 = nil;

          
          $b = rect1, $a = Opal.to_ary($b), (left1 = ($a[0] == null ? nil : $a[0])), (top1 = ($a[1] == null ? nil : $a[1])), (right1 = ($a[2] == null ? nil : $a[2])), (bottom1 = ($a[3] == null ? nil : $a[3])), $b;
          $b = rect2, $a = Opal.to_ary($b), (left2 = ($a[0] == null ? nil : $a[0])), (top2 = ($a[1] == null ? nil : $a[1])), (right2 = ($a[2] == null ? nil : $a[2])), (bottom2 = ($a[3] == null ? nil : $a[3])), $b;
          return ($truthy($a = ($truthy($b = ($truthy($c = $rb_gt(right1, left2)) ? $rb_gt(right2, left1) : $c)) ? $rb_gt(bottom1, top2) : $b)) ? $rb_gt(bottom2, top1) : $a);
        }, $CollisionDetector__rect_overlap$ques$81.$$arity = 2), nil) && '_rect_overlap?';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Sheet');

        var $nesting = [self].concat($parent_nesting), $Sheet_initialize$82;

        
        self.$attr_reader("children", "active_voices");
        self.$attr_accessor("printer_config");
        return (Opal.def(self, '$initialize', $Sheet_initialize$82 = function $$initialize(children, active_voices) {
          var self = this;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          self.children = children;
          self.active_voices = active_voices;
          return (self.printer_config = $gvars.conf['$[]']("printer"));
        }, $Sheet_initialize$82.$$arity = 2), nil) && 'initialize';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'CompoundDrawable');

        var $nesting = [self].concat($parent_nesting), $CompoundDrawable_initialize$83, $CompoundDrawable_push$84, $CompoundDrawable_merge$85;

        self.$$prototype.shapes = nil;
        
        self.$attr_accessor("shapes", "proxy");
        
        Opal.def(self, '$initialize', $CompoundDrawable_initialize$83 = function $$initialize(shapes, proxy) {
          var self = this;

          
          self.shapes = shapes;
          return (self.proxy = proxy);
        }, $CompoundDrawable_initialize$83.$$arity = 2);
        
        Opal.def(self, '$push', $CompoundDrawable_push$84 = function $$push(drawable) {
          var self = this;

          return self.shapes['$<<'](drawable)
        }, $CompoundDrawable_push$84.$$arity = 1);
        return (Opal.def(self, '$merge', $CompoundDrawable_merge$85 = function $$merge(compound_drawable) {
          var self = this;

          return (self.shapes = $rb_plus(self.shapes, compound_drawable.$shapes()))
        }, $CompoundDrawable_merge$85.$$arity = 1), nil) && 'merge';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Drawable');

        var $nesting = [self].concat($parent_nesting), $Drawable_initialize$86, $Drawable_center$87, $Drawable_visible$ques$88, $Drawable_visible$eq$89, $Drawable_line_width$eq$90, $Drawable_line_width$91, $Drawable_color$eq$92, $Drawable_color$93, $Drawable_size_with_dot$94;

        self.$$prototype.visible = self.$$prototype.line_width = self.$$prototype.color = self.$$prototype.size = nil;
        
        self.$attr_accessor("conf_key", "conf_value", "draginfo", "color", "size", "more_conf_keys");
        
        Opal.def(self, '$initialize', $Drawable_initialize$86 = function $$initialize() {
          var self = this;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          self.visible = true;
          self.line_width = $gvars.conf.$get("layout.LINE_THIN");
          self.conf_key = nil;
          self.more_conf_keys = [];
          self.color = $gvars.conf.$get("layout.color.color_default");
          return (self.size = [1, 1]);
        }, $Drawable_initialize$86.$$arity = 0);
        
        Opal.def(self, '$center', $Drawable_center$87 = function $$center() {
          var self = this;

          return self.$raise("" + "center not implemented for " + (self.$class()))
        }, $Drawable_center$87.$$arity = 0);
        
        Opal.def(self, '$visible?', $Drawable_visible$ques$88 = function() {
          var self = this;

          return self.visible
        }, $Drawable_visible$ques$88.$$arity = 0);
        
        Opal.def(self, '$visible=', $Drawable_visible$eq$89 = function(v) {
          var self = this;

          return (self.visible = v)
        }, $Drawable_visible$eq$89.$$arity = 1);
        
        Opal.def(self, '$line_width=', $Drawable_line_width$eq$90 = function(v) {
          var self = this;

          return (self.line_width = v)
        }, $Drawable_line_width$eq$90.$$arity = 1);
        
        Opal.def(self, '$line_width', $Drawable_line_width$91 = function $$line_width() {
          var self = this;

          return self.line_width
        }, $Drawable_line_width$91.$$arity = 0);
        
        Opal.def(self, '$color=', $Drawable_color$eq$92 = function(v) {
          var self = this;

          return (self.color = v)
        }, $Drawable_color$eq$92.$$arity = 1);
        
        Opal.def(self, '$color', $Drawable_color$93 = function $$color() {
          var self = this;

          return self.color
        }, $Drawable_color$93.$$arity = 0);
        return (Opal.def(self, '$size_with_dot', $Drawable_size_with_dot$94 = function $$size_with_dot() {
          var self = this, result = nil, $writer = nil;

          
          result = self.size.$clone();
          if ($truthy(self['$dotted?']())) {
            
            $writer = [0, $rb_plus(result['$[]'](0), 1)];
            $send(result, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return result;
        }, $Drawable_size_with_dot$94.$$arity = 0), nil) && 'size_with_dot';
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Symbol');

        var $nesting = [self].concat($parent_nesting), $Symbol_iniitalize$95, $Symbol_dotted$ques$96, $Symbol_hasbarover$ques$97;

        self.$$prototype.dotted = self.$$prototype.hasbarover = nil;
        
        self.$attr_accessor("dotted", "hasbarover");
        
        Opal.def(self, '$iniitalize', $Symbol_iniitalize$95 = function $$iniitalize() {
          var $iter = $Symbol_iniitalize$95.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

          if ($iter) $Symbol_iniitalize$95.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          return $send(self, Opal.find_super_dispatcher(self, 'iniitalize', $Symbol_iniitalize$95, false), $zuper, $iter)
        }, $Symbol_iniitalize$95.$$arity = 0);
        
        Opal.def(self, '$dotted?', $Symbol_dotted$ques$96 = function() {
          var self = this;

          return self.dotted
        }, $Symbol_dotted$ques$96.$$arity = 0);
        return (Opal.def(self, '$hasbarover?', $Symbol_hasbarover$ques$97 = function() {
          var self = this;

          return self.hasbarover
        }, $Symbol_hasbarover$ques$97.$$arity = 0), nil) && 'hasbarover?';
      })($nesting[0], $$($nesting, 'Drawable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'FlowLine');

        var $nesting = [self].concat($parent_nesting), $FlowLine_initialize$98, $FlowLine_dashed$ques$99, $FlowLine_dotted$ques$100;

        self.$$prototype.style = nil;
        
        self.$attr_reader("from", "to", "style");
        
        Opal.def(self, '$initialize', $FlowLine_initialize$98 = function $$initialize(from, to, style) {
          var $iter = $FlowLine_initialize$98.$$p, $yield = $iter || nil, self = this;

          if ($iter) $FlowLine_initialize$98.$$p = null;
          
          
          if (style == null) {
            style = "solid";
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $FlowLine_initialize$98, false), [], null);
          self.from = from;
          self.to = to;
          return (self.style = style);
        }, $FlowLine_initialize$98.$$arity = -3);
        
        Opal.def(self, '$dashed?', $FlowLine_dashed$ques$99 = function() {
          var self = this;

          return self.style['$==']("dashed")
        }, $FlowLine_dashed$ques$99.$$arity = 0);
        return (Opal.def(self, '$dotted?', $FlowLine_dotted$ques$100 = function() {
          var self = this;

          return self.style['$==']("dotted")
        }, $FlowLine_dotted$ques$100.$$arity = 0), nil) && 'dotted?';
      })($nesting[0], $$($nesting, 'Drawable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Image');

        var $nesting = [self].concat($parent_nesting), $Image_initialize$101;

        
        self.$attr_reader("url", "llpos", "height", "opacity", "origin");
        return (Opal.def(self, '$initialize', $Image_initialize$101 = function $$initialize(url, llpos, height, origin) {
          var self = this;

          
          
          if (origin == null) {
            origin = nil;
          };
          self.url = url;
          self.llpos = llpos;
          self.height = height;
          return (self.origin = nil);
        }, $Image_initialize$101.$$arity = -4), nil) && 'initialize';
      })($nesting[0], $$($nesting, 'Drawable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Path');

        var $nesting = [self].concat($parent_nesting), $Path_initialize$102, $Path_filled$ques$103;

        self.$$prototype.fill = nil;
        
        self.$attr_reader("path", "style", "origin");
        
        Opal.def(self, '$initialize', $Path_initialize$102 = function $$initialize(path, fill, origin, style) {
          var $iter = $Path_initialize$102.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Path_initialize$102.$$p = null;
          
          
          if (fill == null) {
            fill = nil;
          };
          
          if (origin == null) {
            origin = nil;
          };
          
          if (style == null) {
            style = "solid";
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Path_initialize$102, false), [], null);
          self.path = path;
          self.fill = fill;
          self.origin = origin;
          return (self.style = style);
        }, $Path_initialize$102.$$arity = -2);
        return (Opal.def(self, '$filled?', $Path_filled$ques$103 = function() {
          var self = this;

          return self.fill['$==']("filled")
        }, $Path_filled$ques$103.$$arity = 0), nil) && 'filled?';
      })($nesting[0], $$($nesting, 'Drawable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Ellipse');

        var $nesting = [self].concat($parent_nesting), $Ellipse_initialize$104, $Ellipse_height$105, $Ellipse_dotted$ques$106, $Ellipse_filled$ques$107, $Ellipse_rect$ques$108;

        self.$$prototype.size = self.$$prototype.fill = self.$$prototype.rect = nil;
        
        self.$attr_reader("center", "size", "fill", "origin", "color");
        
        Opal.def(self, '$initialize', $Ellipse_initialize$104 = function $$initialize(center, radii, fill, dotted, origin, rect) {
          var $iter = $Ellipse_initialize$104.$$p, $yield = $iter || nil, self = this;

          if ($iter) $Ellipse_initialize$104.$$p = null;
          
          
          if (fill == null) {
            fill = "filled";
          };
          
          if (dotted == null) {
            dotted = false;
          };
          
          if (origin == null) {
            origin = nil;
          };
          
          if (rect == null) {
            rect = false;
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Ellipse_initialize$104, false), [], null);
          self.center = center;
          self.size = radii;
          self.fill = fill;
          self.dotted = dotted;
          self.rect = rect;
          return (self.origin = origin);
        }, $Ellipse_initialize$104.$$arity = -3);
        
        Opal.def(self, '$height', $Ellipse_height$105 = function $$height() {
          var self = this;

          return self.size.$last()
        }, $Ellipse_height$105.$$arity = 0);
        
        Opal.def(self, '$dotted?', $Ellipse_dotted$ques$106 = function() {
          var self = this;

          return self.$dotted()
        }, $Ellipse_dotted$ques$106.$$arity = 0);
        
        Opal.def(self, '$filled?', $Ellipse_filled$ques$107 = function() {
          var self = this;

          return self.fill['$==']("filled")
        }, $Ellipse_filled$ques$107.$$arity = 0);
        return (Opal.def(self, '$rect?', $Ellipse_rect$ques$108 = function() {
          var self = this;

          return self.rect['$=='](true)
        }, $Ellipse_rect$ques$108.$$arity = 0), nil) && 'rect?';
      })($nesting[0], $$($nesting, 'Symbol'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Annotation');

        var $nesting = [self].concat($parent_nesting), $Annotation_initialize$109, $Annotation_size_estimate$111, $Annotation_size$112, $Annotation_shift_eu$eq$113, $Annotation_shift_eu$ques$114;

        self.$$prototype.text = self.$$prototype.style = self.$$prototype.center = self.$$prototype.shift_eu = nil;
        
        self.$attr_reader("center", "text", "style", "origin");
        self.$attr_accessor("conf_key", "conf_value", "align", "baseline", "shift_eu");
        
        Opal.def(self, '$initialize', $Annotation_initialize$109 = function $$initialize(center, text, style, origin, conf_key, conf_value) {
          var $$110, $iter = $Annotation_initialize$109.$$p, $yield = $iter || nil, self = this, _text_t = nil, _text = nil, startchar = nil;
          if ($gvars.log == null) $gvars.log = nil;

          if ($iter) $Annotation_initialize$109.$$p = null;
          
          
          if (style == null) {
            style = "regular";
          };
          
          if (origin == null) {
            origin = nil;
          };
          
          if (conf_key == null) {
            conf_key = nil;
          };
          
          if (conf_value == null) {
            conf_value = $hash2([], {});
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Annotation_initialize$109, false), [], null);
          _text_t = text.$gsub(/[„“‚’—–]/, $hash2(["„", "“", "‚", "’", "—", "–"], {"„": "\"", "“": "\"", "‚": "'", "’": "'", "—": "-", "–": "-"}));
          _text = $send(_text_t, 'gsub', [/./], ($$110 = function(c){var self = $$110.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            if ($truthy($rb_gt(c['$[]'](0).$ord(), 255))) {
              return "¿"
            } else {
              return c
            };}, $$110.$$s = self, $$110.$$arity = 1, $$110));
          if (_text['$=='](_text_t)) {
          } else {
            
            if ($truthy(origin)) {
              startchar = origin['$[]']("startChar")};
            $gvars.log.$error("" + "replaced unsupported characters with '¿' " + (conf_key), [1, 1]);
          };
          self.center = center;
          self.text = _text;
          self.style = style;
          self.align = "left";
          self.baseline = "alphabetic";
          self.origin = origin;
          self.conf_key = conf_key;
          self.conf_value = conf_value;
          return (self.shift_eu = false);
        }, $Annotation_initialize$109.$$arity = -3);
        
        Opal.def(self, '$size_estimate', $Annotation_size_estimate$111 = function $$size_estimate() {
          var $a, self = this, font_size = nil, ysize = nil, xsize = nil;
          if ($gvars.conf == null) $gvars.conf = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          if ($truthy(($truthy($a = self.text) ? $rb_gt(self.text.$strip().$length(), 0) : $a))) {
            
            font_size = $gvars.conf.$get("" + "layout.FONT_STYLE_DEF." + (self.style) + ".font_size");
            if ($truthy(font_size)) {
            } else {
              
              font_size = 10;
              $gvars.log.$error("" + "unsupported style for annotation: " + (self.style));
            };
            ysize = $rb_times(font_size, $gvars.conf.$get("layout.MM_PER_POINT").$to_f());
            xsize = $rb_times($rb_times(self.text.$length(), ysize), 0.55);
          } else {
            $a = [1.5, 2], (xsize = $a[0]), (ysize = $a[1]), $a
          };
          return [xsize, ysize];
        }, $Annotation_size_estimate$111.$$arity = 0);
        
        Opal.def(self, '$size', $Annotation_size$112 = function $$size() {
          var $a, self = this, font_size = nil, font_style = nil, $writer = nil, size = nil, result = nil;
          if ($gvars.conf == null) $gvars.conf = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          if ($truthy((($a = $nesting[0].$$cvars['@@pdf']) == null ? nil : $a)['$nil?']())) {
            (Opal.class_variable_set($nesting[0], '@@pdf', $$($nesting, 'JsPDF').$new("l", "mm", "a3")))};
          font_size = $gvars.conf.$get("" + "layout.FONT_STYLE_DEF." + (self.style) + ".font_size");
          font_style = $gvars.conf.$get("" + "layout.FONT_STYLE_DEF." + (self.style) + ".font_style");
          if ($truthy(font_size)) {
          } else {
            
            font_size = 10;
            $gvars.log.$error("" + "unsupported style for annotation: " + (self.style));
          };
          
          $writer = [font_size];
          $send((($a = $nesting[0].$$cvars['@@pdf']) == null ? nil : $a), 'font_size=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [font_style];
          $send((($a = $nesting[0].$$cvars['@@pdf']) == null ? nil : $a), 'font_style=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          size = (($a = $nesting[0].$$cvars['@@pdf']) == null ? nil : $a).$get_text_dimensions(self.text.$split("\n"));
          result = [size['$[]']("w"), size['$[]']("h")];
          return result;
        }, $Annotation_size$112.$$arity = 0);
        
        Opal.def(self, '$shift_eu=', $Annotation_shift_eu$eq$113 = function(value) {
          var self = this, $writer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          if ($truthy(value)) {
            if ($truthy(/^[aoveu]$/.$match(self.text))) {
              
              self.shift_eu = true;
              
              $writer = [1, $rb_minus(self.center['$[]'](1), $rb_times($rb_times($gvars.conf.$get("" + "layout.FONT_STYLE_DEF." + (self.style) + ".font_size"), $gvars.conf.$get("layout.MM_PER_POINT").$to_f()), 0.25))];
              $send(self.center, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;
            } else {
              return nil
            }
          } else {
            return nil
          }
        }, $Annotation_shift_eu$eq$113.$$arity = 1);
        return (Opal.def(self, '$shift_eu?', $Annotation_shift_eu$ques$114 = function() {
          var self = this;

          return self.shift_eu
        }, $Annotation_shift_eu$ques$114.$$arity = 0), nil) && 'shift_eu?';
      })($nesting[0], $$($nesting, 'Drawable'), $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Glyph');

        var $nesting = [self].concat($parent_nesting), $Glyph_initialize$115, $Glyph_height$116, $Glyph_dotted$ques$117, $Glyph_filled$ques$118;

        self.$$prototype.size = self.$$prototype.fill = nil;
        
        self.$attr_reader("center", "size", "glyph", "origin");
        Opal.const_set($nesting[0], 'GLYPHS', $hash2(["rest_1", "rest_4", "rest_8", "rest_16", "fermata", "emphasis", "error"], {"rest_1": $hash2(["d", "w", "h"], {"d": [["M", -10, -5], ["l", 20, 0], ["l", 0, 10], ["l", -20, 0], ["l", 0, -10], ["z"]], "w": 20, "h": 10}), "rest_4": $hash2(["d", "w", "h"], {"d": [["M", -1, -10], ["c", 0.12, -0.06, 0.24, -0.06, 0.36, -0.03], ["c", 0.09, 0.06, 4.74, 5.58, 4.86, 5.82], ["c", 0.21, 0.39, 0.15, 0.78, -0.15, 1.26], ["c", -0.24, 0.33, -0.72, 0.81, -1.62, 1.56], ["c", -0.45, 0.36, -0.87, 0.75, -0.96, 0.84], ["c", -0.93, 0.99, -1.14, 2.49, -0.6, 3.63], ["c", 0.18, 0.39, 0.27, 0.48, 1.32, 1.68], ["c", 1.92, 2.25, 1.83, 2.16, 1.83, 2.34], ["c", 0, 0.18, -0.18, 0.36, -0.36, 0.39], ["c", -0.15, 0, -0.27, -0.06, -0.48, -0.27], ["c", -0.75, -0.75, -2.46, -1.29, -3.39, -1.08], ["c", -0.45, 0.09, -0.69, 0.27, -0.9, 0.69], ["c", -0.12, 0.3, -0.21, 0.66, -0.24, 1.14], ["c", -0.03, 0.66, 0.09, 1.35, 0.3, 2.01], ["c", 0.15, 0.42, 0.24, 0.66, 0.45, 0.96], ["c", 0.18, 0.24, 0.18, 0.33, 0.03, 0.42], ["c", -0.12, 0.06, -0.18, 0.03, -0.45, -0.3], ["c", -1.08, -1.38, -2.07, -3.36, -2.4, -4.83], ["c", -0.27, -1.05, -0.15, -1.77, 0.27, -2.07], ["c", 0.21, -0.12, 0.42, -0.15, 0.87, -0.15], ["c", 0.87, 0.06, 2.1, 0.39, 3.3, 0.9], ["l", 0.39, 0.18], ["l", -1.65, -1.95], ["c", -2.52, -2.97, -2.61, -3.09, -2.7, -3.27], ["c", -0.09, -0.24, -0.12, -0.48, -0.03, -0.75], ["c", 0.15, -0.48, 0.57, -0.96, 1.83, -2.01], ["c", 0.45, -0.36, 0.84, -0.72, 0.93, -0.78], ["c", 0.69, -0.75, 1.02, -1.8, 0.9, -2.79], ["c", -0.06, -0.33, -0.21, -0.84, -0.39, -1.11], ["c", -0.09, -0.15, -0.45, -0.6, -0.81, -1.05], ["c", -0.36, -0.42, -0.69, -0.81, -0.72, -0.87], ["c", -0.09, -0.18, 0, -0.42, 0.21, -0.51], ["z"]], "w": 7.888, "h": 21.435}), "rest_8": $hash2(["d", "w", "h"], {"d": [["M", -2, -6.7], ["c", 0.66, -0.09, 1.23, 0.09, 1.68, 0.51], ["c", 0.27, 0.3, 0.39, 0.54, 0.57, 1.26], ["c", 0.09, 0.33, 0.18, 0.66, 0.21, 0.72], ["c", 0.12, 0.27, 0.33, 0.45, 0.6, 0.48], ["c", 0.12, 0, 0.18, 0, 0.33, -0.09], ["c", 0.39, -0.18, 1.32, -1.29, 1.68, -1.98], ["c", 0.09, -0.21, 0.24, -0.3, 0.39, -0.3], ["c", 0.12, 0, 0.27, 0.09, 0.33, 0.18], ["c", 0.03, 0.06, -0.27, 1.11, -1.86, 6.42], ["c", -1.02, 3.48, -1.89, 6.39, -1.92, 6.42], ["c", 0, 0.03, -0.12, 0.12, -0.24, 0.15], ["c", -0.18, 0.09, -0.21, 0.09, -0.45, 0.09], ["c", -0.24, 0, -0.3, 0, -0.48, -0.06], ["c", -0.09, -0.06, -0.21, -0.12, -0.21, -0.15], ["c", -0.06, -0.03, 0.15, -0.57, 1.68, -4.92], ["c", 0.96, -2.67, 1.74, -4.89, 1.71, -4.89], ["l", -0.51, 0.15], ["c", -1.08, 0.36, -1.74, 0.48, -2.55, 0.48], ["c", -0.66, 0, -0.84, -0.03, -1.32, -0.27], ["c", -1.32, -0.63, -1.77, -2.16, -1.02, -3.3], ["c", 0.33, -0.45, 0.84, -0.81, 1.38, -0.9], ["z"]], "w": 7.534, "h": 13.883}), "rest_16": $hash2(["d", "w", "h"], {"d": [["M", -1.33, -11.12], ["c", 0.66, -0.09, 1.23, 0.09, 1.68, 0.51], ["c", 0.27, 0.3, 0.39, 0.54, 0.57, 1.26], ["c", 0.09, 0.33, 0.18, 0.66, 0.21, 0.72], ["c", 0.15, 0.39, 0.57, 0.57, 0.87, 0.42], ["c", 0.39, -0.18, 1.2, -1.23, 1.62, -2.07], ["c", 0.06, -0.15, 0.24, -0.24, 0.36, -0.24], ["c", 0.12, 0, 0.27, 0.09, 0.33, 0.18], ["c", 0.03, 0.06, -0.45, 1.86, -2.67, 10.17], ["c", -1.5, 5.55, -2.73, 10.14, -2.76, 10.17], ["c", -0.03, 0.03, -0.12, 0.12, -0.24, 0.15], ["c", -0.18, 0.09, -0.21, 0.09, -0.45, 0.09], ["c", -0.24, 0, -0.3, 0, -0.48, -0.06], ["c", -0.09, -0.06, -0.21, -0.12, -0.21, -0.15], ["c", -0.06, -0.03, 0.12, -0.57, 1.44, -4.92], ["c", 0.81, -2.67, 1.47, -4.86, 1.47, -4.89], ["c", -0.03, 0, -0.27, 0.06, -0.54, 0.15], ["c", -1.08, 0.36, -1.77, 0.48, -2.58, 0.48], ["c", -0.66, 0, -0.84, -0.03, -1.32, -0.27], ["c", -1.32, -0.63, -1.77, -2.16, -1.02, -3.3], ["c", 0.72, -1.05, 2.22, -1.23, 3.06, -0.42], ["c", 0.3, 0.33, 0.42, 0.6, 0.6, 1.38], ["c", 0.09, 0.45, 0.21, 0.78, 0.33, 0.9], ["c", 0.09, 0.09, 0.27, 0.18, 0.45, 0.21], ["c", 0.12, 0, 0.18, 0, 0.33, -0.09], ["c", 0.33, -0.15, 1.02, -0.93, 1.41, -1.59], ["c", 0.12, -0.21, 0.18, -0.39, 0.39, -1.08], ["c", 0.66, -2.1, 1.17, -3.84, 1.17, -3.87], ["c", 0, 0, -0.21, 0.06, -0.42, 0.15], ["c", -0.51, 0.15, -1.2, 0.33, -1.68, 0.42], ["c", -0.33, 0.06, -0.51, 0.06, -0.96, 0.06], ["c", -0.66, 0, -0.84, -0.03, -1.32, -0.27], ["c", -1.32, -0.63, -1.77, -2.16, -1.02, -3.3], ["c", 0.33, -0.45, 0.84, -0.81, 1.38, -0.9], ["z"]], "w": 9.724, "h": 21.383}), "fermata": $hash2(["d", "w", "h"], {"d": [["M", -0.75, -5.34], ["c", 0.12, 0, 0.45, -0.03, 0.69, -0.03], ["c", 2.91, -0.03, 5.55, 1.53, 7.41, 4.35], ["c", 1.17, 1.71, 1.95, 3.72, 2.43, 6.03], ["c", 0.12, 0.51, 0.12, 0.57, 0.03, 0.69], ["c", -0.12, 0.21, -0.48, 0.27, -0.69, 0.12], ["c", -0.12, -0.09, -0.18, -0.24, -0.27, -0.69], ["c", -0.78, -3.63, -3.42, -6.54, -6.78, -7.38], ["c", -0.78, -0.21, -1.2, -0.24, -2.07, -0.24], ["c", -0.63, 0, -0.84, 0, -1.2, 0.06], ["c", -1.83, 0.27, -3.42, 1.08, -4.8, 2.37], ["c", -1.41, 1.35, -2.4, 3.21, -2.85, 5.19], ["c", -0.09, 0.45, -0.15, 0.6, -0.27, 0.69], ["c", -0.21, 0.15, -0.57, 0.09, -0.69, -0.12], ["c", -0.09, -0.12, -0.09, -0.18, 0.03, -0.69], ["c", 0.33, -1.62, 0.78, -3, 1.47, -4.38], ["c", 1.77, -3.54, 4.44, -5.67, 7.56, -5.97], ["z"], ["M", -0.5, 1.5], ["c", 1.38, -0.3, 2.58, 0.9, 2.31, 2.25], ["c", -0.15, 0.72, -0.78, 1.35, -1.47, 1.5], ["c", -1.38, 0.27, -2.58, -0.93, -2.31, -2.31], ["c", 0.15, -0.69, 0.78, -1.29, 1.47, -1.44], ["z"]], "w": 19.748, "h": 11.289}), "emphasis": $hash2(["d", "w", "h"], {"d": [["M", -6.45, -3.69], ["c", 0.06, -0.03, 0.15, -0.06, 0.18, -0.06], ["c", 0.06, 0, 2.85, 0.72, 6.24, 1.59], ["l", 6.33, 1.65], ["c", 0.33, 0.06, 0.45, 0.21, 0.45, 0.51], ["c", 0, 0.3, -0.12, 0.45, -0.45, 0.51], ["l", -6.33, 1.65], ["c", -3.39, 0.87, -6.18, 1.59, -6.21, 1.59], ["c", -0.21, 0, -0.48, -0.24, -0.51, -0.45], ["c", 0, -0.15, 0.06, -0.36, 0.18, -0.45], ["c", 0.09, -0.06, 0.87, -0.27, 3.84, -1.05], ["c", 2.04, -0.54, 3.84, -0.99, 4.02, -1.02], ["c", 0.15, -0.06, 1.14, -0.24, 2.22, -0.42], ["c", 1.05, -0.18, 1.92, -0.36, 1.92, -0.36], ["c", 0, 0, -0.87, -0.18, -1.92, -0.36], ["c", -1.08, -0.18, -2.07, -0.36, -2.22, -0.42], ["c", -0.18, -0.03, -1.98, -0.48, -4.02, -1.02], ["c", -2.97, -0.78, -3.75, -0.99, -3.84, -1.05], ["c", -0.12, -0.09, -0.18, -0.3, -0.18, -0.45], ["c", 0.03, -0.15, 0.15, -0.3, 0.3, -0.39], ["z"]], "w": 13.5, "h": 7.5}), "error": $hash2(["d", "w", "h"], {"d": [["M", -10, -5], ["l", 0, 10], ["l", 20, -10], ["l", 0, 10], ["z"]], "w": 20, "h": 10})}));
        
        Opal.def(self, '$initialize', $Glyph_initialize$115 = function $$initialize(center, size, glyph_name, dotted, origin, conf_key, conf_value) {
          var $iter = $Glyph_initialize$115.$$p, $yield = $iter || nil, self = this, glyph = nil;
          if ($gvars.log == null) $gvars.log = nil;

          if ($iter) $Glyph_initialize$115.$$p = null;
          
          
          if (dotted == null) {
            dotted = $$($nesting, 'FALSE');
          };
          
          if (origin == null) {
            origin = nil;
          };
          
          if (conf_key == null) {
            conf_key = nil;
          };
          
          if (conf_value == null) {
            conf_value = $hash2([], {});
          };
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Glyph_initialize$115, false), [], null);
          glyph = $$($nesting, 'GLYPHS')['$[]'](glyph_name);
          if ($truthy(glyph)) {
          } else {
            
            if ($truthy(glyph)) {
            } else {
              $gvars.log.$error("" + "BUG: unsuppoerted glyph " + (glyph_name))
            };
            glyph = $$($nesting, 'GLYPHS')['$[]']("error");
          };
          self.center = center;
          self.glyph_name = glyph_name;
          self.glyph = glyph;
          self.size = size;
          self.dotted = dotted;
          self.origin = origin;
          self.filled = true;
          self.conf_key = conf_key;
          self.conf_value = conf_value;
          return (self.coll_stack = []);
        }, $Glyph_initialize$115.$$arity = -4);
        
        Opal.def(self, '$height', $Glyph_height$116 = function $$height() {
          var self = this;

          return self.size.$last()
        }, $Glyph_height$116.$$arity = 0);
        
        Opal.def(self, '$dotted?', $Glyph_dotted$ques$117 = function() {
          var self = this;

          return self.$dotted()
        }, $Glyph_dotted$ques$117.$$arity = 0);
        return (Opal.def(self, '$filled?', $Glyph_filled$ques$118 = function() {
          var self = this;

          return self.fill['$==']("filled")
        }, $Glyph_filled$ques$118.$$arity = 0), nil) && 'filled?';
      })($nesting[0], $$($nesting, 'Symbol'), $nesting);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Layout');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Default');

        var $nesting = [self].concat($parent_nesting), $Default_initialize$119, $Default_set_instrument_handlers$120, $Default_layout_images$122, $Default_layout_debug_grid$125, $Default_layout$130, $Default_get_print_options$131, $Default_compute_note_position$132, $Default_layout_voice$133, $Default_make_decorations_per_playable$140, $Default_make_repeatsign_annotation$144, $Default__mkflaps_pitches$146, $Default__mk_pitches_table$148, $Default__instrument_akkordzither$150, $Default__mk_pitch_to_xpos$153, $Default__instrument_okon$155, $Default__instrument_saitenspiel$160, $Default__instrument_zipino$163, $Default__layout_voice_notebound_annotations$167, $Default__layout_voice_chordsymbols$171, $Default__laoyut_voice_repeatmarks$175, $Default__layout_voice_gotos$178, $Default__layout_voice_slurs$182, $Default__layout_voice_tuplets$190, $Default__layout_voice_subflowlines$196, $Default__layout_voice_flowlines$200, $Default__layout_voice_playables$204, $Default__layout_voice_handle_visibility$206, $Default__layout_sheet_annotations$208, $Default__layout_instrument$211, $Default__layout_lyrics$213, $Default__layout_zn_annotations$218, $Default__layout_legend$219, $Default__layout_cutmarks$222, $Default__layout_sortmark$225, $Default__layout_synclines$227, $Default__layout_sheetmarks$230, $Default__layout_voices$236, $Default__get_options_by_voice$246, $Default__layout_prepare_options$247, $Default_compute_vertical_cut$248, $Default_layout_barnumbers_countnotes$249, $Default_create_annotation_background_rect$254, $Default_compute_beat_compression$256, $Default_compute_beat_compression_2$257, $Default_compute_beat_compression_10$265, $Default_get_minc_factor$274, $Default_compute_beat_compression_0$275, $Default_compute_beat_compression_1$286, $Default_compute_beat_compression_3$300, $Default_layout_playable$315, $Default_layout_note$316, $Default_layout_note_flags$317, $Default_convert_pitch_to_xpos$320, $Default_compute_color_by_variant_no$321, $Default_compute_ellipse_properties_from_note$322, $Default_layout_note_shift$324, $Default_layout_accord$325, $Default_layout_pause$330, $Default_make_path_from_jumpline$331, $Default_duration_to_id$332, $Default_check_duration$333, $Default_make_sheetmark_path$334, $Default_make_slur_path$336, $Default_make_annotated_bezier_path$337, $Default_resolve_placeholder$338;

        self.$$prototype.placeholders = self.$$prototype.print_options_hash = self.$$prototype.print_options_raw = self.$$prototype.color_default = self.$$prototype.slur_index = self.$$prototype.draw_instrument = self.$$prototype.instrument_shape = self.$$prototype.bottom_annotation_positions = self.$$prototype.uri = self.$$prototype.y_offset = self.$$prototype.beat_spacing = self.$$prototype.conf_beat_resolution = self.$$prototype.layout_minc = self.$$prototype.instrument_orientation = self.$$prototype.pitch_to_xpos = self.$$prototype.color_variant1 = self.$$prototype.color_variant2 = self.$$prototype.print_options_keys = nil;
        
        self.$include($$$($$($nesting, 'Harpnotes'), 'Music'));
        self.$include($$$($$($nesting, 'Harpnotes'), 'Drawing'));
        self.$attr_accessor("uri", "placeholders");
        Opal.const_set($nesting[0], 'MM_PER_POINT', 0.3);
        
        Opal.def(self, '$initialize', $Default_initialize$119 = function $$initialize() {
          var self = this;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          self.beat_spacing = $rb_divide($rb_times($gvars.conf.$get("layout.Y_SCALE"), 1.0), $gvars.conf.$get("layout.BEAT_RESOLUTION"));
          self.slur_index = $hash2([], {});
          self.y_offset = 5;
          self.conf_beat_resolution = $gvars.conf.$get("layout.BEAT_RESOLUTION");
          self.layout_minc = $hash2([], {});
          self.color_default = $gvars.conf.$get("layout.color.color_default");
          self.color_variant1 = $gvars.conf.$get("layout.color.color_variant1");
          self.color_variant2 = $gvars.conf.$get("layout.color.color_variant2");
          self.draw_instrument = nil;
          self.draw_instrument_shape = nil;
          if ($truthy(self.placeholders)) {
            return nil
          } else {
            return (self.placeholders = $hash2([], {}))
          };
        }, $Default_initialize$119.$$arity = 0);
        
        Opal.def(self, '$set_instrument_handlers', $Default_set_instrument_handlers$120 = function $$set_instrument_handlers(print_variant_nr) {
          var $$121, self = this, xoffset = nil, xspacing = nil, pitchoffset = nil, $case = nil, shape = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          xoffset = $gvars.conf['$[]']("layout.X_OFFSET");
          xspacing = $gvars.conf['$[]']("layout.X_SPACING");
          pitchoffset = $gvars.conf.$get("layout.PITCH_OFFSET");
          self.bottom_annotation_positions = [[150, 289], [325, 289], [380, 289]];
          self.pitch_to_xpos = $send(self, 'lambda', [], ($$121 = function(pitch){var self = $$121.$$s || this;

          
            
            if (pitch == null) {
              pitch = nil;
            };
            return $rb_plus($rb_times($rb_plus(pitchoffset, pitch), xspacing), xoffset);}, $$121.$$s = self, $$121.$$arity = 1, $$121));
          $case = $gvars.conf['$[]']("layout.instrument");
          if ("Zipino"['$===']($case)) {self.$_instrument_zipino(pitchoffset, xoffset, xspacing)}
          else if ("saitenspiel"['$===']($case)) {self.$_instrument_saitenspiel(pitchoffset, xoffset, xspacing)}
          else if ("okon-f"['$===']($case) || "okon-g"['$===']($case) || "okon-c"['$===']($case) || "okon-d"['$===']($case) || "okon-open"['$===']($case)) {self.$_instrument_okon(pitchoffset, xoffset, xspacing, print_variant_nr)}
          else if ("21-strings-a-f"['$===']($case)) {self.bottom_annotation_positions = [[190, 287], [190, 290], [250, 290]]}
          else if ("18-strings-b-e"['$===']($case)) {self.bottom_annotation_positions = [[210, 287], [210, 290], [280, 290]]}
          else if ("akkordzither"['$===']($case) || "Akkordzither"['$===']($case)) {self.$_instrument_akkordzither(pitchoffset, xoffset, xspacing, print_variant_nr)};
          shape = $gvars.conf.$get("" + "extract." + (print_variant_nr) + ".instrument_shape");
          if ($truthy(shape)) {
            return (self.instrument_shape = $$($nesting, 'JSON').$parse(shape))
          } else {
            return (self.instrument_shape = nil)
          };
        }, $Default_set_instrument_handlers$120.$$arity = 1);
        
        Opal.def(self, '$layout_images', $Default_layout_images$122 = function $$layout_images(print_options_raw, print_variant_nr) {
          var $$123, self = this, result = nil, images = nil;

          
          result = [];
          images = print_options_raw['$[]']("images");
          if ($truthy(images['$nil?']())) {
          } else {
            $send(images, 'each', [], ($$123 = function(number, image){var self = $$123.$$s || this, $$124, datauri = nil;
              if ($gvars.resources == null) $gvars.resources = nil;

            
              
              if (number == null) {
                number = nil;
              };
              
              if (image == null) {
                image = nil;
              };
              if (image['$[]']("show")['$=='](true)) {
                
                datauri = $gvars.resources['$[]'](image['$[]']("imagename"));
                if ($truthy(datauri['$is_a?']($$($nesting, 'Array')))) {
                  datauri = datauri.$join()};
                if ($truthy(datauri)) {
                  return result.$push($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Image').$new(datauri, $rb_minus(self.$Vector2d(image['$[]']("pos")), [0, image['$[]']("height")]), image['$[]']("height")), 'tap', [], ($$124 = function(s){var self = $$124.$$s || this, $writer = nil;

                  
                    
                    if (s == null) {
                      s = nil;
                    };
                    
                    $writer = ["" + "extract." + (print_variant_nr) + ".images." + (number) + ".pos"];
                    $send(s, 'conf_key=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [image['$[]']("pos")];
                    $send(s, 'conf_value=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [$hash2(["handler"], {"handler": "annotation"})];
                    $send(s, 'draginfo=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;}, $$124.$$s = self, $$124.$$arity = 1, $$124)))
                } else {
                  return nil
                };
              } else {
                return nil
              };}, $$123.$$s = self, $$123.$$arity = 2, $$123))
          };
          return result;
        }, $Default_layout_images$122.$$arity = 2);
        
        Opal.def(self, '$layout_debug_grid', $Default_layout_debug_grid$125 = function $$layout_debug_grid() {
          var $$126, $$127, $$128, $$129, self = this, the_options = nil, gridsize = nil, emphasis = nil, sheetsize = nil, result = nil;

          
          the_options = $hash2(["size", "emphasis", "line", "emphline"], {"size": 1, "emphasis": 10, "line": 0.02, "emphline": 0.2});
          gridsize = the_options['$[]']("size");
          emphasis = $rb_times(the_options['$[]']("emphasis"), gridsize);
          sheetsize = [420, 297];
          result = [];
          $send($send(Opal.Range.$new(0, $rb_divide(sheetsize.$first(), gridsize), false), 'map', [], ($$126 = function(g){var self = $$126.$$s || this;

          
            
            if (g == null) {
              g = nil;
            };
            return $rb_times(g, gridsize);}, $$126.$$s = self, $$126.$$arity = 1, $$126)), 'each', [], ($$127 = function(g){var self = $$127.$$s || this, e = nil, $writer = nil;

          
            
            if (g == null) {
              g = nil;
            };
            e = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new([["M", g, 0], ["l", 0, sheetsize.$last()]]);
            
            $writer = [the_options['$[]']("line")];
            $send(e, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (g['$%'](emphasis)['$=='](0)) {
              
              $writer = [the_options['$[]']("emphline")];
              $send(e, 'line_width=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return result['$<<'](e);}, $$127.$$s = self, $$127.$$arity = 1, $$127));
          $send($send(Opal.Range.$new(0, $rb_divide(sheetsize.$last(), gridsize), false), 'map', [], ($$128 = function(g){var self = $$128.$$s || this;

          
            
            if (g == null) {
              g = nil;
            };
            return $rb_times(g, gridsize);}, $$128.$$s = self, $$128.$$arity = 1, $$128)), 'each', [], ($$129 = function(g){var self = $$129.$$s || this, e = nil, $writer = nil;

          
            
            if (g == null) {
              g = nil;
            };
            e = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new([["M", 0, g], ["l", sheetsize.$first(), 0]]);
            
            $writer = [the_options['$[]']("line")];
            $send(e, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if (g['$%'](emphasis)['$=='](0)) {
              
              $writer = [the_options['$[]']("emphline")];
              $send(e, 'line_width=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            return result['$<<'](e);}, $$129.$$s = self, $$129.$$arity = 1, $$129));
          return result;
        }, $Default_layout_debug_grid$125.$$arity = 0);
        
        Opal.def(self, '$layout', $Default_layout$130 = function $$layout(music, beat_layout, print_variant_nr, page_format) {
          var $a, $b, self = this, title = nil, filename = nil, res_debug_grid = nil, res_images = nil, active_voices = nil, required_synchlines = nil, res_voice_elements = nil, res_synch_lines = nil, res_sheetmarks = nil, sortmark_options = nil, res_instrument = nil, res_cutmarks = nil, res_legend = nil, res_zn_annotations = nil, res_lyrics = nil, res_annotations = nil, sheet_elements = nil, result = nil, $writer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          
          if (beat_layout == null) {
            beat_layout = nil;
          };
          
          if (print_variant_nr == null) {
            print_variant_nr = 0;
          };
          
          if (page_format == null) {
            page_format = "A4";
          };
          self.$_layout_prepare_options(print_variant_nr);
          title = ($truthy($a = music.$meta_data()['$[]']("title")) ? $a : "untitled");
          filename = music.$meta_data()['$[]']("filename");
          res_debug_grid = (function() {if ($truthy($gvars.conf['$[]']("layout.grid"))) {
            return self.$layout_debug_grid()
          } else {
            return []
          }; return nil; })();
          res_images = self.$layout_images(self.print_options_hash, print_variant_nr);
          $b = self.$_layout_voices(beat_layout, music, print_variant_nr), $a = Opal.to_ary($b), (active_voices = ($a[0] == null ? nil : $a[0])), (required_synchlines = ($a[1] == null ? nil : $a[1])), (res_voice_elements = ($a[2] == null ? nil : $a[2])), $b;
          res_synch_lines = self.$_layout_synclines(music, required_synchlines);
          res_sheetmarks = self.$_layout_sheetmarks(self.print_options_hash, print_variant_nr);
          sortmark_options = self.print_options_hash['$[]']("sortmark");
          if ($truthy(sortmark_options['$[]']("show"))) {
            res_sheetmarks['$<<'](self.$_layout_sortmark(title, sortmark_options))};
          res_instrument = self.$_layout_instrument();
          res_cutmarks = self.$_layout_cutmarks(page_format);
          res_legend = self.$_layout_legend(music, print_variant_nr, title);
          res_zn_annotations = self.$_layout_zn_annotations(filename, music);
          res_lyrics = self.$_layout_lyrics(music, print_variant_nr);
          res_annotations = self.$_layout_sheet_annotations(print_variant_nr);
          sheet_elements = $rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus(res_images, res_debug_grid), res_synch_lines), res_voice_elements), res_legend), res_annotations), res_zn_annotations), res_lyrics), res_sheetmarks), res_cutmarks), res_instrument);
          result = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Sheet').$new(sheet_elements, active_voices);
          
          $writer = [$gvars.conf['$[]']("printer")];
          $send(result, 'printer_config=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          $gvars.conf.$pop();
          $gvars.conf.$pop();
          return result;
        }, $Default_layout$130.$$arity = -2);
        
        Opal.def(self, '$get_print_options', $Default_get_print_options$131 = function $$get_print_options(print_variant_nr) {
          var self = this, print_options_raw = nil, $writer = nil, song_print_options = nil;
          if ($gvars.conf == null) $gvars.conf = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          print_options_raw = $$($nesting, 'Confstack').$new();
          
          $writer = [false];
          $send(print_options_raw, 'strict=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          print_options_raw.$push($gvars.conf.$get("extract.0"));
          song_print_options = $gvars.conf.$get("" + "extract." + (print_variant_nr));
          if ($truthy(song_print_options)) {
            print_options_raw.$push(song_print_options)
          } else {
            $gvars.log.$warning("" + "selected print variant [" + (print_variant_nr) + "] not available using [0]: '" + (print_options_raw.$get("title")) + "'")
          };
          if ($truthy(print_options_raw['$[]']("layout.beams"))) {
            print_options_raw.$push($hash2(["layout"], {"layout": $hash2(["DURATION_TO_STYLE"], {"DURATION_TO_STYLE": $gvars.conf['$[]']("layout.DURATION_TO_BEAMS")})}))};
          return print_options_raw;
        }, $Default_get_print_options$131.$$arity = 1);
        Opal.const_set($nesting[0], 'NOTE_POSITION_LOOKUP', $hash2(["11", "12", "13", "21", "22", "23", "31", "32", "33"], {"11": ["r", "r"], "12": ["r", "l"], "13": ["r", "l"], "21": ["r", "r"], "22": ["r", "l"], "23": ["l", "l"], "31": ["l", "r"], "32": ["l", "r"], "33": ["l", "l"]}));
        
        Opal.def(self, '$compute_note_position', $Default_compute_note_position$132 = function $$compute_note_position(xp, x, xn, limit_a3) {
          var self = this, a = nil, b = nil;

          
          a = $rb_plus(xp['$<=>'](x), 2);
          b = $rb_plus(xn['$<=>'](x), 2);
          if ($truthy($rb_lt(x, 10))) {
            return ["r", "r"]
          } else if ($truthy($rb_gt(x, 410))) {
            return ["l", "l"]
          } else {
            return $$($nesting, 'NOTE_POSITION_LOOKUP')['$[]']("" + (a) + (b))
          };
        }, $Default_compute_note_position$132.$$arity = 4);
        
        Opal.def(self, '$layout_voice', $Default_layout_voice$133 = function $$layout_voice(voice, beat_layout, print_variant_nr, show_options) {
          var $$134, $a, $b, $$135, $$136, $$137, $$138, $$139, self = this, voice_nr = nil, playables = nil, res_decorations = nil, res_playables = nil, res_barnumbers = nil, res_countnotes = nil, do_flowconf = nil, default_tuplet_options = nil, res_flow = nil, res_sub_flow = nil, res_chordsymbols = nil, res_tuplets = nil, res_slurs = nil, res_gotos = nil, color_default = nil, res_repeatmarks = nil, res_annotations = nil, res_barnumber_backgrounds = nil, res_countnote_backgrounds = nil, res_annotation_backgrounds = nil;
          if ($gvars.log == null) $gvars.log = nil;
          if ($gvars.settings == null) $gvars.settings = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          self.print_options_keys = self.print_options_raw.$keys();
          voice_nr = show_options['$[]']("voice_nr");
          playables = $send(voice, 'select', [], ($$134 = function(c){var self = $$134.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return c['$is_a?']($$($nesting, 'Playable'));}, $$134.$$s = self, $$134.$$arity = 1, $$134));
          self.$_layout_voice_handle_visibility(playables, show_options);
          $b = self.$_layout_voice_playables(beat_layout, playables, print_variant_nr, show_options, voice_nr), $a = Opal.to_ary($b), (res_decorations = ($a[0] == null ? nil : $a[0])), (res_playables = ($a[1] == null ? nil : $a[1])), $b;
          $b = $send($gvars.log, 'benchmark', ["countnotes / barnumbers"], ($$135 = function(){var self = $$135.$$s || this;

          return self.$layout_barnumbers_countnotes(playables, print_variant_nr, show_options, voice_nr)}, $$135.$$s = self, $$135.$$arity = 0, $$135)), $a = Opal.to_ary($b), (res_barnumbers = ($a[0] == null ? nil : $a[0])), (res_countnotes = ($a[1] == null ? nil : $a[1])), $b;
          do_flowconf = $gvars.settings['$[]']("flowconf")['$==']("true");
          default_tuplet_options = $gvars.conf['$[]']("defaults.notebound.flowline");
          res_flow = self.$_layout_voice_flowlines(default_tuplet_options, do_flowconf, print_variant_nr, show_options, voice, voice_nr);
          res_sub_flow = self.$_layout_voice_subflowlines(default_tuplet_options, do_flowconf, print_variant_nr, show_options, voice, voice_nr);
          if ($truthy(show_options['$[]']("subflowline"))) {
          } else {
            res_sub_flow = []
          };
          if ($truthy(show_options['$[]']("flowline"))) {
          } else {
            res_flow = []
          };
          if ($truthy(show_options['$[]']("countnotes"))) {
          } else {
            res_countnotes = []
          };
          if ($truthy(show_options['$[]']("barnumbers"))) {
          } else {
            res_barnumbers = []
          };
          res_chordsymbols = (function() {if ($truthy(show_options['$[]']("chords"))) {
            return self.$_layout_voice_chordsymbols(print_variant_nr, show_options, voice)
          } else {
            return []
          }; return nil; })();
          res_tuplets = self.$_layout_voice_tuplets(playables, print_variant_nr, show_options, voice_nr);
          res_slurs = self.$_layout_voice_slurs(playables);
          res_gotos = self.$_layout_voice_gotos(print_variant_nr, show_options, voice);
          if ($truthy(show_options['$[]']("jumpline"))) {
          } else {
            res_gotos = []
          };
          color_default = self.color_default;
          $send(res_gotos, 'each', [], ($$136 = function(the_goto){var self = $$136.$$s || this, $writer = nil;

          
            
            if (the_goto == null) {
              the_goto = nil;
            };
            $writer = [color_default];
            $send(the_goto, 'color=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$136.$$s = self, $$136.$$arity = 1, $$136));
          res_repeatmarks = self.$_laoyut_voice_repeatmarks(print_variant_nr, show_options, voice, voice_nr);
          res_annotations = self.$_layout_voice_notebound_annotations(print_variant_nr, show_options, voice);
          res_barnumber_backgrounds = $send(res_barnumbers, 'map', [], ($$137 = function(i){var self = $$137.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return self.$create_annotation_background_rect(i, 0.2);}, $$137.$$s = self, $$137.$$arity = 1, $$137));
          res_countnote_backgrounds = $send(res_countnotes, 'map', [], ($$138 = function(i){var self = $$138.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return self.$create_annotation_background_rect(i, -0.05);}, $$138.$$s = self, $$138.$$arity = 1, $$138));
          res_annotation_backgrounds = $send($rb_plus($rb_plus(res_annotations, res_repeatmarks), res_chordsymbols).$compact(), 'map', [], ($$139 = function(i){var self = $$139.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return self.$create_annotation_background_rect(i, 0.5);}, $$139.$$s = self, $$139.$$arity = 1, $$139));
          return $rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus($rb_plus(res_flow, res_sub_flow), res_slurs), res_tuplets), res_playables), res_countnote_backgrounds), res_countnotes), res_barnumber_backgrounds), res_barnumbers), res_decorations), res_gotos), res_annotation_backgrounds), res_annotations), res_chordsymbols), res_repeatmarks).$compact();
        }, $Default_layout_voice$133.$$arity = 4);
        
        Opal.def(self, '$make_decorations_per_playable', $Default_make_decorations_per_playable$140 = function $$make_decorations_per_playable(playable, decoration_root, print_variant_nr, show_options, voice_nr) {
          var $$141, $$142, self = this, decorations = nil, decoration_distance = nil, decoration_scale = nil, decoration_size = nil, decoration_result = nil;

          
          decorations = nil;
          decorations = playable.$decorations();
          if ($truthy(decorations['$empty?']())) {
          } else {
            
            decoration_distance = (function() {if ($truthy(playable.$measure_start())) {
              return 2
            } else {
              return 1
            }; return nil; })();
            decoration_scale = 0.8;
            decoration_size = $send(decoration_root.$size(), 'map', [], ($$141 = function(i){var self = $$141.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return $rb_times(i, decoration_scale);}, $$141.$$s = self, $$141.$$arity = 1, $$141));
            decoration_result = [];
            $send(decorations, 'each_with_index', [], ($$142 = function(decoration, index){var self = $$142.$$s || this, $$143, notebound_pos_key = nil, conf_key = nil, annotationoffset = nil, decoration_center = nil, r = nil;

            
              
              if (decoration == null) {
                decoration = nil;
              };
              
              if (index == null) {
                index = nil;
              };
              notebound_pos_key = "" + "notebound.decoration.v_" + (voice_nr) + ".t_" + (playable.$znid()) + "." + (index) + ".pos";
              conf_key = "" + "extract." + (print_variant_nr) + "." + (notebound_pos_key);
              annotationoffset = (function() { try {
                return show_options['$[]']("print_options_raw")['$[]'](notebound_pos_key)
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})();
              if ($truthy(annotationoffset)) {
              } else {
                annotationoffset = [0, $rb_minus($rb_divide(decoration_root.$size().$last()['$-@'](), decoration_scale), decoration_distance).$round()]
              };
              decoration_center = [$rb_plus(decoration_root.$center().$first(), annotationoffset.$first()), $rb_plus(decoration_root.$center().$last(), annotationoffset.$last())];
              r = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Glyph').$new(decoration_center, decoration_size, decoration, false, nil, conf_key, annotationoffset);
              $send(r, 'tap', [], ($$143 = function(s){var self = $$143.$$s || this, $writer = nil;

              
                
                if (s == null) {
                  s = nil;
                };
                $writer = [$hash2(["handler"], {"handler": "annotation"})];
                $send(s, 'draginfo=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$143.$$s = self, $$143.$$arity = 1, $$143));
              return decoration_result.$push([r]);}, $$142.$$s = self, $$142.$$arity = 2, $$142));
          };
          return decoration_result;
        }, $Default_make_decorations_per_playable$140.$$arity = 5);
        
        Opal.def(self, '$make_repeatsign_annotation', $Default_make_repeatsign_annotation$144 = function $$make_repeatsign_annotation(goto$, point_role, print_variant_nr, show_options, voice_nr) {
          var $a, $$145, self = this, from_anchor = nil, to_anchor = nil, companion_note = nil, attach_side = nil, repeat_key = nil, pos_key = nil, conf_key = nil, repeatsign_options = nil, annotationoffset = nil, text = nil, style = nil, position = nil;

          
          from_anchor = ($truthy($a = goto$.$policy()['$[]']("from_anchor")) ? $a : "after");
          to_anchor = ($truthy($a = goto$.$policy()['$[]']("to_anchor")) ? $a : "before");
          if (point_role['$==']("begin")) {
            
            companion_note = goto$.$to();
            if (goto$.$to()['$=='](goto$.$from())) {
              attach_side = "left"
            } else {
              attach_side = (function() {if ($truthy($rb_le(companion_note.$pitch(), companion_note.$next_pitch()))) {
                return "left"
              } else {
                return "right"
              }; return nil; })()
            };
          } else {
            
            companion_note = goto$.$from();
            if (goto$.$to()['$=='](goto$.$from())) {
              attach_side = "right"
            } else {
              attach_side = (function() {if ($truthy($rb_le(companion_note.$prev_pitch(), companion_note.$pitch()))) {
                return "right"
              } else {
                return "left"
              }; return nil; })()
            };
          };
          repeat_key = "" + "notebound.repeat_" + (point_role.$to_s()) + ".v_" + (voice_nr) + "." + (companion_note.$znid());
          pos_key = "" + (repeat_key) + ".pos";
          conf_key = "" + "extract." + (print_variant_nr) + "." + (pos_key);
          repeatsign_options = show_options['$[]']("repeatsigns")['$[]'](attach_side);
          annotationoffset = (function() { try {
            return show_options['$[]']("print_options_raw")['$[]'](pos_key)
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          if ($truthy(annotationoffset)) {
          } else {
            annotationoffset = repeatsign_options['$[]']("pos")
          };
          text = ($truthy($a = show_options['$[]']("print_options_raw")['$[]']("" + (repeat_key) + ".text")) ? $a : repeatsign_options['$[]']("text"));
          style = ($truthy($a = show_options['$[]']("print_options_raw")['$[]']("" + (repeat_key) + ".style")) ? $a : repeatsign_options['$[]']("style"));
          position = $rb_plus(self.$Vector2d(companion_note.$sheet_drawable().$center()), annotationoffset);
          return $send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(position.$to_a(), text, style, companion_note.$origin(), conf_key, annotationoffset), 'tap', [], ($$145 = function(s){var self = $$145.$$s || this, $writer = nil;

          
            
            if (s == null) {
              s = nil;
            };
            $writer = [$hash2(["handler"], {"handler": "annotation"})];
            $send(s, 'draginfo=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$145.$$s = self, $$145.$$arity = 1, $$145));
        }, $Default_make_repeatsign_annotation$144.$$arity = 5);
        self.$private();
        
        Opal.def(self, '$_mkflaps_pitches', $Default__mkflaps_pitches$146 = function $$_mkflaps_pitches(stringnames) {
          var $$147, self = this, pitchtable = nil, string_by_pitch = nil, flap_by_pitch = nil;

          
          pitchtable = self.$_mk_pitches_table();
          string_by_pitch = $hash2([], {});
          flap_by_pitch = $hash2([], {});
          $send(stringnames.$split(" ").$each_with_index(), 'each', [], ($$147 = function(k, i){var self = $$147.$$s || this, pitch = nil, $writer = nil;

          
            
            if (k == null) {
              k = nil;
            };
            
            if (i == null) {
              i = nil;
            };
            pitch = pitchtable['$[]'](k);
            
            $writer = [pitch, i];
            $send(string_by_pitch, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(k['$start_with?']("*"))) {
              
              $writer = [pitch, i];
              $send(flap_by_pitch, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            } else {
              return nil
            };}, $$147.$$s = self, $$147.$$arity = 2, $$147));
          return [string_by_pitch, flap_by_pitch.$keys()];
        }, $Default__mkflaps_pitches$146.$$arity = 1);
        
        Opal.def(self, '$_mk_pitches_table', $Default__mk_pitches_table$148 = function $$_mk_pitches_table() {
          var $$149, self = this, pitches = nil;

          
          pitches = $hash2(["C", "*C", "C#", "CIS", "D", "*D", "D#", "DIS", "DES", "DB", "E", "EB", "ES", "F", "*F", "F#", "FIS", "G", "*G", "G#", "GIS", "GES", "GB", "A", "*A", "A#", "AIS", "AS", "AB", "H", "B", "HB", "BB", "*HB", "*BB"], {"C": 60, "*C": 61, "C#": 61, "CIS": 61, "D": 62, "*D": 63, "D#": 63, "DIS": 63, "DES": 61, "DB": 61, "E": 64, "EB": 63, "ES": 63, "F": 65, "*F": 66, "F#": 66, "FIS": 66, "G": 67, "*G": 68, "G#": 68, "GIS": 68, "GES": 66, "GB": 66, "A": 69, "*A": 70, "A#": 70, "AIS": 70, "AS": 68, "AB": 68, "H": 71, "B": 71, "HB": 70, "BB": 70, "*HB": 71, "*BB": 71});
          $send(pitches.$keys(), 'each', [], ($$149 = function(k){var self = $$149.$$s || this, v = nil, $writer = nil;

          
            
            if (k == null) {
              k = nil;
            };
            v = pitches['$[]'](k);
            
            $writer = [$rb_plus(k, ","), $rb_minus(v, 12)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k, ",,"), $rb_minus(v, 24)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [k.$downcase(), $rb_plus(v, 12)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k.$downcase(), ","), v];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k.$downcase(), ",,"), $rb_minus(v, 12)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k.$downcase(), ",,,"), $rb_minus(v, 24)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k, "'"), $rb_plus(v, 12)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k, "''"), $rb_plus(v, 24)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k, "'''"), $rb_plus(v, 36)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k.$downcase(), "'"), $rb_plus(v, 24)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k.$downcase(), "''"), $rb_plus(v, 36)];
            $send(pitches, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_plus(k.$downcase(), "'''"), $rb_plus(v, 48)];
            $send(pitches, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$149.$$s = self, $$149.$$arity = 1, $$149));
          return pitches;
        }, $Default__mk_pitches_table$148.$$arity = 0);
        
        Opal.def(self, '$_instrument_akkordzither', $Default__instrument_akkordzither$150 = function $$_instrument_akkordzither(pitchoffset, xoffset, xspacing, print_variant_nr) {
          var $a, $b, $$151, self = this, string_by_pitch = nil, flaps_by_pitch = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          $b = self.$_mkflaps_pitches($gvars.conf['$[]']("" + "extract." + (print_variant_nr) + ".stringnames.text")), $a = Opal.to_ary($b), (string_by_pitch = ($a[0] == null ? nil : $a[0])), (flaps_by_pitch = ($a[1] == null ? nil : $a[1])), $b;
          self.pitch_to_xpos = self.$_mk_pitch_to_xpos(pitchoffset, xoffset, xspacing, string_by_pitch);
          self.draw_instrument = $send(self, 'lambda', [], ($$151 = function(){var self = $$151.$$s || this, $$152, result = nil;

          
            result = [];
            return $send(flaps_by_pitch, 'each', [], ($$152 = function(f){var self = $$152.$$s || this;
              if (self.pitch_to_xpos == null) self.pitch_to_xpos = nil;

            
              
              if (f == null) {
                f = nil;
              };
              return result.$push($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new([self.pitch_to_xpos.$call(f), self.$flaps_y()['$[]'](f)], "*", "large"));}, $$152.$$s = self, $$152.$$arity = 1, $$152));}, $$151.$$s = self, $$151.$$arity = 0, $$151));
          return (self.bottom_annotation_positions = [[150, 287], [150, 290], [260, 290]]);
        }, $Default__instrument_akkordzither$150.$$arity = 4);
        
        Opal.def(self, '$_mk_pitch_to_xpos', $Default__mk_pitch_to_xpos$153 = function $$_mk_pitch_to_xpos(pitchoffset, xoffset, xspacing, string_by_pitch) {
          var $$154, self = this;

          return $send(self, 'lambda', [], ($$154 = function(pitch){var self = $$154.$$s || this, pitch_to_stringpos = nil, result = nil;

          
            
            if (pitch == null) {
              pitch = nil;
            };
            pitch_to_stringpos = string_by_pitch['$[]']($rb_plus(pitch, pitchoffset));
            result = xspacing['$-@']();
            if ($truthy(pitch_to_stringpos)) {
              result = $rb_plus($rb_times(pitch_to_stringpos, xspacing), xoffset)};
            return result;}, $$154.$$s = self, $$154.$$arity = 1, $$154))
        }, $Default__mk_pitch_to_xpos$153.$$arity = 4);
        
        Opal.def(self, '$_instrument_okon', $Default__instrument_okon$155 = function $$_instrument_okon(pitchoffset, xoffset, xspacing, print_variant_nr) {
          var $a, $b, $$156, $$157, $$158, self = this, flaps = nil, pitches = nil, $case = nil, string_by_pitch = nil, flaps_by_pitch = nil, flaps_y = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          
          if (print_variant_nr == null) {
            print_variant_nr = 0;
          };
          flaps = "";
          pitches = "";
          $case = $gvars.conf['$[]']("layout.instrument");
          if ("okon-f"['$===']($case)) {
          pitches = "55 57 58 60 62 64 65 67 69 70 72 74 76 77 79 81 82 84";
          flaps = "";}
          else if ("okon-g"['$===']($case)) {
          pitches = "55 57 59 60 62 64 66 67 69 71 72 74 76 78 79 81 83 84";
          flaps = "      59          66       71          78       83 ";}
          else if ("okon-c"['$===']($case)) {
          pitches = "55 57 59 60 62 64 65 67 69 71 72 74 76 77 79 81 83 84";
          flaps = "      59                   71                   83";}
          else if ("okon-d"['$===']($case)) {
          pitches = "55 57 59 61 62 64 66 67 69 71 73 74 76 78 79 81 83 85";
          flaps = "      59 61       66       71 73       78       83";};
          string_by_pitch = $hash2([], {});
          if ("open"['$==']($gvars.conf['$[]']("" + "extract." + (print_variant_nr) + ".layout.tuning"))) {
            $b = self.$_mkflaps_pitches($gvars.conf['$[]']("" + "extract." + (print_variant_nr) + ".stringnames.text")), $a = Opal.to_ary($b), (string_by_pitch = ($a[0] == null ? nil : $a[0])), (flaps_by_pitch = ($a[1] == null ? nil : $a[1])), $b
          } else {
            
            string_by_pitch = $$($nesting, 'Hash')['$[]']($send(pitches.$split(" ").$each_with_index(), 'map', [], ($$156 = function(i, k){var self = $$156.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              
              if (k == null) {
                k = nil;
              };
              return [i.$to_i(), k];}, $$156.$$s = self, $$156.$$arity = 2, $$156)));
            flaps_by_pitch = $send(flaps.$split(" "), 'map', [], ($$157 = function(i){var self = $$157.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return i.$to_i();}, $$157.$$s = self, $$157.$$arity = 1, $$157));
          };
          self.pitch_to_xpos = self.$_mk_pitch_to_xpos(pitchoffset, xoffset, xspacing, string_by_pitch);
          flaps_y = $hash(59, 7, 61, 7, 66, 7, 71, 7, 73, 20, 78, 65, 83, 110);
          self.bottom_annotation_positions = [[xoffset, 290], [$rb_plus(xoffset, 200), 290], [$rb_plus(xoffset, 270), 290]];
          return (self.draw_instrument = $send(self, 'lambda', [], ($$158 = function(){var self = $$158.$$s || this, $$159, result = nil, res = nil, $writer = nil;
            if ($gvars.conf == null) $gvars.conf = nil;

          
            result = [];
            $send(flaps_by_pitch, 'each', [], ($$159 = function(f){var self = $$159.$$s || this;
              if (self.pitch_to_xpos == null) self.pitch_to_xpos = nil;

            
              
              if (f == null) {
                f = nil;
              };
              return result.$push($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new([self.pitch_to_xpos.$call(f), flaps_y['$[]'](f)], "*", "large"));}, $$159.$$s = self, $$159.$$arity = 1, $$159));
            res = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new([["M", $rb_minus(xoffset, 15), 280], ["L", $rb_minus(xoffset, 15), 0], ["M", $rb_plus(xoffset, 135), 0], ["L", $rb_plus(xoffset, 290), 157], ["L", $rb_plus(xoffset, 290), 280]], "open");
            
            $writer = [$gvars.conf.$get("layout.LINE_MEDIUM")];
            $send(res, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return result.$push(res);}, $$158.$$s = self, $$158.$$arity = 0, $$158)));
        }, $Default__instrument_okon$155.$$arity = -4);
        
        Opal.def(self, '$_instrument_saitenspiel', $Default__instrument_saitenspiel$160 = function $$_instrument_saitenspiel(pitchoffset, xoffset, xspacing) {
          var $$161, $$162, self = this;

          
          self.pitch_to_xpos = $send(self, 'lambda', [], ($$161 = function(pitch){var self = $$161.$$s || this, pitch_to_stringpos = nil, result = nil;

          
            
            if (pitch == null) {
              pitch = nil;
            };
            pitch_to_stringpos = $$($nesting, 'Hash')['$[]']([[31, 0], [36, 1], [38, 2], [40, 3], [41, 4], [43, 5], [45, 6], [47, 7], [48, 8], [50, 9]]);
            pitch_to_stringpos = pitch_to_stringpos['$[]']($rb_plus(pitch, pitchoffset));
            result = xspacing['$-@']();
            if ($truthy(pitch_to_stringpos)) {
              result = $rb_plus($rb_times(pitch_to_stringpos, xspacing), xoffset)};
            return result;}, $$161.$$s = self, $$161.$$arity = 1, $$161));
          self.bottom_annotation_positions = [[xoffset, 287], [xoffset, 290], [$rb_plus(xoffset, 100), 290]];
          return (self.draw_instrument = $send(self, 'lambda', [], ($$162 = function(){var self = $$162.$$s || this, res = nil, $writer = nil;
            if ($gvars.conf == null) $gvars.conf = nil;

          
            res = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new([["M", $rb_plus(xoffset, 30), 6], ["L", $rb_plus(xoffset, 180), 81], ["L", $rb_plus(xoffset, 180), 216], ["L", $rb_plus(xoffset, 30), 291]], "open");
            
            $writer = [$gvars.conf.$get("layout.LINE_MEDIUM")];
            $send(res, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return [res];}, $$162.$$s = self, $$162.$$arity = 0, $$162)));
        }, $Default__instrument_saitenspiel$160.$$arity = 3);
        
        Opal.def(self, '$_instrument_zipino', $Default__instrument_zipino$163 = function $$_instrument_zipino(pitchoffset, xoffset, xspacing) {
          var $$164, $$165, $$166, self = this, pitches = nil, string_by_pitch = nil;

          
          pitches = "54 55 57 59 60 62 64 66 67 69 71 72 74 76 78";
          string_by_pitch = $$($nesting, 'Hash')['$[]']($send(pitches.$split(" ").$each_with_index(), 'map', [], ($$164 = function(i, k){var self = $$164.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            return [i.$to_i(), k];}, $$164.$$s = self, $$164.$$arity = 2, $$164)));
          self.pitch_to_xpos = $send(self, 'lambda', [], ($$165 = function(pitch){var self = $$165.$$s || this, pitch_to_stringpos = nil, result = nil;

          
            
            if (pitch == null) {
              pitch = nil;
            };
            pitch_to_stringpos = string_by_pitch['$[]']($rb_plus(pitch, pitchoffset));
            result = xspacing['$-@']();
            if ($truthy(pitch_to_stringpos['$nil?']())) {
            } else {
              result = $rb_plus($rb_times(pitch_to_stringpos, xspacing), xoffset)
            };
            return result;}, $$165.$$s = self, $$165.$$arity = 1, $$165));
          self.bottom_annotation_positions = [[xoffset, 287], [xoffset, 290], [$rb_plus(xoffset, 100), 290]];
          self.draw_instrument = $send(self, 'lambda', [], ($$166 = function(){var self = $$166.$$s || this, res = nil, $writer = nil;
            if ($gvars.conf == null) $gvars.conf = nil;

          
            res = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new([["M", $rb_plus(xoffset, 30), 20], ["L", $rb_plus(xoffset, 190), 100], ["M", $rb_plus(xoffset, 190), 200], ["L", $rb_plus(xoffset, 30), 281]], "open");
            
            $writer = [$gvars.conf.$get("layout.LINE_MEDIUM")];
            $send(res, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return [res];}, $$166.$$s = self, $$166.$$arity = 0, $$166));
          return (self.instrument_orientation = "horizontal");
        }, $Default__instrument_zipino$163.$$arity = 3);
        
        Opal.def(self, '$_layout_voice_notebound_annotations', $Default__layout_voice_notebound_annotations$167 = function $$_layout_voice_notebound_annotations(print_variant_nr, show_options, voice) {
          var $$168, $$169, self = this, res_annotations = nil;

          return (res_annotations = $send($send(voice, 'select', [], ($$168 = function(c){var self = $$168.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return c['$is_a?']($$($nesting, 'NoteBoundAnnotation'));}, $$168.$$s = self, $$168.$$arity = 1, $$168)), 'map', [], ($$169 = function(annotation){var self = $$169.$$s || this, $a, $$170, notebound_pos_key = nil, show_from_config = nil, show = nil, conf_key = nil, annotationoffset = nil, style = nil, position = nil, result = nil;

          
            
            if (annotation == null) {
              annotation = nil;
            };
            notebound_pos_key = $rb_plus(annotation.$conf_key(), ".pos");
            show_from_config = show_options['$[]']("print_options_raw").$get($rb_plus(annotation.$conf_key(), ".show"));
            show = (function() {if ($truthy(show_from_config['$nil?']())) {
              return true
            } else {
              return show_from_config
            }; return nil; })();
            if ($truthy(notebound_pos_key)) {
              
              conf_key = "" + "extract." + (print_variant_nr) + "." + (notebound_pos_key);
              annotationoffset = (function() { try {
                return show_options['$[]']("print_options_raw").$get(notebound_pos_key)
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})();
              if ($truthy(annotationoffset)) {
              } else {
                annotationoffset = annotation.$position()
              };
            } else {
              
              annotationoffset = annotation.$position();
              conf_key = nil;
            };
            style = ($truthy($a = show_options['$[]']("print_options_raw").$get($rb_plus(annotation.$conf_key(), ".style"))) ? $a : annotation.$style());
            position = $rb_plus(self.$Vector2d(annotation.$companion().$sheet_drawable().$center()), annotationoffset);
            result = $send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(position.$to_a(), annotation.$text(), style, annotation.$companion().$origin(), conf_key, annotationoffset), 'tap', [], ($$170 = function(s){var self = $$170.$$s || this, $writer = nil;

            
              
              if (s == null) {
                s = nil;
              };
              $writer = [$hash2(["handler"], {"handler": "annotation"})];
              $send(s, 'draginfo=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$170.$$s = self, $$170.$$arity = 1, $$170));
            if ($truthy((($a = annotation.$policy()['$==']("Goto")) ? show_options['$[]']("jumpline")['$!']() : annotation.$policy()['$==']("Goto")))) {
              result = nil};
            if (show['$=='](false)) {
              result = nil};
            return result;}, $$169.$$s = self, $$169.$$arity = 1, $$169)))
        }, $Default__layout_voice_notebound_annotations$167.$$arity = 3);
        
        Opal.def(self, '$_layout_voice_chordsymbols', $Default__layout_voice_chordsymbols$171 = function $$_layout_voice_chordsymbols(print_variant_nr, show_options, voice) {
          var $$172, $$173, self = this, res_annotations = nil;

          
          res_annotations = $send($send(voice, 'select', [], ($$172 = function(c){var self = $$172.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return c['$is_a?']($$($nesting, 'Chordsymbol'));}, $$172.$$s = self, $$172.$$arity = 1, $$172)), 'map', [], ($$173 = function(annotation){var self = $$173.$$s || this, $a, $$174, chord_options = nil, notebound_pos_key = nil, show_from_config = nil, show = nil, cs_fixpos = nil, conf_key = nil, annotationoffset = nil, style = nil, position = nil, result = nil;

          
            
            if (annotation == null) {
              annotation = nil;
            };
            chord_options = show_options['$[]']("chords");
            notebound_pos_key = $rb_plus(annotation.$conf_key(), ".pos");
            show_from_config = show_options['$[]']("print_options_raw").$get($rb_plus(annotation.$conf_key(), ".show"));
            show = (function() {if ($truthy(show_from_config['$nil?']())) {
              return true
            } else {
              return show_from_config
            }; return nil; })();
            cs_fixpos = chord_options['$[]']("pos");
            if ($truthy(notebound_pos_key)) {
              
              conf_key = "" + "extract." + (print_variant_nr) + "." + (notebound_pos_key);
              annotationoffset = (function() { try {
                return show_options['$[]']("print_options_raw").$get(notebound_pos_key)
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})();
              if ($truthy(annotationoffset)) {
              } else {
                annotationoffset = cs_fixpos
              };
            } else {
              
              annotationoffset = cs_fixpos;
              conf_key = nil;
            };
            style = ($truthy($a = chord_options['$[]']("style")) ? $a : annotation.$style());
            position = $rb_plus(self.$Vector2d(annotation.$companion().$sheet_drawable().$center()), annotationoffset);
            result = $send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(position.$to_a(), annotation.$text(), style, annotation.$companion().$origin(), conf_key, annotationoffset), 'tap', [], ($$174 = function(s){var self = $$174.$$s || this, $writer = nil;

            
              
              if (s == null) {
                s = nil;
              };
              $writer = [$hash2(["handler"], {"handler": "annotation"})];
              $send(s, 'draginfo=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$174.$$s = self, $$174.$$arity = 1, $$174));
            if ($truthy((($a = annotation.$policy()['$==']("Goto")) ? show_options['$[]']("jumpline")['$!']() : annotation.$policy()['$==']("Goto")))) {
              result = nil};
            if (show['$=='](false)) {
              result = nil};
            return result;}, $$173.$$s = self, $$173.$$arity = 1, $$173));
          return res_annotations;
        }, $Default__layout_voice_chordsymbols$171.$$arity = 3);
        
        Opal.def(self, '$_laoyut_voice_repeatmarks', $Default__laoyut_voice_repeatmarks$175 = function $$_laoyut_voice_repeatmarks(print_variant_nr, show_options, voice, voice_nr) {
          var $$176, $$177, self = this, res_repeatmarks = nil;

          
          res_repeatmarks = [];
          if ($truthy(show_options['$[]']("repeatsigns")['$[]']("voices")['$include?'](show_options['$[]']("voice_nr")))) {
            res_repeatmarks = $send($send(voice, 'select', [], ($$176 = function(c){var self = $$176.$$s || this, $a;

            
              
              if (c == null) {
                c = nil;
              };
              return ($truthy($a = c['$is_a?']($$($nesting, 'Goto'))) ? c.$policy()['$[]']("is_repeat") : $a);}, $$176.$$s = self, $$176.$$arity = 1, $$176)), 'map', [], ($$177 = function(goto$){var self = $$177.$$s || this, startbar = nil, endbar = nil;

            
              
              if (goto$ == null) {
                goto$ = nil;
              };
              startbar = self.$make_repeatsign_annotation(goto$, "begin", print_variant_nr, show_options, voice_nr);
              endbar = self.$make_repeatsign_annotation(goto$, "end", print_variant_nr, show_options, voice_nr);
              return [endbar, startbar];}, $$177.$$s = self, $$177.$$arity = 1, $$177)).$flatten()};
          return res_repeatmarks;
        }, $Default__laoyut_voice_repeatmarks$175.$$arity = 4);
        
        Opal.def(self, '$_layout_voice_gotos', $Default__layout_voice_gotos$178 = function $$_layout_voice_gotos(print_variant_nr, show_options, voice) {
          var $$179, $$180, self = this, res_gotos = nil;

          return (res_gotos = $send($send(voice, 'select', [], ($$179 = function(c){var self = $$179.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return c['$is_a?']($$($nesting, 'Goto'));}, $$179.$$s = self, $$179.$$arity = 1, $$179)), 'map', [], ($$180 = function(goto$){var self = $$180.$$s || this, $a, $$181, conf_key = nil, distance = nil, old_conf_key = nil, is_visible = nil, from_anchor = nil, to_anchor = nil, vertical_anchor = nil, vertical = nil, from = nil, to = nil, swap = nil, verticalcut = nil, jumpline_info = nil, path = nil, draginfo = nil;
            if ($gvars.log == null) $gvars.log = nil;
            if ($gvars.conf == null) $gvars.conf = nil;

          
            
            if (goto$ == null) {
              goto$ = nil;
            };
            if ($truthy(goto$.$conf_key())) {
              
              conf_key = "" + "extract." + (print_variant_nr) + "." + (goto$.$conf_key());
              distance = show_options['$[]']("print_options_raw")['$[]'](goto$.$conf_key());
              if ($truthy(distance)) {
              } else {
                
                old_conf_key = conf_key.$gsub(/(.*)\.(\d+)\.(\d+)\.(\w+)/, "\\1.\\2.\\4");
                distance = show_options['$[]']("print_options_raw")['$[]'](old_conf_key);
              };};
            if ($truthy(distance)) {
            } else {
              distance = goto$.$policy()['$[]']("distance")
            };
            if ($truthy(distance)) {
            } else {
              distance = 1
            };
            is_visible = (function() {if (distance['$=='](0)) {
              return false
            } else {
              return true
            }; return nil; })();
            if ($truthy($rb_gt(distance, 0))) {
              distance = $rb_minus(distance, 1)};
            from_anchor = ($truthy($a = goto$.$policy()['$[]']("from_anchor")) ? $a : "after");
            to_anchor = ($truthy($a = goto$.$policy()['$[]']("to_anchor")) ? $a : "before");
            vertical_anchor = ($truthy($a = goto$.$policy()['$[]']("vertical_anchor")) ? $a : "from");
            $gvars.log.$debug("" + "vertical line x offset: " + (distance) + " " + ("./harpnotes.rb".$force_encoding("US-ASCII")) + ":" + (2037));
            vertical = $rb_times($rb_plus(distance, 0.5), $gvars.conf.$get("layout.X_SPACING"));
            from = goto$.$from().$sheet_drawable();
            to = goto$.$to().$sheet_drawable();
            if ($truthy($gvars.conf['$[]']("layout.bottomup"))) {
              
              swap = $hash2(["before", "after"], {"before": "after", "after": "before"});
              from_anchor = swap['$[]'](from_anchor);
              to_anchor = swap['$[]'](to_anchor);};
            verticalcut = self.$compute_vertical_cut(from, to);
            jumpline_info = $hash2(["from", "to", "vertical", "vertical_anchor", "padding", "xspacing", "jumpline_anchor", "verticalcut"], {"from": $hash2(["center", "size", "anchor"], {"center": from.$center(), "size": from.$size(), "anchor": from_anchor}), "to": $hash2(["center", "size", "anchor"], {"center": to.$center(), "size": to.$size(), "anchor": to_anchor}), "vertical": vertical, "vertical_anchor": vertical_anchor, "padding": goto$.$policy()['$[]']("padding"), "xspacing": $gvars.conf['$[]']("layout.X_SPACING"), "jumpline_anchor": $gvars.conf['$[]']("layout.jumpline_anchor"), "verticalcut": verticalcut});
            path = $$$($$$($$($nesting, 'Harpnotes'), 'Layout'), 'Default').$make_path_from_jumpline(jumpline_info);
            draginfo = $hash2(["handler", "jumpline", "xspacing"], {"handler": "jumpline", "jumpline": jumpline_info, "xspacing": $gvars.conf.$get("layout.X_SPACING")});
            if ($truthy(is_visible)) {
              if ($truthy(($truthy($a = goto$.$policy()['$[]']("is_repeat")) ? show_options['$[]']("repeatsigns")['$[]']("voices")['$include?'](show_options['$[]']("voice_nr")) : $a))) {
                return nil
              } else {
                return [$send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(path['$[]'](0), nil, goto$.$from()), 'tap', [], ($$181 = function(s){var self = $$181.$$s || this, $writer = nil;
                  if ($gvars.conf == null) $gvars.conf = nil;

                
                  
                  if (s == null) {
                    s = nil;
                  };
                  
                  $writer = [conf_key];
                  $send(s, 'conf_key=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [distance];
                  $send(s, 'conf_value=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$gvars.conf.$get("layout.LINE_THICK")];
                  $send(s, 'line_width=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [draginfo];
                  $send(s, 'draginfo=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$181.$$s = self, $$181.$$arity = 1, $$181)), $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(path['$[]'](1), "filled", goto$.$from()), $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(path['$[]'](2), "filled", goto$.$from())]
              }
            } else {
              return nil
            };}, $$180.$$s = self, $$180.$$arity = 1, $$180)).$flatten().$compact())
        }, $Default__layout_voice_gotos$178.$$arity = 3);
        
        Opal.def(self, '$_layout_voice_slurs', $Default__layout_voice_slurs$182 = function $$_layout_voice_slurs(playables) {
          var $$183, self = this, $writer = nil, tie_start = nil, res_slurs = nil;

          
          
          $writer = ["first_playable", playables.$first()];
          $send(self.slur_index, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          tie_start = playables.$first();
          return (res_slurs = $send(playables, 'inject', [[]], ($$183 = function(result, playable){var self = $$183.$$s || this, $$184, $$186, $$187, $$188, dx = nil, p1 = nil, p2 = nil, tiepath = nil;
            if (self.slur_index == null) self.slur_index = nil;
            if ($gvars.conf == null) $gvars.conf = nil;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (playable == null) {
              playable = nil;
            };
            if ($truthy(playable['$tie_end?']())) {
              
              dx = $rb_plus([tie_start.$sheet_drawable().$size()['$[]'](0), playable.$sheet_drawable().$size()['$[]'](0)].$max(), 0.5);
              p1 = $rb_plus(self.$Vector2d(tie_start.$sheet_drawable().$center()), [dx, -0.5]);
              p2 = $rb_plus(self.$Vector2d(playable.$sheet_drawable().$center()), [dx, 0.5]);
              tiepath = (function() {if ($truthy($gvars.conf['$[]']("layout.bottomup"))) {
                return self.$make_slur_path(p2, p1)
              } else {
                return self.$make_slur_path(p1, p2)
              }; return nil; })();
              if ($truthy(playable['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint')))) {
                $send(playable.$notes(), 'each_with_index', [], ($$184 = function(n, index){var self = $$184.$$s || this, $$185, e = nil;
                  if ($gvars.log == null) $gvars.log = nil;

                
                  
                  if (n == null) {
                    n = nil;
                  };
                  
                  if (index == null) {
                    index = nil;
                  };
                  try {
                    
                    p1 = tie_start.$notes()['$[]'](index);
                    dx = $rb_plus([p1.$sheet_drawable().$size()['$[]'](0), n.$sheet_drawable().$size()['$[]'](0)].$max(), 0.5);
                    p1 = $rb_plus(self.$Vector2d(p1.$sheet_drawable().$center()), [dx, -0.5]);
                    p2 = $rb_plus(self.$Vector2d(n.$sheet_drawable().$center()), [dx, 0.5]);
                    tiepath = self.$make_slur_path(p1, p2);
                    return result.$push($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(tiepath), 'tap', [], ($$185 = function(d){var self = $$185.$$s || this;
                      if ($gvars.conf == null) $gvars.conf = nil;

                    
                      
                      if (d == null) {
                        d = nil;
                      };
                      
                      $writer = [$gvars.conf.$get("layout.LINE_THICK")];
                      $send(d, 'line_width=', Opal.to_a($writer));
                      $writer[$rb_minus($writer["length"], 1)];;
                      
                      $writer = [self.$compute_color_by_variant_no(playable.$variant())];
                      $send(d, 'color=', Opal.to_a($writer));
                      return $writer[$rb_minus($writer["length"], 1)];;}, $$185.$$s = self, $$185.$$arity = 1, $$185)));
                  } catch ($err) {
                    if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
                      try {
                        return $gvars.log.$error("" + (e.$message()) + " tied chords which doesn't have same number of notes", n.$start_pos())
                      } finally { Opal.pop_exception() }
                    } else { throw $err; }
                  };}, $$184.$$s = self, $$184.$$arity = 2, $$184))
              } else {
                result.$push($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(tiepath), 'tap', [], ($$186 = function(d){var self = $$186.$$s || this;
                  if ($gvars.conf == null) $gvars.conf = nil;

                
                  
                  if (d == null) {
                    d = nil;
                  };
                  
                  $writer = [$gvars.conf.$get("layout.LINE_THICK")];
                  $send(d, 'line_width=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [self.$compute_color_by_variant_no(playable.$variant())];
                  $send(d, 'color=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$186.$$s = self, $$186.$$arity = 1, $$186)))
              };};
            if ($truthy(playable['$tie_start?']())) {
              tie_start = playable};
            $send(playable.$slur_starts(), 'each', [], ($$187 = function(s){var self = $$187.$$s || this;
              if (self.slur_index == null) self.slur_index = nil;

            
              
              if (s == null) {
                s = nil;
              };
              $writer = [s, playable];
              $send(self.slur_index, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$187.$$s = self, $$187.$$arity = 1, $$187));
            
            $writer = [playable.$slur_starts().$first(), playable];
            $send(self.slur_index, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            $send(playable.$slur_ends(), 'each', [], ($$188 = function(id){var self = $$188.$$s || this, $a, $$189, begin_slur = nil, slurpath = nil;
              if (self.slur_index == null) self.slur_index = nil;
              if ($gvars.conf == null) $gvars.conf = nil;

            
              
              if (id == null) {
                id = nil;
              };
              begin_slur = ($truthy($a = self.slur_index['$[]'](id)) ? $a : self.slur_index['$[]']("first_playable"));
              p1 = $rb_plus(self.$Vector2d(begin_slur.$sheet_drawable().$center()), [3, 0]);
              p2 = $rb_plus(self.$Vector2d(playable.$sheet_drawable().$center()), [3, 0]);
              slurpath = self.$make_slur_path(p1, p2);
              if ($truthy($gvars.conf.$get("layout.SHOW_SLUR"))) {
                return result.$push($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(slurpath), 'tap', [], ($$189 = function(d){var self = $$189.$$s || this;
                  if ($gvars.conf == null) $gvars.conf = nil;

                
                  
                  if (d == null) {
                    d = nil;
                  };
                  $writer = [$gvars.conf.$get("layout.LINE_MEDIUM")];
                  $send(d, 'line_width=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$189.$$s = self, $$189.$$arity = 1, $$189)))
              } else {
                return nil
              };}, $$188.$$s = self, $$188.$$arity = 1, $$188));
            return result;}, $$183.$$s = self, $$183.$$arity = 2, $$183)));
        }, $Default__layout_voice_slurs$182.$$arity = 1);
        
        Opal.def(self, '$_layout_voice_tuplets', $Default__layout_voice_tuplets$190 = function $$_layout_voice_tuplets(playables, print_variant_nr, show_options, voice_nr) {
          var $$191, self = this, tuplet_start = nil, tuplet_notes = nil, res_tuplets = nil;

          
          tuplet_start = playables.$first();
          tuplet_notes = [];
          return (res_tuplets = $send(playables, 'inject', [[]], ($$191 = function(result, playable){var self = $$191.$$s || this, $a, $b, $$192, $$193, $$194, $$195, tuplet_conf_key = nil, conf_key = nil, conf_key_pos = nil, tuplet_options = nil, p1 = nil, p2 = nil, tiepath = nil, bezier_anchor = nil, cp1 = nil, cp2 = nil, pos_from_conf = nil, configured_anchor = nil, conf_value = nil, shape_drag_callback = nil, conf_key_edit = nil, style = nil, draginfo = nil, text = nil;
            if ($gvars.conf == null) $gvars.conf = nil;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (playable == null) {
              playable = nil;
            };
            if ($truthy(playable['$tuplet_start?']())) {
              tuplet_start = playable};
            if ($truthy(tuplet_start)) {
              tuplet_notes.$push(playable.$time())};
            if ($truthy(playable['$tuplet_end?']())) {
              
              tuplet_conf_key = "" + "notebound.tuplet.v_" + (voice_nr) + "." + (tuplet_start.$znid());
              conf_key = "" + "extract." + (print_variant_nr) + "." + (tuplet_conf_key);
              conf_key_pos = "pos";
              tuplet_options = $$($nesting, 'Confstack').$new();
              tuplet_options.$push($gvars.conf['$[]']("defaults.notebound.tuplet"));
              try {
                tuplet_options.$push(show_options['$[]']("print_options_raw")['$[]'](tuplet_conf_key))
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };
              p1 = self.$Vector2d(tuplet_start.$sheet_drawable().$center());
              p2 = self.$Vector2d(playable.$sheet_drawable().$center());
              $b = self.$make_annotated_bezier_path([p1, p2], tuplet_options), $a = Opal.to_ary($b), (tiepath = ($a[0] == null ? nil : $a[0])), (bezier_anchor = ($a[1] == null ? nil : $a[1])), (cp1 = ($a[2] == null ? nil : $a[2])), (cp2 = ($a[3] == null ? nil : $a[3])), $b;
              pos_from_conf = (function() { try {
                return tuplet_options['$[]']("pos")
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                  try {
                    return [0, 0]
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }})();
              configured_anchor = $rb_plus(bezier_anchor, pos_from_conf);
              conf_value = $send($rb_minus(configured_anchor, bezier_anchor).$to_a(), 'map', [], ($$192 = function(i){var self = $$192.$$s || this;

              
                
                if (i == null) {
                  i = nil;
                };
                return i.$round(0);}, $$192.$$s = self, $$192.$$arity = 1, $$192));
              shape_drag_callback = $send(self, 'lambda', [], ($$193 = function(the_tuplet_options){var self = $$193.$$s || this;

              
                
                if (the_tuplet_options == null) {
                  the_tuplet_options = nil;
                };
                return nil;}, $$193.$$s = self, $$193.$$arity = 1, $$193));
              if (tuplet_options['$[]']("show")['$=='](false)) {
              } else {
                
                conf_key_edit = $rb_plus(conf_key, ".*");
                style = ($truthy($a = show_options['$[]']("print_options_raw")['$[]']("tuplets.style")) ? $a : "small");
                draginfo = $hash2(["handler", "p1", "p2", "cp1", "cp2", "mp", "tuplet_options", "conf_key", "callback"], {"handler": "tuplet", "p1": p1.$to_a(), "p2": p2.$to_a(), "cp1": cp1.$to_a(), "cp2": cp2.$to_a(), "mp": bezier_anchor, "tuplet_options": tuplet_options, "conf_key": conf_key, "callback": shape_drag_callback});
                text = ($truthy($a = show_options['$[]']("print_options_raw")['$[]']("tuplets.text")) ? $a : playable.$tuplet().$to_s());
                text = text.$gsub("{{tuplet}}", playable.$tuplet().$to_s());
                result.$push($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(tiepath), 'tap', [], ($$194 = function(d){var self = $$194.$$s || this, $writer = nil;
                  if ($gvars.conf == null) $gvars.conf = nil;

                
                  
                  if (d == null) {
                    d = nil;
                  };
                  
                  $writer = [conf_key_edit];
                  $send(d, 'conf_key=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$gvars.conf.$get("layout.LINE_THIN")];
                  $send(d, 'line_width=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [draginfo];
                  $send(d, 'draginfo=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, $$194.$$s = self, $$194.$$arity = 1, $$194)));
                result.$push($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(configured_anchor.$to_a(), text, style, tuplet_start.$origin(), $rb_plus(conf_key, "" + "." + (conf_key_pos)), conf_value.$to_a()), 'tap', [], ($$195 = function(s){var self = $$195.$$s || this, $writer = nil;

                
                  
                  if (s == null) {
                    s = nil;
                  };
                  $writer = [$hash2(["handler"], {"handler": "annotation"})];
                  $send(s, 'draginfo=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$195.$$s = self, $$195.$$arity = 1, $$195)));
              };
              tuplet_notes = [];
              tuplet_start = nil;};
            return result;}, $$191.$$s = self, $$191.$$arity = 2, $$191)));
        }, $Default__layout_voice_tuplets$190.$$arity = 4);
        
        Opal.def(self, '$_layout_voice_subflowlines', $Default__layout_voice_subflowlines$196 = function $$_layout_voice_subflowlines(default_tuplet_options, do_flowconf, print_variant_nr, show_options, voice, voice_nr) {
          var $$197, $$198, self = this, previous_note = nil, res_sub_flow = nil;

          
          previous_note = nil;
          return (res_sub_flow = $send($send(voice, 'select', [], ($$197 = function(c){var self = $$197.$$s || this, $a;

          
            
            if (c == null) {
              c = nil;
            };
            return ($truthy($a = c['$is_a?']($$($nesting, 'Playable'))) ? $a : c['$is_a?']($$($nesting, 'SynchPoint')));}, $$197.$$s = self, $$197.$$arity = 1, $$197)), 'map', [], ($$198 = function(playable){var self = $$198.$$s || this, $a, $b, $$199, res = nil, flowlines_conf_key = nil, flowlines_conf = nil, flowline_conf_key = nil, conf_from_options = nil, conf_key = nil, conf_key_edit = nil, p1 = nil, p2 = nil, tuplet_options = nil, tiepath = nil, bezier_anchor = nil, cp1 = nil, cp2 = nil, draginfo = nil;

          
            
            if (playable == null) {
              playable = nil;
            };
            if ($truthy(show_options['$[]']("synched_notes")['$include?'](playable.$proxy_note()))) {
            } else {
              
              res = nil;
              if ($truthy(($truthy($a = ($truthy($b = previous_note['$nil?']()['$!']()) ? previous_note.$visible() : $b)) ? playable.$visible() : $a))) {
                
                flowlines_conf_key = "" + "notebound.flowline.v_" + (voice_nr);
                flowlines_conf = ($truthy($a = show_options['$[]']("print_options_raw")['$[]'](flowlines_conf_key)) ? $a : $hash2([], {}));
                flowline_conf_key = "" + (playable.$znid());
                conf_from_options = flowlines_conf['$[]'](flowline_conf_key);
                if ($truthy(($truthy($a = conf_from_options) ? $a : do_flowconf['$=='](true)))) {
                  
                  conf_key = "" + "extract." + (print_variant_nr) + "." + (flowlines_conf_key) + "." + (flowline_conf_key);
                  conf_key_edit = $rb_plus(conf_key, ".*");
                  p1 = self.$Vector2d(previous_note.$sheet_drawable().$center());
                  p2 = self.$Vector2d(playable.$sheet_drawable().$center());
                  tuplet_options = $$($nesting, 'Confstack').$new();
                  tuplet_options.$push(default_tuplet_options);
                  try {
                    tuplet_options.$push(conf_from_options)
                  } catch ($err) {
                    if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                      try {
                        nil
                      } finally { Opal.pop_exception() }
                    } else { throw $err; }
                  };
                  $b = self.$make_annotated_bezier_path([p1, p2], tuplet_options), $a = Opal.to_ary($b), (tiepath = ($a[0] == null ? nil : $a[0])), (bezier_anchor = ($a[1] == null ? nil : $a[1])), (cp1 = ($a[2] == null ? nil : $a[2])), (cp2 = ($a[3] == null ? nil : $a[3])), $b;
                  if (do_flowconf['$=='](true)) {
                    draginfo = $hash2(["handler", "p1", "p2", "cp1", "cp2", "mp", "tuplet_options", "conf_key", "callback"], {"handler": "tuplet", "p1": p1.$to_a(), "p2": p2.$to_a(), "cp1": cp1.$to_a(), "cp2": cp2.$to_a(), "mp": bezier_anchor, "tuplet_options": tuplet_options, "conf_key": conf_key, "callback": nil})
                  } else {
                    draginfo = nil
                  };
                  res = $send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(tiepath, nil, nil, "dotted"), 'tap', [], ($$199 = function(d){var self = $$199.$$s || this, $writer = nil;

                  
                    
                    if (d == null) {
                      d = nil;
                    };
                    
                    $writer = [conf_key_edit];
                    $send(d, 'conf_key=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [draginfo];
                    $send(d, 'draginfo=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;}, $$199.$$s = self, $$199.$$arity = 1, $$199));
                } else {
                  res = $$($nesting, 'FlowLine').$new(previous_note.$sheet_drawable(), playable.$sheet_drawable(), "dotted")
                };};
              if ($truthy(playable['$first_in_part?']())) {
                res = nil};
            };
            previous_note = playable;
            return res;}, $$198.$$s = self, $$198.$$arity = 1, $$198)).$compact());
        }, $Default__layout_voice_subflowlines$196.$$arity = 6);
        
        Opal.def(self, '$_layout_voice_flowlines', $Default__layout_voice_flowlines$200 = function $$_layout_voice_flowlines(default_tuplet_options, do_flowconf, print_variant_nr, show_options, voice, voice_nr) {
          var $a, $$201, $$202, self = this, previous_note = nil, flowlines_conf_key = nil, flowlines_conf = nil, res_flow = nil;

          
          previous_note = nil;
          flowlines_conf_key = "" + "notebound.flowline.v_" + (voice_nr);
          flowlines_conf = ($truthy($a = show_options['$[]']("print_options_raw")['$[]'](flowlines_conf_key)) ? $a : $hash2([], {}));
          return (res_flow = $send($send(voice, 'select', [], ($$201 = function(c){var self = $$201.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return c['$is_a?']($$($nesting, 'Playable'));}, $$201.$$s = self, $$201.$$arity = 1, $$201)), 'map', [], ($$202 = function(playable){var self = $$202.$$s || this, $b, $c, $$203, res = nil, flowline_conf_key = nil, conf_from_options = nil, conf_key = nil, conf_key_edit = nil, p1 = nil, p2 = nil, tuplet_options = nil, tiepath = nil, bezier_anchor = nil, cp1 = nil, cp2 = nil, draginfo = nil, $writer = nil;
            if ($gvars.conf == null) $gvars.conf = nil;

          
            
            if (playable == null) {
              playable = nil;
            };
            res = nil;
            if ($truthy(previous_note['$nil?']())) {
            } else {
              
              if ($truthy(true)) {
                
                flowline_conf_key = "" + (playable.$znid());
                conf_from_options = flowlines_conf['$[]'](flowline_conf_key);
                if ($truthy(($truthy($b = conf_from_options) ? $b : do_flowconf['$=='](true)))) {
                  
                  conf_key = "" + "extract." + (print_variant_nr) + "." + (flowlines_conf_key) + "." + (flowline_conf_key);
                  conf_key_edit = $rb_plus(conf_key, ".*");
                  p1 = self.$Vector2d(previous_note.$sheet_drawable().$center());
                  p2 = self.$Vector2d(playable.$sheet_drawable().$center());
                  tuplet_options = $$($nesting, 'Confstack').$new();
                  tuplet_options.$push(default_tuplet_options);
                  try {
                    tuplet_options.$push(conf_from_options)
                  } catch ($err) {
                    if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                      try {
                        nil
                      } finally { Opal.pop_exception() }
                    } else { throw $err; }
                  };
                  $c = self.$make_annotated_bezier_path([p1, p2], tuplet_options), $b = Opal.to_ary($c), (tiepath = ($b[0] == null ? nil : $b[0])), (bezier_anchor = ($b[1] == null ? nil : $b[1])), (cp1 = ($b[2] == null ? nil : $b[2])), (cp2 = ($b[3] == null ? nil : $b[3])), $c;
                  if (do_flowconf['$=='](true)) {
                    draginfo = $hash2(["handler", "p1", "p2", "cp1", "cp2", "mp", "tuplet_options", "conf_key", "callback"], {"handler": "tuplet", "p1": p1.$to_a(), "p2": p2.$to_a(), "cp1": cp1.$to_a(), "cp2": cp2.$to_a(), "mp": bezier_anchor, "tuplet_options": tuplet_options, "conf_key": conf_key, "callback": nil})
                  } else {
                    draginfo = nil
                  };
                  res = $send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(tiepath), 'tap', [], ($$203 = function(d){var self = $$203.$$s || this, $writer = nil;

                  
                    
                    if (d == null) {
                      d = nil;
                    };
                    
                    $writer = [conf_key_edit];
                    $send(d, 'conf_key=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [draginfo];
                    $send(d, 'draginfo=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;}, $$203.$$s = self, $$203.$$arity = 1, $$203));
                } else {
                  res = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'FlowLine').$new(previous_note.$sheet_drawable(), playable.$sheet_drawable())
                };};
              
              $writer = [$gvars.conf.$get("layout.LINE_MEDIUM")];
              $send(res, 'line_width=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(previous_note['$visible?']())) {
              } else {
                res = nil
              };
            };
            if ($truthy(playable['$first_in_part?']())) {
              res = nil};
            if ($truthy(playable['$visible?']())) {
            } else {
              res = nil
            };
            previous_note = playable;
            return res;}, $$202.$$s = self, $$202.$$arity = 1, $$202)).$compact());
        }, $Default__layout_voice_flowlines$200.$$arity = 6);
        
        Opal.def(self, '$_layout_voice_playables', $Default__layout_voice_playables$204 = function $$_layout_voice_playables(beat_layout, playables, print_variant_nr, show_options, voice_nr) {
          var $$205, self = this, res_decorations = nil, res_playables = nil;

          
          res_decorations = [];
          res_playables = $send(playables, 'map', [], ($$205 = function(playable){var self = $$205.$$s || this, note_conf_base_tail = nil, note_conf_base = nil, result = nil, decoration_root = nil;

          
            
            if (playable == null) {
              playable = nil;
            };
            note_conf_base_tail = "" + "notebound.nconf.v_" + (voice_nr) + ".t_" + (playable.$time());
            note_conf_base = "" + "extract." + (print_variant_nr) + "." + (note_conf_base_tail);
            result = self.$layout_playable(playable, beat_layout, note_conf_base);
            decoration_root = result.$proxy();
            res_decorations.$push((function() {if ($truthy(playable.$decorations()['$empty?']())) {
              return []
            } else {
              return self.$make_decorations_per_playable(playable, decoration_root, print_variant_nr, show_options, voice_nr)
            }; return nil; })());
            decoration_root.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + (decoration_root.$conf_key().$gsub(/\.[^\.]+$/, "")) + ".nshift", "text": $$($nesting, 'I18n').$t("shift left"), "icon": "fa fa-arrow-left", "value": -0.5}));
            decoration_root.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + (decoration_root.$conf_key().$gsub(/\.[^\.]+$/, "")) + ".nshift", "text": $$($nesting, 'I18n').$t("shift right"), "icon": "fa fa-arrow-right", "value": 0.5}));
            decoration_root.$more_conf_keys().$push($hash2(["text", "icon", "value"], {"text": "---", "icon": "fa fa-arrows-v", "value": 0.5}));
            decoration_root.$more_conf_keys().$push($hash2(["conf_key", "text", "icon"], {"conf_key": "" + "extract." + (print_variant_nr) + ".notebound.minc." + (playable.$time()) + ".minc_f", "text": $$($nesting, 'I18n').$t("Edit Minc"), "icon": "fa fa-arrows-v"}));
            decoration_root.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + "extract." + (print_variant_nr) + ".notebound.minc." + (playable.$time()) + ".minc_f", "text": $$($nesting, 'I18n').$t("increase Minc"), "icon": "fa fa-arrow-down", "value": 0.5}));
            decoration_root.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + "extract." + (print_variant_nr) + ".notebound.minc." + (playable.$time()) + ".minc_f", "text": $$($nesting, 'I18n').$t("decrease Minc"), "icon": "fa fa-arrow-up", "value": -0.5}));
            return result.$shapes();}, $$205.$$s = self, $$205.$$arity = 1, $$205)).$flatten().$compact();
          res_decorations = res_decorations.$flatten().$compact();
          return [res_decorations, res_playables];
        }, $Default__layout_voice_playables$204.$$arity = 5);
        
        Opal.def(self, '$_layout_voice_handle_visibility', $Default__layout_voice_handle_visibility$206 = function $$_layout_voice_handle_visibility(playables, show_options) {
          var $$207, self = this, previous_note = nil;

          if ($truthy(show_options['$[]']("nonflowrest"))) {
            return nil
          } else {
            
            previous_note = nil;
            return $send(playables, 'each', [], ($$207 = function(c){var self = $$207.$$s || this, $a, $b, $writer = nil;

            
              
              if (c == null) {
                c = nil;
              };
              if ($truthy(($truthy($a = c['$is_a?']($$($nesting, 'Pause'))) ? show_options['$[]']("flowline")['$!']() : $a))) {
                
                $writer = [false];
                $send(c, 'visible=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(($truthy($a = ($truthy($b = c['$is_a?']($$($nesting, 'Pause'))) ? show_options['$[]']("subflowline")['$!']() : $b)) ? show_options['$[]']("flowline")['$!']() : $a))) {
                
                $writer = [false];
                $send(c, 'visible=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy(($truthy($a = ($truthy($b = show_options['$[]']("flowline")['$!']()) ? c.$visible() : $b)) ? show_options['$[]']("synched_notes")['$include?'](c.$proxy_note())['$!']() : $a))) {
                if ($truthy(previous_note['$nil?']())) {
                } else {
                  
                  $writer = [true];
                  $send(previous_note, 'visible=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                }};
              return (previous_note = c);}, $$207.$$s = self, $$207.$$arity = 1, $$207));
          }
        }, $Default__layout_voice_handle_visibility$206.$$arity = 2);
        
        Opal.def(self, '$_layout_sheet_annotations', $Default__layout_sheet_annotations$208 = function $$_layout_sheet_annotations(print_variant_nr) {
          var $$209, self = this, res_annotations = nil, e = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          res_annotations = [];
          
          try {
            $send(self.print_options_hash['$[]']("notes"), 'each', [], ($$209 = function(k, note){var self = $$209.$$s || this, $a, $$210, conf_key = nil, align = nil;

            
              
              if (k == null) {
                k = nil;
              };
              
              if (note == null) {
                note = nil;
              };
              conf_key = "" + "extract." + (print_variant_nr) + ".notes." + (k);
              align = ($truthy($a = note['$[]']("align")) ? $a : "r");
              align = (function() {if ($truthy(align['$==']("r"))) {
                return "left"
              } else {
                return "right"
              }; return nil; })();
              if ($truthy(note['$[]']("pos"))) {
              } else {
                self.$raise("" + ($$($nesting, 'I18n').$t("missing pos")) + " in " + (conf_key))
              };
              if ($truthy(note['$[]']("text"))) {
              } else {
                self.$raise("" + ($$($nesting, 'I18n').$t("missing text")) + " in " + (conf_key))
              };
              return res_annotations['$<<']($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(note['$[]']("pos"), self.$resolve_placeholder(note['$[]']("text"), conf_key), note['$[]']("style"), nil, "" + (conf_key) + ".pos", note['$[]']("pos")), 'tap', [], ($$210 = function(s){var self = $$210.$$s || this, $writer = nil;

              
                
                if (s == null) {
                  s = nil;
                };
                
                $writer = [align];
                $send(s, 'align=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [$hash2(["handler"], {"handler": "annotation"})];
                $send(s, 'draginfo=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, $$210.$$s = self, $$210.$$arity = 1, $$210)));}, $$209.$$s = self, $$209.$$arity = 2, $$209))
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
              try {
                $gvars.log.$error(e.$message())
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };;
          return res_annotations;
        }, $Default__layout_sheet_annotations$208.$$arity = 1);
        
        Opal.def(self, '$_layout_instrument', $Default__layout_instrument$211 = function $$_layout_instrument() {
          var $$212, self = this, res_instrument = nil, res = nil, $writer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          res_instrument = [];
          if ($truthy(self.draw_instrument)) {
            $send(self.draw_instrument.$call(), 'each', [], ($$212 = function(r){var self = $$212.$$s || this;

            
              
              if (r == null) {
                r = nil;
              };
              return res_instrument.$push(r);}, $$212.$$s = self, $$212.$$arity = 1, $$212))};
          if ($truthy(self.instrument_shape)) {
            
            res = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(self.instrument_shape, "open");
            
            $writer = [$gvars.conf.$get("layout.LINE_THICK")];
            $send(res, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            res_instrument.$push(res);};
          return res_instrument;
        }, $Default__layout_instrument$211.$$arity = 0);
        
        Opal.def(self, '$_layout_lyrics', $Default__layout_lyrics$213 = function $$_layout_lyrics(music, print_variant_nr) {
          var $$214, $$215, self = this, res_lyrics = nil, lyrics = nil, lyric_text = nil, text = nil, verses = nil;

          
          res_lyrics = [];
          lyrics = self.print_options_hash['$[]']("lyrics");
          lyric_text = music.$harpnote_options()['$[]']("lyrics")['$[]']("text");
          if ($truthy(lyric_text)) {
            
            text = lyric_text.$join("\n");
            if ($truthy(lyrics)) {
              
              verses = $send(text.$gsub("\t", " ").$squeeze(" ").$split(/\n\n+/), 'map', [], ($$214 = function(i){var self = $$214.$$s || this;

              
                
                if (i == null) {
                  i = nil;
                };
                return i.$strip();}, $$214.$$s = self, $$214.$$arity = 1, $$214));
              lyrics.$delete("versepos");
              $send(lyrics, 'each', [], ($$215 = function(key, entry){var self = $$215.$$s || this, $a, $$216, $$217, pos = nil, the_text = nil, conf_key = nil, conf_base = nil, style = nil;
                if (self.print_options_raw == null) self.print_options_raw = nil;

              
                
                if (key == null) {
                  key = nil;
                };
                
                if (entry == null) {
                  entry = nil;
                };
                pos = entry['$[]']("pos");
                the_text = $send(($truthy($a = entry['$[]']("verses")) ? $a : []), 'map', [], ($$216 = function(i){var self = $$216.$$s || this, j = nil;

                
                  
                  if (i == null) {
                    i = nil;
                  };
                  if (i['$=='](0)) {
                    j = 9999};
                  if ($truthy($rb_lt(i, 0))) {
                    j = i};
                  if ($truthy($rb_gt(i, 0))) {
                    j = $rb_minus(i, 1)};
                  return verses['$[]'](j);}, $$216.$$s = self, $$216.$$arity = 1, $$216)).$join("\n\n");
                conf_key = "" + "lyrics." + (key);
                conf_base = "" + "extract." + (print_variant_nr) + "." + (conf_key);
                style = ($truthy($a = self.print_options_raw.$get("" + (conf_key) + ".style")) ? $a : "regular");
                return res_lyrics['$<<']($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(pos, the_text, style, nil, "" + (conf_base) + ".pos", pos), 'tap', [], ($$217 = function(s){var self = $$217.$$s || this, $writer = nil;

                
                  
                  if (s == null) {
                    s = nil;
                  };
                  $writer = [$hash2(["handler"], {"handler": "annotation"})];
                  $send(s, 'draginfo=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$217.$$s = self, $$217.$$arity = 1, $$217)));}, $$215.$$s = self, $$215.$$arity = 2, $$215));};};
          return res_lyrics;
        }, $Default__layout_lyrics$213.$$arity = 2);
        
        Opal.def(self, '$_layout_zn_annotations', $Default__layout_zn_annotations$218 = function $$_layout_zn_annotations(filename, music) {
          var self = this, res_zn_annotations = nil, datestring = nil;

          
          res_zn_annotations = [];
          datestring = $$($nesting, 'Time').$now().$strftime("%Y-%m-%d %H:%M:%S");
          res_zn_annotations['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(self.bottom_annotation_positions['$[]'](0), "" + (filename) + " - created " + (datestring) + " by Zupfnoter " + ($$($nesting, 'VERSION')) + " [" + (self.uri['$[]']("hostname")) + "]", "smaller"));
          res_zn_annotations['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(self.bottom_annotation_positions['$[]'](1), "Zupfnoter: https://www.zupfnoter.de", "smaller"));
          res_zn_annotations['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(self.bottom_annotation_positions['$[]'](2), music.$checksum(), "smaller"));
          return res_zn_annotations;
        }, $Default__layout_zn_annotations$218.$$arity = 2);
        
        Opal.def(self, '$_layout_legend', $Default__layout_legend$219 = function $$_layout_legend(music, print_variant_nr, title) {
          var $a, $$220, $$221, self = this, res_legend = nil, meter = nil, key = nil, composer = nil, tempo = nil, print_variant_title = nil, title_pos = nil, title_style = nil, title_align = nil, legend_pos = nil, legend = nil, style = nil;

          
          res_legend = [];
          meter = music.$meta_data()['$[]']("meter");
          if ($truthy(meter)) {
            meter = meter.$last().$split("=").$first()};
          key = music.$meta_data()['$[]']("key");
          composer = music.$meta_data()['$[]']("composer");
          tempo = music.$meta_data()['$[]']("tempo_display");
          print_variant_title = self.print_options_hash['$[]']("title");
          title_pos = self.print_options_hash['$[]']("legend")['$[]']("pos");
          title_style = ($truthy($a = self.print_options_raw.$get("legend.tstyle")) ? $a : "large");
          title_align = ($truthy($a = self.print_options_raw.$get("legend.align")) ? $a : "r");
          title_align = (function() {if ($truthy(title_align['$==']("l"))) {
            return "right"
          } else {
            return "left"
          }; return nil; })();
          legend_pos = self.print_options_hash['$[]']("legend")['$[]']("spos");
          legend = "" + (print_variant_title) + "\n" + (composer) + "\nTakt: " + (meter) + " (" + (tempo) + ")\nTonart: " + (key);
          style = ($truthy($a = self.print_options_raw.$get("legend.style")) ? $a : "regular");
          res_legend['$<<']($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(title_pos, title, title_style, nil, "" + "extract." + (print_variant_nr) + ".legend.pos", title_pos), 'tap', [], ($$220 = function(s){var self = $$220.$$s || this, $writer = nil;

          
            
            if (s == null) {
              s = nil;
            };
            
            $writer = [$hash2(["handler"], {"handler": "annotation"})];
            $send(s, 'draginfo=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [title_align];
            $send(s, 'align=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$220.$$s = self, $$220.$$arity = 1, $$220)));
          if ($truthy(self.print_options_raw['$[]']("notes.T06_legend")['$nil?']())) {
            res_legend['$<<']($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(legend_pos, legend, style, nil, "" + "extract." + (print_variant_nr) + ".legend.spos", legend_pos), 'tap', [], ($$221 = function(s){var self = $$221.$$s || this, $writer = nil;

            
              
              if (s == null) {
                s = nil;
              };
              $writer = [$hash2(["handler"], {"handler": "annotation"})];
              $send(s, 'draginfo=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$221.$$s = self, $$221.$$arity = 1, $$221)))};
          return res_legend;
        }, $Default__layout_legend$219.$$arity = 3);
        
        Opal.def(self, '$_layout_cutmarks', $Default__layout_cutmarks$222 = function $$_layout_cutmarks(page_format) {
          var $a, $$223, self = this, res_cutmarks = nil, delta = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          res_cutmarks = [];
          if ($truthy((($a = page_format['$==']("A4")) ? $rb_gt($gvars.conf['$[]']("printer.a4_pages").$length(), 1) : page_format['$==']("A4")))) {
            
            delta = $rb_times(12.0, $gvars.conf.$get("layout.X_SPACING"));
            $send($range(1, 2, false), 'each', [], ($$223 = function(i){var self = $$223.$$s || this, $$224;

            
              
              if (i == null) {
                i = nil;
              };
              return $send([4, 290], 'each', [], ($$224 = function(y){var self = $$224.$$s || this;
                if ($gvars.conf == null) $gvars.conf = nil;

              
                
                if (y == null) {
                  y = nil;
                };
                return res_cutmarks['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new([$rb_plus($rb_plus($rb_times(0.25, $gvars.conf.$get("layout.X_SPACING")), $gvars.conf.$get("layout.X_OFFSET")), $rb_times(delta, i)), y], "x", "small", nil));}, $$224.$$s = self, $$224.$$arity = 1, $$224));}, $$223.$$s = self, $$223.$$arity = 1, $$223));};
          return res_cutmarks;
        }, $Default__layout_cutmarks$222.$$arity = 1);
        
        Opal.def(self, '$_layout_sortmark', $Default__layout_sortmark$225 = function $$_layout_sortmark(title, options) {
          var $$226, $a, $b, self = this, sortname = nil, b = nil, a = nil, w = nil, h = nil, fill = nil, markpos = nil, markpath = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          sortname = title.$upcase().$gsub(/[ÄÖÜYZß]/, $hash2(["Ä", "Ö", "Ü", "ß", "Y", "Z"], {"Ä": "AE", "Ö": "OE", "Ü": "UE", "ß": "ss", "Y": "X", "Z": "X"})).$gsub(/[^A-Za-z]/, "");
          b = $send($rb_plus(sortname, "AAAA").$split(""), 'map', [], ($$226 = function(i){var self = $$226.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return $rb_minus(i.$ord(), "A".$ord());}, $$226.$$s = self, $$226.$$arity = 1, $$226));
          a = $rb_plus(b['$[]'](0), $rb_divide($rb_times($rb_plus($rb_plus($rb_times(0.1, b['$[]'](1)), $rb_times(0.01, b['$[]'](2))), $rb_times(0.001, b['$[]'](3))), 0.5), 2.4));
          $b = options['$[]']("size"), $a = Opal.to_ary($b), (w = ($a[0] == null ? nil : $a[0])), (h = ($a[1] == null ? nil : $a[1])), $b;
          fill = (function() {if ($truthy(options['$[]']("fill"))) {
            return "filled"
          } else {
            return "open"
          }; return nil; })();
          markpos = $rb_times($rb_plus(12.5, a), $gvars.conf.$get("layout.X_SPACING"));
          markpath = [["M", markpos, 0], ["l", $rb_divide(w['$-@'](), 2), h], ["l", w, 0], ["l", $rb_divide(w['$-@'](), 2), h['$-@']()], ["l", 0, h], ["l", 0, h['$-@']()], ["z"]];
          return $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(markpath, fill);
        }, $Default__layout_sortmark$225.$$arity = 2);
        
        Opal.def(self, '$_layout_synclines', $Default__layout_synclines$227 = function $$_layout_synclines(music, required_synchlines) {
          var $$228, self = this, res_synch_lines = nil;

          return (res_synch_lines = $send(required_synchlines, 'map', [], ($$228 = function(selector){var self = $$228.$$s || this, $$229, synch_points_to_show = nil;

          
            
            if (selector == null) {
              selector = nil;
            };
            synch_points_to_show = music.$build_synch_points(selector);
            return $send(synch_points_to_show, 'map', [], ($$229 = function(sp){var self = $$229.$$s || this, res = nil, $writer = nil;

            
              
              if (sp == null) {
                sp = nil;
              };
              res = $$($nesting, 'FlowLine').$new(sp.$notes().$first().$sheet_drawable(), sp.$notes().$last().$sheet_drawable(), "dashed");
              
              $writer = [self.$compute_color_by_variant_no(sp.$notes().$first().$variant())];
              $send(res, 'color=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return res;}, $$229.$$s = self, $$229.$$arity = 1, $$229));}, $$228.$$s = self, $$228.$$arity = 1, $$228)).$flatten())
        }, $Default__layout_synclines$227.$$arity = 2);
        
        Opal.def(self, '$_layout_sheetmarks', $Default__layout_sheetmarks$230 = function $$_layout_sheetmarks(print_options_hash, print_variant_nr) {
          var $$231, $$233, self = this, vpos = nil, marks = nil, conf_key = nil, sheet_marks = nil, no_of_names = nil, scale = nil, start_scale = nil, end_scale = nil, style = nil, x_spacing = nil, x_offset = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          vpos = print_options_hash['$[]']("stringnames")['$[]']("vpos");
          marks = print_options_hash['$[]']("stringnames")['$[]']("marks")['$[]']("hpos");
          conf_key = "stringnames";
          sheet_marks = [];
          if ($truthy(marks['$empty?']())) {
          } else {
            sheet_marks = $rb_plus(sheet_marks, $send(marks, 'inject', [[]], ($$231 = function(result, pitch){var self = $$231.$$s || this, $$232;

            
              
              if (result == null) {
                result = nil;
              };
              
              if (pitch == null) {
                pitch = nil;
              };
              $send(print_options_hash['$[]']("stringnames")['$[]']("marks")['$[]']("vpos"), 'each', [], ($$232 = function(mark_vpos){var self = $$232.$$s || this, markpath = nil;
                if (self.pitch_to_xpos == null) self.pitch_to_xpos = nil;

              
                
                if (mark_vpos == null) {
                  mark_vpos = nil;
                };
                markpath = self.$make_sheetmark_path([self.pitch_to_xpos.$call(pitch), mark_vpos]);
                return result['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(markpath, "filled"));}, $$232.$$s = self, $$232.$$arity = 1, $$232));
              return result;}, $$231.$$s = self, $$231.$$arity = 2, $$231)))
          };
          if ($truthy(vpos['$empty?']())) {
          } else {
            
            no_of_names = 37;
            scale = print_options_hash['$[]']("stringnames")['$[]']("text").$split(" ");
            scale = $rb_times(scale, $rb_plus($rb_divide(no_of_names, scale.$length()), 1));
            start_scale = $gvars.conf.$get("layout.PITCH_OFFSET")['$-@']();
            end_scale = $rb_minus($rb_plus(start_scale, no_of_names), 1);
            vpos = print_options_hash['$[]']("stringnames")['$[]']("vpos");
            style = print_options_hash['$[]']("stringnames")['$[]']("style");
            x_spacing = $gvars.conf.$get("layout.X_SPACING");
            x_offset = $gvars.conf.$get("layout.X_OFFSET");
            sheet_marks = $rb_plus(sheet_marks, $send(Opal.Range.$new(start_scale, end_scale, false).$to_a(), 'inject', [[]], ($$233 = function(result, pitch){var self = $$233.$$s || this, $$234, x = nil;

            
              
              if (result == null) {
                result = nil;
              };
              
              if (pitch == null) {
                pitch = nil;
              };
              x = $rb_plus($rb_times($rb_plus(start_scale['$-@'](), pitch), x_spacing), x_offset);
              $send(vpos, 'each', [], ($$234 = function(vpos){var self = $$234.$$s || this, $$235;

              
                
                if (vpos == null) {
                  vpos = nil;
                };
                return result['$<<']($send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new([x, vpos], scale['$[]']($rb_minus(pitch, start_scale)), style, nil, conf_key), 'tap', [], ($$235 = function(d){var self = $$235.$$s || this, $writer = nil;

                
                  
                  if (d == null) {
                    d = nil;
                  };
                  $writer = ["center"];
                  $send(d, 'align=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];}, $$235.$$s = self, $$235.$$arity = 1, $$235)));}, $$234.$$s = self, $$234.$$arity = 1, $$234));
              return result;}, $$233.$$s = self, $$233.$$arity = 2, $$233)));
          };
          return sheet_marks;
        }, $Default__layout_sheetmarks$230.$$arity = 2);
        
        Opal.def(self, '$_layout_voices', $Default__layout_voices$236 = function $$_layout_voices(beat_layout, music, print_variant_nr) {
          var $$237, $a, $$238, $$239, $$240, $$241, $$242, $$245, self = this, beat_compression_map = nil, maximal_beat = nil, full_beat_spacing = nil, factor = nil, compressed_beat_layout_proc = nil, required_synchlines = nil, synched_notes = nil, active_voices = nil, res_voice_elements = nil, collisiondetector = nil;
          if ($gvars.log == null) $gvars.log = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          beat_compression_map = nil;
          $send($gvars.log, 'benchmark', ["compute beat compression map"], ($$237 = function(){var self = $$237.$$s || this, layoutlines = nil;
            if (self.print_options_hash == null) self.print_options_hash = nil;

          
            layoutlines = $rb_plus(self.print_options_hash['$[]']("voices"), self.print_options_hash['$[]']("layoutlines")).$uniq();
            return (beat_compression_map = self.$compute_beat_compression(music, layoutlines));}, $$237.$$s = self, $$237.$$arity = 0, $$237));
          maximal_beat = ($truthy($a = beat_compression_map.$values().$max()) ? $a : 0);
          full_beat_spacing = $rb_divide($rb_minus($gvars.conf.$get("layout.DRAWING_AREA_SIZE").$last(), self.y_offset), maximal_beat);
          if ($truthy($rb_lt(full_beat_spacing, self.beat_spacing))) {
            
            factor = $rb_divide(self.beat_spacing, full_beat_spacing);
            $gvars.log.$warning("" + "note distance too small (factor " + (factor) + ")");};
          self.beat_spacing = [full_beat_spacing, $rb_times($gvars.conf.$get("layout.packer.pack_max_spreadfactor"), self.beat_spacing)].$min();
          if ($truthy($gvars.conf.$get("layout.bottomup"))) {
            beat_layout = ($truthy($a = beat_layout) ? $a : $send($$($nesting, 'Proc'), 'new', [], ($$238 = function(beat){var self = $$238.$$s || this, r = nil;
              if (self.y_size == null) self.y_size = nil;
              if (self.beat_spacing == null) self.beat_spacing = nil;

            
              
              if (beat == null) {
                beat = nil;
              };
              return (r = self.y_size - beat * self.beat_spacing);}, $$238.$$s = self, $$238.$$arity = 1, $$238)))
          } else {
            beat_layout = ($truthy($a = beat_layout) ? $a : $send($$($nesting, 'Proc'), 'new', [], ($$239 = function(beat){var self = $$239.$$s || this, r = nil;
              if (self.beat_spacing == null) self.beat_spacing = nil;
              if (self.y_offset == null) self.y_offset = nil;

            
              
              if (beat == null) {
                beat = nil;
              };
              return (r = beat * self.beat_spacing + self.y_offset);}, $$239.$$s = self, $$239.$$arity = 1, $$239)))
          };
          compressed_beat_layout_proc = $send($$($nesting, 'Proc'), 'new', [], ($$240 = function(beat){var self = $$240.$$s || this;

          
            
            if (beat == null) {
              beat = nil;
            };
            return beat_layout.$call(beat_compression_map['$[]'](beat));}, $$240.$$s = self, $$240.$$arity = 1, $$240));
          required_synchlines = $send(self.print_options_hash['$[]']("synchlines"), 'select', [], ($$241 = function(sl){var self = $$241.$$s || this, $b;
            if (self.print_options_hash == null) self.print_options_hash = nil;

          
            
            if (sl == null) {
              sl = nil;
            };
            return ($truthy($b = self.print_options_hash['$[]']("voices")['$include?'](sl.$first())) ? self.print_options_hash['$[]']("voices")['$include?'](sl.$last()) : $b);}, $$241.$$s = self, $$241.$$arity = 1, $$241));
          synched_notes = [];
          $send($gvars.log, 'benchmark', ["build_syncpoints"], ($$242 = function(){var self = $$242.$$s || this, $$243;

          return (synched_notes = $send(required_synchlines, 'map', [], ($$243 = function(selector){var self = $$243.$$s || this, $$244, synch_points_to_show = nil;

            
              
              if (selector == null) {
                selector = nil;
              };
              synch_points_to_show = music.$build_synch_points(selector);
              return $send(synch_points_to_show, 'map', [], ($$244 = function(sp){var self = $$244.$$s || this;

              
                
                if (sp == null) {
                  sp = nil;
                };
                return sp.$synched_notes();}, $$244.$$s = self, $$244.$$arity = 1, $$244));}, $$243.$$s = self, $$243.$$arity = 1, $$243)).$flatten())}, $$242.$$s = self, $$242.$$arity = 0, $$242));
          active_voices = self.print_options_hash['$[]']("voices");
          res_voice_elements = $send(music.$voices().$each_with_index(), 'map', [], ($$245 = function(v, index){var self = $$245.$$s || this;
            if (self.print_options_hash == null) self.print_options_hash = nil;
            if (self.print_options_raw == null) self.print_options_raw = nil;

          
            
            if (v == null) {
              v = nil;
            };
            
            if (index == null) {
              index = nil;
            };
            if ($truthy(active_voices['$include?'](index))) {
              return self.$layout_voice(v, compressed_beat_layout_proc, print_variant_nr, $hash2(["voice_nr", "nonflowrest", "flowline", "subflowline", "jumpline", "repeatsigns", "synched_notes", "countnotes", "barnumbers", "chords", "print_options_raw"], {"voice_nr": index, "nonflowrest": self.print_options_hash['$[]']("nonflowrest"), "flowline": self.print_options_hash['$[]']("flowlines")['$include?'](index), "subflowline": self.print_options_hash['$[]']("subflowlines")['$include?'](index), "jumpline": self.print_options_hash['$[]']("jumplines")['$include?'](index), "repeatsigns": self.print_options_hash['$[]']("repeatsigns"), "synched_notes": synched_notes, "countnotes": self.$_get_options_by_voice(index, "countnotes"), "barnumbers": self.$_get_options_by_voice(index, "barnumbers"), "chords": self.$_get_options_by_voice(index, "chords"), "print_options_raw": self.print_options_raw}))
            } else {
              return nil
            };}, $$245.$$s = self, $$245.$$arity = 2, $$245)).$flatten().$compact();
          if ($truthy($gvars.log['$loglevel?']("warning"))) {
            
            collisiondetector = $$($nesting, 'CollisionDetector').$new();
            collisiondetector.$check_annotations(res_voice_elements);};
          return [active_voices, required_synchlines, res_voice_elements];
        }, $Default__layout_voices$236.$$arity = 3);
        
        Opal.def(self, '$_get_options_by_voice', $Default__get_options_by_voice$246 = function $$_get_options_by_voice(voice_id, option) {
          var self = this, options = nil;

          
          options = self.print_options_hash['$[]'](option);
          if ($truthy(options['$[]']("voices")['$include?'](voice_id))) {
          } else {
            options = nil
          };
          return options;
        }, $Default__get_options_by_voice$246.$$arity = 2);
        
        Opal.def(self, '$_layout_prepare_options', $Default__layout_prepare_options$247 = function $$_layout_prepare_options(print_variant_nr) {
          var $a, self = this, layout_options = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          self.print_options_raw = self.$get_print_options(print_variant_nr);
          self.print_options_hash = self.print_options_raw.$get();
          layout_options = ($truthy($a = self.print_options_hash['$[]']("layout")) ? $a : $hash2([], {}));
          $gvars.conf.$push($hash2(["layout"], {"layout": layout_options}));
          $gvars.conf.$push($hash2(["printer"], {"printer": ($truthy($a = self.print_options_hash['$[]']("printer")) ? $a : $hash2([], {}))}));
          self.$initialize();
          self.layout_minc = ($truthy($a = self.print_options_raw['$[]']("notebound.minc")) ? $a : $hash2([], {}));
          self.y_offset = self.print_options_hash['$[]']("startpos");
          self.y_size = $gvars.conf.$get("layout.DRAWING_AREA_SIZE").$last();
          return self.$set_instrument_handlers(print_variant_nr);
        }, $Default__layout_prepare_options$247.$$arity = 1);
        
        Opal.def(self, '$compute_vertical_cut', $Default_compute_vertical_cut$248 = function $$compute_vertical_cut(from, to) {
          var $a, self = this, verticalcut = nil, xf = nil, xt = nil, y = nil, z = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          verticalcut = ($truthy($a = $gvars.conf['$[]']("layout.jumpline_vcut")) ? $a : 0);
          xf = $rb_minus([from.$origin().$prev_playable(), from.$origin().$next_playable()], [from.$origin()]);
          xt = $rb_minus([to.$origin().$prev_playable(), to.$origin().$next_playable()], [to.$origin()]);
          y = [from.$origin(), to.$origin()].$compact();
          z = $rb_plus(xf, xt)['$&'](y);
          if ($truthy(z['$empty?']())) {
          } else {
            verticalcut = 0
          };
          return verticalcut;
        }, $Default_compute_vertical_cut$248.$$arity = 2);
        
        Opal.def(self, '$layout_barnumbers_countnotes', $Default_layout_barnumbers_countnotes$249 = function $$layout_barnumbers_countnotes(playables, print_variant_nr, show_options, voice_nr) {
          var $a, $$250, $b, $$251, self = this, limit_a3 = nil, bottomup = nil, cn_options = nil, bn_options = nil, res_countnotes = nil, res_barnumbers = nil, visible_playables = nil, cn_style = nil, cn_fontsize_x = nil, cn_fontsize_y = nil, cn_apanchor = nil, cn_autopos = nil, cn_fixedpos = nil, cn_apbase_x = nil, cn_apbase_y = nil, cn_text = nil, bn_style = nil, bn_fontsize_x = nil, bn_fontsize_y = nil, bn_apanchor = nil, bn_autopos = nil, bn_fixedpos = nil, bn_apbase_x = nil, bn_apbase_y = nil, bn_prefix = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          limit_a3 = $gvars.conf['$[]']("layout.limit_a3")['$=='](true);
          bottomup = $gvars.conf['$[]']("layout.bottomup")['$=='](true);
          cn_options = show_options['$[]']("countnotes");
          bn_options = show_options['$[]']("barnumbers");
          res_countnotes = [];
          res_barnumbers = [];
          if ($truthy(($truthy($a = cn_options) ? $a : bn_options))) {
            
            visible_playables = $send(playables, 'select', [], ($$250 = function(playable){var self = $$250.$$s || this;

            
              
              if (playable == null) {
                playable = nil;
              };
              return playable['$visible?']();}, $$250.$$s = self, $$250.$$arity = 1, $$250));
            if ($truthy(cn_options)) {
              
              cn_style = cn_options['$[]']("style");
              $a = [1, 1], (cn_fontsize_x = $a[0]), (cn_fontsize_y = $a[1]), $a;
              cn_apanchor = cn_options['$[]']("apanchor");
              cn_autopos = cn_options['$[]']("autopos");
              cn_fixedpos = cn_options['$[]']("pos");
              $b = cn_options['$[]']("apbase"), $a = Opal.to_ary($b), (cn_apbase_x = ($a[0] == null ? nil : $a[0])), (cn_apbase_y = ($a[1] == null ? nil : $a[1])), $b;
              cn_text = [cn_options['$[]']("cntextleft"), cn_options['$[]']("cntextright")].$compact();};
            if ($truthy(bn_options)) {
              
              bn_style = bn_options['$[]']("style");
              $a = [2.7, 2.7], (bn_fontsize_x = $a[0]), (bn_fontsize_y = $a[1]), $a;
              bn_apanchor = bn_options['$[]']("apanchor");
              bn_autopos = bn_options['$[]']("autopos");
              bn_fixedpos = bn_options['$[]']("pos");
              $b = bn_options['$[]']("apbase"), $a = Opal.to_ary($b), (bn_apbase_x = ($a[0] == null ? nil : $a[0])), (bn_apbase_y = ($a[1] == null ? nil : $a[1])), $b;
              bn_prefix = bn_options['$[]']("prefix");};
            $send(visible_playables, 'each', [], ($$251 = function(playable){var self = $$251.$$s || this, $c, $d, $$252, $$253, the_drawable = nil, dcenter = nil, x = nil, y = nil, dsize_x = nil, dsize_y = nil, dsize_d_x = nil, dsize_d_y = nil, xp = nil, yp = nil, xn = nil, yn = nil, bn_side = nil, cn_side = nil, cn_base_key = nil, cn_pos_key = nil, cn_align_key = nil, cn_dsize_y = nil, cn_offset = nil, cn_align = nil, count_note = nil, cn_pattern = nil, cn_tie_x = nil, auto_x = nil, auto_y = nil, cn_position = nil, annotation = nil, cn_conf_base = nil, bn_base_key = nil, bn_pos_key = nil, bn_align_key = nil, bn_conf_key = nil, barnumber = nil, bn_dsize_y = nil, bn_offset = nil, bn_align = nil, bn_tie_x = nil, bn_auto_x = nil, bn_auto_y = nil, bn_position = nil;
              if (self.print_options_keys == null) self.print_options_keys = nil;
              if (self.print_options_raw == null) self.print_options_raw = nil;

            
              
              if (playable == null) {
                playable = nil;
              };
              the_drawable = playable.$sheet_drawable();
              dcenter = the_drawable.$center();
              $d = dcenter, $c = Opal.to_ary($d), (x = ($c[0] == null ? nil : $c[0])), (y = ($c[1] == null ? nil : $c[1])), $d;
              $d = the_drawable.$size(), $c = Opal.to_ary($d), (dsize_x = ($c[0] == null ? nil : $c[0])), (dsize_y = ($c[1] == null ? nil : $c[1])), $d;
              $d = the_drawable.$size_with_dot(), $c = Opal.to_ary($d), (dsize_d_x = ($c[0] == null ? nil : $c[0])), (dsize_d_y = ($c[1] == null ? nil : $c[1])), $d;
              $d = playable.$prev_playable().$sheet_drawable().$center(), $c = Opal.to_ary($d), (xp = ($c[0] == null ? nil : $c[0])), (yp = ($c[1] == null ? nil : $c[1])), $d;
              $d = playable.$next_playable().$sheet_drawable().$center(), $c = Opal.to_ary($d), (xn = ($c[0] == null ? nil : $c[0])), (yn = ($c[1] == null ? nil : $c[1])), $d;
              $d = (function() {if ($truthy(bottomup)) {
                return self.$compute_note_position(xn, x, xp, limit_a3).$reverse()
              } else {
                return self.$compute_note_position(xp, x, xn, limit_a3)
              }; return nil; })(), $c = Opal.to_ary($d), (bn_side = ($c[0] == null ? nil : $c[0])), (cn_side = ($c[1] == null ? nil : $c[1])), $d;
              if ($truthy(cn_options)) {
                
                cn_base_key = "" + "notebound.countnote.v_" + (voice_nr) + ".t_" + (playable.$time());
                cn_pos_key = "" + (cn_base_key) + ".pos";
                cn_align_key = "" + (cn_base_key) + ".align";
                cn_dsize_y = (function() {if ($truthy("center"['$=='](cn_apanchor))) {
                  return 0
                } else {
                  return dsize_y
                }; return nil; })();
                if ($truthy(self.print_options_keys['$include?'](cn_pos_key))) {
                  cn_offset = self.print_options_raw['$[]'](cn_pos_key)};
                if ($truthy(($truthy($c = self.print_options_keys['$include?'](cn_align_key)) ? self.print_options_raw['$[]'](cn_align_key)['$!=']("auto") : $c))) {
                  cn_side = self.print_options_raw['$[]'](cn_align_key)};
                cn_align = (function() {if (cn_autopos['$=='](true)) {
                  
                  if ($truthy(cn_side['$==']("l"))) {
                    return "right"
                  } else {
                    return "left"
                  };
                } else {
                  return "left"
                }; return nil; })();
                if ($truthy(cn_text['$empty?']())) {
                  count_note = playable.$count_note()
                } else {
                  
                  cn_pattern = (function() {if (cn_side['$==']("l")) {
                    return cn_text.$first()
                  } else {
                    return cn_text.$last()
                  }; return nil; })();
                  count_note = cn_pattern.$gsub("{lyrics}", playable.$lyrics());
                  count_note = count_note.$gsub("{countnote}", playable.$count_note());
                };
                if ($truthy(cn_offset)) {
                } else if (cn_autopos['$=='](true)) {
                  
                  cn_tie_x = (function() {if ($truthy((($c = cn_side['$==']("r")) ? ($truthy($d = playable['$tie_start?']()) ? $d : playable['$tie_end?']()) : cn_side['$==']("r")))) {
                    return 1
                  } else {
                    return 0
                  }; return nil; })();
                  auto_x = $rb_plus(cn_tie_x, (function() {if (cn_side['$==']("l")) {
                    return $rb_plus(dsize_x, cn_apbase_x)['$-@']()
                  } else {
                    return $rb_plus(dsize_d_x, cn_apbase_x)
                  }; return nil; })());
                  auto_y = (function() {if ($truthy(bottomup)) {
                    return $rb_plus($rb_plus(cn_dsize_y, cn_apbase_y), $rb_times(cn_fontsize_y, 2))['$-@']()
                  } else {
                    return $rb_plus(cn_dsize_y, cn_apbase_y)
                  }; return nil; })();
                  cn_offset = [auto_x, auto_y];
                } else {
                  cn_offset = cn_fixedpos
                };
                cn_position = $rb_plus(self.$Vector2d(dcenter), cn_offset);
                annotation = $send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(cn_position.$to_a(), count_note, cn_style, playable.$origin(), "" + "extract." + (print_variant_nr) + "." + (cn_pos_key), cn_offset), 'tap', [], ($$252 = function(s){var self = $$252.$$s || this, $writer = nil;

                
                  
                  if (s == null) {
                    s = nil;
                  };
                  
                  $writer = [[true, (($writer = [cn_align]), $send(s, 'align=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])]];
                  $send(s, 'shift_eu=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$hash2(["handler"], {"handler": "annotation"})];
                  $send(s, 'draginfo=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  s.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + "extract." + (print_variant_nr) + "." + (cn_align_key), "text": $$($nesting, 'I18n').$t("countnote left"), "icon": "fa fa-arrow-left", "value": "l"}));
                  return s.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + "extract." + (print_variant_nr) + "." + (cn_align_key), "text": $$($nesting, 'I18n').$t("countnote right"), "icon": "fa fa-arrow-right", "value": "r"}));}, $$252.$$s = self, $$252.$$arity = 1, $$252));
                res_countnotes.$push(annotation);};
              if ($truthy(($truthy($c = bn_options) ? playable['$measure_start?']() : $c))) {
                
                cn_base_key = "" + "notebound.countnote.v_" + (voice_nr) + ".t_" + (playable.$time());
                cn_pos_key = "" + (cn_base_key) + ".pos";
                cn_align_key = "" + (cn_base_key) + ".align";
                cn_conf_base = "" + "extract." + (print_variant_nr) + "." + (cn_base_key);
                count_note = ($truthy($c = playable.$count_note()) ? $c : "");
                bn_base_key = "" + "notebound.barnumber.v_" + (voice_nr) + ".t_" + (playable.$time());
                bn_pos_key = "" + (bn_base_key) + ".pos";
                bn_align_key = "" + (bn_base_key) + ".align";
                bn_conf_key = "" + "extract." + (print_variant_nr) + "." + (bn_pos_key);
                barnumber = ($truthy($c = "" + (bn_prefix) + (playable.$measure_count().$to_s())) ? $c : "");
                bn_dsize_y = (function() {if ($truthy("center"['$=='](bn_apanchor))) {
                  return 0
                } else {
                  return dsize_y
                }; return nil; })();
                if ($truthy(self.print_options_keys['$include?'](bn_pos_key))) {
                  bn_offset = self.print_options_raw['$[]'](bn_pos_key)};
                if ($truthy(($truthy($c = self.print_options_keys['$include?'](bn_align_key)) ? self.print_options_raw['$[]'](bn_align_key)['$!=']("auto") : $c))) {
                  bn_side = self.print_options_raw['$[]'](bn_align_key)};
                bn_align = (function() {if (bn_autopos['$=='](true)) {
                  
                  if ($truthy(bn_side['$==']("l"))) {
                    return "right"
                  } else {
                    return "left"
                  };
                } else {
                  return "left"
                }; return nil; })();
                if ($truthy(bn_offset)) {
                } else if (bn_autopos['$=='](true)) {
                  
                  bn_tie_x = (function() {if ($truthy((($c = bn_side['$==']("r")) ? ($truthy($d = playable['$tie_start?']()) ? $d : playable['$tie_end?']()) : bn_side['$==']("r")))) {
                    return 1
                  } else {
                    return 0
                  }; return nil; })();
                  bn_auto_x = $rb_plus(bn_tie_x, (function() {if (bn_side['$==']("l")) {
                    return $rb_plus(dsize_x, bn_apbase_x)['$-@']()
                  } else {
                    return $rb_plus(dsize_d_x, bn_apbase_x)
                  }; return nil; })());
                  bn_auto_y = (function() {if ($truthy(bottomup)) {
                    return $rb_plus(bn_dsize_y, bn_apbase_y)
                  } else {
                    return $rb_plus($rb_plus(bn_dsize_y, bn_apbase_y), bn_fontsize_y)['$-@']()
                  }; return nil; })();
                  bn_offset = [bn_auto_x, bn_auto_y];
                } else {
                  bn_offset = bn_fixedpos
                };
                bn_position = $rb_plus(self.$Vector2d(dcenter), bn_offset);
                annotation = $send($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation').$new(bn_position.$to_a(), barnumber, bn_style, playable.$origin(), "" + "extract." + (print_variant_nr) + "." + (bn_pos_key), bn_offset), 'tap', [], ($$253 = function(s){var self = $$253.$$s || this, $writer = nil;

                
                  
                  if (s == null) {
                    s = nil;
                  };
                  
                  $writer = [bn_align];
                  $send(s, 'align=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$hash2(["handler"], {"handler": "annotation"})];
                  $send(s, 'draginfo=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  s.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + "extract." + (print_variant_nr) + "." + (bn_align_key), "text": $$($nesting, 'I18n').$t("barnumber left"), "icon": "fa fa-arrow-left", "value": "l"}));
                  return s.$more_conf_keys().$push($hash2(["conf_key", "text", "icon", "value"], {"conf_key": "" + "extract." + (print_variant_nr) + "." + (bn_align_key), "text": $$($nesting, 'I18n').$t("barnumber right"), "icon": "fa fa-arrow-right", "value": "r"}));}, $$253.$$s = self, $$253.$$arity = 1, $$253));
                return res_barnumbers.$push(annotation);
              } else {
                return nil
              };}, $$251.$$s = self, $$251.$$arity = 1, $$251));};
          return [res_barnumbers, res_countnotes];
        }, $Default_layout_barnumbers_countnotes$249.$$arity = 4);
        
        Opal.def(self, '$create_annotation_background_rect', $Default_create_annotation_background_rect$254 = function $$create_annotation_background_rect(annotation, padding) {
          var $$255, self = this, bn_position = nil, bgsize = nil, bgsize_padded = nil, background_x = nil, background_y = nil, $writer = nil, background = nil;

          
          
          if (padding == null) {
            padding = 0.1;
          };
          bn_position = (bn_position = self.$Vector2d(annotation.$center()));
          bgsize = $send(annotation.$size(), 'map', [], ($$255 = function(i){var self = $$255.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return $rb_times(i, 0.5);}, $$255.$$s = self, $$255.$$arity = 1, $$255));
          bgsize_padded = [$rb_plus(bgsize.$first(), padding), $rb_plus(bgsize.$last(), padding)];
          background_x = (function() {if ($truthy(annotation.$align()['$==']("left"))) {
            return bgsize.$first()
          } else {
            return bgsize.$first()['$-@']()
          }; return nil; })();
          background_y = bgsize.$last();
          if ($truthy(annotation['$shift_eu?']())) {
            
            background_y = $rb_minus($rb_times(bgsize['$[]'](1), 1), $rb_times(padding, 0.7));
            
            $writer = [1, $rb_times(bgsize_padded['$[]'](1), 0.5)];
            $send(bgsize_padded, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          } else if ($truthy(/[|gyqp]/.$match(annotation.$text()))) {
          } else {
            
            background_y = $rb_minus($rb_times(bgsize['$[]'](1), 1), $rb_times(padding, 0.5));
            
            $writer = [1, $rb_times(bgsize_padded['$[]'](1), 0.7)];
            $send(bgsize_padded, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
          };
          background = $$($nesting, 'Ellipse').$new($rb_plus(bn_position, [background_x, background_y]).$to_a(), bgsize_padded, "filled", false, nil, true);
          
          $writer = ["white"];
          $send(background, 'color=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return background;
        }, $Default_create_annotation_background_rect$254.$$arity = -2);
        
        Opal.def(self, '$compute_beat_compression', $Default_compute_beat_compression$256 = function $$compute_beat_compression(music, layout_lines) {
          var $a, self = this, result = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          if ($gvars.conf.$get("layout.packer.pack_method")['$=='](1)) {
            result = self.$compute_beat_compression_1(music, layout_lines)};
          if ($gvars.conf.$get("layout.packer.pack_method")['$=='](2)) {
            result = self.$compute_beat_compression_2(music, layout_lines)};
          if ($gvars.conf.$get("layout.packer.pack_method")['$=='](3)) {
            result = self.$compute_beat_compression_3(music, layout_lines)};
          if ($gvars.conf.$get("layout.packer.pack_method")['$=='](10)) {
            result = self.$compute_beat_compression_10(music, layout_lines)};
          if (($truthy($a = $gvars.conf.$get("layout.packer.pack_method")) ? $a : 0)['$=='](0)) {
            result = self.$compute_beat_compression_0(music, layout_lines)};
          return result;
        }, $Default_compute_beat_compression$256.$$arity = 2);
        
        Opal.def(self, '$compute_beat_compression_2', $Default_compute_beat_compression_2$257 = function $$compute_beat_compression_2(music, layout_lines) {
          var $$258, $$259, $$260, $$261, $$262, $$263, $$264, self = this, compression_map = nil, relevant_notes = nil, relevant_sp = nil, relevant_beats = nil;

          
          compression_map = $hash2([], {});
          relevant_notes = $send($send($send(layout_lines, 'map', [], ($$258 = function(voice_id){var self = $$258.$$s || this;

          
            
            if (voice_id == null) {
              voice_id = nil;
            };
            return music.$voices()['$[]'](voice_id);}, $$258.$$s = self, $$258.$$arity = 1, $$258)), 'inject', [[]], ($$259 = function(result, voice){var self = $$259.$$s || this;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (voice == null) {
              voice = nil;
            };
            return result.$push(voice);}, $$259.$$s = self, $$259.$$arity = 2, $$259)).$flatten(), 'select', [], ($$260 = function(note){var self = $$260.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable'));}, $$260.$$s = self, $$260.$$arity = 1, $$260));
          relevant_sp = $send($send(relevant_notes, 'select', [], ($$261 = function(note){var self = $$261.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint'));}, $$261.$$s = self, $$261.$$arity = 1, $$261)), 'map', [], ($$262 = function(sp){var self = $$262.$$s || this;

          
            
            if (sp == null) {
              sp = nil;
            };
            return sp.$notes();}, $$262.$$s = self, $$262.$$arity = 1, $$262));
          relevant_notes = relevant_notes.$push(relevant_sp).$flatten();
          relevant_beats = $send(relevant_notes, 'group_by', [], ($$263 = function(playable){var self = $$263.$$s || this;

          
            
            if (playable == null) {
              playable = nil;
            };
            return playable.$beat();}, $$263.$$s = self, $$263.$$arity = 1, $$263));
          $send(relevant_beats.$keys().$sort(), 'each', [], ($$264 = function(beat){var self = $$264.$$s || this, $writer = nil;

          
            
            if (beat == null) {
              beat = nil;
            };
            $writer = [beat, $rb_times(beat, 8)];
            $send(compression_map, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$264.$$s = self, $$264.$$arity = 1, $$264));
          return compression_map;
        }, $Default_compute_beat_compression_2$257.$$arity = 2);
        
        Opal.def(self, '$compute_beat_compression_10', $Default_compute_beat_compression_10$265 = function $$compute_beat_compression_10(music, layout_lines) {
          var $$266, $$267, $$268, $$269, self = this, max_beat = nil, current_beat = nil, last_size = nil, relevant_beat_maps = nil, relevant_keys = nil, duration_to_style = nil, result = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          max_beat = $send(music.$beat_maps(), 'map', [], ($$266 = function(map){var self = $$266.$$s || this;

          
            
            if (map == null) {
              map = nil;
            };
            return map.$keys().$max();}, $$266.$$s = self, $$266.$$arity = 1, $$266)).$max();
          current_beat = 0;
          last_size = 0;
          relevant_beat_maps = $send(layout_lines, 'inject', [[]], ($$267 = function(r, i){var self = $$267.$$s || this;

          
            
            if (r == null) {
              r = nil;
            };
            
            if (i == null) {
              i = nil;
            };
            return r.$push(music.$beat_maps()['$[]'](i));}, $$267.$$s = self, $$267.$$arity = 2, $$267)).$compact();
          relevant_keys = $send(music.$beat_maps(), 'inject', [[]], ($$268 = function(r, a){var self = $$268.$$s || this;

          
            
            if (r == null) {
              r = nil;
            };
            
            if (a == null) {
              a = nil;
            };
            r.$push(a.$keys());
            return r;}, $$268.$$s = self, $$268.$$arity = 2, $$268)).$flatten().$uniq().$sort();
          duration_to_style = $gvars.conf.$get("layout.DURATION_TO_STYLE");
          result = $$($nesting, 'Hash')['$[]']($send(relevant_keys, 'map', [], ($$269 = function(beat){var self = $$269.$$s || this, $$270, $$271, $$272, $$273, notes_on_beat = nil, max_duration_on_beat = nil, has_no_notes_on_beat = nil, is_new_part = nil, measure_start = nil, size = nil, e = nil, increment = nil;
            if (self.conf_beat_resolution == null) self.conf_beat_resolution = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (beat == null) {
              beat = nil;
            };
            notes_on_beat = $send(relevant_beat_maps, 'map', [], ($$270 = function(bm){var self = $$270.$$s || this;

            
              
              if (bm == null) {
                bm = nil;
              };
              return bm['$[]'](beat);}, $$270.$$s = self, $$270.$$arity = 1, $$270)).$flatten().$compact();
            max_duration_on_beat = $send(notes_on_beat, 'map', [], ($$271 = function(n){var self = $$271.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n.$duration();}, $$271.$$s = self, $$271.$$arity = 1, $$271)).$max();
            has_no_notes_on_beat = notes_on_beat['$empty?']();
            is_new_part = $send(notes_on_beat, 'select', [], ($$272 = function(n){var self = $$272.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$first_in_part?']();}, $$272.$$s = self, $$272.$$arity = 1, $$272));
            measure_start = $send(notes_on_beat, 'select', [], ($$273 = function(n){var self = $$273.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$measure_start?']();}, $$273.$$s = self, $$273.$$arity = 1, $$273)).$first();
            if ($truthy(has_no_notes_on_beat)) {
            } else {
              
              
              try {
                size = self.conf_beat_resolution * duration_to_style['$[]'](self.$duration_to_id(max_duration_on_beat)).$first()
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
                  try {
                    $gvars.log.$error("" + "BUG: unsupported duration: " + (max_duration_on_beat) + " on beat " + (beat) + ",  " + (notes_on_beat.$to_json()))
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };;
              increment = $rb_divide($rb_plus(size, last_size), 2);
              last_size = size;
              if ($truthy(measure_start)) {
                increment = $rb_plus(increment, $rb_divide(increment, 4))};
              if ($truthy(is_new_part['$empty?']())) {
              } else {
                increment = $rb_plus(increment, increment)
              };
              increment = $rb_plus(increment, self.$get_minc_factor(notes_on_beat.$first().$time(), increment));
              current_beat = $rb_plus(current_beat, increment);
            };
            return [beat, current_beat];}, $$269.$$s = self, $$269.$$arity = 1, $$269)));
          return result;
        }, $Default_compute_beat_compression_10$265.$$arity = 2);
        
        Opal.def(self, '$get_minc_factor', $Default_get_minc_factor$274 = function $$get_minc_factor(time, increment) {
          var self = this, minc = nil;

          
          
          if (increment == null) {
            increment = self.conf_beat_resolution;
          };
          minc = self.layout_minc['$[]'](time.$to_s());
          if ($truthy(minc)) {
            try {
              return $rb_times(minc['$[]']("minc_f"), increment)
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return 0
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }
          } else {
            return 0
          };
        }, $Default_get_minc_factor$274.$$arity = -2);
        
        Opal.def(self, '$compute_beat_compression_0', $Default_compute_beat_compression_0$275 = function $$compute_beat_compression_0(music, layout_lines) {
          var $a, $$276, $$277, $$278, $$279, $$280, $$281, $$282, self = this, duration_to_style = nil, conf_min_increment = nil, newbeat = nil, compression_map = nil, last_size = nil, relevant_notes = nil, relevant_sp = nil, relevant_beats = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          duration_to_style = $gvars.conf.$get("layout.DURATION_TO_STYLE");
          conf_min_increment = $rb_times(($truthy($a = $gvars.conf.$get("layout.packer.pack_min_increment")) ? $a : 0), self.conf_beat_resolution);
          newbeat = 0;
          compression_map = $hash2([], {});
          last_size = 0;
          relevant_notes = $send($send($send(layout_lines, 'map', [], ($$276 = function(voice_id){var self = $$276.$$s || this;

          
            
            if (voice_id == null) {
              voice_id = nil;
            };
            return music.$voices()['$[]'](voice_id);}, $$276.$$s = self, $$276.$$arity = 1, $$276)), 'inject', [[]], ($$277 = function(result, voice){var self = $$277.$$s || this;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (voice == null) {
              voice = nil;
            };
            return result.$push(voice);}, $$277.$$s = self, $$277.$$arity = 2, $$277)).$flatten(), 'select', [], ($$278 = function(note){var self = $$278.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable'));}, $$278.$$s = self, $$278.$$arity = 1, $$278));
          relevant_sp = $send($send(relevant_notes, 'select', [], ($$279 = function(note){var self = $$279.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint'));}, $$279.$$s = self, $$279.$$arity = 1, $$279)), 'map', [], ($$280 = function(sp){var self = $$280.$$s || this;

          
            
            if (sp == null) {
              sp = nil;
            };
            return sp.$notes();}, $$280.$$s = self, $$280.$$arity = 1, $$280));
          relevant_notes = relevant_notes.$push(relevant_sp).$flatten();
          relevant_beats = $send(relevant_notes, 'group_by', [], ($$281 = function(playable){var self = $$281.$$s || this;

          
            
            if (playable == null) {
              playable = nil;
            };
            return playable.$beat();}, $$281.$$s = self, $$281.$$arity = 1, $$281));
          $send(relevant_beats.$keys().$sort(), 'each', [], ($$282 = function(beat){var self = $$282.$$s || this, $$283, $$284, $$285, notes = nil, max_duration_on_beat = nil, is_new_part = nil, measure_start = nil, size = nil, e = nil, defaultincrement = nil, increment = nil, $writer = nil;
            if (self.conf_beat_resolution == null) self.conf_beat_resolution = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (beat == null) {
              beat = nil;
            };
            notes = relevant_beats['$[]'](beat);
            max_duration_on_beat = $send(notes, 'map', [], ($$283 = function(n){var self = $$283.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n.$duration();}, $$283.$$s = self, $$283.$$arity = 1, $$283)).$max();
            is_new_part = $send(notes, 'select', [], ($$284 = function(n){var self = $$284.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$first_in_part?']();}, $$284.$$s = self, $$284.$$arity = 1, $$284));
            measure_start = $send(notes, 'select', [], ($$285 = function(n){var self = $$285.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$measure_start?']();}, $$285.$$s = self, $$285.$$arity = 1, $$285));
            
            try {
              size = self.conf_beat_resolution * duration_to_style['$[]'](self.$duration_to_id(max_duration_on_beat)).$first()
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
                try {
                  $gvars.log.$error("" + "BUG: unsupported duration: " + (max_duration_on_beat) + " on beat " + (beat) + ",  " + (self.$notes_on_beat().$to_json()))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            defaultincrement = $rb_divide($rb_plus(size, last_size), 2);
            last_size = size;
            increment = defaultincrement;
            if ($truthy(is_new_part['$empty?']())) {
            } else {
              increment = $rb_plus(increment, defaultincrement)
            };
            if ($truthy(measure_start['$empty?']())) {
            } else {
              increment = $rb_plus(increment, $rb_divide(increment, 4))
            };
            increment = $rb_plus(increment, self.$get_minc_factor(notes.$first().$time(), defaultincrement));
            newbeat = $rb_plus(newbeat, increment);
            
            $writer = [beat, newbeat];
            $send(compression_map, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$282.$$s = self, $$282.$$arity = 1, $$282));
          return compression_map;
        }, $Default_compute_beat_compression_0$275.$$arity = 2);
        
        Opal.def(self, '$compute_beat_compression_1', $Default_compute_beat_compression_1$286 = function $$compute_beat_compression_1(music, layout_lines) {
          var $a, $$287, $$288, $$289, $$290, $$291, $$292, $$293, self = this, duration_to_style = nil, conf_min_increment = nil, collision_stack = nil, compression_map = nil, newbeat = nil, nextincrement = nil, last_size = nil, relevant_notes = nil, relevant_sp = nil, relevant_beats = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          duration_to_style = $gvars.conf.$get("layout.DURATION_TO_STYLE");
          conf_min_increment = $rb_times(($truthy($a = $gvars.conf.$get("layout.packer.pack_min_increment")) ? $a : 0), self.conf_beat_resolution);
          collision_stack = $hash2([], {});
          compression_map = $hash2([], {});
          newbeat = 0;
          nextincrement = 0;
          last_size = 0;
          relevant_notes = $send($send($send(layout_lines, 'map', [], ($$287 = function(voice_id){var self = $$287.$$s || this;

          
            
            if (voice_id == null) {
              voice_id = nil;
            };
            return music.$voices()['$[]'](voice_id);}, $$287.$$s = self, $$287.$$arity = 1, $$287)), 'inject', [[]], ($$288 = function(result, voice){var self = $$288.$$s || this;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (voice == null) {
              voice = nil;
            };
            return result.$push(voice);}, $$288.$$s = self, $$288.$$arity = 2, $$288)).$flatten(), 'select', [], ($$289 = function(note){var self = $$289.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable'));}, $$289.$$s = self, $$289.$$arity = 1, $$289));
          relevant_sp = $send($send(relevant_notes, 'select', [], ($$290 = function(note){var self = $$290.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint'));}, $$290.$$s = self, $$290.$$arity = 1, $$290)), 'map', [], ($$291 = function(sp){var self = $$291.$$s || this;

          
            
            if (sp == null) {
              sp = nil;
            };
            return sp.$notes();}, $$291.$$s = self, $$291.$$arity = 1, $$291));
          relevant_notes = relevant_notes.$push(relevant_sp).$flatten();
          relevant_beats = $send(relevant_notes, 'group_by', [], ($$292 = function(playable){var self = $$292.$$s || this;

          
            
            if (playable == null) {
              playable = nil;
            };
            return playable.$beat();}, $$292.$$s = self, $$292.$$arity = 1, $$292));
          $send(relevant_beats.$keys().$sort(), 'each', [], ($$293 = function(beat){var self = $$293.$$s || this, $$294, $$295, $$296, $$297, $$298, $$299, notes = nil, max_duration_on_beat = nil, size = nil, e = nil, defaultincrement = nil, collisions = nil, inversions = nil, is_new_part = nil, measure_start = nil, increment = nil, $writer = nil;
            if (self.conf_beat_resolution == null) self.conf_beat_resolution = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (beat == null) {
              beat = nil;
            };
            notes = relevant_beats['$[]'](beat);
            max_duration_on_beat = $send(notes, 'map', [], ($$294 = function(n){var self = $$294.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n.$duration();}, $$294.$$s = self, $$294.$$arity = 1, $$294)).$max();
            
            try {
              size = self.conf_beat_resolution * duration_to_style['$[]'](self.$duration_to_id(max_duration_on_beat)).$first()
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
                try {
                  $gvars.log.$error("" + "BUG: unsupported duration: " + (max_duration_on_beat) + " on beat " + (beat) + ",  " + (self.$notes_on_beat().$to_json()))
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            defaultincrement = $rb_divide($rb_plus(size, last_size), 2);
            last_size = size;
            collisions = $send(notes, 'select', [], ($$295 = function(note){var self = $$295.$$s || this, $b;

            
              
              if (note == null) {
                note = nil;
              };
              return $rb_ge(($truthy($b = collision_stack['$[]'](note.$pitch())) ? $b : -1), $rb_minus(newbeat, conf_min_increment));}, $$295.$$s = self, $$295.$$arity = 1, $$295));
            inversions = $send(notes, 'select', [], ($$296 = function(note){var self = $$296.$$s || this, $b, a = nil, result = nil;

            
              
              if (note == null) {
                note = nil;
              };
              a = [($truthy($b = note.$prev_pitch()) ? $b : note.$pitch()), note.$pitch(), ($truthy($b = note.$next_pitch()) ? $b : note.$pitch())];
              result = ($truthy($b = a.$sort().$reverse()['$=='](a)) ? $b : a.$sort()['$=='](a))['$!']();
              if ($truthy(note.$next_first_in_part())) {
                result = false};
              return result;}, $$296.$$s = self, $$296.$$arity = 1, $$296));
            is_new_part = $send(notes, 'select', [], ($$297 = function(n){var self = $$297.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$first_in_part?']();}, $$297.$$s = self, $$297.$$arity = 1, $$297));
            measure_start = $send(notes, 'select', [], ($$298 = function(n){var self = $$298.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$measure_start?']();}, $$298.$$s = self, $$298.$$arity = 1, $$298));
            increment = nextincrement;
            nextincrement = conf_min_increment;
            if ($truthy(collisions['$empty?']()['$!']())) {
              increment = defaultincrement
            } else if ($truthy(inversions['$empty?']()['$!']())) {
              
              nextincrement = $rb_divide(defaultincrement, 2);
              increment = nextincrement;};
            if ($truthy(is_new_part['$empty?']())) {
            } else {
              
              increment = $rb_plus(increment, defaultincrement);
              nextincrement = conf_min_increment;
            };
            if ($truthy(measure_start['$empty?']())) {
            } else {
              increment = $rb_plus(increment, $rb_divide(increment, 4))
            };
            increment = $rb_plus(increment, self.$get_minc_factor(notes.$first().$time(), defaultincrement));
            newbeat = $rb_plus(newbeat, increment);
            $send(notes, 'each', [], ($$299 = function(note){var self = $$299.$$s || this, $writer = nil;

            
              
              if (note == null) {
                note = nil;
              };
              $writer = [note.$pitch(), newbeat];
              $send(collision_stack, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$299.$$s = self, $$299.$$arity = 1, $$299));
            
            $writer = [beat, newbeat];
            $send(compression_map, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$293.$$s = self, $$293.$$arity = 1, $$293));
          return compression_map;
        }, $Default_compute_beat_compression_1$286.$$arity = 2);
        
        Opal.def(self, '$compute_beat_compression_3', $Default_compute_beat_compression_3$300 = function $$compute_beat_compression_3(music, layout_lines) {
          var $a, $$301, $$302, $$303, $$304, $$305, $$306, $$307, self = this, duration_to_style = nil, conf_min_increment = nil, collision_stack = nil, collision_range = nil, compression_map = nil, newbeat = nil, nextincrement = nil, last_size = nil, relevant_notes = nil, relevant_sp = nil, relevant_beats = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          duration_to_style = $gvars.conf.$get("layout.DURATION_TO_STYLE");
          conf_min_increment = $rb_times(($truthy($a = $gvars.conf.$get("layout.packer.pack_min_increment")) ? $a : 0), self.conf_beat_resolution);
          collision_stack = $hash2([], {});
          collision_range = $hash2([], {});
          compression_map = $hash2([], {});
          newbeat = 0;
          nextincrement = 0;
          last_size = 0;
          relevant_notes = $send($send($send(layout_lines.$uniq(), 'map', [], ($$301 = function(voice_id){var self = $$301.$$s || this;

          
            
            if (voice_id == null) {
              voice_id = nil;
            };
            return music.$voices()['$[]'](voice_id);}, $$301.$$s = self, $$301.$$arity = 1, $$301)), 'inject', [[]], ($$302 = function(result, voice){var self = $$302.$$s || this;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (voice == null) {
              voice = nil;
            };
            return result.$push(voice);}, $$302.$$s = self, $$302.$$arity = 2, $$302)).$flatten(), 'select', [], ($$303 = function(note){var self = $$303.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable'));}, $$303.$$s = self, $$303.$$arity = 1, $$303));
          relevant_sp = $send($send(relevant_notes, 'select', [], ($$304 = function(note){var self = $$304.$$s || this;

          
            
            if (note == null) {
              note = nil;
            };
            return note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint'));}, $$304.$$s = self, $$304.$$arity = 1, $$304)), 'map', [], ($$305 = function(sp){var self = $$305.$$s || this;

          
            
            if (sp == null) {
              sp = nil;
            };
            return sp.$notes();}, $$305.$$s = self, $$305.$$arity = 1, $$305));
          relevant_notes = relevant_notes.$push(relevant_sp).$flatten();
          relevant_beats = $send(relevant_notes, 'group_by', [], ($$306 = function(playable){var self = $$306.$$s || this;

          
            
            if (playable == null) {
              playable = nil;
            };
            return playable.$beat();}, $$306.$$s = self, $$306.$$arity = 1, $$306));
          $send(relevant_beats.$keys().$sort(), 'each', [], ($$307 = function(beat){var self = $$307.$$s || this, $$308, $$310, $$311, $$312, $$313, $$314, notes = nil, collision_candidate_keys = nil, collisions = nil, defaultincrement = nil, largest_increment = nil, is_new_part = nil, measure_start = nil, increment = nil, $writer = nil;

          
            
            if (beat == null) {
              beat = nil;
            };
            notes = relevant_beats['$[]'](beat);
            collision_range = $send(notes, 'inject', [$hash2([], {})], ($$308 = function(result, note){var self = $$308.$$s || this, $$309;

            
              
              if (result == null) {
                result = nil;
              };
              
              if (note == null) {
                note = nil;
              };
              $send($send($$($nesting, 'Range'), 'new', Opal.to_a([note.$prev_pitch(), note.$pitch()].$sort())), 'each', [], ($$309 = function(pitch){var self = $$309.$$s || this, $writer = nil;

              
                
                if (pitch == null) {
                  pitch = nil;
                };
                $writer = [pitch, $hash2(["beat", "note", "pitch", "kind"], {"beat": newbeat, "note": note, "pitch": pitch, "kind": (function() {if (note.$pitch()['$=='](pitch)) {
                  return "note"
                } else {
                  return "line"
                }; return nil; })()})];
                $send(result, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, $$309.$$s = self, $$309.$$arity = 1, $$309));
              if (note.$pitch()['$=='](note.$prev_pitch())) {
              } else {
                result.$delete(note.$prev_pitch())
              };
              return result;}, $$308.$$s = self, $$308.$$arity = 2, $$308));
            collision_candidate_keys = collision_range.$keys()['$&'](collision_stack.$keys());
            collisions = $send(collision_candidate_keys, 'map', [], ($$310 = function(k){var self = $$310.$$s || this, result = nil, size = nil, e = nil, collisiontype = nil, the_note = nil, $writer = nil;
              if (self.conf_beat_resolution == null) self.conf_beat_resolution = nil;
              if ($gvars.log == null) $gvars.log = nil;

            
              
              if (k == null) {
                k = nil;
              };
              result = nil;
              
              try {
                size = self.conf_beat_resolution * duration_to_style['$[]'](self.$duration_to_id(collision_range['$[]'](k)['$[]']("note").$duration())).$first()
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
                  try {
                    $gvars.log.$error("" + "BUG: unsupported duration: " + (collision_range['$[]'](k)['$[]']("note").$duration()) + " on beat " + (beat) + ",  " + (collision_range['$[]'](k)['$[]']("note").$to_json()))
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };;
              collisiontype = "" + (collision_stack['$[]'](k)['$[]']("kind")) + "-" + (collision_range['$[]'](k)['$[]']("kind"));
              if ($truthy(["note-note", "note-line", "line-note", "dline-line"]['$include?'](collisiontype))) {
                if ($truthy($rb_le(collision_range['$[]'](k)['$[]']("beat"), $rb_plus(collision_stack['$[]'](k)['$[]']("beat"), conf_min_increment)))) {
                  
                  result = collision_range['$[]'](k);
                  the_note = collision_range['$[]'](k)['$[]']("note");
                  
                  $writer = ["inc", size];
                  $send(result, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;}};
              return result;}, $$310.$$s = self, $$310.$$arity = 1, $$310)).$compact();
            defaultincrement = conf_min_increment;
            if ($truthy(collisions['$[]'](0))) {
              
              largest_increment = $send(collisions, 'sort_by', [], ($$311 = function(i){var self = $$311.$$s || this;

              
                
                if (i == null) {
                  i = nil;
                };
                return i['$[]']("inc");}, $$311.$$s = self, $$311.$$arity = 1, $$311)).$first();
              defaultincrement = largest_increment['$[]']("inc");
            } else {
              defaultincrement = conf_min_increment
            };
            is_new_part = $send(notes, 'select', [], ($$312 = function(n){var self = $$312.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$first_in_part?']();}, $$312.$$s = self, $$312.$$arity = 1, $$312));
            measure_start = $send(notes, 'select', [], ($$313 = function(n){var self = $$313.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$measure_start?']();}, $$313.$$s = self, $$313.$$arity = 1, $$313));
            increment = defaultincrement;
            if ($truthy(is_new_part['$empty?']())) {
            } else {
              increment = $rb_plus(increment, defaultincrement)
            };
            if ($truthy(measure_start['$empty?']())) {
            } else {
              increment = $rb_plus(increment, $rb_divide(increment, 4))
            };
            increment = $rb_plus(increment, self.$get_minc_factor(notes.$first().$time(), defaultincrement));
            newbeat = $rb_plus(newbeat, increment);
            $send(collision_range.$keys(), 'each', [], ($$314 = function(k){var self = $$314.$$s || this, $writer = nil;

            
              
              if (k == null) {
                k = nil;
              };
              $writer = [k, $hash2(["beat", "kind", "inc"], {"beat": newbeat, "kind": collision_range['$[]'](k)['$[]']("kind"), "inc": increment})];
              $send(collision_stack, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$314.$$s = self, $$314.$$arity = 1, $$314));
            
            $writer = [beat, newbeat];
            $send(compression_map, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$307.$$s = self, $$307.$$arity = 1, $$307));
          return compression_map;
        }, $Default_compute_beat_compression_3$300.$$arity = 2);
        
        Opal.def(self, '$layout_playable', $Default_layout_playable$315 = function $$layout_playable(root, beat_layout, note_conf_base) {
          var self = this, result = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          result = (function() {if ($truthy(root['$is_a?']($$($nesting, 'Note')))) {
            return self.$layout_note(root, beat_layout, "" + (note_conf_base) + ".n_0")
          } else if ($truthy(root['$is_a?']($$($nesting, 'SynchPoint')))) {
            return self.$layout_accord(root, beat_layout, note_conf_base)
          } else if ($truthy(root['$is_a?']($$($nesting, 'Pause')))) {
            return self.$layout_pause(root, beat_layout, "" + (note_conf_base) + ".n_0")
          } else {
            return $gvars.log.$error("" + "BUG: Missing Music -> Sheet transform: " + (root))
          }; return nil; })();
          return result;
        }, $Default_layout_playable$315.$$arity = 3);
        
        Opal.def(self, '$layout_note', $Default_layout_note$316 = function $$layout_note(root, beat_layout, note_conf_base) {
          var $a, $b, self = this, x_offset = nil, y_offset = nil, dotted = nil, fill = nil, size = nil, flag = nil, shift = nil, color = nil, res = nil, $writer = nil, result = nil, barover_y = nil, reducer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          x_offset = self.$convert_pitch_to_xpos(root);
          y_offset = beat_layout.$call(root.$beat());
          $b = self.$compute_ellipse_properties_from_note(root), $a = Opal.to_ary($b), (dotted = ($a[0] == null ? nil : $a[0])), (fill = ($a[1] == null ? nil : $a[1])), (size = ($a[2] == null ? nil : $a[2])), (flag = ($a[3] == null ? nil : $a[3])), $b;
          shift = self.$layout_note_shift(root, size, x_offset, dotted, note_conf_base);
          color = self.$compute_color_by_variant_no(root.$variant());
          res = $$($nesting, 'Ellipse').$new([$rb_plus(x_offset, shift), y_offset], size, fill, dotted, root);
          
          $writer = [$rb_plus(note_conf_base, ".***")];
          $send(res, 'conf_key=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [res];
          $send(root, 'sheet_drawable=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [color];
          $send(res, 'color=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [$gvars.conf.$get("layout.LINE_THICK")];
          $send(res, 'line_width=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          result = $$($nesting, 'CompoundDrawable').$new([res], res);
          if ($truthy(flag)) {
            result.$push(self.$layout_note_flags(x_offset, y_offset, size, shift, color, flag))};
          if ($truthy(root.$measure_start())) {
            
            barover_y = $rb_plus(size.$last(), $gvars.conf.$get("layout.LINE_THICK"));
            if ($truthy($gvars.conf.$get("layout.bottomup"))) {
              barover_y = barover_y['$-@']()};
            reducer = (function() {if ($truthy(($truthy($a = flag) ? $gvars.conf.$get("layout.bottomup")['$!']() : $a))) {
              return $gvars.conf.$get("layout.LINE_THICK")
            } else {
              return 0
            }; return nil; })();
            res = $$($nesting, 'Ellipse').$new([$rb_minus($rb_plus(x_offset, shift), reducer), $rb_minus(y_offset, barover_y)], [$rb_minus(size.$first(), reducer), $rb_divide($gvars.conf.$get("layout.LINE_THICK"), 2)], "filled", false, nil, true);
            
            $writer = [color];
            $send(res, 'color=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$gvars.conf.$get("layout.LINE_THIN")];
            $send(res, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            result.$push(res);};
          return result;
        }, $Default_layout_note$316.$$arity = 3);
        
        Opal.def(self, '$layout_note_flags', $Default_layout_note_flags$317 = function $$layout_note_flags(x_offset, y_offset, size, shift, color, flag) {
          var $a, $$318, $$319, self = this, p_beam_x = nil, p_beam_y = nil, linewidth = nil, f_x = nil, f_y = nil, path = nil, p_flag_x = nil, p_flag_y = nil, f_delta_x = nil, f_delta_y = nil, flagpath = nil, res = nil, $writer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          if (self.instrument_orientation['$==']("horizontal")) {
            
            $a = [$rb_times(2, size['$[]'](1)), 0.1], (p_beam_x = $a[0]), (p_beam_y = $a[1]), $a;
            linewidth = $gvars.conf.$get("layout.LINE_MEDIUM");
            f_x = $rb_plus(x_offset, $rb_divide(shift, 2));
            f_y = $rb_minus($rb_plus(y_offset, size['$[]'](1)), $rb_divide(linewidth, 2));
            path = [["M", f_x, f_y], ["l", p_beam_x, p_beam_y]];
            $a = [$rb_times(-0.6, size['$[]'](0)), $rb_times(0.6, size['$[]'](1))], (p_flag_x = $a[0]), (p_flag_y = $a[1]), $a;
            f_delta_x = p_flag_x;
            f_delta_y = (function() { try {
              return $rb_divide($rb_times(p_beam_y, f_delta_x), p_beam_x)
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return 0
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }})();
            flagpath = ["l", p_flag_x, p_flag_y];
            $send(flag, 'times', [], ($$318 = function(i){var self = $$318.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return (path = $rb_plus(path, [["M", $rb_plus($rb_plus(f_x, p_beam_x), $rb_times(i, f_delta_x)), $rb_plus(f_y, p_beam_y)], flagpath]));}, $$318.$$s = self, $$318.$$arity = 1, $$318));
          } else {
            
            $a = [0.1, $rb_times(2, size['$[]'](1))], (p_beam_x = $a[0]), (p_beam_y = $a[1]), $a;
            linewidth = $gvars.conf.$get("layout.LINE_MEDIUM");
            f_x = $rb_minus($rb_plus($rb_plus(x_offset, shift), size['$[]'](0)), $rb_divide(linewidth, 2));
            f_y = y_offset;
            path = [["M", f_x, f_y], ["l", p_beam_x, p_beam_y['$-@']()]];
            $a = [$rb_times(1.3, size['$[]'](1)), $rb_times(0.6, size['$[]'](1))], (p_flag_x = $a[0]), (p_flag_y = $a[1]), $a;
            f_delta_y = p_flag_y;
            f_delta_x = (function() { try {
              return $rb_divide($rb_times(p_beam_x, f_delta_y), p_beam_y)
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
                try {
                  return 0
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            }})();
            flagpath = ["l", p_flag_x, p_flag_y];
            $send(flag, 'times', [], ($$319 = function(i){var self = $$319.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return (path = $rb_plus(path, [["M", $rb_minus($rb_plus(f_x, p_beam_x), $rb_times(i, f_delta_x)), $rb_plus($rb_minus(y_offset, p_beam_y), $rb_times(i, f_delta_y))], flagpath]));}, $$319.$$s = self, $$319.$$arity = 1, $$319));
          };
          res = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path').$new(path, "open");
          
          $writer = [linewidth];
          $send(res, 'line_width=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [color];
          $send(res, 'color=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return res;
        }, $Default_layout_note_flags$317.$$arity = 6);
        
        Opal.def(self, '$convert_pitch_to_xpos', $Default_convert_pitch_to_xpos$320 = function $$convert_pitch_to_xpos(root) {
          var self = this;

          return self.pitch_to_xpos.$call(root.$pitch())
        }, $Default_convert_pitch_to_xpos$320.$$arity = 1);
        
        Opal.def(self, '$compute_color_by_variant_no', $Default_compute_color_by_variant_no$321 = function $$compute_color_by_variant_no(variant_no) {
          var self = this, result = nil;

          
          if (variant_no['$=='](0)) {
            result = self.color_default
          } else {
            result = (function() {if ($truthy(variant_no['$odd?']())) {
              return self.color_variant1
            } else {
              return self.color_variant2
            }; return nil; })()
          };
          return result;
        }, $Default_compute_color_by_variant_no$321.$$arity = 1);
        
        Opal.def(self, '$compute_ellipse_properties_from_note', $Default_compute_ellipse_properties_from_note$322 = function $$compute_ellipse_properties_from_note(root) {
          var $a, $b, $$323, self = this, scale = nil, fill = nil, dotted = nil, flag = nil, size = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          $b = $gvars.conf.$get("layout.DURATION_TO_STYLE")['$[]'](self.$check_duration(root)), $a = Opal.to_ary($b), (scale = ($a[0] == null ? nil : $a[0])), (fill = ($a[1] == null ? nil : $a[1])), (dotted = ($a[2] == null ? nil : $a[2])), (flag = ($a[3] == null ? nil : $a[3])), $b;
          size = $send($gvars.conf.$get("layout.ELLIPSE_SIZE"), 'map', [], ($$323 = function(e){var self = $$323.$$s || this;

          
            
            if (e == null) {
              e = nil;
            };
            return $rb_times(e, scale);}, $$323.$$s = self, $$323.$$arity = 1, $$323));
          return [dotted, fill, size, flag];
        }, $Default_compute_ellipse_properties_from_note$322.$$arity = 1);
        
        Opal.def(self, '$layout_note_shift', $Default_layout_note_shift$324 = function $$layout_note_shift(root, size, x_offset, dotted, note_conf_base) {
          var self = this, shift = nil, local_key = nil, nshift = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          shift = 0;
          if ($truthy($gvars.conf.$get("layout.limit_a3"))) {
            
            if ($truthy($rb_lt(x_offset, 5))) {
              shift = $rb_plus(shift, size.$first())};
            if ($truthy($rb_gt(x_offset, 415))) {
              
              shift = $rb_plus(shift, size.$first()['$-@']());
              if ($truthy(dotted)) {
                shift = $rb_minus(shift, 1.5)};};};
          if ($truthy(root.$shift())) {
            if (root.$shift()['$[]']("dir")['$=='](-1)) {
              shift = $rb_plus(shift, size.$first()['$-@']())
            } else {
              shift = $rb_plus(shift, size.$first())
            }};
          if ($truthy(note_conf_base)) {
            
            local_key = note_conf_base.$gsub(/extract\.(\d+)\./, "");
            if ($truthy(self.print_options_keys['$include?']("" + (local_key) + ".nshift"))) {
              
              nshift = self.print_options_raw['$[]']("" + (local_key) + ".nshift");
              shift = $rb_times($rb_times(size.$first(), 2), nshift);};};
          return shift;
        }, $Default_layout_note_shift$324.$$arity = 5);
        
        Opal.def(self, '$layout_accord', $Default_layout_accord$325 = function $$layout_accord(root, beat_layout, note_conf_base) {
          var $$326, $$327, $$328, $$329, self = this, res = nil, proxy_drawable = nil, resnotes_sorted = nil;

          
          res = $send(root.$notes().$reverse().$each_with_index(), 'map', [], ($$326 = function(c, i){var self = $$326.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            
            if (i == null) {
              i = nil;
            };
            return self.$layout_note(c, beat_layout, "" + (note_conf_base) + ".n_" + (i));}, $$326.$$s = self, $$326.$$arity = 2, $$326)).$reverse();
          proxy_drawable = root.$get_proxy_object(res).$proxy();
          resnotes_sorted = $send($send(res, 'map', [], ($$327 = function(n){var self = $$327.$$s || this;

          
            
            if (n == null) {
              n = nil;
            };
            return n.$proxy();}, $$327.$$s = self, $$327.$$arity = 1, $$327)), 'sort_by', [], ($$328 = function(n){var self = $$328.$$s || this;

          
            
            if (n == null) {
              n = nil;
            };
            return n.$center().$first();}, $$328.$$s = self, $$328.$$arity = 1, $$328));
          res = $send(res, 'map', [], ($$329 = function(n){var self = $$329.$$s || this;

          
            
            if (n == null) {
              n = nil;
            };
            return n.$shapes();}, $$329.$$s = self, $$329.$$arity = 1, $$329));
          res.$unshift($$($nesting, 'FlowLine').$new(resnotes_sorted.$first(), resnotes_sorted.$last(), "dashed"));
          return $$($nesting, 'CompoundDrawable').$new(res, proxy_drawable);
        }, $Default_layout_accord$325.$$arity = 3);
        
        Opal.def(self, '$layout_pause', $Default_layout_pause$330 = function $$layout_pause(root, beat_layout, note_conf_base) {
          var $a, $b, self = this, x_offset = nil, y_offset = nil, scale = nil, glyph = nil, dotted = nil, rest_size = nil, size = nil, shift = nil, color = nil, res = nil, $writer = nil, result = nil, barover_y = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          x_offset = self.$convert_pitch_to_xpos(root);
          y_offset = beat_layout.$call(root.$beat());
          $b = $gvars.conf.$get("layout.REST_TO_GLYPH")['$[]'](self.$check_duration(root)), $a = Opal.to_ary($b), (scale = ($a[0] == null ? nil : $a[0])), (glyph = ($a[1] == null ? nil : $a[1])), (dotted = ($a[2] == null ? nil : $a[2])), $b;
          rest_size = $gvars.conf.$get("layout.REST_SIZE");
          size = [$rb_times(rest_size.$first(), scale.$first()), $rb_times(rest_size.$last(), scale.$last())];
          shift = self.$layout_note_shift(root, size, x_offset, dotted, note_conf_base);
          color = self.$compute_color_by_variant_no(root.$variant());
          res = nil;
          res = $$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Glyph').$new([$rb_plus(x_offset, shift), y_offset], size, glyph, dotted, root);
          
          $writer = [$rb_plus(note_conf_base, ".***")];
          $send(res, 'conf_key=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [res];
          $send(root, 'sheet_drawable=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [color];
          $send(res, 'color=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [$gvars.conf.$get("layout.LINE_THICK")];
          $send(res, 'line_width=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(root['$visible?']())) {
          } else {
            
            $writer = [false];
            $send(res, 'visible=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          result = $$($nesting, 'CompoundDrawable').$new([res], res);
          if ($truthy(root.$measure_start())) {
            
            barover_y = $rb_plus(size.$last(), $gvars.conf.$get("layout.LINE_THICK"));
            if ($truthy($gvars.conf.$get("layout.bottomup"))) {
              barover_y = barover_y['$-@']()};
            res = $$($nesting, 'Ellipse').$new([$rb_plus(x_offset, shift), $rb_minus(y_offset, barover_y)], [size.$first(), $rb_divide($gvars.conf.$get("layout.LINE_THICK"), 2)], "filled", false, nil, true);
            
            $writer = [color];
            $send(res, 'color=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$gvars.conf.$get("layout.LINE_THIN")];
            $send(res, 'line_width=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(root['$visible?']())) {
            } else {
              
              $writer = [false];
              $send(res, 'visible=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];
            };
            result.$push(res);};
          return result;
        }, $Default_layout_pause$330.$$arity = 3);
        Opal.defs(self, '$make_path_from_jumpline', $Default_make_path_from_jumpline$331 = function $$make_path_from_jumpline(arg) {
          var $a, $b, self = this, anchorx = nil, anchory = nil, from = nil, from_offset = nil, from_anchor = nil, to = nil, to_offset = nil, to_anchor = nil, verticalpos = nil, verticalcut = nil, vertical_anchor = nil, start_of_vertical = nil, end_of_vertical = nil, start_orientation = nil, end_orientation = nil, vert_orientation = nil, start_offset = nil, end_offset = nil, p1 = nil, p2 = nil, p3 = nil, p4 = nil, p4_line = nil, a1 = nil, a2 = nil, dy = nil, verticalcuty = nil, vcp2 = nil, vcp2_line = nil, vcp3 = nil, a3 = nil, a4 = nil, vcutarrow = nil, path = nil;

          
          $b = arg['$[]']("jumpline_anchor"), $a = Opal.to_ary($b), (anchorx = ($a[0] == null ? nil : $a[0])), (anchory = ($a[1] == null ? nil : $a[1])), $b;
          from = self.$Vector2d(arg['$[]']("from")['$[]']("center"));
          from_offset = $rb_plus(self.$Vector2d(arg['$[]']("from")['$[]']("size")), [anchorx, anchory]);
          from_anchor = (function() {if (arg['$[]']("from")['$[]']("anchor")['$==']("before")) {
            return -1
          } else {
            return 1
          }; return nil; })();
          to = self.$Vector2d(arg['$[]']("to")['$[]']("center"));
          to_offset = $rb_plus(self.$Vector2d(arg['$[]']("to")['$[]']("size")), [anchorx, anchory]);
          to_anchor = (function() {if (arg['$[]']("to")['$[]']("anchor")['$==']("before")) {
            return -1
          } else {
            return 1
          }; return nil; })();
          verticalpos = arg['$[]']("vertical");
          verticalcut = arg['$[]']("verticalcut");
          vertical_anchor = from;
          if (arg['$[]']("vertical_anchor")['$==']("to")) {
            vertical_anchor = to};
          start_of_vertical = self.$Vector2d($rb_plus(vertical_anchor.$x(), verticalpos), from.$y());
          end_of_vertical = self.$Vector2d($rb_plus(vertical_anchor.$x(), verticalpos), to.$y());
          start_orientation = self.$Vector2d($rb_times($rb_minus(start_of_vertical, from), [1, 0]).$normalize().$x(), 0);
          end_orientation = self.$Vector2d($rb_times($rb_minus(end_of_vertical, to), [1, 0]).$normalize().$x(), 0);
          vert_orientation = self.$Vector2d(0, $rb_times($rb_minus(start_of_vertical, end_of_vertical), [0, 1]).$normalize().$y());
          start_offset = $rb_times(from_offset, [start_orientation.$x(), from_anchor]);
          end_offset = $rb_times(to_offset, [end_orientation.$x(), to_anchor]);
          start_of_vertical = $rb_plus(start_of_vertical, $rb_times(start_offset, [0, 1]));
          end_of_vertical = $rb_plus(end_of_vertical, $rb_times(end_offset, [0, 1]));
          p1 = $rb_plus(from, start_offset);
          p2 = start_of_vertical;
          p3 = end_of_vertical;
          p4 = $rb_plus(to, end_offset);
          p4_line = $rb_plus($rb_plus(to, end_offset), $rb_times(end_orientation, [2, 0]));
          a1 = $rb_plus($rb_plus(p4, $rb_times(end_orientation, 2.5)), [0, 1]);
          a2 = $rb_minus($rb_plus(p4, $rb_times(end_orientation, 2.5)), [0, 1]);
          dy = $rb_minus(p3.$y(), p2.$y());
          verticalcuty = (function() {if ($truthy($rb_gt(dy, 0))) {
            return verticalcut
          } else {
            return verticalcut['$-@']()
          }; return nil; })();
          if (verticalcut['$=='](0)) {
            verticalcuty = dy};
          vcp2 = $rb_plus(p2, [0, verticalcuty]);
          vcp2_line = $rb_plus(vcp2, vert_orientation);
          vcp3 = $rb_minus(p3, [0, verticalcuty]);
          a3 = $rb_plus($rb_plus(vcp2, $rb_times(vert_orientation, 1.5)), [0.5, 0]);
          a4 = $rb_minus($rb_plus(vcp2, $rb_times(vert_orientation, 1.5)), [0.5, 0]);
          if (verticalcut['$=='](0)) {
            vcutarrow = []
          } else {
            vcutarrow = [["M"].concat(Opal.to_a(vcp2)), ["l"].concat(Opal.to_a($rb_minus(a3, vcp2))), ["l"].concat(Opal.to_a($rb_minus(a4, a3))), ["l"].concat(Opal.to_a($rb_minus(vcp2, a4))), ["z"]]
          };
          path = [[["M"].concat(Opal.to_a(p1)), ["l"].concat(Opal.to_a($rb_minus(p2, p1))), ["l"].concat(Opal.to_a($rb_minus(vcp2_line, p2))), ["M"].concat(Opal.to_a(vcp3)), ["L"].concat(Opal.to_a(p3)), ["L"].concat(Opal.to_a(p4_line))], [["M"].concat(Opal.to_a(p4)), ["l"].concat(Opal.to_a($rb_minus(a1, p4))), ["l"].concat(Opal.to_a($rb_minus(a2, a1))), ["l"].concat(Opal.to_a($rb_minus(p4, a2))), ["z"]], vcutarrow];
          return path;
        }, $Default_make_path_from_jumpline$331.$$arity = 1);
        
        Opal.def(self, '$duration_to_id', $Default_duration_to_id$332 = function $$duration_to_id(duration) {
          var self = this, result = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          result = (("" + "d") + (duration)).$to_sym();
          if ($truthy($gvars.conf.$get("layout.DURATION_TO_STYLE")['$[]'](result)['$nil?']())) {
            result = "err"};
          return result;
        }, $Default_duration_to_id$332.$$arity = 1);
        
        Opal.def(self, '$check_duration', $Default_check_duration$333 = function $$check_duration(root) {
          var self = this, result = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          result = self.$duration_to_id(root.$duration());
          if ($truthy(result['$===']("err"))) {
            $gvars.log.$error("" + "unsupported duration at " + (root.$start_pos_to_s()), root.$start_pos(), root.$end_pos())};
          return result;
        }, $Default_check_duration$333.$$arity = 1);
        
        Opal.def(self, '$make_sheetmark_path', $Default_make_sheetmark_path$334 = function $$make_sheetmark_path(note) {
          var $$335, self = this, w = nil, h = nil, base = nil, vpath = nil, path = nil;

          
          w = 0.5;
          h = 5;
          base = $rb_minus(self.$Vector2d(note), [w, $rb_divide(h, 2)]);
          vpath = [self.$Vector2d(w, $rb_times(2, w)['$-@']()), self.$Vector2d(w, $rb_times(2, w)), self.$Vector2d(0, h), self.$Vector2d(w['$-@'](), $rb_times(2, w)), self.$Vector2d(w['$-@'](), $rb_times(-2, w)), self.$Vector2d(0, h['$-@']())];
          path = [["M", base.$x(), base.$y()]];
          $send(vpath, 'each', [], ($$335 = function(p){var self = $$335.$$s || this;

          
            
            if (p == null) {
              p = nil;
            };
            return path['$<<'](["l", p.$x(), p.$y()]);}, $$335.$$s = self, $$335.$$arity = 1, $$335));
          return path;
        }, $Default_make_sheetmark_path$334.$$arity = 1);
        
        Opal.def(self, '$make_slur_path', $Default_make_slur_path$336 = function $$make_slur_path(p1, p2) {
          var self = this, deltap = nil, cp_template = nil, cp1 = nil, cp2 = nil, slurpath = nil;

          
          deltap = $rb_minus(p2, p1);
          cp_template = self.$Vector2d($rb_times(0.3, deltap.$length()), 0).$rotate(deltap.$angle());
          cp1 = cp_template.$rotate(-0.4);
          cp2 = $rb_plus(deltap, cp_template.$reverse().$rotate(0.4));
          slurpath = [["M", p1.$x(), p1.$y()], ["c", cp1.$x(), cp1.$y(), cp2.$x(), cp2.$y(), deltap.$x(), deltap.$y()]];
          return slurpath;
        }, $Default_make_slur_path$336.$$arity = 2);
        
        Opal.def(self, '$make_annotated_bezier_path', $Default_make_annotated_bezier_path$337 = function $$make_annotated_bezier_path(points, tuplet_options) {
          var $a, self = this, p1 = nil, p2 = nil, deltap = nil, cp_template1 = nil, cp_template2 = nil, rotate_by = nil, cp1 = nil, cp2 = nil, cpa1 = nil, cpa2 = nil, cpm1 = nil, cpm2 = nil, cpmm = nil, cpmm1 = nil, cpmm2 = nil, annotation_normal = nil, annotation_anchor = nil, start = nil, curve = nil, line = nil, slurpath = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          p1 = points.$first();
          p2 = points.$last();
          deltap = $rb_minus(p2, p1);
          cp_template1 = self.$Vector2d(tuplet_options['$[]']("cp1"));
          cp_template2 = self.$Vector2d(tuplet_options['$[]']("cp2"));
          rotate_by = $rb_times($$$($$($nesting, 'Math'), 'PI'), -0.5);
          cp1 = cp_template1.$rotate(deltap.$angle()).$rotate(rotate_by);
          cp2 = cp_template2.$rotate(deltap.$angle()).$rotate(rotate_by);
          cp2 = $rb_plus(deltap, cp2);
          $gvars.log.$debug("" + (cp1.$to_s()) + " - " + (cp2.$to_s()));
          cpa1 = $rb_plus(p1, cp1);
          cpa2 = $rb_plus(p1, cp2);
          cpm1 = $rb_divide($rb_plus(p1, cpa1), 2);
          cpm2 = $rb_divide($rb_plus(p2, cpa2), 2);
          cpmm = $rb_divide($rb_plus(cpa1, cpa2), 2);
          cpmm1 = $rb_divide($rb_plus(cpm1, cpmm), 2);
          cpmm2 = $rb_divide($rb_plus(cpm2, cpmm), 2);
          if (cpmm1['$=='](cpmm2)) {
            annotation_normal = self.$Vector2d([0, 0])
          } else {
            annotation_normal = $rb_minus(cpmm1, cpmm2).$perpendicular().$normalize()
          };
          if ($truthy(($truthy($a = $rb_le(cpa1.$x(), p1.$x())) ? $rb_le(p1.$x(), p2.$x()) : $a))) {
            annotation_anchor = $rb_minus($rb_plus($rb_divide($rb_plus(cpmm1, cpmm2), 2), $rb_times(annotation_normal, -2)), [2, 0])
          } else {
            annotation_anchor = $rb_plus($rb_divide($rb_plus(cpmm1, cpmm2), 2), $rb_times(annotation_normal, 2))
          };
          annotation_anchor = $rb_plus(annotation_anchor, [0, -2]);
          start = [["M", p1.$x(), p1.$y()]];
          curve = [["c", cp1.$x(), cp1.$y(), cp2.$x(), cp2.$y(), deltap.$x(), deltap.$y()]];
          line = [["l", cp1.$x(), cp1.$y()], ["L", cpa2.$x(), cpa2.$y()], ["L", p2.$x(), p2.$y()]];
          slurpath = [];
          if ($truthy(tuplet_options['$[]']("shape")['$include?']("c"))) {
            slurpath = $rb_plus(slurpath, $rb_plus(start, curve))};
          if ($truthy(tuplet_options['$[]']("shape")['$include?']("l"))) {
            slurpath = $rb_plus(slurpath, $rb_plus(start, line))};
          return [slurpath, annotation_anchor, cpa1, cpa2];
        }, $Default_make_annotated_bezier_path$337.$$arity = 2);
        return (Opal.def(self, '$resolve_placeholder', $Default_resolve_placeholder$338 = function $$resolve_placeholder(text, parameter) {
          var $$339, self = this, result = nil, keys = nil;

          
          result = text;
          keys = result.$scan(/\{\{([^\}]+)\}\}/);
          $send(keys, 'each', [], ($$339 = function(key){var self = $$339.$$s || this, value = nil;
            if (self.placeholders == null) self.placeholders = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (key == null) {
              key = nil;
            };
            value = self.placeholders['$[]'](key.$first());
            if ($truthy(value)) {
              
              text = value.$call();
              if ($truthy(text)) {
              } else {
                
                $gvars.log.$error("" + ($$($nesting, 'I18n').$t("no placeholder value found in ")) + " in '" + (parameter) + "': '" + (key.$first()) + "'");
                text = "";
              };
              return (result = result.$gsub("" + "{{" + (key) + "}}", text));
            } else {
              return $gvars.log.$error("" + ($$($nesting, 'I18n').$t("wrong placeholder: ")) + " in '" + (parameter) + "': '" + (key.$first()) + "'")
            };}, $$339.$$s = self, $$339.$$arity = 1, $$339));
          return result;
        }, $Default_resolve_placeholder$338.$$arity = 2), nil) && 'resolve_placeholder';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting);
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["abc_to_harpnotes_factory"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$===', '$new', '$error', '$split', '$[]', '$count', '$length', '$last', '$each', '$match', '$parse', '$[]=', '$-', '$first', '$<<', '$message', '$+', '$inject', '$each_with_index', '$include?', '$t', '$strip', '$==', '$get_metadata', '$map', '$select', '$nil?', '$join', '$compact', '$flatten']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Harpnotes');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Input');

      var $nesting = [self].concat($parent_nesting);

      
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'ABCToHarpnotesFactory');

        var $nesting = [self].concat($parent_nesting), $ABCToHarpnotesFactory_create_engine$1;

        return (Opal.defs(self, '$create_engine', $ABCToHarpnotesFactory_create_engine$1 = function $$create_engine(engine) {
          var self = this, $case = nil, result = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          $case = engine;
          if ("ABC2SVG"['$===']($case)) {result = $$$($$$($$($nesting, 'Harpnotes'), 'Input'), 'Abc2svgToHarpnotes').$new()}
          else {
          $gvars.log.$error("" + "Undefined abc parser: " + (engine));
          result = $$$($$$($$($nesting, 'Harpnotes'), 'Input'), 'Abc2svgToHarpnotes').$new();};
          return result;
        }, $ABCToHarpnotesFactory_create_engine$1.$$arity = 1), nil) && 'create_engine'
      })($nesting[0], null, $nesting);
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'AbstractAbcToHarpnotes');

        var $nesting = [self].concat($parent_nesting), $AbstractAbcToHarpnotes_initialize$2, $AbstractAbcToHarpnotes_charpos_to_line_column$3, $AbstractAbcToHarpnotes_parse_harpnote_config$4, $AbstractAbcToHarpnotes_get_metadata$7, $AbstractAbcToHarpnotes_add_metadata$10;

        self.$$prototype.abc_code = nil;
        
        
        Opal.def(self, '$initialize', $AbstractAbcToHarpnotes_initialize$2 = function $$initialize() {
          var self = this;

          
          self.abc_code = nil;
          return (self.previous_new_part = []);
        }, $AbstractAbcToHarpnotes_initialize$2.$$arity = 0);
        
        Opal.def(self, '$charpos_to_line_column', $AbstractAbcToHarpnotes_charpos_to_line_column$3 = function $$charpos_to_line_column(charpos) {
          var $a, self = this, cleancharpos = nil, lines = nil, line_no = nil, char_pos = nil;

          
          cleancharpos = ($truthy($a = charpos) ? $a : 1);
          lines = self.abc_code['$[]'](1, cleancharpos).$split("\n");
          line_no = lines.$count();
          char_pos = lines.$last().$length();
          return [line_no, char_pos];
        }, $AbstractAbcToHarpnotes_charpos_to_line_column$3.$$arity = 1);
        
        Opal.def(self, '$parse_harpnote_config', $AbstractAbcToHarpnotes_parse_harpnote_config$4 = function $$parse_harpnote_config(abc_code) {
          var $$5, self = this, hn_config_from_song = nil, line_no = nil, $writer = nil;

          
          hn_config_from_song = $hash2([], {});
          line_no = 1;
          $send(abc_code.$split("\n"), 'each', [], ($$5 = function(line){var self = $$5.$$s || this, $$6, $a, entry = nil, parsed_entry = nil, $writer = nil, e = nil, message = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (line == null) {
              line = nil;
            };
            entry = $send(line, 'match', [/^%%%%hn\.(print|legend|note|annotation|lyrics) (.*)/], ($$6 = function(m){var self = $$6.$$s || this;

            
              
              if (m == null) {
                m = nil;
              };
              return [m['$[]'](1), m['$[]'](2)];}, $$6.$$s = self, $$6.$$arity = 1, $$6));
            if ($truthy(entry)) {
              
              try {
                
                parsed_entry = $$($nesting, 'JSON').$parse(entry.$last());
                
                $writer = ["line_no", line_no];
                $send(parsed_entry, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                ($truthy($a = hn_config_from_song['$[]'](entry.$first())) ? $a : (($writer = [entry.$first(), []]), $send(hn_config_from_song, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
                hn_config_from_song['$[]'](entry.$first())['$<<'](parsed_entry);
              } catch ($err) {
                if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
                  try {
                    
                    message = "" + "error in harpnote commands: " + (e.$message()) + " [" + (line_no) + ":" + (entry) + "]";
                    $gvars.log.$error(message, [line_no, 1], [line_no, 2]);
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              };};
            return (line_no = $rb_plus(line_no, 1));}, $$5.$$s = self, $$5.$$arity = 1, $$5));
          if ($truthy(hn_config_from_song['$[]']("legend"))) {
            
            $writer = ["legend", hn_config_from_song['$[]']("legend").$first()];
            $send(hn_config_from_song, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if ($truthy(hn_config_from_song['$[]']("lyrics"))) {
            
            $writer = ["lyrics", hn_config_from_song['$[]']("lyrics").$first()];
            $send(hn_config_from_song, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          return hn_config_from_song;
        }, $AbstractAbcToHarpnotes_parse_harpnote_config$4.$$arity = 1);
        
        Opal.def(self, '$get_metadata', $AbstractAbcToHarpnotes_get_metadata$7 = function $$get_metadata(abc_code) {
          var $$8, self = this, retval = nil;

          
          retval = $send(abc_code.$split("\n").$each_with_index(), 'inject', [$hash2([], {})], ($$8 = function(result, $mlhs_tmp1){var self = $$8.$$s || this, $a, $b, $$9, line = nil, index = nil, entry = nil, key = nil, filename = nil, $writer = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (result == null) {
              result = nil;
            };
            
            if ($mlhs_tmp1 == null) {
              $mlhs_tmp1 = nil;
            };
            $b = $mlhs_tmp1, $a = Opal.to_ary($b), (line = ($a[0] == null ? nil : $a[0])), (index = ($a[1] == null ? nil : $a[1])), $b;
            entry = $send(line, 'match', [/^([A-Z]):\s*(.*)/], ($$9 = function(m){var self = $$9.$$s || this;

            
              
              if (m == null) {
                m = nil;
              };
              return [m['$[]'](1), m['$[]'](2)];}, $$9.$$s = self, $$9.$$arity = 1, $$9));
            if ($truthy(entry)) {
              
              key = entry.$first();
              if ($truthy(result['$[]'](key))) {
                
                if ($truthy(["F", "X"]['$include?'](key))) {
                  $gvars.log.$error("" + ($$($nesting, 'I18n').$t("more than one line found for ")) + " ':" + (key) + "'", [$rb_plus(index, 1), 1])};
                result['$[]'](key)['$<<'](entry.$last().$strip());
              } else {
                
                if (key['$==']("F")) {
                  
                  filename = entry.$last().$strip();
                  if ($truthy(filename['$include?']("{{"))) {
                  } else if ($truthy(filename.$match(/^[a-zA-z0-9_\-\.]+$/))) {
                  } else {
                    $gvars.log.$error("" + "\"" + (filename) + "\": " + ($$($nesting, 'I18n').$t("bad characters in filename")), [$rb_plus(index, 1), 1])
                  };};
                
                $writer = [key, [entry.$last().$strip()]];
                $send(result, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
              };};
            return result;}, $$8.$$s = self, $$8.$$arity = 2, $$8.$$has_top_level_mlhs_arg = true, $$8));
          return retval;
        }, $AbstractAbcToHarpnotes_get_metadata$7.$$arity = 1);
        return (Opal.def(self, '$add_metadata', $AbstractAbcToHarpnotes_add_metadata$10 = function $$add_metadata(abc_code, new_metadata) {
          var $$11, $$12, self = this, old_metadata = nil, more_metadata = nil;

          
          old_metadata = self.$get_metadata(abc_code);
          more_metadata = $send($send(new_metadata, 'select', [], ($$11 = function(k, v){var self = $$11.$$s || this;

          
            
            if (k == null) {
              k = nil;
            };
            
            if (v == null) {
              v = nil;
            };
            return old_metadata['$[]'](k)['$nil?']();}, $$11.$$s = self, $$11.$$arity = 2, $$11)), 'map', [], ($$12 = function(k, v){var self = $$12.$$s || this;

          
            
            if (k == null) {
              k = nil;
            };
            
            if (v == null) {
              v = nil;
            };
            return "" + (k) + ":" + (v);}, $$12.$$s = self, $$12.$$arity = 2, $$12));
          return [more_metadata, abc_code].$flatten().$compact().$join("\n");
        }, $AbstractAbcToHarpnotes_add_metadata$10.$$arity = 2), nil) && 'add_metadata';
      })($nesting[0], null, $nesting);
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$warn', '$include', '$is_a?', '$map', '$to_a', '$_Array', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$native_module']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'Native');

    var $nesting = [self].concat($parent_nesting), $Native_is_a$ques$1, $Native_try_convert$2, $Native_convert$3, $Native_call$4, $Native_proc$5, $Native_included$22;

    
    Opal.defs(self, '$is_a?', $Native_is_a$ques$1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, $Native_is_a$ques$1.$$arity = 2);
    Opal.defs(self, '$try_convert', $Native_try_convert$2 = function $$try_convert(value, default$) {
      var self = this;

      
      
      if (default$ == null) {
        default$ = nil;
      };
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, $Native_try_convert$2.$$arity = -2);
    Opal.defs(self, '$convert', $Native_convert$3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($$($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, $Native_convert$3.$$arity = 1);
    Opal.defs(self, '$call', $Native_call$4 = function $$call(obj, key, $a) {
      var $iter = $Native_call$4.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Native_call$4.$$p = null;
      
      
      if ($iter) $Native_call$4.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 2, arguments.length);
      
      args = $post_args;;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, $Native_call$4.$$arity = -3);
    Opal.defs(self, '$proc', $Native_proc$5 = function $$proc() {
      var $iter = $Native_proc$5.$$p, block = $iter || nil, $$6, self = this;

      if ($iter) $Native_proc$5.$$p = null;
      
      
      if ($iter) $Native_proc$5.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'LocalJumpError'), "no block given")
      };
      return $send($$$('::', 'Kernel'), 'proc', [], ($$6 = function($a){var self = $$6.$$s || this, $post_args, args, $$7, instance = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        $send(args, 'map!', [], ($$7 = function(arg){var self = $$7.$$s || this;

        
          
          if (arg == null) {
            arg = nil;
          };
          return self.$Native(arg);}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, $$6.$$s = self, $$6.$$arity = -1, $$6));
    }, $Native_proc$5.$$arity = 0);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Helpers');

      var $nesting = [self].concat($parent_nesting), $Helpers_alias_native$8, $Helpers_native_reader$12, $Helpers_native_writer$15, $Helpers_native_accessor$18;

      
      
      Opal.def(self, '$alias_native', $Helpers_alias_native$8 = function $$alias_native(new$, $a, $b) {
        var $post_args, $kwargs, old, as, $$9, $$10, $$11, $iter = $Helpers_alias_native$8.$$p, $yield = $iter || nil, self = this;

        if ($iter) $Helpers_alias_native$8.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        $kwargs = Opal.extract_kwargs($post_args);
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if ($post_args.length > 0) {
          old = $post_args[0];
          $post_args.splice(0, 1);
        }
        if (old == null) {
          old = new$;
        };
        
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        };
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], ($$9 = function(value){var self = $$9.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          
            
            if (value == null) {
              value = nil;
            };
            self["native"][old['$[]']($range(0, -2, false))] = $$($nesting, 'Native').$convert(value);
            return value;}, $$9.$$s = self, $$9.$$arity = 1, $$9))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], ($$10 = function($c){var self = $$10.$$s || this, $iter = $$10.$$p, block = $iter || nil, $post_args, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

          
            
            if ($iter) $$10.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            value = $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());
            if ($truthy(value)) {
              return as.$new(value.$to_n())
            } else {
              return nil
            };}, $$10.$$s = self, $$10.$$arity = -1, $$10))
        } else {
          return $send(self, 'define_method', [new$], ($$11 = function($c){var self = $$11.$$s || this, $iter = $$11.$$p, block = $iter || nil, $post_args, args;
            if (self["native"] == null) self["native"] = nil;

          
            
            if ($iter) $$11.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());}, $$11.$$s = self, $$11.$$arity = -1, $$11))
        };
      }, $Helpers_alias_native$8.$$arity = -2);
      
      Opal.def(self, '$native_reader', $Helpers_native_reader$12 = function $$native_reader($a) {
        var $post_args, names, $$13, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], ($$13 = function(name){var self = $$13.$$s || this, $$14;

        
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], ($$14 = function(){var self = $$14.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, $$14.$$s = self, $$14.$$arity = 0, $$14));}, $$13.$$s = self, $$13.$$arity = 1, $$13));
      }, $Helpers_native_reader$12.$$arity = -1);
      
      Opal.def(self, '$native_writer', $Helpers_native_writer$15 = function $$native_writer($a) {
        var $post_args, names, $$16, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], ($$16 = function(name){var self = $$16.$$s || this, $$17;

        
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', ["" + (name) + "="], ($$17 = function(value){var self = $$17.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          
            
            if (value == null) {
              value = nil;
            };
            return self.$Native(self["native"][name] = value);}, $$17.$$s = self, $$17.$$arity = 1, $$17));}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      }, $Helpers_native_writer$15.$$arity = -1);
      
      Opal.def(self, '$native_accessor', $Helpers_native_accessor$18 = function $$native_accessor($a) {
        var $post_args, names, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, $Helpers_native_accessor$18.$$arity = -1);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      var self = $module($base, 'Wrapper');

      var $nesting = [self].concat($parent_nesting), $Wrapper_initialize$19, $Wrapper_to_n$20, $Wrapper_included$21;

      
      
      Opal.def(self, '$initialize', $Wrapper_initialize$19 = function $$initialize(native$) {
        var self = this;

        
        if ($truthy($$$('::', 'Kernel')['$native?'](native$))) {
        } else {
          $$$('::', 'Kernel').$raise($$($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
        };
        return (self["native"] = native$);
      }, $Wrapper_initialize$19.$$arity = 1);
      
      Opal.def(self, '$to_n', $Wrapper_to_n$20 = function $$to_n() {
        var self = this;
        if (self["native"] == null) self["native"] = nil;

        return self["native"]
      }, $Wrapper_to_n$20.$$arity = 0);
      Opal.defs(self, '$included', $Wrapper_included$21 = function $$included(klass) {
        var self = this;

        return klass.$extend($$($nesting, 'Helpers'))
      }, $Wrapper_included$21.$$arity = 1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', $Native_included$22 = function $$included(base) {
      var self = this;

      
      self.$warn("Including ::Native is deprecated. Please include Native::Wrapper instead.");
      return base.$include($$($nesting, 'Wrapper'));
    }, $Native_included$22.$$arity = 1);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Kernel');

    var $nesting = [self].concat($parent_nesting), $Kernel_native$ques$23, $Kernel_Native$24, $Kernel_Array$27;

    
    
    Opal.def(self, '$native?', $Kernel_native$ques$23 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, $Kernel_native$ques$23.$$arity = 1);
    
    Opal.def(self, '$Native', $Kernel_Native$24 = function $$Native(obj) {
      var $$25, $$26, $iter = $Kernel_Native$24.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Kernel_Native$24.$$p = null;
      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return $$$($$($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Array')))) {
        return $send(obj, 'map', [], ($$25 = function(o){var self = $$25.$$s || this;

        
          
          if (o == null) {
            o = nil;
          };
          return self.$Native(o);}, $$25.$$s = self, $$25.$$arity = 1, $$25))
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Proc')))) {
        return $send(self, 'proc', [], ($$26 = function($a){var self = $$26.$$s || this, $iter = $$26.$$p, block = $iter || nil, $post_args, args;

        
          
          if ($iter) $$26.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()));}, $$26.$$s = self, $$26.$$arity = -1, $$26))
      } else {
        return obj
      }
    }, $Kernel_Native$24.$$arity = 1);
    Opal.alias(self, "_Array", "Array");
    
    Opal.def(self, '$Array', $Kernel_Array$27 = function $$Array(object, $a) {
      var $iter = $Kernel_Array$27.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) $Kernel_Array$27.$$p = null;
      
      
      if ($iter) $Kernel_Array$27.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy(self['$native?'](object))) {
        return $send($$$($$($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, $Kernel_Array$27.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_$eq_eq$28, $Object_has_key$ques$29, $Object_each$30, $Object_$$$31, $Object_$$$eq$32, $Object_merge$excl$33, $Object_respond_to$ques$34, $Object_respond_to_missing$ques$35, $Object_method_missing$36, $Object_nil$ques$37, $Object_is_a$ques$38, $Object_instance_of$ques$39, $Object_class$40, $Object_to_a$41, $Object_inspect$42;

    self.$$prototype["native"] = nil;
    
    self.$include($$$($$$('::', 'Native'), 'Wrapper'));
    
    Opal.def(self, '$==', $Object_$eq_eq$28 = function(other) {
      var self = this;

      return self["native"] === $$$('::', 'Native').$try_convert(other)
    }, $Object_$eq_eq$28.$$arity = 1);
    
    Opal.def(self, '$has_key?', $Object_has_key$ques$29 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, $Object_has_key$ques$29.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.def(self, '$each', $Object_each$30 = function $$each($a) {
      var $post_args, args, $iter = $Object_each$30.$$p, $yield = $iter || nil, self = this;

      if ($iter) $Object_each$30.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
      } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      };
    }, $Object_each$30.$$arity = -1);
    
    Opal.def(self, '$[]', $Object_$$$31 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return $$$('::', 'Native').$call(self["native"], key)
      }
    
    }, $Object_$$$31.$$arity = 1);
    
    Opal.def(self, '$[]=', $Object_$$$eq$32 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = $$$('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
      } else {
        return self["native"][key] = native$
      };
    }, $Object_$$$eq$32.$$arity = 2);
    
    Opal.def(self, '$merge!', $Object_merge$excl$33 = function(other) {
      var self = this;

      
      
      other = $$$('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, $Object_merge$excl$33.$$arity = 1);
    
    Opal.def(self, '$respond_to?', $Object_respond_to$ques$34 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return $$$('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, $Object_respond_to$ques$34.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', $Object_respond_to_missing$ques$35 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return Opal.hasOwnProperty.call(self["native"], name);
    }, $Object_respond_to_missing$ques$35.$$arity = -2);
    
    Opal.def(self, '$method_missing', $Object_method_missing$36 = function $$method_missing(mid, $a) {
      var $iter = $Object_method_missing$36.$$p, block = $iter || nil, $post_args, args, self = this, $writer = nil;

      if ($iter) $Object_method_missing$36.$$p = null;
      
      
      if ($iter) $Object_method_missing$36.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send($$$('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    ;
    }, $Object_method_missing$36.$$arity = -2);
    
    Opal.def(self, '$nil?', $Object_nil$ques$37 = function() {
      var self = this;

      return false
    }, $Object_nil$ques$37.$$arity = 0);
    
    Opal.def(self, '$is_a?', $Object_is_a$ques$38 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, $Object_is_a$ques$38.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$instance_of?', $Object_instance_of$ques$39 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, $Object_instance_of$ques$39.$$arity = 1);
    
    Opal.def(self, '$class', $Object_class$40 = function() {
      var self = this;

      return self.$$class;
    }, $Object_class$40.$$arity = 0);
    
    Opal.def(self, '$to_a', $Object_to_a$41 = function $$to_a(options) {
      var $iter = $Object_to_a$41.$$p, block = $iter || nil, self = this;

      if ($iter) $Object_to_a$41.$$p = null;
      
      
      if ($iter) $Object_to_a$41.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $send($$$($$$('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a();
    }, $Object_to_a$41.$$arity = -1);
    return (Opal.def(self, '$inspect', $Object_inspect$42 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, $Object_inspect$42.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), $$($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_initialize$43, $Array_each$44, $Array_$$$45, $Array_$$$eq$46, $Array_last$47, $Array_length$48, $Array_inspect$49;

    self.$$prototype.named = self.$$prototype["native"] = self.$$prototype.get = self.$$prototype.block = self.$$prototype.set = self.$$prototype.length = nil;
    
    self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
    self.$include($$($nesting, 'Enumerable'));
    
    Opal.def(self, '$initialize', $Array_initialize$43 = function $$initialize(native$, options) {
      var $iter = $Array_initialize$43.$$p, block = $iter || nil, $a, self = this;

      if ($iter) $Array_initialize$43.$$p = null;
      
      
      if ($iter) $Array_initialize$43.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', $Array_initialize$43, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise($$($nesting, 'ArgumentError'), "no length found on the array-like object")
      } else {
        return nil
      };
    }, $Array_initialize$43.$$arity = -2);
    
    Opal.def(self, '$each', $Array_each$44 = function $$each() {
      var $iter = $Array_each$44.$$p, block = $iter || nil, self = this;

      if ($iter) $Array_each$44.$$p = null;
      
      
      if ($iter) $Array_each$44.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, $Array_each$44.$$arity = 0);
    
    Opal.def(self, '$[]', $Array_$$$45 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if ($$($nesting, 'String')['$===']($case) || $$($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
      } else {
        return self["native"][index]
      }}
      else if ($$($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
      } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
        } else {
          return self.$Native(result)
        }
      } else {
        return nil
      };
    }, $Array_$$$45.$$arity = 1);
    
    Opal.def(self, '$[]=', $Array_$$$eq$46 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, $$($nesting, 'Native').$convert(value))
      } else {
        return self["native"][index] = $$($nesting, 'Native').$convert(value)
      }
    }, $Array_$$$eq$46.$$arity = 2);
    
    Opal.def(self, '$last', $Array_last$47 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
      } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, $Array_last$47.$$arity = -1);
    
    Opal.def(self, '$length', $Array_length$48 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, $Array_length$48.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.def(self, '$inspect', $Array_inspect$49 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, $Array_inspect$49.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_to_n$50;

    return (Opal.def(self, '$to_n', $Numeric_to_n$50 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Numeric_to_n$50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Proc');

    var $nesting = [self].concat($parent_nesting), $Proc_to_n$51;

    return (Opal.def(self, '$to_n', $Proc_to_n$51 = function $$to_n() {
      var self = this;

      return self
    }, $Proc_to_n$51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_to_n$52;

    return (Opal.def(self, '$to_n', $String_to_n$52 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $String_to_n$52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Regexp');

    var $nesting = [self].concat($parent_nesting), $Regexp_to_n$53;

    return (Opal.def(self, '$to_n', $Regexp_to_n$53 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Regexp_to_n$53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'MatchData');

    var $nesting = [self].concat($parent_nesting), $MatchData_to_n$54;

    self.$$prototype.matches = nil;
    return (Opal.def(self, '$to_n', $MatchData_to_n$54 = function $$to_n() {
      var self = this;

      return self.matches
    }, $MatchData_to_n$54.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Struct');

    var $nesting = [self].concat($parent_nesting), $Struct_to_n$55;

    return (Opal.def(self, '$to_n', $Struct_to_n$55 = function $$to_n() {
      var $$56, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], ($$56 = function(name, value){var self = $$56.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return result[name] = $$($nesting, 'Native').$try_convert(value, value);}, $$56.$$s = self, $$56.$$arity = 2, $$56));
      return result;
    }, $Struct_to_n$55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_to_n$57;

    return (Opal.def(self, '$to_n', $Array_to_n$57 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($$($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, $Array_to_n$57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_n$58;

    return (Opal.def(self, '$to_n', $Boolean_to_n$58 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, $Boolean_to_n$58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_n$59;

    return (Opal.def(self, '$to_n', $Time_to_n$59 = function $$to_n() {
      var self = this;

      return self
    }, $Time_to_n$59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_n$60;

    return (Opal.def(self, '$to_n', $NilClass_to_n$60 = function $$to_n() {
      var self = this;

      return null;
    }, $NilClass_to_n$60.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_initialize$61, $Hash_to_n$62;

    
    Opal.alias(self, "_initialize", "initialize");
    
    Opal.def(self, '$initialize', $Hash_initialize$61 = function $$initialize(defaults) {
      var $iter = $Hash_initialize$61.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_initialize$61.$$p = null;
      
      
      if ($iter) $Hash_initialize$61.$$p = null;;
      ;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = $$($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return $$($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    ;
    }, $Hash_initialize$61.$$arity = -1);
    return (Opal.def(self, '$to_n', $Hash_to_n$62 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $$($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, $Hash_to_n$62.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Module');

    var $nesting = [self].concat($parent_nesting), $Module_native_module$63;

    return (Opal.def(self, '$native_module', $Module_native_module$63 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, $Module_native_module$63.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Class');

    var $nesting = [self].concat($parent_nesting), $Class_native_alias$64, $Class_native_class$65;

    
    
    Opal.def(self, '$native_alias', $Class_native_alias$64 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.prototype['$' + existing_mid];
      if (!aliased) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", existing_mid));
      }
      self.prototype[new_jsid] = aliased;
    
    }, $Class_native_alias$64.$$arity = 2);
    return (Opal.def(self, '$native_class', $Class_native_class$65 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, $Class_native_class$65.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

/* Generated by Opal 1.0.0 */
Opal.modules["abc2svg_to_harpnotes"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash = Opal.hash, $range = Opal.range;

  Opal.add_stubs(['$require', '$attr_reader', '$get', '$_reset_state', '$get_metadata', '$new', '$abcplay=', '$-', '$get_abcmodel', '$nil?', '$raise', '$t', '$_make_metadata', '$_transform_voices', '$meta_data=', '$_make_harpnote_options', '$harpnote_options=', '$[]', '$meta_data', '$empty?', '$error', '$[]=', '$compact', '$map', '$gsub', '$strip', '$+', '$_get_key_by_accidentals', '$first', '$==', '$/', '$to_i', '$join', '$>=', '$private', '$match', '$charpos_to_line_column', '$flatten', '$to_a', '$each_with_index', '$_transform_voice', '$_make_variant_ending_jumps', '$unshift', '$to_s', '$_investigate_first_bar', '$each', '$send', '$inject', '$<<', '$_make_jumplines', '$_make_notebound_annotations', '$_transform_chordsymbol', '$count', '$last', '$select', '$!', '$=~', '$_extract_goto_info_from_bar', '$!=', '$length', '$push', '$_bar_is_repetition_end?', '$>', '$pop', '$_transform_bar_repeat_end', '$include?', '$_parse_origin', '$_parse_tuplet_info', '$_parse_decorations', '$_transform_measure_start', '$_convert_duration', '$decorations=', '$measure_count=', '$_transform_count_note', '$count_note=', '$_transform_lyrics', '$lyrics=', '$time=', '$_mkznid', '$znid=', '$origin=', '$start_pos=', '$end_pos=', '$tuplet=', '$tuplet_start=', '$tuplet_end=', '$variant=', '$time', '$duration', '$duration=', '$origin', '$start_pos', '$end_pos', '$tuplet', '$tuplet_start', '$tuplet_end', '$tie_end=', '$tie_start=', '$_parse_slur', '$_push_slur', '$slur_starts=', '$_pop_slur', '$slur_ends=', '$measure_start=', '$_make_repeats_jumps_annotations', '$is_a?', '$_extract_chord_lines', '$znid', '$*', '$%', '$ceil', '$split', '$zip', '$min', '$round', '$floor', '$visible=', '$invisible=', '$prev_pitch', '$pitch=', '$warning', '$start_pos_to_s', '$===', '$shift=', '$notes', '$to_f', '$pitch', '$next_pitch=', '$next_playable=', '$next_first_in_part=', '$prev_pitch=', '$prev_playable=', '$first_in_part=', '$<', '$start_with?', '$to_sym', '$&', '$>>']);
  
  self.$require("native");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Harpnotes');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Input');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'Abc2svgToHarpnotes');

        var $nesting = [self].concat($parent_nesting), $Abc2svgToHarpnotes_initialize$1, $Abc2svgToHarpnotes_transform$2, $Abc2svgToHarpnotes__make_harpnote_options$3, $Abc2svgToHarpnotes__get_key_by_accidentals$5, $Abc2svgToHarpnotes__make_metadata$6, $Abc2svgToHarpnotes__mkznid$8, $Abc2svgToHarpnotes__reset_state$9, $Abc2svgToHarpnotes__transform_voices$11, $Abc2svgToHarpnotes__transform_voice$13, $Abc2svgToHarpnotes__investigate_first_bar$20, $Abc2svgToHarpnotes__bar_is_repetition_end$ques$22, $Abc2svgToHarpnotes__transform_bar$23, $Abc2svgToHarpnotes__transform_part$24, $Abc2svgToHarpnotes__transform_remark$25, $Abc2svgToHarpnotes__transform_note$26, $Abc2svgToHarpnotes__transform_measure_start$31, $Abc2svgToHarpnotes__transform_chordsymbol$32, $Abc2svgToHarpnotes__transform_count_note$34, $Abc2svgToHarpnotes__convert_duration$38, $Abc2svgToHarpnotes__transform_staves$39, $Abc2svgToHarpnotes__transform_rest$40, $Abc2svgToHarpnotes__transform_tempo$42, $Abc2svgToHarpnotes__transform_yspace$43, $Abc2svgToHarpnotes__transform_bar_repeat_end$44, $Abc2svgToHarpnotes__transform_grace$45, $Abc2svgToHarpnotes__transform_format$46, $Abc2svgToHarpnotes__transform_key$47, $Abc2svgToHarpnotes__transform_lyrics$48, $Abc2svgToHarpnotes__transform_meter$49, $Abc2svgToHarpnotes__transform_block$50, $Abc2svgToHarpnotes__transform_clef$51, $Abc2svgToHarpnotes__make_variant_ending_jumps$52, $Abc2svgToHarpnotes__make_jumplines$56, $Abc2svgToHarpnotes__make_notebound_annotations$58, $Abc2svgToHarpnotes__make_repeats_jumps_annotations$63, $Abc2svgToHarpnotes__get_extra$67, $Abc2svgToHarpnotes__push_slur$69, $Abc2svgToHarpnotes__pop_slur$70, $Abc2svgToHarpnotes__extract_chord_lines$71, $Abc2svgToHarpnotes__extract_goto_info_from_bar$74, $Abc2svgToHarpnotes__parse_decorations$77, $Abc2svgToHarpnotes__parse_origin$80, $Abc2svgToHarpnotes__parse_slur$81, $Abc2svgToHarpnotes__parse_tuplet_info$82;

        self.$$prototype.abc_code = self.$$prototype.abcplay = self.$$prototype.abc_model = self.$$prototype.meta_data = self.$$prototype.info_fields = self.$$prototype.remark_table = self.$$prototype.score_statements = self.$$prototype.wmeasure = self.$$prototype.measure_start_time = self.$$prototype.next_note_marks = self.$$prototype.variant_no = self.$$prototype.variant_endings = self.$$prototype.previous_note = self.$$prototype.repetition_stack = self.$$prototype.pushed_variant_ending_repeat = self.$$prototype.part_table = self.$$prototype.measure_count = self.$$prototype.tie_started = self.$$prototype.countby = self.$$prototype._shortest_note = self.$$prototype.pitch_providers = self.$$prototype.slurstack = self.$$prototype.tuplet_p = nil;
        
        Opal.const_set($nesting[0], 'ABC2SVG_DURATION_FACTOR', 1536);
        self.$attr_reader("abc_model");
        
        Opal.def(self, '$initialize', $Abc2svgToHarpnotes_initialize$1 = function $$initialize() {
          var $iter = $Abc2svgToHarpnotes_initialize$1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          if ($iter) $Abc2svgToHarpnotes_initialize$1.$$p = null;
          // Prepare super implicit arguments
          for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
            $zuper[$zuper_i] = arguments[$zuper_i];
          }
          
          $send(self, Opal.find_super_dispatcher(self, 'initialize', $Abc2svgToHarpnotes_initialize$1, false), $zuper, $iter);
          self.abcplay = nil;
          self.abc_code = nil;
          self.previous_new_part = [];
          self.score_statements = [];
          self.part_table = $hash2([], {});
          self.abc_model = $hash2([], {});
          self._shortest_note = $gvars.conf.$get("layout.SHORTEST_NOTE");
          return self.$_reset_state();
        }, $Abc2svgToHarpnotes_initialize$1.$$arity = 0);
        
        Opal.def(self, '$transform', $Abc2svgToHarpnotes_transform$2 = function $$transform(zupfnoter_abc) {
          var $a, $b, self = this, abc_parser = nil, $writer = nil, player_model_abc = nil, result = nil, filebase = nil;
          if ($gvars.conf == null) $gvars.conf = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          self.abc_code = zupfnoter_abc;
          self.annotations = $gvars.conf.$get("annotations");
          self.info_fields = self.$get_metadata(self.abc_code);
          abc_parser = $$$($$($nesting, 'ABC2SVG'), 'Abc2Svg').$new(nil, $hash2(["mode"], {"mode": "model"}));
          if ($truthy(self.abcplay)) {
            
            $writer = [self.abcplay];
            $send(abc_parser, 'abcplay=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          $b = abc_parser.$get_abcmodel(zupfnoter_abc), $a = Opal.to_ary($b), (self.abc_model = ($a[0] == null ? nil : $a[0])), (player_model_abc = ($a[1] == null ? nil : $a[1])), $b;
          if ($truthy(self.abc_model['$nil?']())) {
            self.$raise($$($nesting, 'I18n').$t("no suitable ABC found"))};
          self.$_make_metadata();
          result = self.$_transform_voices();
          
          $writer = [self.meta_data];
          $send(result, 'meta_data=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$_make_harpnote_options()];
          $send(result, 'harpnote_options=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          filebase = result.$meta_data()['$[]']("filename");
          if ($truthy(filebase['$empty?']())) {
            $gvars.log.$error($$($nesting, 'I18n').$t("Filename not specified in song add an F: instruction"), [1, 1])};
          return [result, player_model_abc];
        }, $Abc2svgToHarpnotes_transform$2.$$arity = 1);
        
        Opal.def(self, '$_make_harpnote_options', $Abc2svgToHarpnotes__make_harpnote_options$3 = function $$_make_harpnote_options() {
          var $$4, self = this, result = nil, $writer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          result = $hash2(["lyrics"], {"lyrics": $hash2(["text"], {"text": self.info_fields['$[]']("W")})});
          
          $writer = ["template", $gvars.conf.$get("template")];
          $send(result, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = ["print", $send($gvars.conf.$get("produce"), 'map', [], ($$4 = function(i){var self = $$4.$$s || this, $a, title = nil, filenamepart = nil;
            if ($gvars.conf == null) $gvars.conf = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (i == null) {
              i = nil;
            };
            title = $gvars.conf.$get("" + "extract." + (i) + ".title");
            if ($truthy(title)) {
              
              filenamepart = ($truthy($a = $gvars.conf.$get("" + "extract." + (i) + ".filenamepart")) ? $a : title).$strip().$gsub(/[^a-zA-Z0-9\-\_]/, "_");
              return $hash2(["title", "view_id", "filenamepart"], {"title": title, "view_id": i, "filenamepart": filenamepart});
            } else {
              
              $gvars.log.$error($rb_plus($$($nesting, 'I18n').$t("could not find extract with number"), "" + " " + (i)), [1, 1], [1000, 1000]);
              return nil;
            };}, $$4.$$s = self, $$4.$$arity = 1, $$4)).$compact()];
          $send(result, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return result;
        }, $Abc2svgToHarpnotes__make_harpnote_options$3.$$arity = 0);
        
        Opal.def(self, '$_get_key_by_accidentals', $Abc2svgToHarpnotes__get_key_by_accidentals$5 = function $$_get_key_by_accidentals(key_model) {
          var self = this;

          return $hash(7, ["C#", "D#Dor", "E#Phr", "F#Lyd", "G#Mix", "A#m", "B#Loc"], 6, ["F#", "G#Dor", "A#Phr", "BLyd", "C#Mix", "D#m", "E#Loc"], 5, ["B", "C#Dor", "D#Phr", "ELyd", "F#Mix", "G#m", "A#Loc"], 4, ["E", "F#Dor", "G#Phr", "ALyd", "BMix", "C#m", "D#Loc"], 3, ["A", "BDor", "C#Phr", "DLyd", "EMix", "F#m", "G#Loc"], 2, ["D", "EDor", "F#Phr", "GLyd", "AMix", "Bm", "C#Loc"], 1, ["G", "ADor", "BPhr", "CLyd", "DMix", "Em", "F#Loc"], 0, ["C", "DDor", "EPhr", "FLyd", "GMix", "Am", "BLoc"], -1, ["F", "GDor", "APhr", "BbLyd", "CMix", "Dm", "ELoc"], -2, ["Bb", "CDor", "DPhr", "EbLyd", "FMix", "Gm", "ALoc"], -3, ["Eb", "FDor", "GPhr", "AbLyd", "BbMix", "Cm", "DLoc"], -4, ["Ab", "BbDor", "CPhr", "DbLyd", "EbMix", "Fm", "GLoc"], -5, ["Db", "EbDor", "FPhr", "GbLyd", "AbMix", "Bbm", "CLoc"], -6, ["Gb", "AbDor", "" + "BbPhr" + "CbLyd", "DbMix", "Ebm", "FLoc"], -7, ["" + "Cb" + "DbDor", "" + "EbPhr" + "FbLyd", "GbMix", "Abm", "BbLoc"])['$[]'](key_model['$[]']("k_sf"))['$[]'](key_model['$[]']("k_mode"))
        }, $Abc2svgToHarpnotes__get_key_by_accidentals$5.$$arity = 1);
        
        Opal.def(self, '$_make_metadata', $Abc2svgToHarpnotes__make_metadata$6 = function $$_make_metadata() {
          var $a, $$7, self = this, key = nil, o_key = nil, o_key_display = nil, tempo_note = nil, duration = nil, bpm = nil, tempo_display = nil;

          
          key = self.$_get_key_by_accidentals(self.abc_model['$[]']("voices").$first()['$[]']("voice_properties")['$[]']("key"));
          o_key = self.$_get_key_by_accidentals(self.abc_model['$[]']("voices").$first()['$[]']("voice_properties")['$[]']("okey"));
          o_key_display = "";
          if (key['$=='](o_key)) {
          } else {
            o_key_display = "" + "(Original in " + (o_key) + ")"
          };
          tempo_note = (function() { try {
            return self.abc_model['$[]']("voices").$first()['$[]']("voice_properties")['$[]']("sym")
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          if ($truthy(($truthy($a = tempo_note) ? tempo_note['$[]']("tempo_notes") : $a))) {
            
            duration = $send(tempo_note['$[]']("tempo_notes"), 'map', [], ($$7 = function(i){var self = $$7.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return $rb_divide(i, $$($nesting, 'ABC2SVG_DURATION_FACTOR'));}, $$7.$$s = self, $$7.$$arity = 1, $$7));
            bpm = tempo_note['$[]']("tempo").$to_i();
            tempo_display = self.info_fields['$[]']("Q").$join(" ");
          } else {
            
            duration = [0.25];
            bpm = 120;
            tempo_display = "1/4=120";
          };
          if ($truthy($rb_ge(bpm, 1))) {
          } else {
            bpm = 120
          };
          return (self.meta_data = $hash2(["number", "composer", "title", "filename", "tempo", "tempo_display", "meter", "key", "o_key"], {"number": self.info_fields['$[]']("X").$first(), "composer": ($truthy($a = self.info_fields['$[]']("C")) ? $a : []).$join("\n"), "title": ($truthy($a = self.info_fields['$[]']("T")) ? $a : []).$join("\n"), "filename": ($truthy($a = self.info_fields['$[]']("F")) ? $a : []).$join("\n"), "tempo": $hash2(["duration", "bpm", "sym"], {"duration": duration, "bpm": bpm, "sym": tempo_note}), "tempo_display": tempo_display, "meter": self.info_fields['$[]']("M"), "key": key, "o_key": o_key_display}));
        }, $Abc2svgToHarpnotes__make_metadata$6.$$arity = 0);
        self.$private();
        
        Opal.def(self, '$_mkznid', $Abc2svgToHarpnotes__mkznid$8 = function $$_mkznid(voice_element) {
          var self = this, result = nil, start_pos = nil, end_pos = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          result = self.remark_table['$[]'](voice_element['$[]']("time"));
          if ($truthy(result)) {
            if ($truthy(result.$match(/[a-z][a-zA-Z0-9_]*/))) {
            } else {
              
              start_pos = self.$charpos_to_line_column(voice_element['$[]']("istart"));
              end_pos = self.$charpos_to_line_column(voice_element['$[]']("iend"));
              $gvars.log.$error("illegal character in of [r:] (must be of [a-z][a-z0.9_])", start_pos, end_pos);
              result = nil;
            }
          } else if ($truthy(result)) {
          } else {
            result = "" + (voice_element['$[]']("time"))
          };
          return result;
        }, $Abc2svgToHarpnotes__mkznid$8.$$arity = 1);
        
        Opal.def(self, '$_reset_state', $Abc2svgToHarpnotes__reset_state$9 = function $$_reset_state() {
          var $$10, self = this;

          
          self.countnames = $send($range(1, 32, false).$to_a(), 'map', [], ($$10 = function(i){var self = $$10.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return [i, "e", "u", "e"];}, $$10.$$s = self, $$10.$$arity = 1, $$10)).$flatten();
          self.jumptargets = $hash2([], {});
          self.is_first_measure = true;
          self.measure_start_time = 0;
          self.measure_count = 0;
          self.next_note_marks = $hash2(["measure", "repeat_start", "variant_ending", "variant_followup"], {"measure": false, "repeat_start": false, "variant_ending": false, "variant_followup": false});
          self.previous_new_part = [];
          self.previous_note = nil;
          self.remark_table = $hash2([], {});
          self.repetition_stack = [];
          self.variant_endings = [[]];
          self.tie_started = false;
          self.variant_no = 0;
          self.slurstack = 0;
          self.tuplet_count = 1;
          self.tuplet_down_count = 1;
          self.countby = nil;
          return (self.wmeasure = 0);
        }, $Abc2svgToHarpnotes__reset_state$9.$$arity = 0);
        
        Opal.def(self, '$_transform_voices', $Abc2svgToHarpnotes__transform_voices$11 = function $$_transform_voices() {
          var $$12, self = this, hn_voices = nil;

          
          hn_voices = $send(self.abc_model['$[]']("voices").$each_with_index(), 'map', [], ($$12 = function(voice_model, voice_index){var self = $$12.$$s || this, voice_id = nil, result = nil;

          
            
            if (voice_model == null) {
              voice_model = nil;
            };
            
            if (voice_index == null) {
              voice_index = nil;
            };
            voice_id = "" + "v_" + ($rb_plus(voice_index, 1));
            result = self.$_transform_voice(voice_model, voice_id);
            if ($truthy(result['$empty?']())) {
            } else {
              result = $rb_plus(result, self.$_make_variant_ending_jumps(voice_id))
            };
            return result;}, $$12.$$s = self, $$12.$$arity = 2, $$12)).$compact();
          hn_voices.$unshift(hn_voices.$first());
          return $$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Song').$new(hn_voices);
        }, $Abc2svgToHarpnotes__transform_voices$11.$$arity = 0);
        
        Opal.def(self, '$_transform_voice', $Abc2svgToHarpnotes__transform_voice$13 = function $$_transform_voice(voice_model, voice_index) {
          var $$14, $$15, $$16, $$17, $$18, $$19, $a, self = this, note_id = nil, result = nil, jumplines = nil, notebound_annotations = nil, chordsymbols = nil, num_voice_index = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          note_id = self.abc_model['$[]']("music_type_ids")['$[]']("note").$to_s();
          self.$_reset_state();
          self.wmeasure = voice_model['$[]']("voice_properties")['$[]']("meter")['$[]']("wmeasure");
          self.countby = (function() { try {
            return voice_model['$[]']("voice_properties")['$[]']("meter")['$[]']("a_meter").$first()['$[]']("bot").$to_i()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          self.$_investigate_first_bar(voice_model);
          $send(voice_model['$[]']("symbols"), 'each', [], ($$14 = function(voice_model_element){var self = $$14.$$s || this, $writer = nil;

          
            
            if (voice_model_element == null) {
              voice_model_element = nil;
            };
            
            $writer = ["start_pos", self.$charpos_to_line_column(voice_model_element['$[]']("istart"))];
            $send(voice_model_element, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["end_pos", self.$charpos_to_line_column(voice_model_element['$[]']("iend"))];
            $send(voice_model_element, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          self.pitch_providers = $send(voice_model['$[]']("symbols"), 'map', [], ($$15 = function(voice_model_element){var self = $$15.$$s || this;

          
            
            if (voice_model_element == null) {
              voice_model_element = nil;
            };
            if (voice_model_element['$[]']("type").$to_s()['$=='](note_id)) {
              return voice_model_element
            } else {
              return nil
            };}, $$15.$$s = self, $$15.$$arity = 1, $$15));
          result = $send(voice_model['$[]']("symbols").$each_with_index(), 'map', [], ($$16 = function(voice_model_element, index){var self = $$16.$$s || this, type = nil, e = nil;
            if (self.abc_model == null) self.abc_model = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (voice_model_element == null) {
              voice_model_element = nil;
            };
            
            if (index == null) {
              index = nil;
            };
            type = self.abc_model['$[]']("music_types")['$[]'](voice_model_element['$[]']("type"));
            
            try {
              result = self.$send("" + "_transform_" + (type), voice_model_element, index, voice_index)
            } catch ($err) {
              if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
                try {
                  
                  $gvars.log.$error("" + "Bug: " + (e), self.$charpos_to_line_column(voice_model_element['$[]']("istart")));
                  nil;
                } finally { Opal.pop_exception() }
              } else { throw $err; }
            };;
            return result;}, $$16.$$s = self, $$16.$$arity = 2, $$16));
          result = result.$flatten();
          jumplines = $send(result, 'inject', [[]], ($$17 = function(jumplines, element){var self = $$17.$$s || this;

          
            
            if (jumplines == null) {
              jumplines = nil;
            };
            
            if (element == null) {
              element = nil;
            };
            jumplines['$<<'](self.$_make_jumplines(element, voice_index));
            return jumplines;}, $$17.$$s = self, $$17.$$arity = 2, $$17));
          notebound_annotations = $send(result, 'inject', [[]], ($$18 = function(notebound_annotations, element){var self = $$18.$$s || this;

          
            
            if (notebound_annotations == null) {
              notebound_annotations = nil;
            };
            
            if (element == null) {
              element = nil;
            };
            return notebound_annotations['$<<'](self.$_make_notebound_annotations(element, voice_index));}, $$18.$$s = self, $$18.$$arity = 2, $$18));
          chordsymbols = $send(result, 'inject', [[]], ($$19 = function(chordsymbols, element){var self = $$19.$$s || this;

          
            
            if (chordsymbols == null) {
              chordsymbols = nil;
            };
            
            if (element == null) {
              element = nil;
            };
            return chordsymbols['$<<'](self.$_transform_chordsymbol(element, voice_index));}, $$19.$$s = self, $$19.$$arity = 2, $$19));
          result = $rb_plus(result, $rb_plus($rb_plus(jumplines, notebound_annotations), chordsymbols));
          result = result.$flatten().$compact();
          if ($truthy(result.$count()['$=='](0))) {
            
            num_voice_index = voice_index.$gsub("v_", "").$to_i();
            if ($truthy(($truthy($a = self.score_statements.$last()) ? self.score_statements.$last()['$[]']("sy")['$[]']("voices")['$[]']($rb_minus(num_voice_index, 1))['$[]']("range")['$=='](-1) : $a))) {
            } else {
              $gvars.log.$error("" + ($$($nesting, 'I18n').$t("Empty voice")) + " " + (num_voice_index) + ":  V:" + (voice_model['$[]']("voice_properties")['$[]']("id")))
            };};
          return result;
        }, $Abc2svgToHarpnotes__transform_voice$13.$$arity = 2);
        
        Opal.def(self, '$_investigate_first_bar', $Abc2svgToHarpnotes__investigate_first_bar$20 = function $$_investigate_first_bar(voice_model) {
          var $$21, $a, self = this, symbol_bar_typeid = nil, bars = nil, $writer = nil;

          
          symbol_bar_typeid = self.abc_model['$[]']("music_type_ids")['$[]']("bar").$to_s();
          bars = $send(voice_model['$[]']("symbols"), 'select', [], ($$21 = function(voice_model_element){var self = $$21.$$s || this, $a;

          
            
            if (voice_model_element == null) {
              voice_model_element = nil;
            };
            return (($a = voice_model_element['$[]']("type").$to_s()['$=='](symbol_bar_typeid)) ? voice_model_element['$[]']("invisible")['$!']() : voice_model_element['$[]']("type").$to_s()['$=='](symbol_bar_typeid));}, $$21.$$s = self, $$21.$$arity = 1, $$21)).$compact();
          self.measure_start_time = 0;
          if ($truthy(bars.$first())) {
            
            self.measure_start_time = $rb_minus(bars.$first()['$[]']("time"), self.wmeasure);
            if ($truthy(($truthy($a = bars.$first()) ? self.measure_start_time['$=='](0) : $a))) {
              
              $writer = ["measure", true];
              $send(self.next_note_marks, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            } else {
              return nil
            };
          } else {
            return nil
          };
        }, $Abc2svgToHarpnotes__investigate_first_bar$20.$$arity = 1);
        
        Opal.def(self, '$_bar_is_repetition_end?', $Abc2svgToHarpnotes__bar_is_repetition_end$ques$22 = function(type) {
          var self = this;

          return type['$=~'](/^:.*$/)
        }, $Abc2svgToHarpnotes__bar_is_repetition_end$ques$22.$$arity = 1);
        
        Opal.def(self, '$_transform_bar', $Abc2svgToHarpnotes__transform_bar$23 = function $$_transform_bar(voice_element, index, voice_index) {
          var $a, $b, self = this, result = nil, type = nil, variant_label = nil, distance = nil, $writer = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          result = [];
          type = voice_element['$[]']("bar_type");
          variant_label = voice_element['$[]']("text");
          distance = (function() { try {
            return self.$_extract_goto_info_from_bar(voice_element).$last()['$[]']("distance")
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return [-10, 10, 15]
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          if ($truthy(($truthy($a = voice_element['$[]']("invisible")) ? $a : type['$=~'](/^\:?([\[\]]+)$/)))) {
          } else {
            
            $writer = ["measure", true];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          };
          if ($truthy(type['$=~'](/^.*:$/))) {
            
            $writer = ["repeat_start", true];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          if (voice_element['$[]']("rbstart")['$=='](2)) {
            
            self.variant_no = $rb_plus(self.variant_no, 1);
            
            $writer = ["variant_ending", $hash2(["text"], {"text": variant_label})];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          if ($truthy((($a = voice_element['$[]']("rbstart")['$=='](2)) ? self.variant_endings.$last()['$empty?']() : voice_element['$[]']("rbstart")['$=='](2)))) {
            
            if ($truthy(distance.$length()['$!='](3))) {
              
              $gvars.log.$error("" + "you need to specify 3 values: " + (distance), self.$charpos_to_line_column(voice_element['$[]']("istart")), self.$charpos_to_line_column(voice_element['$[]']("iend")));
              distance = [-10, 10, 15];};
            self.variant_endings.$last().$push($hash2(["rbstop", "distance"], {"rbstop": self.previous_note, "distance": distance}));};
          if ($truthy(($truthy($a = ($truthy($b = voice_element['$[]']("rbstop")['$=='](2)) ? self.variant_endings.$last().$last()['$nil?']()['$!']() : $b)) ? self.variant_endings.$last().$last()['$[]']("rbstart") : $a))) {
            
            
            $writer = ["rbstop", self.previous_note];
            $send(self.variant_endings.$last().$last(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(self['$_bar_is_repetition_end?'](type))) {
              
              $writer = ["repeat_end", true];
              $send(self.variant_endings.$last().$last(), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            if ($truthy(self['$_bar_is_repetition_end?'](type))) {
              
              self.pushed_variant_ending_repeat = true;
              self.repetition_stack.$push(self.repetition_stack.$last());
            } else if ($truthy(($truthy($a = self.pushed_variant_ending_repeat) ? $rb_gt(self.repetition_stack.$count(), 1) : $a))) {
              self.repetition_stack.$pop()};
            if (voice_element['$[]']("rbstart")['$=='](2)) {
            } else {
              
              
              $writer = ["variant_followup", true];
              $send(self.next_note_marks, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              self.variant_endings.$push([]);
              self.variant_no = 0;
            };};
          if ($truthy(self['$_bar_is_repetition_end?'](type))) {
            result['$<<'](self.$_transform_bar_repeat_end(voice_element, index, voice_index))};
          if ($truthy((($a = voice_element['$[]']("rbstop")['$=='](2)) ? voice_element['$[]']("rbstart")['$=='](2)['$!']() : voice_element['$[]']("rbstop")['$=='](2)))) {
            if ($truthy(type['$include?'](":"))) {
              if ($rb_minus(voice_element['$[]']("time"), self.measure_start_time)['$=='](self.wmeasure)) {
              } else {
                
                $writer = ["measure", false];
                $send(self.next_note_marks, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];
              }}};
          self.is_first_measure = false;
          return result;
        }, $Abc2svgToHarpnotes__transform_bar$23.$$arity = 3);
        
        Opal.def(self, '$_transform_part', $Abc2svgToHarpnotes__transform_part$24 = function $$_transform_part(voice_element, index, voice_index) {
          var self = this, start_pos = nil, end_pos = nil, $writer = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          if ($truthy(self.part_table['$[]'](voice_element['$[]']("time")))) {
            
            start_pos = self.$charpos_to_line_column(voice_element['$[]']("istart"));
            end_pos = self.$charpos_to_line_column(voice_element['$[]']("iend"));
            $gvars.log.$error($rb_plus("" + "abc:" + (start_pos.$first()) + ":" + (start_pos.$last()) + " Error: ", $$($nesting, 'I18n').$t("Multiple parts for same note")), start_pos, end_pos);};
          
          $writer = [voice_element['$[]']("time"), voice_element['$[]']("text")];
          $send(self.part_table, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return nil;
        }, $Abc2svgToHarpnotes__transform_part$24.$$arity = 3);
        
        Opal.def(self, '$_transform_remark', $Abc2svgToHarpnotes__transform_remark$25 = function $$_transform_remark(voice_element, index, voice_index) {
          var self = this, start_pos = nil, end_pos = nil, $writer = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          if ($truthy(self.remark_table['$[]'](voice_element['$[]']("time")))) {
            
            start_pos = self.$charpos_to_line_column(voice_element['$[]']("istart"));
            end_pos = self.$charpos_to_line_column(voice_element['$[]']("iend"));
            $gvars.log.$error($rb_plus("" + "abc:" + (start_pos.$first()) + ":" + (start_pos.$last()) + " Error: ", $$($nesting, 'I18n').$t("Multiple remarks for same note")), start_pos, end_pos);};
          
          $writer = [voice_element['$[]']("time"), voice_element['$[]']("text")];
          $send(self.remark_table, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return nil;
        }, $Abc2svgToHarpnotes__transform_remark$25.$$arity = 3);
        
        Opal.def(self, '$_transform_note', $Abc2svgToHarpnotes__transform_note$26 = function $$_transform_note(voice_element, index, voice_index) {
          var $a, $b, $$27, $$28, $$29, $$30, self = this, origin = nil, start_pos = nil, end_pos = nil, tuplet = nil, tuplet_end = nil, tuplet_start = nil, decorations = nil, duration = nil, notes = nil, result = nil, synchpoint = nil, first_note = nil, $writer = nil, amount_of_slur_ends = nil;

          
          origin = self.$_parse_origin(voice_element);
          $a = [origin['$[]']("startChar"), origin['$[]']("endChar")], (start_pos = $a[0]), (end_pos = $a[1]), $a;
          $b = self.$_parse_tuplet_info(voice_element), $a = Opal.to_ary($b), (tuplet = ($a[0] == null ? nil : $a[0])), (tuplet_end = ($a[1] == null ? nil : $a[1])), (tuplet_start = ($a[2] == null ? nil : $a[2])), $b;
          decorations = self.$_parse_decorations(voice_element);
          self.$_transform_measure_start(voice_element);
          duration = self.$_convert_duration(voice_element['$[]']("notes").$first()['$[]']("dur"));
          if (voice_element['$[]']("istart")['$=='](1745)) {
            debugger};
          notes = $send(voice_element['$[]']("notes"), 'map', [], ($$27 = function(the_note){var self = $$27.$$s || this, result = nil, $writer = nil;
            if (self.measure_count == null) self.measure_count = nil;
            if (self.variant_no == null) self.variant_no = nil;

          
            
            if (the_note == null) {
              the_note = nil;
            };
            result = $$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Note').$new(the_note['$[]']("midi"), duration);
            
            $writer = [decorations];
            $send(result, 'decorations=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.measure_count];
            $send(result, 'measure_count=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$_transform_count_note(voice_element)];
            $send(result, 'count_note=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$_transform_lyrics(voice_element)];
            $send(result, 'lyrics=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [voice_element['$[]']("time")];
            $send(result, 'time=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$_mkznid(voice_element)];
            $send(result, 'znid=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [origin];
            $send(result, 'origin=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$charpos_to_line_column(start_pos)];
            $send(result, 'start_pos=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$charpos_to_line_column(end_pos)];
            $send(result, 'end_pos=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [tuplet];
            $send(result, 'tuplet=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [tuplet_start];
            $send(result, 'tuplet_start=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [tuplet_end];
            $send(result, 'tuplet_end=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.variant_no];
            $send(result, 'variant=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return result;}, $$27.$$s = self, $$27.$$arity = 1, $$27));
          result = [];
          if (notes.$count()['$=='](1)) {
            result['$<<'](notes.$first())
          } else {
            
            synchpoint = $$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint').$new(notes);
            first_note = notes.$first();
            
            $writer = [self.$_mkznid(voice_element)];
            $send(synchpoint, 'znid=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [decorations];
            $send(synchpoint, 'decorations=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.measure_count];
            $send(synchpoint, 'measure_count=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$_transform_count_note(voice_element)];
            $send(synchpoint, 'count_note=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.$_transform_lyrics(voice_element)];
            $send(synchpoint, 'lyrics=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$time()];
            $send(synchpoint, 'time=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$duration()];
            $send(synchpoint, 'duration=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$origin()];
            $send(synchpoint, 'origin=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$start_pos()];
            $send(synchpoint, 'start_pos=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$end_pos()];
            $send(synchpoint, 'end_pos=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$tuplet()];
            $send(synchpoint, 'tuplet=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$tuplet_start()];
            $send(synchpoint, 'tuplet_start=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [first_note.$tuplet_end()];
            $send(synchpoint, 'tuplet_end=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            result['$<<'](synchpoint);
          };
          if ($truthy(self.repetition_stack['$empty?']())) {
            self.repetition_stack['$<<'](result.$last())};
          
          $writer = [self.tie_started];
          $send(result.$first(), 'tie_end=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.tie_started = voice_element['$[]']("ti1")['$nil?']()['$!']();
          
          $writer = [self.tie_started];
          $send(result.$first(), 'tie_start=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [$send(self.$_parse_slur(voice_element['$[]']("slur_start")), 'map', [], ($$28 = function(i){var self = $$28.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return self.$_push_slur();}, $$28.$$s = self, $$28.$$arity = 1, $$28))];
          $send(result.$first(), 'slur_starts=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          amount_of_slur_ends = ($truthy($a = voice_element['$[]']("slur_end")) ? $a : 0);
          
          $writer = [$send(Opal.Range.$new(1, amount_of_slur_ends, false), 'map', [], ($$29 = function(){var self = $$29.$$s || this;

          return self.$_pop_slur()}, $$29.$$s = self, $$29.$$arity = 0, $$29))];
          $send(result.$first(), 'slur_ends=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.next_note_marks['$[]']("measure"))) {
            
            $send(notes, 'each', [], ($$30 = function(note){var self = $$30.$$s || this;

            
              
              if (note == null) {
                note = nil;
              };
              $writer = [true];
              $send(note, 'measure_start=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, $$30.$$s = self, $$30.$$arity = 1, $$30));
            
            $writer = ["measure", false];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          self.$_make_repeats_jumps_annotations(result, voice_element, voice_index);
          return result;
        }, $Abc2svgToHarpnotes__transform_note$26.$$arity = 3);
        
        Opal.def(self, '$_transform_measure_start', $Abc2svgToHarpnotes__transform_measure_start$31 = function $$_transform_measure_start(voice_element) {
          var self = this;

          if ($truthy(self.next_note_marks['$[]']("measure"))) {
            
            self.measure_count = $rb_plus(self.measure_count, 1);
            return (self.measure_start_time = voice_element['$[]']("time"));
          } else {
            return nil
          }
        }, $Abc2svgToHarpnotes__transform_measure_start$31.$$arity = 1);
        
        Opal.def(self, '$_transform_chordsymbol', $Abc2svgToHarpnotes__transform_chordsymbol$32 = function $$_transform_chordsymbol(entity, voice_id) {
          var $$33, self = this, result = nil, chords = nil;

          
          result = [];
          if ($truthy(entity['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable')))) {
            
            chords = self.$_extract_chord_lines(entity.$origin()['$[]']("raw_voice_element"));
            $send(chords, 'each_with_index', [], ($$33 = function(name, index){var self = $$33.$$s || this, match = nil, text = nil, position = nil, conf_key = nil;
              if ($gvars.conf == null) $gvars.conf = nil;

            
              
              if (name == null) {
                name = nil;
              };
              
              if (index == null) {
                index = nil;
              };
              match = name.$match(/^([^!#\<\>]+)([^\@]+)?(\@(\-?[0-9\.]+),(\-?[0-9\.]+))?$/);
              if ($truthy(match)) {
                
                text = match['$[]'](1);
                text = text.$gsub("♯", "#").$gsub("♭", "b");
                position = $gvars.conf['$[]']("defaults.notebound.chord.pos");
                conf_key = "" + "notebound.chord." + (voice_id) + "." + (entity.$znid()) + "." + (index);
                return result['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Chordsymbol').$new(entity, $hash2(["style", "pos", "text"], {"style": "large", "pos": position, "text": text}), conf_key));
              } else {
                return nil
              };}, $$33.$$s = self, $$33.$$arity = 2, $$33));};
          return result;
        }, $Abc2svgToHarpnotes__transform_chordsymbol$32.$$arity = 2);
        
        Opal.def(self, '$_transform_count_note', $Abc2svgToHarpnotes__transform_count_note$34 = function $$_transform_count_note(voice_element) {
          var $a, $$35, $$36, $$37, self = this, count_base = nil, count_start = nil, count_end = nil, count_range = nil, notes = nil, fracts = nil;

          if ($truthy(self.countby)) {
            
            count_base = $rb_divide($$($nesting, 'ABC2SVG_DURATION_FACTOR'), self.countby);
            count_start = $rb_divide($rb_times(4, $rb_minus(voice_element['$[]']("time"), self.measure_start_time)), count_base);
            count_end = $rb_plus(count_start, $rb_divide($rb_times(4, voice_element['$[]']("dur")), count_base));
            if ($truthy(($truthy($a = count_start['$%'](1)['$=='](0)) ? count_end['$%'](1)['$=='](0) : $a))) {
              count_range = $send(Opal.Range.$new(count_start,count_end, true).$to_a(), 'map', [], ($$35 = function(i){var self = $$35.$$s || this;
                if (self.countnames == null) self.countnames = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                return self.countnames['$[]'](i);}, $$35.$$s = self, $$35.$$arity = 1, $$35)).$join()
            } else if (count_start['$%'](1)['$=='](0)) {
              count_range = $send(Opal.Range.$new(count_start,count_end.$ceil(), true).$to_a(), 'map', [], ($$36 = function(i){var self = $$36.$$s || this;
                if (self.countnames == null) self.countnames = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                return self.countnames['$[]'](i);}, $$36.$$s = self, $$36.$$arity = 1, $$36)).$join("")
            } else {
              count_range = ""
            };
            notes = count_range.$split(/[eui\?]+/);
            fracts = count_range.$split(/[0-9]+/);
            if ($truthy(fracts['$empty?']())) {
              fracts = [""]};
            $send(fracts, 'each_with_index', [], ($$37 = function(v, i){var self = $$37.$$s || this, $writer = nil;

            
              
              if (v == null) {
                v = nil;
              };
              
              if (i == null) {
                i = nil;
              };
              if ($truthy($rb_ge(i, 1))) {
                
                $writer = [i, nil];
                $send(fracts, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil
              };}, $$37.$$s = self, $$37.$$arity = 2, $$37));
            count_range = fracts.$zip(notes).$flatten().$compact().$join(" ").$strip().$split().$join("-");
            count_range = count_range.$gsub("ue", "u");
            return count_range;
          } else {
            return nil
          }
        }, $Abc2svgToHarpnotes__transform_count_note$34.$$arity = 1);
        
        Opal.def(self, '$_convert_duration', $Abc2svgToHarpnotes__convert_duration$38 = function $$_convert_duration(raw_duration) {
          var self = this, duration = nil;

          
          duration = [128, $rb_times($rb_divide(raw_duration, $$($nesting, 'ABC2SVG_DURATION_FACTOR')), self._shortest_note).$round()].$min();
          return duration;
        }, $Abc2svgToHarpnotes__convert_duration$38.$$arity = 1);
        
        Opal.def(self, '$_transform_staves', $Abc2svgToHarpnotes__transform_staves$39 = function $$_transform_staves(voice_element, index, voice_index) {
          var self = this, start_pos = nil, end_pos = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          if ($truthy(self.score_statements)) {
          } else {
            self.score_statements = []
          };
          self.score_statements.$push(voice_element);
          if ($truthy($rb_gt(self.score_statements.$length(), 1))) {
            
            start_pos = self.$charpos_to_line_column(voice_element['$[]']("istart"));
            end_pos = self.$charpos_to_line_column(voice_element['$[]']("iend"));
            return $gvars.log.$error("" + ($$($nesting, 'I18n').$t("you have multiple %%score statements")) + ": " + (self.score_statements.$length()), start_pos, end_pos);
          } else {
            return nil
          };
        }, $Abc2svgToHarpnotes__transform_staves$39.$$arity = 3);
        
        Opal.def(self, '$_transform_rest', $Abc2svgToHarpnotes__transform_rest$40 = function $$_transform_rest(voice_element, index, voice_index) {
          var $a, $$41, $b, self = this, origin = nil, start_pos = nil, end_pos = nil, pitch_notes = nil, decorations = nil, pitch = nil, average_pitch = nil, duration = nil, tuplet = nil, tuplet_end = nil, tuplet_start = nil, result = nil, $writer = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          origin = self.$_parse_origin(voice_element);
          $a = [origin['$[]']("startChar"), origin['$[]']("endChar")], (start_pos = $a[0]), (end_pos = $a[1]), $a;
          pitch_notes = [self.pitch_providers['$[]'](Opal.Range.$new(0, index, false)).$compact().$last(), self.pitch_providers['$[]'](Opal.Range.$new(index, -1, false)).$compact().$first()];
          if ($gvars.conf['$[]']("restposition.default")['$==']("previous")) {
            pitch_notes = [($truthy($a = pitch_notes.$first()) ? $a : pitch_notes.$last())]};
          if ($gvars.conf['$[]']("restposition.default")['$==']("next")) {
            pitch_notes = [($truthy($a = pitch_notes.$last()) ? $a : pitch_notes.$first())]};
          decorations = self.$_parse_decorations(voice_element);
          pitch_notes = pitch_notes.$compact();
          if ($truthy(pitch_notes['$empty?']())) {
            pitch = 60
          } else {
            
            pitch_notes = $send(pitch_notes, 'map', [], ($$41 = function(pitch_note){var self = $$41.$$s || this;

            
              
              if (pitch_note == null) {
                pitch_note = nil;
              };
              return pitch_note['$[]']("notes").$last()['$[]']("midi");}, $$41.$$s = self, $$41.$$arity = 1, $$41));
            pitch = (average_pitch = $rb_divide(pitch_notes.$inject("+"), pitch_notes.$length())).$floor().$to_i();
          };
          if ($truthy(pitch['$nil?']())) {
            
            self.$raise("undefined pitch");
            pitch = 60;};
          self.$_transform_measure_start(voice_element);
          duration = voice_element['$[]']("notes");
          duration = (function() {if ($truthy(duration)) {
            return duration.$first()['$[]']("dur")
          } else {
            return voice_element['$[]']("dur")
          }; return nil; })();
          duration = self.$_convert_duration(duration);
          $b = self.$_parse_tuplet_info(voice_element), $a = Opal.to_ary($b), (tuplet = ($a[0] == null ? nil : $a[0])), (tuplet_end = ($a[1] == null ? nil : $a[1])), (tuplet_start = ($a[2] == null ? nil : $a[2])), $b;
          result = $$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Pause').$new(pitch, duration);
          
          $writer = [self.measure_count];
          $send(result, 'measure_count=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [decorations];
          $send(result, 'decorations=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$_transform_count_note(voice_element)];
          $send(result, 'count_note=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$_transform_lyrics(voice_element)];
          $send(result, 'lyrics=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$_mkznid(voice_element)];
          $send(result, 'znid=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [voice_element['$[]']("time")];
          $send(result, 'time=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$_parse_origin(voice_element)];
          $send(result, 'origin=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$charpos_to_line_column(start_pos)];
          $send(result, 'start_pos=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$charpos_to_line_column(end_pos)];
          $send(result, 'end_pos=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.variant_no];
          $send(result, 'variant=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [tuplet];
          $send(result, 'tuplet=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [tuplet_start];
          $send(result, 'tuplet_start=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [tuplet_end];
          $send(result, 'tuplet_end=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(voice_element['$[]']("invis"))) {
            
            $writer = [false];
            $send(result, 'visible=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];};
          
          $writer = [voice_element['$[]']("invis")];
          $send(result, 'invisible=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(self.repetition_stack['$empty?']())) {
            self.repetition_stack['$<<'](result)};
          result = [result];
          if ($truthy(self.next_note_marks['$[]']("measure"))) {
            
            
            $writer = [true];
            $send(result.$first(), 'measure_start=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["measure", false];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          self.$_make_repeats_jumps_annotations(result, voice_element, voice_index);
          return result;
        }, $Abc2svgToHarpnotes__transform_rest$40.$$arity = 3);
        
        Opal.def(self, '$_transform_tempo', $Abc2svgToHarpnotes__transform_tempo$42 = function $$_transform_tempo(voice_element, index, voice_id) {
          var self = this, start_pos = nil, end_pos = nil;
          if ($gvars.log == null) $gvars.log = nil;

          if (voice_element['$[]']("istart")['$=='](self.meta_data['$[]']("tempo")['$[]']("sym")['$[]']("istart"))) {
            return nil
          } else {
            
            start_pos = self.$charpos_to_line_column(voice_element['$[]']("istart"));
            end_pos = self.$charpos_to_line_column(voice_element['$[]']("iend"));
            return $gvars.log.$error($rb_plus("" + "abc:" + (start_pos.$first()) + ":" + (start_pos.$last()) + " Error: ", $$($nesting, 'I18n').$t("tempo change not suported by zupfnoter")), start_pos, end_pos);
          }
        }, $Abc2svgToHarpnotes__transform_tempo$42.$$arity = 3);
        
        Opal.def(self, '$_transform_yspace', $Abc2svgToHarpnotes__transform_yspace$43 = function $$_transform_yspace(voice_element, index) {
          var self = this;

          return nil
        }, $Abc2svgToHarpnotes__transform_yspace$43.$$arity = 2);
        
        Opal.def(self, '$_transform_bar_repeat_end', $Abc2svgToHarpnotes__transform_bar_repeat_end$44 = function $$_transform_bar_repeat_end(voice_element, index, voice_id) {
          var self = this, level = nil, start = nil, goto_info = nil, distance = nil, $writer = nil, entity = nil, conf_key = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          level = self.repetition_stack.$length();
          if (level['$=='](1)) {
            start = self.repetition_stack.$last()
          } else {
            start = self.repetition_stack.$pop()
          };
          goto_info = self.$_extract_goto_info_from_bar(voice_element);
          distance = (function() { try {
            return goto_info.$last()['$[]']("distance")
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return [2]
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          if ($truthy($rb_gt(distance.$count(), 1))) {
            self.$raise("" + "too many distance values for repeat end. Need only one " + (distance))};
          if ($truthy(self.previous_note['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Pause')))) {
            if ($gvars.conf['$[]']("restposition.repeatend")['$==']("previous")) {
              
              $writer = [self.previous_note.$prev_pitch()];
              $send(self.previous_note, 'pitch=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];}};
          distance = distance.$first();
          
          $writer = ["first_in_part", true];
          $send(self.next_note_marks, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          entity = self.previous_note;
          conf_key = "" + "notebound.c_jumplines." + (voice_id) + "." + (entity.$znid()) + ".p_repeat";
          return [$$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Goto').$new(self.previous_note, start, $hash2(["distance", "is_repeat", "level", "conf_key"], {"distance": distance, "is_repeat": true, "level": level, "conf_key": conf_key}))];
        }, $Abc2svgToHarpnotes__transform_bar_repeat_end$44.$$arity = 3);
        
        Opal.def(self, '$_transform_grace', $Abc2svgToHarpnotes__transform_grace$45 = function $$_transform_grace() {
          var self = this;

          return nil
        }, $Abc2svgToHarpnotes__transform_grace$45.$$arity = 0);
        
        Opal.def(self, '$_transform_format', $Abc2svgToHarpnotes__transform_format$46 = function $$_transform_format(voice_element) {
          var self = this;

          return nil
        }, $Abc2svgToHarpnotes__transform_format$46.$$arity = 1);
        
        Opal.def(self, '$_transform_key', $Abc2svgToHarpnotes__transform_key$47 = function $$_transform_key(voice_element) {
          var self = this;

          return nil
        }, $Abc2svgToHarpnotes__transform_key$47.$$arity = 1);
        
        Opal.def(self, '$_transform_lyrics', $Abc2svgToHarpnotes__transform_lyrics$48 = function $$_transform_lyrics(voice_element) {
          var $a, $b, self = this, result = nil;

          
          if ($truthy(voice_element['$[]']("a_ly"))) {
            
            result = voice_element['$[]']("a_ly").$first();
            if ($truthy(result)) {
              result = ($a = result['$[]']("t"), ($a === nil || $a == null) ? nil : $send($a, 'gsub', ["\n", "-"])).$gsub("_", "")};
          } else {
            result = ""
          };
          return ($truthy($b = result) ? $b : "");
        }, $Abc2svgToHarpnotes__transform_lyrics$48.$$arity = 1);
        
        Opal.def(self, '$_transform_meter', $Abc2svgToHarpnotes__transform_meter$49 = function $$_transform_meter(voice_element) {
          var self = this, start_pos = nil, end_pos = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          if ($truthy(self.next_note_marks['$[]']("measure"))) {
          } else {
            
            start_pos = self.$charpos_to_line_column(voice_element['$[]']("istart"));
            end_pos = self.$charpos_to_line_column(voice_element['$[]']("iend"));
            $gvars.log.$warning($rb_plus("" + "abc:" + (start_pos.$first()) + ":" + (start_pos.$last()) + " Error: ", $$($nesting, 'I18n').$t("Meter change not at beginning of measure")), start_pos, end_pos);
          };
          self.is_first_measure = true;
          self.wmeasure = voice_element['$[]']("wmeasure");
          self.countby = (function() { try {
            return voice_element['$[]']("a_meter").$first()['$[]']("bot").$to_i()
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          return nil;
        }, $Abc2svgToHarpnotes__transform_meter$49.$$arity = 1);
        
        Opal.def(self, '$_transform_block', $Abc2svgToHarpnotes__transform_block$50 = function $$_transform_block(voice_element) {
          var self = this;

          return nil
        }, $Abc2svgToHarpnotes__transform_block$50.$$arity = 1);
        
        Opal.def(self, '$_transform_clef', $Abc2svgToHarpnotes__transform_clef$51 = function $$_transform_clef(voice_element) {
          var self = this;

          return nil
        }, $Abc2svgToHarpnotes__transform_clef$51.$$arity = 1);
        
        Opal.def(self, '$_make_variant_ending_jumps', $Abc2svgToHarpnotes__make_variant_ending_jumps$52 = function $$_make_variant_ending_jumps(voice_id) {
          var $$53, self = this, result = nil, lastvariantgroup = nil;

          
          result = [];
          lastvariantgroup = (function() {if ($truthy(self.variant_endings.$last()['$empty?']())) {
            return -2
          } else {
            return -1
          }; return nil; })();
          $send(self.variant_endings['$[]'](Opal.Range.$new(0, lastvariantgroup, false)), 'each', [], ($$53 = function(variant_ending_group){var self = $$53.$$s || this, $$54, $$55, distance = nil, entity = nil, conf_base = nil, lastvariant = nil, conf_key = nil;

          
            
            if (variant_ending_group == null) {
              variant_ending_group = nil;
            };
            distance = variant_ending_group['$[]'](0)['$[]']("distance");
            entity = variant_ending_group.$first()['$[]']("rbstop");
            conf_base = "" + "notebound.c_jumplines." + (voice_id) + "." + (entity.$znid());
            if ($truthy(variant_ending_group['$[]'](-1)['$[]']("is_followup"))) {
              lastvariant = -2
            } else {
              lastvariant = -1
            };
            $send(variant_ending_group['$[]'](Opal.Range.$new(1, lastvariant, false)), 'each_with_index', [], ($$54 = function(variant_ending, index){var self = $$54.$$s || this, conf_key = nil;

            
              
              if (variant_ending == null) {
                variant_ending = nil;
              };
              
              if (index == null) {
                index = nil;
              };
              conf_key = "" + (conf_base) + "." + (index) + ".p_begin";
              return result['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Goto').$new(variant_ending_group['$[]'](0)['$[]']("rbstop"), variant_ending['$[]']("rbstart"), $hash2(["conf_key", "distance", "from_anchor", "to_anchor"], {"conf_key": conf_key, "distance": distance['$[]'](0), "from_anchor": "after", "to_anchor": "before"})));}, $$54.$$s = self, $$54.$$arity = 2, $$54));
            $send(variant_ending_group['$[]']($range(1, -3, false)), 'each_with_index', [], ($$55 = function(variant_ending, index){var self = $$55.$$s || this, conf_key = nil;

            
              
              if (variant_ending == null) {
                variant_ending = nil;
              };
              
              if (index == null) {
                index = nil;
              };
              if ($truthy(variant_ending['$[]']("repeat_end"))) {
                return nil
              } else {
                
                conf_key = "" + (conf_base) + ".p_end";
                return result['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Goto').$new(variant_ending['$[]']("rbstop"), variant_ending_group['$[]'](-1)['$[]']("rbstart"), $hash2(["conf_key", "distance", "from_anchor", "to_anchor", "vertical_anchor"], {"conf_key": conf_key, "distance": distance['$[]'](1), "from_anchor": "after", "to_anchor": "before", "vertical_anchor": "to"})));
              };}, $$55.$$s = self, $$55.$$arity = 2, $$55));
            if ($truthy(variant_ending_group['$[]'](-1)['$[]']("is_followup"))) {
              
              conf_key = "" + (conf_base) + ".p_follow";
              return result['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Goto').$new(variant_ending_group['$[]'](-2)['$[]']("rbstop"), variant_ending_group['$[]'](-1)['$[]']("rbstart"), $hash2(["conf_key", "distance", "from_anchor", "to_anchor", "vertical_anchor"], {"conf_key": conf_key, "distance": distance['$[]'](2), "from_anchor": "after", "to_anchor": "before", "vertical_anchor": "to"})));
            } else {
              return nil
            };}, $$53.$$s = self, $$53.$$arity = 1, $$53));
          return result;
        }, $Abc2svgToHarpnotes__make_variant_ending_jumps$52.$$arity = 1);
        
        Opal.def(self, '$_make_jumplines', $Abc2svgToHarpnotes__make_jumplines$56 = function $$_make_jumplines(element, voice_id) {
          var $$57, self = this, goto_infos = nil;

          if ($truthy(element['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable')))) {
            
            goto_infos = self.$_extract_goto_info_from_bar(element.$origin()['$[]']("raw_voice_element"));
            return $send(goto_infos, 'inject', [[]], ($$57 = function(result, goto_info){var self = $$57.$$s || this, $a, targetname = nil, target = nil, conf_key = nil, argument = nil;
              if (self.jumptargets == null) self.jumptargets = nil;
              if ($gvars.log == null) $gvars.log = nil;

            
              
              if (result == null) {
                result = nil;
              };
              
              if (goto_info == null) {
                goto_info = nil;
              };
              targetname = goto_info['$[]']("target");
              target = self.jumptargets['$[]'](targetname);
              conf_key = "" + "notebound.c_jumplines." + (voice_id) + "." + (element.$znid()) + ".p_goto";
              argument = ($truthy($a = goto_info['$[]']("distance").$first()) ? $a : 2);
              if ($truthy(target['$nil?']())) {
                $gvars.log.$error("" + "target '" + (targetname) + "' not found in voice at " + (element.$start_pos_to_s()), element.$start_pos(), element.$end_pos())
              } else {
                result['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Goto').$new(element, target, $hash2(["conf_key", "distance"], {"conf_key": conf_key, "distance": argument})))
              };
              return result;}, $$57.$$s = self, $$57.$$arity = 2, $$57));
          } else {
            return nil
          }
        }, $Abc2svgToHarpnotes__make_jumplines$56.$$arity = 2);
        
        Opal.def(self, '$_make_notebound_annotations', $Abc2svgToHarpnotes__make_notebound_annotations$58 = function $$_make_notebound_annotations(entity, voice_id) {
          var $$59, self = this, result = nil, chords = nil;

          
          result = [];
          if ($truthy(entity['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable')))) {
            
            chords = self.$_extract_chord_lines(entity.$origin()['$[]']("raw_voice_element"));
            $send(chords, 'each_with_index', [], ($$59 = function(name, index){var self = $$59.$$s || this, $$60, $$61, $$62, $a, $b, match = nil, semantic = nil, text = nil, pos_x = nil, pos_y = nil, $case = nil, annotation = nil, $writer = nil, notepos = nil, position = nil, conf_key = nil;
              if (self.annotations == null) self.annotations = nil;
              if ($gvars.log == null) $gvars.log = nil;
              if ($gvars.conf == null) $gvars.conf = nil;

            
              
              if (name == null) {
                name = nil;
              };
              
              if (index == null) {
                index = nil;
              };
              match = name.$match(/^([!#\<\>])([^\@]+)?(\@(\-?[0-9\.]+),(\-?[0-9\.]+))?$/);
              if ($truthy(match)) {
                
                semantic = match['$[]'](1);
                text = match['$[]'](2);
                if ($truthy(match['$[]'](4))) {
                  pos_x = match['$[]'](4)};
                if ($truthy(match['$[]'](5))) {
                  pos_y = match['$[]'](5)};
                $case = semantic;
                if ("#"['$===']($case)) {
                annotation = self.annotations['$[]'](text);
                if ($truthy(annotation)) {
                } else {
                  $gvars.log.$error("" + "could not find annotation " + (text), entity.$start_pos(), entity.$end_pos())
                };}
                else if ("!"['$===']($case)) {annotation = $hash2(["text", "style"], {"text": text, "style": "regular"})}
                else if ("<"['$===']($case)) {
                
                $writer = [$hash2(["dir", "size", "style"], {"dir": -1, "size": text, "style": "regular"})];
                $send(entity, 'shift=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(entity['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint')))) {
                  $send(entity.$notes(), 'each', [], ($$60 = function(note){var self = $$60.$$s || this;

                  
                    
                    if (note == null) {
                      note = nil;
                    };
                    $writer = [$hash2(["dir", "size", "style"], {"dir": -1, "size": text, "style": "regular"})];
                    $send(note, 'shift=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];}, $$60.$$s = self, $$60.$$arity = 1, $$60))};}
                else if (">"['$===']($case)) {
                
                $writer = [$hash2(["dir", "size", "style"], {"dir": 1, "size": text, "style": "regular"})];
                $send(entity, 'shift=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                if ($truthy(entity['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'SynchPoint')))) {
                  $send(entity.$notes(), 'each', [], ($$61 = function(note){var self = $$61.$$s || this;

                  
                    
                    if (note == null) {
                      note = nil;
                    };
                    $writer = [$hash2(["dir", "size", "style"], {"dir": 1, "size": text, "style": "regular"})];
                    $send(note, 'shift=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];}, $$61.$$s = self, $$61.$$arity = 1, $$61))};}
                else {annotation = nil};
                if ($truthy(annotation)) {
                  
                  if ($truthy(pos_x)) {
                    notepos = $send([pos_x, pos_y], 'map', [], ($$62 = function(p){var self = $$62.$$s || this;

                    
                      
                      if (p == null) {
                        p = nil;
                      };
                      return p.$to_f();}, $$62.$$s = self, $$62.$$arity = 1, $$62))};
                  position = ($truthy($a = ($truthy($b = notepos) ? $b : annotation['$[]']("pos"))) ? $a : $gvars.conf['$[]']("defaults.notebound.annotation.pos"));
                  if ($truthy(entity.$znid())) {
                    conf_key = "" + "notebound.annotation." + (voice_id) + "." + (entity.$znid())};
                  if ($truthy($rb_gt(index, 0))) {
                    conf_key = "" + "notebound.annotation." + (voice_id) + "." + (entity.$znid()) + "." + (index)};
                  return result['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'NoteBoundAnnotation').$new(entity, $hash2(["style", "pos", "text"], {"style": annotation['$[]']("style"), "pos": position, "text": annotation['$[]']("text")}), conf_key));
                } else {
                  return nil
                };
              } else {
                return nil
              };}, $$59.$$s = self, $$59.$$arity = 2, $$59));};
          return result;
        }, $Abc2svgToHarpnotes__make_notebound_annotations$58.$$arity = 2);
        
        Opal.def(self, '$_make_repeats_jumps_annotations', $Abc2svgToHarpnotes__make_repeats_jumps_annotations$63 = function $$_make_repeats_jumps_annotations(harpnote_elements, voice_element, voice_id) {
          var $a, $$64, $$65, self = this, the_note = nil, part_label = nil, $writer = nil, znid = nil, conf_key = nil, position = nil, text = nil, chords = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          the_note = harpnote_elements.$first();
          part_label = self.part_table['$[]'](voice_element['$[]']("time"));
          if ($truthy(self.previous_note)) {
            
            
            $writer = [the_note.$pitch()];
            $send(self.previous_note, 'next_pitch=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [the_note];
            $send(self.previous_note, 'next_playable=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            if ($truthy(part_label)) {
              
              $writer = [true];
              $send(self.previous_note, 'next_first_in_part=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];};
            
            $writer = [self.previous_note.$pitch()];
            $send(the_note, 'prev_pitch=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [self.previous_note];
            $send(the_note, 'prev_playable=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          self.previous_note = the_note;
          znid = the_note.$znid();
          if ($truthy(($truthy($a = part_label) ? $rb_gt(part_label.$length(), 0) : $a))) {
            
            if ($truthy(znid)) {
              conf_key = "" + "notebound.partname." + (voice_id) + "." + (znid)};
            position = $gvars.conf['$[]']("defaults.notebound.partname.pos");
            
            $writer = [true];
            $send(harpnote_elements.$first(), 'first_in_part=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            harpnote_elements['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'NoteBoundAnnotation').$new(harpnote_elements.$first(), $hash2(["style", "pos", "text"], {"style": "bold", "pos": position, "text": part_label}), conf_key));};
          if ($truthy(self.next_note_marks['$[]']("repeat_start"))) {
            
            
            $writer = [true];
            $send(self.previous_note, 'first_in_part=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.repetition_stack['$<<'](harpnote_elements.$first());
            
            $writer = ["repeat_start", false];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          if ($truthy(self.next_note_marks['$[]']("first_in_part"))) {
            
            
            $writer = [true];
            $send(self.previous_note, 'first_in_part=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = ["first_in_part", false];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          if ($truthy(self.next_note_marks['$[]']("variant_ending"))) {
            
            text = self.next_note_marks['$[]']("variant_ending")['$[]']("text");
            if ($truthy(znid)) {
              conf_key = "" + "notebound.variantend." + (voice_id) + "." + (znid)};
            position = $gvars.conf['$[]']("defaults.notebound.variantend.pos");
            
            $writer = [true];
            $send(harpnote_elements.$first(), 'first_in_part=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            harpnote_elements['$<<']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'NoteBoundAnnotation').$new(harpnote_elements.$first(), $hash2(["style", "pos", "text", "policy"], {"style": "regular", "pos": position, "text": text, "policy": "Goto"}), conf_key));
            
            $writer = ["variant_ending", nil];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.variant_endings.$last().$push($hash2([], {}));
            
            $writer = ["rbstart", self.previous_note];
            $send(self.variant_endings.$last().$last(), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          if ($truthy(self.next_note_marks['$[]']("variant_followup"))) {
            
            
            $writer = [true];
            $send(self.previous_note, 'first_in_part=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.variant_endings['$[]'](-2).$push($hash2(["rbstart", "is_followup"], {"rbstart": self.previous_note, "is_followup": true}));
            
            $writer = ["variant_followup", false];
            $send(self.next_note_marks, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          chords = self.$_extract_chord_lines(voice_element);
          return $send($send(chords, 'select', [], ($$64 = function(chord){var self = $$64.$$s || this;

          
            
            if (chord == null) {
              chord = nil;
            };
            return chord['$[]'](0)['$=='](":");}, $$64.$$s = self, $$64.$$arity = 1, $$64)), 'each', [], ($$65 = function(name){var self = $$65.$$s || this, $$66;
            if (self.jumptargets == null) self.jumptargets = nil;

          
            
            if (name == null) {
              name = nil;
            };
            $writer = [name['$[]']($range(1, -1, false)), $send(harpnote_elements, 'select', [], ($$66 = function(n){var self = $$66.$$s || this;

            
              
              if (n == null) {
                n = nil;
              };
              return n['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable'));}, $$66.$$s = self, $$66.$$arity = 1, $$66)).$last()];
            $send(self.jumptargets, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, $$65.$$s = self, $$65.$$arity = 1, $$65));
        }, $Abc2svgToHarpnotes__make_repeats_jumps_annotations$63.$$arity = 3);
        
        Opal.def(self, '$_get_extra', $Abc2svgToHarpnotes__get_extra$67 = function $$_get_extra(voice_element, id) {
          var $a, $$68, self = this, r = nil;

          
          r = (function() { try {
            
            return ($truthy($a = voice_element['$[]']("extra")) ? $send(voice_element['$[]']("extra"), 'select', [], ($$68 = function(e){var self = $$68.$$s || this;

            
              
              if (e == null) {
                e = nil;
              };
              return e['$[]']("type").$to_s()['$=='](id.$to_s());}, $$68.$$s = self, $$68.$$arity = 1, $$68)).$first() : $a);
          } catch ($err) {
            if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          return r;
        }, $Abc2svgToHarpnotes__get_extra$67.$$arity = 2);
        
        Opal.def(self, '$_push_slur', $Abc2svgToHarpnotes__push_slur$69 = function $$_push_slur() {
          var self = this;

          return (self.slurstack = $rb_plus(self.slurstack, 1))
        }, $Abc2svgToHarpnotes__push_slur$69.$$arity = 0);
        
        Opal.def(self, '$_pop_slur', $Abc2svgToHarpnotes__pop_slur$70 = function $$_pop_slur() {
          var self = this, result = nil;

          
          result = self.slurstack;
          self.slurstack = $rb_minus(self.slurstack, 1);
          if ($truthy($rb_lt(self.slurstack, 0))) {
            self.slurstack = 0};
          return result;
        }, $Abc2svgToHarpnotes__pop_slur$70.$$arity = 0);
        
        Opal.def(self, '$_extract_chord_lines', $Abc2svgToHarpnotes__extract_chord_lines$71 = function $$_extract_chord_lines(voice_element) {
          var $$72, $$73, self = this, chords = nil, result = nil;

          
          chords = voice_element['$[]']("a_gch");
          if ($truthy(chords)) {
            result = $send($send(chords, 'select', [], ($$72 = function(e){var self = $$72.$$s || this;

            
              
              if (e == null) {
                e = nil;
              };
              e['$[]']("type")['$==']("^");
              return true;}, $$72.$$s = self, $$72.$$arity = 1, $$72)), 'map', [], ($$73 = function(e){var self = $$73.$$s || this;

            
              
              if (e == null) {
                e = nil;
              };
              return e['$[]']("text");}, $$73.$$s = self, $$73.$$arity = 1, $$73))
          } else {
            result = []
          };
          return result;
        }, $Abc2svgToHarpnotes__extract_chord_lines$71.$$arity = 1);
        
        Opal.def(self, '$_extract_goto_info_from_bar', $Abc2svgToHarpnotes__extract_goto_info_from_bar$74 = function $$_extract_goto_info_from_bar(bar) {
          var $$75, self = this, chordlines = nil, result = nil;

          
          chordlines = self.$_extract_chord_lines(bar);
          result = $send(chordlines, 'inject', [[]], ($$75 = function(result, line){var self = $$75.$$s || this, $$76, level = nil, target = nil, distance = nil, start_pos = nil, end_pos = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (line == null) {
              line = nil;
            };
            if ($truthy(line['$start_with?']("@"))) {
              
              level = line.$match(/^^@([^\@]*)@(\-?\d*)(,(\-?\d*),(\-?\d*))?$/);
              if ($truthy(level)) {
                
                target = level['$[]'](1);
                distance = $send([2, 4, 5], 'map', [], ($$76 = function(i){var self = $$76.$$s || this;

                
                  
                  if (i == null) {
                    i = nil;
                  };
                  if ($truthy(level['$[]'](i))) {
                    return level['$[]'](i).$to_i()
                  } else {
                    return nil
                  };}, $$76.$$s = self, $$76.$$arity = 1, $$76)).$compact();
                result.$push($hash2(["target", "distance"], {"target": target, "distance": distance}));
              } else {
                
                start_pos = self.$charpos_to_line_column(bar['$[]']("istart"));
                end_pos = self.$charpos_to_line_column(bar['$[]']("iend"));
                $gvars.log.$error("Syntax-Error in Jump anotation", start_pos, end_pos);
              };};
            return result;}, $$75.$$s = self, $$75.$$arity = 2, $$75));
          return result;
        }, $Abc2svgToHarpnotes__extract_goto_info_from_bar$74.$$arity = 1);
        
        Opal.def(self, '$_parse_decorations', $Abc2svgToHarpnotes__parse_decorations$77 = function $$_parse_decorations(voice_element) {
          var $a, $$78, $$79, self = this, a_dd = nil, result = nil;

          
          a_dd = ($truthy($a = voice_element['$[]']("a_dd")) ? $a : []);
          result = $send(a_dd, 'map', [], ($$78 = function(dd){var self = $$78.$$s || this;

          
            
            if (dd == null) {
              dd = nil;
            };
            return (result = dd['$[]']("name").$to_sym());}, $$78.$$s = self, $$78.$$arity = 1, $$78));
          return $send(result.$flatten(), 'select', [], ($$79 = function(i){var self = $$79.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return ["fermata", "emphasis"]['$include?'](i);}, $$79.$$s = self, $$79.$$arity = 1, $$79));
        }, $Abc2svgToHarpnotes__parse_decorations$77.$$arity = 1);
        
        Opal.def(self, '$_parse_origin', $Abc2svgToHarpnotes__parse_origin$80 = function $$_parse_origin(voice_element) {
          var self = this;

          return $hash2(["startChar", "endChar", "start_pos", "end_pos", "raw_voice_element"], {"startChar": voice_element['$[]']("istart"), "endChar": voice_element['$[]']("iend"), "start_pos": voice_element['$[]']("start_pos"), "end_pos": voice_element['$[]']("end_pos"), "raw_voice_element": voice_element})
        }, $Abc2svgToHarpnotes__parse_origin$80.$$arity = 1);
        
        Opal.def(self, '$_parse_slur', $Abc2svgToHarpnotes__parse_slur$81 = function $$_parse_slur(slurstart) {
          var $a, self = this, startvalue = nil, result = nil;

          
          startvalue = ($truthy($a = slurstart) ? $a : 0);
          result = [];
          while ($truthy($rb_gt(startvalue, 0))) {
            
            result.$push(startvalue['$&'](15));
            startvalue = startvalue['$>>'](4);
          };
          return result;
        }, $Abc2svgToHarpnotes__parse_slur$81.$$arity = 1);
        return (Opal.def(self, '$_parse_tuplet_info', $Abc2svgToHarpnotes__parse_tuplet_info$82 = function $$_parse_tuplet_info(voice_element) {
          var self = this, start_pos = nil, end_pos = nil, tuplet_start = nil, tuplet = nil, tuplet_end = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          if ($truthy(voice_element['$[]']("in_tuplet"))) {
            
            if ($truthy(voice_element['$[]']("tp1"))) {
              
              start_pos = self.$charpos_to_line_column(voice_element['$[]']("istart"));
              end_pos = self.$charpos_to_line_column(voice_element['$[]']("iend"));
              $gvars.log.$error($rb_plus("" + "abc:" + (start_pos.$first()) + ":" + (start_pos.$last()) + " Error: ", $$($nesting, 'I18n').$t("Nested Tuplet")), start_pos, end_pos);};
            if ($truthy(voice_element['$[]']("tp0"))) {
              
              self.tuplet_p = voice_element['$[]']("tp0");
              tuplet_start = true;
            } else {
              tuplet_start = nil
            };
            tuplet = self.tuplet_p;
            if ($truthy(voice_element['$[]']("te0"))) {
              tuplet_end = true
            } else {
              tuplet_end = nil
            };
          } else {
            
            tuplet = 1;
            tuplet_start = nil;
            tuplet_end = nil;
          };
          return [tuplet, tuplet_end, tuplet_start];
        }, $Abc2svgToHarpnotes__parse_tuplet_info$82.$$arity = 1), nil) && '_parse_tuplet_info';
      })($nesting[0], $$($nesting, 'AbstractAbcToHarpnotes'), $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal-jspdf"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$attr_accessor', '$apply_offset_to_point', '$[]', '$nil?', '$start_with?', '$raise', '$to_n', '$map', '$*', '$-', '$==', '$+', '$/', '$Native', '$private', '$first', '$last']);
  
  self.$require("native");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'JsPDF');

    var $nesting = [self].concat($parent_nesting), $JsPDF_initialize$1, $JsPDF_jspdfversion$2, $JsPDF_line$3, $JsPDF_line_cap$eq$4, $JsPDF_ellipse$5, $JsPDF_fill$eq$6, $JsPDF_stroke$eq$7, $JsPDF_line_width$eq$8, $JsPDF_line_dash$eq$9, $JsPDF_text_color$eq$10, $JsPDF_font_size$eq$11, $JsPDF_font_style$eq$12, $JsPDF_use_solid_lines$13, $JsPDF_image$14, $JsPDF_text$15, $JsPDF_rect_like_ellipse$16, $JsPDF_rect$18, $JsPDF_lines$19, $JsPDF_output$20, $JsPDF_left_arrowhead$21, $JsPDF_addPage$22, $JsPDF_get_text_width$23, $JsPDF_get_text_dimensions$24, $JsPDF_apply_offset_to_point$25;

    self.$$prototype.native_jspdf = self.$$prototype.x_offset = self.$$prototype.y_offset = nil;
    
    self.$attr_accessor("x_offset", "y_offset");
    
    Opal.def(self, '$initialize', $JsPDF_initialize$1 = function $$initialize(orientation, unit, format) {
      var self = this;

      
      
      if (orientation == null) {
        orientation = "p";
      };
      
      if (unit == null) {
        unit = "mm";
      };
      
      if (format == null) {
        format = "a4";
      };
      self.x_offset = 0;
      self.y_offset = 0;
      return (self.native_jspdf = new jsPDF(orientation, unit, format));
    }, $JsPDF_initialize$1.$$arity = -1);
    Opal.defs(self, '$jspdfversion', $JsPDF_jspdfversion$2 = function $$jspdfversion() {
      var self = this;

      return jsPDF.version;
    }, $JsPDF_jspdfversion$2.$$arity = 0);
    
    Opal.def(self, '$line', $JsPDF_line$3 = function $$line(from, to) {
      var self = this, nfrom = nil, nto = nil;

      
      nfrom = self.$apply_offset_to_point(from);
      nto = self.$apply_offset_to_point(to);
      return self.native_jspdf.lines([ [ nto[0] - nfrom[0], nto[1] - nfrom[1] ] ], nfrom[0], nfrom[1]);
    }, $JsPDF_line$3.$$arity = 2);
    
    Opal.def(self, '$line_cap=', $JsPDF_line_cap$eq$4 = function(value) {
      var self = this;

      return self.native_jspdf.setLineCap(value)
    }, $JsPDF_line_cap$eq$4.$$arity = 1);
    
    Opal.def(self, '$ellipse', $JsPDF_ellipse$5 = function $$ellipse(center, radii, style) {
      var self = this, ncenter = nil;

      
      
      if (style == null) {
        style = undefined;
      };
      ncenter = self.$apply_offset_to_point(center);
      return self.native_jspdf.ellipse(ncenter['$[]'](0), ncenter['$[]'](1), radii['$[]'](0), radii['$[]'](1), style);
    }, $JsPDF_ellipse$5.$$arity = -3);
    
    Opal.def(self, '$fill=', $JsPDF_fill$eq$6 = function(rgb) {
      var self = this;

      return self.native_jspdf.setFillColor(rgb[0], rgb[1], rgb[2])
    }, $JsPDF_fill$eq$6.$$arity = 1);
    
    Opal.def(self, '$stroke=', $JsPDF_stroke$eq$7 = function(rgb) {
      var self = this;

      return self.native_jspdf.setDrawColor(rgb[0], rgb[1], rgb[2])
    }, $JsPDF_stroke$eq$7.$$arity = 1);
    
    Opal.def(self, '$line_width=', $JsPDF_line_width$eq$8 = function(width) {
      var self = this;

      return self.native_jspdf.setLineWidth(width)
    }, $JsPDF_line_width$eq$8.$$arity = 1);
    
    Opal.def(self, '$line_dash=', $JsPDF_line_dash$eq$9 = function(dist) {
      var self = this;

      
      
      if (dist == null) {
        dist = 3;
      };
      if ($truthy(dist['$nil?']())) {
        dist = undefined};
      return self.native_jspdf.setLineDash([dist, dist], dist);
    }, $JsPDF_line_dash$eq$9.$$arity = -1);
    
    Opal.def(self, '$text_color=', $JsPDF_text_color$eq$10 = function(rgb) {
      var self = this;

      return self.native_jspdf.setTextColor(rgb[0], rgb[1], rgb[2])
    }, $JsPDF_text_color$eq$10.$$arity = 1);
    
    Opal.def(self, '$font_size=', $JsPDF_font_size$eq$11 = function(size) {
      var self = this;

      return self.native_jspdf.setFontSize(size)
    }, $JsPDF_font_size$eq$11.$$arity = 1);
    
    Opal.def(self, '$font_style=', $JsPDF_font_style$eq$12 = function(style) {
      var self = this;

      return self.native_jspdf.setFontStyle(style)
    }, $JsPDF_font_style$eq$12.$$arity = 1);
    
    Opal.def(self, '$use_solid_lines', $JsPDF_use_solid_lines$13 = function $$use_solid_lines() {
      var self = this;

      return self.native_jspdf.setLineDash('', 0)
    }, $JsPDF_use_solid_lines$13.$$arity = 0);
    
    Opal.def(self, '$image', $JsPDF_image$14 = function $$image(url, x, y, height) {
      var $a, $b, self = this, nx = nil, ny = nil, format = nil;

      
      $b = self.$apply_offset_to_point([x, y]), $a = Opal.to_ary($b), (nx = ($a[0] == null ? nil : $a[0])), (ny = ($a[1] == null ? nil : $a[1])), $b;
      format = nil;
      if ($truthy(url['$start_with?']("data:image/jpeg"))) {
        format = "jpeg"};
      if ($truthy(url['$start_with?']("data:image/png"))) {
        format = "png"};
      if ($truthy(format)) {
        return self.native_jspdf.addImage(url, format, nx, ny, 0, height)
      } else {
        return self.$raise("" + "image format not supported for pdf: " + (format))
      };
    }, $JsPDF_image$14.$$arity = 4);
    
    Opal.def(self, '$text', $JsPDF_text$15 = function $$text(x, y, text, flags) {
      var $a, $b, self = this, nx = nil, ny = nil;

      
      
      if (flags == null) {
        flags = nil;
      };
      $b = self.$apply_offset_to_point([x, y]), $a = Opal.to_ary($b), (nx = ($a[0] == null ? nil : $a[0])), (ny = ($a[1] == null ? nil : $a[1])), $b;
      return self.native_jspdf.text(nx, ny, text, flags.$to_n());
    }, $JsPDF_text$15.$$arity = -4);
    
    Opal.def(self, '$rect_like_ellipse', $JsPDF_rect_like_ellipse$16 = function $$rect_like_ellipse(center, radii, style) {
      var $$17, self = this, ncenter = nil, rsize = nil;

      
      
      if (style == null) {
        style = "undefined";
      };
      ncenter = self.$apply_offset_to_point(center);
      rsize = $send(radii, 'map', [], ($$17 = function(s){var self = $$17.$$s || this;

      
        
        if (s == null) {
          s = nil;
        };
        return $rb_times(2.0, s);}, $$17.$$s = self, $$17.$$arity = 1, $$17));
      return self.native_jspdf.rect($rb_minus(ncenter['$[]'](0), radii['$[]'](0)), $rb_minus(ncenter['$[]'](1), radii['$[]'](1)), rsize['$[]'](0), rsize['$[]'](1), style);
    }, $JsPDF_rect_like_ellipse$16.$$arity = -3);
    
    Opal.def(self, '$rect', $JsPDF_rect$18 = function $$rect(x1, y1, x2, y2, style) {
      var $a, $b, self = this, nx1 = nil, ny1 = nil;

      
      
      if (style == null) {
        style = "undefined";
      };
      $b = self.$apply_offset_to_point([x1, y1]), $a = Opal.to_ary($b), (nx1 = ($a[0] == null ? nil : $a[0])), (ny1 = ($a[1] == null ? nil : $a[1])), $b;
      return self.native_jspdf.rect(nx1, ny1, x2, y2, style);
    }, $JsPDF_rect$18.$$arity = -5);
    
    Opal.def(self, '$lines', $JsPDF_lines$19 = function $$lines(lines, x, y, scale, style, close) {
      var $a, $b, self = this, nx = nil, ny = nil;

      
      $b = self.$apply_offset_to_point([x, y]), $a = Opal.to_ary($b), (nx = ($a[0] == null ? nil : $a[0])), (ny = ($a[1] == null ? nil : $a[1])), $b;
      return self.native_jspdf.lines(lines, nx, ny, scale, style, close);
    }, $JsPDF_lines$19.$$arity = 6);
    
    Opal.def(self, '$output', $JsPDF_output$20 = function $$output(type, options) {
      var self = this;

      
      
      if (type == null) {
        type = "raw";
      };
      
      if (options == null) {
        options = nil;
      };
      if (type['$==']("raw")) {
        type = undefined};
      if ($truthy(options['$nil?']())) {
        options = undefined};
      return self.native_jspdf.output(type, options);
    }, $JsPDF_output$20.$$arity = -1);
    
    Opal.def(self, '$left_arrowhead', $JsPDF_left_arrowhead$21 = function $$left_arrowhead(x, y) {
      var $a, $b, self = this, delta = nil, nx = nil, ny = nil, x0 = nil, x1 = nil, y_top = nil, y_bottom = nil;

      
      delta = 1.0;
      $b = self.$apply_offset_to_point([x, y]), $a = Opal.to_ary($b), (nx = ($a[0] == null ? nil : $a[0])), (ny = ($a[1] == null ? nil : $a[1])), $b;
      x0 = nx;
      x1 = $rb_plus(nx, delta);
      y_top = $rb_plus(ny, $rb_divide(delta, 2.0));
      y_bottom = $rb_minus(ny, $rb_divide(delta, 2.0));
      return self.native_jspdf.triangle(x0, ny, x1, y_top, x1, y_bottom, x0, ny, 'FD');
    }, $JsPDF_left_arrowhead$21.$$arity = 2);
    
    Opal.def(self, '$addPage', $JsPDF_addPage$22 = function $$addPage() {
      var self = this;

      return self.native_jspdf.addPage()
    }, $JsPDF_addPage$22.$$arity = 0);
    
    Opal.def(self, '$get_text_width', $JsPDF_get_text_width$23 = function $$get_text_width(text) {
      var self = this;

      return self.native_jspdf.getTextWidth(text)
    }, $JsPDF_get_text_width$23.$$arity = 1);
    
    Opal.def(self, '$get_text_dimensions', $JsPDF_get_text_dimensions$24 = function $$get_text_dimensions(text) {
      var self = this;

      return self.$Native(self.native_jspdf.getTextDimensions(text.$to_n()))
    }, $JsPDF_get_text_dimensions$24.$$arity = 1);
    self.$private();
    return (Opal.def(self, '$apply_offset_to_point', $JsPDF_apply_offset_to_point$25 = function $$apply_offset_to_point(point) {
      var self = this;

      return [$rb_plus(point.$first(), self.x_offset), $rb_plus(point.$last(), self.y_offset)]
    }, $JsPDF_apply_offset_to_point$25.$$arity = 1), nil) && 'apply_offset_to_point';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal-svg"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $gvars = Opal.gvars, $hash2 = Opal.hash2, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$lambda', '$info', '$conf_key', '$Native', '$clear', '$+', '$push', '$join', '$first', '$last', '$to_n', '$call', '$map', '$round', '$[]', '$Vector2d', '$-', '$x', '$y', '$path_to_raphael', '$to_a', '$[]=', '$*', '$rotate', '$-@', '$angle', '$make_path_from_jumpline', '$_attr_to_xml', '$new_id!', '$/', '$delete', '$is_a?', '$inject', '$path', '$split']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ZnSvg');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Paper');

      var $nesting = [self].concat($parent_nesting), $Paper_initialize$1, $Paper_new_id$excl$7, $Paper_get_svg$8, $Paper_line_width$eq$9, $Paper_clear$10, $Paper_on_mouseover$11, $Paper_on_mouseout$12, $Paper_on_drag_start$13, $Paper_on_drag_end$14, $Paper_on_draggable_rightclick$15, $Paper_set_canvas$16, $Paper_set_conf_editable$17, $Paper_set_draggable_pos$18, $Paper_set_draggable_tuplet$21, $Paper_set_draggable_imagesize$24, $Paper_set_draggable_jumpline$25, $Paper_add_abcref$26, $Paper_ellipse$27, $Paper_image$28, $Paper_path$29, $Paper_path_to_raphael$30, $Paper_rect$32, $Paper_set_view_box$33, $Paper_line$34, $Paper_text$35, $Paper__attr_to_xml$37, $Paper_size_outdated$39, $Paper_scroll_to_element$40;

      self.$$prototype.id = self.$$prototype.svgbuffer = self.$$prototype.canvas = self.$$prototype.viewbox = self.$$prototype.on_mouseover_handler = self.$$prototype.on_mouseout_handler = self.$$prototype.draggable_rightclick_handler = self.$$prototype.draggable_dragstart_handler = self.$$prototype.draggable_dragend_handler = self.$$prototype.line_width = self.$$prototype.container_id = nil;
      
      
      Opal.def(self, '$initialize', $Paper_initialize$1 = function $$initialize(container_id, width, height) {
        var $$2, $$3, $$4, $$5, $$6, self = this;

        
        self.container_id = container_id;
        self.draggable_dragstart_handler = $send(self, 'lambda', [], ($$2 = function(dropinfo){var self = $$2.$$s || this;

        
          
          if (dropinfo == null) {
            dropinfo = nil;
          };
          return nil;}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        self.draggable_dragend_handler = $send(self, 'lambda', [], ($$3 = function(dropinfo){var self = $$3.$$s || this;

        
          
          if (dropinfo == null) {
            dropinfo = nil;
          };
          return nil;}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        self.on_mouseover_handler = $send(self, 'lambda', [], ($$4 = function(dropinfo){var self = $$4.$$s || this;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (dropinfo == null) {
            dropinfo = nil;
          };
          return $gvars.log.$info(self.$Native(dropinfo).$conf_key());}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        self.on_mouseout_handler = $send(self, 'lambda', [], ($$5 = function(dropinfo){var self = $$5.$$s || this;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (dropinfo == null) {
            dropinfo = nil;
          };
          return $gvars.log.$info(self.$Native(dropinfo).$conf_key());}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        self.draggable_rightclick_handler = $send(self, 'lambda', [], ($$6 = function(dropinfo){var self = $$6.$$s || this;

        
          
          if (dropinfo == null) {
            dropinfo = nil;
          };
          return nil;}, $$6.$$s = self, $$6.$$arity = 1, $$6));
        self.canvas = [width, height];
        self.scale = 1;
        self.viewbox = [0, 0, 420, 297];
        self.svgbuffer = [];
        self.id = 0;
        self.line_width = 0.2;
        return self.$clear();
      }, $Paper_initialize$1.$$arity = 3);
      
      Opal.def(self, '$new_id!', $Paper_new_id$excl$7 = function() {
        var self = this;

        return "" + "ZN_" + ((self.id = $rb_plus(self.id, 1)))
      }, $Paper_new_id$excl$7.$$arity = 0);
      
      Opal.def(self, '$get_svg', $Paper_get_svg$8 = function $$get_svg() {
        var self = this;

        
        self.svgbuffer.$push("</svg>");
        return self.svgbuffer.$join();
      }, $Paper_get_svg$8.$$arity = 0);
      
      Opal.def(self, '$line_width=', $Paper_line_width$eq$9 = function(width) {
        var self = this;

        return (self.line_width = width)
      }, $Paper_line_width$eq$9.$$arity = 1);
      
      Opal.def(self, '$clear', $Paper_clear$10 = function $$clear() {
        var self = this;

        
        self.id = 0;
        self.svgbuffer = [];
        return self.svgbuffer.$push("" + "<svg width=\"" + (self.canvas.$first()) + "\" height=\"" + (self.canvas.$last()) + "\" viewBox=\"" + (self.viewbox.$join(", ")) + "\" > ");
      }, $Paper_clear$10.$$arity = 0);
      
      Opal.def(self, '$on_mouseover', $Paper_on_mouseover$11 = function $$on_mouseover() {
        var $iter = $Paper_on_mouseover$11.$$p, block = $iter || nil, self = this;

        if ($iter) $Paper_on_mouseover$11.$$p = null;
        
        
        if ($iter) $Paper_on_mouseover$11.$$p = null;;
        return (self.on_mouseover_handler = block);
      }, $Paper_on_mouseover$11.$$arity = 0);
      
      Opal.def(self, '$on_mouseout', $Paper_on_mouseout$12 = function $$on_mouseout() {
        var $iter = $Paper_on_mouseout$12.$$p, block = $iter || nil, self = this;

        if ($iter) $Paper_on_mouseout$12.$$p = null;
        
        
        if ($iter) $Paper_on_mouseout$12.$$p = null;;
        return (self.on_mouseout_handler = block);
      }, $Paper_on_mouseout$12.$$arity = 0);
      
      Opal.def(self, '$on_drag_start', $Paper_on_drag_start$13 = function $$on_drag_start() {
        var $iter = $Paper_on_drag_start$13.$$p, block = $iter || nil, self = this;

        if ($iter) $Paper_on_drag_start$13.$$p = null;
        
        
        if ($iter) $Paper_on_drag_start$13.$$p = null;;
        return (self.draggable_dragstart_handler = block);
      }, $Paper_on_drag_start$13.$$arity = 0);
      
      Opal.def(self, '$on_drag_end', $Paper_on_drag_end$14 = function $$on_drag_end() {
        var $iter = $Paper_on_drag_end$14.$$p, block = $iter || nil, self = this;

        if ($iter) $Paper_on_drag_end$14.$$p = null;
        
        
        if ($iter) $Paper_on_drag_end$14.$$p = null;;
        return (self.draggable_dragend_handler = block);
      }, $Paper_on_drag_end$14.$$arity = 0);
      
      Opal.def(self, '$on_draggable_rightclick', $Paper_on_draggable_rightclick$15 = function $$on_draggable_rightclick() {
        var $iter = $Paper_on_draggable_rightclick$15.$$p, block = $iter || nil, self = this;

        if ($iter) $Paper_on_draggable_rightclick$15.$$p = null;
        
        
        if ($iter) $Paper_on_draggable_rightclick$15.$$p = null;;
        return (self.draggable_rightclick_handler = block);
      }, $Paper_on_draggable_rightclick$15.$$arity = 0);
      
      Opal.def(self, '$set_canvas', $Paper_set_canvas$16 = function $$set_canvas(size) {
        var self = this;

        
        self.canvas = size;
        return nil;
      }, $Paper_set_canvas$16.$$arity = 1);
      
      Opal.def(self, '$set_conf_editable', $Paper_set_conf_editable$17 = function $$set_conf_editable(svg_element, conf_key, more_conf_keys) {
        var self = this;

        
        
          var me = svg_element;
          mouseoverFnc = function(){
            self.on_mouseover_handler({element: me, conf_key: conf_key})
          }

          mouseoutFnc = function(){
            self.on_mouseout_handler({element: me, conf_key: conf_key})
          }
          me.mouseover(mouseoverFnc);
          me.mouseout(mouseoutFnc);

          // as we bind the handler on a mouseover, the event does not fire on very first mouseover
          // so we call it here to display the conf_key even on the first move
          // todo: do not know why it worked on draggable elements
          mouseoverFnc({element:me, conf_key: conf_key});

          me[0].oncontextmenu = function(){ return self.draggable_rightclick_handler({element: svg_element, conf_key: conf_key, more_conf_keys: more_conf_keys});};
      ;
        return nil;
      }, $Paper_set_conf_editable$17.$$arity = 3);
      
      Opal.def(self, '$set_draggable_pos', $Paper_set_draggable_pos$18 = function $$set_draggable_pos(svg_element_id, conf_key, conf_value) {
        var $$19, $$20, self = this, conf_value_new = nil;

        
        conf_value_new = conf_value.$to_n();
        

          var xx = SVG.get(svg_element_id);
          var sy = 0, sy=0;
          xx.addClass("zn_draggable");

          xx.draggable(function(x, y) {
            return {
              x: Math.round(x),// Math.floor(x),
              y: Math.round(y)// Math.floor(y)
            }
          });

          xx.on('dragstart', function(e) {
             self.draggable_dragstart_handler.$call($hash2(["element", "conf_key", "conf_value_new"], {"element": this, "conf_key": conf_key, "conf_value_new": $send(self.$Native(conf_value_new), 'map', [], ($$19 = function(i){var self = $$19.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i.$round(2);}, $$19.$$s = self, $$19.$$arity = 1, $$19))}));
            ismoved = false;
            sx = e.detail.p.x;
            sy = e.detail.p.y;
            this.fill("blue");
          });

          // todo: don't know why 'this' is the only way to change the filling ...
          xx.on('dragend', function(e) {

            this.fill("red");
            deltax =  Math.round(e.detail.p.x - sx);
            deltay =  Math.round(e.detail.p.y - sy);

            conf_value_new[0] += deltax;
            conf_value_new[1] += deltay;

             self.draggable_dragend_handler.$call($hash2(["element", "conf_key", "conf_value_new"], {"element": this, "conf_key": conf_key, "conf_value_new": $send(self.$Native(conf_value_new), 'map', [], ($$20 = function(i){var self = $$20.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i.$round(2);}, $$20.$$s = self, $$20.$$arity = 1, $$20))}));
          })
      ;
        return nil;
      }, $Paper_set_draggable_pos$18.$$arity = 3);
      
      Opal.def(self, '$set_draggable_tuplet', $Paper_set_draggable_tuplet$21 = function $$set_draggable_tuplet(svg_element_id, conf_key, conf_value, draginfo) {
        var $$22, $$23, self = this, p1 = nil, p2 = nil, cp1 = nil, cp2 = nil, deltap = nil, $writer = nil, rotate_by = nil, np1 = nil, np2 = nil;

        
      var xx = SVG.get(svg_element_id);
      var cp_id = "to be set after dragging"
      xx.addClass("zn_draggable");
      xx.draggable();

      var sx = 0,                 // initialize the outer variables for the closures
          sy = 0,
          target_id = null,
          target_curve=null;


      // *******************************************************************************************
      xx.on('dragstart', function(e) {

        self.draggable_dragstart_handler.$call($hash2(["element", "conf_key"], {"element": this, "conf_key": conf_key}));

        sx = e.detail.p.x;
        sy = e.detail.p.y;
        this.stroke("blue");
        target_id = draginfo['$[]']("target_id");
        target_curve = document.getElementById(target_id)
      });



      // *******************************************************************************************
      xx.on('dragmove', function(e){

        e.preventDefault();

        dx = e.detail.p.x - sx; // dx = dx - dx % 5;
        dy = e.detail.p.y - sy; // dy = dy - dy % 5;
        ((p1 = self.$Vector2d(draginfo['$[]']("p1"))), (p2 = self.$Vector2d(draginfo['$[]']("p2"))), (cp1 = self.$Vector2d(draginfo['$[]']("cp1"))), (cp2 = self.$Vector2d(draginfo['$[]']("cp2"))), (deltap = $rb_minus(p2, p1)))

      // need to find out which of the handle was drag
      cp_id = e.target.childNodes[0].attributes['data-cp'].value // use childNodes for Edge Browser
      if (cp_id == "cp1") {(cp1 = $rb_plus(cp1, [dx, dy]))}
                 else {(cp2 = $rb_plus(cp2, [dx, dy]))}

      // the bezier curve
      newpath = [['M', p1.$x(), p1.$y()], ['C', cp1.$x(), cp1.$y(), cp2.$x(), cp2.$y(), p2.$x(), p2.$y()]]
      np = self.$path_to_raphael(newpath);
      target_curve.childNodes[0].setAttribute('d', np);

      // draw the lines to illustrate the controlpoints
      newpath = [['M', p1.$x(), p1.$y()], ['L', cp1.$x(), cp1.$y()], ['L', cp2.$x(), cp2.$y()], ['L', p2.$x(), p2.$y()]]
      np = self.$path_to_raphael(newpath);
      e.target.firstChild.setAttribute('d', np);

      })

      // *************************************************************************************************************
        xx.on('dragend', function(e) {
      ((($writer = ["cp1", cp1.$to_a()]), $send(draginfo, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), (($writer = ["cp2", cp2.$to_a()]), $send(draginfo, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]))
          this.stroke("red");
            conf_key_to_change = draginfo['$[]']("conf_key") + "." + cp_id;

            ((rotate_by = $rb_times($$$($$($nesting, 'Math'), 'PI'), 0.5)), (np1 = $rb_minus(p1, cp1).$rotate(deltap.$angle()['$-@']()).$rotate(rotate_by['$-@']())), (np2 = $rb_minus(p2, cp2).$rotate(deltap.$angle()['$-@']()).$rotate(rotate_by['$-@']())))

             if (cp_id == "cp1") {
                 conf_value_new = $send(np1.$to_a(), 'map', [], ($$22 = function(i){var self = $$22.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i.$round(2);}, $$22.$$s = self, $$22.$$arity = 1, $$22))
                  newpath = [['M', p1.$x(), p1.$y()], ['L', cp1.$x(), cp1.$y()]]
                  np = self.$path_to_raphael(newpath);
                  e.target.firstChild.setAttribute('d', np);
                }
                 else
                {
                 conf_value_new = $send(np2.$to_a(), 'map', [], ($$23 = function(i){var self = $$23.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i.$round(2);}, $$23.$$s = self, $$23.$$arity = 1, $$23))
                  newpath = [['M', p2.$x(), p2.$y()],  ['L', cp2.$x(), cp2.$y()]]
                  np = self.$path_to_raphael(newpath);
                  e.target.firstChild.setAttribute('d', np);
                }

            self.draggable_dragend_handler( { conf_key: conf_key_to_change, conf_value_new: conf_value_new } )
        })
      
      }, $Paper_set_draggable_tuplet$21.$$arity = 4);
      
      Opal.def(self, '$set_draggable_imagesize', $Paper_set_draggable_imagesize$24 = function $$set_draggable_imagesize(svg_element_id, conf_key, conf_value, draginfo) {
        var self = this;

        
      var xx = SVG.get(svg_element_id);
      xx.addClass("nn_draggable")
      xx.draggable();
      
      }, $Paper_set_draggable_imagesize$24.$$arity = 4);
      
      Opal.def(self, '$set_draggable_jumpline', $Paper_set_draggable_jumpline$25 = function $$set_draggable_jumpline(svg_element_id, conf_key, conf_value, draginfo) {
        var self = this, vertical = nil, $writer = nil, newpath = nil;
        if ($gvars.conf == null) $gvars.conf = nil;

        

      var xx = SVG.get(svg_element_id);
      xx.addClass("zn_draggable");

      xx.draggable();

      xx.on('dragstart', function(e) {
        self.draggable_dragstart_handler.$call($hash2(["element", "conf_key"], {"element": this, "conf_key": conf_key}));
        (vertical = draginfo['$[]']("jumpline")['$[]']("vertical"))
        sx = e.detail.p.x;
        sy = e.detail.p.y;
        this.stroke("blue");
      });

      xx.on('dragmove', function(e){
        e.preventDefault();

        dx = e.detail.p.x - sx;
        dx = dx - dx % draginfo['$[]']("xspacing"); // we still drag in string rasters.

        ((($writer = ["vertical", $rb_plus(vertical, dx)]), $send(draginfo['$[]']("jumpline"), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]), (newpath = $$$($$$($$($nesting, 'Harpnotes'), 'Layout'), 'Default').$make_path_from_jumpline(draginfo['$[]']("jumpline"))['$[]'](0)))

        np = self.$path_to_raphael(newpath)
        e.target.childNodes[0].setAttribute('d', np);
      })

        // todo: don't know why 'this' is the only way to change the filling ...
        xx.on('dragend', function(e) {
          this.stroke("red");
          var result = {
            delta: [ e.detail.p.x - sx, e.detail.p.y - sy],
            element: svg_element_id
          };
            conf_value_new = Math.round(((vertical + dx ) / $gvars.conf['$[]']("layout.X_SPACING")))  // todo: #154 this does not work for diatonic instruments
            if (conf_value_new <= 0) conf_value_new -= 1
            self.draggable_dragend_handler( { delta: [e.detail.p.x - sx, e.detail.p.y - sy], element: this, conf_key: conf_key, conf_value: conf_value, conf_value_new: conf_value_new } )
        })
      
      }, $Paper_set_draggable_jumpline$25.$$arity = 4);
      
      Opal.def(self, '$add_abcref', $Paper_add_abcref$26 = function $$add_abcref(x, y, rx, ry, start_char, attributes) {
        var self = this, attr = nil, id = nil, padding = nil, svg = nil;

        
        
        if (start_char == null) {
          start_char = nil;
        };
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        attr = self.$_attr_to_xml(attributes);
        id = self['$new_id!']();
        padding = 2;
        svg = "" + "<rect " + (attr) + " class=\"abcref znref _" + (start_char) + "_\" id=\"" + (id) + "\" x=\"" + ($rb_minus($rb_minus(x, rx), $rb_divide(padding, 2))) + "\" y=\"" + ($rb_minus($rb_minus(y, ry), $rb_divide(padding, 2))) + "\" width=\"" + ($rb_plus($rb_times(2, rx), padding)) + "\" height=\"" + ($rb_plus($rb_times(2, ry), padding)) + "\"/>";
        self.svgbuffer.$push(svg);
        return id;
      }, $Paper_add_abcref$26.$$arity = -5);
      
      Opal.def(self, '$ellipse', $Paper_ellipse$27 = function $$ellipse(x, y, rx, ry, attributes) {
        var self = this, attr = nil, svg = nil;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        attr = self.$_attr_to_xml(attributes);
        svg = "" + "<ellipse  cx=\"" + (x) + "\" cy=\"" + (y) + "\" rx=\"" + (rx) + "\" ry=\"" + (ry) + "\" stroke-width=\"" + (self.line_width) + "\" " + (attr) + "/>";
        self.svgbuffer.$push(svg);
        return nil;
      }, $Paper_ellipse$27.$$arity = -5);
      
      Opal.def(self, '$image', $Paper_image$28 = function $$image(url, x, y, height, attributes) {
        var self = this, id = nil, attrs = nil;

        
        id = self['$new_id!']();
        attrs = self.$_attr_to_xml(attributes);
        self.svgbuffer.$push("" + "  <image id = " + (id) + " x=\"" + (x) + "\" y=\"" + (y) + "\" width=\"" + (5000) + "\" height=\"" + (height) + "\"  " + (attrs) + "\n" + "    preserveAspectRatio=\"xMinYMin\"\n" + "    xlink:href=\"" + (url) + "\">\n" + "  </image>");
        return id;
      }, $Paper_image$28.$$arity = 5);
      
      Opal.def(self, '$path', $Paper_path$29 = function $$path(spec, attributes, bgrectspec) {
        var self = this, thespec = nil, id = nil, group_attrs = nil, $writer = nil, attrs = nil, bgrect = nil;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (bgrectspec == null) {
          bgrectspec = nil;
        };
        thespec = self.$path_to_raphael(spec);
        id = self['$new_id!']();
        group_attrs = self.$_attr_to_xml($hash2(["fill", "stroke"], {"fill": attributes['$[]']("fill"), "stroke": attributes['$[]']("stroke")}));
        attributes.$delete("fill");
        attributes.$delete("stroke");
        if ($truthy(attributes['$[]']("stroke-width"))) {
        } else {
          
          $writer = ["stroke-width", self.line_width];
          $send(attributes, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        attrs = self.$_attr_to_xml(attributes);
        if ($truthy(bgrectspec)) {
          bgrect = "" + "<rect class=\"abcref\" x=\"" + (bgrectspec['$[]'](0)) + "\" y=\"" + (bgrectspec['$[]'](1)) + "\" width=\"" + (bgrectspec['$[]'](2)) + "\" height=\"" + (bgrectspec['$[]'](3)) + "\" />"};
        self.svgbuffer.$push("" + "<g id=\"" + (id) + "\" " + (group_attrs) + " >" + (bgrect) + "<path id=\"" + (id) + "\" " + (attrs) + " d=\"" + (thespec) + "\"/></g>");
        return id;
      }, $Paper_path$29.$$arity = -2);
      
      Opal.def(self, '$path_to_raphael', $Paper_path_to_raphael$30 = function $$path_to_raphael(path) {
        var $$31, self = this, result = nil;

        
        if ($truthy(path['$is_a?']($$($nesting, 'Array')))) {
          result = $send(path, 'inject', [""], ($$31 = function(result, element){var self = $$31.$$s || this;

          
            
            if (result == null) {
              result = nil;
            };
            
            if (element == null) {
              element = nil;
            };
            result = $rb_plus(result, element.$first());
            return (result = $rb_plus(result, element['$[]']($range(1, -1, false)).$join(" ")));}, $$31.$$s = self, $$31.$$arity = 2, $$31))
        } else {
          result = path
        };
        return result;
      }, $Paper_path_to_raphael$30.$$arity = 1);
      
      Opal.def(self, '$rect', $Paper_rect$32 = function $$rect(x, y, rx, ry, radius, attributes) {
        var self = this, id = nil, attr = nil;

        
        
        if (radius == null) {
          radius = 0;
        };
        
        if (attributes == null) {
          attributes = $hash2(["fill", "stroke", "stroke-width"], {"fill": "none", "stroke": "black", "stroke-width": self.line_width});
        };
        id = self['$new_id!']();
        attr = self.$_attr_to_xml(attributes);
        self.svgbuffer.$push("" + "<rect id=\"" + (id) + "\" x=\"" + (x) + "\" y=\"" + (y) + "\" width=\"" + (rx) + "\" height=\"" + (ry) + "\" rx=\"" + (radius) + "\" ry=\"" + (radius) + "\"  stroke-width=\"" + (self.line_width) + "\" " + (attr) + " />");
        return id;
      }, $Paper_rect$32.$$arity = -5);
      
      Opal.def(self, '$set_view_box', $Paper_set_view_box$33 = function $$set_view_box(x, y, width, height, fit) {
        var self = this;

        
        self.viewbox = [x, y, width, height];
        return (self.scale = $rb_divide(self.canvas.$last(), height));
      }, $Paper_set_view_box$33.$$arity = 5);
      
      Opal.def(self, '$line', $Paper_line$34 = function $$line(x1, y1, x2, y2, attributes, draginfo) {
        var self = this;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        
        if (draginfo == null) {
          draginfo = nil;
        };
        return self.$path("" + "M" + (x1) + "," + (y1) + "L" + (x2) + "," + (y2), attributes);
      }, $Paper_line$34.$$arity = -5);
      
      Opal.def(self, '$text', $Paper_text$35 = function $$text(x, y, text, attributes) {
        var $$36, self = this, id = nil, attrs = nil, tspans = nil;

        
        
        if (attributes == null) {
          attributes = $hash2([], {});
        };
        id = self['$new_id!']();
        attrs = self.$_attr_to_xml(attributes);
        tspans = $send(text.$split("\n"), 'map', [], ($$36 = function(l){var self = $$36.$$s || this;

        
          
          if (l == null) {
            l = nil;
          };
          return "" + "<tspan dy=\"1.2em\" x=\"" + (x) + "\">" + (l) + "</tspan>";}, $$36.$$s = self, $$36.$$arity = 1, $$36)).$join();
        self.svgbuffer.$push("" + "<g id=\"" + (id) + "\" x=\"" + (x) + "\" y=\"" + (y) + "\"><text x=\"" + (x) + "\" y=\"" + (y) + "\" id=\"" + (id) + "\" " + (attrs) + ">" + (tspans) + "</text></g>");
        return id;
      }, $Paper_text$35.$$arity = -4);
      
      Opal.def(self, '$_attr_to_xml', $Paper__attr_to_xml$37 = function $$_attr_to_xml(attributes) {
        var $$38, self = this;

        return $send(attributes, 'map', [], ($$38 = function(k, v){var self = $$38.$$s || this;

        
          
          if (k == null) {
            k = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          return "" + (k) + "=\"" + (v) + "\"";}, $$38.$$s = self, $$38.$$arity = 2, $$38)).$join(" ")
      }, $Paper__attr_to_xml$37.$$arity = 1);
      
      Opal.def(self, '$size_outdated', $Paper_size_outdated$39 = function $$size_outdated() {
        var self = this;

        return [self.r.canvas.offsetWidth, self.r.canvas.offsetHeight]
      }, $Paper_size_outdated$39.$$arity = 0);
      return (Opal.def(self, '$scroll_to_element', $Paper_scroll_to_element$40 = function $$scroll_to_element(element) {
        var self = this;

        
        height = $("#" + self.container_id + " svg").height();
        thetopraw = element[0].y.baseVal.value;
        thetop = thetopraw * (height / self.viewbox['$[]'](3)) - 100;  // keep 110 px from top border
        $("#"+self.container_id).get(0).scrollTop = thetop;
      
      }, $Paper_scroll_to_element$40.$$arity = 1), nil) && 'scroll_to_element';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["svg_engine"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $gvars = Opal.gvars, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$nil?', '$find', '$new', '$include?', '$bind_the_element', '$push', '$stopPropagation', '$Native', '$dig', '$call', '$set_view_box', '$set_canvas', '$get_svg', '$save_scroll_position', '$html', '$t', '$[]', '$first', '$last', '$warn', '$clear', '$rect', '$+', '$-', '$each', '$children', '$line_width', '$line_width=', '$is_a?', '$visible?', '$draw_ellipse', '$draw_flowline', '$draw_glyph', '$draw_annotation', '$draw_path', '$draw_image', '$error', '$class', '$flush', '$on_mouseover', '$on_mouseout', '$on_drag_start', '$on_drag_end', '$on_draggable_rightclick', '$unhighlight_element', '$unhighlight_all', '$range_highlight_more', '$get_elements_by_range', '$highlight_element', '$==', '$empty?', '$scroll_to_element', '$private', '$sort', '$map', '$>', '$*', '$add_class', '$remove_class', '$set_conf_editable', '$===', '$set_draggable_pos', '$set_draggable_jumpline', '$set_draggable_tuplet', '$origin', '$!', '$tap', '$delete', '$conf_key', '$conf_value', '$more_conf_keys', '$draginfo', '$[]=', '$color', '$fill', '$size', '$rect?', '$center', '$ellipse', '$/', '$dotted?', '$draw_the_dot', '$hasbarover?', '$draw_the_barover', '$add_abcref', '$merge', '$push_element', '$glyph', '$path', '$set_stroke_dasharray', '$line', '$from', '$to', '$distance', '$level', '$get', '$style', '$gsub', '$text', '$-@', '$to_s', '$align', '$Vector2d', '$llpos', '$height', '$image', '$url', '$x', '$y', '$filled?']);
  
  self.$require("opal-svg");
  self.$require("harpnotes");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Harpnotes');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SvgEngine');

      var $nesting = [self].concat($parent_nesting), $SvgEngine_initialize$1, $SvgEngine__bind_on_mouseover$2, $SvgEngine__clickabcnote$3, $SvgEngine_set_view_box$4, $SvgEngine_set_canvas$5, $SvgEngine_clear$6, $SvgEngine_flush$7, $SvgEngine_display_no_preview_available$8, $SvgEngine_save_scroll_position$9, $SvgEngine_set_svg$10, $SvgEngine_draw$11, $SvgEngine_on_select$13, $SvgEngine_on_mouseover$14, $SvgEngine_on_mouseout$16, $SvgEngine_on_drag_start$18, $SvgEngine_on_drag_end$20, $SvgEngine_on_draggable_rightcklick$22, $SvgEngine_unhighlight_all$24, $SvgEngine_range_highlight$26, $SvgEngine_range_highlight_more$27, $SvgEngine_range_unhighlight$29, $SvgEngine_get_elements_by_range$31, $SvgEngine_highlight_element$34, $SvgEngine_scroll_to_element$35, $SvgEngine_unhighlight_element$36, $SvgEngine_bind_elements$37, $SvgEngine_bind_the_element$39, $SvgEngine_push_element$40, $SvgEngine_draw_ellipse$42, $SvgEngine_draw_glyph$44, $SvgEngine_draw_the_barover$45, $SvgEngine_draw_the_dot$46, $SvgEngine_draw_flowline$47, $SvgEngine_draw_jumpline_outdated$48, $SvgEngine_draw_annotation$49, $SvgEngine_draw_image$51, $SvgEngine_draw_path$52, $SvgEngine_set_stroke_dasharray$53;

      self.$$prototype.container_id = self.$$prototype.bound_elements = self.$$prototype.interactive_elements = self.$$prototype.on_select = self.$$prototype.paper = self.$$prototype.preview_container = self.$$prototype.preview_scroll = self.$$prototype.viewbox = self.$$prototype.highlighted = self.$$prototype.onclick_for_svg = self.$$prototype.attr_for_on_contextmenu = self.$$prototype.attr_for_draggable = nil;
      
      self.$include($$$($$($nesting, 'Harpnotes'), 'Drawing'));
      self.$attr_reader("paper");
      Opal.const_set($nesting[0], 'PADDING', 5);
      Opal.const_set($nesting[0], 'ARROW_SIZE', 1.0);
      Opal.const_set($nesting[0], 'JUMPLINE_INDENT', 10);
      Opal.const_set($nesting[0], 'DOTTED_SIZE', 0.5);
      Opal.const_set($nesting[0], 'COLORS', $hash2(["black", "white", "grey", "lightgrey", "darkgrey", "dimgrey"], {"black": "black", "white": "white", "grey": "grey", "lightgrey": "lightgrey", "darkgrey": "darkgrey", "dimgrey": "dimgrey"}));
      
      Opal.def(self, '$initialize', $SvgEngine_initialize$1 = function $$initialize(element_id, width, height) {
        var self = this, harpnote_preview_printer = nil;

        
        self.viewbox = [0, 0, 100, 100];
        if ($truthy(element_id['$nil?']())) {
        } else {
          
          self.container_id = element_id;
          self.preview_container = $$($nesting, 'Element').$find("" + "#" + (self.container_id));
        };
        self.paper = $$$($$($nesting, 'ZnSvg'), 'Paper').$new(element_id, width, height);
        self.on_select = nil;
        self.highlighted = [];
        harpnote_preview_printer = "Opal.top.uicontroller.harpnote_preview_printer";
        self.onclick_for_svg = "" + (harpnote_preview_printer) + ".$_clickabcnote(evt, id)";
        self.attr_for_on_contextmenu = $hash2(["onmouseover"], {"onmouseover": "" + (harpnote_preview_printer) + ".$_bind_on_mouseover(evt, id)"});
        return (self.attr_for_draggable = $hash2(["onmouseover"], {"onmouseover": "" + (harpnote_preview_printer) + ".$_bind_on_mouseover(evt, id)"}));
      }, $SvgEngine_initialize$1.$$arity = 3);
      
      Opal.def(self, '$_bind_on_mouseover', $SvgEngine__bind_on_mouseover$2 = function $$_bind_on_mouseover(evt, id) {
        var $a, self = this;

        
        self.bound_elements = ($truthy($a = self.bound_elements) ? $a : []);
        if ($truthy(self.bound_elements['$include?'](id))) {
          return nil
        } else {
          
          self.$bind_the_element(id);
          return self.bound_elements.$push(id);
        };
      }, $SvgEngine__bind_on_mouseover$2.$$arity = 2);
      
      Opal.def(self, '$_clickabcnote', $SvgEngine__clickabcnote$3 = function $$_clickabcnote(evt, id) {
        var $a, self = this, music_model_element = nil;

        
        self.$Native(evt).$stopPropagation();
        music_model_element = self.interactive_elements.$dig(id, "music_model_elemment_origin");
        if ($truthy(($truthy($a = music_model_element['$nil?']()) ? $a : self.on_select['$nil?']()))) {
          return nil
        } else {
          return self.on_select.$call(music_model_element)
        };
      }, $SvgEngine__clickabcnote$3.$$arity = 2);
      
      Opal.def(self, '$set_view_box', $SvgEngine_set_view_box$4 = function $$set_view_box(x, y, width, height) {
        var self = this;

        
        self.viewbox = [x, y, width, height];
        return self.paper.$set_view_box(x, y, width, height, true);
      }, $SvgEngine_set_view_box$4.$$arity = 4);
      
      Opal.def(self, '$set_canvas', $SvgEngine_set_canvas$5 = function $$set_canvas(size) {
        var self = this;

        return self.paper.$set_canvas(size)
      }, $SvgEngine_set_canvas$5.$$arity = 1);
      
      Opal.def(self, '$clear', $SvgEngine_clear$6 = function $$clear() {
        var self = this;

        return (self.interactive_elements = $hash2([], {}))
      }, $SvgEngine_clear$6.$$arity = 0);
      
      Opal.def(self, '$flush', $SvgEngine_flush$7 = function $$flush() {
        var self = this, svg = nil;

        
        svg = self.paper.$get_svg();
        return $hash2(["svg", "interactive_elements"], {"svg": self.paper.$get_svg(), "interactive_elements": self.interactive_elements});
      }, $SvgEngine_flush$7.$$arity = 0);
      
      Opal.def(self, '$display_no_preview_available', $SvgEngine_display_no_preview_available$8 = function $$display_no_preview_available() {
        var self = this;

        
        self.$save_scroll_position();
        return self.preview_container.$html("" + "<h1>" + ($$($nesting, 'I18n').$t("no preview available yet")) + "</h1>");
      }, $SvgEngine_display_no_preview_available$8.$$arity = 0);
      
      Opal.def(self, '$save_scroll_position', $SvgEngine_save_scroll_position$9 = function $$save_scroll_position() {
        var self = this;

        return (self.preview_scroll = [self.preview_container.scrollLeft(), self.preview_container.scrollTop()])
      }, $SvgEngine_save_scroll_position$9.$$arity = 0);
      
      Opal.def(self, '$set_svg', $SvgEngine_set_svg$10 = function $$set_svg(svg_and_positions) {
        var self = this;
        if ($gvars.log == null) $gvars.log = nil;

        
        self.bound_elements = [];
        self.preview_container.$html(svg_and_positions['$[]']("svg"));
        self.interactive_elements = svg_and_positions['$[]']("interactive_elements");
        if ($truthy(self.preview_scroll)) {
          
        self.preview_container.scrollLeft(self.preview_scroll.$first());
        self.preview_container.scrollTop(self.preview_scroll.$last());
        
        } else {
          $gvars.log.$warn("BUG: preview Scroll empty")
        };
        return nil;
      }, $SvgEngine_set_svg$10.$$arity = 1);
      
      Opal.def(self, '$draw', $SvgEngine_draw$11 = function $$draw(sheet) {
        var $$12, self = this;

        
        self.paper.$clear();
        self.highlighted = [];
        self.paper.$rect($rb_plus(self.viewbox['$[]'](0), 1), $rb_plus(self.viewbox['$[]'](1), 1), $rb_minus(self.viewbox['$[]'](2), 2), $rb_minus(self.viewbox['$[]'](3), 2));
        self.paper.$rect(self.viewbox['$[]'](0), self.viewbox['$[]'](1), self.viewbox['$[]'](2), self.viewbox['$[]'](3));
        $send(sheet.$children(), 'each', [], ($$12 = function(child){var self = $$12.$$s || this, $writer = nil;
          if (self.paper == null) self.paper = nil;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (child == null) {
            child = nil;
          };
          
          $writer = [child.$line_width()];
          $send(self.paper, 'line_width=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(child['$is_a?']($$($nesting, 'Ellipse')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_ellipse(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$($nesting, 'FlowLine')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_flowline(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Glyph')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_glyph(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_annotation(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_path(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Image')))) {
            return self.$draw_image(child)
          } else {
            
            $gvars.log.$error("" + "BUG:don't know how to draw " + (child.$class()) + " (" + ("./svg_engine.rb".$force_encoding("US-ASCII")) + " " + (127) + ")");
            return nil;
          };}, $$12.$$s = self, $$12.$$arity = 1, $$12));
        return self.$flush();
      }, $SvgEngine_draw$11.$$arity = 1);
      
      Opal.def(self, '$on_select', $SvgEngine_on_select$13 = function $$on_select() {
        var $iter = $SvgEngine_on_select$13.$$p, block = $iter || nil, self = this;

        if ($iter) $SvgEngine_on_select$13.$$p = null;
        
        
        if ($iter) $SvgEngine_on_select$13.$$p = null;;
        return (self.on_select = block);
      }, $SvgEngine_on_select$13.$$arity = 0);
      
      Opal.def(self, '$on_mouseover', $SvgEngine_on_mouseover$14 = function $$on_mouseover() {
        var $iter = $SvgEngine_on_mouseover$14.$$p, block = $iter || nil, $$15, self = this;

        if ($iter) $SvgEngine_on_mouseover$14.$$p = null;
        
        
        if ($iter) $SvgEngine_on_mouseover$14.$$p = null;;
        self.on_mouseover = block;
        return $send(self.paper, 'on_mouseover', [], ($$15 = function(info){var self = $$15.$$s || this;

        
          
          if (info == null) {
            info = nil;
          };
          return block.$call(self.$Native(info));}, $$15.$$s = self, $$15.$$arity = 1, $$15));
      }, $SvgEngine_on_mouseover$14.$$arity = 0);
      
      Opal.def(self, '$on_mouseout', $SvgEngine_on_mouseout$16 = function $$on_mouseout() {
        var $iter = $SvgEngine_on_mouseout$16.$$p, block = $iter || nil, $$17, self = this;

        if ($iter) $SvgEngine_on_mouseout$16.$$p = null;
        
        
        if ($iter) $SvgEngine_on_mouseout$16.$$p = null;;
        self.on_mouseout = block;
        return $send(self.paper, 'on_mouseout', [], ($$17 = function(info){var self = $$17.$$s || this;

        
          
          if (info == null) {
            info = nil;
          };
          return block.$call(self.$Native(info));}, $$17.$$s = self, $$17.$$arity = 1, $$17));
      }, $SvgEngine_on_mouseout$16.$$arity = 0);
      
      Opal.def(self, '$on_drag_start', $SvgEngine_on_drag_start$18 = function $$on_drag_start() {
        var $iter = $SvgEngine_on_drag_start$18.$$p, block = $iter || nil, $$19, self = this;

        if ($iter) $SvgEngine_on_drag_start$18.$$p = null;
        
        
        if ($iter) $SvgEngine_on_drag_start$18.$$p = null;;
        return $send(self.paper, 'on_drag_start', [], ($$19 = function(info){var self = $$19.$$s || this;

        
          
          if (info == null) {
            info = nil;
          };
          return block.$call(self.$Native(info));}, $$19.$$s = self, $$19.$$arity = 1, $$19));
      }, $SvgEngine_on_drag_start$18.$$arity = 0);
      
      Opal.def(self, '$on_drag_end', $SvgEngine_on_drag_end$20 = function $$on_drag_end() {
        var $iter = $SvgEngine_on_drag_end$20.$$p, block = $iter || nil, $$21, self = this;

        if ($iter) $SvgEngine_on_drag_end$20.$$p = null;
        
        
        if ($iter) $SvgEngine_on_drag_end$20.$$p = null;;
        return $send(self.paper, 'on_drag_end', [], ($$21 = function(info){var self = $$21.$$s || this;

        
          
          if (info == null) {
            info = nil;
          };
          return block.$call(self.$Native(info));}, $$21.$$s = self, $$21.$$arity = 1, $$21));
      }, $SvgEngine_on_drag_end$20.$$arity = 0);
      
      Opal.def(self, '$on_draggable_rightcklick', $SvgEngine_on_draggable_rightcklick$22 = function $$on_draggable_rightcklick() {
        var $iter = $SvgEngine_on_draggable_rightcklick$22.$$p, block = $iter || nil, $$23, self = this;

        if ($iter) $SvgEngine_on_draggable_rightcklick$22.$$p = null;
        
        
        if ($iter) $SvgEngine_on_draggable_rightcklick$22.$$p = null;;
        self.on_draggable_rightclick = block;
        return $send(self.paper, 'on_draggable_rightclick', [], ($$23 = function(info){var self = $$23.$$s || this;

        
          
          if (info == null) {
            info = nil;
          };
          return block.$call(self.$Native(info));}, $$23.$$s = self, $$23.$$arity = 1, $$23));
      }, $SvgEngine_on_draggable_rightcklick$22.$$arity = 0);
      
      Opal.def(self, '$unhighlight_all', $SvgEngine_unhighlight_all$24 = function $$unhighlight_all() {
        var $$25, self = this;

        return $send(self.highlighted, 'each', [], ($$25 = function(e){var self = $$25.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return self.$unhighlight_element(e);}, $$25.$$s = self, $$25.$$arity = 1, $$25))
      }, $SvgEngine_unhighlight_all$24.$$arity = 0);
      
      Opal.def(self, '$range_highlight', $SvgEngine_range_highlight$26 = function $$range_highlight(from, to) {
        var self = this;

        
        self.$unhighlight_all();
        return self.$range_highlight_more(from, to);
      }, $SvgEngine_range_highlight$26.$$arity = 2);
      
      Opal.def(self, '$range_highlight_more', $SvgEngine_range_highlight_more$27 = function $$range_highlight_more(from, to) {
        var $$28, self = this, elements = nil;
        if ($gvars.settings == null) $gvars.settings = nil;

        
        elements = self.$get_elements_by_range(from, to);
        $send(elements, 'each', [], ($$28 = function(element){var self = $$28.$$s || this;

        
          
          if (element == null) {
            element = nil;
          };
          return self.$highlight_element(element);}, $$28.$$s = self, $$28.$$arity = 1, $$28));
        if ($gvars.settings['$[]']("autoscroll")['$==']("false")) {
          return nil
        } else if ($truthy(elements['$empty?']())) {
          return nil
        } else {
          return self.$scroll_to_element(elements.$first())
        };
      }, $SvgEngine_range_highlight_more$27.$$arity = 2);
      
      Opal.def(self, '$range_unhighlight', $SvgEngine_range_unhighlight$29 = function $$range_unhighlight(from, to) {
        var $$30, self = this, elements = nil;

        
        elements = self.$get_elements_by_range(from, to);
        $send(elements, 'each', [], ($$30 = function(element){var self = $$30.$$s || this;

        
          
          if (element == null) {
            element = nil;
          };
          return self.$unhighlight_element(element);}, $$30.$$s = self, $$30.$$arity = 1, $$30));
        return nil;
      }, $SvgEngine_range_unhighlight$29.$$arity = 2);
      self.$private();
      
      Opal.def(self, '$get_elements_by_range', $SvgEngine_get_elements_by_range$31 = function $$get_elements_by_range(from, to) {
        var $$32, self = this, result = nil, range = nil;

        
        result = [];
        range = [from, to].$sort();
        $send(self.interactive_elements, 'each', [], ($$32 = function(k, value){var self = $$32.$$s || this, $$33, origin = nil, noterange = nil;

        
          
          if (k == null) {
            k = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          origin = value.$dig("music_model_elemment_origin", "origin");
          if ($truthy(origin['$nil?']())) {
            return nil
          } else {
            
            noterange = $send(["startChar", "endChar"], 'map', [], ($$33 = function(c){var self = $$33.$$s || this;

            
              
              if (c == null) {
                c = nil;
              };
              return origin['$[]'](c);}, $$33.$$s = self, $$33.$$arity = 1, $$33)).$sort();
            if ($truthy($rb_gt($rb_times($rb_minus(range.$first(), noterange.$last()), $rb_minus(noterange.$first(), range.$last())), 0))) {
              return result.$push($$($nesting, 'Element').$find("" + "#" + (k)))
            } else {
              return nil
            };
          };}, $$32.$$s = self, $$32.$$arity = 2, $$32));
        return result;
      }, $SvgEngine_get_elements_by_range$31.$$arity = 2);
      
      Opal.def(self, '$highlight_element', $SvgEngine_highlight_element$34 = function $$highlight_element(element) {
        var self = this;

        
        self.highlighted.$push(element);
        element.$add_class("highlight");
        return nil;
      }, $SvgEngine_highlight_element$34.$$arity = 1);
      
      Opal.def(self, '$scroll_to_element', $SvgEngine_scroll_to_element$35 = function $$scroll_to_element(element) {
        var self = this;

        return self.paper.$scroll_to_element(element)
      }, $SvgEngine_scroll_to_element$35.$$arity = 1);
      
      Opal.def(self, '$unhighlight_element', $SvgEngine_unhighlight_element$36 = function $$unhighlight_element(element) {
        var self = this;

        
        element.$remove_class("highlight");
        self.highlighted = $rb_minus(self.highlighted, [element]);
        return nil;
      }, $SvgEngine_unhighlight_element$36.$$arity = 1);
      
      Opal.def(self, '$bind_elements', $SvgEngine_bind_elements$37 = function $$bind_elements() {
        var $$38, self = this;

        return $send(self.interactive_elements, 'each', [], ($$38 = function(svg_id, drawing_element){var self = $$38.$$s || this;

        
          
          if (svg_id == null) {
            svg_id = nil;
          };
          
          if (drawing_element == null) {
            drawing_element = nil;
          };
          return self.$bind_the_element(svg_id);}, $$38.$$s = self, $$38.$$arity = 2, $$38))
      }, $SvgEngine_bind_elements$37.$$arity = 0);
      
      Opal.def(self, '$bind_the_element', $SvgEngine_bind_the_element$39 = function $$bind_the_element(svg_id) {
        var self = this, drawing_element = nil, svg_node = nil, conf_key = nil, draginfo = nil, conf_value = nil, $case = nil;

        
        drawing_element = self.interactive_elements['$[]'](svg_id);
        svg_node = $$($nesting, 'Element').$find("" + "#" + (svg_id));
        conf_key = drawing_element['$[]']("conf_key");
        self.paper.$set_conf_editable(svg_node, conf_key, drawing_element['$[]']("more_conf_keys"));
        draginfo = drawing_element['$[]']("draginfo");
        if ($truthy(draginfo)) {
          
          conf_value = drawing_element['$[]']("conf_value");
          return (function() {$case = draginfo['$[]']("handler");
          if ("annotation"['$===']($case)) {return self.paper.$set_draggable_pos(svg_id, conf_key, conf_value)}
          else if ("jumpline"['$===']($case)) {return self.paper.$set_draggable_jumpline(svg_id, conf_key, conf_value, draginfo)}
          else if ("tuplet"['$===']($case)) {return self.paper.$set_draggable_tuplet(svg_id, conf_key, conf_value, draginfo)}
          else { return nil }})();
        } else {
          return nil
        };
      }, $SvgEngine_bind_the_element$39.$$arity = 1);
      
      Opal.def(self, '$push_element', $SvgEngine_push_element$40 = function $$push_element(layout_model_element, svg_id) {
        var $a, $$41, self = this, music_model_element = nil, music_model_element_hash = nil, drawing_element = nil, $writer = nil;

        
        music_model_element = layout_model_element.$origin();
        if ($truthy(($truthy($a = music_model_element['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable'))) ? layout_model_element['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path'))['$!']() : $a))) {
          music_model_element_hash = $hash2(["origin"], {"origin": $send(music_model_element.$origin(), 'tap', [], ($$41 = function(x){var self = $$41.$$s || this;

          
            
            if (x == null) {
              x = nil;
            };
            return x.$delete("raw_voice_element");}, $$41.$$s = self, $$41.$$arity = 1, $$41))})
        } else {
          music_model_element_hash = nil
        };
        drawing_element = $hash2(["music_model_elemment_origin", "conf_key", "conf_value", "more_conf_keys", "draginfo"], {"music_model_elemment_origin": music_model_element_hash, "conf_key": layout_model_element.$conf_key(), "conf_value": layout_model_element.$conf_value(), "more_conf_keys": layout_model_element.$more_conf_keys(), "draginfo": layout_model_element.$draginfo()});
        
        $writer = [svg_id, drawing_element];
        $send(self.interactive_elements, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $SvgEngine_push_element$40.$$arity = 2);
      
      Opal.def(self, '$draw_ellipse', $SvgEngine_draw_ellipse$42 = function $$draw_ellipse(root) {
        var $a, $$43, self = this, color = nil, attr = nil, $writer = nil, size = nil, e = nil, startChar = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        color = ($truthy($a = $$($nesting, 'COLORS')['$[]'](root.$color())) ? $a : $gvars.log.$error("BUG - wrong color in Ellipse"));
        attr = $hash2([], {});
        
        $writer = ["fill", (function() {if (root.$fill()['$==']("filled")) {
          return color
        } else {
          return $$($nesting, 'COLORS')['$[]']("white")
        }; return nil; })()];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["stroke", color];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        size = root.$size();
        
        $writer = [0];
        $send(self.paper, 'line_width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(root['$rect?']())) {
          e = self.paper.$rect($rb_minus(root.$center().$first(), size.$first()), $rb_minus(root.$center().$last(), size.$last()), $rb_times(2, size.$first()), $rb_times(2, size.$last()), 0, attr)
        } else {
          e = self.paper.$ellipse(root.$center().$first(), root.$center().$last(), size.$first(), size.$last(), attr)
        };
        if (root.$fill()['$==']("filled")) {
        } else {
          
          
          $writer = [root.$line_width()];
          $send(self.paper, 'line_width=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          size = $send(root.$size(), 'map', [], ($$43 = function(s){var self = $$43.$$s || this;

          
            
            if (s == null) {
              s = nil;
            };
            return $rb_minus(s, $rb_divide(root.$line_width(), 2));}, $$43.$$s = self, $$43.$$arity = 1, $$43));
          if ($truthy(root['$rect?']())) {
            e = self.paper.$rect($rb_minus(root.$center().$first(), size.$first()), $rb_minus(root.$center().$last(), size.$last()), $rb_times(2, size.$first()), $rb_times(2, size.$last()), 0, attr)
          } else {
            e = self.paper.$ellipse(root.$center().$first(), root.$center().$last(), size.$first(), size.$last(), attr)
          };
        };
        if ($truthy(root['$dotted?']())) {
          self.$draw_the_dot(root)};
        if ($truthy(root['$hasbarover?']())) {
          self.$draw_the_barover(root)};
        if ($truthy(root.$origin())) {
          
          startChar = root.$origin().$origin()['$[]']("startChar");
          e = self.paper.$add_abcref(root.$center().$first(), root.$center().$last(), $rb_times(0.75, root.$size().$first()), $rb_times(0.75, root.$size().$last()), startChar, $hash2(["onclick"], {"onclick": self.onclick_for_svg}).$merge(self.attr_for_on_contextmenu));
          return self.$push_element(root, e);
        } else {
          return nil
        };
      }, $SvgEngine_draw_ellipse$42.$$arity = 1);
      
      Opal.def(self, '$draw_glyph', $SvgEngine_draw_glyph$44 = function $$draw_glyph(root) {
        var self = this, center = nil, size = nil, color = nil, is_playable = nil, $writer = nil, bgrect = nil, e = nil, scalefactor = nil, attr = nil, startChar = nil;

        
        center = [root.$center().$first(), root.$center().$last()];
        size = [$rb_times(root.$size().$first(), 2), $rb_times(root.$size().$last(), 2)];
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        is_playable = root.$origin()['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'Playable'));
        
        $writer = [0.1];
        $send(self.paper, 'line_width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        bgrect = [$rb_minus(root.$center().$first(), $rb_divide(size.$first(), 2)), $rb_minus(root.$center().$last(), $rb_divide(size.$last(), 2)), size.$first(), size.$last(), 0];
        if ($truthy(is_playable)) {
          e = self.paper.$rect($rb_minus(root.$center().$first(), $rb_divide(size.$first(), 2)), $rb_minus(root.$center().$last(), $rb_divide(size.$last(), 2)), size.$first(), size.$last(), 0, $hash2(["fill", "stroke"], {"fill": "white", "stroke": "white"}))};
        
        $writer = [root.$line_width()];
        $send(self.paper, 'line_width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        scalefactor = $rb_divide(size.$last(), root.$glyph()['$[]']("h"));
        attr = $hash2([], {});
        
        $writer = ["fill", color];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["transform", "" + "translate(" + (center.$first()) + "," + (center.$last()) + ") scale(" + (scalefactor) + ")"];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        attr = attr.$merge(self.attr_for_draggable);
        e = self.paper.$path(root.$glyph()['$[]']("d"), attr, bgrect);
        if ($truthy(root['$dotted?']())) {
          self.$draw_the_dot(root)};
        if ($truthy(root['$hasbarover?']())) {
          self.$draw_the_barover(root)};
        if ($truthy(is_playable)) {
          
          attr = $hash2(["onclick"], {"onclick": self.onclick_for_svg}).$merge(self.attr_for_on_contextmenu);
          startChar = root.$origin().$origin()['$[]']("startChar");
          e = self.paper.$add_abcref(root.$center().$first(), root.$center().$last(), $rb_times(0.6, root.$size().$first()), $rb_times(0.6, root.$size().$last()), startChar, attr);
          return self.$push_element(root, e);
        } else {
          return self.$push_element(root, e)
        };
      }, $SvgEngine_draw_glyph$44.$$arity = 1);
      
      Opal.def(self, '$draw_the_barover', $SvgEngine_draw_the_barover$45 = function $$draw_the_barover(root) {
        var self = this, e_bar = nil;

        return (e_bar = self.paper.$rect($rb_minus(root.$center().$first(), root.$size().$first()), $rb_minus($rb_minus(root.$center().$last(), root.$size().$last()), $rb_times(1.5, root.$line_width())), $rb_times(2, root.$size().$first()), 0.5, 0, $hash2(["fill"], {"fill": $$($nesting, 'COLORS')['$[]'](root.$color())})))
      }, $SvgEngine_draw_the_barover$45.$$arity = 1);
      
      Opal.def(self, '$draw_the_dot', $SvgEngine_draw_the_dot$46 = function $$draw_the_dot(root) {
        var self = this, $writer = nil, ds1 = nil, ds2 = nil, x = nil, y = nil, white = nil, e_dot = nil;

        
        
        $writer = [0];
        $send(self.paper, 'line_width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        ds1 = $rb_plus($$($nesting, 'DOTTED_SIZE'), root.$line_width());
        ds2 = $rb_plus($$($nesting, 'DOTTED_SIZE'), root.$line_width());
        x = $rb_plus(root.$center().$first(), $rb_plus(root.$size().$first(), ds1));
        y = root.$center().$last();
        white = $$($nesting, 'COLORS')['$[]']("white");
        e_dot = self.paper.$ellipse(x, y, ds2, ds2, $hash2(["stroke", "fill"], {"stroke": white, "fill": white}));
        return (e_dot = self.paper.$ellipse(x, y, $$($nesting, 'DOTTED_SIZE'), $$($nesting, 'DOTTED_SIZE'), $hash2(["fill"], {"fill": $$($nesting, 'COLORS')['$[]'](root.$color())})));
      }, $SvgEngine_draw_the_dot$46.$$arity = 1);
      
      Opal.def(self, '$draw_flowline', $SvgEngine_draw_flowline$47 = function $$draw_flowline(root) {
        var self = this, color = nil, attr = nil, e = nil;

        
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        attr = $hash2(["stroke"], {"stroke": color});
        self.$set_stroke_dasharray(attr, root);
        e = self.paper.$line(root.$from().$center()['$[]'](0), root.$from().$center()['$[]'](1), root.$to().$center()['$[]'](0), root.$to().$center()['$[]'](1), attr);
        return e;
      }, $SvgEngine_draw_flowline$47.$$arity = 1);
      
      Opal.def(self, '$draw_jumpline_outdated', $SvgEngine_draw_jumpline_outdated$48 = function $$draw_jumpline_outdated(root) {
        var self = this, startpoint = nil, $writer = nil, endpoint = nil, distance = nil, depth = nil, path = nil, attr = nil, arrow = nil;

        
        startpoint = root.$from().$center();
        
        $writer = [0, $rb_plus(startpoint['$[]'](0), $$($nesting, 'PADDING'))];
        $send(startpoint, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        endpoint = root.$to().$center();
        
        $writer = [0, $rb_plus(endpoint['$[]'](0), $$($nesting, 'PADDING'))];
        $send(endpoint, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        distance = root.$distance();
        if ($truthy(distance['$nil?']())) {
          depth = $rb_minus(420, $rb_times(root.$level(), $$($nesting, 'JUMPLINE_INDENT')))
        } else {
          depth = $rb_plus(endpoint['$[]'](0), distance)
        };
        path = "" + "M" + (endpoint['$[]'](0)) + "," + (endpoint['$[]'](1)) + "L" + (depth) + "," + (endpoint['$[]'](1)) + "L" + (depth) + "," + (startpoint['$[]'](1)) + "L" + (startpoint['$[]'](0)) + "," + (startpoint['$[]'](1));
        self.paper.$path(path);
        attr = $hash2(["fill", "transform"], {"fill": "red", "transform": "" + "t" + (startpoint['$[]'](0)) + "," + (startpoint['$[]'](1))});
        return (arrow = self.paper.$path("" + "M0,0L" + ($$($nesting, 'ARROW_SIZE')) + "," + ($rb_times(-0.5, $$($nesting, 'ARROW_SIZE'))) + "L" + ($$($nesting, 'ARROW_SIZE')) + "," + ($rb_times(0.5, $$($nesting, 'ARROW_SIZE'))) + "L0,0", attr));
      }, $SvgEngine_draw_jumpline_outdated$48.$$arity = 1);
      
      Opal.def(self, '$draw_annotation', $SvgEngine_draw_annotation$49 = function $$draw_annotation(root) {
        var $a, $$50, self = this, style = nil, text = nil, attr = nil, $writer = nil, element = nil;
        if ($gvars.conf == null) $gvars.conf = nil;

        
        style = ($truthy($a = $gvars.conf.$get("layout.FONT_STYLE_DEF")['$[]'](root.$style())) ? $a : $gvars.conf.$get("layout.FONT_STYLE_DEF")['$[]']("regular"));
        text = $send(root.$text().$gsub(/\ +\n/, "\n").$gsub("\n\n", "\n \n"), 'gsub', [/(\\?)(~)/], ($$50 = function(m){var self = $$50.$$s || this;

        
          
          if (m == null) {
            m = nil;
          };
          if (m['$[]'](0)['$==']("\\")) {
            return m['$[]'](1)
          } else {
            return "&nbsp;"
          };}, $$50.$$s = self, $$50.$$arity = 1, $$50));
        attr = $hash2([], {});
        
        $writer = ["font-size", $rb_divide(style['$[]']("font_size"), 3)];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["font-family", "Arial"];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["transform", "" + "scale(1.05, 1) translate(0," + ($rb_divide(style['$[]']("font_size")['$-@'](), 8)) + ")"];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(style['$[]']("font_style").$to_s()['$include?']("bold"))) {
          
          $writer = ["font-weight", "bold"];
          $send(attr, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(style['$[]']("font_style").$to_s()['$include?']("italic"))) {
          
          $writer = ["font-style", "italic"];
          $send(attr, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = ["text-anchor", $hash2(["right", "left", "center"], {"right": "end", "left": "start", "center": "middle"})['$[]'](root.$align())];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        attr = attr.$merge(self.attr_for_on_contextmenu).$merge(self.attr_for_draggable);
        element = self.paper.$text($rb_divide(root.$center().$first(), 1.05), root.$center().$last(), text, attr);
        self.$push_element(root, element);
        return element;
      }, $SvgEngine_draw_annotation$49.$$arity = 1);
      
      Opal.def(self, '$draw_image', $SvgEngine_draw_image$51 = function $$draw_image(root) {
        var self = this, position = nil, attr = nil, e = nil, draginfo = nil, $writer = nil;

        
        position = $rb_plus($rb_plus(self.$Vector2d([0, 0]), root.$llpos()), [0, root.$height()]);
        attr = $hash2([], {});
        attr = attr.$merge(self.attr_for_on_contextmenu).$merge(self.attr_for_draggable);
        e = self.paper.$image(root.$url(), position.$x(), position.$y(), root.$height(), attr);
        draginfo = root.$draginfo();
        if ($truthy(draginfo)) {
          
          
          $writer = ["target_id", e];
          $send(draginfo, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          self.$push_element(root, e);};
        return e;
      }, $SvgEngine_draw_image$51.$$arity = 1);
      
      Opal.def(self, '$draw_path', $SvgEngine_draw_path$52 = function $$draw_path(root) {
        var self = this, color = nil, attr = nil, $writer = nil, e = nil, draginfo = nil, $case = nil;

        
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        attr = $hash2(["stroke", "fill"], {"stroke": color, "fill": "none"});
        self.$set_stroke_dasharray(attr, root);
        if ($truthy(root['$filled?']())) {
          
          $writer = ["fill", color];
          $send(attr, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        
        $writer = ["stroke-linecap", "round"];
        $send(attr, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        attr = attr.$merge(self.attr_for_on_contextmenu);
        e = self.paper.$path(root.$path(), attr);
        draginfo = root.$draginfo();
        if ($truthy(draginfo)) {
          
          
          $writer = ["target_id", e];
          $send(draginfo, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return (function() {$case = draginfo['$[]']("handler");
          if ("jumpline"['$===']($case)) {return self.$push_element(root, e)}
          else if ("tuplet"['$===']($case)) {
          attr = $hash2(["stroke", "class", "stroke-width"], {"stroke": "grey", "class": "zncontrol", "stroke-width": "1"}).$merge(self.attr_for_on_contextmenu);
          e = self.paper.$line(draginfo['$[]']("p1")['$[]'](0), draginfo['$[]']("p1")['$[]'](1), draginfo['$[]']("cp1")['$[]'](0), draginfo['$[]']("cp1")['$[]'](1), attr.$merge($hash2(["data-cp"], {"data-cp": "cp1"})));
          self.$push_element(root, e);
          e = self.paper.$line(draginfo['$[]']("p2")['$[]'](0), draginfo['$[]']("p2")['$[]'](1), draginfo['$[]']("cp2")['$[]'](0), draginfo['$[]']("cp2")['$[]'](1), attr.$merge($hash2(["data-cp"], {"data-cp": "cp2"})));
          self.$push_element(root, e);
          return nil;}
          else { return nil }})();
        } else {
          return nil
        };
      }, $SvgEngine_draw_path$52.$$arity = 1);
      return (Opal.def(self, '$set_stroke_dasharray', $SvgEngine_set_stroke_dasharray$53 = function $$set_stroke_dasharray(attr, root) {
        var self = this, $writer = nil;

        
        if (root.$style()['$==']("dashed")) {
          
          $writer = ["stroke-dasharray", "" + ($rb_divide(3, 2.84)) + " " + ($rb_divide(3, 2.84))];
          $send(attr, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (root.$style()['$==']("dotted")) {
          
          $writer = ["stroke-dasharray", "" + ($rb_divide(1.5, 2.84)) + " " + ($rb_divide(1.5, 2.84))];
          $send(attr, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          return nil
        };
      }, $SvgEngine_set_stroke_dasharray$53.$$arity = 2), nil) && 'set_stroke_dasharray';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["pdf_engine"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy, $range = Opal.range;

  Opal.add_stubs(['$require', '$include', '$attr_reader', '$new', '$*', '$[]', '$last', '$printer_config', '$y_offset=', '$-', '$each', '$draw_segment', '$+', '$first', '$x_offset=', '$draw_sheet', '$addPage', '$rect', '$children', '$line_width', '$line_width=', '$is_a?', '$visible?', '$draw_ellipse', '$draw_flowline', '$draw_glyph', '$draw_path', '$draw_annotation', '$draw_image', '$error', '$class', '$private', '$get', '$style', '$text_color=', '$font_size=', '$font_style=', '$align', '$gsub', '$text', '$==', '$split', '$empty?', '$center', '$color', '$filled?', '$size', '$stroke=', '$fill=', '$rect?', '$rect_like_ellipse', '$ellipse', '$fill', '$map', '$/', '$dotted?', '$draw_the_dot', '$hasbarover', '$draw_the_barover', '$glyph', '$===', '$lines', '$push', '$hasbarover?', '$dashed?', '$line_dash=', '$line', '$from', '$to', '$use_solid_lines', '$clone', '$[]=', '$distance', '$nil?', '$level', '$left_arrowhead', '$Vector2d', '$llpos', '$height', '$image', '$url', '$x', '$y', '$opacity', '$line_cap=', '$path', '$inject', '$flatten']);
  
  self.$require("opal-jspdf");
  self.$require("harpnotes");
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Harpnotes');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'PDFEngine');

      var $nesting = [self].concat($parent_nesting), $PDFEngine_initialize$1, $PDFEngine_draw_in_segments$2, $PDFEngine_draw$4, $PDFEngine_draw_segment$5, $PDFEngine_draw_sheet$6, $PDFEngine_draw_annotation$8, $PDFEngine_draw_ellipse$10, $PDFEngine_draw_glyph$12, $PDFEngine_draw_the_dot$16, $PDFEngine_draw_the_barover$17, $PDFEngine_draw_flowline$18, $PDFEngine_draw_jumpline$19, $PDFEngine_draw_image$21, $PDFEngine_draw_path$22;

      self.$$prototype.pdf = nil;
      
      self.$include($$$($$($nesting, 'Harpnotes'), 'Drawing'));
      self.$attr_reader("pdf");
      Opal.const_set($nesting[0], 'PADDING', 4.0);
      Opal.const_set($nesting[0], 'JUMPLINE_INDENT', 10.0);
      Opal.const_set($nesting[0], 'JUMPLINE_INDENT', 10.0);
      Opal.const_set($nesting[0], 'DOTTED_SIZE', 0.5);
      Opal.const_set($nesting[0], 'COLORS', $hash2(["black", "white", "grey", "lightgrey", "darkgrey", "dimgrey"], {"black": [0, 0, 0], "white": [255, 255, 255], "grey": [128, 128, 128], "lightgrey": [211, 211, 211], "darkgrey": [169, 169, 169], "dimgrey": [105, 105, 105]}));
      
      Opal.def(self, '$initialize', $PDFEngine_initialize$1 = function $$initialize() {
        var self = this;

        return (self.pdf = $$($nesting, 'JsPDF').$new("l", "mm", "a3"))
      }, $PDFEngine_initialize$1.$$arity = 0);
      
      Opal.def(self, '$draw_in_segments', $PDFEngine_draw_in_segments$2 = function $$draw_in_segments(sheet) {
        var $a, $$3, self = this, delta = nil, $writer = nil, addpage = nil, pages = nil;
        if ($gvars.conf == null) $gvars.conf = nil;

        
        delta = $rb_times(-12.0, $gvars.conf['$[]']("layout.X_SPACING"));
        self.pdf = $$($nesting, 'JsPDF').$new("p", "mm", "a4");
        
        $writer = [sheet.$printer_config()['$[]']("a4_offset").$last()];
        $send(self.pdf, 'y_offset=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        addpage = false;
        pages = ($truthy($a = sheet.$printer_config()['$[]']("a4_pages")) ? $a : [0, 1, 2]);
        $send(pages, 'each', [], ($$3 = function(i){var self = $$3.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          self.$draw_segment($rb_plus($rb_plus(30, sheet.$printer_config()['$[]']("a4_offset").$first()), $rb_times(i, delta)), sheet, addpage);
          return (addpage = true);}, $$3.$$s = self, $$3.$$arity = 1, $$3));
        return self.pdf;
      }, $PDFEngine_draw_in_segments$2.$$arity = 1);
      
      Opal.def(self, '$draw', $PDFEngine_draw$4 = function $$draw(sheet) {
        var $a, $b, self = this;

        
        $b = sheet.$printer_config()['$[]']("a3_offset"), $a = Opal.to_ary($b), self.pdf['$x_offset='](($a[0] == null ? nil : $a[0])), self.pdf['$y_offset='](($a[1] == null ? nil : $a[1])), $b;
        return self.$draw_sheet(sheet);
      }, $PDFEngine_draw$4.$$arity = 1);
      
      Opal.def(self, '$draw_segment', $PDFEngine_draw_segment$5 = function $$draw_segment(x_offset, sheet, newpage) {
        var self = this, $writer = nil;

        
        
        if (newpage == null) {
          newpage = false;
        };
        
        $writer = [x_offset];
        $send(self.pdf, 'x_offset=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(newpage)) {
          self.pdf.$addPage()};
        return self.$draw_sheet(sheet);
      }, $PDFEngine_draw_segment$5.$$arity = -3);
      
      Opal.def(self, '$draw_sheet', $PDFEngine_draw_sheet$6 = function $$draw_sheet(sheet) {
        var $$7, self = this;

        
        if ($truthy(sheet.$printer_config()['$[]']("show_border"))) {
          
          self.pdf.$rect(1.0, 1.0, 418, 295, "S");
          self.pdf.$rect(0.0, 0.0, 420.0, 297.0, "S");};
        $send(sheet.$children(), 'each', [], ($$7 = function(child){var self = $$7.$$s || this, $writer = nil;
          if (self.pdf == null) self.pdf = nil;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (child == null) {
            child = nil;
          };
          
          $writer = [child.$line_width()];
          $send(self.pdf, 'line_width=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          if ($truthy(child['$is_a?']($$($nesting, 'Ellipse')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_ellipse(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$($nesting, 'FlowLine')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_flowline(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Glyph')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_glyph(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Path')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_path(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Annotation')))) {
            if ($truthy(child['$visible?']())) {
              return self.$draw_annotation(child)
            } else {
              return nil
            }
          } else if ($truthy(child['$is_a?']($$$($$$($$($nesting, 'Harpnotes'), 'Drawing'), 'Image')))) {
            return self.$draw_image(child)
          } else {
            
            $gvars.log.$error("" + "BUG: don't know how to draw " + (child.$class()) + " (" + ("./pdf_engine.rb".$force_encoding("US-ASCII")) + " " + (74) + ")");
            return nil;
          };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        return self.pdf;
      }, $PDFEngine_draw_sheet$6.$$arity = 1);
      self.$private();
      
      Opal.def(self, '$draw_annotation', $PDFEngine_draw_annotation$8 = function $$draw_annotation(root) {
        var $a, $$9, self = this, style = nil, mm_per_point = nil, $writer = nil, align = nil, text = nil;
        if ($gvars.conf == null) $gvars.conf = nil;

        
        style = ($truthy($a = $gvars.conf.$get("layout.FONT_STYLE_DEF")['$[]'](root.$style())) ? $a : $gvars.conf.$get("layout.FONT_STYLE_DEF")['$[]']("regular"));
        mm_per_point = $gvars.conf.$get("layout.MM_PER_POINT");
        
        $writer = [style['$[]']("text_color")];
        $send(self.pdf, 'text_color=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_times(style['$[]']("font_size"), 0.983)];
        $send(self.pdf, 'font_size=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [style['$[]']("font_style")];
        $send(self.pdf, 'font_style=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        align = ($truthy($a = root.$align()) ? $a : "left");
        text = $send(root.$text(), 'gsub', [/(\\?)(~)/], ($$9 = function(m){var self = $$9.$$s || this;

        
          
          if (m == null) {
            m = nil;
          };
          if (m['$[]'](0)['$==']("\\")) {
            return m['$[]'](1)
          } else {
            return " "
          };}, $$9.$$s = self, $$9.$$arity = 1, $$9));
        text = text.$split("\n");
        if ($truthy(text['$empty?']())) {
          text = [""]};
        return self.pdf.$text(root.$center().$first(), $rb_plus(root.$center().$last(), $rb_times(style['$[]']("font_size"), mm_per_point)), text, $hash2(["align"], {"align": align}));
      }, $PDFEngine_draw_annotation$8.$$arity = 1);
      
      Opal.def(self, '$draw_ellipse', $PDFEngine_draw_ellipse$10 = function $$draw_ellipse(root) {
        var $$11, self = this, color = nil, style = nil, size = nil, $writer = nil;

        
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        style = (function() {if ($truthy(root['$filled?']())) {
          return "F"
        } else {
          return "FD"
        }; return nil; })();
        size = root.$size();
        
        $writer = [0];
        $send(self.pdf, 'line_width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [color];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [(function() {if ($truthy(root['$filled?']())) {
          return color
        } else {
          return $$($nesting, 'COLORS')['$[]']("white")
        }; return nil; })()];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(root['$rect?']())) {
          self.pdf.$rect_like_ellipse(root.$center(), size, style)
        } else {
          self.pdf.$ellipse(root.$center(), size, style)
        };
        if (root.$fill()['$==']("filled")) {
        } else {
          
          
          $writer = [root.$line_width()];
          $send(self.pdf, 'line_width=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          size = $send(size, 'map', [], ($$11 = function(s){var self = $$11.$$s || this;

          
            
            if (s == null) {
              s = nil;
            };
            return $rb_minus(s, $rb_divide(root.$line_width(), 2));}, $$11.$$s = self, $$11.$$arity = 1, $$11));
          if ($truthy(root['$rect?']())) {
            self.pdf.$rect_like_ellipse(root.$center(), size, style)
          } else {
            self.pdf.$ellipse(root.$center(), size, style)
          };
        };
        if ($truthy(root['$dotted?']())) {
          self.$draw_the_dot(root)};
        if ($truthy(root.$hasbarover())) {
          self.$draw_the_barover(root)};
        
        $writer = [$$($nesting, 'COLORS')['$[]']("black")];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$$($nesting, 'COLORS')['$[]']("black")];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $PDFEngine_draw_ellipse$10.$$arity = 1);
      
      Opal.def(self, '$draw_glyph', $PDFEngine_draw_glyph$12 = function $$draw_glyph(root) {
        var $$13, $$14, $$15, self = this, style = nil, $writer = nil, center = nil, size = nil, scalefactor = nil, boundingbox = nil, glyph_size = nil, color = nil, scale = nil, lines = nil, start = nil;

        
        style = root['$filled?']("FD", "FD");
        
        $writer = [$send($range(0, 3, true), 'map', [], ($$13 = function(){var self = $$13.$$s || this;

        if ($truthy(root['$filled?']())) {
            return 0
          } else {
            return 128
          }}, $$13.$$s = self, $$13.$$arity = 0, $$13))];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        center = [$rb_minus(root.$center().$first(), root.$size().$first()), $rb_minus(root.$center().$last(), root.$size().$last())];
        center = [root.$center().$first(), root.$center().$last()];
        size = [$rb_times(root.$size().$first(), 2), $rb_times(root.$size().$last(), 2)];
        scalefactor = $rb_divide(size.$last(), root.$glyph()['$[]']("h"));
        boundingbox = [root.$glyph()['$[]']("w"), root.$glyph()['$[]']("h")];
        glyph_size = $send([root.$glyph()['$[]']("w"), root.$glyph()['$[]']("h")], 'map', [], ($$14 = function(e){var self = $$14.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return $rb_times($rb_divide(e, 2), scalefactor);}, $$14.$$s = self, $$14.$$arity = 1, $$14));
        color = $$($nesting, 'COLORS')['$[]']("white");
        
        $writer = [color];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [color];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pdf.$rect_like_ellipse(root.$center(), root.$size(), "FD");
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        
        $writer = [color];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [color];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        scale = [scalefactor, scalefactor];
        lines = [];
        start = [];
        
        $writer = [0.0001];
        $send(self.pdf, 'line_width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        $send(root.$glyph()['$[]']("d"), 'each', [], ($$15 = function(element){var self = $$15.$$s || this, $case = nil;
          if (self.pdf == null) self.pdf = nil;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (element == null) {
            element = nil;
          };
          return (function() {$case = element.$first();
          if ("M"['$===']($case)) {
          lines = [];
          start = [$rb_plus(center.$first(), $rb_times(element['$[]'](1), scale.$first())), $rb_plus(center.$last(), $rb_times(element['$[]'](2), scale.$last()))];
          if ($truthy(lines['$empty?']())) {
            return nil
          } else {
            return self.pdf.$lines(lines, start.$first(), start.$last(), scale, "FD", false)
          };}
          else if ("l"['$===']($case)) {return lines.$push(element['$[]']($range(1, -1, false)))}
          else if ("m"['$===']($case)) {return lines.$push(element['$[]']($range(1, -1, false)))}
          else if ("c"['$===']($case)) {return lines.$push(element['$[]']($range(1, -1, false)))}
          else if ("z"['$===']($case)) {
          if ($truthy(lines['$empty?']())) {
          } else {
            self.pdf.$lines(lines, start.$first(), start.$last(), scale, "FD", true)
          };
          return (lines = []);}
          else {return $gvars.log.$error("" + "BUG: unsupported Pdf Path command '" + (element.$first()) + "' in glyph (" + ("./pdf_engine.rb".$force_encoding("US-ASCII")) + " " + (195) + ")")}})();}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        
        $writer = [[0, 0, 0]];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(root['$dotted?']())) {
          self.$draw_the_dot(root)};
        if ($truthy(root['$hasbarover?']())) {
          return self.$draw_the_barover(root)
        } else {
          return nil
        };
      }, $PDFEngine_draw_glyph$12.$$arity = 1);
      
      Opal.def(self, '$draw_the_dot', $PDFEngine_draw_the_dot$16 = function $$draw_the_dot(root) {
        var self = this, color = nil, ds1 = nil, ds2 = nil, x = nil, y = nil, $writer = nil;

        
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        ds1 = $rb_plus($$($nesting, 'DOTTED_SIZE'), root.$line_width());
        ds2 = $rb_plus($$($nesting, 'DOTTED_SIZE'), root.$line_width());
        x = $rb_plus(root.$center().$first(), $rb_plus(root.$size().$first(), ds1));
        y = root.$center().$last();
        
        $writer = [0];
        $send(self.pdf, 'line_width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [[255, 255, 255]];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [[255, 255, 255]];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pdf.$ellipse([x, y], [ds2, ds2], "FD");
        
        $writer = [color];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [color];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.pdf.$ellipse([x, y], [$$($nesting, 'DOTTED_SIZE'), $$($nesting, 'DOTTED_SIZE')], "FD");
      }, $PDFEngine_draw_the_dot$16.$$arity = 1);
      
      Opal.def(self, '$draw_the_barover', $PDFEngine_draw_the_barover$17 = function $$draw_the_barover(root) {
        var self = this, $writer = nil, new_center = nil, new_size = nil;

        
        
        $writer = [$$($nesting, 'COLORS')['$[]'](root.$color())];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        new_center = [root.$center().$first(), $rb_minus($rb_minus(root.$center().$last(), root.$size().$last()), $rb_times(1.3, root.$line_width()))];
        new_size = [root.$size().$first(), 0.2];
        return self.pdf.$rect_like_ellipse(new_center, new_size, "F");
      }, $PDFEngine_draw_the_barover$17.$$arity = 1);
      
      Opal.def(self, '$draw_flowline', $PDFEngine_draw_flowline$18 = function $$draw_flowline(root) {
        var self = this, color = nil, $writer = nil;

        
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        
        $writer = [color];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(root['$dashed?']())) {
          
          $writer = [$rb_divide(3, 2.84)];
          $send(self.pdf, 'line_dash=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if ($truthy(root['$dotted?']())) {
          
          $writer = [$rb_divide(1.5, 2.84)];
          $send(self.pdf, 'line_dash=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        self.pdf.$line(root.$from().$center(), root.$to().$center());
        return self.pdf.$use_solid_lines();
      }, $PDFEngine_draw_flowline$18.$$arity = 1);
      
      Opal.def(self, '$draw_jumpline', $PDFEngine_draw_jumpline$19 = function $$draw_jumpline(root) {
        var $$20, self = this, startpoint = nil, $writer = nil, endpoint = nil, distance = nil, depth = nil;

        
        startpoint = root.$from().$center().$clone();
        
        $writer = [0, $rb_plus(startpoint['$[]'](0), $$($nesting, 'PADDING'))];
        $send(startpoint, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, $rb_minus(startpoint['$[]'](1), $rb_divide($$($nesting, 'PADDING'), 4.0))];
        $send(startpoint, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        endpoint = root.$to().$center().$clone();
        
        $writer = [0, $rb_plus(endpoint['$[]'](0), $$($nesting, 'PADDING'))];
        $send(endpoint, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [1, $rb_plus(endpoint['$[]'](1), $rb_divide($$($nesting, 'PADDING'), 4.0))];
        $send(endpoint, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        distance = root.$distance();
        if ($truthy(distance['$nil?']())) {
          depth = $rb_minus(418.0, $rb_times(root.$level(), $$($nesting, 'JUMPLINE_INDENT')))
        } else {
          depth = $rb_plus(endpoint['$[]'](0), distance)
        };
        
        $writer = [$send($range(0, 3, true), 'map', [], ($$20 = function(){var self = $$20.$$s || this;

        return 0}, $$20.$$s = self, $$20.$$arity = 0, $$20))];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.pdf.$line(endpoint, [depth, endpoint['$[]'](1)]);
        self.pdf.$line([depth, endpoint['$[]'](1)], [depth, startpoint['$[]'](1)]);
        self.pdf.$line([depth, startpoint['$[]'](1)], startpoint);
        return self.pdf.$left_arrowhead(startpoint['$[]'](0), startpoint['$[]'](1));
      }, $PDFEngine_draw_jumpline$19.$$arity = 1);
      
      Opal.def(self, '$draw_image', $PDFEngine_draw_image$21 = function $$draw_image(root) {
        var self = this, position = nil, e = nil;

        
        position = $rb_plus($rb_plus(self.$Vector2d([0, 0]), root.$llpos()), [0, root.$height()]);
        e = self.pdf.$image(root.$url(), position.$x(), position.$y(), root.$height(), root.$opacity());
        return e;
      }, $PDFEngine_draw_image$21.$$arity = 1);
      return (Opal.def(self, '$draw_path', $PDFEngine_draw_path$22 = function $$draw_path(root) {
        var $$23, self = this, lines = nil, scale = nil, start = nil, style = nil, color = nil, $writer = nil;

        
        lines = [];
        scale = [1, 1];
        start = [];
        style = (function() {if ($truthy(root['$filled?']())) {
          return "FD"
        } else {
          return "S"
        }; return nil; })();
        color = $$($nesting, 'COLORS')['$[]'](root.$color());
        
        $writer = [(function() {if ($truthy(root['$filled?']())) {
          return color
        } else {
          return $$($nesting, 'COLORS')['$[]']("white")
        }; return nil; })()];
        $send(self.pdf, 'fill=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [color];
        $send(self.pdf, 'stroke=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = ["round"];
        $send(self.pdf, 'line_cap=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        $send(root.$path(), 'each', [], ($$23 = function(element){var self = $$23.$$s || this, $$24, $case = nil, new_start = nil;
          if (self.pdf == null) self.pdf = nil;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (element == null) {
            element = nil;
          };
          return (function() {$case = element.$first();
          if ("M"['$===']($case)) {
          if ($truthy(lines['$empty?']())) {
          } else {
            self.pdf.$lines(lines, start.$first(), start.$last(), scale, style, false)
          };
          lines = [];
          return (start = element['$[]']($range(1, 2, false)));}
          else if ("L"['$===']($case)) {
          new_start = $send([[start], lines].$flatten(1), 'inject', [[0, 0]], ($$24 = function(i, o){var self = $$24.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            
            if (o == null) {
              o = nil;
            };
            return [$rb_plus(o['$[]'](0), i['$[]'](-2)), $rb_plus(o['$[]'](1), i['$[]'](-1))];}, $$24.$$s = self, $$24.$$arity = 2, $$24));
          if ($truthy(lines['$empty?']())) {
          } else {
            self.pdf.$lines(lines, start.$first(), start.$last(), scale, style, false)
          };
          lines = [];
          start = new_start;
          return lines.$push([$rb_minus(element['$[]'](1), new_start.$first()), $rb_minus(element['$[]'](2), new_start.$last())]);}
          else if ("l"['$===']($case)) {return lines.$push(element['$[]']($range(1, -1, false)))}
          else if ("c"['$===']($case)) {return lines.$push(element['$[]']($range(1, -1, false)))}
          else if ("z"['$===']($case)) {
          if ($truthy(lines['$empty?']())) {
          } else {
            self.pdf.$lines(lines, start.$first(), start.$last(), scale, "FD", true)
          };
          return (lines = []);}
          else {return $gvars.log.$error("" + "BUG: unsupported command '" + (element.$first()) + "' in glyph (" + ("./pdf_engine.rb".$force_encoding("US-ASCII")) + " " + (328) + ")")}})();}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        if ($truthy(lines['$empty?']())) {
          return nil
        } else {
          return self.pdf.$lines(lines, start.$first(), start.$last(), scale, style, false)
        };
      }, $PDFEngine_draw_path$22.$$arity = 1), nil) && 'draw_path';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["init_conf"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars, $range = Opal.range;

  Opal.add_stubs(['$join', '$map', '$each_with_index', '$split', '$between?', '$lambda', '$[]', '$get', '$cut_string_names', '$year', '$now', '$t', '$to_a', '$first', '$+', '$last']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'InitConf');

    var $nesting = [self].concat($parent_nesting), $InitConf_cut_string_names$1, $InitConf_init_conf$3;

    
    Opal.defs(self, '$cut_string_names', $InitConf_cut_string_names$1 = function $$cut_string_names(stringnames, from, to) {
      var $$2, self = this;

      return $send(stringnames.$split(" ").$each_with_index(), 'map', [], ($$2 = function(v, index){var self = $$2.$$s || this;

      
        
        if (v == null) {
          v = nil;
        };
        
        if (index == null) {
          index = nil;
        };
        if ($truthy(index['$between?'](from, to))) {
          return v
        } else {
          return "~"
        };}, $$2.$$s = self, $$2.$$arity = 2, $$2)).$join(" ")
    }, $InitConf_cut_string_names$1.$$arity = 3);
    Opal.defs(self, '$init_conf', $InitConf_init_conf$3 = function $$init_conf() {
      var $$4, $$5, $$6, $$7, $$8, $$9, $$10, $$11, $$12, $$13, $$14, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $$22, $$23, $$24, $$25, $$26, $$27, $$28, $$29, $$30, $$31, $$32, $$33, $$34, $$35, self = this, explicit_sort = nil, result = nil;

      
      explicit_sort = ["produce", "annotations", "restposition", "default", "repeatstart", "repeatend", "extract", "title", "filenamepart", "startpos", "voices", "flowlines", "subflowlines", "synchlines", "jumplines", "repeatsigns", "layoutlines", "barnumbers", "countnotes", "legend", "nonflowrest", "lyrics", "notes", "images", "tuplets", "layout", "printer", "annotation", "decoration", "partname", "variantend", "countnote", "c_jumplines", "tuplet", "minc", "flowline", "imagename", "stringnames", "limit_a3", "LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "DRAWING_AREA_SIZE", "instrument", "bottomup", "beams", "packer", "pack_method", "pack_max_spreadfactor", "pack_min_increment", "sortmark", "show", "fill", "size", "PITCH_OFFSET", "X_OFFSET", "X_SPACING", "jumpline_anchor", "jumpline_vcut", "a3_offset", "a4_offset", "a4_pages", "T01_number", "T01_number_extract", "T02_copyright_music", "T03_copyright_harpnotes", "T04_to_order", "T05_printed_extracts", "T06_legend", "T99_do_not_copy", "0", "1", "2", "3", "4", "5", "6", "verses", "cp1", "cp2", "shape", "pos", "hpos", "height", "vpos", "spos", "autopos", "apbase", "text", "style", "marks", "resources", "d64", "d48", "d32", "d24", "d16", "d12", "d8", "d6", "d4", "d3", "d2", "d1"];
      result = $hash2(["produce", "abc_parser", "restposition", "template", "wrap", "defaults", "templates", "presets", "annotations", "extract", "layout", "neatjson"], {"produce": [0], "abc_parser": "ABC2SVG", "restposition": $hash2(["default", "repeatstart", "repeatend"], {"default": "center", "repeatstart": "next", "repeatend": "default"}), "template": $hash2(["filebase", "title"], {"filebase": "-no-template-", "title": "- no template -"}), "wrap": 60, "defaults": $hash2(["notebound"], {"notebound": $hash2(["annotation", "chord", "partname", "variantend", "tuplet", "flowline"], {"annotation": $hash2(["pos"], {"pos": [5, -7]}), "chord": $hash2(["pos"], {"pos": [0, 0]}), "partname": $hash2(["pos"], {"pos": [-4, -7]}), "variantend": $hash2(["pos"], {"pos": [-4, -7]}), "tuplet": $hash2(["cp1", "cp2", "shape", "show"], {"cp1": [5, 2], "cp2": [5, -2], "shape": ["c"], "show": true}), "flowline": $hash2(["cp1", "cp2", "shape", "show"], {"cp1": [0, 10], "cp2": [0, -10], "shape": ["c"], "show": true})})}), "templates": $hash2(["notes", "lyrics", "images", "tuplet", "annotations", "extracts"], {"notes": $hash2(["pos", "text", "style"], {"pos": [320, 6], "text": "ENTER_NOTE", "style": "large"}), "lyrics": $hash2(["verses", "pos", "style"], {"verses": [1], "pos": [350, 70], "style": "regular"}), "images": $hash2(["imagename", "show", "pos", "height"], {"imagename": "", "show": true, "pos": [10, 10], "height": 100}), "tuplet": $hash2(["cp1", "cp2", "shape", "show"], {"cp1": [5, 2], "cp2": [5, -2], "shape": ["c"], "show": true}), "annotations": $hash2(["text", "pos"], {"text": "_vorlage_", "pos": [-5, -6]}), "extracts": $hash2(["title", "filenamepart", "notes"], {"title": "", "filenamepart": "-", "notes": $hash2(["T01_number_extract"], {"T01_number_extract": $hash2(["text"], {"text": "{{extract_filename}}"})})})}), "presets": $hash2(["barnumbers_countnotes", "stdextract", "layout", "instrument", "notes", "printer"], {"barnumbers_countnotes": $hash2(["anchor_at_box", "anchor_at_center", "countnotes_with_lyrics"], {"anchor_at_box": $hash2(["barnumbers", "countnotes"], {"barnumbers": $hash2(["apanchor", "apbase"], {"apanchor": "box", "apbase": [1, 1]}), "countnotes": $hash2(["apanchor", "apbase"], {"apanchor": "box", "apbase": [1, -0.5]})}), "anchor_at_center": $hash2(["barnumbers", "countnotes"], {"barnumbers": $hash2(["apanchor", "apbase"], {"apanchor": "center", "apbase": [1, 0.3]}), "countnotes": $hash2(["apanchor", "apbase"], {"apanchor": "center", "apbase": [1, 0]})}), "countnotes_with_lyrics": $hash2(["countnotes"], {"countnotes": $hash2(["cntextleft", "cntextright"], {"cntextleft": "{lyrics} {countnote}", "cntextright": "{countnote} {lyrics}"})})}), "stdextract": $hash2([], {}), "layout": $hash2(["notes_small", "notes_regular", "notes_large", "notes_with_beams", "-", "packer_compact", "packer_regular", "--", "color_on", "color_off", "---", "jumpline_anchor_close", "jumpline_anchor_medium", "jumpline_anchor_wide", "jumpline_open", "jumpline_close"], {"notes_small": $hash2(["LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "beams"], {"LINE_MEDIUM": 0.2, "LINE_THICK": 0.3, "ELLIPSE_SIZE": [3.5, 1.3], "REST_SIZE": [4, 1.5], "beams": false}), "notes_regular": $hash2(["LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "beams"], {"LINE_MEDIUM": $send(self, 'lambda', [], ($$4 = function(){var self = $$4.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.LINE_MEDIUM")}, $$4.$$s = self, $$4.$$arity = 0, $$4)), "LINE_THICK": $send(self, 'lambda', [], ($$5 = function(){var self = $$5.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.LINE_THICK")}, $$5.$$s = self, $$5.$$arity = 0, $$5)), "ELLIPSE_SIZE": $send(self, 'lambda', [], ($$6 = function(){var self = $$6.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.ELLIPSE_SIZE")}, $$6.$$s = self, $$6.$$arity = 0, $$6)), "REST_SIZE": $send(self, 'lambda', [], ($$7 = function(){var self = $$7.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.REST_SIZE")}, $$7.$$s = self, $$7.$$arity = 0, $$7)), "beams": false}), "notes_large": $hash2(["LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "beams"], {"LINE_MEDIUM": 0.3, "LINE_THICK": 0.7, "ELLIPSE_SIZE": [4, 2], "REST_SIZE": [4, 2], "beams": false}), "notes_with_beams": $hash2(["LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "beams"], {"LINE_THIN": 0.1, "LINE_MEDIUM": 0.2, "LINE_THICK": 0.5, "ELLIPSE_SIZE": [1.3, 1], "REST_SIZE": [2, 1.3], "beams": true}), "-": $hash2([], {}), "packer_compact": $hash2(["packer"], {"packer": $hash2(["pack_method", "pack_max_spreadfactor", "pack_min_increment"], {"pack_method": 1, "pack_max_spreadfactor": 2, "pack_min_increment": 0.2})}), "packer_regular": $hash2(["packer"], {"packer": $send(self, 'lambda', [], ($$8 = function(){var self = $$8.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf.$get("extract.0.layout.packer")}, $$8.$$s = self, $$8.$$arity = 0, $$8))}), "--": $hash2([], {}), "color_on": $hash2(["color"], {"color": $hash2(["color_default", "color_variant1", "color_variant2"], {"color_default": "black", "color_variant1": "grey", "color_variant2": "darkgrey"})}), "color_off": $hash2(["color"], {"color": $hash2(["color_default", "color_variant1", "color_variant2"], {"color_default": "black", "color_variant1": "black", "color_variant2": "black"})}), "---": $hash2([], {}), "jumpline_anchor_close": $hash2(["jumpline_anchor"], {"jumpline_anchor": [3, 1]}), "jumpline_anchor_medium": $hash2(["jumpline_anchor"], {"jumpline_anchor": [5, 1]}), "jumpline_anchor_wide": $hash2(["jumpline_anchor"], {"jumpline_anchor": [10, 1]}), "jumpline_open": $hash2(["jumpline_vcut"], {"jumpline_vcut": 3}), "jumpline_close": $hash2(["jumpline_vcut"], {"jumpline_vcut": 0})}), "instrument": $hash2(["37-strings-g-g", "25-strings-g-g", "25-strings-G-g Bass", "21-strings-a-f", "18-strings-b-e", "saitenspiel", "Zipino", "Okon-Harfe", "Akkordzither"], {"37-strings-g-g": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "limit_a3", "beams", "bottomup", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "37-strings-g-g", "limit_a3": true, "beams": false, "bottomup": false, "PITCH_OFFSET": $send(self, 'lambda', [], ($$9 = function(){var self = $$9.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.PITCH_OFFSET")}, $$9.$$s = self, $$9.$$arity = 0, $$9)), "X_SPACING": $send(self, 'lambda', [], ($$10 = function(){var self = $$10.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_SPACING")}, $$10.$$s = self, $$10.$$arity = 0, $$10)), "X_OFFSET": $send(self, 'lambda', [], ($$11 = function(){var self = $$11.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_OFFSET")}, $$11.$$s = self, $$11.$$arity = 0, $$11))}), "stringnames": $hash2(["text", "marks"], {"text": $send(self, 'lambda', [], ($$12 = function(){var self = $$12.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.stringnames.text")}, $$12.$$s = self, $$12.$$arity = 0, $$12)), "marks": $hash2(["hpos"], {"hpos": [43, 79]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a4_offset", "a3_offset"], {"a4_pages": [0, 1, 2], "a4_offset": $send(self, 'lambda', [], ($$13 = function(){var self = $$13.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.printer.a4_offset")}, $$13.$$s = self, $$13.$$arity = 0, $$13)), "a3_offset": $send(self, 'lambda', [], ($$14 = function(){var self = $$14.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.printer.a3_offset")}, $$14.$$s = self, $$14.$$arity = 0, $$14))})}), "25-strings-g-g": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "limit_a3", "beams", "bottomup", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "25-strings-g-g", "limit_a3": false, "beams": false, "bottomup": false, "PITCH_OFFSET": $send(self, 'lambda', [], ($$15 = function(){var self = $$15.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.PITCH_OFFSET")}, $$15.$$s = self, $$15.$$arity = 0, $$15)), "X_SPACING": $send(self, 'lambda', [], ($$16 = function(){var self = $$16.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_SPACING")}, $$16.$$s = self, $$16.$$arity = 0, $$16)), "X_OFFSET": $send(self, 'lambda', [], ($$17 = function(){var self = $$17.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_OFFSET")}, $$17.$$s = self, $$17.$$arity = 0, $$17))}), "stringnames": $hash2(["text", "marks"], {"text": $send(self, 'lambda', [], ($$18 = function(){var self = $$18.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return self.$cut_string_names($gvars.conf['$[]']("extract.0.stringnames.text"), 12, 36)}, $$18.$$s = self, $$18.$$arity = 0, $$18)), "marks": $hash2(["hpos"], {"hpos": [55, 79]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [1, 2], "a3_offset": [-5, 0], "a4_offset": $send(self, 'lambda', [], ($$19 = function(){var self = $$19.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.printer.a4_offset")}, $$19.$$s = self, $$19.$$arity = 0, $$19))})}), "25-strings-G-g Bass": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "limit_a3", "beams", "bottomup", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "25-strings-g-g", "limit_a3": false, "beams": false, "bottomup": false, "PITCH_OFFSET": $send(self, 'lambda', [], ($$20 = function(){var self = $$20.$$s || this;

      return -31}, $$20.$$s = self, $$20.$$arity = 0, $$20)), "X_SPACING": $send(self, 'lambda', [], ($$21 = function(){var self = $$21.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_SPACING")}, $$21.$$s = self, $$21.$$arity = 0, $$21)), "X_OFFSET": $send(self, 'lambda', [], ($$22 = function(){var self = $$22.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_OFFSET")}, $$22.$$s = self, $$22.$$arity = 0, $$22))}), "stringnames": $hash2(["text", "marks"], {"text": $send(self, 'lambda', [], ($$23 = function(){var self = $$23.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return self.$cut_string_names($gvars.conf['$[]']("extract.0.stringnames.text"), 12, 36)}, $$23.$$s = self, $$23.$$arity = 0, $$23)), "marks": $hash2(["hpos"], {"hpos": [43, 67]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [1, 2], "a3_offset": [-5, 0], "a4_offset": $send(self, 'lambda', [], ($$24 = function(){var self = $$24.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.printer.a4_offset")}, $$24.$$s = self, $$24.$$arity = 0, $$24))})}), "21-strings-a-f": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "limit_a3", "beams", "bottomup", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "21-strings-a-f", "limit_a3": false, "beams": false, "bottomup": false, "PITCH_OFFSET": $send(self, 'lambda', [], ($$25 = function(){var self = $$25.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.PITCH_OFFSET")}, $$25.$$s = self, $$25.$$arity = 0, $$25)), "X_SPACING": $send(self, 'lambda', [], ($$26 = function(){var self = $$26.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_SPACING")}, $$26.$$s = self, $$26.$$arity = 0, $$26)), "X_OFFSET": 23}), "stringnames": $hash2(["text", "marks"], {"text": $send(self, 'lambda', [], ($$27 = function(){var self = $$27.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return self.$cut_string_names($gvars.conf['$[]']("extract.0.stringnames.text"), 14, 34)}, $$27.$$s = self, $$27.$$arity = 0, $$27)), "marks": $hash2(["hpos"], {"hpos": [57, 77]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [1, 2], "a3_offset": [-5, 0], "a4_offset": $send(self, 'lambda', [], ($$28 = function(){var self = $$28.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.printer.a4_offset")}, $$28.$$s = self, $$28.$$arity = 0, $$28))})}), "18-strings-b-e": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "limit_a3", "beams", "bottomup", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "18-strings-b-e", "limit_a3": false, "beams": false, "bottomup": false, "PITCH_OFFSET": $send(self, 'lambda', [], ($$29 = function(){var self = $$29.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.PITCH_OFFSET")}, $$29.$$s = self, $$29.$$arity = 0, $$29)), "X_SPACING": $send(self, 'lambda', [], ($$30 = function(){var self = $$30.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("extract.0.layout.X_SPACING")}, $$30.$$s = self, $$30.$$arity = 0, $$30)), "X_OFFSET": 28.5}), "stringnames": $hash2(["text", "marks"], {"text": $send(self, 'lambda', [], ($$31 = function(){var self = $$31.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return self.$cut_string_names($gvars.conf['$[]']("extract.0.stringnames.text"), 16, 33)}, $$31.$$s = self, $$31.$$arity = 0, $$31)), "marks": $hash2(["hpos"], {"hpos": [59, 76]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [2], "a3_offset": [0, 0], "a4_offset": [40, 0]})}), "saitenspiel": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "limit_a3", "beams", "bottomup", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "saitenspiel", "limit_a3": false, "beams": false, "bottomup": false, "PITCH_OFFSET": -24, "X_SPACING": 14.5, "X_OFFSET": 240}), "stringnames": $hash2(["text", "marks"], {"text": "G C D E F G A B C D  ~ ~ ~ ~ ~ ~ ~", "marks": $hash2(["hpos"], {"hpos": [55, 74]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [2], "a3_offset": [0, 0], "a4_offset": [35, 0]})}), "Zipino": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "limit_a3", "beams", "bottomup", "PITCH_OFFSET", "X_SPACING", "X_OFFSET", "ELLIPSE_SIZE", "REST_SIZE"], {"instrument": "Zipino", "limit_a3": true, "beams": true, "bottomup": false, "PITCH_OFFSET": 0, "X_SPACING": 12.5, "X_OFFSET": 230, "ELLIPSE_SIZE": [2, 2], "REST_SIZE": [2, 2]}), "stringnames": $hash2(["text", "marks"], {"text": "F# G A B C D E F# G A B C D E F# ~ ~ ~ ~ ~ ~  ~", "marks": $hash2(["hpos"], {"hpos": [54]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [2], "a3_offset": [0, 0], "a4_offset": [35, 0]})}), "Okon-Harfe": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "beams", "bottomup", "limit_a3", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "okon-f", "beams": true, "bottomup": true, "limit_a3": false, "PITCH_OFFSET": 0, "X_SPACING": 15, "X_OFFSET": 50}), "stringnames": $hash2(["text", "marks"], {"text": "G, A, BB, C D E F G A BB c d e f g a bb c' ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~", "marks": $hash2(["hpos"], {"hpos": [55, 74]})}), "instrument_shape": nil, "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [1, 2], "a3_offset": [-35, 0], "a4_offset": [70, 0]})}), "Akkordzither": $hash2(["layout", "stringnames", "instrument_shape", "printer"], {"layout": $hash2(["instrument", "tuning", "beams", "bottomup", "limit_a3", "PITCH_OFFSET", "X_SPACING", "X_OFFSET"], {"instrument": "akkordzither", "tuning": "open", "beams": true, "bottomup": false, "limit_a3": false, "PITCH_OFFSET": 0, "X_SPACING": 8.9, "X_OFFSET": 140}), "stringnames": $hash2(["text", "marks"], {"text": "C C# D E F F# G G# A B C' C# D' E' F' F#' G' G#' A' B' C''  ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ", "marks": $hash2(["hpos"], {"hpos": [60]})}), "instrument_shape": "[[\"M\", 228, 0], [\"L\",  335, 185], [\"L\", 335,297]]", "printer": $hash2(["a4_pages", "a3_offset", "a4_offset"], {"a4_pages": [1, 2, 3], "a3_offset": [0, 0], "a4_offset": [108, 0]})})}), "notes": $hash2(["T01_number", "T01_number_extract", "T01_number_extract_value", "T02_copyright_music", "T03_copyright_harpnotes", "T04_to_order", "T05_printed_extracts", "T06_legend", "T99_do_not_copy", "T01_T99"], {"T01_number": $hash2(["value"], {"value": $hash2(["pos", "text", "style", "align"], {"pos": [410, 17], "text": "XXX-{{number}}", "style": "bold", "align": "l"})}), "T01_number_extract": $hash2(["value"], {"value": $hash2(["pos", "text", "style"], {"pos": [411, 17], "text": "{{extract_filename}}", "style": "bold"})}), "T01_number_extract_value": $hash2(["key", "value"], {"key": "T01_number_extract", "value": $hash2(["text"], {"text": "{{extract_filename}}"})}), "T02_copyright_music": $hash2(["value"], {"value": $hash2(["pos", "text", "style"], {"pos": [340, 251], "text": $send(self, 'lambda', [], ($$32 = function(){var self = $$32.$$s || this;

      return "" + "© " + ($$($nesting, 'Time').$now().$year()) + "\n" + ($$($nesting, 'I18n').$t("Private copy"))}, $$32.$$s = self, $$32.$$arity = 0, $$32)), "style": "small"})}), "T03_copyright_harpnotes": $hash2(["value"], {"value": $hash2(["pos", "text", "style"], {"pos": [340, 260], "text": "" + "© " + ($$($nesting, 'Time').$now().$year()) + " Notenbild: zupfnoter.de", "style": "small"})}), "T04_to_order": $hash2(["value"], {"value": $hash2(["pos", "text", "style"], {"pos": [340, 242], "text": $send(self, 'lambda', [], ($$33 = function(){var self = $$33.$$s || this;

      return $$($nesting, 'I18n').$t("provided by\n")}, $$33.$$s = self, $$33.$$arity = 0, $$33)), "style": "small"})}), "T05_printed_extracts": $hash2(["value"], {"value": $hash2(["pos", "text", "style", "align"], {"pos": [410, 22], "text": "{{printed_extracts}}", "style": "smaller", "align": "l"})}), "T06_legend": $hash2(["value"], {"value": $hash2(["pos", "text", "style"], {"pos": [360, 30], "text": "{{extract_title}}\n{{composer}}\nTakt: {{meter}} ({{tempo}})\nTonart: {{key}}", "style": "small"})}), "T99_do_not_copy": $hash2(["value"], {"value": $hash2(["pos", "text", "style"], {"pos": [380, 284], "text": $send(self, 'lambda', [], ($$34 = function(){var self = $$34.$$s || this;

      return $$($nesting, 'I18n').$t("Please do not copy")}, $$34.$$s = self, $$34.$$arity = 0, $$34)), "style": "small_bold"})}), "T01_T99": $hash2(["value"], {"value": $hash2([], {})})}), "printer": $hash2(["printer_left", "printer_centric", "printer_right"], {"printer_left": $hash2(["printer", "layout"], {"printer": $hash2(["a3_offset", "a4_offset", "show_border"], {"a3_offset": [-10, 0], "a4_offset": [-5, 0], "show_border": false}), "layout": $hash2(["limit_a3"], {"limit_a3": false})}), "printer_centric": $hash2(["printer", "layout"], {"printer": $hash2(["a3_offset", "a4_offset", "show_border"], {"a3_offset": [0, 0], "a4_offset": [5, 0], "show_border": false}), "layout": $hash2(["limit_a3"], {"limit_a3": true})}), "printer_right": $hash2(["printer", "layout"], {"printer": $hash2(["a3_offset", "a4_offset", "show_border"], {"a3_offset": [10, 0], "a4_offset": [5, 0], "show_border": false}), "layout": $hash2(["limit_a3"], {"limit_a3": false})})})}), "annotations": $hash2(["vl", "vt", "vr"], {"vl": $hash2(["text", "pos"], {"text": "v", "pos": [-5, -5]}), "vt": $hash2(["text", "pos"], {"text": "v", "pos": [-1, -5]}), "vr": $hash2(["text", "pos"], {"text": "v", "pos": [2, -5]})}), "extract": $hash2(["0", "1", "2", "3", "4", "5"], {"0": $hash2(["title", "startpos", "voices", "synchlines", "flowlines", "subflowlines", "jumplines", "repeatsigns", "layoutlines", "legend", "lyrics", "images", "layout", "sortmark", "nonflowrest", "notes", "tuplets", "barnumbers", "countnotes", "chords", "stringnames", "printer"], {"title": "alle Stimmen", "startpos": 15, "voices": [1, 2, 3, 4], "synchlines": [[1, 2], [3, 4]], "flowlines": [1, 3], "subflowlines": [2, 4], "jumplines": [1, 3], "repeatsigns": $hash2(["voices", "left", "right"], {"voices": [], "left": $hash2(["pos", "text", "style"], {"pos": [-7, -2], "text": "|:", "style": "bold"}), "right": $hash2(["pos", "text", "style"], {"pos": [5, -2], "text": ":|", "style": "bold"})}), "layoutlines": [1, 2, 3, 4], "legend": $hash2(["spos", "pos", "tstyle", "align", "style"], {"spos": [320, 27], "pos": [320, 7], "tstyle": "large", "align": "r", "style": "regular"}), "lyrics": $hash2([], {}), "images": $hash2([], {}), "layout": $hash2(["limit_a3", "bottomup", "beams", "jumpline_anchor", "color", "LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "PITCH_OFFSET", "X_SPACING", "X_OFFSET", "ELLIPSE_SIZE", "REST_SIZE", "DRAWING_AREA_SIZE", "instrument", "tuning", "packer"], {"limit_a3": true, "bottomup": false, "beams": false, "jumpline_anchor": [3, 1], "color": $hash2(["color_default", "color_variant1", "color_variant2"], {"color_default": "black", "color_variant1": "grey", "color_variant2": "dimgrey"}), "LINE_THIN": 0.1, "LINE_MEDIUM": 0.3, "LINE_THICK": 0.5, "PITCH_OFFSET": -43, "X_SPACING": 11.5, "X_OFFSET": 2.8, "ELLIPSE_SIZE": [3.5, 1.7], "REST_SIZE": [4, 2], "DRAWING_AREA_SIZE": [400, 282], "instrument": "37-strings-g-g", "tuning": "fixed", "packer": $hash2(["pack_method", "pack_max_spreadfactor", "pack_min_increment"], {"pack_method": 0, "pack_max_spreadfactor": 2, "pack_min_increment": 0.2})}), "sortmark": $hash2(["size", "fill", "show"], {"size": [2, 4], "fill": true, "show": false}), "nonflowrest": false, "notes": $hash2([], {}), "tuplets": $hash2(["text"], {"text": "{{tuplet}}"}), "barnumbers": $hash2(["voices", "pos", "autopos", "apanchor", "apbase", "style", "prefix"], {"voices": [], "pos": [6, -4], "autopos": true, "apanchor": "box", "apbase": [1, 1], "style": "small_bold", "prefix": ""}), "countnotes": $hash2(["voices", "pos", "autopos", "apbase", "apanchor", "style"], {"voices": [], "pos": [3, -2], "autopos": true, "apbase": [1, -0.5], "apanchor": "box", "style": "smaller"}), "chords": $hash2(["voices", "pos", "autopos", "apbase", "apanchor", "style"], {"voices": [], "pos": [3, -2], "autopos": true, "apbase": [1, -0.5], "apanchor": "box", "style": "large"}), "stringnames": $hash2(["text", "vpos", "style", "marks"], {"text": "G G# A A# B C C# D D# E F F# G G# A A# B C C# D D# E F F# G G# A A# B C C# D D# E F F# G", "vpos": [], "style": "small", "marks": $hash2(["vpos", "hpos"], {"vpos": [11], "hpos": [43, 55, 79]})}), "printer": $hash2(["a3_offset", "a4_offset", "a4_pages", "show_border"], {"a3_offset": [0, 0], "a4_offset": [-5, 0], "a4_pages": [0, 1, 2], "show_border": false})}), "1": $hash2(["title", "voices"], {"title": "Sopran, Alt", "voices": [1, 2]}), "2": $hash2(["title", "voices"], {"title": "Tenor, Bass", "voices": [3, 4]}), "3": $hash2(["title", "voices"], {"title": "Melodie", "voices": [1]}), "4": $hash2(["title", "voices"], {"title": "Extract 4", "voices": [1]}), "5": $hash2(["title", "voices"], {"title": "Extract 5", "voices": [1]})}), "layout": $hash2(["grid", "limit_a3", "SHOW_SLUR", "LINE_THIN", "LINE_MEDIUM", "LINE_THICK", "ELLIPSE_SIZE", "REST_SIZE", "X_SPACING", "X_OFFSET", "Y_SCALE", "DRAWING_AREA_SIZE", "BEAT_RESOLUTION", "SHORTEST_NOTE", "BEAT_PER_DURATION", "PITCH_OFFSET", "FONT_STYLE_DEF", "MM_PER_POINT", "DURATION_TO_STYLE", "DURATION_TO_BEAMS", "REST_TO_GLYPH"], {"grid": false, "limit_a3": true, "SHOW_SLUR": false, "LINE_THIN": 0.1, "LINE_MEDIUM": 0.3, "LINE_THICK": 0.5, "ELLIPSE_SIZE": [3.5, 1.7], "REST_SIZE": [4, 2], "X_SPACING": 11.5, "X_OFFSET": 2.8, "Y_SCALE": 4, "DRAWING_AREA_SIZE": [400, 282], "BEAT_RESOLUTION": 192, "SHORTEST_NOTE": 64, "BEAT_PER_DURATION": 3, "PITCH_OFFSET": -43, "FONT_STYLE_DEF": $hash2(["bold", "italic", "large", "regular", "small_bold", "small_italic", "small", "smaller"], {"bold": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 12, "font_style": "bold"}), "italic": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 12, "font_style": "italic"}), "large": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 20, "font_style": "bold"}), "regular": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 12, "font_style": "normal"}), "small_bold": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 9, "font_style": "bold"}), "small_italic": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 9, "font_style": "italic"}), "small": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 9, "font_style": "normal"}), "smaller": $hash2(["text_color", "font_size", "font_style"], {"text_color": [0, 0, 0], "font_size": 6, "font_style": "normal"})}), "MM_PER_POINT": 0.3, "DURATION_TO_STYLE": $hash2(["err", "d64", "d48", "d32", "d24", "d16", "d12", "d8", "d6", "d4", "d3", "d2", "d1"], {"err": [2, "filled", false], "d64": [1, "empty", false], "d48": [0.75, "empty", true], "d32": [0.75, "empty", false], "d24": [0.75, "filled", true], "d16": [0.75, "filled", false], "d12": [0.5, "filled", true], "d8": [0.5, "filled", false], "d6": [0.3, "filled", true], "d4": [0.3, "filled", false], "d3": [0.1, "filled", true], "d2": [0.1, "filled", false], "d1": [0.05, "filled", false]}), "DURATION_TO_BEAMS": $hash2(["d64", "d48", "d32", "d24", "d16", "d12", "d8", "d6", "d4", "d3", "d2", "d1"], {"d64": [1, "empty", false], "d48": [1, "empty", true, 0], "d32": [1, "empty", false, 0], "d24": [1, "filled", true, 0], "d16": [1, "filled", false, 0], "d12": [1, "filled", true, 1], "d8": [1, "filled", false, 1], "d6": [1, "filled", true, 2], "d4": [1, "filled", false, 2], "d3": [1, "filled", true, 3], "d2": [1, "filled", false, 3], "d1": [1, "filled", false, 4]}), "REST_TO_GLYPH": $hash2(["err", "d64", "d48", "d32", "d24", "d16", "d12", "d8", "d6", "d4", "d3", "d2", "d1"], {"err": [[2, 2], "rest_1", false], "d64": [[1, 0.8], "rest_1", false], "d48": [[0.5, 0.4], "rest_1", true], "d32": [[0.5, 0.4], "rest_1", false], "d24": [[0.4, 0.75], "rest_4", true], "d16": [[0.4, 0.75], "rest_4", false], "d12": [[0.4, 0.5], "rest_8", true], "d8": [[0.4, 0.5], "rest_8", false], "d6": [[0.4, 0.3], "rest_16", true], "d4": [[0.3, 0.3], "rest_16", false], "d3": [[0.3, 0.5], "rest_32", true], "d2": [[0.3, 0.5], "rest_32", false], "d1": [[0.3, 0.5], "rest_64", false]})}), "neatjson": $hash2(["wrap", "aligned", "after_comma", "after_colon_1", "after_colon_n", "before_colon_n", "short", "afterComma", "afterColon1", "afterColonN", "beforeColonN", "decimals", "explicit_sort"], {"wrap": 60, "aligned": true, "after_comma": 1, "after_colon_1": 1, "after_colon_n": 1, "before_colon_n": 1, "short": false, "afterComma": 1, "afterColon1": 1, "afterColonN": 1, "beforeColonN": 1, "decimals": 2, "explicit_sort": $$($nesting, 'Hash')['$[]']($send(explicit_sort.$each_with_index().$to_a(), 'map', [], ($$35 = function(i){var self = $$35.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return [i.$first(), $rb_plus("_", (("" + "000") + (i.$last()))['$[]']($range(-4, -1, false)))];}, $$35.$$s = self, $$35.$$arity = 1, $$35)))})});
      return result;
    }, $InitConf_init_conf$3.$$arity = 0);
  })($nesting[0], $nesting);
  Opal.const_set($nesting[0], 'DBX_APIKEY_FULL', "zwydv2vbgp30e05");
  Opal.const_set($nesting[0], 'DBX_APIKEY_APP', "xr3zna7wrp75zax");
  return Opal.const_set($nesting[0], 'CONFIG_SEPARATOR', "%%%%zupfnoter.config");
};

/* Generated by Opal 1.0.0 */
Opal.modules["text_pane"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$reset', '$push', '$[]', '$pop', '$empty?', '$reverse', '$flatten', '$lambda', '$new', '$_clean_models', '$create_lyrics_editor', '$from_lyrics', '$on', '$Native', '$getSession', '$save_to_localstorage', '$clear_markers', '$call', '$niil', '$scan', '$+', '$===', '$join', '$editor', '$raise', '$t', '$gsub', '$_get_unison_edit_replacement', '$last_match', '$get_selection_positions', '$min', '$first', '$max', '$last', '$strip', '$_get_abc_from_editor', '$_get_config_json', '$_has_resources?', '$_get_resources_json', '$_split_parts', '$map', '$-', '$set_markers', '$to_n', '$each', '$add_marker', '$split', '$<<', '$clear', '$_get_config_model', '$to_s', '$[]=', '$==', '$do', '$_set_config_model', '$get', '$set_config_model', '$_set_config_json', '$token', '$get_selection_info', '$type', '$replace_range', '$startpos', '$endpos', '$start_with?', '$delete', '$deep_dup', '$get_lyrics_raw', '$>', '$count', '$get_abc_part', '$error', '$clear_errors', '$get_lyrics', '$replace_text', '$call_consumers', '$nil?', '$_set_abc_to_editor', '$_set_resources_json', '$set_text', '$select', '$parse', '$clean_localstorage', '$each_with_index', '$benchmark', '$neat_generate', '$undo', '$info', '$dig', '$redo', '$undo_history', '$redo_history', '$!']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Harpnotes');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TextPane');

      var $nesting = [self].concat($parent_nesting), $TextPane_initialize$8, $TextPane_create_lyrics_editor$10, $TextPane_on_change$11, $TextPane_on_selection_change$13, $TextPane_on_cursor_change$15, $TextPane_clear_selection$17, $TextPane__get_unison_edit_replacement$18, $TextPane_edit_unisons$19, $TextPane_get_selection_positions$21, $TextPane_get_selection_ranges$22, $TextPane_get_selection_info$23, $TextPane_select_range_by_position$24, $TextPane_set_focus$25, $TextPane_select_add_range_by_position$26, $TextPane_get_text$27, $TextPane_set_text$28, $TextPane_replace_range$29, $TextPane_replace_text$30, $TextPane_set_annotations$31, $TextPane_set_markers$33, $TextPane_prepend_comment$35, $TextPane_append_text$37, $TextPane_add_marker$38, $TextPane_clear_markers$39, $TextPane_get_abc_part$41, $TextPane_get_config_part$42, $TextPane_get_config_model$43, $TextPane_get_checksum$44, $TextPane_resize$45, $TextPane_set_config_model$46, $TextPane_patch_config_part$47, $TextPane_copy_config_part_to_extract$48, $TextPane_neat_config_part$49, $TextPane_patch_resources$50, $TextPane_patch_token$51, $TextPane_extend_config_part$52, $TextPane_delete_config_part$53, $TextPane_get_config_part_value$54, $TextPane_get_lyrics$55, $TextPane_get_lyrics_raw$57, $TextPane_to_lyrics$58, $TextPane_from_lyrics$59, $TextPane_restore_from_localstorage$61, $TextPane_save_to_localstorage$62, $TextPane_clean_localstorage$63, $TextPane_get_config_from_text$64, $TextPane__split_parts$66, $TextPane__set_abc_to_editor$68, $TextPane__get_abc_from_editor$69, $TextPane__set_config_json$70, $TextPane__get_config_json$71, $TextPane__get_config_model$73, $TextPane__set_config_model$74, $TextPane_undo_config$75, $TextPane_redo_config$76, $TextPane_history_config$77, $TextPane__set_resources_json$78, $TextPane__get_resources_json$79, $TextPane__has_resources$ques$80, $TextPane__clean_models$81;

      self.$$prototype.editor = self.$$prototype.range = self.$$prototype.config_separator = self.$$prototype.markers = self.$$prototype.config_models = self.$$prototype.dirty = self.$$prototype.config_undo = self.$$prototype.on_change = self.$$prototype.lyrics_editor = self.$$prototype.controller = self.$$prototype.handle_from_lyrics = nil;
      
      self.$attr_accessor("editor", "controller", "autofold");
      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'UndoManager');

        var $nesting = [self].concat($parent_nesting), $UndoManager_initialize$1, $UndoManager_reset$2, $UndoManager_do$3, $UndoManager_undo$4, $UndoManager_redo$5, $UndoManager_undo_history$6, $UndoManager_redo_history$7;

        self.$$prototype.undostack = self.$$prototype.currentstate = self.$$prototype.redostack = nil;
        
        
        Opal.def(self, '$initialize', $UndoManager_initialize$1 = function $$initialize() {
          var self = this;

          return self.$reset()
        }, $UndoManager_initialize$1.$$arity = 0);
        
        Opal.def(self, '$reset', $UndoManager_reset$2 = function $$reset() {
          var self = this;

          
          self.undostack = [];
          self.redostack = [];
          return (self.currentstate = $hash2(["title", "state"], {"title": "init state", "state": $hash2([], {})}));
        }, $UndoManager_reset$2.$$arity = 0);
        
        Opal.def(self, '$do', $UndoManager_do$3 = function(newstate, title) {
          var self = this;

          
          self.undostack.$push(self.currentstate);
          self.redostack = [];
          self.currentstate = $hash2(["title", "state"], {"title": title, "state": newstate});
          return self.currentstate;
        }, $UndoManager_do$3.$$arity = 2);
        
        Opal.def(self, '$undo', $UndoManager_undo$4 = function $$undo() {
          var self = this, momento = nil;

          if ($truthy(self.undostack['$[]'](1))) {
            
            momento = self.undostack.$pop();
            self.redostack.$push(self.currentstate);
            return (self.currentstate = momento);
          } else {
            return nil
          }
        }, $UndoManager_undo$4.$$arity = 0);
        
        Opal.def(self, '$redo', $UndoManager_redo$5 = function $$redo() {
          var self = this, momento = nil;

          if ($truthy(self.redostack['$empty?']())) {
            return nil
          } else {
            
            momento = self.redostack.$pop();
            self.undostack.$push(self.currentstate);
            return (self.currentstate = momento);
          }
        }, $UndoManager_redo$5.$$arity = 0);
        
        Opal.def(self, '$undo_history', $UndoManager_undo_history$6 = function $$undo_history() {
          var self = this;

          return [self.undostack, self.currentstate].$flatten().$reverse()
        }, $UndoManager_undo_history$6.$$arity = 0);
        return (Opal.def(self, '$redo_history', $UndoManager_redo_history$7 = function $$redo_history() {
          var self = this;

          return [self.redostack].$flatten().$reverse()
        }, $UndoManager_redo_history$7.$$arity = 0), nil) && 'redo_history';
      })($nesting[0], null, $nesting);
      
      Opal.def(self, '$initialize', $TextPane_initialize$8 = function $$initialize(div) {
        var $$9, self = this;

        
        
        // see http://stackoverflow.com/questions/13545433/autocompletion-in-ace-editor
        //     http://stackoverflow.com/questions/26991288/ace-editor-autocompletion-remove-local-variables
        var langTools = ace.require("ace/ext/language_tools");
        langTools.setCompleters([langTools.snippetCompleter])

        var editor = ace.edit(div);

        // clear shortcuts occupied by Zupfnoter
        editor.commands.bindKey("Cmd-L", null);
        editor.commands.bindKey("Ctrl-L", null);
        editor.commands.bindKey("Ctrl-P", null);
        editor.commands.bindKey("Ctrl-K", null);
        editor.$blockScrolling = Infinity;

        editor.getSession().setMode("ace/mode/abc");

        editor.setTheme("ace/theme/abc");

        editor.setOptions({
          highlightActiveLine: true,
          enableBasicAutocompletion: true,
          enableSnippets: true,
          enableLiveAutocompletion: false        });

        // todo: refine autocompletion according to http://plnkr.co/edit/6MVntVmXYUbjR0DI82Cr?p=preview
        //                                          https://github.com/ajaxorg/ace/wiki/How-to-enable-Autocomplete-in-the-Ace-editor

      ;
        self.editor = editor;
        self.range = ace.require('ace/range').Range;
        self.inhibit_callbacks = false;
        self.markers = [];
        self.autofold = true;
        self.on_change = $send(self, 'lambda', [], ($$9 = function(){var self = $$9.$$s || this;

        return nil}, $$9.$$s = self, $$9.$$arity = 0, $$9));
        self.config_separator = "%%%%zupfnoter";
        self.dirty = $hash2([], {});
        self.config_undo = $$($nesting, 'UndoManager').$new();
        self.$_clean_models();
        return self.$create_lyrics_editor("abcLyrics");
      }, $TextPane_initialize$8.$$arity = 1);
      
      Opal.def(self, '$create_lyrics_editor', $TextPane_create_lyrics_editor$10 = function $$create_lyrics_editor(div) {
        var self = this;

        
        
        // see http://stackoverflow.com/questions/13545433/autocompletion-in-ace-editor
        //     http://stackoverflow.com/questions/26991288/ace-editor-autocompletion-remove-local-variables
        var langTools = ace.require("ace/ext/language_tools");
        langTools.setCompleters([langTools.snippetCompleter])

        var editor = ace.edit(div);
        editor.$blockScrolling = Infinity;

        editor.getSession().setMode("ace/mode/markdown");

        editor.setTheme("ace/theme/abc");

        editor.setOptions({
          highlightActiveLine: true,
          enableBasicAutocompletion: true,
          enableSnippets: true,
          enableLiveAutocompletion: false        });

        // todo: refine autocompletion according to http://plnkr.co/edit/6MVntVmXYUbjR0DI82Cr?p=preview
        //                                          https://github.com/ajaxorg/ace/wiki/How-to-enable-Autocomplete-in-the-Ace-editor
        editor.on('change', function(){self.$from_lyrics()})
      ;
        self.lyrics_editor = editor;
        self.lyrics_range = ace.require('ace/range').Range;
        self.lyrics_inhibit_callbacks = false;
        return (self.lyrics_markers = []);
      }, $TextPane_create_lyrics_editor$10.$$arity = 1);
      
      Opal.def(self, '$on_change', $TextPane_on_change$11 = function $$on_change() {
        var $iter = $TextPane_on_change$11.$$p, block = $iter || nil, $$12, self = this;

        if ($iter) $TextPane_on_change$11.$$p = null;
        
        
        if ($iter) $TextPane_on_change$11.$$p = null;;
        self.on_change = block;
        return $send(self.$Native(self.$Native(self.editor).$getSession()), 'on', ["change"], ($$12 = function(e){var self = $$12.$$s || this;
          if (self.on_change == null) self.on_change = nil;

        
          
          if (e == null) {
            e = nil;
          };
          self.$save_to_localstorage("zn_abc");
          self.$clear_markers();
          return self.on_change.$call(e);}, $$12.$$s = self, $$12.$$arity = 1, $$12));
      }, $TextPane_on_change$11.$$arity = 0);
      
      Opal.def(self, '$on_selection_change', $TextPane_on_selection_change$13 = function $$on_selection_change() {
        var $iter = $TextPane_on_selection_change$13.$$p, block = $iter || nil, $$14, self = this;

        if ($iter) $TextPane_on_selection_change$13.$$p = null;
        
        
        if ($iter) $TextPane_on_selection_change$13.$$p = null;;
        return $send(self.$Native(self.$Native(self.editor)['$[]']("selection")), 'on', ["changeSelection"], ($$14 = function(e){var self = $$14.$$s || this;
          if (self.inhibit_callbacks == null) self.inhibit_callbacks = nil;

        
          
          if (e == null) {
            e = nil;
          };
          if ($truthy(self.inhibit_callbacks)) {
            return nil
          } else {
            return block.$call(e)
          };}, $$14.$$s = self, $$14.$$arity = 1, $$14));
      }, $TextPane_on_selection_change$13.$$arity = 0);
      
      Opal.def(self, '$on_cursor_change', $TextPane_on_cursor_change$15 = function $$on_cursor_change() {
        var $iter = $TextPane_on_cursor_change$15.$$p, block = $iter || nil, $$16, self = this;

        if ($iter) $TextPane_on_cursor_change$15.$$p = null;
        
        
        if ($iter) $TextPane_on_cursor_change$15.$$p = null;;
        block.$call(nil);
        return $send(self.$Native(self.$Native(self.editor)['$[]']("selection")), 'on', ["changeCursor"], ($$16 = function(e){var self = $$16.$$s || this;
          if (self.inhibit_callbacks == null) self.inhibit_callbacks = nil;

        
          
          if (e == null) {
            e = nil;
          };
          if ($truthy(self.inhibit_callbacks)) {
            return nil
          } else {
            return block.$call(e)
          };}, $$16.$$s = self, $$16.$$arity = 1, $$16));
      }, $TextPane_on_cursor_change$15.$$arity = 0);
      
      Opal.def(self, '$clear_selection', $TextPane_clear_selection$17 = function $$clear_selection() {
        var self = this;

        
        self.editor.selection.clearSelection();
        return self.$niil();
      }, $TextPane_clear_selection$17.$$arity = 0);
      
      Opal.def(self, '$_get_unison_edit_replacement', $TextPane__get_unison_edit_replacement$18 = function $$_get_unison_edit_replacement(chordmatch, noteregex, mode) {
        var self = this, notes = nil, result = nil, $case = nil;

        
        notes = chordmatch['$[]'](1).$scan($$($nesting, 'Regexp').$new(noteregex));
        result = $rb_plus($rb_plus("[", chordmatch['$[]'](1)), "]");
        $case = mode;
        if ("replaceByFirst"['$===']($case)) {result = notes['$[]'](0)}
        else if ("replaceByLast"['$===']($case)) {result = notes['$[]'](-1)}
        else if ("replaceBySecond"['$===']($case)) {if ($truthy(notes['$[]'](1))) {
          result = notes['$[]'](1)}}
        else if ("replaceBySecondLast"['$===']($case)) {if ($truthy(notes['$[]'](1))) {
          result = notes['$[]'](-2)}}
        else if ("replaceByInnerPart"['$===']($case)) {if ($truthy(notes['$[]'](2))) {
          result = $rb_plus($rb_plus("[", notes['$[]']($range(1, -2, false)).$join()), "]")}}
        else if ("swapFirstWithLast"['$===']($case)) {if ($truthy(notes['$[]'](1))) {
          result = $rb_plus($rb_plus("[", [notes['$[]'](-1), notes['$[]']($range(1, -2, false)), notes['$[]'](0)].$flatten().$join()), "]")}}
        else if ("revert"['$===']($case)) {result = $rb_plus($rb_plus("[", notes.$reverse().$join()), "]")};
        return result;
      }, $TextPane__get_unison_edit_replacement$18.$$arity = 3);
      
      Opal.def(self, '$edit_unisons', $TextPane_edit_unisons$19 = function $$edit_unisons(mode) {
        var $$20, self = this, selectionrange = nil, oldvalue = nil, note = nil, regexp = nil, newvalue = nil;

        
        selectionrange = self.editor.selection.getRange();
        oldvalue = self.editor.getSession().doc.getTextRange(self.$editor().selection.getRange());
        if ($truthy(oldvalue['$empty?']())) {
          self.$raise($$($nesting, 'I18n').$t("Selection is empty"))
        } else {
          
          note = "[\\^\\_=]?[a-zA-Z][',]*";
          regexp = $$($nesting, 'Regexp').$new("" + "\\[(" + (note) + ")\\s*(" + (note) + ")?\\s*((" + (note) + "\\s*)*)(" + (note) + ")?\\]");
          regexp = $$($nesting, 'Regexp').$new("" + "\\[\\s*((" + (note) + "\\s*)+)\\]");
          newvalue = oldvalue;
          newvalue = $send(oldvalue, 'gsub', [regexp], ($$20 = function(i){var self = $$20.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return self.$_get_unison_edit_replacement($$($nesting, 'Regexp').$last_match(), note, mode);}, $$20.$$s = self, $$20.$$arity = 1, $$20));
          self.$editor().session.replace(selectionrange, newvalue);;
        };
        return nil;
      }, $TextPane_edit_unisons$19.$$arity = 1);
      
      Opal.def(self, '$get_selection_positions', $TextPane_get_selection_positions$21 = function $$get_selection_positions() {
        var self = this;

        
        
        doc = self.editor.selection.doc;
        range = self.editor.selection.getRange();
        range_start = doc.positionToIndex(range.start, 0);
        range_end = doc.positionToIndex(range.end, 0);
      ;
        return [range_start, range_end];
      }, $TextPane_get_selection_positions$21.$$arity = 0);
      
      Opal.def(self, '$get_selection_ranges', $TextPane_get_selection_ranges$22 = function $$get_selection_ranges() {
        var self = this;

        
        
        var doc = self.editor.selection.doc;
        var ranges = self.editor.selection.getAllRanges();
        var result = ranges.map(function(therange){
           var range_start = doc.positionToIndex(therange.start, 0);
           var range_end = doc.positionToIndex(therange.end, 0);
           return([range_start, range_end])
        })
      ;
        return result;;
      }, $TextPane_get_selection_ranges$22.$$arity = 0);
      
      Opal.def(self, '$get_selection_info', $TextPane_get_selection_info$23 = function $$get_selection_info() {
        var self = this;

        
        
         doc = self.editor.selection.doc;
         range = self.editor.selection.getRange();
         token = self.editor.session.getTokenAt(range.start.row, range.start.column);
         if (token){
           token.startpos = [range.start.row, token.start];
           token.endpos = [range.start.row, token.start + token.value.length];
         }
         else
         {
          //todo handle missing token
         }
        ;
        return self.$Native({selection: [[range.start.row+1, range.start.column+1], [range.end.row+1, range.end.column+1]], token: token});
      }, $TextPane_get_selection_info$23.$$arity = 0);
      
      Opal.def(self, '$select_range_by_position', $TextPane_select_range_by_position$24 = function $$select_range_by_position(requested_selection_start, requested_selection_end, expand_selection) {
        var self = this, current_selection = nil, selection_newstart = nil, selection_end = nil;

        
        
        if (expand_selection == null) {
          expand_selection = false;
        };
        if ($truthy(expand_selection)) {
          current_selection = self.$get_selection_positions()
        } else {
          current_selection = [requested_selection_start, requested_selection_end]
        };
        selection_newstart = [current_selection.$first(), requested_selection_start].$min();
        selection_end = [current_selection.$last(), requested_selection_end].$max();
        
        doc = self.editor.selection.doc
        startrange = doc.indexToPosition(selection_newstart);
        endrange = doc.indexToPosition(selection_end);
        range = new self.range(startrange.row, startrange.column, endrange.row, endrange.column);
        myrange = {start:startrange, end:endrange}
        self.editor.focus();
          self.editor.selection.setSelectionRange(myrange, false);
      ;
      }, $TextPane_select_range_by_position$24.$$arity = -3);
      
      Opal.def(self, '$set_focus', $TextPane_set_focus$25 = function $$set_focus() {
        var self = this;

        return self.editor.focus()
      }, $TextPane_set_focus$25.$$arity = 0);
      
      Opal.def(self, '$select_add_range_by_position', $TextPane_select_add_range_by_position$26 = function $$select_add_range_by_position(requested_selection_start, requested_selection_end, expand_selection) {
        var self = this, current_selection = nil, selection_newstart = nil, selection_end = nil;

        
        
        if (expand_selection == null) {
          expand_selection = false;
        };
        if ($truthy(expand_selection)) {
          current_selection = self.$get_selection_positions()
        } else {
          current_selection = [requested_selection_start, requested_selection_end]
        };
        selection_newstart = [current_selection.$first(), requested_selection_start].$min();
        selection_end = [current_selection.$last(), requested_selection_end].$max();
        
        doc = self.editor.selection.doc
        startrange = doc.indexToPosition(selection_newstart);
        endrange = doc.indexToPosition(selection_end);
        range = new self.range(startrange.row, startrange.column, endrange.row, endrange.column);
        myrange = {start:startrange, end:endrange}
        self.editor.focus();
        self.editor.selection.addRange(range, false);
      ;
      }, $TextPane_select_add_range_by_position$26.$$arity = -3);
      
      Opal.def(self, '$get_text', $TextPane_get_text$27 = function $$get_text() {
        var self = this, result = nil;

        
        result = self.$_get_abc_from_editor().$strip();
        result = $rb_plus(result, $rb_plus("" + "\n\n" + (self.config_separator) + ".config\n\n", self.$_get_config_json()));
        if ($truthy(self['$_has_resources?']())) {
          result = $rb_plus(result, $rb_plus("" + "\n\n" + (self.config_separator) + ".resources\n\n", self.$_get_resources_json()))};
        return result;
      }, $TextPane_get_text$27.$$arity = 0);
      
      Opal.def(self, '$set_text', $TextPane_set_text$28 = function $$set_text(text) {
        var self = this;

        return self.$_split_parts(text)
      }, $TextPane_set_text$28.$$arity = 1);
      
      Opal.def(self, '$replace_range', $TextPane_replace_range$29 = function $$replace_range(startpos, endpos, text) {
        var self = this;

        
      therange = new self.range(startpos[0], startpos[1], endpos[0], endpos[1]);
      self.$editor().getSession().replace(therange, text);
      
      }, $TextPane_replace_range$29.$$arity = 3);
      
      Opal.def(self, '$replace_text', $TextPane_replace_text$30 = function $$replace_text(oldtext, newtext) {
        var self = this;

        
        self.editor.replace(newtext, {needle: oldtext});
        return nil;
      }, $TextPane_replace_text$30.$$arity = 2);
      
      Opal.def(self, '$set_annotations', $TextPane_set_annotations$31 = function $$set_annotations(annotations) {
        var $$32, self = this, editor_annotations = nil;

        
        editor_annotations = $send(annotations, 'map', [], ($$32 = function(annotation){var self = $$32.$$s || this;

        
          
          if (annotation == null) {
            annotation = nil;
          };
          return $hash2(["row", "text", "type"], {"row": $rb_minus(annotation['$[]']("start_pos").$first(), 1), "text": annotation['$[]']("text"), "type": annotation['$[]']("type")});}, $$32.$$s = self, $$32.$$arity = 1, $$32));
        self.$set_markers(annotations);
        self.editor.getSession().setAnnotations(editor_annotations.$to_n());
        return nil;
      }, $TextPane_set_annotations$31.$$arity = 1);
      
      Opal.def(self, '$set_markers', $TextPane_set_markers$33 = function $$set_markers(annotations) {
        var $$34, self = this;

        
        self.$clear_markers();
        return $send(annotations, 'each', [], ($$34 = function(annotation){var self = $$34.$$s || this;

        
          
          if (annotation == null) {
            annotation = nil;
          };
          return self.$add_marker(annotation);}, $$34.$$s = self, $$34.$$arity = 1, $$34));
      }, $TextPane_set_markers$33.$$arity = 1);
      
      Opal.def(self, '$prepend_comment', $TextPane_prepend_comment$35 = function $$prepend_comment(message) {
        var $$36, self = this, text = nil;

        
        text = $rb_plus($send(message.$split(/\r?\n/), 'map', [], ($$36 = function(l){var self = $$36.$$s || this;

        
          
          if (l == null) {
            l = nil;
          };
          return "" + "% " + (l);}, $$36.$$s = self, $$36.$$arity = 1, $$36)).$join("\n"), "\n%\n");
        
      self.editor.selection.moveCursorFileStart();
      self.editor.insert(text);
      ;
      }, $TextPane_prepend_comment$35.$$arity = 1);
      
      Opal.def(self, '$append_text', $TextPane_append_text$37 = function $$append_text(text) {
        var self = this;

        
      self.editor.selection.moveCursorFileEnd();
      self.editor.insert(text);
      
      }, $TextPane_append_text$37.$$arity = 1);
      
      Opal.def(self, '$add_marker', $TextPane_add_marker$38 = function $$add_marker(annotation) {
        var self = this, marker_start = nil, marker_end = nil, id = nil;

        
        marker_start = $hash2(["row", "col"], {"row": annotation['$[]']("start_pos").$first(), "col": annotation['$[]']("start_pos").$last()});
        marker_end = $hash2(["row", "col"], {"row": annotation['$[]']("end_pos").$first(), "col": annotation['$[]']("end_pos").$last()});
        id = self.editor.getSession().addMarker(new self.range($rb_minus(marker_start['$[]']("row"), 1), $rb_minus(marker_start['$[]']("col"), 1),
                                                              $rb_minus(marker_end['$[]']("row"), 1), $rb_minus(marker_end['$[]']("col"), 1)),
                                               "marked", "line", true);
        self.markers['$<<']($hash2(["from", "to", "id"], {"from": [marker_start['$[]']("row"), marker_start['$[]']("col")], "to": [marker_end['$[]']("row"), marker_end['$[]']("col")], "id": id}));
        return nil;
      }, $TextPane_add_marker$38.$$arity = 1);
      
      Opal.def(self, '$clear_markers', $TextPane_clear_markers$39 = function $$clear_markers() {
        var $$40, self = this;

        
        $send(self.markers, 'each', [], ($$40 = function(marker){var self = $$40.$$s || this;
          if (self.editor == null) self.editor = nil;

        
          
          if (marker == null) {
            marker = nil;
          };
          return self.editor.session.removeMarker(marker['$[]']("id"));}, $$40.$$s = self, $$40.$$arity = 1, $$40));
        return self.markers.$clear();
      }, $TextPane_clear_markers$39.$$arity = 0);
      
      Opal.def(self, '$get_abc_part', $TextPane_get_abc_part$41 = function $$get_abc_part() {
        var self = this;

        return self.editor.getSession().getValue();
      }, $TextPane_get_abc_part$41.$$arity = 0);
      
      Opal.def(self, '$get_config_part', $TextPane_get_config_part$42 = function $$get_config_part() {
        var self = this;

        return self.config_models['$[]']("config")
      }, $TextPane_get_config_part$42.$$arity = 0);
      
      Opal.def(self, '$get_config_model', $TextPane_get_config_model$43 = function $$get_config_model() {
        var self = this, config_model = nil;

        
        config_model = self.$_get_config_model();
        if ($truthy(config_model)) {
          return [self.$_get_config_model(), true]
        } else {
          return [$hash2([], {}), false]
        };
      }, $TextPane_get_config_model$43.$$arity = 0);
      
      Opal.def(self, '$get_checksum', $TextPane_get_checksum$44 = function $$get_checksum() {
        var self = this, s = nil;

        
        s = self.$_get_abc_from_editor().$strip();
        
            var i;
            var chk = 0x12345678;

            for (i = 0; i < s.length; i++) {
              chk += (s.charCodeAt(i) * (i + 1));
           }
         ;
        return (chk).$to_s().$scan(/...?/).$join(" ");
      }, $TextPane_get_checksum$44.$$arity = 0);
      
      Opal.def(self, '$resize', $TextPane_resize$45 = function $$resize() {
        var self = this;

        return self.editor.resize()
      }, $TextPane_resize$45.$$arity = 0);
      
      Opal.def(self, '$set_config_model', $TextPane_set_config_model$46 = function $$set_config_model(object, desc, handleundo) {
        var self = this, $writer = nil;

        
        
        if (desc == null) {
          desc = "no desc";
        };
        
        if (handleundo == null) {
          handleundo = true;
        };
        
        $writer = ["zn_config", true];
        $send(self.dirty, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if (handleundo['$=='](true)) {
          self.config_undo.$do(object, desc)};
        return self.$_set_config_model(object);
      }, $TextPane_set_config_model$46.$$arity = -2);
      
      Opal.def(self, '$patch_config_part', $TextPane_patch_config_part$47 = function $$patch_config_part(key, object, desc) {
        var self = this, pconfig = nil, pconfig_patch = nil, $writer = nil;

        
        
        if (desc == null) {
          desc = key;
        };
        pconfig = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
        pconfig_patch = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
        pconfig.$push(self.$_get_config_model());
        
        $writer = [key, object];
        $send(pconfig_patch, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        pconfig.$push(pconfig_patch.$get());
        return self.$set_config_model(pconfig.$get(), desc, true);
      }, $TextPane_patch_config_part$47.$$arity = -3);
      
      Opal.def(self, '$copy_config_part_to_extract', $TextPane_copy_config_part_to_extract$48 = function $$copy_config_part_to_extract(key, targetid, desc) {
        var self = this, pconfig = nil, pconfig_patch = nil, key0 = nil, $writer = nil;

        
        
        if (desc == null) {
          desc = key;
        };
        pconfig = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
        pconfig_patch = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
        pconfig.$push(self.$_get_config_model());
        key0 = key.$gsub(/^extract\.\d+/, "" + "extract." + (targetid));
        
        $writer = [key0, pconfig.$get(key)];
        $send(pconfig_patch, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        pconfig.$push(pconfig_patch.$get());
        return self.$set_config_model(pconfig.$get(), desc, true);
      }, $TextPane_copy_config_part_to_extract$48.$$arity = -3);
      
      Opal.def(self, '$neat_config_part', $TextPane_neat_config_part$49 = function $$neat_config_part() {
        var self = this;

        return self.$_set_config_json(self.$_get_config_json(), "neat config_part", false)
      }, $TextPane_neat_config_part$49.$$arity = 0);
      
      Opal.def(self, '$patch_resources', $TextPane_patch_resources$50 = function $$patch_resources(key, value) {
        var self = this, $writer = nil;
        if ($gvars.resources == null) $gvars.resources = nil;

        
        
        $writer = ["zn_resources", true];
        $send(self.dirty, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [key, value];
        $send($gvars.resources, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.$save_to_localstorage("zn_resources");
        return self.on_change.$call(nil);
      }, $TextPane_patch_resources$50.$$arity = 2);
      
      Opal.def(self, '$patch_token', $TextPane_patch_token$51 = function $$patch_token(token, endpos, newvalue) {
        var self = this, oldtoken = nil;

        
        oldtoken = self.$get_selection_info().$token();
        if (oldtoken.$type().$to_s()['$=='](token.$to_s())) {
        } else {
          self.$raise("" + "cannot patch token if there is a name mismatch '" + (oldtoken.$type()) + "' - '" + (token) + "'")
        };
        return self.$replace_range(oldtoken.$startpos(), oldtoken.$endpos(), newvalue);
      }, $TextPane_patch_token$51.$$arity = 3);
      
      Opal.def(self, '$extend_config_part', $TextPane_extend_config_part$52 = function $$extend_config_part(key, object) {
        var self = this, pconfig = nil, pconfig_patch = nil, $writer = nil;

        
        pconfig = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
        pconfig_patch = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
        pconfig.$push(self.$_get_config_model());
        
        $writer = [key, object];
        $send(pconfig_patch, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        pconfig.$push(pconfig_patch.$get());
        pconfig.$push(self.$_get_config_model());
        return self.$set_config_model(pconfig.$get(), "" + "extend " + (key), true);
      }, $TextPane_extend_config_part$52.$$arity = 2);
      
      Opal.def(self, '$delete_config_part', $TextPane_delete_config_part$53 = function $$delete_config_part(key) {
        var self = this, pconfig = nil, $writer = nil;
        if ($gvars.resources == null) $gvars.resources = nil;

        if ($truthy(key['$start_with?']("$resources"))) {
          return $gvars.resources.$delete(key.$split(".").$last())
        } else {
          
          pconfig = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
          pconfig.$push(self.$_get_config_model().$deep_dup());
          
          $writer = [key, $$$($$($nesting, 'Confstack'), 'DeleteMe')];
          $send(pconfig, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return self.$set_config_model(pconfig.$get(), "" + "delete " + (key), true);
        }
      }, $TextPane_delete_config_part$53.$$arity = 1);
      
      Opal.def(self, '$get_config_part_value', $TextPane_get_config_part_value$54 = function $$get_config_part_value(key) {
        var self = this, pconfig = nil, result = nil;

        
        pconfig = $$$($$($nesting, 'Confstack'), 'Confstack').$new(false);
        pconfig.$push(self.$_get_config_model());
        result = pconfig['$[]'](key);
        return result;
      }, $TextPane_get_config_part_value$54.$$arity = 1);
      
      Opal.def(self, '$get_lyrics', $TextPane_get_lyrics$55 = function $$get_lyrics() {
        var $$56, self = this, retval = nil, lyrics = nil;

        
        retval = self.$get_lyrics_raw();
        if ($truthy($rb_gt(retval.$count(), 0))) {
          lyrics = $send(retval, 'map', [], ($$56 = function(r){var self = $$56.$$s || this;

          
            
            if (r == null) {
              r = nil;
            };
            return r.$first().$gsub(/\nW\:[ \t]*/, "\n");}, $$56.$$s = self, $$56.$$arity = 1, $$56)).$join().$strip()
        } else {
          lyrics = nil
        };
        return lyrics;
      }, $TextPane_get_lyrics$55.$$arity = 0);
      
      Opal.def(self, '$get_lyrics_raw', $TextPane_get_lyrics_raw$57 = function $$get_lyrics_raw() {
        var self = this, regex = nil, abc_code = nil, retval = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        regex = /((\n((W\:)([^\n]*)\n)+)+)/;
        abc_code = self.$get_abc_part();
        retval = abc_code.$scan(regex);
        if ($truthy($rb_gt(retval.$count(), 1))) {
          $gvars.log.$error("you have more than one lyrics section in your abc code")};
        return retval;
      }, $TextPane_get_lyrics_raw$57.$$arity = 0);
      
      Opal.def(self, '$to_lyrics', $TextPane_to_lyrics$58 = function $$to_lyrics() {
        var self = this, lyrics = nil, abc = nil, abc_with_lyris = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        $gvars.log.$clear_errors();
        lyrics = self.$get_lyrics();
        if ($truthy(lyrics)) {
        } else {
          
          abc = self.$get_abc_part();
          abc_with_lyris = $rb_plus(abc.$strip(), "\n%\nW:\n%\n%\n");
          self.$replace_text(abc, abc_with_lyris);
        };
        self.handle_from_lyrics = false;
        self.lyrics_editor.getSession().setValue(self.$get_lyrics());;
        self.handle_from_lyrics = true;
        self.controller.$call_consumers("error_alert");
        return nil;
      }, $TextPane_to_lyrics$58.$$arity = 0);
      
      Opal.def(self, '$from_lyrics', $TextPane_from_lyrics$59 = function $$from_lyrics() {
        var $$60, self = this, lyrics_raw = nil, oldtext = nil, newtext = nil;

        
        if ($truthy(self.handle_from_lyrics)) {
          
          lyrics_raw = self.$get_lyrics_raw();
          oldtext = lyrics_raw.$first().$first();
          newtext = self.lyrics_editor.getSession().getValue();
          if ($truthy(newtext['$empty?']())) {
            newtext = " "};
          newtext = $send(newtext.$split("\n"), 'map', [], ($$60 = function(l){var self = $$60.$$s || this;

          
            
            if (l == null) {
              l = nil;
            };
            return "" + "W:" + (l);}, $$60.$$s = self, $$60.$$arity = 1, $$60)).$join("\n");
          newtext = "" + "\n" + (newtext) + "\n";
          self.$replace_text(oldtext, newtext);};
        return nil;
      }, $TextPane_from_lyrics$59.$$arity = 0);
      
      Opal.def(self, '$restore_from_localstorage', $TextPane_restore_from_localstorage$61 = function $$restore_from_localstorage() {
        var $a, self = this, abc = nil, abctext = nil, configjson = nil, resources = nil;

        
        abc = self.$Native(localStorage.getItem('abc_data'));
        if ($truthy(abc['$nil?']())) {
          
          abctext = self.$Native(localStorage.getItem('zn_abc'));
          if ($truthy(abctext)) {
            self.$_set_abc_to_editor(abctext)};
          configjson = ($truthy($a = self.$Native(localStorage.getItem('zn_config'))) ? $a : $hash2([], {}));
          self.config_undo.$reset();
          if ($truthy(configjson)) {
            self.$_set_config_json(configjson, "from localstore zn_config", true)};
          resources = self.$Native(localStorage.getItem('zn_resources'));
          if ($truthy(resources)) {
            self.$_set_resources_json(resources)};
        } else {
          
          localStorage.removeItem('abc_data');
          if ($truthy(abc['$nil?']())) {
          } else {
            self.$set_text(abc)
          };
        };
        return (self.dirty = $hash2([], {}));
      }, $TextPane_restore_from_localstorage$61.$$arity = 0);
      
      Opal.def(self, '$save_to_localstorage', $TextPane_save_to_localstorage$62 = function $$save_to_localstorage(dirty_name) {
        var self = this, $writer = nil;

        
        
        if (dirty_name == null) {
          dirty_name = nil;
        };
        if ($truthy(dirty_name)) {
          
          $writer = [dirty_name, true];
          $send(self.dirty, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];};
        if (self.dirty['$[]']("zn_abc")['$=='](true)) {
          localStorage.setItem('zn_abc', self.$_get_abc_from_editor())};
        if (self.dirty['$[]']("zn_config")['$=='](true)) {
          localStorage.setItem('zn_config', self.$_get_config_json())};
        if (self.dirty['$[]']("zn_resources")['$=='](true)) {
          localStorage.setItem('zn_resources', self.$_get_resources_json())};
        return (self.dirty = $hash2([], {}));
      }, $TextPane_save_to_localstorage$62.$$arity = -1);
      
      Opal.def(self, '$clean_localstorage', $TextPane_clean_localstorage$63 = function $$clean_localstorage() {
        var self = this;

        
        localStorage.removeItem('zn_abc');
        localStorage.removeItem('zn_config');
        localStorage.removeItem('zn_resources');
        return nil;
      }, $TextPane_clean_localstorage$63.$$arity = 0);
      
      Opal.def(self, '$get_config_from_text', $TextPane_get_config_from_text$64 = function $$get_config_from_text(fulltext) {
        var $$65, $a, self = this, configjson = nil;

        
        configjson = ($a = $send(fulltext.$split(self.config_separator), 'select', [], ($$65 = function(i){var self = $$65.$$s || this;

        
          
          if (i == null) {
            i = nil;
          };
          return i['$start_with?'](".config");}, $$65.$$s = self, $$65.$$arity = 1, $$65)).$first(), ($a === nil || $a == null) ? nil : $send($a, 'gsub', [".config", ""]));
        if ($truthy(configjson)) {
          return $$($nesting, 'JSON').$parse(configjson)
        } else {
          return nil
        };
      }, $TextPane_get_config_from_text$64.$$arity = 1);
      
      Opal.def(self, '$_split_parts', $TextPane__split_parts$66 = function $$_split_parts(fulltext) {
        var $$67, self = this;

        
        self.$_clean_models();
        self.$clean_localstorage();
        return $send(fulltext.$split(self.config_separator), 'each_with_index', [], ($$67 = function(part, i){var self = $$67.$$s || this;
          if (self.config_undo == null) self.config_undo = nil;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (part == null) {
            part = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          if (i['$=='](0)) {
            return self.$_set_abc_to_editor(part)
          } else if ($truthy(part['$start_with?'](".config"))) {
            
            self.config_undo.$reset();
            return self.$_set_config_json(part.$split(".config").$last(), "from loaded abc", true);
          } else if ($truthy(part['$start_with?'](".resources"))) {
            return self.$_set_resources_json(part.$split(".resources").$last())
          } else {
            return $gvars.log.$error($rb_plus($$($nesting, 'I18n').$t("unsupported section found in abc file: "), part['$[]']($range(0, 10, false))))
          };}, $$67.$$s = self, $$67.$$arity = 2, $$67));
      }, $TextPane__split_parts$66.$$arity = 1);
      
      Opal.def(self, '$_set_abc_to_editor', $TextPane__set_abc_to_editor$68 = function $$_set_abc_to_editor(abctext) {
        var self = this;

        
        self.inhibit_callbacks = true;
        self.editor.getSession().setValue(abctext);;
        self.inhibit_callbacks = false;
        return self.$save_to_localstorage("zn_abc");
      }, $TextPane__set_abc_to_editor$68.$$arity = 1);
      
      Opal.def(self, '$_get_abc_from_editor', $TextPane__get_abc_from_editor$69 = function $$_get_abc_from_editor() {
        var self = this, result = nil;

        
        result = "";
        result = self.editor.getSession().getValue();
        return result;
      }, $TextPane__get_abc_from_editor$69.$$arity = 0);
      
      Opal.def(self, '$_set_config_json', $TextPane__set_config_json$70 = function $$_set_config_json(json, desc, handleundo) {
        var self = this;

        
        
        if (desc == null) {
          desc = "no desc";
        };
        
        if (handleundo == null) {
          handleundo = true;
        };
        return self.$set_config_model($$($nesting, 'JSON').$parse(json), desc, handleundo);
      }, $TextPane__set_config_json$70.$$arity = -2);
      
      Opal.def(self, '$_get_config_json', $TextPane__get_config_json$71 = function $$_get_config_json() {
        var $$72, self = this, options = nil, result = nil;
        if ($gvars.conf == null) $gvars.conf = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        options = $gvars.conf['$[]']("neatjson");
        result = $send($gvars.log, 'benchmark', ["neat_json", 768, "./text_pane.rb".$force_encoding("US-ASCII")], ($$72 = function(){var self = $$72.$$s || this;

        return $$($nesting, 'JSON').$neat_generate(self.$_get_config_model(), options)}, $$72.$$s = self, $$72.$$arity = 0, $$72));
        return result;
      }, $TextPane__get_config_json$71.$$arity = 0);
      
      Opal.def(self, '$_get_config_model', $TextPane__get_config_model$73 = function $$_get_config_model() {
        var $a, self = this;

        return ($truthy($a = self.config_models['$[]']("config")) ? $a : $hash2([], {}))
      }, $TextPane__get_config_model$73.$$arity = 0);
      
      Opal.def(self, '$_set_config_model', $TextPane__set_config_model$74 = function $$_set_config_model(object) {
        var self = this, $writer = nil;

        
        
        $writer = ["config", object];
        $send(self.config_models, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.$save_to_localstorage("zn_config");
        return self.on_change.$call(nil);
      }, $TextPane__set_config_model$74.$$arity = 1);
      
      Opal.def(self, '$undo_config', $TextPane_undo_config$75 = function $$undo_config() {
        var self = this, momento = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        momento = self.config_undo.$undo();
        if ($truthy(momento)) {
          
          $gvars.log.$info("" + "undo: " + (momento['$[]']("title")) + ": " + (momento['$[]']("state").$dig("extract", "0", "legend", "pos")));
          if ($truthy(momento)) {
            return self.$set_config_model(momento['$[]']("state"), momento['$[]']("title"), false)
          } else {
            return nil
          };
        } else {
          return nil
        };
      }, $TextPane_undo_config$75.$$arity = 0);
      
      Opal.def(self, '$redo_config', $TextPane_redo_config$76 = function $$redo_config() {
        var self = this, momento = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        momento = self.config_undo.$redo();
        if ($truthy(momento)) {
          
          $gvars.log.$info("" + "redo: " + (momento['$[]']("title")) + ": " + (momento['$[]']("state").$dig("extract", "0", "legend", "pos")));
          if ($truthy(momento)) {
            return self.$set_config_model(momento['$[]']("state"), momento['$[]']("title"), false)
          } else {
            return nil
          };
        } else {
          return nil
        };
      }, $TextPane_redo_config$76.$$arity = 0);
      
      Opal.def(self, '$history_config', $TextPane_history_config$77 = function $$history_config() {
        var self = this;

        return $hash2(["undo", "redo"], {"undo": self.config_undo.$undo_history(), "redo": self.config_undo.$redo_history()})
      }, $TextPane_history_config$77.$$arity = 0);
      
      Opal.def(self, '$_set_resources_json', $TextPane__set_resources_json$78 = function $$_set_resources_json(json) {
        var self = this;

        
        $gvars.resources = $$($nesting, 'JSON').$parse(json);
        self.$save_to_localstorage("zn_resources");
        return self.on_change.$call(nil);
      }, $TextPane__set_resources_json$78.$$arity = 1);
      
      Opal.def(self, '$_get_resources_json', $TextPane__get_resources_json$79 = function $$_get_resources_json() {
        var self = this, result = nil;
        if ($gvars.resources == null) $gvars.resources = nil;
        if ($gvars.conf == null) $gvars.conf = nil;

        
        result = $$($nesting, 'JSON').$neat_generate($gvars.resources, $gvars.conf['$[]']("neatjson"));
        return result;
      }, $TextPane__get_resources_json$79.$$arity = 0);
      
      Opal.def(self, '$_has_resources?', $TextPane__has_resources$ques$80 = function() {
        var self = this;
        if ($gvars.resources == null) $gvars.resources = nil;

        return $gvars.resources['$empty?']()['$!']()
      }, $TextPane__has_resources$ques$80.$$arity = 0);
      return (Opal.def(self, '$_clean_models', $TextPane__clean_models$81 = function $$_clean_models() {
        var self = this;

        
        $gvars.resources = $hash2([], {});
        self.config_models = $hash2([], {});
        return (self.dirty = $hash2([], {}));
      }, $TextPane__clean_models$81.$$arity = 0), nil) && '_clean_models';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["harpnote_player"] = function(Opal) {
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$call_on_songoff', '$call_on_note', '$error', '$call_consumers', '$==', '$call', '$lambda', '$>=', '$count', '$>', '$uniq', '$map', '$[]', '$play_selection', '$play_from_selection', '$debug', '$to_s', '$first', '$select', '$include?', '$play_notes', '$play_from_abc', '$stop', '$empty?', '$warning', '$sort_by', '$last', '$*', '$+', '$-', '$get', '$mk_to_play_for_abc2svgplay', '$clamp', '$is_playing?', '$each', '$sort', '$<=>', '$Native', '$nil?', '$class', '$<', '$===', '$push', '$%', '$compact', '$flatten', '$pitch_to_note', '$reduce', '$meta_data', '$/', '$_load_voice_elements_from_voices', '$group_by', '$each_with_index', '$voices', '$is_a?', '$mk_to_play', '$notes', '$pitch', '$tie_end?', '$[]=', '$tie_start?', '$beat', '$duration', '$origin']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'Harpnotes');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $parent_nesting) {
      var self = $module($base, 'Music');

      var $nesting = [self].concat($parent_nesting);

      (function($base, $super, $parent_nesting) {
        var self = $klass($base, $super, 'HarpnotePlayer');

        var $nesting = [self].concat($parent_nesting), $HarpnotePlayer_initialize$1, $HarpnotePlayer_is_playing$ques$2, $HarpnotePlayer_is_stopped$ques$3, $HarpnotePlayer_call_on_note$4, $HarpnotePlayer_call_on_songoff$5, $HarpnotePlayer_on_noteon$6, $HarpnotePlayer_on_noteoff$7, $HarpnotePlayer_on_songoff$8, $HarpnotePlayer_play_auto$10, $HarpnotePlayer_play_from_selection$12, $HarpnotePlayer_play_selection$15, $HarpnotePlayer_play_song$16, $HarpnotePlayer_play_from_abc$17, $HarpnotePlayer_play_notes$18, $HarpnotePlayer_set_speed$21, $HarpnotePlayer_stop$22, $HarpnotePlayer_unhighlight_all$23, $HarpnotePlayer_range_highlight$24, $HarpnotePlayer_pitch_to_note$27, $HarpnotePlayer_get_notes$28, $HarpnotePlayer_load_song$33, $HarpnotePlayer_get_worker_model$35, $HarpnotePlayer_set_worker_model$36, $HarpnotePlayer__load_voice_elements_from_voices$38, $HarpnotePlayer_mk_to_play_for_abc2svgplay$44, $HarpnotePlayer_mk_to_play$45;

        self.$$prototype.abcplay = self.$$prototype.controller = self.$$prototype.status = self.$$prototype.noteon_callback = self.$$prototype.noteoff_callback = self.$$prototype.songoff_callback = self.$$prototype.selection = self.$$prototype.voice_elements = self.$$prototype.player_model_abc = self.$$prototype.song_off_timer = self.$$prototype.duration_timefactor = self.$$prototype.speed = self.$$prototype.active_voices = self.$$prototype.beat_timefactor = nil;
        
        self.$attr_accessor("player_model_abc", "controller");
        
        Opal.def(self, '$initialize', $HarpnotePlayer_initialize$1 = function $$initialize() {
          var self = this;
          if ($gvars.log == null) $gvars.log = nil;

          
          self.abcplay = new AbcPlay({
             onend: function(){self.$call_on_songoff()}, // todo: activate after fix https://github.com/moinejf/abc2svg/issues/43
             onnote: function(index, on,  custom){self.$call_on_note(index, on, custom)},
             errmsg: function(message){$gvars.log.$error(message);self.controller.$call_consumers("error_alert");}
          })
           self.abcplay.set_sfu("public/soundfont/zupfnoter")  // Scct1t2
           self.abcplay.set_sft('js')
           self.abcplay.set_vol(1.0)
        ;
          self.status = "stopped";
          self.selection = [];
          self.voices_to_play = [1, 2, 3, 4, 5, 6, 7, 8];
          self.voice_elements = [];
          self.player_model_abc = [];
          self.controller = nil;
          return (self.speed = 1);
        }, $HarpnotePlayer_initialize$1.$$arity = 0);
        
        Opal.def(self, '$is_playing?', $HarpnotePlayer_is_playing$ques$2 = function() {
          var self = this;

          return self.status['$==']("playing")
        }, $HarpnotePlayer_is_playing$ques$2.$$arity = 0);
        
        Opal.def(self, '$is_stopped?', $HarpnotePlayer_is_stopped$ques$3 = function() {
          var self = this;

          return self.status['$==']("stopped")
        }, $HarpnotePlayer_is_stopped$ques$3.$$arity = 0);
        
        Opal.def(self, '$call_on_note', $HarpnotePlayer_call_on_note$4 = function $$call_on_note(index, on, custom) {
          var self = this;

          
          
          if (custom == null) {
            custom = nil;
          };
          if ($truthy(on)) {
            return self.noteon_callback.$call($hash2(["startChar", "endChar"], {"startChar": index, "endChar": index}))
          } else {
            return self.noteoff_callback.$call($hash2(["startChar", "endChar"], {"startChar": index, "endChar": index}))
          };
        }, $HarpnotePlayer_call_on_note$4.$$arity = -3);
        
        Opal.def(self, '$call_on_songoff', $HarpnotePlayer_call_on_songoff$5 = function $$call_on_songoff() {
          var self = this;

          
          
           setTimeout(function(){self.songoff_callback.$call()}, 10)
          ;
          return nil;
        }, $HarpnotePlayer_call_on_songoff$5.$$arity = 0);
        
        Opal.def(self, '$on_noteon', $HarpnotePlayer_on_noteon$6 = function $$on_noteon() {
          var $iter = $HarpnotePlayer_on_noteon$6.$$p, block = $iter || nil, self = this;

          if ($iter) $HarpnotePlayer_on_noteon$6.$$p = null;
          
          
          if ($iter) $HarpnotePlayer_on_noteon$6.$$p = null;;
          return (self.noteon_callback = block);
        }, $HarpnotePlayer_on_noteon$6.$$arity = 0);
        
        Opal.def(self, '$on_noteoff', $HarpnotePlayer_on_noteoff$7 = function $$on_noteoff() {
          var $iter = $HarpnotePlayer_on_noteoff$7.$$p, block = $iter || nil, self = this;

          if ($iter) $HarpnotePlayer_on_noteoff$7.$$p = null;
          
          
          if ($iter) $HarpnotePlayer_on_noteoff$7.$$p = null;;
          return (self.noteoff_callback = block);
        }, $HarpnotePlayer_on_noteoff$7.$$arity = 0);
        
        Opal.def(self, '$on_songoff', $HarpnotePlayer_on_songoff$8 = function $$on_songoff() {
          var $iter = $HarpnotePlayer_on_songoff$8.$$p, block = $iter || nil, $$9, self = this;

          if ($iter) $HarpnotePlayer_on_songoff$8.$$p = null;
          
          
          if ($iter) $HarpnotePlayer_on_songoff$8.$$p = null;;
          return (self.songoff_callback = $send(self, 'lambda', [], ($$9 = function(){var self = $$9.$$s || this;

          
            block.$call();
            return (self.status = "stopped");}, $$9.$$s = self, $$9.$$arity = 0, $$9)));
        }, $HarpnotePlayer_on_songoff$8.$$arity = 0);
        
        Opal.def(self, '$play_auto', $HarpnotePlayer_play_auto$10 = function $$play_auto() {
          var $a, $$11, self = this, counts = nil;

          if ($truthy(($truthy($a = $rb_ge(self.selection.$count(), 0)) ? $rb_gt((counts = $send(self.selection, 'map', [], ($$11 = function(i){var self = $$11.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return i['$[]']("delay");}, $$11.$$s = self, $$11.$$arity = 1, $$11)).$uniq().$count()), 1) : $a))) {
            return self.$play_selection()
          } else {
            return self.$play_from_selection()
          }
        }, $HarpnotePlayer_play_auto$10.$$arity = 0);
        
        Opal.def(self, '$play_from_selection', $HarpnotePlayer_play_from_selection$12 = function $$play_from_selection() {
          var $$13, $$14, self = this, notes_to_play = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          $gvars.log.$debug("" + (self.selection.$to_s()) + " (" + ("./harpnote_player.rb".$force_encoding("US-ASCII")) + " " + (81) + ")");
          if ($truthy(self.selection.$first())) {
            
            notes_to_play = $send(self.voice_elements, 'select', [], ($$13 = function(n){var self = $$13.$$s || this;
              if (self.selection == null) self.selection = nil;

            
              
              if (n == null) {
                n = nil;
              };
              return $rb_ge(n['$[]']("delay"), self.selection.$first()['$[]']("delay"));}, $$13.$$s = self, $$13.$$arity = 1, $$13));
            notes_to_play = $send(notes_to_play, 'select', [], ($$14 = function(v){var self = $$14.$$s || this;
              if (self.active_voices == null) self.active_voices = nil;

            
              
              if (v == null) {
                v = nil;
              };
              return self.active_voices['$include?'](v['$[]']("index"));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
            return self.$play_notes(notes_to_play);
          } else {
            return self.$play_from_abc()
          };
        }, $HarpnotePlayer_play_from_selection$12.$$arity = 0);
        
        Opal.def(self, '$play_selection', $HarpnotePlayer_play_selection$15 = function $$play_selection() {
          var self = this;

          return self.$play_notes(self.selection)
        }, $HarpnotePlayer_play_selection$15.$$arity = 0);
        
        Opal.def(self, '$play_song', $HarpnotePlayer_play_song$16 = function $$play_song() {
          var self = this;

          return self.$play_from_abc()
        }, $HarpnotePlayer_play_song$16.$$arity = 0);
        
        Opal.def(self, '$play_from_abc', $HarpnotePlayer_play_from_abc$17 = function $$play_from_abc() {
          var self = this;

          
          
        self.abcplay.play(0, 1000000, self.player_model_abc)
          ;
          return (self.status = "playing");
        }, $HarpnotePlayer_play_from_abc$17.$$arity = 0);
        
        Opal.def(self, '$play_notes', $HarpnotePlayer_play_notes$18 = function $$play_notes(the_notes) {
          var $$19, $$20, self = this, firstnote = nil, lastnote = nil, stop_time = nil, start_offset = nil, pe = nil;
          if ($gvars.log == null) $gvars.log = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

          
          self.$stop();
          if ($truthy(the_notes['$empty?']())) {
            return $gvars.log.$warning("nothing selected to play")
          } else {
            
            if ($truthy(self.song_off_timer)) {
              clearTimeout(self.song_off_timer)};
            the_notes = $send(the_notes, 'sort_by', [], ($$19 = function(the_note){var self = $$19.$$s || this;

            
              
              if (the_note == null) {
                the_note = nil;
              };
              return the_note['$[]']("delay");}, $$19.$$s = self, $$19.$$arity = 1, $$19));
            firstnote = the_notes.$first();
            lastnote = the_notes.$last();
            stop_time = $rb_times($rb_plus($rb_plus($rb_minus(lastnote['$[]']("delay"), firstnote['$[]']("delay")), lastnote['$[]']("duration")), $rb_times($gvars.conf.$get("layout.SHORTEST_NOTE"), self.duration_timefactor)), 1000);
            self.song_off_timer = setTimeout(function(){self.songoff_callback.$call()}, stop_time );
            start_offset = firstnote['$[]']("delay");
            pe = $send(the_notes, 'map', [], ($$20 = function(i){var self = $$20.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return self.$mk_to_play_for_abc2svgplay(i, start_offset);}, $$20.$$s = self, $$20.$$arity = 1, $$20));
            
          self.abcplay.play(0, 1000000, pe)
          ;
            return (self.status = "playing");
          };
        }, $HarpnotePlayer_play_notes$18.$$arity = 1);
        
        Opal.def(self, '$set_speed', $HarpnotePlayer_set_speed$21 = function $$set_speed(speed) {
          var self = this;

          
          self.speed = speed.$clamp(0.25, 4);
          self.abcplay.set_speed(self.speed);
          return nil;
        }, $HarpnotePlayer_set_speed$21.$$arity = 1);
        
        Opal.def(self, '$stop', $HarpnotePlayer_stop$22 = function $$stop() {
          var self = this;

          
          if ($truthy(self['$is_playing?']())) {
            self.abcplay.stop()};
          self.status['$==']("stopping");
          return nil;
        }, $HarpnotePlayer_stop$22.$$arity = 0);
        
        Opal.def(self, '$unhighlight_all', $HarpnotePlayer_unhighlight_all$23 = function $$unhighlight_all() {
          var self = this;

          return (self.selection = [])
        }, $HarpnotePlayer_unhighlight_all$23.$$arity = 0);
        
        Opal.def(self, '$range_highlight', $HarpnotePlayer_range_highlight$24 = function $$range_highlight(from, to) {
          var $$25, $$26, self = this;

          
          self.selection = [];
          $send($send(self.voice_elements, 'sort', [], ($$25 = function(a, b){var self = $$25.$$s || this;

          
            
            if (a == null) {
              a = nil;
            };
            
            if (b == null) {
              b = nil;
            };
            return a['$[]']("delay")['$<=>'](b['$[]']("delay"));}, $$25.$$s = self, $$25.$$arity = 2, $$25)), 'each', [], ($$26 = function(element){var self = $$26.$$s || this, $a, $b, origin = nil, el_start = nil, el_end = nil;
            if (self.selection == null) self.selection = nil;
            if ($gvars.log == null) $gvars.log = nil;

          
            
            if (element == null) {
              element = nil;
            };
            origin = self.$Native(element['$[]']("origin"));
            if ($truthy(origin['$nil?']())) {
              return $gvars.log.$error("" + "BUG: note without origin " + (element.$class()))
            } else {
              
              el_start = origin['$[]']("startChar");
              el_end = origin['$[]']("endChar");
              if ($truthy(($truthy($a = ($truthy($b = $rb_gt(to, el_start)) ? $rb_lt(from, el_end) : $b)) ? $a : ($truthy($b = to['$==='](from)) ? to['$==='](el_end) : $b)))) {
                return self.selection.$push(element)
              } else {
                return nil
              };
            };}, $$26.$$s = self, $$26.$$arity = 1, $$26));
          return nil;
        }, $HarpnotePlayer_range_highlight$24.$$arity = 2);
        
        Opal.def(self, '$pitch_to_note', $HarpnotePlayer_pitch_to_note$27 = function $$pitch_to_note(pitch) {
          var self = this;

          return ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]['$[]'](pitch['$%'](12))
        }, $HarpnotePlayer_pitch_to_note$27.$$arity = 1);
        
        Opal.def(self, '$get_notes', $HarpnotePlayer_get_notes$28 = function $$get_notes() {
          var $$29, $$31, $$32, self = this, pitches = nil;

          
          pitches = $send(self.selection, 'map', [], ($$29 = function(i){var self = $$29.$$s || this, $$30;
            if (self.voice_elements_by_time == null) self.voice_elements_by_time = nil;

          
            
            if (i == null) {
              i = nil;
            };
            return $send(self.voice_elements_by_time['$[]'](i['$[]']("delay")), 'map', [], ($$30 = function(i){var self = $$30.$$s || this;

            
              
              if (i == null) {
                i = nil;
              };
              return i['$[]']("pitch");}, $$30.$$s = self, $$30.$$arity = 1, $$30));}, $$29.$$s = self, $$29.$$arity = 1, $$29)).$flatten().$uniq().$compact();
          return $send($send(pitches, 'map', [], ($$31 = function(i){var self = $$31.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return i['$%'](12);}, $$31.$$s = self, $$31.$$arity = 1, $$31)).$uniq().$sort(), 'map', [], ($$32 = function(i){var self = $$32.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            return self.$pitch_to_note(i);}, $$32.$$s = self, $$32.$$arity = 1, $$32));
        }, $HarpnotePlayer_get_notes$28.$$arity = 0);
        
        Opal.def(self, '$load_song', $HarpnotePlayer_load_song$33 = function $$load_song(music, active_voices) {
          var $$34, self = this, specduration = nil, specbpm = nil, spectf = nil, tf = nil;
          if ($gvars.conf == null) $gvars.conf = nil;
          if ($gvars.log == null) $gvars.log = nil;

          
          self.active_voices = active_voices;
          specduration = music.$meta_data()['$[]']("tempo")['$[]']("duration").$reduce("+");
          specbpm = music.$meta_data()['$[]']("tempo")['$[]']("bpm");
          spectf = $rb_times(specduration, specbpm);
          tf = $rb_times(spectf, $rb_divide(128, 120));
          self.duration_timefactor = $rb_divide(1, tf);
          self.beat_timefactor = $rb_divide(1, $rb_times(tf, $gvars.conf.$get("layout.BEAT_PER_DURATION")));
          $gvars.log.$debug("" + "playing with tempo: " + (tf) + " ticks per quarter " + ("./harpnote_player.rb".$force_encoding("US-ASCII")) + " " + (205));
          self.$_load_voice_elements_from_voices(music);
          self.voice_elements_by_time = $send(self.voice_elements, 'group_by', [], ($$34 = function(element){var self = $$34.$$s || this;

          
            
            if (element == null) {
              element = nil;
            };
            return element['$[]']("delay");}, $$34.$$s = self, $$34.$$arity = 1, $$34));
          return self;
        }, $HarpnotePlayer_load_song$33.$$arity = 2);
        
        Opal.def(self, '$get_worker_model', $HarpnotePlayer_get_worker_model$35 = function $$get_worker_model() {
          var self = this;

          return $hash2(["voice_elements", "active_voices", "duration_timefactor", "beat_timefactor"], {"voice_elements": self.voice_elements, "active_voices": self.active_voices, "duration_timefactor": self.duration_timefactor, "beat_timefactor": self.beat_timefactor})
        }, $HarpnotePlayer_get_worker_model$35.$$arity = 0);
        
        Opal.def(self, '$set_worker_model', $HarpnotePlayer_set_worker_model$36 = function $$set_worker_model(worker_model) {
          var $$37, self = this;

          
          self.duration_timefactor = worker_model['$[]']("duration_timefactor");
          self.beat_timefactor = worker_model['$[]']("beat_timefactor");
          self.voice_elements = worker_model['$[]']("voice_elements");
          self.active_voices = worker_model['$[]']("active_voices");
          self.voice_elements_by_time = $send(self.voice_elements, 'group_by', [], ($$37 = function(element){var self = $$37.$$s || this;

          
            
            if (element == null) {
              element = nil;
            };
            return element['$[]']("delay");}, $$37.$$s = self, $$37.$$arity = 1, $$37));
          return nil;
        }, $HarpnotePlayer_set_worker_model$36.$$arity = 1);
        
        Opal.def(self, '$_load_voice_elements_from_voices', $HarpnotePlayer__load_voice_elements_from_voices$38 = function $$_load_voice_elements_from_voices(music) {
          var $$39, self = this;

          return (self.voice_elements = $send(music.$voices().$each_with_index(), 'map', [], ($$39 = function(voice, index){var self = $$39.$$s || this, $$40, $$41, tie_start = nil;

          
            
            if (voice == null) {
              voice = nil;
            };
            
            if (index == null) {
              index = nil;
            };
            if (index['$=='](0)) {
              return nil;};
            tie_start = $hash2([], {});
            return $send($send(voice, 'select', [], ($$40 = function(c){var self = $$40.$$s || this;

            
              
              if (c == null) {
                c = nil;
              };
              return c['$is_a?']($$($nesting, 'Playable'));}, $$40.$$s = self, $$40.$$arity = 1, $$40)), 'map', [], ($$41 = function(root){var self = $$41.$$s || this, $$42, $$43, velocity = nil, to_play = nil, more_to_play = nil, $writer = nil, reault = nil, result = nil;

            
              
              if (root == null) {
                root = nil;
              };
              velocity = 0.5;
              if ($truthy(root['$is_a?']($$($nesting, 'Pause')))) {
                velocity = 1.1e-05};
              to_play = self.$mk_to_play(root, velocity, index);
              more_to_play = [];
              if ($truthy(root['$is_a?']($$($nesting, 'SynchPoint')))) {
                more_to_play = $send(root.$notes().$each(), 'map', [], ($$42 = function(note){var self = $$42.$$s || this;

                
                  
                  if (note == null) {
                    note = nil;
                  };
                  if ($truthy(note.$pitch()['$==='](root.$pitch()))) {
                    return nil
                  } else {
                    return self.$mk_to_play(note, velocity, index)
                  };}, $$42.$$s = self, $$42.$$arity = 1, $$42)).$compact()};
              if ($truthy(root['$tie_end?']())) {
                if (tie_start['$[]']("pitch")['$=='](to_play['$[]']("pitch"))) {
                  
                  
                  $writer = ["duration", $rb_plus(to_play['$[]']("duration"), tie_start['$[]']("duration"))];
                  $send(to_play, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = ["startChar", tie_start['$[]']("origin")['$[]']("startChar")];
                  $send(to_play['$[]']("origin"), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = ["delay", tie_start['$[]']("delay")];
                  $send(to_play, '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  $send(more_to_play, 'each', [], ($$43 = function(p){var self = $$43.$$s || this;

                  
                    
                    if (p == null) {
                      p = nil;
                    };
                    
                    $writer = ["duration", $rb_plus(p['$[]']("duration"), tie_start['$[]']("duration"))];
                    $send(p, '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = ["delay", tie_start['$[]']("delay")];
                    $send(p, '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;}, $$43.$$s = self, $$43.$$arity = 1, $$43));}};
              if ($truthy(root['$tie_start?']())) {
                
                tie_start = to_play;
                reault = nil;
              } else {
                result = $rb_plus([to_play], [more_to_play])
              };
              return result;}, $$41.$$s = self, $$41.$$arity = 1, $$41));}, $$39.$$s = self, $$39.$$arity = 2, $$39)).$flatten().$compact())
        }, $HarpnotePlayer__load_voice_elements_from_voices$38.$$arity = 1);
        
        Opal.def(self, '$mk_to_play_for_abc2svgplay', $HarpnotePlayer_mk_to_play_for_abc2svgplay$44 = function $$mk_to_play_for_abc2svgplay(note, start_delay) {
          var self = this;

          
          
          if (start_delay == null) {
            start_delay = 0;
          };
          return [note['$[]']("origin")['$[]']("startChar"), $rb_divide($rb_minus(note['$[]']("delay"), start_delay), self.speed), 25, note['$[]']("pitch"), $rb_divide(note['$[]']("duration"), self.speed), (function() {if ($truthy($rb_gt(note['$[]']("velocity"), 0.2))) {
            return 1
          } else {
            return 0
          }; return nil; })()];
        }, $HarpnotePlayer_mk_to_play_for_abc2svgplay$44.$$arity = -2);
        return (Opal.def(self, '$mk_to_play', $HarpnotePlayer_mk_to_play$45 = function $$mk_to_play(note, velocity, index) {
          var self = this;

          return $hash2(["delay", "pitch", "duration", "velocity", "origin", "index"], {"delay": $rb_times(note.$beat(), self.beat_timefactor), "pitch": note.$pitch(), "duration": $rb_times($rb_times(1, note.$duration()), self.duration_timefactor), "velocity": velocity, "origin": note.$origin(), "index": index})
        }, $HarpnotePlayer_mk_to_play$45.$$arity = 3), nil) && 'mk_to_play';
      })($nesting[0], null, $nesting)
    })($nesting[0], $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["json"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$new', '$push', '$[]=', '$-', '$[]', '$create_id', '$json_create', '$const_get', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  
  (function($base, $parent_nesting) {
    var self = $module($base, 'JSON');

    var $nesting = [self].concat($parent_nesting), $JSON_$$$1, $JSON_parse$2, $JSON_parse$excl$3, $JSON_load$4, $JSON_from_object$5, $JSON_generate$6, $JSON_dump$7, $writer = nil;

    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'JSONError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'ParserError');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'JSONError'), $nesting);
    
    var $hasOwn = Opal.hasOwnProperty;

    function $parse(source) {
      try {
        return JSON.parse(source);
      } catch (e) {
        self.$raise($$$($$($nesting, 'JSON'), 'ParserError'), e.message);
      }
    };

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (($writer = [k, to_opal(value[k], options)]), $send((hash), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($$($nesting, 'JSON').$create_id())) != nil) {
              return $$$('::', 'Object').$const_get(klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  ;
    (function(self, $parent_nesting) {
      var $nesting = [self].concat($parent_nesting);

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self), $nesting);
    
    $writer = ["json_class"];
    $send(self, 'create_id=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    Opal.defs(self, '$[]', $JSON_$$$1 = function(value, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      if ($truthy($$($nesting, 'String')['$==='](value))) {
        return self.$parse(value, options)
      } else {
        return self.$generate(value, options)
      };
    }, $JSON_$$$1.$$arity = -2);
    Opal.defs(self, '$parse', $JSON_parse$2 = function $$parse(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, $JSON_parse$2.$$arity = -2);
    Opal.defs(self, '$parse!', $JSON_parse$excl$3 = function(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$parse(source, options);
    }, $JSON_parse$excl$3.$$arity = -2);
    Opal.defs(self, '$load', $JSON_load$4 = function $$load(source, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return self.$from_object($parse(source), options);
    }, $JSON_load$4.$$arity = -2);
    Opal.defs(self, '$from_object', $JSON_from_object$5 = function $$from_object(js_object, options) {
      var $a, self = this, $writer = nil;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      ($truthy($a = options['$[]']("object_class")) ? $a : (($writer = ["object_class", $$($nesting, 'Hash')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      ($truthy($a = options['$[]']("array_class")) ? $a : (($writer = ["array_class", $$($nesting, 'Array')]), $send(options, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
      return to_opal(js_object, options.$$smap);;
    }, $JSON_from_object$5.$$arity = -2);
    Opal.defs(self, '$generate', $JSON_generate$6 = function $$generate(obj, options) {
      var self = this;

      
      
      if (options == null) {
        options = $hash2([], {});
      };
      return obj.$to_json(options);
    }, $JSON_generate$6.$$arity = -2);
    Opal.defs(self, '$dump', $JSON_dump$7 = function $$dump(obj, io, limit) {
      var self = this, string = nil;

      
      
      if (io == null) {
        io = nil;
      };
      
      if (limit == null) {
        limit = nil;
      };
      string = self.$generate(obj);
      if ($truthy(io)) {
        
        if ($truthy(io['$responds_to?']("to_io"))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
      } else {
        return string
      };
    }, $JSON_dump$7.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_to_json$8;

    return (Opal.def(self, '$to_json', $Object_to_json$8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Object_to_json$8.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $parent_nesting) {
    var self = $module($base, 'Enumerable');

    var $nesting = [self].concat($parent_nesting), $Enumerable_to_json$9;

    
    Opal.def(self, '$to_json', $Enumerable_to_json$9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json()
    }, $Enumerable_to_json$9.$$arity = 0)
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_to_json$10;

    return (Opal.def(self, '$to_json', $Array_to_json$10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, $Array_to_json$10.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Boolean');

    var $nesting = [self].concat($parent_nesting), $Boolean_to_json$11;

    return (Opal.def(self, '$to_json', $Boolean_to_json$11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, $Boolean_to_json$11.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_to_json$12;

    return (Opal.def(self, '$to_json', $Hash_to_json$12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    
    }, $Hash_to_json$12.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_to_json$13;

    return (Opal.def(self, '$to_json', $NilClass_to_json$13 = function $$to_json() {
      var self = this;

      return "null"
    }, $NilClass_to_json$13.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_to_json$14;

    return (Opal.def(self, '$to_json', $Numeric_to_json$14 = function $$to_json() {
      var self = this;

      return self.toString();
    }, $Numeric_to_json$14.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting);

    return Opal.alias(self, "to_json", "inspect")
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Time');

    var $nesting = [self].concat($parent_nesting), $Time_to_json$15;

    return (Opal.def(self, '$to_json', $Time_to_json$15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json()
    }, $Time_to_json$15.$$arity = 0), nil) && 'to_json'
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Date');

    var $nesting = [self].concat($parent_nesting), $Date_to_json$16, $Date_as_json$17;

    
    
    Opal.def(self, '$to_json', $Date_to_json$16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json()
    }, $Date_to_json$16.$$arity = 0);
    return (Opal.def(self, '$as_json', $Date_as_json$17 = function $$as_json() {
      var self = this;

      return self.$to_s()
    }, $Date_as_json$17.$$arity = 0), nil) && 'as_json';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["confstack2"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $hash = Opal.hash, $range = Opal.range;

  Opal.add_stubs(['$to_n', '$duplicable?', '$dup', '$map', '$to_proc', '$each_pair', '$===', '$deep_dup', '$[]=', '$-', '$delete', '$deep_merge!', '$[]', '$is_a?', '$deep_merge', '$key?', '$call', '$inject', '$respond_to?', '$keys', '$join', '$compact', '$push', '$digkeys', '$require', '$attr_accessor', '$+', '$push_from_env', '$first', '$caller', '$last', '$count', '$new', '$get_from_env', '$to_json', '$push_to_env', '$include?', '$nil?', '$parse', '$pop', '$get', '$open', '$puts', '$to_yaml', '$has_key?', '$dig', '$split', '$!', '$raise', '$==', '$_resolve_dependencies', '$each', '$each_with_index', '$_get_one', '$select', '$to_i', '$reverse', '$private', '$index', '$class', '$_resolve_value_dependency', '$_resolve_hash_dependency', '$_resolve_array_dependency']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_duplicable$ques$1;

    return (Opal.def(self, '$duplicable?', $Object_duplicable$ques$1 = function() {
      var self = this;

      return true
    }, $Object_duplicable$ques$1.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NilClass');

    var $nesting = [self].concat($parent_nesting), $NilClass_duplicable$ques$2;

    return (Opal.def(self, '$duplicable?', $NilClass_duplicable$ques$2 = function() {
      var self = this;

      return false
    }, $NilClass_duplicable$ques$2.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'FalseClass');

    var $nesting = [self].concat($parent_nesting), $FalseClass_duplicable$ques$3;

    return (Opal.def(self, '$duplicable?', $FalseClass_duplicable$ques$3 = function() {
      var self = this;

      return false
    }, $FalseClass_duplicable$ques$3.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'TrueClass');

    var $nesting = [self].concat($parent_nesting), $TrueClass_duplicable$ques$4;

    return (Opal.def(self, '$duplicable?', $TrueClass_duplicable$ques$4 = function() {
      var self = this;

      return false
    }, $TrueClass_duplicable$ques$4.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Symbol');

    var $nesting = [self].concat($parent_nesting), $Symbol_duplicable$ques$5;

    return (Opal.def(self, '$duplicable?', $Symbol_duplicable$ques$5 = function() {
      var self = this;

      return false
    }, $Symbol_duplicable$ques$5.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numeric');

    var $nesting = [self].concat($parent_nesting), $Numeric_duplicable$ques$6;

    return (Opal.def(self, '$duplicable?', $Numeric_duplicable$ques$6 = function() {
      var self = this;

      return false
    }, $Numeric_duplicable$ques$6.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'BigDecimal');

    var $nesting = [self].concat($parent_nesting), $BigDecimal_duplicable$ques$7;

    return (Opal.def(self, '$duplicable?', $BigDecimal_duplicable$ques$7 = function() {
      var self = this;

      return true
    }, $BigDecimal_duplicable$ques$7.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Method');

    var $nesting = [self].concat($parent_nesting), $Method_duplicable$ques$8;

    return (Opal.def(self, '$duplicable?', $Method_duplicable$ques$8 = function() {
      var self = this;

      return false
    }, $Method_duplicable$ques$8.$$arity = 0), nil) && 'duplicable?'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'String');

    var $nesting = [self].concat($parent_nesting), $String_deep_dup$9;

    return (Opal.def(self, '$deep_dup', $String_deep_dup$9 = function $$deep_dup() {
      var self = this;

      return self.$to_n()
    }, $String_deep_dup$9.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Numerical');

    var $nesting = [self].concat($parent_nesting), $Numerical_deep_dup$10;

    return (Opal.def(self, '$deep_dup', $Numerical_deep_dup$10 = function $$deep_dup() {
      var self = this;

      return self.$to_n()
    }, $Numerical_deep_dup$10.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Object');

    var $nesting = [self].concat($parent_nesting), $Object_deep_dup$11;

    return (Opal.def(self, '$deep_dup', $Object_deep_dup$11 = function $$deep_dup() {
      var self = this;

      if ($truthy(self['$duplicable?']())) {
        return self.$dup()
      } else {
        return self
      }
    }, $Object_deep_dup$11.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Array');

    var $nesting = [self].concat($parent_nesting), $Array_deep_dup$12;

    return (Opal.def(self, '$deep_dup', $Array_deep_dup$12 = function $$deep_dup() {
      var self = this;

      return $send(self, 'map', [], "deep_dup".$to_proc())
    }, $Array_deep_dup$12.$$arity = 0), nil) && 'deep_dup'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_deep_dup$13, $Hash_deep_merge$15, $Hash_deep_merge$excl$16;

    
    
    Opal.def(self, '$deep_dup', $Hash_deep_dup$13 = function $$deep_dup() {
      var $$14, self = this, hash = nil;

      
      hash = self.$dup();
      $send(self, 'each_pair', [], ($$14 = function(key, value){var self = $$14.$$s || this, $a, $writer = nil;

      
        
        if (key == null) {
          key = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        if ($truthy(($truthy($a = false) ? $$$('::', 'String')['$==='](key) : $a))) {
          
          $writer = [key, value.$deep_dup()];
          $send(hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          hash.$delete(key);
          
          $writer = [key.$deep_dup(), value.$deep_dup()];
          $send(hash, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;
        };}, $$14.$$s = self, $$14.$$arity = 2, $$14));
      return hash;
    }, $Hash_deep_dup$13.$$arity = 0);
    
    Opal.def(self, '$deep_merge', $Hash_deep_merge$15 = function $$deep_merge(other_hash) {
      var $iter = $Hash_deep_merge$15.$$p, block = $iter || nil, self = this;

      if ($iter) $Hash_deep_merge$15.$$p = null;
      
      
      if ($iter) $Hash_deep_merge$15.$$p = null;;
      return $send(self.$dup(), 'deep_merge!', [other_hash], block.$to_proc());
    }, $Hash_deep_merge$15.$$arity = 1);
    return (Opal.def(self, '$deep_merge!', $Hash_deep_merge$excl$16 = function(other_hash) {
      var $iter = $Hash_deep_merge$excl$16.$$p, block = $iter || nil, $$17, self = this;

      if ($iter) $Hash_deep_merge$excl$16.$$p = null;
      
      
      if ($iter) $Hash_deep_merge$excl$16.$$p = null;;
      $send(other_hash, 'each_pair', [], ($$17 = function(current_key, other_value){var self = $$17.$$s || this, $a, this_value = nil, $writer = nil;

      
        
        if (current_key == null) {
          current_key = nil;
        };
        
        if (other_value == null) {
          other_value = nil;
        };
        this_value = self['$[]'](current_key);
        
        $writer = [current_key, (function() {if ($truthy(($truthy($a = this_value['$is_a?']($$($nesting, 'Hash'))) ? other_value['$is_a?']($$($nesting, 'Hash')) : $a))) {
          return $send(this_value, 'deep_merge', [other_value], block.$to_proc())
        } else if ($truthy((($a = (block !== nil)) ? self['$key?'](current_key) : (block !== nil)))) {
          return block.$call(current_key, this_value, other_value)
        } else {
          return other_value
        }; return nil; })()];
        $send(self, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;}, $$17.$$s = self, $$17.$$arity = 2, $$17));
      return self;
    }, $Hash_deep_merge$excl$16.$$arity = 1), nil) && 'deep_merge!';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Hash');

    var $nesting = [self].concat($parent_nesting), $Hash_dig$18, $Hash_digkeys$20;

    
    
    Opal.def(self, '$dig', $Hash_dig$18 = function $$dig($a) {
      var $post_args, path, $$19, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      path = $post_args;;
      return $send(path, 'inject', [self], ($$19 = function(location, key){var self = $$19.$$s || this;

      
        
        if (location == null) {
          location = nil;
        };
        
        if (key == null) {
          key = nil;
        };
        if ($truthy(location['$respond_to?']("keys"))) {
          return location['$[]'](key)
        } else {
          return nil
        };}, $$19.$$s = self, $$19.$$arity = 2, $$19));
    }, $Hash_dig$18.$$arity = -1);
    return (Opal.def(self, '$digkeys', $Hash_digkeys$20 = function $$digkeys(r, parent_key) {
      var $$21, self = this;

      
      
      if (r == null) {
        r = [];
      };
      
      if (parent_key == null) {
        parent_key = nil;
      };
      return $send(self.$keys(), 'inject', [r], ($$21 = function(r, key){var self = $$21.$$s || this, newkey = nil;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (key == null) {
          key = nil;
        };
        newkey = [parent_key, key].$compact().$join(".");
        r.$push(newkey);
        if ($truthy(self['$[]'](key)['$respond_to?']("keys"))) {
          self['$[]'](key).$digkeys(r, newkey)};
        return r;}, $$21.$$s = self, $$21.$$arity = 2, $$21));
    }, $Hash_digkeys$20.$$arity = -1), nil) && 'digkeys';
  })($nesting[0], null, $nesting);
  self.$require("json");
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Confstack');

    var $nesting = [self].concat($parent_nesting), $Confstack_initialize$22, $Confstack_push$23, $Confstack_push_to_env$24, $Confstack_push_from_env$25, $Confstack_get_from_env$26, $Confstack_pop$27, $Confstack_reset_to$28, $Confstack_save$29, $Confstack_get$32, $Confstack_each$33, $Confstack_keys$35, $Confstack_get_source$36, $Confstack_$$$eq$40, $Confstack_delete$42, $Confstack__resolve_value_dependency$43, $Confstack__resolve_array_dependency$45, $Confstack__resolve_hash_dependency$47, $Confstack__resolve_dependencies$49;

    self.$$prototype.confstack_name = self.$$prototype.sourcestack = self.$$prototype.confstack = self.$$prototype.lookup_cache = self.$$prototype.strict = self.$$prototype.confresult_cache = self.$$prototype.callstack = nil;
    
    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'DeleteMe');

      var $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], null, $nesting);
    self.$attr_accessor("strict");
    
    Opal.def(self, '$initialize', $Confstack_initialize$22 = function $$initialize(name) {
      var self = this;

      
      
      if (name == null) {
        name = "default";
      };
      self.callstack = [];
      self.confstack = [$hash2([], {})];
      self.lookup_cache = $hash2([], {});
      self.confresult_cache = $hash2([], {});
      self.sourcestack = [];
      self.strict = true;
      if ($truthy(name)) {
        
        self.confstack_name = $rb_plus("confstack__", name);
        self.$push($hash2(["confstack"], {"confstack": $hash2(["env"], {"env": self.confstack_name})}));
        self.$push_from_env();};
      return self;
    }, $Confstack_initialize$22.$$arity = -1);
    
    Opal.def(self, '$push', $Confstack_push$23 = function $$push(hash) {
      var self = this, newconf = nil;

      
      
      if (hash == null) {
        hash = $hash2([], {});
      };
      self.confresult_cache = $hash2([], {});
      self.lookup_cache = $hash2([], {});
      if ($truthy(hash['$is_a?']($$($nesting, 'Hash')))) {
        
        self.sourcestack.$push(self.$caller().$first());
        newconf = self.confstack.$last().$deep_dup().$deep_merge(hash);
        self.confstack.$push(newconf);
      } else {
        self
      };
      return self.confstack.$count();
    }, $Confstack_push$23.$$arity = -1);
    
    Opal.def(self, '$push_to_env', $Confstack_push_to_env$24 = function $$push_to_env(hash) {
      var self = this, localstack = nil, newpush = nil, hash_json = nil, $writer = nil;

      
      
      if (hash == null) {
        hash = $hash2([], {});
      };
      localstack = $$($nesting, 'Confstack').$new(false);
      localstack.$push(self.$get_from_env());
      localstack.$push(hash);
      newpush = localstack['$[]']();
      hash_json = newpush.$to_json();
      
      $writer = [self['$[]']("confstack.env"), hash_json];
      $send($$($nesting, 'ENV'), '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self.$push(hash);
    }, $Confstack_push_to_env$24.$$arity = -1);
    
    Opal.def(self, '$push_from_env', $Confstack_push_from_env$25 = function $$push_from_env() {
      var self = this;

      return self.$push_to_env(self.$get_from_env())
    }, $Confstack_push_from_env$25.$$arity = 0);
    
    Opal.def(self, '$get_from_env', $Confstack_get_from_env$26 = function $$get_from_env() {
      var self = this, result = nil, fromenv = nil;

      
      result = $hash2([], {});
      if ($truthy(self.$keys()['$include?']("confstack.env"))) {
        
        fromenv = $$($nesting, 'ENV')['$[]'](self['$[]']("confstack.env"));
        if ($truthy(fromenv['$nil?']())) {
        } else {
          result = $$($nesting, 'JSON').$parse(fromenv)
        };};
      return result;
    }, $Confstack_get_from_env$26.$$arity = 0);
    
    Opal.def(self, '$pop', $Confstack_pop$27 = function $$pop() {
      var self = this;

      
      self.lookup_cache = $hash2([], {});
      self.sourcestack.$pop();
      self.confstack.$pop();
      return self.confstack.$count();
    }, $Confstack_pop$27.$$arity = 0);
    
    Opal.def(self, '$reset_to', $Confstack_reset_to$28 = function $$reset_to(level) {
      var self = this;

      
      self.lookup_cache = $hash2([], {});
      self.sourcestack = self.sourcestack['$[]'](Opal.Range.$new(0, level, false));
      self.confstack = self.confstack['$[]'](Opal.Range.$new(0, level, false));
      return self.confstack.$count();
    }, $Confstack_reset_to$28.$$arity = 1);
    
    Opal.def(self, '$save', $Confstack_save$29 = function $$save(name) {
      var $$30, $$31, self = this, result = nil;

      
      result = self.$get();
      $send($$($nesting, 'File'), 'open', ["" + (name) + ".yaml", "w"], ($$30 = function(f){var self = $$30.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        return f.$puts(result.$to_yaml());}, $$30.$$s = self, $$30.$$arity = 1, $$30));
      return $send($$($nesting, 'File'), 'open', ["" + (name) + ".json", "w"], ($$31 = function(f){var self = $$31.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        return f.$puts(result.$to_json());}, $$31.$$s = self, $$31.$$arity = 1, $$31));
    }, $Confstack_save$29.$$arity = 1);
    
    Opal.def(self, '$get', $Confstack_get$32 = function $$get(key, options) {
      var $a, $b, self = this, result = nil, $writer = nil;

      
      
      if (key == null) {
        key = nil;
      };
      
      if (options == null) {
        options = $hash2(["resolve"], {"resolve": true});
      };
      if ($truthy(key['$nil?']())) {
        result = self.confstack.$last()
      } else if ($truthy(self.lookup_cache['$has_key?'](key))) {
        result = self.lookup_cache['$[]'](key)
      } else {
        
        result = $send(self.confstack.$last(), 'dig', Opal.to_a(key.$split(".")));
        
        $writer = [key, result];
        $send(self.lookup_cache, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        if ($truthy(result)) {
        } else if ($truthy(($truthy($a = ($truthy($b = result['$nil?']()) ? self.$keys()['$include?'](key)['$!']() : $b)) ? self.strict : $a))) {
          self.$raise("" + "confstack: key not available: " + (key))};
      };
      if (options['$[]']("resolve")['$=='](true)) {
        result = self.$_resolve_dependencies(key, result)};
      return result;
    }, $Confstack_get$32.$$arity = -1);
    Opal.alias(self, "[]", "get");
    
    Opal.def(self, '$each', $Confstack_each$33 = function $$each() {
      var $iter = $Confstack_each$33.$$p, block = $iter || nil, $$34, self = this;

      if ($iter) $Confstack_each$33.$$p = null;
      
      
      if ($iter) $Confstack_each$33.$$p = null;;
      return $send(self.$keys(), 'each', [], ($$34 = function(k){var self = $$34.$$s || this;

      
        
        if (k == null) {
          k = nil;
        };
        return block.$call(k, self['$[]'](k));}, $$34.$$s = self, $$34.$$arity = 1, $$34));
    }, $Confstack_each$33.$$arity = 0);
    
    Opal.def(self, '$keys', $Confstack_keys$35 = function $$keys() {
      var self = this;

      return self.confstack.$last().$digkeys()
    }, $Confstack_keys$35.$$arity = 0);
    
    Opal.def(self, '$get_source', $Confstack_get_source$36 = function $$get_source(key) {
      var $$37, $$38, $$39, self = this, stack = nil, result = nil;

      
      stack = $send(self.confstack.$each_with_index(), 'map', [], ($$37 = function(s, index){var self = $$37.$$s || this;

      
        
        if (s == null) {
          s = nil;
        };
        
        if (index == null) {
          index = nil;
        };
        return [self.$_get_one(s, key), index];}, $$37.$$s = self, $$37.$$arity = 2, $$37));
      result = $send(stack, 'select', [], ($$38 = function(value){var self = $$38.$$s || this;

      
        
        if (value == null) {
          value = nil;
        };
        return value.$first()['$nil?']()['$!']();}, $$38.$$s = self, $$38.$$arity = 1, $$38)).$last();
      $send(self.confstack, 'map', [], ($$39 = function(s, index){var self = $$39.$$s || this;

      
        
        if (s == null) {
          s = nil;
        };
        
        if (index == null) {
          index = nil;
        };
        return self.$_get_one(s, key);}, $$39.$$s = self, $$39.$$arity = 2, $$39)).$compact().$last();
      return self.sourcestack['$[]'](result.$last().$to_i());
    }, $Confstack_get_source$36.$$arity = 1);
    
    Opal.def(self, '$[]=', $Confstack_$$$eq$40 = function(key, value) {
      var $$41, self = this, array = nil, h = nil;

      if ($truthy(value['$==']($$($nesting, 'DeleteMe')))) {
        return self.$delete(key)
      } else {
        
        array = key.$split(".").$reverse();
        h = $send(array, 'inject', [value], ($$41 = function(a, n){var self = $$41.$$s || this;

        
          
          if (a == null) {
            a = nil;
          };
          
          if (n == null) {
            n = nil;
          };
          return $hash(n, a);}, $$41.$$s = self, $$41.$$arity = 2, $$41));
        return self.$push(h);
      }
    }, $Confstack_$$$eq$40.$$arity = 2);
    
    Opal.def(self, '$delete', $Confstack_delete$42 = function(key) {
      var self = this, keys = nil;

      
      keys = key.$split(".");
      return $send(self.confstack.$last(), 'dig', Opal.to_a(keys['$[]']($range(0, -2, false)))).$delete(keys.$last());
    }, $Confstack_delete$42.$$arity = 1);
    self.$private();
    
    Opal.def(self, '$_resolve_value_dependency', $Confstack__resolve_value_dependency$43 = function $$_resolve_value_dependency(key, value) {
      var $$44, self = this, result = nil, loop = nil, $writer = nil;

      
      if ($truthy(self.confresult_cache['$has_key?'](value))) {
        result = self.confresult_cache['$[]'](value)
      } else {
        
        if ($truthy(self.callstack['$include?'](key))) {
          
          loop = self.callstack['$[]'](Opal.Range.$new($send(self.callstack, 'index', [], ($$44 = function(x){var self = $$44.$$s || this;

          
            
            if (x == null) {
              x = nil;
            };
            return x['$=='](key);}, $$44.$$s = self, $$44.$$arity = 1, $$44)), -1, false));
          self.callstack = [];
          self.$raise("" + "circular conf dependency: " + ($rb_plus(loop, ["" + (key) + " ..."])));};
        self.callstack.$push(key);
        result = value.$call();
        self.callstack.$pop();
        
        $writer = [key, result];
        $send(self.confresult_cache, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
      };
      return result;
    }, $Confstack__resolve_value_dependency$43.$$arity = 2);
    
    Opal.def(self, '$_resolve_array_dependency', $Confstack__resolve_array_dependency$45 = function $$_resolve_array_dependency(key, array) {
      var $$46, self = this;

      return $send(array, 'map', [], ($$46 = function(f){var self = $$46.$$s || this;

      
        
        if (f == null) {
          f = nil;
        };
        return self.$_resolve_dependencies(nil, f);}, $$46.$$s = self, $$46.$$arity = 1, $$46))
    }, $Confstack__resolve_array_dependency$45.$$arity = 2);
    
    Opal.def(self, '$_resolve_hash_dependency', $Confstack__resolve_hash_dependency$47 = function $$_resolve_hash_dependency(key, hash) {
      var $$48, self = this, result = nil;

      
      result = $send(hash, 'inject', [$hash2([], {})], ($$48 = function(r, v){var self = $$48.$$s || this, $writer = nil;

      
        
        if (r == null) {
          r = nil;
        };
        
        if (v == null) {
          v = nil;
        };
        
        $writer = [v.$first(), self.$_resolve_dependencies([key, v.$first()], v.$last())];
        $send(r, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return r;}, $$48.$$s = self, $$48.$$arity = 2, $$48));
      return result;
    }, $Confstack__resolve_hash_dependency$47.$$arity = 2);
    return (Opal.def(self, '$_resolve_dependencies', $Confstack__resolve_dependencies$49 = function $$_resolve_dependencies(key, result) {
      var self = this;

      
      if (result.$class()['$==']($$($nesting, 'Proc'))) {
        result = self.$_resolve_value_dependency(key, result)};
      if (result.$class()['$==']($$($nesting, 'Hash'))) {
        result = self.$_resolve_hash_dependency(key, result)};
      if (result.$class()['$==']($$($nesting, 'Array'))) {
        result = self.$_resolve_array_dependency(key, result)};
      return result;
    }, $Confstack__resolve_dependencies$49.$$arity = 2), nil) && '_resolve_dependencies';
  })($nesting[0], null, $nesting);
};

/* Generated by Opal 1.0.0 */
Opal.modules["opal-abc2svg"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy, $gvars = Opal.gvars;

  Opal.add_stubs(['$attr_accessor', '$lambda', '$phrases', '$set_callback', '$error', '$+', '$[]', '$===', '$_anno_start', '$_anno_stop', '$push', '$_callback_get_abcmodel', '$to_n', '$unhighlight_all', '$range_highlight_more', '$nil?', '$each', '$get_elements_by_range', '$find', '$==', '$scroll_into_view', '$add_class', '$remove_class', '$id', '$gsub', '$t', '$strip_js', '$get_svg', '$compute_tune_preview', '$set_svg', '$html', '$join', '$[]=', '$-', '$sort', '$map', '$>', '$*', '$first', '$last', '$private', '$parse', '$loglevel', '$debug', '$to_json', '$split', '$inject', '$length', '$_mk_id', '$stopPropagation', '$Native', '$call']);
  return (function($base, $parent_nesting) {
    var self = $module($base, 'ABC2SVG');

    var $nesting = [self].concat($parent_nesting);

    (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Abc2Svg');

      var $nesting = [self].concat($parent_nesting), $Abc2Svg_initialize$1, $Abc2Svg_range_highlight$9, $Abc2Svg_scroll_into_view$10, $Abc2Svg_range_highlight_more$11, $Abc2Svg_range_unhighlight_more$13, $Abc2Svg_unhighlight_all$15, $Abc2Svg_on_select$16, $Abc2Svg_strip_js$17, $Abc2Svg_compute_tune_preview$18, $Abc2Svg_draw$19, $Abc2Svg_set_svg$20, $Abc2Svg_get_abcmodel$21, $Abc2Svg_get_svg$22, $Abc2Svg_get_html$23, $Abc2Svg_set_callback$24, $Abc2Svg_get_elements_by_range$25, $Abc2Svg__callback_get_abcmodel$28, $Abc2Svg__get_charpos$29, $Abc2Svg__anno_start$31, $Abc2Svg__clickabcnote$32, $Abc2Svg__anno_stop$33, $Abc2Svg__mk_id$34;

      self.$$prototype.user = self.$$prototype.root = self.$$prototype.printer = self.$$prototype.abc_source = self.$$prototype.interactive_elements = self.$$prototype.abc_model = self.$$prototype.player_model = self.$$prototype.svgbuf = self.$$prototype.on_select = nil;
      
      self.$attr_accessor("abcplay");
      
      Opal.def(self, '$initialize', $Abc2Svg_initialize$1 = function $$initialize(div, options) {
        var $$2, $$3, $$4, $$5, $$6, $$7, $$8, self = this, $case = nil, defaults = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        
        if (options == null) {
          options = $hash2(["mode"], {"mode": "svg"});
        };
        self.on_select = $send(self, 'lambda', [], ($$2 = function(element){var self = $$2.$$s || this;

        
          
          if (element == null) {
            element = nil;
          };
          return nil;}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        self.printer = div;
        self.svgbuf = [];
        self.abc_source = "";
        self.interactive_elements = $hash2([], {});
        self.abc_model = nil;
        self.player_model = [];
        self.object_map = $hash2([], {});
        self.abcplay = nil;
        self.user = $hash2(["img_out", "errmsg", "read_file", "annotate", "page_format", "keep_remark", "textrans"], {"img_out": nil, "errmsg": nil, "read_file": nil, "annotate": true, "page_format": true, "keep_remark": true, "textrans": $$($nesting, 'I18n').$phrases()});
        $send(self, 'set_callback', ["errmsg"], ($$3 = function(message, line_number, column_number){var self = $$3.$$s || this;
          if ($gvars.log == null) $gvars.log = nil;

        
          
          if (message == null) {
            message = nil;
          };
          
          if (line_number == null) {
            line_number = nil;
          };
          
          if (column_number == null) {
            column_number = nil;
          };
          if ($truthy(line_number)) {
            return $gvars.log.$error(message, [$rb_plus(line_number, 1), $rb_plus(column_number, 1)])
          } else {
            return $gvars.log.$error(message)
          };}, $$3.$$s = self, $$3.$$arity = 3, $$3));
        $case = options['$[]']("mode");
        if ("svg"['$===']($case)) {
        $send(self, 'set_callback', ["anno_start"], ($$4 = function(type, start, stop, x, y, w, h){var self = $$4.$$s || this;

        
          
          if (type == null) {
            type = nil;
          };
          
          if (start == null) {
            start = nil;
          };
          
          if (stop == null) {
            stop = nil;
          };
          
          if (x == null) {
            x = nil;
          };
          
          if (y == null) {
            y = nil;
          };
          
          if (w == null) {
            w = nil;
          };
          
          if (h == null) {
            h = nil;
          };
          return self.$_anno_start(type, start, stop, x, y, w, h);}, $$4.$$s = self, $$4.$$arity = 7, $$4));
        $send(self, 'set_callback', ["anno_stop"], ($$5 = function(type, start, stop, x, y, w, h){var self = $$5.$$s || this;

        
          
          if (type == null) {
            type = nil;
          };
          
          if (start == null) {
            start = nil;
          };
          
          if (stop == null) {
            stop = nil;
          };
          
          if (x == null) {
            x = nil;
          };
          
          if (y == null) {
            y = nil;
          };
          
          if (w == null) {
            w = nil;
          };
          
          if (h == null) {
            h = nil;
          };
          return self.$_anno_stop(type, start, stop, x, y, w, h);}, $$5.$$s = self, $$5.$$arity = 7, $$5));
        $send(self, 'set_callback', ["img_out"], ($$6 = function(svg){var self = $$6.$$s || this;
          if (self.svgbuf == null) self.svgbuf = nil;

        
          
          if (svg == null) {
            svg = nil;
          };
          return self.svgbuf.$push(svg);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
        $send(self, 'set_callback', ["get_abcmodel"], ($$7 = function(tsfirst, voice_tb, anno_type, info){var self = $$7.$$s || this;

        
          
          if (tsfirst == null) {
            tsfirst = nil;
          };
          
          if (voice_tb == null) {
            voice_tb = nil;
          };
          
          if (anno_type == null) {
            anno_type = nil;
          };
          
          if (info == null) {
            info = nil;
          };
          return nil;}, $$7.$$s = self, $$7.$$arity = 4, $$7));}
        else if ("model"['$===']($case)) {$send(self, 'set_callback', ["get_abcmodel"], ($$8 = function(tsfirst, voice_tb, anno_type, info){var self = $$8.$$s || this;

        
          
          if (tsfirst == null) {
            tsfirst = nil;
          };
          
          if (voice_tb == null) {
            voice_tb = nil;
          };
          
          if (anno_type == null) {
            anno_type = nil;
          };
          
          if (info == null) {
            info = nil;
          };
          return self.$_callback_get_abcmodel(tsfirst, voice_tb, anno_type, info);}, $$8.$$s = self, $$8.$$arity = 4, $$8))}
        else {$gvars.log.$error("BUG: unsupported mode for abc2svg")};
        self.root = new abc2svg.Abc(self.user.$to_n());
        defaults = "" + "\n" + "I:titletrim 0\n" + "I:measurenb 1\n" + "I:contbarnb 1\n" + "I:linewarn 0\n" + "I:staffnonote 2\n" + "I:stretchlast 1\n" + "      ";
        self.root.tosvg("my_parameters",defaults);;
        return self.root;
      }, $Abc2Svg_initialize$1.$$arity = -2);
      
      Opal.def(self, '$range_highlight', $Abc2Svg_range_highlight$9 = function $$range_highlight(from, to) {
        var self = this;

        
        self.$unhighlight_all();
        self.$range_highlight_more(from, to);
        return nil;
      }, $Abc2Svg_range_highlight$9.$$arity = 2);
      
      Opal.def(self, '$scroll_into_view', $Abc2Svg_scroll_into_view$10 = function $$scroll_into_view(element) {
        var self = this;

        if ($truthy(element['$nil?']())) {
          return nil
        } else {
          
          element.parents('.svg_block').get(0).scrollIntoView(true);
        
        }
      }, $Abc2Svg_scroll_into_view$10.$$arity = 1);
      
      Opal.def(self, '$range_highlight_more', $Abc2Svg_range_highlight_more$11 = function $$range_highlight_more(from, to) {
        var $$12, self = this;

        
        $send(self.$get_elements_by_range(from, to), 'each', [], ($$12 = function(id){var self = $$12.$$s || this, element = nil;
          if ($gvars.settings == null) $gvars.settings = nil;

        
          
          if (id == null) {
            id = nil;
          };
          element = $$($nesting, 'Element').$find("" + "#" + (id));
          if ($gvars.settings['$[]']("autoscroll")['$==']("false")) {
          } else {
            self.$scroll_into_view(element)
          };
          return element.$add_class("highlight");}, $$12.$$s = self, $$12.$$arity = 1, $$12));
        return nil;
      }, $Abc2Svg_range_highlight_more$11.$$arity = 2);
      
      Opal.def(self, '$range_unhighlight_more', $Abc2Svg_range_unhighlight_more$13 = function $$range_unhighlight_more(from, to) {
        var $$14, self = this;

        return $send(self.$get_elements_by_range(from, to), 'each', [], ($$14 = function(id){var self = $$14.$$s || this, foo = nil;

        
          
          if (id == null) {
            id = nil;
          };
          foo = $$($nesting, 'Element').$find("" + "#" + (id));
          return foo.$remove_class("highlight");}, $$14.$$s = self, $$14.$$arity = 1, $$14))
      }, $Abc2Svg_range_unhighlight_more$13.$$arity = 2);
      
      Opal.def(self, '$unhighlight_all', $Abc2Svg_unhighlight_all$15 = function $$unhighlight_all() {
        var self = this;

        return $$($nesting, 'Element').$find("" + "#" + (self.printer.$id()) + " .highlight").$remove_class("highlight")
      }, $Abc2Svg_unhighlight_all$15.$$arity = 0);
      
      Opal.def(self, '$on_select', $Abc2Svg_on_select$16 = function $$on_select() {
        var $iter = $Abc2Svg_on_select$16.$$p, block = $iter || nil, self = this;

        if ($iter) $Abc2Svg_on_select$16.$$p = null;
        
        
        if ($iter) $Abc2Svg_on_select$16.$$p = null;;
        return (self.on_select = block);
      }, $Abc2Svg_on_select$16.$$arity = 0);
      
      Opal.def(self, '$strip_js', $Abc2Svg_strip_js$17 = function $$strip_js(abc_code) {
        var self = this, r = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        r = abc_code.$gsub(/(I:|%%)(beginjs|endjs)/, "% removed ");
        if (abc_code['$=='](r)) {
        } else {
          $gvars.log.$error($$($nesting, 'I18n').$t("CAUTION: your abc-code is vulnerable !!! removed beginjs / endjs"), [1, 1])
        };
        return r;
      }, $Abc2Svg_strip_js$17.$$arity = 1);
      
      Opal.def(self, '$compute_tune_preview', $Abc2Svg_compute_tune_preview$18 = function $$compute_tune_preview(abc_code, checksum) {
        var self = this, abc_text_insert = nil;

        
        
        if (checksum == null) {
          checksum = "";
        };
        abc_text_insert = "" + "\n" + "%%textoption right\n" + "%%textfont * * 8\n" + "%%text " + (checksum) + "\n" + "      ";
        self.abc_source = self.$strip_js(abc_code);
        self.interactive_elements = $hash2([], {});
        self.svgbuf = [];
        
      self.root.tosvg("abc", $rb_plus(self.abc_source, abc_text_insert));
      ;
        return $hash2(["svg", "interactive_elements"], {"svg": self.$get_svg(), "interactive_elements": self.interactive_elements});
      }, $Abc2Svg_compute_tune_preview$18.$$arity = -2);
      
      Opal.def(self, '$draw', $Abc2Svg_draw$19 = function $$draw(abc_code, checksum) {
        var self = this, svg_and_positions = nil;

        
        
        if (checksum == null) {
          checksum = "";
        };
        svg_and_positions = self.$compute_tune_preview(abc_code, (checksum = ""));
        return self.$set_svg(svg_and_positions);
      }, $Abc2Svg_draw$19.$$arity = -2);
      
      Opal.def(self, '$set_svg', $Abc2Svg_set_svg$20 = function $$set_svg(svg_and_positions) {
        var self = this;

        
        self.interactive_elements = svg_and_positions['$[]']("interactive_elements");
        self.printer.$html(svg_and_positions['$[]']("svg"));
        return nil;
      }, $Abc2Svg_set_svg$20.$$arity = 1);
      
      Opal.def(self, '$get_abcmodel', $Abc2Svg_get_abcmodel$21 = function $$get_abcmodel(abc_code) {
        var self = this, stripped_abc_code = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        stripped_abc_code = self.$strip_js(abc_code);
        abc2svg.modules.load(stripped_abc_code,
                              function(){console.log("modules loaded")},
                              function(msg){$gvars.log.$error(msg) } )     ;
        self.root.tosvg("abc", stripped_abc_code);
        return [self.abc_model, self.player_model];
      }, $Abc2Svg_get_abcmodel$21.$$arity = 1);
      
      Opal.def(self, '$get_svg', $Abc2Svg_get_svg$22 = function $$get_svg() {
        var self = this, result = nil;

        
        result = self.svgbuf.$join("\n");
        result = result.$gsub("<svg ", "<div class=\"svg_block\"><svg ");
        result = result.$gsub("</svg>", "</svg></div>");
        return result;
      }, $Abc2Svg_get_svg$22.$$arity = 0);
      
      Opal.def(self, '$get_html', $Abc2Svg_get_html$23 = function $$get_html() {
        var self = this;

        return "" + "\n" + "      <html>\n" + "      <head>\n" + "        <meta charset=\"utf-8\"/>\n" + "        <style type=\"text/css\">\n" + "           rect.abcref {fill-opacity:0.0}\n" + "          .nobrk s\t{ white-space:nowrap; }\n" + "          svg {display:block}\n" + "        </style>\n" + "      </head>\n" + "      <body>\n" + "         " + (self.printer.$html()) + "\n" + "      </body>\n" + "      "
      }, $Abc2Svg_get_html$23.$$arity = 0);
      
      Opal.def(self, '$set_callback', $Abc2Svg_set_callback$24 = function $$set_callback(event) {
        var $iter = $Abc2Svg_set_callback$24.$$p, block = $iter || nil, self = this, $writer = nil;

        if ($iter) $Abc2Svg_set_callback$24.$$p = null;
        
        
        if ($iter) $Abc2Svg_set_callback$24.$$p = null;;
        $writer = [event, block];
        $send(self.user, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $Abc2Svg_set_callback$24.$$arity = 1);
      
      Opal.def(self, '$get_elements_by_range', $Abc2Svg_get_elements_by_range$25 = function $$get_elements_by_range(from, to) {
        var $$26, self = this, range = nil, result = nil;

        
        range = [from, to].$sort();
        result = [];
        $send(self.interactive_elements, 'each', [], ($$26 = function(k, value){var self = $$26.$$s || this, $$27, noterange = nil;

        
          
          if (k == null) {
            k = nil;
          };
          
          if (value == null) {
            value = nil;
          };
          noterange = $send(["startChar", "endChar"], 'map', [], ($$27 = function(c){var self = $$27.$$s || this;

          
            
            if (c == null) {
              c = nil;
            };
            return value['$[]'](c);}, $$27.$$s = self, $$27.$$arity = 1, $$27)).$sort();
          if ($truthy($rb_gt($rb_times($rb_minus(range.$first(), noterange.$last()), $rb_minus(noterange.$first(), range.$last())), 0))) {
            return result.$push(k)
          } else {
            return nil
          };}, $$26.$$s = self, $$26.$$arity = 2, $$26));
        return result;
      }, $Abc2Svg_get_elements_by_range$25.$$arity = 2);
      self.$private();
      
      Opal.def(self, '$_callback_get_abcmodel', $Abc2Svg__callback_get_abcmodel$28 = function $$_callback_get_abcmodel(tsfirst, voice_tb, music_types, info) {
        var self = this, json_model = nil;
        if ($gvars.log == null) $gvars.log = nil;

        
        json_model = "";
        
          var abcmidi = new AbcMIDI();
          abcmidi.add(tsfirst, voice_tb);
          var to_json = new AbcJSON();
          json_model =  to_json.gen_json(tsfirst, voice_tb, music_types, info);

          var to_audio = new ToAudio()
          to_audio.add(tsfirst, voice_tb)
          self.player_model = to_audio.clear()
      ;
        self.abc_model = $$($nesting, 'JSON').$parse(json_model);
        if ($gvars.log.$loglevel()['$==']("debug")) {
          $gvars.log.$debug(self.abc_model.$to_json())};
        return self.abc_model;
      }, $Abc2Svg__callback_get_abcmodel$28.$$arity = 4);
      
      Opal.def(self, '$_get_charpos', $Abc2Svg__get_charpos$29 = function $$_get_charpos(abc_source, line, column) {
        var $$30, self = this, lines = nil, result = nil;

        
        lines = self.abc_source.$split("\n");
        result = $send(lines['$[]'](Opal.Range.$new(0, line, false)), 'inject', [0], ($$30 = function(r, v){var self = $$30.$$s || this;

        
          
          if (r == null) {
            r = nil;
          };
          
          if (v == null) {
            v = nil;
          };
          return (r = $rb_plus(r, v.$length()));}, $$30.$$s = self, $$30.$$arity = 2, $$30));
        return $rb_plus(result, column);
      }, $Abc2Svg__get_charpos$29.$$arity = 3);
      
      Opal.def(self, '$_anno_start', $Abc2Svg__anno_start$31 = function $$_anno_start(music_type, start_offset, stop_offset, x, y, w, h) {
        var self = this, id = nil;

        
        id = self.$_mk_id(music_type, start_offset, stop_offset);
        self.root.out_svg('<g class="' + id +'">\n');
        return nil;
      }, $Abc2Svg__anno_start$31.$$arity = 7);
      
      Opal.def(self, '$_clickabcnote', $Abc2Svg__clickabcnote$32 = function $$_clickabcnote(evt, id) {
        var self = this;

        
        self.$Native(evt).$stopPropagation();
        return self.on_select.$call(self.interactive_elements['$[]'](id));
      }, $Abc2Svg__clickabcnote$32.$$arity = 2);
      
      Opal.def(self, '$_anno_stop', $Abc2Svg__anno_stop$33 = function $$_anno_stop(music_type, start_offset, stop_offset, x, y, w, h) {
        var self = this, id = nil, onclick = nil, $writer = nil;

        
        id = self.$_mk_id(music_type, start_offset, stop_offset);
        onclick = "" + "onclick=\"Opal.top.uicontroller.tune_preview_printer.$_clickabcnote(evt, '" + (id) + "')\"";
        
          // close the container
          self.root.out_svg('</g>\n');
          // create a rectangle
          self.root.out_svg('<rect ' + onclick + ' class="abcref _' + start_offset + '_" id="' + id +'" x="');
          self.root.out_sxsy(x, '" y="', y);
          self.root.out_svg('" width="' + w.toFixed(2) + '" height="' + h.toFixed(2) + '"/>\n');
        ;
        
        $writer = [id, $hash2(["startChar", "endChar"], {"startChar": start_offset, "endChar": stop_offset})];
        $send(self.interactive_elements, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, $Abc2Svg__anno_stop$33.$$arity = 7);
      return (Opal.def(self, '$_mk_id', $Abc2Svg__mk_id$34 = function $$_mk_id(music_type, start_offset, end_offset) {
        var self = this;

        return "" + "_" + (music_type) + "_" + (start_offset) + "_" + (end_offset) + "_"
      }, $Abc2Svg__mk_id$34.$$arity = 3), nil) && '_mk_id';
    })($nesting[0], null, $nesting)
  })($nesting[0], $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["version-prod"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$year', '$now']);
  
  Opal.const_set($nesting[0], 'VERSION', "V_1.13-7-g9cb82600");
  Opal.const_set($nesting[0], 'SCHEMA_VERSION', "https://zupfnoter.weichel21.de/schema/zupfnoter-config_1.0.json");
  return Opal.const_set($nesting[0], 'COPYRIGHT', "" + "© " + ($$($nesting, 'Time').$now().$year()) + " https://www.zupfnoter.de");
};

// compiled for Zupfnoter 2018-08-25 09:35:30 +0200
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// abc2svg - abc2svg.js
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

// start of the abc2svg object
abc2svg = {

// constants
    C: {
	BLEN: 1536,

	// symbol types
	BAR: 0,
	CLEF: 1,
	CUSTOS: 2,
	GRACE: 4,
	KEY: 5,
	METER: 6,
	MREST: 7,
	NOTE: 8,
	PART: 9,
	REST: 10,
	SPACE: 11,
	STAVES: 12,
	STBRK: 13,
	TEMPO: 14,
	BLOCK: 16,
	REMARK: 17,

	// note heads
	FULL: 0,
	EMPTY: 1,
	OVAL: 2,
	OVALBARS: 3,
	SQUARE: 4,

	// slur/tie types (3 + 1 bits)
	SL_ABOVE: 0x01,
	SL_BELOW: 0x02,
	SL_AUTO: 0x03,
	SL_HIDDEN: 0x04,
	SL_DOTTED: 0x08		// (modifier bit)
    },

// start of the Abc object
  Abc: function(user) {
	"use strict";

    // constants
    var	C = abc2svg.C;

	// mask some unsafe functions
    var	require = empty_function,
	system = empty_function,
	write = empty_function,
	XMLHttpRequest = empty_function;

	this.user = user

// -- constants --

// staff system
var	OPEN_BRACE = 0x01,
	CLOSE_BRACE = 0x02,
	OPEN_BRACKET = 0x04,
	CLOSE_BRACKET = 0x08,
	OPEN_PARENTH = 0x10,
	CLOSE_PARENTH = 0x20,
	STOP_BAR = 0x40,
	FL_VOICE = 0x80,
	OPEN_BRACE2 = 0x0100,
	CLOSE_BRACE2 = 0x0200,
	OPEN_BRACKET2 = 0x0400,
	CLOSE_BRACKET2 = 0x0800,
	MASTER_VOICE = 0x1000,

	IN = 96,		// resolution 96 PPI
	CM = 37.8,		// 1 inch = 2.54 centimeter
	YSTEP = 256		/* number of steps for y offsets */

// error texts
var errs = {
	bad_char: "Bad character '$1'",
	bad_val: "Bad value in $1",
	bar_grace: "Cannot have a bar in grace notes",
	ignored: "$1: inside tune - ignored",
	misplaced: "Misplaced '$1' in %%staves",
	must_note: "!$1! must be on a note",
	must_note_rest: "!$1! must be on a note or a rest",
	nonote_vo: "No note in voice overlay",
	not_enough_n: 'Not enough notes/rests for %%repeat',
	not_enough_m: 'Not enough measures for %%repeat',
	not_ascii: "Not an ASCII character"
}

var	glovar = {
		meter: {
			type: C.METER,		// meter in tune header
			wmeasure: 1,		// no M:
			a_meter: []		// default: none
		}
	},
	info = {},			// information fields
	mac = {},			// macros (m:)
	maci = new Int8Array(128),	// first letter of macros
	parse = {
		ctx: {},
		prefix: '%',
		state: 0,
		line: new scanBuf()
	},
	psvg			// PostScript

// utilities
function clone(obj, lvl) {
	if (!obj)
		return obj
	var tmp = new obj.constructor()
	for (var k in obj)
	    if (obj.hasOwnProperty(k)) {
		if (lvl && typeof obj[k] == 'object')
			tmp[k] = clone(obj[k], lvl - 1)
		else
			tmp[k] = obj[k]
	    }
	return tmp
}

function errbld(sev, txt, fn, idx) {
	var i, j, l, c, h

	if (user.errbld) {
		switch (sev) {
		case 0: sev = "warn"; break
		case 1: sev = "error"; break
		default: sev= "fatal"; break
		}
		user.errbld(sev, txt, fn, idx)
		return
	}
	if (idx != undefined && idx >= 0) {
		i = l = 0
		while (1) {
			j = parse.file.indexOf('\n', i)
			if (j < 0 || j > idx)
				break
			l++;
			i = j + 1
		}
		c = idx - i
	}
	h = ""
	if (fn) {
		h = fn
		if (l)
			h += ":" + (l + 1) + ":" + (c + 1);
		h += " "
	}
	switch (sev) {
	case 0: h += "Warning: "; break
	case 1: h += "Error: "; break
	default: h += "Internal bug: "; break
	}
	user.errmsg(h + txt, l, c)
}

function error(sev, s, msg, a1, a2, a3, a4) {
	var i, j, regex, tmp

	if (user.textrans) {
		tmp = user.textrans[msg]
		if (tmp)
			msg = tmp
	}
	if (arguments.length > 3)
		msg = msg.replace(/\$./g, function(a) {
			switch (a) {
			case '$1': return a1
			case '$2': return a2
			case '$3': return a3
			default  : return a4
			}
		})
	if (s && s.fname)
		errbld(sev, msg, s.fname, s.istart)
	else
		errbld(sev, msg)
}

// scanning functions
function scanBuf() {
//	this.buffer = buffer
	this.index = 0;

	scanBuf.prototype.char = function() {
		return this.buffer[this.index]
	}
	scanBuf.prototype.next_char = function() {
		return this.buffer[++this.index]
	}
	scanBuf.prototype.get_int = function() {
		var	val = 0,
			c = this.buffer[this.index]
		while (c >= '0' && c <= '9') {
			val = val * 10 + Number(c);
			c = this.next_char()
		}
		return val
	}
}

function syntax(sev, msg, a1, a2, a3, a4) {
    var	s = {
		fname: parse.fname,
		istart: parse.istart + parse.line.index
	}

	error(sev, s, msg, a1, a2, a3, a4)
}

// inject javascript code
function js_inject(js) {
	if (!/eval *\(|Function|setTimeout|setInterval/.test(js))
		eval('"use strict"\n' + js)
	else
		syntax(1, "Unsecure code")
}
// abc2svg - deco.js - decorations
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

var	dd_tb = {},		// definition of the decorations
	a_de,			// array of the decoration elements
	od		// ottava: index = type + staff, value = counter + voice number

// decorations - populate with standard decorations
var decos = {
	dot: "0 stc 5 1 1",
	tenuto: "0 emb 5 3 3",
	slide: "1 sld 3 7 0",
	arpeggio: "2 arp 12 10 0",
	roll: "3 roll 7 6 6",
	fermata: "3 hld 12 7 7",
	emphasis: "3 accent 7 4 4",
	lowermordent: "3 lmrd 10 5 5",
	coda: "3 coda 24 10 10",
	uppermordent: "3 umrd 10 5 5",
	segno: "3 sgno 22 8 8",
	trill: "3 trl 14 5 5",
	upbow: "3 upb 10 5 5",
	downbow: "3 dnb 9 5 5",
	gmark: "3 grm 6 5 5",
	wedge: "3 wedge 8 3 3",		// (staccatissimo or spiccato)
	turnx: "3 turnx 10 0 5",
	breath: "3 brth 0 1 20",
	longphrase: "3 lphr 0 1 1",
	mediumphrase: "3 mphr 0 1 1",
	shortphrase: "3 sphr 0 1 1",
	invertedfermata: "3 hld 12 7 7",
	invertedturn: "3 turn 10 0 5",
	invertedturnx: "3 turnx 10 0 5",
	"0": "3 fng 8 3 3 0",
	"1": "3 fng 8 3 3 1",
	"2": "3 fng 8 3 3 2",
	"3": "3 fng 8 3 3 3",
	"4": "3 fng 8 3 3 4",
	"5": "3 fng 8 3 3 5",
	plus: "3 dplus 7 3 3",
	"+": "3 dplus 7 3 3",
	accent: "3 accent 6 4 4",
	">": "3 accent 6 4 4",
	marcato: "3 marcato 9 3 3",
	"^": "3 marcato 9 3 3",
	mordent: "3 lmrd 10 5 5",
	open: "3 opend 10 3 3",
	snap: "3 snap 14 3 3",
	thumb: "3 thumb 14 3 3",
	dacapo: "3 dacs 16 20 20 Da Capo",
	dacoda: "3 dacs 16 20 20 Da Coda",
	"D.C.": "3 dacs 16 10 10 D.C.",
	"D.S.": "3 dacs 16 10 10 D.S.",
	"D.C.alcoda": "3 dacs 16 38 38 D.C. al Coda",
	"D.S.alcoda": "3 dacs 16 38 38 D.S. al Coda",
	"D.C.alfine": "3 dacs 16 38 38 D.C. al Fine",
	"D.S.alfine": "3 dacs 16 38 38 D.S. al Fine",
	fine: "3 dacs 16 10 10 Fine",
	turn: "3 turn 10 0 5",
	"trill(": "3 ltr 8 0 0",
	"trill)": "3 ltr 8 0 0",
	f: "6 pf 18 1 7",
	ff: "6 pf 18 2 10",
	fff: "6 pf 18 4 13",
	ffff: "6 pf 18 6 16",
	mf: "6 pf 18 6 13",
	mp: "6 pf 18 6 16",
	p: "6 pf 18 2 8",
	pp: "6 pf 18 5 14",
	ppp: "6 pf 18 8 20",
	pppp: "6 pf 18 10 25",
	pralltriller: "3 umrd 10 5 5",
	sfz: '6 sfz 18 4 10 ""',
	ped: "4 ped 20 0 0",
	"ped-up": "4 pedoff 20 0 0",
	"crescendo(": "7 cresc 18 0 0",
	"crescendo)": "7 cresc 18 0 0",
	"<(": "7 cresc 18 0 0",
	"<)": "7 cresc 18 0 0",
	"diminuendo(": "7 dim 18 0 0",
	"diminuendo)": "7 dim 18 0 0",
	">(": "7 dim 18 0 0",
	">)": "7 dim 18 0 0",
	"-(": "8 gliss 0 0 0",
	"-)": "8 gliss 0 0 0",
	"~(": "8 glisq 0 0 0",
	"~)": "8 glisq 0 0 0",
	"8va(": "3 8va 10 0 0",
	"8va)": "3 8va 10 0 0",
	"8vb(": "4 8vb 10 0 0",
	"8vb)": "4 8vb 10 0 0",
	"15ma(": "3 15ma 10 0 0",
	"15ma)": "3 15ma 10 0 0",
	"15mb(": "4 15mb 10 0 0",
	"15mb)": "4 15mb 10 0 0",
// internal
//	color: "10 0 0 0 0",
	invisible: "32 0 0 0 0",
	beamon: "33 0 0 0 0",
	trem1: "34 0 0 0 0",
	trem2: "34 0 0 0 0",
	trem3: "34 0 0 0 0",
	trem4: "34 0 0 0 0",
	xstem: "35 0 0 0 0",
	beambr1: "36 0 0 0 0",
	beambr2: "36 0 0 0 0",
	rbstop: "37 0 0 0 0",
	"/": "38 0 0 6 6",
	"//": "38 0 0 6 6",
	"///": "38 0 0 6 6",
	"beam-accel": "39 0 0 0 0",
	"beam-rall": "39 0 0 0 0",
	stemless: "40 0 0 0 0",
	rbend: "41 0 0 0 0"},

	// types of decoration per function
	f_near = [true, true, true],
	f_note = [false, false, false, true, true, true, false, false, true],
	f_staff = [false, false, false, false, false, false, true, true]

/* -- get the max/min vertical offset -- */
function y_get(st, up, x, w) {
	var	y,
		p_staff = staff_tb[st],
		i = (x / realwidth * YSTEP) | 0,
		j = ((x + w) / realwidth * YSTEP) | 0

	if (i < 0)
		i = 0
	if (j >= YSTEP) {
		j = YSTEP - 1
		if (i > j)
			i = j
	}
	if (up) {
		y = p_staff.top[i++]
		while (i <= j) {
			if (y < p_staff.top[i])
				y = p_staff.top[i];
			i++
		}
	} else {
		y = p_staff.bot[i++]
		while (i <= j) {
			if (y > p_staff.bot[i])
				y = p_staff.bot[i];
			i++
		}
	}
	return y
}

/* -- adjust the vertical offsets -- */
function y_set(st, up, x, w, y) {
	var	p_staff = staff_tb[st],
		i = (x / realwidth * YSTEP) | 0,
		j = ((x + w) / realwidth * YSTEP) | 0

	/* (may occur when annotation on 'y' at start of an empty staff) */
	if (i < 0)
		i = 0
	if (j >= YSTEP) {
		j = YSTEP - 1
		if (i > j)
			i = j
	}
	if (up) {
		while (i <= j) {
			if (p_staff.top[i] < y)
				p_staff.top[i] = y;
			i++
		}
	} else {
		while (i <= j) {
			if (p_staff.bot[i] > y)
				p_staff.bot[i] = y;
			i++
		}
	}
}

/* -- get the staff position of the dynamic and volume marks -- */
function up_p(s, pos) {
	switch (pos) {
	case C.SL_ABOVE:
		return true
	case C.SL_BELOW:
		return false
	}
	if (s.multi && s.multi != 0)
		return s.multi > 0
	if (!s.p_v.have_ly)
		return false

	/* above if the lyrics are below the staff */
	return s.pos.voc != C.SL_ABOVE
}

/* -- drawing functions -- */
/* 2: special case for arpeggio */
function d_arp(de) {
	var	m, h, dx,
		s = de.s,
		dd = de.dd,
		xc = 5

	if (s.type == C.NOTE) {
		for (m = 0; m <= s.nhd; m++) {
			if (s.notes[m].acc) {
				dx = 5 + s.notes[m].shac
			} else {
				dx = 6 - s.notes[m].shhd
				switch (s.head) {
				case C.SQUARE:
					dx += 3.5
					break
				case C.OVALBARS:
				case C.OVAL:
					dx += 2
					break
				}
			}
			if (dx > xc)
				xc = dx
		}
	}
	h = 3 * (s.notes[s.nhd].pit - s.notes[0].pit) + 4;
	m = dd.h			/* minimum height */
	if (h < m)
		h = m;

	de.has_val = true;
	de.val = h;
//	de.x = s.x - xc;
	de.x -= xc;
	de.y = 3 * (s.notes[0].pit - 18) - 3
}

/* 7: special case for crescendo/diminuendo */
function d_cresc(de) {
	if (de.ldst)			// skip start of deco
		return
	var	s, dd, dd2, up, x, dx, x2, i,
		s2 = de.s,
		de2 = de.start,		/* start of the deco */
		de2_prev, de_next;

	s = de2.s;
	x = s.x + 3;
	i = de2.ix
	if (i > 0)
		de2_prev = a_de[i - 1];

	de.st = s2.st;
	de.lden = false;		/* old behaviour */
	de.has_val = true;
	up = up_p(s2, s2.pos.dyn)
	if (up)
		de.up = true

	// shift the starting point if any dynamic mark on the left
	if (de2_prev && de2_prev.s == s
	 && ((de.up && !de2_prev.up)
	  || (!de.up && de2_prev.up))) {
		dd2 = de2_prev.dd
		if (f_staff[dd2.func]) {	// if dynamic mark
			x2 = de2_prev.x + de2_prev.val + 4
			if (x2 > x)
				x = x2
		}
	}

	if (de.defl.noen) {		/* if no decoration end */
		dx = de.x - x
		if (dx < 20) {
			x = de.x - 20 - 3;
			dx = 20
		}
	} else {

		// shift the ending point if any dynamic mark on the right
		x2 = s2.x;
		de_next = a_de[de.ix + 1]
		if (de_next
		 && de_next.s == s
		 && ((de.up && !de_next.up)
		  || (!de.up && de_next.up))) {
			dd2 = de_next.dd
			if (f_staff[dd2.func])	// if dynamic mark
				x2 -= 5
		}
		dx = x2 - x - 4
		if (dx < 20) {
			x -= (20 - dx) * .5;
			dx = 20
		}
	}

	de.val = dx;
	de.x = x;
	de.y = y_get(de.st, up, x, dx)
	if (!up) {
		dd = de.dd;
		de.y -= dd.h
	}
	/* (y_set is done later in draw_deco_staff) */
}

/* 0: near the note (dot, tenuto) */
function d_near(de) {
	var	y, up,
		s = de.s,
		dd = de.dd

	if (dd.str) {			// annotation like decoration
//		de.x = s.x;
//		de.y = s.y;
		return
	}
	if (s.multi)
		up = s.multi > 0
	else
		up = s.stem < 0
	if (up)
		y = s.ymx | 0
	else
		y = (s.ymn - dd.h) | 0
	if (y > -6 && y < 24) {
		if (up)
			y += 3;
		y = (((y + 6) / 6) | 0) * 6 - 6		/* between lines */
	}
	if (up)
		s.ymx = y + dd.h
	else
		s.ymn = y;
	de.y = y
//	de.x = s.x + s.notes[s.stem >= 0 ? 0 : s.nhd].shhd
	if (s.type == C.NOTE)
		de.x += s.notes[s.stem >= 0 ? 0 : s.nhd].shhd
	if (dd.name[0] == 'd'			/* if dot decoration */
	 && s.nflags >= -1) {			/* on stem */
		if (up) {
			if (s.stem > 0)
				de.x += 3.5	// stem_xoff
		} else {
			if (s.stem < 0)
				de.x -= 3.5
		}
	}
}

/* 6: dynamic marks */
function d_pf(de) {
	var	dd2, x2, str, x, up,
		s = de.s,
		dd = de.dd,
		de_prev;

	de.val = dd.wl + dd.wr;
	up = up_p(s, s.pos.vol)
	if (up)
		de.up = true;
	x = s.x - dd.wl
	if (de.ix > 0) {
		de_prev = a_de[de.ix - 1]
		if (de_prev.s == s
		 && ((de.up && !de_prev.up)
		  || (!de.up && de_prev.up))) {
			dd2 = de_prev.dd
			if (f_staff[dd2.func]) {	/* if dynamic mark */
				x2 = de_prev.x + de_prev.val + 4;
				if (x2 > x)
					x = x2
			}
		}
	}

	de.x = x;
	de.y = y_get(s.st, up, x, de.val)
	if (!up)
		de.y -= dd.h
	/* (y_set is done later in draw_deco_staff) */
}

/* 1: special case for slide */
function d_slide(de) {
	var	m, dx,
		s = de.s,
		yc = s.notes[0].pit,
		xc = 5

	for (m = 0; m <= s.nhd; m++) {
		if (s.notes[m].acc) {
			dx = 4 + s.notes[m].shac
		} else {
			dx = 5 - s.notes[m].shhd
			switch (s.head) {
			case C.SQUARE:
				dx += 3.5
				break
			case C.OVALBARS:
			case C.OVAL:
				dx += 2
				break
			}
		}
		if (s.notes[m].pit <= yc + 3 && dx > xc)
			xc = dx
	}
//	de.x = s.x - xc;
	de.x -= xc;
	de.y = 3 * (yc - 18)
}

/* 5: special case for long trill */
function d_trill(de) {
	if (de.ldst)
		return
	var	dd, up, y, w, tmp,
		s2 = de.s,
		st = s2.st,
		s = de.start.s,
		x = s.x

	if (de.prev) {			// hack 'tr~~~~~'
		x = de.prev.x + 10;
		y = de.prev.y
	}
	de.st = st

	if (de.dd.func != 4) {		// if not below
		switch (de.dd.glyph) {
		case "8va":
		case "15ma":
			up = 1
			break
		default:
			up = s2.multi >= 0
			break
		}
	}
	if (de.defl.noen) {		/* if no decoration end */
		w = de.x - x
		if (w < 20) {
			x = de.x - 20 - 3;
			w = 20
		}
	} else {
		w = s2.x - x - 6
		if (s2.type == C.NOTE)
			w -= 6
		if (w < 20) {
			x -= (20 - w) * .5;
			w = 20
		}
	}
	dd = de.dd;
	if (!y)
		y = y_get(st, up, x, w)
	if (up) {
		tmp = staff_tb[s.st].topbar + 2
		if (y < tmp)
			y = tmp
	} else {
		y -= dd.h;
		tmp = staff_tb[s.st].botbar - 2
		if (y > tmp)
			y = tmp
	}
	de.lden = false;
	de.has_val = true;
	de.val = w;
	de.x = x;
	de.y = y
	if (up)
		y += dd.h;
	y_set(st, up, x, w, y)
	if (up)
		s.ymx = s2.ymx = y
	else
		s.ymn = s2.ymn = y
}

/* 3, 4: above (or below) the staff */
function d_upstaff(de) {

	// don't treat here the long decorations
	if (de.ldst)			// if long deco start
		return
	if (de.start) {			// if long decoration
		d_trill(de)
		return
	}
	var	yc, up, inv,
		s = de.s,
		dd = de.dd,
		x = s.x,
		w = dd.wl + dd.wr,
		stafft = staff_tb[s.st].topbar + 2,
		staffb = staff_tb[s.st].botbar - 2

	if (s.nhd)
		x += s.notes[s.stem >= 0 ? 0 : s.nhd].shhd;
	up = -1
	if (dd.func == 4) {		// below
		up = 0
	} else if (s.pos) {
		switch (s.pos.orn) {
		case C.SL_ABOVE:
			up = 1
			break
		case C.SL_BELOW:
			up = 0
			break
		}
	}

	switch (dd.glyph) {
	case "accent":
	case "roll":
		if (!up
		 || (up < 0
		  && (s.multi < 0
		   || (!s.multi && s.stem > 0)))) {
			yc = y_get(s.st, false, s.x - dd.wl, w)
			if (yc > staffb)
				yc = staffb;
			yc -= dd.h;
			y_set(s.st, false, s.x, 0, yc);
			inv = true;
			s.ymn = yc
		} else {
			yc = y_get(s.st, true, s.x, 0)
			if (yc < stafft)
				yc = stafft;
			y_set(s.st, true, s.x - dd.wl, w, yc + dd.h);
			s.ymx = yc + dd.h
		}
		break
	case "brth":
	case "lphr":
	case "mphr":
	case "sphr":
		yc = stafft + 1
		if (dd.glyph == "brth" && yc < s.ymx)
			yc = s.ymx
		for (s = s.ts_next; s; s = s.ts_next)
			if (s.seqst)
				break
		x += ((s ? s.x : realwidth) - x) * .45
		break
	default:
		if (dd.name.indexOf("invert") == 0)
			inv = true
		if (dd.name != "invertedfermata"
		 && (up > 0
		  || (up < 0 && s.multi >= 0))) {
			yc = y_get(s.st, true, s.x - dd.wl, w) + 2
			if (yc < stafft)
				yc = stafft;
			y_set(s.st, true, s.x - dd.wl, w, yc + dd.h);
			s.ymx = yc + dd.h
		} else {
			yc = y_get(s.st, false, s.x - dd.wl, w) - 2
			if (yc > staffb)
				yc = staffb;
			yc -= dd.h;
			y_set(s.st, false, s.x - dd.wl, w, yc)
			if (dd.name == "fermata")
				inv = true;
			s.ymn = yc
		}
		break
	}
	if (inv) {
		yc += dd.h;
		de.inv = true
	}
	de.x = x;
	de.y = yc
}

/* deco function table */
var func_tb = [
	d_near,		/* 0 - near the note */
	d_slide,	/* 1 */
	d_arp,		/* 2 */
	d_upstaff,	/* 3 - tied to note */
	d_upstaff,	/* 4 (below the staff) */
	d_trill,	/* 5 */
	d_pf,		/* 6 - tied to staff (dynamic marks) */
	d_cresc		/* 7 */
]

// add a decoration
/* syntax:
 *	%%deco <name> <c_func> <glyph> <h> <wl> <wr> [<str>]
 */
function deco_add(param) {
	var dv = param.match(/(\S*)\s+(.*)/);
	decos[dv[1]] = dv[2]
}

// define a decoration
function deco_def(nm) {
    var a, dd, dd2, name2, c, i, elts, str,
	text = decos[nm]

	if (!text) {
		if (cfmt.decoerr)
			error(1, null, "Unknown decoration '$1'", nm)
		return //undefined
	}

	// extract the values
	a = text.match(/(\d+)\s+(.+?)\s+([0-9.]+)\s+([0-9.]+)\s+([0-9.]+)/)
	if (!a) {
		error(1, null, "Invalid decoration '$1'", nm)
		return //undefined
	}
	var	c_func = Number(a[1]),
//		glyph = a[2],
		h = parseFloat(a[3]),
		wl = parseFloat(a[4]),
		wr = parseFloat(a[5])

	if (isNaN(c_func)) {
		error(1, null, "%%deco: bad C function value '$1'", a[1])
		return //undefined
	}
	if ((c_func < 0 || c_func > 10)
	 && (c_func < 32 || c_func > 41)) {
		error(1, null, "%%deco: bad C function index '$1'", c_func)
		return //undefined
	}
	if (h < 0 || wl < 0 || wr < 0) {
		error(1, null, "%%deco: cannot have a negative value '$1'", text)
		return //undefined
	}
	if (h > 50 || wl > 80 || wr > 80) {
		error(1, null, "%%deco: abnormal h/wl/wr value '$1'", text)
		return //undefined
	}

	// create/redefine the decoration
	dd = dd_tb[nm]
	if (!dd) {
		dd = {
			name: nm
		}
		dd_tb[nm] = dd
	}

	/* set the values */
	dd.func = dd.name.indexOf("head-") == 0 ? 9 : c_func;
	dd.glyph = a[2];
	dd.h = h;
	dd.wl = wl;
	dd.wr = wr;
	str = text.replace(a[0], '').trim()
	if (str) {				// optional string
		if (str[0] == '"')
			str = str.slice(1, -1);
		dd.str = str
	}

	/* compatibility */
	if (dd.func == 6 && dd.str == undefined)
		dd.str = dd.name

	// link the start and end of long decorations
	c = dd.name.slice(-1)
	if (c == '(' ||
	    (c == ')' && dd.name.indexOf('(') < 0)) {
		name2 = dd.name.slice(0, -1) + (c == '(' ? ')' : '(');
		dd2 = dd_tb[name2]
		if (dd2) {
			if (c == '(') {
				dd.dd_en = dd2;
				dd2.dd_st = dd
			} else {
				dd.dd_st = dd2;
				dd2.dd_en = dd
			}
		} else {
			dd2 = deco_def(name2)
			if (!dd2)
				return //undefined
		}
	}
	return dd
}

/* -- convert the decorations -- */
function deco_cnv(a_dcn, s, prev) {
	var	i, j, dd, dcn, note,
		nd = a_dcn.length

	for (i = 0; i < nd; i++) {
		dcn = a_dcn[i];
		dd = dd_tb[dcn]
		if (!dd) {
			dd = deco_def(dcn)
			if (!dd)
				continue
		}

		/* special decorations */
		switch (dd.func) {
		case 0:			// near
			if (s.type == C.BAR && dd.name == "dot") {
				s.bar_dotted = true
				break
			}
			// fall thru
		case 1:			// slide
		case 2:			// arp
//			if (s.type != C.NOTE && s.type != C.REST) {
			if (!s.notes) {
				error(1, s,
					errs.must_note_rest, dd.name)
				continue
			}
			break
		case 8:			// gliss
			if (s.type != C.NOTE) {
				error(1, s,
					errs.must_note, dd.name)
				continue
			}
			note = s.notes[s.nhd] // move to the upper note of the chord
			if (!note.a_dcn)
				note.a_dcn = []
			note.a_dcn.push(dd.name)
			continue
		case 9:			// alternate head
			if (!s.notes) {
				error(1, s,
					errs.must_note_rest, dd.name)
				continue
			}

			// move the alternate head of the chord to the notes
			for (j = 0; j <= s.nhd; j++) {
				note = s.notes[j]
				if (!note.a_dcn)
					note.a_dcn = []
				note.a_dcn.push(dd.name)
			}
			continue
		default:
			break
		case 10:		/* color */
			if (s.notes) {
				for (j = 0; j <= s.nhd; j++)
					s.notes[j].color = dd.name
			} else {
				s.color = dd.name
			}
			continue
		case 32:		/* invisible */
			s.invis = true
			continue
		case 33:		/* beamon */
			if (s.type != C.BAR) {
				error(1, s, "!beamon! must be on a bar")
				continue
			}
			s.beam_on = true
			continue
		case 34:		/* trem1..trem4 */
			if (s.type != C.NOTE
			 || !prev
			 || prev.type != C.NOTE
			 || s.nflags != prev.nflags) {
				error(1, s,
					"!$1! must be on the last of a couple of notes",
					dd.name)
				continue
			}
			s.trem2 = true;
			s.beam_end = true;
//			s.beam_st = false;
			prev.trem2 = true;
			prev.beam_st = true;
//			prev.beam_end = false;
			s.ntrem = prev.ntrem = Number(dd.name[4]);
			prev.nflags = --s.nflags;
			prev.head = ++s.head
			if (s.nflags > 0) {
				s.nflags += s.ntrem;
			} else {
				if (s.nflags <= -2) {
					s.stemless = true;
					prev.stemless = true
				}
				s.nflags = s.ntrem;
			}
			prev.nflags = s.nflags
			for (j = 0; j <= s.nhd; j++)
				s.notes[j].dur *= 2;
			for (j = 0; j <= prev.nhd; j++)
				prev.notes[j].dur *= 2
			continue
		case 35:		/* xstem */
			if (s.type != C.NOTE) {
				error(1, s, "!xstem! must be on a note")
				continue
			}
			s.xstem = true;
			s.nflags = 0		// beam break
			continue
		case 36:		/* beambr1 / beambr2 */
			if (s.type != C.NOTE) {
				error(1, s, errs.must_note, dd.name)
				continue
			}
			if (dd.name[6] == '1')
				s.beam_br1 = true
			else
				s.beam_br2 = true
			continue
		case 37:		/* rbstop */
			s.rbstop = 1	// open
			continue
		case 38:		/* /, // and /// = tremolo */
			if (s.type != C.NOTE) {
				error(1, s, errs.must_note, dd.name)
				continue
			}
			s.trem1 = true;
			s.ntrem = dd.name.length	/* 1, 2 or 3 */
			if (s.nflags > 0)
				s.nflags += s.ntrem
			else
				s.nflags = s.ntrem
			continue
		case 39:		/* beam-accel/beam-rall */
			if (s.type != C.NOTE) {
				error(1, s, errs.must_note, dd.name)
				continue
			}
			s.feathered_beam = dd.name[5] == 'a' ? 1 : -1;
			continue
		case 40:		/* stemless */
			s.stemless = true
			continue
		case 41:		/* rbend */
			s.rbstop = 2	// with end
			continue
		}

		// add the decoration in the symbol
		if (!s.a_dd)
			s.a_dd = []
		s.a_dd.push(dd)
	}
}

/* -- update the x position of a decoration -- */
// used to center the rests
function deco_update(s, dx) {
	var	i, de,
		nd = a_de.length

	for (i = 0; i < nd; i++) {
		de = a_de[i]
		if (de.s == s)
			de.x += dx
	}
}

/* -- adjust the symbol width -- */
function deco_width(s) {
	var	dd, i,
		wl = 0,
		a_dd = s.a_dd,
		nd = a_dd.length

	for (i = 0; i < nd; i++) {
		dd =  a_dd[i]
		switch (dd.func) {
		case 1:			/* slide */
			if (wl < 7)
				wl = 7
			break
		case 2:			/* arpeggio */
			if (wl < 14)
				wl = 14
			break
		case 3:
			switch (dd.glyph) {
			case "brth":
			case "lphr":
			case "mphr":
			case "sphr":
				if (s.wr < 20)
					s.wr = 20
				break
			}
			break
		}
	}
	if (wl != 0 && s.prev && s.prev.type == C.BAR)
		wl -= 3
	return wl
}

/* -- draw the decorations -- */
/* (the staves are defined) */
function draw_all_deco() {
	if (a_de.length == 0)
		return
	var	de, de2, dd, s, note, f, st, x, y, y2, ym, uf, i, str, a,
		new_de = [],
		ymid = []

	if (!cfmt.dynalign) {
		st = nstaff;
		y = staff_tb[st].y
		while (--st >= 0) {
			y2 = staff_tb[st].y;
			ymid[st] = (y + 24 + y2) * .5;
			y = y2
		}
	}

	while (1) {
		de = a_de.shift()
		if (!de)
			break
		dd = de.dd
		if (!dd)
			continue		// deleted

		if (dd.dd_en)			// start of long decoration
			continue

		// handle the stem direction
		s = de.s
		f = dd.glyph;
		i = f.indexOf('/')
		if (i > 0) {
			if (s.stem >= 0)
				f = f.slice(0, i)
			else
				f = f.slice(i + 1)
		}

		// no voice scale if staff decoration
		if (f_staff[dd.func])
			set_sscale(s.st)
		else
			set_scale(s);

		st = de.st;
		if (!staff_tb[st].topbar)
			continue		// invisible staff
		x = de.x;
//		y = de.y + staff_tb[st].y / staff_tb[st].staffscale
		y = de.y + staff_tb[st].y

		// update the coordinates if head decoration
		if (de.m != undefined) {
			note = s.notes[de.m];
			x += note.shhd * stv_g.scale;

		/* center the dynamic marks between two staves */
/*fixme: KO when deco on other voice and same direction*/
		} else if (f_staff[dd.func] && !cfmt.dynalign
			&& ((de.up && st > 0)
			 || (!de.up && st < nstaff))) {
			if (de.up)
				ym = ymid[--st]
			else
				ym = ymid[st++];
			ym -= dd.h * .5
			if ((de.up && y < ym)
			 || (!de.up && y > ym)) {
//				if (s.st > st) {
//					while (s.st != st)
//						s = s.ts_prev
//				} else if (s.st < st) {
//					while (s.st != st)
//						s = s.ts_next
//				}
				y2 = y_get(st, !de.up, de.x, de.val)
					+ staff_tb[st].y
				if (de.up)
					y2 -= dd.h
//fixme: y_set is not used later!
				if ((de.up && y2 > ym)
				 || (!de.up && y2 < ym)) {
					y = ym;
//					y_set(st, de.up, de.x, de.val,
//						(de.up ? y + dd.h : y)
//							- staff_tb[st].y)
				}
			}
		}

		// check if user JS decoration
		uf = user[f]
		if (uf && typeof(uf) == "function") {
			uf(x, y, de)
			continue
		}

		// check if user PS definition
		if (psdeco(f, x, y, de))
			continue

		anno_start(s, 'deco')
//		if (de.flags.grace) {
//			g_open(x, y, 0, .7, de.inv ? -.7 : 0);
//			x = y = 0
//		} else
		if (de.inv) {
			g_open(x, y, 0, 1, -1);
			x = y = 0
		}
		if (de.has_val) {
			if (dd.func != 2	// if not !arpeggio!
			 || stv_g.st < 0)	// or not staff scale
// || voice_tb[s.v].scale != 1)
				out_deco_val(x, y, f, de.val / stv_g.scale, de.defl)
			else
				out_deco_val(x, y, f, de.val, de.defl)
			if (de.defl.noen)
				new_de.push(de.start)	// to be continued next line
		} else if (dd.str != undefined
			&& dd.str != 'sfz') {
			str = dd.str
			if (str[0] == '@') {
				a = str.match(/^@([0-9.-]+),([0-9.-]+);?/);
				x += Number(a[1]);
				y += Number(a[2]);
				str = str.replace(a[0], "")
			}
//			out_deco_str(x, y + de.dy,	// - dd.h * .2,
			out_deco_str(x, y,		// - dd.h * .2,
					f, str)
		} else if (de.lden) {
			out_deco_long(x, y, de)
		} else {
			xygl(x, y, f)
		}
		if (stv_g.g)
			g_close();
		anno_stop(s, 'deco')
	}

	// keep the long decorations which continue on the next line
	a_de = new_de
}

/* -- create the decorations and define the ones near the notes -- */
/* (the staves are not yet defined) */
/* (delayed output) */
/* this function must be called first as it builds the deco element table */
    var	ottava = {"8va(":1, "8va)":1, "15ma(":1, "15ma)":1,
		"8vb(":1, "8vb)":1, "15mb(":1, "15mb)":1}
function draw_deco_near() {
    var	s, g

	// update starting old decorations
	function ldeco_update(s) {
		var	i, de,
//			x = s.ts_prev.x + s.ts_prev.wr
			x = s.x - s.wl,
			nd = a_de.length

		for (i = 0; i < nd; i++) {
			de = a_de[i];
			de.ix = i;
			de.s.x = de.x = x;
			de.defl.nost = true
		}
	}

	/* -- create the deco elements, and treat the near ones -- */
	function create_deco(s) {
		var	dd, k, l, pos, de, x,
			nd = s.a_dd.length

/*fixme:pb with decorations above the staff*/
		for (k = 0; k < nd; k++) {
			dd = s.a_dd[k]

			/* check if hidden */
			switch (dd.func) {
			default:
				pos = 0
				break
			case 3:				/* d_upstaff */
			case 4:
//fixme:trill does not work yet
			case 5:				/* trill */
				if (ottava[dd.name]) {	// only one ottava per staff
					x = dd.name.slice(0, -1) + s.st.toString()
					if (od[x]) {
						if (dd.name[dd.name.length - 1] == '(') {
							od[x]++
							continue
						}
						od[x]--
						if (s.v + 1 != od[x] >> 8
						 || !od[x])
							continue
						od[x] &= 0xff
					} else if (dd.name[dd.name.length - 1] == '(') {
						od[x] = 1 + ((s.v + 1) << 8)
					}
				}
				pos = s.pos.orn
				break
			case 6:				/* d_pf */
				pos = s.pos.vol
				break
			case 7:				/* d_cresc */
				pos = s.pos.dyn
				break
			}
			if (pos == C.SL_HIDDEN)
				continue

			de = {
				s: s,
				dd: dd,
				st: s.st,
				ix: a_de.length,
				defl: {},
				x: s.x,
				y: s.y,
//				dy: 0
			}
			a_de.push(de)
			if (dd.dd_en) {
				de.ldst = true
			} else if (dd.dd_st) {
//fixme: pb with "()"
				de.lden = true;
				de.defl.nost = true
			}

			if (!f_near[dd.func])	/* if not near the note */
				continue
			func_tb[dd.func](de)
		}
	} // create_deco()

	// create the decorations of note heads
	function create_dh(s, m) {
		var	f, str, de, uf, k, dcn, dd,
			note = s.notes[m],
			nd = note.a_dcn.length

		for (k = 0; k < nd; k++) {
			dcn = note.a_dcn[k];
			dd = dd_tb[dcn]
			if (!dd) {
				dd = deco_def(dcn)
				if (!dd)
					continue
			}

			switch (dd.func) {
			case 0:
			case 1:
			case 3:
			case 4:
			case 8:			// gliss
				break
			default:
//			case 2:			// arpeggio
//			case 5:			// trill
//			case 7:			// d_cresc
				error(1, null, "Cannot have !$1! on a head", dd.name)
				continue
			case 9:			// head replacement
				note.invis = true
				break
			case 10:		// color
				note.color = dd.name
				continue
			case 32:		// invisible
				note.invis = true
				continue
			case 40:		// stemless chord (abcm2ps behaviour)
				s.stemless = true
				continue
			}

//fixme: check if hidden?
			de = {
				s: s,
				dd: dd,
				st: s.st,
				m: m,
				ix: 0,
				defl: {},
				x: s.x,
				y: 3 * (note.pit - 18),
//				dy: 0
			}
			a_de.push(de)
			if (dd.dd_en) {
				de.ldst = true
			} else if (dd.dd_st) {
				de.lden = true;
				de.defl.nost = true
			}
		}
	} // create_dh()

	// create all decoration of a note (chord and heads)
	function create_all(s) {
		var m

		if (s.a_dd)
			create_deco(s)
		if (s.notes) {
			for (m = 0; m < s.notes.length; m++) {
				if (s.notes[m].a_dcn)
					create_dh(s, m)
			}
		}
	} // create_all()

	// link the long decorations
	function ll_deco() {
		var	i, j, de, de2, dd, dd2, v, s, st,
			n_de = a_de.length

		// add ending decorations
		for (i = 0; i < n_de; i++) {
			de = a_de[i]
			if (!de.ldst)	// not the start of long decoration
				continue
			dd = de.dd;
			dd2 = dd.dd_en;
			s = de.s;
			v = s.v			// search later in the voice
			for (j = i + 1; j < n_de; j++) {
				de2 = a_de[j]
				if (!de2.start
				 && de2.dd == dd2 && de2.s.v == v)
					break
			}
			if (j == n_de) {	// no end, search in the staff
				st = s.st;
				for (j = i + 1; j < n_de; j++) {
					de2 = a_de[j]
					if (!de2.start
					 && de2.dd == dd2 && de2.s.st == st)
						break
				}
			}
			if (j == n_de) {	// no end, insert one
				de2 = {
					s: de.s,
					st: de.st,
					dd: dd2,
					ix: a_de.length - 1,
					x: realwidth - 6,
					y: de.s.y,
					lden: true,
					defl: {
						noen: true
					}
				}
				if (de2.x < s.x + 10)
					de2.x = s.x + 10
				if (de.m != undefined)
					de2.m = de.m;
				a_de.push(de2)
			}
			de2.start = de;
			de2.defl.nost = de.defl.nost

			// handle 'tr~~~~~'
			if (dd.name == "trill("
			 && i > 0 && a_de[i - 1].dd.name == "trill")
				de2.prev = a_de[i - 1]
		}

		// add starting decorations
		for (i = 0; i < n_de; i++) {
			de2 = a_de[i]
			if (!de2.lden	// not the end of long decoration
			 || de2.start)	// start already found
				continue
			s = de2.s;
			de = {
				s: prev_scut(s),
				st: de2.st,
				dd: de2.dd.dd_st,
				ix: a_de.length - 1,
//				x: s.x - s.wl - 4,
				y: s.y,
				ldst: true
			}
			de.x = de.s.x
			if (de2.m != undefined)
				de.m = de2.m;
			a_de.push(de);
			de2.start = de
		}
	} // ll_deco

	// update the long decorations started in the previous line
	for (s = tsfirst ; s; s = s.ts_next) {
		switch (s.type) {
		case C.CLEF:
		case C.KEY:
		case C.METER:
			continue
		}
		break
	}
	if (a_de.length != 0)
		ldeco_update(s)

	for ( ; s; s = s.ts_next) {
		switch (s.type) {
		case C.BAR:
		case C.MREST:
		case C.NOTE:
		case C.REST:
		case C.SPACE:
			break
		case C.GRACE:
			for (g = s.extra; g; g = g.next)
				create_all(g)
		default:
			continue
		}
		create_all(s)
	}
	ll_deco()			// link the long decorations
}

/* -- define the decorations tied to a note -- */
/* (the staves are not yet defined) */
/* (delayed output) */
function draw_deco_note() {
	var	i, de, dd, f,
		nd = a_de.length

	for (i = 0; i < nd; i++) {
		de = a_de[i];
		dd = de.dd;
		f = dd.func
		if (f_note[f]
		 && de.m == undefined)
			func_tb[f](de)
	}
}

// -- define the music elements tied to the staff --
//	- decoration tied to the staves
//	- chord symbols
//	- repeat brackets
/* (the staves are not yet defined) */
/* (unscaled delayed output) */
function draw_deco_staff() {
	var	s, first_gchord, p_voice, x, y, w, i, v, de, dd,
		gch, gch2, ix, top, bot,
		minmax = new Array(nstaff),
		nd = a_de.length

	/* draw the repeat brackets */
	function draw_repbra(p_voice) {
		var s, s1, y, y2, i, p, w, wh, first_repeat;

		/* search the max y offset */
		y = staff_tb[p_voice.st].topbar + 25	// 20 (vert bar) + 5 (room)
		for (s = p_voice.sym; s; s = s.next) {
			if (s.type != C.BAR)
				continue
			if (!s.rbstart || s.norepbra)
				continue
/*fixme: line cut on repeat!*/
			if (!s.next)
				break
			if (!first_repeat) {
				first_repeat = s;
				set_font("repeat")
			}
			s1 = s
			for (;;) {
				if (!s.next)
					break
				s = s.next
				if (s.rbstop)
					break
			}
			y2 = y_get(p_voice.st, true, s1.x, s.x - s1.x)
			if (y < y2)
				y = y2

			/* have room for the repeat numbers */
			if (s1.text) {
				wh = strwh(s1.text);
				y2 = y_get(p_voice.st, true, s1.x + 4, wh[0]);
				y2 += wh[1]
				if (y < y2)
					y = y2
			}
			if (s.rbstart)
				s = s.prev
		}

		/* draw the repeat indications */
		s = first_repeat
		if (!s)
			return
		set_dscale(p_voice.st, true);
		y2 =  y * staff_tb[p_voice.st].staffscale
		for ( ; s; s = s.next) {
			if (!s.rbstart || s.norepbra)
				continue
			s1 = s
			while (1) {
				if (!s.next)
					break
				s = s.next
				if (s.rbstop)
					break
			}
			if (s1 == s)
				break
			x = s1.x
//			if (s1.bar_type[0] == ":")
//				x -= 4;
			if (s.type != C.BAR) {
				w = s.rbstop ? 0 : s.x - realwidth + 4
			} else if ((s.bar_type.length > 1	// if complex bar
				 && s.bar_type != "[]")
				|| s.bar_type == "]") {
//				if (s.bar_type == "]")
//					s.invis = true
//fixme:%%staves: cur_sy moved?
				if (s1.st > 0
				 && !(cur_sy.staves[s1.st - 1].flags & STOP_BAR))
					w = s.wl
				else if (s.bar_type.slice(-1) == ':')
					w = 12
				else if (s.bar_type[0] != ':')
//				      || s.bar_type == "]")
					w = 0		/* explicit repeat end */
				else
					w = 8
			} else {
				w = s.rbstop ? 0 : 8
			}
			w = (s.x - x - w)	// / staff_tb[p_voice.st].staffscale;

			if (!s.next		// 2nd ending at end of line
			 && !s.rbstop
			 && !p_voice.bar_start) { // continue on next line
				p_voice.bar_start = clone(s);
				p_voice.bar_start.type = C.BAR;
				p_voice.bar_start.bar_type = "["
				delete p_voice.bar_start.text;
				p_voice.bar_start.rbstart = 1
				delete p_voice.bar_start.a_gch
			}
			if (s1.text)
				xy_str(x + 4, y2 - gene.curfont.size - 3,
					s1.text);
			xypath(x, y2);
			if (s1.rbstart == 2)
				output += 'm0 20v-20';
			output+= 'h' + w.toFixed(2)
			if (s.rbstop == 2)
				output += 'v20';
			output += '"/>\n';
			y_set(s1.st, true, x, w, y + 2)

			if (s.rbstart)
				s = s.prev
		}
	} // draw_repbra()

	/* create the decorations tied to the staves */
	for (i = 0; i <= nstaff; i++)
		minmax[i] = {
			ymin: 0,
			ymax: 0
		}
	for (i = 0; i < nd; i++) {
		de = a_de[i];
		dd = de.dd
		if (!dd)		// if error
			continue
		if (!f_staff[dd.func]	/* if not tied to the staff */
		 || de.m != undefined)	// or head decoration
			continue
		func_tb[dd.func](de)
		if (dd.dd_en)		// if start
			continue
		if (cfmt.dynalign) {
			if (de.up) {
				if (de.y > minmax[de.st].ymax)
					minmax[de.st].ymax = de.y
			} else {
				if (de.y < minmax[de.st].ymin)
					minmax[de.st].ymin = de.y
			}
		}
	}

	/* and, if wanted, set them at a same vertical offset */
	for (i = 0; i < nd; i++) {
		de = a_de[i];
		dd = de.dd
		if (!dd)		// if error
			continue
		if (dd.dd_en		// if start
		 || !f_staff[dd.func])
			continue
		if (cfmt.dynalign) {
			if (de.up)
				y = minmax[de.st].ymax
			else
				y = minmax[de.st].ymin;
			de.y = y
		} else {
			y = de.y
		}
		if (de.up)
			y += dd.h;
		y_set(de.st, de.up, de.x, de.val, y)
	}

	// search the vertical offset for the chord symbols
	for (i = 0; i <= nstaff; i++)
		minmax[i] = {
			ymin: 0,
			ymax: 24
		}
	for (s = tsfirst; s; s = s.ts_next) {
		if (!s.a_gch)
			continue
		if (!first_gchord)
			first_gchord = s;
		gch2 = null
		for (ix = 0; ix < s.a_gch.length; ix++) {
			gch = s.a_gch[ix]
			if (gch.type != 'g')
				continue
			gch2 = gch	// chord closest to the staff
			if (gch.y < 0)
				break
		}
		if (gch2) {
			w = gch2.w
			if (gch2.y >= 0) {
				y = y_get(s.st, true, s.x, w)
				if (y > minmax[s.st].ymax)
					minmax[s.st].ymax = y
			} else {
				y = y_get(s.st, false, s.x, w)
				if (y < minmax[s.st].ymin)
					minmax[s.st].ymin = y
			}
		}
	}

	// draw the chord symbols if any
	if (first_gchord) {
		for (i = 0; i <= nstaff; i++) {
			bot = staff_tb[i].botbar;
			if (minmax[i].ymin > bot - 4)
				minmax[i].ymin = bot - 4
			top = staff_tb[i].topbar;
			if (minmax[i].ymax < top + 4)
				minmax[i].ymax = top + 4
		}
		set_dscale(-1)		/* restore the scale parameters */
		for (s = first_gchord; s; s = s.ts_next) {
			if (!s.a_gch)
				continue
			draw_gchord(s, minmax[s.st].ymin, minmax[s.st].ymax)
		}
	}

	/* draw the repeat brackets */
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (p_voice.second || !p_voice.sym)
			continue
		draw_repbra(p_voice)
	}
}

/* -- draw the measure bar numbers -- */
/* (scaled delayed output) */
function draw_measnb() {
	var	s, st, bar_num, x, y, w, any_nb, font_size,
		sy = cur_sy

	/* search the top staff */
	for (st = 0; st <= nstaff; st++) {
		if (sy.st_print[st])
			break
	}
	if (st > nstaff)
		return				/* no visible staff */
	set_dscale(st)

	/* leave the measure numbers as unscaled */
	if (staff_tb[st].staffscale != 1) {
		font_size = get_font("measure").size;
		param_set_font("measurefont", "* " +
			(font_size / staff_tb[st].staffscale).toString())
	}
	set_font("measure");

	s = tsfirst;				/* clef */
	bar_num = gene.nbar
	if (bar_num > 1) {
		if (cfmt.measurenb == 0) {
			any_nb = true;
			y = y_get(st, true, 0, 20)
			if (y < staff_tb[st].topbar + 14)
				y = staff_tb[st].topbar + 14;
			if (cfmt.measurebox)
				xy_str_b(0, y, bar_num.toString())
			else
				xy_str(0, y, bar_num.toString());
			y_set(st, true, 0, 20, y + gene.curfont.size + 2)
		} else if (bar_num % cfmt.measurenb == 0) {
			for ( ; ; s = s.ts_next) {
				switch (s.type) {
				case C.METER:
				case C.CLEF:
				case C.KEY:
				case C.STBRK:
					continue
				}
				break
			}
			while (s.st != st)
				s = s.ts_next

			// don't display the number twice
		     if (s.type != C.BAR || !s.bar_num) {
			if (s.prev && s.prev.type != C.CLEF)
				s = s.prev;
			x = s.x - s.wl;
			any_nb = true;
			w = cwid('0') * gene.curfont.swfac
			if (bar_num >= 10)
				w *= bar_num >= 100 ? 3 : 2
			if (cfmt.measurebox)
				w += 4;
			y = y_get(st, true, x, w)
			if (y < staff_tb[st].topbar + 6)
				y = staff_tb[st].topbar + 6;
			y += 2;
			if (cfmt.measurebox) {
				xy_str_b(x, y, bar_num.toString());
				y += 2;
				w += 3
			} else {
				xy_str(x, y, bar_num.toString())
			}
			y += gene.curfont.size;
			y_set(st, true, x, w, y);
			s.ymx = y
		     }
		}
	}

	for ( ; s; s = s.ts_next) {
		switch (s.type) {
		case C.STAVES:
			sy = s.sy
			for (st = 0; st < nstaff; st++) {
				if (sy.st_print[st])
					break
			}
			set_sscale(st)
			continue
		default:
			continue
		case C.BAR:
			if (!s.bar_num)
				continue
			break
		}

		bar_num = s.bar_num
		if (cfmt.measurenb == 0
		 || (bar_num % cfmt.measurenb) != 0
		 || !s.next)
			continue
		if (!any_nb)
			any_nb = true;
		w = cwid('0') * gene.curfont.swfac
		if (bar_num >= 10)
			w *= bar_num >= 100 ? 3 : 2
		if (cfmt.measurebox)
			w += 4;
		x = s.x - w * .4;
		y = y_get(st, true, x, w)
		if (y < staff_tb[st].topbar + 6)
			y = staff_tb[st].topbar + 6
		if (s.next.type == C.NOTE) {
			if (s.next.stem > 0) {
				if (y < s.next.ys - gene.curfont.size)
					y = s.next.ys - gene.curfont.size
			} else {
				if (y < s.next.y)
					y = s.next.y
			}
		}
		y += 2;
		if (cfmt.measurebox) {
			xy_str_b(x, y, bar_num.toString());
			y += 2;
			w += 3
		} else {
			xy_str(x, y, bar_num.toString())
		}
		y += gene.curfont.size;
		y_set(st, true, x, w, y);
		s.ymx = y
	}
	gene.nbar = bar_num

	if (font_size)
		param_set_font("measurefont", "* " + font_size.toString());
}

/* -- draw the note of the tempo -- */
function draw_notempo(s, x, y, dur, sc) {
	var	dx, p, dotx,
		elts = identify_note(s, dur),
		head = elts[0],
		dots = elts[1],
		nflags = elts[2]

//useless
//	// protection against end of container
//	if (stv_g.started) {
//		output += "</g>\n";
//		stv_g.started = false
//	}

	out_XYAB('<g transform="translate(X,Y) scale(F)">\n',
		x + 4, y + 5, sc)
	switch (head) {
	case C.OVAL:
		p = "HD"
		break
	case C.EMPTY:
		p = "Hd"
		break
	default:
		p = "hd"
		break
	}
	xygl(-posx, posy, p);
	dx = 4
	if (dots) {
		dotx = 9
		if (nflags > 0)
			dotx += 4
		switch (head) {
		case C.SQUARE:
			dotx += 3
			break
		case C.OVALBARS:
		case C.OVAL:
			dotx += 2
			break
		case C.EMPTY:
			dotx += 1
			break
		}
		dx = dotx * dots;
		dotx -= posx
		while (--dots >= 0) {
			xygl(dotx, posy, "dot");
			dotx += 3.5
		}
	}
	if (dur < C.BLEN) {
		if (nflags <= 0) {
			out_stem(-posx, posy, 21)		// stem height
		} else {
			out_stem(-posx, posy, 21, false, nflags)
			if (dx < 6)
				dx = 6
		}
	}
	output += '</g>\n'
	return (dx + 15) * sc
}

/* -- estimate the tempo width -- */
function tempo_width(s) {
	var	w = 0;

	set_font("tempo")
	if (s.tempo_str1)
		w = strwh(s.tempo_str1)[0]
	if (s.tempo_ca)
		w += strwh(s.tempo_ca)[0]
	if (s.tempo_notes)
		w += 10 * s.tempo_notes.length +
			6 + cwid(' ') * gene.curfont.swfac * 6 + 10
	if (s.tempo_str2)
		w += strwh(s.tempo_str2)[0]
	return w
}

/* - output a tempo --*/
function write_tempo(s, x, y) {
	var	j, dx,
		sc = .6 * gene.curfont.size / 15.0; //fixme: 15.0 = initial tempofont

	set_font("tempo")
	if (s.tempo_str1) {
		xy_str(x, y, s.tempo_str1);
		x += strwh(s.tempo_str1)[0] + 3
	}
	if (s.tempo_notes) {
		for (j = 0; j < s.tempo_notes.length; j++)
			x += draw_notempo(s, x, y, s.tempo_notes[j], sc);
		xy_str(x, y, "=");
		x += strwh("= ")[0]
		if (s.tempo_ca) {
			xy_str(x, y, s.tempo_ca);
			x += strwh(s.tempo_ca)[0]
		}
		if (s.tempo) {
			xy_str(x, y, s.tempo.toString());
			dx = cwid('0') * gene.curfont.swfac;
			x += dx + 5
			if (s.tempo >= 10) {
				x += dx
				if (s.tempo >= 100)
					x += dx
			}
		} else {
			x += draw_notempo(s, x, y, s.new_beat, sc)
		}
	}
	if (s.tempo_str2)
		xy_str(x, y, s.tempo_str2)

	// don't display anymore
	s.del = true
}

/* -- draw the parts and the tempo information -- */
/* (the staves are being defined) */
function draw_partempo(st, top) {
	var	s, some_part, some_tempo, h, w, y,
		dy = 0,		/* put the tempo indication at top */
		ht = 0

	/* get the minimal y offset */
	var	ymin = staff_tb[st].topbar + 8,
		dosh = 0,
		shift = 1,
		x = 0
	for (s = tsfirst; s; s = s.ts_next) {
		if (s.type != C.TEMPO || s.del)
			continue
		if (!some_tempo)
			some_tempo = s;
		w = tempo_width(s);
		y = y_get(st, true, s.x - 16, w)
		if (y > ymin)
			ymin = y
		if (x >= s.x - 16 && !(dosh & (shift >> 1)))
			dosh |= shift;
		shift <<= 1;
		x = s.x - 16 + w
	}
	if (some_tempo) {
		set_sscale(-1);
		set_font("tempo");
		ht = gene.curfont.size + 2 + 2;
		y = 2 - ht;
		h = y - ht
		if (dosh != 0)
			ht *= 2
		if (top < ymin + ht)
			dy = ymin + ht - top

		/* draw the tempo indications */
		for (s = some_tempo; s; s = s.ts_next) {
			if (s.type != C.TEMPO
			 || s.del)		// (displayed by %%titleformat)
				continue
			if (user.anno_start || user.anno_stop) {
				s.wl = 16;
				s.wr = 30;
				s.ymn = (dosh & 1) ? h : y;
				s.ymx = s.ymn + 14;
				anno_start(s)
			}
			write_tempo(s, s.x - 16, (dosh & 1) ? h : y);
			anno_stop(s);
			dosh >>= 1
		}
	}

	/* then, put the parts */
/*fixme: should reduce vertical space if parts don't overlap tempo...*/
	ymin = staff_tb[st].topbar + 8
	for (s = tsfirst; s; s = s.ts_next) {
		if (s.type != C.PART)
			continue
		if (!some_part) {
			some_part = s;
			set_font("parts");
			h = gene.curfont.size + 2 + 2
						/* + cfmt.partsspace ?? */
		}
		w = strwh(s.text)[0];
		y = y_get(st, true, s.x - 10, w + 3)
		if (ymin < y)
			ymin = y
	}
	if (some_part) {
		set_sscale(-1)
		if (top < ymin + h + ht)
			dy = ymin + h + ht - top

		for (s = some_part; s; s = s.ts_next) {
			if (s.type != C.PART)
				continue
			s.x -= 10;
			if (user.anno_start || user.anno_stop) {
				w = strwh(s.text)[0];
				s.wl = 0;
				s.wr = w;
				s.ymn = -ht - h;
				s.ymx = s.ymn + h;
				anno_start(s)
			}
			if (cfmt.partsbox)
				xy_str_b(s.x, 2 - ht - h, s.text)
			else
				xy_str(s.x, 2 - ht - h, s.text)
			anno_stop(s)
		}
	}
	return dy
}
// abc2svg - draw.js - draw functions
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

// constants
var	STEM_MIN	= 16,	/* min stem height under beams */
	STEM_MIN2	= 14,	/* ... for notes with two beams */
	STEM_MIN3	= 12,	/* ... for notes with three beams */
	STEM_MIN4	= 10,	/* ... for notes with four beams */
	STEM_CH_MIN	= 14,	/* min stem height for chords under beams */
	STEM_CH_MIN2	= 10,	/* ... for notes with two beams */
	STEM_CH_MIN3	= 9,	/* ... for notes with three beams */
	STEM_CH_MIN4	= 9,	/* ... for notes with four beams */
	BEAM_DEPTH	= 3.2,	/* width of a beam stroke */
	BEAM_OFFSET	= .25,	/* pos of flat beam relative to staff line */
	BEAM_SHIFT	= 5,	/* shift of second and third beams */
	BEAM_SLOPE	= .4,	/* max slope of a beam */
	BEAM_STUB	= 8,	/* length of stub for flag under beam */ 
	SLUR_SLOPE	= .5,	/* max slope of a slur */
	GSTEM		= 15,	/* grace note stem length */
	GSTEM_XOFF	= 2.3	/* x offset for grace note stem */

    var cache

/* -- compute the best vertical offset for the beams -- */
function b_pos(grace, stem, nflags, b) {
	var	top, bot, d1, d2,
		shift = !grace ? BEAM_SHIFT : 3.5,
		depth = !grace ? BEAM_DEPTH : 1.8

	/* -- up/down shift needed to get k*6 -- */
	function rnd6(y) {
		var iy = Math.round((y + 12) / 6) * 6 - 12
		return iy - y
	} // rnd6()

	if (stem > 0) {
		bot = b - (nflags - 1) * shift - depth
		if (bot > 26)
			return 0
		top = b
	} else {
		top = b + (nflags - 1) * shift + depth
		if (top < -2)
			return 0
		bot = b
	}

	d1 = rnd6(top - BEAM_OFFSET);
	d2 = rnd6(bot + BEAM_OFFSET)
	return d1 * d1 > d2 * d2 ? d2 : d1
}

/* duplicate a note for beaming continuation */
function sym_dup(s_orig) {
	var	m, note,
		s = clone(s_orig);

	s.invis = true
	delete s.text
	delete s.a_gch
	delete s.a_ly
	delete s.a_dd;
	s.notes = clone(s_orig.notes)
	for (m = 0; m <= s.nhd; m++) {
		note = s.notes[m] = clone(s_orig.notes[m])
		delete note.a_dcn
	}
	return s
}

/* -- calculate a beam -- */
/* (the staves may be defined or not) */
var min_tb = [
	[STEM_MIN, STEM_MIN,
		STEM_MIN2, STEM_MIN3, STEM_MIN4, STEM_MIN4],
	[STEM_CH_MIN, STEM_CH_MIN,
		STEM_CH_MIN2, STEM_CH_MIN3, STEM_CH_MIN4, STEM_CH_MIN4]
]

function calculate_beam(bm, s1) {
	var	s, s2, notes, nflags, st, v, two_staves, two_dir,
		x, y, ys, a, b, stem_err, max_stem_err,
		p_min, p_max, s_closest,
		stem_xoff, scale,
		visible, dy

	if (!s1.beam_st) {	/* beam from previous music line */
		s = sym_dup(s1);
		lkvsym(s, s1);
		lktsym(s, s1);
		s.x -= 12
		if (s.x > s1.prev.x + 12)
			s.x = s1.prev.x + 12;
		s.beam_st = true
		delete s.beam_end;
		s.tmp = true
		delete s.slur_start
		delete s.slur_end;
		s1 = s
	}

	/* search last note in beam */
	notes = nflags = 0;	/* set x positions, count notes and flags */
	two_staves = two_dir = false;
	st = s1.st;
	v = s1.v;
	stem_xoff = s1.grace ? GSTEM_XOFF : 3.5
	for (s2 = s1;  ;s2 = s2.next) {
		if (s2.type == C.NOTE) {
			if (s2.nflags > nflags)
				nflags = s2.nflags;
			notes++
			if (s2.st != st)
				two_staves = true
			if (s2.stem != s1.stem)
				two_dir = true
			if (!visible && !s2.invis
			 && (!s2.stemless || s2.trem2))
				visible = true
			if (s2.beam_end)
				break
		}
		if (!s2.next) {		/* beam towards next music line */
			for (; ; s2 = s2.prev) {
				if (s2.type == C.NOTE)
					break
			}
			s = sym_dup(s2);
			s.next = s2.next
			if (s.next)
				s.next.prev = s;
			s2.next = s;
			s.prev = s2;
			s.ts_next = s2.ts_next
			if (s.ts_next)
				s.ts_next.ts_prev = s;
			s2.ts_next = s;
			s.ts_prev = s2
			delete s.beam_st;
			s.beam_end = true;
			s.tmp = true
			delete s.slur_start
			delete s.slur_end
			s.x += 12
			if (s.x < realwidth - 12)
				s.x = realwidth - 12;
			s2 = s;
			notes++
			break
		}
	}

	// at least, must have a visible note with a stem
	if (!visible)
		return false;

	bm.s2 = s2			/* (don't display the flags) */

	if (staff_tb[st].y == 0) {	/* staves not defined */
		if (two_staves)
			return false
	} else {			/* staves defined */
//		if (!two_staves && !s1.grace) {
		if (!two_staves) {
			bm.s1 = s1;	/* beam already calculated */
			bm.a = (s1.ys- s2.ys) / (s1.xs - s2.xs);
			bm.b = s1.ys - s1.xs * bm.a + staff_tb[st].y;
			bm.nflags = nflags
			return true
		}
	}

	s_closest = s1;
	p_min = 100;
	p_max = 0
	for (s = s1; ; s = s.next) {
		if (s.type != C.NOTE)
			continue
		if ((scale = s.p_v.scale) == 1)
			scale = staff_tb[s.st].staffscale
		if (s.stem >= 0) {
			x = stem_xoff + s.notes[0].shhd
			if (s.notes[s.nhd].pit > p_max) {
				p_max = s.notes[s.nhd].pit;
				s_closest = s
			}
		} else {
			x = -stem_xoff + s.notes[s.nhd].shhd
			if (s.notes[0].pit < p_min) {
				p_min = s.notes[0].pit;
				s_closest = s
			}
		}
		s.xs = s.x + x * scale;
		if (s == s2)
			break
	}

	// have flat beams when asked
	if (cfmt.flatbeams)
		a = 0

	// if a note inside the beam is the closest to the beam, the beam is flat
	else if (!two_dir
	      && notes >= 3
	      && s_closest != s1 && s_closest != s2)
		a = 0

	y = s1.ys + staff_tb[st].y
	if (a == undefined)
		a = (s2.ys + staff_tb[s2.st].y - y) / (s2.xs - s1.xs)

	if (a != 0) {
		if (a > 0)
			a = BEAM_SLOPE * a / (BEAM_SLOPE + a) // max steepness for beam
		else
			a = BEAM_SLOPE * a / (BEAM_SLOPE - a);
	}

	b = y - a * s1.xs;

/*fixme: have a look again*/
	/* have room for the symbols in the staff */
	max_stem_err = 0;		/* check stem lengths */
	s = s1
	if (two_dir) {				/* 2 directions */
/*fixme: more to do*/
		ys = ((s1.grace ? 3.5 : BEAM_SHIFT) * (nflags - 1) +
			BEAM_DEPTH) * .5
		if (s1.stem != s2.stem && s1.nflags < s2.nflags)
			ys *= s2.stem
		else
			ys *= s1.stem;
		b += ys
	} else if (!s1.grace) {		/* normal notes */
		var beam_h = BEAM_DEPTH + BEAM_SHIFT * (nflags - 1)
//--fixme: added for abc2svg
		while (s.ts_prev
		    && s.ts_prev.type == C.NOTE
		    && s.ts_prev.time == s.time
		    && s.ts_prev.x > s1.xs)
			s = s.ts_prev

		for (; s && s.time <= s2.time; s = s.ts_next) {
			if (s.type != C.NOTE
			 || s.invis
			 || (s.st != st
			  && s.v != v)) {
				continue
			}
			x = s.v == v ? s.xs : s.x;
			ys = a * x + b - staff_tb[s.st].y
			if (s.v == v) {
				stem_err = min_tb[s.nhd == 0 ? 0 : 1][s.nflags]
				if (s.stem > 0) {
					if (s.notes[s.nhd].pit > 26) {
						stem_err -= 2
						if (s.notes[s.nhd].pit > 28)
							stem_err -= 2
					}
					stem_err -= ys - 3 * (s.notes[s.nhd].pit - 18)
				} else {
					if (s.notes[0].pit < 18) {
						stem_err -= 2
						if (s.notes[0].pit < 16)
							stem_err -= 2
					}
					stem_err -= 3 * (s.notes[0].pit - 18) - ys
				}
				stem_err += BEAM_DEPTH + BEAM_SHIFT * (s.nflags - 1)
			} else {
/*fixme: KO when two_staves*/
				if (s1.stem > 0) {
					if (s.stem > 0) {
/*fixme: KO when the voice numbers are inverted*/
						if (s.ymn > ys + 4
						 || s.ymx < ys - beam_h - 2)
							continue
						if (s.v > v)
							stem_err = s.ymx - ys
						else
							stem_err = s.ymn + 8 - ys
					} else {
						stem_err = s.ymx - ys
					}
				} else {
					if (s.stem < 0) {
						if (s.ymx < ys - 4
						 || s.ymn > ys - beam_h - 2)
							continue
						if (s.v < v)
							stem_err = ys - s.ymn
						else
							stem_err = ys - s.ymx + 8
					} else {
						stem_err = ys - s.ymn
					}
				}
				stem_err += 2 + beam_h
			}
			if (stem_err > max_stem_err)
				max_stem_err = stem_err
		}
	} else {				/* grace notes */
		for ( ; ; s = s.next) {
			ys = a * s.xs + b - staff_tb[s.st].y;
			stem_err = GSTEM - 2
			if (s.stem > 0)
				stem_err -= ys - (3 * (s.notes[s.nhd].pit - 18))
			else
				stem_err += ys - (3 * (s.notes[0].pit - 18));
			stem_err += 3 * (s.nflags - 1)
			if (stem_err > max_stem_err)
				max_stem_err = stem_err
			if (s == s2)
				break
		}
	}

	if (max_stem_err > 0)		/* shift beam if stems too short */
		b += s1.stem * max_stem_err

	/* have room for the gracenotes, bars and clefs */
/*fixme: test*/
    if (!two_staves && !two_dir)
	for (s = s1.next; ; s = s.next) {
		var g
		switch (s.type) {
		case C.REST:		/* cannot move rests in multi-voices */
			g = s.ts_next
			if (!g || g.st != st
			 || (g.type != C.NOTE && g.type != C.REST))
				break
//fixme:too much vertical shift if some space above the note
//fixme:this does not fix rest under beam in second voice (ts_prev)
			/*fall thru*/
		case C.BAR:
			if (s.invis)
				break
			/*fall thru*/
		case C.CLEF:
			y = a * s.x + b
			if (s1.stem > 0) {
				y = s.ymx - y
					+ BEAM_DEPTH + BEAM_SHIFT * (nflags - 1)
					+ 2
				if (y > 0)
					b += y
			} else {
				y = s.ymn - y
					- BEAM_DEPTH - BEAM_SHIFT * (nflags - 1)
					- 2
				if (y < 0)
					b += y
			}
			break
		case C.GRACE:
			for (g = s.extra; g; g = g.next) {
				y = a * g.x + b
				if (s1.stem > 0) {
					y = g.ymx - y
						+ BEAM_DEPTH + BEAM_SHIFT * (nflags - 1)
						+ 2
					if (y > 0)
						b += y
				} else {
					y = g.ymn - y
						- BEAM_DEPTH - BEAM_SHIFT * (nflags - 1)
						- 2
					if (y < 0)
						b += y
				}
			}
			break
		}
		if (s == s2)
			break
	}

	if (a == 0)		/* shift flat beams onto staff lines */
		b += b_pos(s1.grace, s1.stem, nflags, b - staff_tb[st].y)

	/* adjust final stems and rests under beam */
	for (s = s1; ; s = s.next) {
		switch (s.type) {
		case C.NOTE:
			s.ys = a * s.xs + b - staff_tb[s.st].y
			if (s.stem > 0) {
				s.ymx = s.ys + 2.5
//fixme: hack
				if (s.ts_prev
				 && s.ts_prev.stem > 0
				 && s.ts_prev.st == s.st
				 && s.ts_prev.ymn < s.ymx
				 && s.ts_prev.x == s.x
				 && s.notes[0].shhd == 0) {
					s.ts_prev.x -= 3;	/* fix stem clash */
					s.ts_prev.xs -= 3
				}
			} else {
				s.ymn = s.ys - 2.5
			}
			break
		case C.REST:
			y = a * s.x + b - staff_tb[s.st].y
			dy = BEAM_DEPTH + BEAM_SHIFT * (nflags - 1)
				+ (s.head != C.FULL ? 4 : 9)
			if (s1.stem > 0) {
				y -= dy
				if (s1.multi == 0 && y > 12)
					y = 12
				if (s.y <= y)
					break
			} else {
				y += dy
				if (s1.multi == 0 && y < 12)
					y = 12
				if (s.y >= y)
					break
			}
			if (s.head != C.FULL)
				y = (((y + 3 + 12) / 6) | 0) * 6 - 12;
			s.y = y
			break
		}
		if (s == s2)
			break
	}

	/* save beam parameters */
	if (staff_tb[st].y == 0)	/* if staves not defined */
		return false
	bm.s1 = s1;
	bm.a = a;
	bm.b = b;
	bm.nflags = nflags
	return true
}

/* -- draw the beams for one word -- */
/* (the staves are defined) */
function draw_beams(bm) {
	var	s, i, beam_dir, shift, bshift, bstub, bh, da,
		k, k1, k2, x1,
		s1 = bm.s1,
		s2 = bm.s2

	/* -- draw a single beam -- */
	function draw_beam(x1, x2, dy, h, bm,
				 n) {		/* beam number (1..n) */
		var	y1, dy2,
			s = bm.s1,
			nflags = s.nflags

		if (s.ntrem)
			nflags -= s.ntrem
		if (s.trem2 && n > nflags) {
			if (s.dur >= C.BLEN / 2) {
				x1 = s.x + 6;
				x2 = bm.s2.x - 6
			} else if (s.dur < C.BLEN / 4) {
				x1 += 5;
				x2 -= 6
			}
		}

		y1 = bm.a * x1 + bm.b - dy;
		x2 -= x1;
	//--fixme: scale (bm.a already scaled!)
		x2 /= stv_g.scale;
		dy2 = bm.a * x2 * stv_g.scale;
		xypath(x1, y1, true);
		output += 'l' + x2.toFixed(2) + ' ' + (-dy2).toFixed(2) +
			'v' + h.toFixed(2) +
			'l' + (-x2).toFixed(2) + ' ' + dy2.toFixed(2) +
			'z"/>\n'
	} // draw_beam()

	anno_start(s1, 'beam')
/*fixme: KO if many staves with different scales*/
//	set_scale(s1)
	if (!s1.grace) {
		bshift = BEAM_SHIFT;
		bstub = BEAM_STUB;
		shift = .34;		/* (half width of the stem) */
		bh = BEAM_DEPTH
	} else {
		bshift = 3.5;
		bstub = 3.2;
		shift = .29;
		bh = 1.8
	}

/*fixme: quick hack for stubs at end of beam and different stem directions*/
	beam_dir = s1.stem
	if (s1.stem != s2.stem
	 && s1.nflags < s2.nflags)
		beam_dir = s2.stem
	if (beam_dir < 0)
		bh = -bh;

	/* make first beam over whole word and adjust the stem lengths */
	draw_beam(s1.xs - shift, s2.xs + shift, 0, bh, bm, 1);
	da = 0
	for (s = s1; ; s = s.next) {
		if (s.type == C.NOTE
		 && s.stem != beam_dir)
			s.ys = bm.a * s.xs + bm.b
				- staff_tb[s.st].y
				+ bshift * (s.nflags - 1) * s.stem
				- bh
		if (s == s2)
			break
	}

	if (s1.feathered_beam) {
		da = bshift / (s2.xs - s1.xs)
		if (s1.feathered_beam > 0) {
			da = -da;
			bshift = da * s1.xs
		} else {
			bshift = da * s2.xs
		}
		da = da * beam_dir
	}

	/* other beams with two or more flags */
	shift = 0
	for (i = 2; i <= bm.nflags; i++) {
		shift += bshift
		if (da != 0)
			bm.a += da
		for (s = s1; ; s = s.next) {
			if (s.type != C.NOTE
			 || s.nflags < i) {
				if (s == s2)
					break
				continue
			}
			if (s.trem1
			 && i > s.nflags - s.ntrem) {
				x1 = (s.dur >= C.BLEN / 2) ? s.x : s.xs;
				draw_beam(x1 - 5, x1 + 5,
					  (shift + 2.5) * beam_dir,
					  bh, bm, i)
				if (s == s2)
					break
				continue
			}
			k1 = s
			while (1) {
				if (s == s2)
					break
				k = s.next
				if (k.type == C.NOTE || k.type == C.REST) {
					if (k.trem1){
						if (k.nflags - k.ntrem < i)
							break
					} else if (k.nflags < i) {
						break
					}
				}
				if (k.beam_br1
				 || (k.beam_br2 && i > 2))
					break
				s = k
			}
			k2 = s
			while (k2.type != C.NOTE)
				k2 = k2.prev;
			x1 = k1.xs
			if (k1 == k2) {
				if (k1 == s1) {
					x1 += bstub
				} else if (k1 == s2) {
					x1 -= bstub
				} else if (k1.beam_br1
				        || (k1.beam_br2
					 && i > 2)) {
					x1 += bstub
				} else {
					k = k1.next
					while (k.type != C.NOTE)
						k = k.next
					if (k.beam_br1
					 || (k.beam_br2 && i > 2)) {
						x1 -= bstub
					} else {
						k1 = k1.prev
						while (k1.type != C.NOTE)
							k1 = k1.prev
						if (k1.nflags < k.nflags
						 || (k1.nflags == k.nflags
						  && k1.dots < k.dots))
							x1 += bstub
						else
							x1 -= bstub
					}
				}
			}
			draw_beam(x1, k2.xs,
				  shift * beam_dir,
				  bh, bm, i)
			if (s == s2)
				break
		}
	}
	if (s1.tmp)
		unlksym(s1)
	else if (s2.tmp)
		unlksym(s2)
	anno_stop(s1, 'beam')
}

/* -- draw the left side of the staves -- */
function draw_lstaff(x) {
//	if (cfmt.alignbars)
//		return
	var	i, j, yb, h,
		nst = cur_sy.nstaff,
		l = 0

	/* -- draw a system brace or bracket -- */
	function draw_sysbra(x, st, flag) {
		var i, st_end, yt, yb

		while (!cur_sy.st_print[st]) {
			if (cur_sy.staves[st].flags & flag)
				return
			st++
		}
		i = st_end = st
		while (1) {
			if (cur_sy.st_print[i])
				st_end = i
			if (cur_sy.staves[i].flags & flag)
				break
			i++
		}
		yt = staff_tb[st].y + staff_tb[st].topbar
					* staff_tb[st].staffscale;
		yb = staff_tb[st_end].y + staff_tb[st_end].botbar
					* staff_tb[st_end].staffscale
		if (flag & (CLOSE_BRACE | CLOSE_BRACE2))
			out_brace(x, yb, yt - yb)
		else
			out_bracket(x, yt, yt - yb)
	}

	for (i = 0; ; i++) {
		if (cur_sy.staves[i].flags & (OPEN_BRACE | OPEN_BRACKET))
			l++
		if (cur_sy.st_print[i])
			break
		if (cur_sy.staves[i].flags & (CLOSE_BRACE | CLOSE_BRACKET))
			l--
		if (i == nst)
			break
	}
	for (j = nst; j > i; j--) {
		if (cur_sy.st_print[j])
			break
	}
	if (i == j && l == 0)
		return
	yb = staff_tb[j].y + staff_tb[j].botbar * staff_tb[j].staffscale;
	h = staff_tb[i].y + staff_tb[i].topbar * staff_tb[i].staffscale - yb;
	xypath(x, yb);
	output += "v" + (-h).toFixed(2) + '"/>\n'
	for (i = 0; i <= nst; i++) {
		if (cur_sy.staves[i].flags & OPEN_BRACE)
			draw_sysbra(x, i, CLOSE_BRACE)
		if (cur_sy.staves[i].flags & OPEN_BRACKET)
			draw_sysbra(x, i, CLOSE_BRACKET)
		if (cur_sy.staves[i].flags & OPEN_BRACE2)
			draw_sysbra(x - 6, i, CLOSE_BRACE2)
		if (cur_sy.staves[i].flags & OPEN_BRACKET2)
			draw_sysbra(x - 6, i, CLOSE_BRACKET2)
	}
}

/* -- draw the time signature -- */
function draw_meter(x, s) {
	if (!s.a_meter)
		return
	var	dx, i, j, tmp1, tmp2,
		st = s.st,
		p_staff = staff_tb[st],
		y = p_staff.y;

	// adjust the vertical offset according to the staff definition
	if (p_staff.stafflines != '|||||')
		y += (p_staff.topbar + p_staff.botbar) / 2 - 12	// bottom

	for (i = 0; i < s.a_meter.length; i++) {
		var	f,
			meter = s.a_meter[i]

		x = s.x + s.x_meter[i]

		if (meter.bot) {
			tmp1 = tmp2 = ''
			for (j = 0; j < meter.top.length; j++)
				tmp1 += tgls["meter" + meter.top[j]].c
			for (j = 0; j < meter.bot.length; j++)
				tmp2 += tgls["meter" + meter.bot[j]].c;
			out_XYAB('<g transform="translate(X,Y)" text-anchor="middle">\n\
	<text y="-12">A</text>\n\
	<text>B</text>\n\
</g>\n', x, y + 6, tmp1, tmp2)
		} else {
			switch (meter.top[0]) {
			case 'C':
				f = meter.top[1] != '|' ? "csig" : "ctsig";
				x -= 5;
				y += 12
				break
			case 'c':
				f = meter.top[1] != '.' ? "imsig" : "iMsig"
				break
			case 'o':
				f = meter.top[1] != '.' ? "pmsig" : "pMsig"
				break
			default:
				tmp1 = ''
				for (j = 0; j < meter.top.length; j++)
					tmp1 += tgls["meter" + meter.top[j]].c;
				out_XYAB('\
<text x="X" y="Y" text-anchor="middle">A</text>\n',
					x, y + 12, tmp1)
				break
			}
		}
		if (f)
			xygl(x, y, f)
	}
}

/* -- draw an accidental -- */
function draw_acc(x, y, acc,
			micro_n,
			micro_d) {
	if (micro_n) {
		if (micro_n == micro_d) {
			acc = acc == -1 ?	// flat
				-2 : 2		// double flat : sharp
		} else if (micro_n * 2 != micro_d) {
			xygl(x, y, "acc" + acc + '_' + micro_n + '_' + micro_d)
			return
		}
	}
	xygl(x, y, "acc" + acc)
}

// draw helper lines between yl and yu
//fixme: double lines when needed for different voices
function draw_hl(x, yl, yu, st, hltype) {
    var	i, j,
	p_staff = staff_tb[st],
	staffb = p_staff.y,
	stafflines = p_staff.stafflines,
	top = (stafflines.length - 1) * 6,
	bot = p_staff.botline

	// no helper if no line
	if (!/[\[|]/.test(stafflines))
		return

	if (yl % 6)
		yl += 3
	if (yu % 6)
		yu -= 3
	if (stafflines.indexOf('-') >= 0	// if forced helper lines ('-')
	 && ((yl > bot && yl < top) || (yu > bot && yu < top)
	  || (yl <= bot && yu >= top))) {
		i = yl;
		j = yu
		while (i > bot && stafflines[i / 6] == '-')
			i -= 6
		while (j < top && stafflines[j / 6] == '-')
			j += 6
		for ( ; i < j; i += 6) {
			if (stafflines[i / 6] == '-')
				xygl(x, staffb + i, hltype)	// hole
		}
	}
	for (; yl < bot; yl += 6)
		xygl(x, staffb + yl, hltype)
	for (; yu > top; yu -= 6)
		xygl(x, staffb + yu, hltype)
}

/* -- draw a key signature -- */
var	sharp_cl = new Int8Array([24, 9, 15, 21, 6, 12, 18]),
	flat_cl = new Int8Array([12, 18, 24, 9, 15, 21, 6]),
	sharp1 = new Int8Array([-9, 12, -9, -9, 12, -9]),
	sharp2 = new Int8Array([12, -9, 12, -9, 12, -9]),
	flat1 = new Int8Array([9, -12, 9, -12, 9, -12]),
	flat2 = new Int8Array([-12, 9, -12, 9, -12, 9])

function draw_keysig(p_voice, x, s) {
	if (s.k_none)
		return
	var	old_sf = s.k_old_sf,
		st = p_voice.st,
		staffb = staff_tb[st].y,
		i, shift, p_seq,
		clef_ix = s.k_y_clef

	if (clef_ix & 1)
		clef_ix += 7;
	clef_ix /= 2
	while (clef_ix < 0)
		clef_ix += 7;
	clef_ix %= 7

	/* normal accidentals */
	if (!s.k_a_acc) {

		/* put neutrals if 'accidental cancel' */
		if (cfmt.cancelkey || s.k_sf == 0) {

			/* when flats to sharps, or sharps to flats, */
			if (s.k_sf == 0
			 || old_sf * s.k_sf < 0) {

				/* old sharps */
				shift = sharp_cl[clef_ix];
				p_seq = shift > 9 ? sharp1 : sharp2
				for (i = 0; i < old_sf; i++) {
					xygl(x, staffb + shift, "acc3");
					shift += p_seq[i];
					x += 5.5
				}

				/* old flats */
				shift = flat_cl[clef_ix];
				p_seq = shift < 18 ? flat1 : flat2
				for (i = 0; i > old_sf; i--) {
					xygl(x, staffb + shift, "acc3");
					shift += p_seq[-i];
					x += 5.5
				}
				if (s.k_sf != 0)
					x += 3		/* extra space */
			}
		}

		/* new sharps */
		if (s.k_sf > 0) {
			shift = sharp_cl[clef_ix];
			p_seq = shift > 9 ? sharp1 : sharp2
			for (i = 0; i < s.k_sf; i++) {
				xygl(x, staffb + shift, "acc1");
				shift += p_seq[i];
				x += 5.5
			}
			if (cfmt.cancelkey && i < old_sf) {
				x += 2
				for (; i < old_sf; i++) {
					xygl(x, staffb + shift, "acc3");
					shift += p_seq[i];
					x += 5.5
				}
			}
		}

		/* new flats */
		if (s.k_sf < 0) {
			shift = flat_cl[clef_ix];
			p_seq = shift < 18 ? flat1 : flat2
			for (i = 0; i > s.k_sf; i--) {
				xygl(x, staffb + shift, "acc-1");
				shift += p_seq[-i];
				x += 5.5
			}
			if (cfmt.cancelkey && i > old_sf) {
				x += 2
				for (; i > old_sf; i--) {
					xygl(x, staffb + shift, "acc3");
					shift += p_seq[-i];
					x += 5.5
				}
			}
		}
	} else if (s.k_a_acc.length) {

		/* explicit accidentals */
		var	acc,
			last_acc = s.k_a_acc[0].acc,
			last_shift = 100

		for (i = 0; i < s.k_a_acc.length; i++) {
			acc = s.k_a_acc[i];
			shift = (s.k_y_clef	// clef shift
				+ acc.pit - 18) * 3
			if (i != 0
			 && (shift > last_shift + 18
			  || shift < last_shift - 18))
				x -= 5.5		// no clash
			else if (acc.acc != last_acc)
				x += 3;
			last_acc = acc.acc;
			draw_hl(x, shift, shift, st, "hl");
			last_shift = shift;
			draw_acc(x, staffb + shift,
				 acc.acc, acc.micro_n, acc.micro_d);
			x += 5.5
		}
	}
}

/* -- convert the standard measure bars -- */
function bar_cnv(bar_type) {
	switch (bar_type) {
	case "[":
	case "[]":
		return ""			/* invisible */
	case "|:":
	case "|::":
	case "|:::":
		return "[" + bar_type		/* |::: -> [|::: */
	case ":|":
	case "::|":
	case ":::|":
		return bar_type + "]"		/* :..| -> :..|] */
	case "::":
		return cfmt.dblrepbar		/* :: -> double repeat bar */
	case '||:':
		return '[|:'
	}
	return bar_type
}

/* -- draw a measure bar -- */
function draw_bar(s, bot, h) {
	var	i, s2, yb, bar_type,
		st = s.st,
		p_staff = staff_tb[st],
		x = s.x

	bar_type = bar_cnv(s.bar_type)
	if (!bar_type)
		return				/* invisible */

	/* don't put a line between the staves if there is no bar above */
	if (st != 0
	 && s.ts_prev
//fixme: 's.ts_prev.st != st - 1' when floating voice in lower staff
//	 && (s.ts_prev.type != C.BAR || s.ts_prev.st != st - 1))
	 && s.ts_prev.type != C.BAR)
		h = p_staff.topbar * p_staff.staffscale;

	s.ymx = s.ymn + h;
	set_sscale(-1);
	anno_start(s)

	// compute the middle vertical offset of the staff
	yb = p_staff.y + 12;
	if (p_staff.stafflines != '|||||')
		yb += (p_staff.topbar + p_staff.botbar) / 2 - 12	// bottom

	/* if measure repeat, draw the '%' like glyphs */
	if (s.bar_mrep) {
		set_sscale(st)
		if (s.bar_mrep == 1) {
			for (s2 = s.prev; s2.type != C.REST; s2 = s2.prev)
				;
			xygl(s2.x, yb, "mrep")
		} else {
			xygl(x, yb, "mrep2")
			if (s.v == cur_sy.top_voice) {
				set_font("annotation");
				xy_str(x, yb + p_staff.topbar - 9,
						s.bar_mrep.toString(), "c")
			}
		}
	}

	for (i = bar_type.length; --i >= 0; ) {
		switch (bar_type[i]) {
		case "|":
			set_sscale(-1);
			out_bar(x, bot, h, s.bar_dotted)
			break
		default:
//		case "[":
//		case "]":
			x -= 3;
			set_sscale(-1);
			out_thbar(x, bot, h)
			break
		case ":":
			x -= 2;
			set_sscale(st);
			xygl(x + 1, yb - 12, "rdots")
			break
		}
		x -= 3
	}
	set_sscale(-1);
	anno_stop(s)
}

/* -- draw a rest -- */
/* (the staves are defined) */
var rest_tb = [
	"r128", "r64", "r32", "r16", "r8",
	"r4",
	"r2", "r1", "r0", "r00"]

function draw_rest(s) {
	var	s2, i, j, x, y, dotx, yb, yt, head,
		p_staff = staff_tb[s.st]

	/* don't display the rests of invisible staves */
	/* (must do this here for voices out of their normal staff) */
	if (!p_staff.topbar)
		return

	/* if rest alone in the measure or measure repeat, center */
	if (s.dur == s.p_v.meter.wmeasure
	 || (s.rep_nb && s.rep_nb >= 0)) {

		/* don't use next/prev: there is no bar in voice overlay */
		s2 = s.ts_next
		while (s2 && s2.time != s.time + s.dur)
			s2 = s2.ts_next;
		x = s2 ? s2.x : realwidth;
		s2 = s
		while (!s2.seqst)
			s2 = s2.ts_prev;
		s2 = s2.ts_prev;
		x = (x + s2.x) / 2

		/* center the associated decorations */
		if (s.a_dd)
			deco_update(s, x - s.x);
		s.x = x
	} else {
		x = s.x
		if (s.notes[0].shhd)
			x += s.notes[0].shhd * stv_g.scale
	}
	if (s.invis)
		return

	yb = p_staff.y			// bottom of staff

	if (s.rep_nb) {
		set_sscale(s.st);
		anno_start(s);
		if (p_staff.stafflines == '|||||')
			yb += 12
		else
			yb += (p_staff.topbar + p_staff.botbar) / 2
		if (s.rep_nb < 0) {
			xygl(x, yb, "srep")
		} else {
			xygl(x, yb, "mrep")
			if (s.rep_nb > 2 && s.v == cur_sy.top_voice) {
				set_font("annotation");
				xy_str(x, yb + p_staff.topbar - 9,
					s.rep_nb.toString(), "c")
			}
		}
		anno_stop(s)
		return
	}

	set_scale(s);
	anno_start(s);

	y = s.y;

	i = 5 - s.nflags		/* rest_tb index (5 = C_XFLAGS) */
	if (i == 7 && y == 12
	 && p_staff.stafflines.length <= 2)
		y -= 6				/* semibreve a bit lower */

	// draw the rest
	xygl(x, y + yb, s.notes[0].head ? s.notes[0].head : rest_tb[i])

	/* output ledger line(s) when greater than minim */
	if (i >= 6) {
		j = y / 6
		switch (i) {
		default:
			switch (p_staff.stafflines[j + 1]) {
			case '|':
			case '[':
				break
			default:
				xygl(x, y + 6 + yb, "hl1")
				break
			}
			if (i == 9) {			/* longa */
				y -= 6;
				j--
			}
			break
		case 7:					/* semibreve */
			y += 6;
			j++
		case 6:					/* minim */
			break
		}
		switch (p_staff.stafflines[j]) {
		case '|':
		case '[':
			break
		default:
			xygl(x, y + yb, "hl1")
			break
		}
	}
	x += 8;
	y += yb + 3
	for (i = 0; i < s.dots; i++) {
		xygl(x, y, "dot");
		x += 3.5
	}
	anno_stop(s)
}

/* -- draw grace notes -- */
/* (the staves are defined) */
function draw_gracenotes(s) {
	var	yy, x0, y0, x1, y1, x2, y2, x3, y3, bet1, bet2,
		dy1, dy2, g, last, note,
		bm = {}

	/* draw the notes */
//	bm.s2 = undefined			/* (draw flags) */
	for (g = s.extra; g; g = g.next) {
		if (g.beam_st && !g.beam_end) {
			if (calculate_beam(bm, g))
				draw_beams(bm)
		}
		anno_start(g);
		draw_note(g, !bm.s2)
		if (g == bm.s2)
			bm.s2 = null			/* (draw flags again) */
		anno_stop(g)
		if (!g.next)
			break			/* (keep the last note) */
	}

	// if an acciaccatura, draw a bar 
	if (s.sappo) {
		g = s.extra
		if (!g.next) {			/* if one note */
			x1 = 9;
			y1 = g.stem > 0 ? 5 : -5
		} else {			/* many notes */
			x1 = (g.next.x - g.x) * .5 + 4;
			y1 = (g.ys + g.next.ys) * .5 - g.y
			if (g.stem > 0)
				y1 -= 1
			else
				y1 += 1
		}
		note = g.notes[g.stem < 0 ? 0 : g.nhd];
		out_acciac(x_head(g, note), y_head(g, note),
				x1, y1, g.stem > 0)
	}

	/* slur */
//fixme: have a full key symbol in voice
	if (s.p_v.key.k_bagpipe			/* no slur when bagpipe */
	 || !cfmt.graceslurs
	 || s.slur_start			/* explicit slur */
	 || !s.next
	 || s.next.type != C.NOTE)
		return
	last = g
	if (last.stem >= 0) {
		yy = 127
		for (g = s.extra; g; g = g.next) {
			if (g.y < yy) {
				yy = g.y;
				last = g
			}
		}
		x0 = last.x;
		y0 = last.y - 5
		if (s.extra != last) {
			x0 -= 4;
			y0 += 1
		}
		s = s.next;
		x3 = s.x - 1
		if (s.stem < 0)
			x3 -= 4;
		y3 = 3 * (s.notes[0].pit - 18) - 5;
		dy1 = (x3 - x0) * .4
		if (dy1 > 3)
			dy1 = 3;
		dy2 = dy1;
		bet1 = .2;
		bet2 = .8
		if (y0 > y3 + 7) {
			x0 = last.x - 1;
			y0 += .5;
			y3 += 6.5;
			x3 = s.x - 5.5;
			dy1 = (y0 - y3) * .8;
			dy2 = (y0 - y3) * .2;
			bet1 = 0
		} else if (y3 > y0 + 4) {
			y3 = y0 + 4;
			x0 = last.x + 2;
			y0 = last.y - 4
		}
	} else {
		yy = -127
		for (g = s.extra; g; g = g.next) {
			if (g.y > yy) {
				yy = g.y;
				last = g
			}
		}
		x0 = last.x;
		y0 = last.y + 5
		if (s.extra != last) {
			x0 -= 4;
			y0 -= 1
		}
		s = s.next;
		x3 = s.x - 1
		if (s.stem >= 0)
			x3 -= 2;
		y3 = 3 * (s.notes[s.nhd].pit - 18) + 5;
		dy1 = (x0 - x3) * .4
		if (dy1 < -3)
			dy1 = -3;
		dy2 = dy1;
		bet1 = .2;
		bet2 = .8
		if (y0 < y3 - 7) {
			x0 = last.x - 1;
			y0 -= .5;
			y3 -= 6.5;
			x3 = s.x - 5.5;
			dy1 = (y0 - y3) * .8;
			dy2 = (y0 - y3) * .2;
			bet1 = 0
		} else if (y3 < y0 - 4) {
			y3 = y0 - 4;
			x0 = last.x + 2;
			y0 = last.y + 4
		}
	}

	x1 = bet1 * x3 + (1 - bet1) * x0 - x0;
	y1 = bet1 * y3 + (1 - bet1) * y0 - dy1 - y0;
	x2 = bet2 * x3 + (1 - bet2) * x0 - x0;
	y2 = bet2 * y3 + (1 - bet2) * y0 - dy2 - y0;

	anno_start(s, 'slur');
	xypath(x0, y0 + staff_tb[s.st].y);
	output += 'c' + x1.toFixed(2) + ' ' + (-y1).toFixed(2) +
		' ' + x2.toFixed(2) + ' ' + (-y2).toFixed(2) +
		' ' + (x3 - x0).toFixed(2) + ' ' + (-y3 + y0).toFixed(2) + '"/>\n';
	anno_stop(s, 'slur')
}

/* -- set the y offset of the dots -- */
function setdoty(s, y_tb) {
	var m, m1, y

	/* set the normal offsets */
	for (m = 0; m <= s.nhd; m++) {
		y = 3 * (s.notes[m].pit - 18)	/* note height on staff */
		if ((y % 6) == 0) {
			if (s.dot_low)
				y -= 3
			else
				y += 3
		}
		y_tb[m] = y
	}
	/* dispatch and recenter the dots in the staff spaces */
	for (m = 0; m < s.nhd; m++) {
		if (y_tb[m + 1] > y_tb[m])
			continue
		m1 = m
		while (m1 > 0) {
			if (y_tb[m1] > y_tb[m1 - 1] + 6)
				break
			m1--
		}
		if (3 * (s.notes[m1].pit - 18) - y_tb[m1]
				< y_tb[m + 1] - 3 * (s.notes[m + 1].pit - 18)) {
			while (m1 <= m)
				y_tb[m1++] -= 6
		} else {
			y_tb[m + 1] = y_tb[m] + 6
		}
	}
}

// get the x and y position of a note head
// (when the staves are defined)
function x_head(s, note) {
	return s.x + note.shhd * stv_g.scale
}
function y_head(s, note) {
	return staff_tb[s.st].y + 3 * (note.pit - 18)
}

/* -- draw m-th head with accidentals and dots -- */
/* (the staves are defined) */
// sets {x,y}_note
function draw_basic_note(x, s, m, y_tb) {
	var	i, k, p, yy, dotx, doty,
		old_color = false,
		note = s.notes[m],
		staffb = staff_tb[s.st].y,	/* bottom of staff */
		y = 3 * (note.pit - 18),	/* note height on staff */
		shhd = note.shhd * stv_g.scale,
		x_note = x + shhd,
		y_note = y + staffb

//	/* special case for voice unison */
//	if (s.nohdi1 != undefined
//	 && m >= s.nohdi1 && m < s.nohdi2)
//		return

	var	elts = identify_note(s, note.dur),
		head = elts[0],
		dots = elts[1],
		nflags = elts[2]

	/* output a ledger line if horizontal shift / chord
	 * and note on a line */
	if (y % 6 == 0
	 && shhd != (s.stem > 0 ? s.notes[0].shhd : s.notes[s.nhd].shhd)) {
		yy = 0
		if (y >= 30) {
			yy = y
			if (yy % 6)
				yy -= 3
		} else if (y <= -6) {
			yy = y
			if (yy % 6)
				yy += 3
		}
		if (yy)
			xygl(x_note, yy + staffb, "hl")
	}

	/* draw the head */
	if (note.invis) {
		;
	} else if (s.grace) {			// don't apply %%map to grace notes
		p = "ghd";
		x_note -= 4.5 * stv_g.scale
	} else if (note.map && note.map[0]) {
		i = s.head;
		p = note.map[0][i]		// heads
		if (!p)
			p = note.map[0][note.map[0].length - 1]
		i = p.indexOf('/')
		if (i >= 0) {			// stem dependant
			if (s.stem >= 0)
				p = p.slice(0, i)
			else
				p = p.slice(i + 1)
		}
	} else if (s.type == C.CUSTOS) {
		p = "custos"
	} else {
		switch (head) {
		case C.OVAL:
			p = "HD"
			break
		case C.OVALBARS:
			if (s.head != C.SQUARE) {
				p = "HDD"
				break
			}
			// fall thru
		case C.SQUARE:
			p = note.dur < C.BLEN * 4 ? "breve" : "longa"

			/* don't display dots on last note of the tune */
			if (!tsnext && s.next
			 && s.next.type == C.BAR && !s.next.next)
				dots = 0
			break
		case C.EMPTY:
			p = "Hd"		// white note
			break
		default:			// black note
			p = "hd"
			break
		}
	}
	if (note.color != undefined)
		old_color = set_color(note.color)
	else if (note.map && note.map[2])
		old_color = set_color(note.map[2])
	if (p) {
		if (!psxygl(x_note, y_note, p))
			xygl(x_note, y_note, p)
	}

	/* draw the dots */
/*fixme: to see for grace notes*/
	if (dots) {
		dotx = x + (7.7 + s.xmx) * stv_g.scale
		if (y_tb[m] == undefined) {
			y_tb[m] = 3 * (s.notes[m].pit - 18)
			if ((s.notes[m].pit & 1) == 0)
				y_tb[m] += 3
		}
		doty = y_tb[m] + staffb
		while (--dots >= 0) {
			xygl(dotx, doty, "dot");
			dotx += 3.5
		}
	}

	/* draw the accidental */
	if (note.acc) {
		x -= note.shac * stv_g.scale
		if (!s.grace) {
			draw_acc(x, y + staffb,
				 note.acc, note.micro_n, note.micro_d)
		} else {
			g_open(x, y + staffb, 0, .75);
			draw_acc(0, 0, note.acc, note.micro_n, note.micro_d);
			g_close()
		}
	}
	if (old_color != undefined)
		set_color(old_color)
}

/* -- draw a note or a chord -- */
/* (the staves are defined) */
function draw_note(s,
		   fl) {		// draw flags
	var	s2, i, m, y, staffb, slen, c, hltype, nflags,
		x, y, note,
		y_tb = new Array(s.nhd + 1)

	if (s.dots)
		setdoty(s, y_tb)

	note = s.notes[s.stem < 0 ? s.nhd : 0];	// master note head
	x = x_head(s, note);
	staffb = staff_tb[s.st].y

	/* output the ledger lines */
	if (s.grace) {
		hltype = "ghl"
	} else {
		switch (s.head) {
		default:
			hltype = "hl"
			break
		case C.OVAL:
		case C.OVALBARS:
			hltype = "hl1"
			break
		case C.SQUARE:
			hltype = "hl2"
			break
		}
	}
	draw_hl(x, 3 * (s.notes[0].pit - 18), 3 * (s.notes[s.nhd].pit - 18),
		s.st, hltype)

	/* draw the stem and flags */
	y = y_head(s, note)
	if (!s.stemless) {
		slen = s.ys - s.y;
		nflags = s.nflags
		if (s.ntrem)
			nflags -= s.ntrem
		if (!fl || nflags <= 0) {	/* stem only */
			if (s.nflags > 0) {	/* (fix for PS low resolution) */
				if (s.stem >= 0)
					slen -= 1
				else
					slen += 1
			}
			out_stem(x, y, slen, s.grace)
		} else {				/* stem and flags */
			out_stem(x, y, slen, s.grace,
				 nflags, cfmt.straightflags)
		}
	} else if (s.xstem) {				/* cross-staff stem */
		s2 = s.ts_prev;
		slen = (s2.stem > 0 ? s2.y : s2.ys) - s.y;
		slen += staff_tb[s2.st].y - staffb;
/*fixme:KO when different scales*/
		slen /= s.p_v.scale;
		out_stem(x, y, slen)
	}

	/* draw the tremolo bars */
	if (fl && s.trem1) {
		var	ntrem = s.ntrem || 0,
			x1 = x;
		slen = 3 * (s.notes[s.stem > 0 ? s.nhd : 0].pit - 18)
		if (s.head == C.FULL || s.head == C.EMPTY) {
			x1 += (s.grace ? GSTEM_XOFF : 3.5) * s.stem
			if (s.stem > 0)
				slen += 6 + 5.4 * ntrem
			else
				slen -= 6 + 5.4
		} else {
			if (s.stem > 0)
				slen += 5 + 5.4 * ntrem
			else
				slen -= 5 + 5.4
		}
		slen /= s.p_v.scale;
		out_trem(x1, staffb + slen, ntrem)
	}

	/* draw the note heads */
	x = s.x
	for (m = 0; m <= s.nhd; m++)
		draw_basic_note(x, s, m, y_tb)
}

/* -- find where to terminate/start a slur -- */
function next_scut(s) {
	var prev = s

	for (s = s.next; s; s = s.next) {
		if (s.rbstop)
			return s
		prev = s
	}
	/*fixme: KO when no note for this voice at end of staff */
	return prev
}

function prev_scut(s) {
	while (s.prev) {
		s = s.prev
		if (s.rbstart)
			return s
	}

	/* return a symbol of any voice starting before the start of the voice */
	s = s.p_v.sym
	while (s.type != C.CLEF)
		s = s.ts_prev		/* search a main voice */
	if (s.next && s.next.type == C.KEY)
		s = s.next
	if (s.next && s.next.type == C.METER)
		return s.next
	return s
}

/* -- decide whether a slur goes up or down -- */
function slur_direction(k1, k2) {
	var s, some_upstem, low

	if (k1.grace && k1.stem > 0)
		return -1

	for (s = k1; ; s = s.next) {
		if (s.type == C.NOTE) {
			if (!s.stemless) {
				if (s.stem < 0)
					return 1
				some_upstem = true
			}
			if (s.notes[0].pit < 22)	/* if under middle staff */
				low = true
		}
		if (s == k2)
			break
	}
	if (!some_upstem && !low)
		return 1
	return -1
}

/* -- output a slur / tie -- */
function slur_out(x1, y1, x2, y2, dir, height, dotted) {
	var	dx, dy, dz,
		alfa = .3,
		beta = .45;

	/* for wide flat slurs, make shape more square */
	dy = y2 - y1
	if (dy < 0)
		dy = -dy;
	dx = x2 - x1
	if (dx > 40. && dy / dx < .7) {
		alfa = .3 + .002 * (dx - 40.)
		if (alfa > .7)
			alfa = .7
	}

	/* alfa, beta, and height determine Bezier control points pp1,pp2
	 *
	 *           X====alfa===|===alfa=====X
	 *	    /		 |	       \
	 *	  pp1		 |	        pp2
	 *	  /	       height		 \
	 *	beta		 |		 beta
	 *      /		 |		   \
	 *    p1		 m		     p2
	 *
	 */

	var	mx = .5 * (x1 + x2),
		my = .5 * (y1 + y2),
		xx1 = mx + alfa * (x1 - mx),
		yy1 = my + alfa * (y1 - my) + height;
	xx1 = x1 + beta * (xx1 - x1);
	yy1 = y1 + beta * (yy1 - y1)

	var	xx2 = mx + alfa * (x2 - mx),
		yy2 = my + alfa * (y2 - my) + height;
	xx2 = x2 + beta * (xx2 - x2);
	yy2 = y2 + beta * (yy2 - y2);

	dx = .03 * (x2 - x1);
//	if (dx > 10.)
//		dx = 10.
//	dy = 1.6 * dir
	dy = 2 * dir;
	dz = .2 + .001 * (x2 - x1)
	if (dz > .6)
		dz = .6;
	dz *= dir
	
	var scale_y = stv_g.v ? stv_g.scale : 1
	if (!dotted)
		output += '<path class="fill" d="M'
	else
		output += '<path class="stroke" stroke-dasharray="5,5" d="M';
	out_sxsy(x1, ' ', y1);
	output += 'c' +
		((xx1 - x1) / stv_g.scale).toFixed(2) + ' ' +
		((y1 - yy1) / scale_y).toFixed(2) + ' ' +
		((xx2 - x1) / stv_g.scale).toFixed(2) + ' ' +
		((y1 - yy2) / scale_y).toFixed(2) + ' ' +
		((x2 - x1) / stv_g.scale).toFixed(2) + ' ' +
		((y1 - y2) / scale_y).toFixed(2)

	if (!dotted)
		output += '\n\tv' +
			(-dz).toFixed(2) + 'c' +
			((xx2 - dx - x2) / stv_g.scale).toFixed(2) + ' ' +
			((y2 + dz - yy2 - dy) / scale_y).toFixed(2) + ' ' +
			((xx1 + dx - x2) / stv_g.scale).toFixed(2) + ' ' +
			((y2 + dz - yy1 - dy) / scale_y).toFixed(2) + ' ' +
			((x1 - x2) / stv_g.scale).toFixed(2) + ' ' +
			((y2 + dz - y1) / scale_y).toFixed(2);
	output += '"/>\n'
}

/* -- check if slur sequence in a multi-voice staff -- */
function slur_multi(k1, k2) {
	while (1) {
		if (k1.multi)		/* if multi voice */
			/*fixme: may change*/
			return k1.multi
		if (k1 == k2)
			break
		k1 = k1.next
	}
	return 0
}

/* -- draw a phrasing slur between two symbols -- */
/* (the staves are not yet defined) */
/* (delayed output) */
/* (not a pretty routine, this) */
function draw_slur(k1_o, k2, m1, m2, slur_type) {
	var	k1 = k1_o,
		k, g, x1, y1, x2, y2, height, addy,
		a, y, z, h, dx, dy, dir

	while (k1.v != k2.v)
		k1 = k1.ts_next
/*fixme: if two staves, may have upper or lower slur*/
	switch (slur_type & 0x07) {	/* (ignore dotted flag) */
	case C.SL_ABOVE: dir = 1; break
	case C.SL_BELOW: dir = -1; break
	default:
		dir = slur_multi(k1, k2)
		if (!dir)
			dir = slur_direction(k1, k2)
		break
	}

	var	nn = 1,
		upstaff = k1.st,
		two_staves = false

	if (k1 != k2) {
		k = k1.next
		while (1) {
			if (k.type == C.NOTE || k.type == C.REST) {
				nn++
				if (k.st != upstaff) {
					two_staves = true
					if (k.st < upstaff)
						upstaff = k.st
				}
			}
			if (k == k2)
				break
			k = k.next
		}
	}
/*fixme: KO when two staves*/
if (two_staves) error(2, k1, "*** multi-staves slurs not treated yet");

	/* fix endpoints */
	x1 = k1_o.x
	if (k1_o.notes && k1_o.notes[0].shhd)
		x1 += k1_o.notes[0].shhd
	if (k1_o != k2) {
		x2 = k2.x
		if (k2.notes)
			x2 += k2.notes[0].shhd
	} else {		/* (the slur starts on last note of the line) */
		for (k = k2.ts_next; k; k = k.ts_next)
//fixme: must check if the staff continues
			if (k.type == C.STAVES)
				break
		x2 = k ? k.x : realwidth
	}

	if (m1 >= 0) {
		y1 = 3 * (k1.notes[m1].pit - 18) + 5 * dir
	} else {
		y1 = dir > 0 ? k1.ymx + 2 : k1.ymn - 2
		if (k1.type == C.NOTE) {
			if (dir > 0) {
				if (k1.stem > 0) {
					x1 += 5
					if (k1.beam_end
					 && k1.nflags >= -1	/* if with a stem */
//fixme: check if at end of tuplet
					 && !k1.in_tuplet) {
//					  || k1.ys > y1 - 3)) {
						if (k1.nflags > 0) {
							x1 += 2;
							y1 = k1.ys - 3
						} else {
							y1 = k1.ys - 6
						}
// don't clash with decorations
//					} else {
//						y1 = k1.ys + 3
					}
//				} else {
//					y1 = k1.y + 8
				}
			} else {
				if (k1.stem < 0) {
					x1 -= 1
					if (k2.grace) {
						y1 = k1.y - 8
					} else if (k1.beam_end
						&& k1.nflags >= -1
						&& (!k1.in_tuplet
						 || k1.ys < y1 + 3)) {
						if (k1.nflags > 0) {
							x1 += 2;
							y1 = k1.ys + 3
						} else {
							y1 = k1.ys + 6
						}
//					} else {
//						y1 = k1.ys - 3
					}
//				} else {
//					y1 = k1.y - 8
				}
			}
		}
	}
	if (m2 >= 0) {
		y2 = 3 * (k2.notes[m2].pit - 18) + 5 * dir
	} else {
		y2 = dir > 0 ? k2.ymx + 2 : k2.ymn - 2
		if (k2.type == C.NOTE) {
			if (dir > 0) {
				if (k2.stem > 0) {
					x2 += 1
					if (k2.beam_st
					 && k2.nflags >= -1
					 && !k2.in_tuplet)
//						|| k2.ys > y2 - 3))
						y2 = k2.ys - 6
//					else
//						y2 = k2.ys + 3
//				} else {
//					y2 = k2.y + 8
				}
			} else {
				if (k2.stem < 0) {
					x2 -= 5
					if (k2.beam_st
					 && k2.nflags >= -1
					 && !k2.in_tuplet)
//						|| k2.ys < y2 + 3))
						y2 = k2.ys + 6
//					else
//						y2 = k2.ys - 3
//				} else {
//					y2 = k2.y - 8
				}
			}
		}
	}

	if (k1.type != C.NOTE) {
		y1 = y2 + 1.2 * dir;
		x1 = k1.x + k1.wr * .5
		if (x1 > x2 - 12)
			x1 = x2 - 12
	}

	if (k2.type != C.NOTE) {
		if (k1.type == C.NOTE)
			y2 = y1 + 1.2 * dir
		else
			y2 = y1
		if (k1 != k2)
			x2 = k2.x - k2.wl * .3
	}

	if (nn >= 3) {
		if (k1.next.type != C.BAR
		 && k1.next.x < x1 + 48) {
			if (dir > 0) {
				y = k1.next.ymx - 2
				if (y1 < y)
					y1 = y
			} else {
				y = k1.next.ymn + 2
				if (y1 > y)
					y1 = y
			}
		}
		if (k2.prev
		 && k2.prev.type != C.BAR
		 && k2.prev.x > x2 - 48) {
			if (dir > 0) {
				y = k2.prev.ymx - 2
				if (y2 < y)
					y2 = y
			} else {
				y = k2.prev.ymn + 2
				if (y2 > y)
					y2 = y
			}
		}
	}

	a = (y2 - y1) / (x2 - x1)		/* slur steepness */
	if (a > SLUR_SLOPE || a < -SLUR_SLOPE) {
		a = a > SLUR_SLOPE ? SLUR_SLOPE : -SLUR_SLOPE
		if (a * dir > 0)
			y1 = y2 - a * (x2 - x1)
		else
			y2 = y1 + a * (x2 - x1)
	}

	/* for big vertical jump, shift endpoints */
	y = y2 - y1
	if (y > 8)
		y = 8
	else if (y < -8)
		y = -8
	z = y
	if (z < 0)
		z = -z;
	dx = .5 * z;
	dy = .3 * y
	if (y * dir > 0) {
		x2 -= dx;
		y2 -= dy
	} else {
		x1 += dx;
		y1 += dy
	}

	/* special case for grace notes */
	if (k1.grace)
		x1 = k1.x - GSTEM_XOFF * .5
	if (k2.grace)
		x2 = k2.x + GSTEM_XOFF * 1.5;

	h = 0;
	a = (y2 - y1) / (x2 - x1)
	if (k1 != k2
	 && k1.v == k2.v) {
	    addy = y1 - a * x1
	    for (k = k1.next; k != k2 ; k = k.next) {
		if (k.st != upstaff)
			continue
		switch (k.type) {
		case C.NOTE:
		case C.REST:
			if (dir > 0) {
				y = 3 * (k.notes[k.nhd].pit - 18) + 6
				if (y < k.ymx)
					y = k.ymx;
				y -= a * k.x + addy
				if (y > h)
					h = y
			} else {
				y = 3 * (k.notes[0].pit - 18) - 6
				if (y > k.ymn)
					y = k.ymn;
				y -= a * k.x + addy
				if (y < h)
					h = y
			}
			break
		case C.GRACE:
			for (g = k.extra; g; g = g.next) {
				if (dir > 0) {
					y = 3 * (g.notes[g.nhd].pit - 18) + 6
					if (y < g.ymx)
						y = g.ymx;
					y -= a * g.x + addy
					if (y > h)
						h = y
				} else {
					y = 3 * (g.notes[0].pit - 18) - 6
					if (y > g.ymn)
						y = g.ymn;
					y -= a * g.x + addy
					if (y < h)
						h = y
				}
			}
			break
		}
	    }
	    y1 += .45 * h;
	    y2 += .45 * h;
	    h *= .65
	}

	if (nn > 3)
		height = (.08 * (x2 - x1) + 12) * dir
	else
		height = (.03 * (x2 - x1) + 8) * dir
	if (dir > 0) {
		if (height < 3 * h)
			height = 3 * h
		if (height > 40)
			height = 40
	} else {
		if (height > 3 * h)
			height = 3 * h
		if (height < -40)
			height = -40
	}

	y = y2 - y1
	if (y < 0)
		y = -y
	if (dir > 0) {
		if (height < .8 * y)
			height = .8 * y
	} else {
		if (height > -.8 * y)
			height = -.8 * y
	}
	height *= cfmt.slurheight;

//	anno_start(k1_o, 'slur');
	slur_out(x1, y1, x2, y2, dir, height, slur_type & C.SL_DOTTED);
//	anno_stop(k1_o, 'slur');

	/* have room for other symbols */
	dx = x2 - x1;
	a = (y2 - y1) / dx;
/*fixme: it seems to work with .4, but why?*/
	addy = y1 - a * x1 + .4 * height
	if (k1.v == k2.v)
	    for (k = k1; k != k2; k = k.next) {
		if (k.st != upstaff)
			continue
		y = a * k.x + addy
		if (k.ymx < y)
			k.ymx = y
		else if (k.ymn > y)
			k.ymn = y
		if (k.next == k2) {
			dx = x2
			if (k2.sl1)
				dx -= 5
		} else {
			dx = k.next.x
		}
		if (k != k1)
			x1 = k.x;
		dx -= x1;
		y_set(upstaff, dir > 0, x1, dx, y)
	}
	return (dir > 0 ? C.SL_ABOVE : C.SL_BELOW) | (slur_type & C.SL_DOTTED)
}

/* -- draw the slurs between 2 symbols --*/
function draw_slurs(first, last) {
	var	s1, k, gr1, gr2, i, m1, m2, slur_type, cont,
		s = first

	while (1) {
		if (!s || s == last) {
			if (!gr1
			 || !(s = gr1.next)
			 || s == last)
				break
			gr1 = null
		}
		if (s.type == C.GRACE) {
			gr1 = s;
			s = s.extra
			continue
		}
		if ((s.type != C.NOTE && s.type != C.REST
		  && s.type != C.SPACE)
		 || (!s.slur_start && !s.sl1)) {
			s = s.next
			continue
		}
		k = null;		/* find matching slur end */
		s1 = s.next
		var gr1_out = false
		while (1) {
			if (!s1) {
				if (gr2) {
					s1 = gr2.next;
					gr2 = null
					continue
				}
				if (!gr1 || gr1_out)
					break
				s1 = gr1.next;
				gr1_out = true
				continue
			}
			if (s1.type == C.GRACE) {
				gr2 = s1;
				s1 = s1.extra
				continue
			}
			if (s1.type == C.BAR
			 && (s1.bar_type[0] == ':'
			  || s1.bar_type == "|]"
			  || s1.bar_type == "[|"
			  || (s1.text && s1.text[0] != '1'))) {
				k = s1
				break
			}
			if (s1.type != C.NOTE && s1.type != C.REST
			 && s1.type != C.SPACE) {
				s1 = s1.next
				continue
			}
			if (s1.slur_end || s1.sl2) {
				k = s1
				break
			}
			if (s1.slur_start || s1.sl1) {
				if (gr2) {	/* if in grace note sequence */
					for (k = s1; k.next; k = k.next)
						;
					k.next = gr2.next
					if (gr2.next)
						gr2.next.prev = k;
//					gr2.slur_start = C.SL_AUTO
					k = null
				}
				draw_slurs(s1, last)
				if (gr2
				 && gr2.next) {
					gr2.next.prev.next = null;
					gr2.next.prev = gr2
				}
			}
			if (s1 == last)
				break
			s1 = s1.next
		}
		if (!s1) {
			k = next_scut(s)
		} else if (!k) {
			s = s1
			if (s == last)
				break
			continue
		}

		/* if slur in grace note sequence, change the linkages */
		if (gr1) {
			for (s1 = s; s1.next; s1 = s1.next)
				;
			s1.next = gr1.next
			if (gr1.next)
				gr1.next.prev = s1;
			gr1.slur_start = C.SL_AUTO
		}
		if (gr2) {
			gr2.prev.next = gr2.extra;
			gr2.extra.prev = gr2.prev;
			gr2.slur_start = C.SL_AUTO
		}
		if (s.slur_start) {
			slur_type = s.slur_start & 0x0f;
			s.slur_start >>= 4;
			m1 = -1
		} else {
			for (m1 = 0; m1 <= s.nhd; m1++)
				if (s.notes[m1].sl1)
					break
			slur_type = s.notes[m1].sl1 & 0x0f;
			s.notes[m1].sl1 >>= 4;
			s.sl1--
		}
		m2 = -1;
		cont = 0
		if ((k.type == C.NOTE || k.type == C.REST || k.type == C.SPACE) &&
		    (k.slur_end || k.sl2)) {
			if (k.slur_end) {
				k.slur_end--
			} else {
				for (m2 = 0; m2 <= k.nhd; m2++)
					if (k.notes[m2].sl2)
						break
				k.notes[m2].sl2--;
				k.sl2--
			}
		} else {
			if (k.type != C.BAR
			 || (k.bar_type[0] != ':'
			  && k.bar_type != "|]"
			  && k.bar_type != "[|"
			  && (!k.text || k.text[0] == '1')))
				cont = 1
		}
		slur_type = draw_slur(s, k, m1, m2, slur_type)
		if (cont) {
			if (!k.p_v.slur_start)
				k.p_v.slur_start = 0;
			k.p_v.slur_start <<= 4;
			k.p_v.slur_start += slur_type
		}

		/* if slur in grace note sequence, restore the linkages */
		if (gr1
		 && gr1.next) {
			gr1.next.prev.next = null;
			gr1.next.prev = gr1
		}
		if (gr2) {
			gr2.prev.next = gr2;
			gr2.extra.prev = null
		}

		if (s.slur_start || s.sl1)
			continue
		if (s == last)
			break
		s = s.next
	}
}

/* -- draw a tuplet -- */
/* (the staves are not yet defined) */
/* (delayed output) */
/* See http://moinejf.free.fr/abcm2ps-doc/tuplets.xhtml
 * for the value of 'tf' */
function draw_tuplet(s1,
			lvl) {	// nesting level
	var	s2, s3, g, upstaff, nb_only, some_slur,
		x1, x2, y1, y2, xm, ym, a, s0, yy, yx, dy, a, b, dir,
		p, q, r

	// check if some slurs and treat the nested tuplets
	upstaff = s1.st
	for (s2 = s1; s2; s2 = s2.next) {
		if (s2.type != C.NOTE && s2.type != C.REST) {
			if (s2.type == C.GRACE) {
				for (g = s2.extra; g; g = g.next) {
					if (g.slur_start || g.sl1)
						some_slur = true
				}
			}
			continue
		}
		if (s2.slur_start || s2.slur_end /* if slur start/end */
		 || s2.sl1 || s2.sl2)
			some_slur = true
		if (s2.st < upstaff)
			upstaff = s2.st
		if (lvl == 0) {
			if (s2.tp1)
				draw_tuplet(s2, 1)
			if (s2.te0)
				break
		} else if (s2.te1)
			break
	}

	if (!s2) {
		error(1, s1, "No end of tuplet in this music line")
		if (lvl == 0)
			s1.tp0 = 0
		else
			s1.tp1 = 0
		return
	}

	/* draw the slurs fully inside the tuplet */
	if (some_slur) {
		draw_slurs(s1, s2)

		// don't draw the tuplet when a slur starts or stops inside it
		if (s1.slur_start || s1.sl1)
			return
		for (s3 = s1.next; s3 != s2; s3 = s3.next) {
			if (s3.slur_start || s3.slur_end
			 || s3.sl1 || s3.sl2)
				return
		}

		if (s2.slur_end || s2.sl2)
			return
	}

	if (lvl == 0) {
		p = s1.tp0;
		s1.tp0 = 0;
		q = s1.tq0
	} else {
		p = s1.tp1;
		s1.tp1 = 0
		q = s1.tq1
	}

	if (s1.tf[0] == 1)			/* if 'when' == never */
		return

	dir = s1.tf[3]				/* 'where' (C.SL_xxx) */
	if (!dir)
		dir = s1.stem > 0 ? C.SL_ABOVE : C.SL_BELOW

	if (s1 == s2) {				/* tuplet with 1 note (!) */
		nb_only = true
	} else if (s1.tf[1] == 1) {			/* 'what' == slur */
		nb_only = true;
		draw_slur(s1, s2, -1, -1, dir)
	} else {

		/* search if a bracket is needed */
		if (s1.tf[0] == 2		/* if 'when' == always */
		 || s1.type != C.NOTE || s2.type != C.NOTE) {
			nb_only = false
		} else {
			nb_only = true
			for (s3 = s1; ; s3 = s3.next) {
				if (s3.type != C.NOTE
				 && s3.type != C.REST) {
					if (s3.type == C.GRACE
					 || s3.type == C.SPACE)
						continue
					nb_only = false
					break
				}
				if (s3 == s2)
					break
				if (s3.beam_end) {
					nb_only = false
					break
				}
			}
			if (nb_only
			 && !s1.beam_st
			 && !s1.beam_br1
			 && !s1.beam_br2) {
				for (s3 = s1.prev; s3; s3 = s3.prev) {
					if (s3.type == C.NOTE
					 || s3.type == C.REST) {
						if (s3.nflags >= s1.nflags)
							nb_only = false
						break
					}
				}
			}
			if (nb_only && !s2.beam_end) {
				for (s3 = s2.next; s3; s3 = s3.next) {
					if (s3.type == C.NOTE
					 || s3.type == C.REST) {
						if (!s3.beam_br1
						 && !s3.beam_br2
						 && s3.nflags >= s2.nflags)
							nb_only = false
						break
					}
				}
			}
		}
	}

	/* if number only, draw it */
	if (nb_only) {
		if (s1.tf[2] == 1)		/* if 'which' == none */
			return
		xm = (s2.x + s1.x) / 2
		if (s1 == s2)			/* tuplet with 1 note */
			a = 0
		else
			a = (s2.ys - s1.ys) / (s2.x - s1.x);
		b = s1.ys - a * s1.x;
		yy = a * xm + b
		if (dir == C.SL_ABOVE) {
			ym = y_get(upstaff, 1, xm - 4, 8)
			if (ym > yy)
				b += ym - yy;
			b += 2
		} else {
			ym = y_get(upstaff, 0, xm - 4, 8)
			if (ym < yy)
				b += ym - yy;
			b -= 10
		}
		for (s3 = s1; ; s3 = s3.next) {
			if (s3.x >= xm)
				break
		}
		if (s1.stem * s2.stem > 0) {
			if (s1.stem > 0)
				xm += 1.5
			else
				xm -= 1.5
		}
		ym = a * xm + b
		if (s1.tf[2] == 0)		/* if 'which' == number */
			out_bnum(xm, ym, p)
		else
			out_bnum(xm, ym, p + ':' +  q)
		if (dir == C.SL_ABOVE) {
			ym += 10
			if (s3.ymx < ym)
				s3.ymx = ym;
			y_set(upstaff, true, xm - 3, 6, ym)
		} else {
			if (s3.ymn > ym)
				s3.ymn = ym;
			y_set(upstaff, false, xm - 3, 6, ym)
		}
		return
	}

	if (s1.tf[1] != 0)				/* if 'what' != square */
		error(2, s1, "'what' value of %%tuplets not yet coded")

/*fixme: two staves not treated*/
/*fixme: to optimize*/
	dir = s1.tf[3]				// 'where'
	if (!dir)
		dir = s1.multi >= 0 ? C.SL_ABOVE : C.SL_BELOW
    if (dir == C.SL_ABOVE) {

	/* sole or upper voice: the bracket is above the staff */
	if (s1.st == s2.st) {
		y1 = y2 = staff_tb[upstaff].topbar + 4
	} else {
		y1 = s1.ymx;
		y2 = s2.ymx
	}

	x1 = s1.x - 4;
	if (s1.st == upstaff) {
		for (s3 = s1; !s3.dur; s3 = s3.next)
			;
		ym = y_get(upstaff, 1, s3.x - 4, 8)
		if (ym > y1)
			y1 = ym
		if (s1.stem > 0)
			x1 += 3
	}

	if (s2.st == upstaff) {
		for (s3 = s2; !s3.dur; s3 = s3.prev)
			;
		ym = y_get(upstaff, 1, s3.x - 4, 8)
		if (ym > y2)
			y2 = ym
	}

	/* end the backet according to the last note duration */
	if (s2.dur > s2.prev.dur) {
		if (s2.next)
			x2 = s2.next.x - s2.next.wl - 5
		else
			x2 = realwidth - 6
	} else {
		x2 = s2.x + 4;
		r = s2.stem >= 0 ? 0 : s2.nhd
		if (s2.notes[r].shhd > 0)
			x2 += s2.notes[r].shhd
		if (s2.st == upstaff
		 && s2.stem > 0)
			x2 += 3.5
	}

	xm = .5 * (x1 + x2);
	ym = .5 * (y1 + y2);

	a = (y2 - y1) / (x2 - x1);
	s0 = 3 * (s2.notes[s2.nhd].pit - s1.notes[s1.nhd].pit) / (x2 - x1)
	if (s0 > 0) {
		if (a < 0)
			a = 0
		else if (a > s0)
			a = s0
	} else {
		if (a > 0)
			a = 0
		else if (a < s0)
			a = s0
	}
	if (a * a < .1 * .1)
		a = 0

	/* shift up bracket if needed */
	dy = 0
	for (s3 = s1; ; s3 = s3.next) {
		if (!s3.dur			/* not a note or a rest */
		 || s3.st != upstaff) {
			if (s3 == s2)
				break
			continue
		}
		yy = ym + (s3.x - xm) * a;
		yx = y_get(upstaff, 1, s3.x - 4, 8) + 2
		if (yx - yy > dy)
			dy = yx - yy
		if (s3 == s2)
			break
	}

	ym += dy;
	y1 = ym + a * (x1 - xm);
	y2 = ym + a * (x2 - xm);

	/* shift the slurs / decorations */
	ym += 8
	for (s3 = s1; ; s3 = s3.next) {
		if (s3.st == upstaff) {
			yy = ym + (s3.x - xm) * a
			if (s3.ymx < yy)
				s3.ymx = yy
			if (s3 == s2)
				break
			y_set(upstaff, true, s3.x, s3.next.x - s3.x, yy)
		} else if (s3 == s2) {
			break
		}
	}

    } else {	/* lower voice of the staff: the bracket is below the staff */
/*fixme: think to all of that again..*/
	x1 = s1.x - 7
	if (s2.dur > s2.prev.dur) {
		if (s2.next)
			x2 = s2.next.x - s2.next.wl - 8
		else
			x2 = realwidth - 6
	} else {
		x2 = s2.x + 2
		if (s2.notes[s2.nhd].shhd > 0)
			x2 += s2.notes[s2.nhd].shhd
	}
	if (s1.stem >= 0) {
		x1 += 2;
		x2 += 2
	}

	if (s1.st == upstaff) {
		for (s3 = s1; !s3.dur; s3 = s3.next)
			;
		y1 = y_get(upstaff, 0, s3.x - 4, 8)
	} else {
		y1 = 0
	}
	if (s2.st == upstaff) {
		for (s3 = s2; !s3.dur; s3 = s3.prev)
			;
		y2 = y_get(upstaff, 0, s3.x - 4, 8)
	} else {
		y2 = 0
	}

	xm = .5 * (x1 + x2);
	ym = .5 * (y1 + y2);

	a = (y2 - y1) / (x2 - x1);
	s0 = 3 * (s2.notes[0].pit - s1.notes[0].pit) / (x2 - x1)
	if (s0 > 0) {
		if (a < 0)
			a = 0
		else if (a > s0)
			a = s0
	} else {
		if (a > 0)
			a = 0
		else if (a < s0)
			a = s0
	}
	if (a * a < .1 * .1)
		a = 0

	/* shift down the bracket if needed */
	dy = 0
	for (s3 = s1; ; s3 = s3.next) {
		if (!s3.dur			/* not a note nor a rest */
		 || s3.st != upstaff) {
			if (s3 == s2)
				break
			continue
		}
		yy = ym + (s3.x - xm) * a;
		yx = y_get(upstaff, 0, s3.x - 4, 8)
		if (yx - yy < dy)
			dy = yx - yy
		if (s3 == s2)
			break
	}

	ym += dy - 10;
	y1 = ym + a * (x1 - xm);
	y2 = ym + a * (x2 - xm);

	/* shift the slurs / decorations */
	ym -= 2
	for (s3 = s1; ; s3 = s3.next) {
		if (s3.st == upstaff) {
			if (s3 == s2)
				break
			yy = ym + (s3.x - xm) * a
			if (s3.ymn > yy)
				s3.ymn = yy;
			y_set(upstaff, false, s3.x, s3.next.x - s3.x, yy)
		}
		if (s3 == s2)
			break
	}
    } /* lower voice */

	if (s1.tf[2] == 1) {			/* if 'which' == none */
		out_tubr(x1, y1 + 4, x2 - x1, y2 - y1, dir == C.SL_ABOVE);
		return
	}
	out_tubrn(x1, y1, x2 - x1, y2 - y1, dir == C.SL_ABOVE,
		s1.tf[2] == 0 ? p.toString() : p + ':' +  q);

	yy = .5 * (y1 + y2)
	if (dir == C.SL_ABOVE)
		y_set(upstaff, true, xm - 3, 6, yy + 9)
	else
		y_set(upstaff, false, xm - 3, 6, yy)
}

/* -- draw the ties between two notes/chords -- */
function draw_note_ties(k1, k2, mhead1, mhead2, job) {
	var i, dir, m1, m2, p, p2, y, st, k, x1, x2, h, sh, time

	for (i = 0; i < mhead1.length; i++) {
		m1 = mhead1[i];
		p = k1.notes[m1].pit;
		m2 = mhead2[i];
		p2 = job != 2 ? k2.notes[m2].pit : p;
		dir = (k1.notes[m1].ti1 & 0x07) == C.SL_ABOVE ? 1 : -1;

		x1 = k1.x;
		sh = k1.notes[m1].shhd		/* head shift */
		if (dir > 0) {
			if (m1 < k1.nhd && p + 1 == k1.notes[m1 + 1].pit)
				if (k1.notes[m1 + 1].shhd > sh)
					sh = k1.notes[m1 + 1].shhd
		} else {
			if (m1 > 0 && p == k1.notes[m1 - 1].pit + 1)
				if (k1.notes[m1 - 1].shhd > sh)
					sh = k1.notes[m1 - 1].shhd
		}
		x1 += sh * .6;

		x2 = k2.x
		if (job != 2) {
			sh = k2.notes[m2].shhd
			if (dir > 0) {
				if (m2 < k2.nhd && p2 + 1 == k2.notes[m2 + 1].pit)
					if (k2.notes[m2 + 1].shhd < sh)
						sh = k2.notes[m2 + 1].shhd
			} else {
				if (m2 > 0 && p2 == k2.notes[m2 - 1].pit + 1)
					if (k2.notes[m2 - 1].shhd < sh)
						sh = k2.notes[m2 - 1].shhd
			}
			x2 += sh * .6
		}

		st = k1.st
		switch (job) {
		case 0:
			if (p != p2 && !(p & 1))
				p = p2
			break
		case 3:				/* clef or staff change */
			dir = -dir
			// fall thru
		case 1:				/* no starting note */
			x1 = k1.x
			if (x1 > x2 - 20)
				x1 = x2 - 20;
			p = p2;
			st = k2.st
			break
/*		case 2:				 * no ending note */
		default:
			if (k1 != k2) {
				x2 -= k2.wl
				if (k2.type == C.BAR)
					x2 += 5
			} else {
				time = k1.time + k1.dur
				for (k = k1.ts_next; k; k = k.ts_next)
//(fixme: must check if the staff continues??)
					if (k.time > time)
						break
				x2 = k ? k.x : realwidth
			}
			if (x2 < x1 + 16)
				x2 = x1 + 16
			break
		}
		if (x2 - x1 > 20) {
			x1 += 3.5;
			x2 -= 3.5
		} else {
			x1 += 1.5;
			x2 -= 1.5
		}

		y = 3 * (p - 18)

		h = (.04 * (x2 - x1) + 10) * dir;
//		anno_start(k1, 'slur');
		slur_out(x1, staff_tb[st].y + y,
			 x2, staff_tb[st].y + y,
			 dir, h, k1.notes[m1].ti1 & C.SL_DOTTED)
//		anno_stop(k1, 'slur')
	}
}

/* -- draw ties between neighboring notes/chords -- */
function draw_ties(k1, k2,
			job) {	// 0: normal
				// 1: no starting note
				// 2: no ending note
				// 3: no start for clef or staff change
	var	k3, i, j, m1, pit, tie2,
		mhead1 = [],
		mhead2 = [],
		mhead3 = [],
		nh1 = k1.nhd,
		time = k1.time + k1.dur

	/* half ties from last note in line or before new repeat */
	if (job == 2) {
		for (i = 0; i <= nh1; i++) {
			if (k1.notes[i].ti1)
				mhead3.push(i)
		}
		draw_note_ties(k1, k2 || k1, mhead3, mhead3, job)
		return
	}

	/* set up list of ties to draw */
	for (i = 0; i <= nh1; i++) {
		if (!k1.notes[i].ti1)
			continue
		tie2 = -1;
		pit = k1.notes[i].apit
		for (m1 = k2.nhd; m1 >= 0; m1--) {
			switch (k2.notes[m1].apit - pit) {
			case 1:			/* maybe ^c - _d */
			case -1:		/* _d - ^c */
				if (k1.notes[i].acc != k2.notes[m1].acc)
					tie2 = m1
			default:
				continue
			case 0:
				tie2 = m1
				break
			}
			break
		}
		if (tie2 >= 0) {		/* 1st or 2nd choice */
			mhead1.push(i);
			mhead2.push(tie2)
		} else {
			mhead3.push(i)		/* no match */
		}
	}

	/* draw the ties */
	draw_note_ties(k1, k2, mhead1, mhead2, job)

	/* if any bad tie, try an other voice of the same staff */
	if (!mhead3.length)
		return				/* no bad tie */

	k3 = k1.ts_next
	while (k3 && k3.time < time)
		k3 = k3.ts_next
	while (k3 && k3.time == time) {
		if (k3.type != C.NOTE
		 || k3.st != k1.st) {
			k3 = k3.ts_next
			continue
		}
		mhead1.length = 0;
		mhead2.length = 0
		for (i = mhead3.length; --i >= 0; ) {
			j = mhead3[i];
			pit = k1.notes[j].apit
			for (m1 = k3.nhd; m1 >= 0; m1--) {
				if (k3.notes[m1].apit == pit) {
					mhead1.push(j);
					mhead2.push(m1);
					mhead3[i] = mhead3.pop()
					break
				}
			}
		}
		if (mhead1.length > 0) {
			draw_note_ties(k1, k3,
					mhead1, mhead2,
					job == 1 ? 1 : 0)
			if (mhead3.length == 0)
				return
		}
		k3 = k3.ts_next
	}

	if (mhead3.length != 0)
		error(1, k1, "Bad tie")
}

/* -- try to get the symbol of a ending tie when combined voices -- */
function tie_comb(s) {
	var	s1, time, st;

	time = s.time + s.dur;
	st = s.st
	for (s1 = s.ts_next; s1; s1 = s1.ts_next) {
		if (s1.st != st)
			continue
		if (s1.time == time) {
			if (s1.type == C.NOTE)
				return s1
			continue
		}
		if (s1.time > time)
			return s		// bad tie
	}
	return //null				// no ending tie
}

/* -- draw all ties between neighboring notes -- */
function draw_all_ties(p_voice) {
	var s1, s2, s3, clef_chg, time, s_rtie, s_tie, x, dx

	function draw_ties_g(s1, s2, job) {
		var g

		if (s1.type == C.GRACE) {
			for (g = s1.extra; g; g = g.next) {
				if (g.ti1)
					draw_ties(g, s2, job)
			}
		} else {
			draw_ties(s1, s2, job)
		}
	} // draw_ties_g()

	for (s1 = p_voice.sym; s1; s1 = s1.next) {
		switch (s1.type) {
		case C.CLEF:
		case C.KEY:
		case C.METER:
			continue
		}
		break
	}
	s_rtie = p_voice.s_rtie			/* tie from 1st repeat bar */
	for (s2 = s1; s2; s2 = s2.next) {
		if (s2.dur
		 || s2.type == C.GRACE)
			break
		if (s2.type != C.BAR
		 || !s2.text)			// not a repeat bar
			continue
		if (s2.text[0] == '1')		/* 1st repeat bar */
			s_rtie = p_voice.s_tie
		else
			p_voice.s_tie = s_rtie
	}
	if (!s2)
		return
	if (p_voice.s_tie) {			/* tie from previous line */
		p_voice.s_tie.x = s1.x + s1.wr;
		s1 = p_voice.s_tie;
		p_voice.s_tie = null;
		s1.st = s2.st;
		s1.ts_next = s2.ts_next;	/* (for tie to other voice) */
		s1.time = s2.time - s1.dur;	/* (if after repeat sequence) */
		draw_ties(s1, s2, 1)		/* tie to 1st note */
	}

	/* search the start of ties */
//	clef_chg = false
	while (1) {
		for (s1 = s2; s1; s1 = s1.next) {
			if (s1.ti1)
				break
			if (!s_rtie)
				continue
			if (s1.type != C.BAR
			 || !s1.text)			// not a repeat bar
				continue
			if (s1.text[0] == '1') {	/* 1st repeat bar */
				s_rtie = null
				continue
			}
			if (s1.bar_type == '|')
				continue		// not a repeat
			for (s2 = s1.next; s2; s2 = s2.next)
				if (s2.type == C.NOTE)
					break
			if (!s2) {
				s1 = null
				break
			}
			s_tie = clone(s_rtie);
			s_tie.x = s1.x;
			s_tie.next = s2;
			s_tie.st = s2.st;
			s_tie.time = s2.time - s_tie.dur;
			draw_ties(s_tie, s2, 1)
		}
		if (!s1)
			break

		/* search the end of the tie
		 * and notice the clef changes (may occur in an other voice) */
		time = s1.time + s1.dur
		for (s2 = s1.next; s2; s2 = s2.next) {
			if (s2.dur)
				break
			if (s2.text) {			// repeat bar
				if (s2.text[0] != '1')
					break
				s_rtie = s1		/* 1st repeat bar */
			}
		}
		if (!s2) {
			for (s2 = s1.ts_next; s2; s2 = s2.ts_next) {
				if (s2.st != s1.st)
					continue
				if (s2.time < time)
					continue
				if (s2.time > time) {
					s2 = null
					break
				}
				if (s2.dur)
					break
			}
			if (!s2) {
				draw_ties_g(s1, null, 2);
				p_voice.s_tie = s1
				break
			}
		} else {
			if (s2.type != C.NOTE
			 && s2.type != C.BAR) {
				error(1, s1, "Bad tie")
				continue
			}
			if (s2.time != time) {
				s3 = tie_comb(s1)
				if (s3 == s1) {
					error(1, s1, "Bad tie")
					continue
				}
				s2 = s3
			}
		}
		for (s3 = s1.ts_next; s3; s3 = s3.ts_next) {
			if (s3.st != s1.st)
				continue
			if (s3.time > time)
				break
			if (s3.type == C.CLEF) {
				clef_chg = true
				continue
			}
		}

		/* ties with clef or staff change */
		if (clef_chg || s1.st != s2.st) {
			clef_chg = false;
			dx = (s2.x - s1.x) * .4;
			x = s2.x;
			s2.x -= dx
			if (s2.x > s1.x + 32.)
				s2.x = s1.x + 32.;
			draw_ties_g(s1, s2, 2);
			s2.x = x;
			x = s1.x;
			s1.x += dx
			if (s1.x < s2.x - 24.)
				s1.x = s2.x - 24.;
			draw_ties(s1, s2, 3);
			s1.x = x
			continue
		}
		draw_ties_g(s1, s2, s2.type == C.NOTE ? 0 : 2)
	}
	p_voice.s_rtie = s_rtie
}

/* -- draw all phrasing slurs for one staff -- */
/* (the staves are not yet defined) */
function draw_all_slurs(p_voice) {
	var	k, i, m2,
		s = p_voice.sym,
		slur_type = p_voice.slur_start,
		slur_st = 0

	if (!s)
		return

	/* the starting slur types are inverted */
	if (slur_type) {
		p_voice.slur_start = 0
		while (slur_type != 0) {
			slur_st <<= 4;
			slur_st |= (slur_type & 0x0f);
			slur_type >>= 4
		}
	}

	/* draw the slurs inside the music line */
	draw_slurs(s, undefined)

	/* do unbalanced slurs still left over */
	for ( ; s; s = s.next) {
		while (s.slur_end || s.sl2) {
			if (s.slur_end) {
				s.slur_end--;
				m2 = -1
			} else {
				for (m2 = 0; m2 <= s.nhd; m2++)
					if (s.notes[m2].sl2)
						break
				s.notes[m2].sl2--;
				s.sl2--
			}
			slur_type = slur_st & 0x0f;
			k = prev_scut(s);
			draw_slur(k, s, -1, m2, slur_type)
			if (k.type != C.BAR
			 || (k.bar_type[0] != ':'
			  && k.bar_type != "|]"
			  && k.bar_type != "[|"
			  && (!k.text || k.text[0] == '1')))
				slur_st >>= 4
		}
	}
	s = p_voice.sym
	while (slur_st != 0) {
		slur_type = slur_st & 0x0f;
		slur_st >>= 4;
		k = next_scut(s);
		draw_slur(s, k, -1, -1, slur_type)
		if (k.type != C.BAR
		 || (k.bar_type[0] != ':'
		  && k.bar_type != "|]"
		  && k.bar_type != "[|"
		  && (!k.text || k.text[0] == '1'))) {
			if (!p_voice.slur_start)
				p_voice.slur_start = 0;
			p_voice.slur_start <<= 4;
			p_voice.slur_start += slur_type
		}
	}
}

/* -- draw the symbols near the notes -- */
/* (the staves are not yet defined) */
/* order:
 * - scaled
 *   - beams
 *   - decorations near the notes
 *   - measure bar numbers
 *   - n-plets
 *   - decorations tied to the notes
 *   - slurs
 * - not scaled
 *   - guitar chords
 *   - staff decorations
 *   - lyrics
 *   - measure numbers
 * The buffer output is delayed until the definition of the staff system
 */
function draw_sym_near() {
	var p_voice, p_st, s, v, st, y, g, w, i, st, dx, top, bot, output_sav;

	output_sav = output;
	output = ""

	/* calculate the beams but don't draw them (the staves are not yet defined) */
	for (v = 0; v < voice_tb.length; v++) {
		var	bm = {},
			first_note = true;

		p_voice = voice_tb[v]
		for (s = p_voice.sym; s; s = s.next) {
			switch (s.type) {
			case C.GRACE:
				for (g = s.extra; g; g = g.next) {
					if (g.beam_st && !g.beam_end)
						calculate_beam(bm, g)
				}
				break
			case C.NOTE:
				if ((s.beam_st && !s.beam_end)
				 || (first_note && !s.beam_st)) {
					first_note = false;
					calculate_beam(bm, s)
				}
				break
			}
		}
	}

	/* initialize the min/max vertical offsets */
	for (st = 0; st <= nstaff; st++) {
		p_st = staff_tb[st]
		if (!p_st.top) {
			p_st.top = new Float32Array(YSTEP);
			p_st.bot = new Float32Array(YSTEP)
		}
		for (i = 0; i < YSTEP; i++) {
			p_st.top[i] = 0;
			p_st.bot[i] = 24
		}
//		p_st.top.fill(0.);
//		p_st.bot.fill(24.)
	}

	set_tie_room();
	draw_deco_near()

	/* set the min/max vertical offsets */
	for (s = tsfirst; s; s = s.ts_next) {
		if (s.invis)
			continue
		switch (s.type) {
		case C.GRACE:
			for (g = s.extra; g; g = g.next) {
				y_set(s.st, true, g.x - 2, 4, g.ymx + 1);
				y_set(s.st, false, g.x - 2, 4, g.ymn - 1)
			}
			continue
		case C.MREST:
			y_set(s.st, true, s.x + 16, 32, s.ymx + 2)
			continue
		default:
			y_set(s.st, true, s.x - s.wl, s.wl + s.wr, s.ymx + 2);
			y_set(s.st, false, s.x - s.wl, s.wl + s.wr, s.ymn - 2)
			continue
		case C.NOTE:
			break
		}

		// (permit closer staves)
		if (s.stem > 0) {
			if (s.beam_st) {
				dx = 3;
				w = s.beam_end ? 4 : 10
			} else {
				dx = -8;
				w = s.beam_end ? 11 : 16
			}
			y_set(s.st, true, s.x + dx, w, s.ymx);
			y_set(s.st, false, s.x - s.wl, s.wl + s.wr, s.ymn)
		} else {
			y_set(s.st, true, s.x - s.wl, s.wl + s.wr, s.ymx);
			if (s.beam_st) {
				dx = -6;
				w = s.beam_end ? 4 : 10
			} else {
				dx = -8;
				w = s.beam_end ? 5 : 16
			}
			dx += s.notes[0].shhd;
			y_set(s.st, false, s.x + dx, w, s.ymn)
		}

		/* have room for the accidentals */
		if (s.notes[s.nhd].acc) {
			y = s.y + 8
			if (s.ymx < y)
				s.ymx = y;
			y_set(s.st, true, s.x, 0, y)
		}
		if (s.notes[0].acc) {
			y = s.y
			if (s.notes[0].acc == 1		// sharp
			 || s.notes[0].acc == 3)	// natural
				y -= 7
			else
				y -= 5
			if (s.ymn > y)
				s.ymn = y;
			y_set(s.st, false, s.x, 0, y)
		}
	}

	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v];
		s = p_voice.sym
		if (!s)
			continue
		set_color(s.color);
		st = p_voice.st;
//  if (st == undefined) {
//error(1, s, "BUG: no staff for voice " + p_voice.id)
//    continue
//  }
		set_dscale(st)

		/* draw the tuplets near the notes */
		for ( ; s; s = s.next) {
			if (s.tp0)
				draw_tuplet(s, 0)
		}
		draw_all_slurs(p_voice)

		/* draw the tuplets over the slurs */
		for (s = p_voice.sym; s; s = s.next) {
			if (s.tp0)
				draw_tuplet(s, 0)
		}
	}

	/* set the top and bottom out of the staves */
	for (st = 0; st <= nstaff; st++) {
		p_st = staff_tb[st];
		top = p_st.topbar + 2;
		bot = p_st.botbar - 2
/*fixme:should handle stafflines changes*/
		for (i = 0; i < YSTEP; i++) {
			if (top > p_st.top[i])
				p_st.top[i] = top
			if (bot < p_st.bot[i])
				p_st.bot[i] = bot
		}
	}

	set_color(undefined);
	draw_deco_note()
	draw_deco_staff();

	/* if any lyric, draw them now as unscaled */
	set_dscale(-1)
//	set_sscale(-1)
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (p_voice.have_ly) {
			draw_all_lyrics()
			break
		}
	}

	if (cfmt.measurenb >= 0)
		draw_measnb();

	set_dscale(-1);
	output = output_sav
}

/* -- draw the name/subname of the voices -- */
function draw_vname(indent) {
	var	p_voice, n, st, v, a_p, p, y, name_type,
		staff_d = []

	for (st = cur_sy.nstaff; st >= 0; st--) {
		if (cur_sy.st_print[st])
			break
	}
	if (st < 0)
		return

	// check if full or sub names
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (!p_voice.sym)
			continue
		st = cur_sy.voices[v].st
		if (!cur_sy.st_print[st])
			continue
		if (p_voice.new_name) {
			name_type = 2
			break
		}
		if (p_voice.snm)
			name_type = 1
	}
	if (!name_type)
		return
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (!p_voice.sym)
			continue
		st = cur_sy.voices[v].st
		if (!cur_sy.st_print[st])
			continue
		if (p_voice.new_name)
			delete p_voice.new_name;
		p = name_type == 2 ? p_voice.nm : p_voice.snm
		if (!p)
			continue
		if (cur_sy.staves[st].flags & CLOSE_BRACE2) {
			while (!(cur_sy.staves[st].flags & OPEN_BRACE2))
				st--
		} else if (cur_sy.staves[st].flags & CLOSE_BRACE) {
			while (!(cur_sy.staves[st].flags & OPEN_BRACE))
				st--
		}
		if (!staff_d[st])
			staff_d[st] = p
		else
			staff_d[st] += "\\n" + p
	}
	if (staff_d.length == 0)
		return
	set_font("voice");
	indent = -indent * .5			/* center */
	for (st = 0; st < staff_d.length; st++) {
		if (!staff_d[st])
			continue
		a_p = staff_d[st].split('\\n');
		y = staff_tb[st].y
			+ staff_tb[st].topbar * .5
				* staff_tb[st].staffscale
			+ 9 * (a_p.length - 1)
			- gene.curfont.size * .3;
		n = st
		if (cur_sy.staves[st].flags & OPEN_BRACE2) {
			while (!(cur_sy.staves[n].flags & CLOSE_BRACE2))
				n++
		} else if (cur_sy.staves[st].flags & OPEN_BRACE) {
			while (!(cur_sy.staves[n].flags & CLOSE_BRACE))
				n++
		}
		if (n != st)
			y -= (staff_tb[st].y - staff_tb[n].y) * .5
		for (n = 0; n < a_p.length; n++) {
			p = a_p[n];
			xy_str(indent, y, p, "c");
			y -= 18
		}
	}
}

// -- set the y offset of the staves and return the height of the whole system --
function set_staff() {
	var	s, i, st, prev_staff, v,
		y, staffsep, dy, maxsep, mbot, val, p_voice, p_staff

	/* set the scale of the voices */
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (p_voice.scale != 1)
			p_voice.scale_str = 
				'transform="scale(' + p_voice.scale.toFixed(2) + ')"'
	}

	// search the top staff
	for (st = 0; st <= nstaff; st++) {
		if (gene.st_print[st])
			break
	}
	y = 0
	if (st > nstaff) {
		st--;			/* one staff, empty */
		p_staff = staff_tb[st]
	} else {
		p_staff = staff_tb[st]
		for (i = 0; i < YSTEP; i++) {
			val = p_staff.top[i]
			if (y < val)
				y = val
		}
	}

	/* draw the parts and tempo indications if any */
	y += draw_partempo(st, y)

	if (!gene.st_print[st])
		return y;

	/* set the vertical offset of the 1st staff */
	y *= p_staff.staffscale;
	staffsep = cfmt.staffsep * .5 +
			p_staff.topbar * p_staff.staffscale
	if (y < staffsep)
		y = staffsep
	if (y < p_staff.ann_top)	// absolute annotation
		y = p_staff.ann_top;
	p_staff.y = -y;

	/* set the offset of the other staves */
	prev_staff = st
	var sy_staff_prev = cur_sy.staves[prev_staff]
	for (st++; st <= nstaff; st++) {
		p_staff = staff_tb[st]
		if (!gene.st_print[st])
			continue
		staffsep = sy_staff_prev.sep || cfmt.sysstaffsep;
		maxsep = sy_staff_prev.maxsep || cfmt.maxsysstaffsep;

		dy = 0
		if (p_staff.staffscale == staff_tb[prev_staff].staffscale) {
			for (i = 0; i < YSTEP; i++) {
				val = p_staff.top[i] -
						staff_tb[prev_staff].bot[i]
				if (dy < val)
					dy = val
			}
			dy *= p_staff.staffscale
		} else {
			for (i = 0; i < YSTEP; i++) {
				val = p_staff.top[i] * p_staff.staffscale
				  - staff_tb[prev_staff].bot[i]
					* staff_tb[prev_staff].staffscale
				if (dy < val)
					dy = val
			}
		}
		staffsep += p_staff.topbar * p_staff.staffscale
		if (dy < staffsep)
			dy = staffsep;
		maxsep += p_staff.topbar * p_staff.staffscale
		if (dy > maxsep)
			dy = maxsep;
		y += dy;
		p_staff.y = -y;

		prev_staff = st;
		sy_staff_prev = cur_sy.staves[prev_staff]
	}
	mbot = 0
	for (i = 0; i < YSTEP; i++) {
		val = staff_tb[prev_staff].bot[i]
		if (mbot > val)
			mbot = val
	}
	if (mbot > p_staff.ann_bot) 	// absolute annotation
		mbot = p_staff.ann_bot;
	mbot *= staff_tb[prev_staff].staffscale

	/* output the staff offsets */
	for (st = 0; st <= nstaff; st++) {
		p_staff = staff_tb[st];
		dy = p_staff.y
		if (p_staff.staffscale != 1) {
			p_staff.scale_str =
				'transform="translate(0,' +
					(posy - dy).toFixed(2) + ') ' +
				'scale(' + p_staff.staffscale.toFixed(2) + ')"'
		}
	}

	if (mbot == 0) {
		for (st = nstaff; st >= 0; st--) {
			if (gene.st_print[st])
				break
		}
		if (st < 0)		/* no symbol in this system ! */
			return y
	}
	dy = -mbot;
	staffsep = cfmt.staffsep * .5
	if (dy < staffsep)
		dy = staffsep;
	maxsep = cfmt.maxstaffsep * .5
	if (dy > maxsep)
		dy = maxsep;

	// return the height of the whole staff system
	return y + dy
}

/* -- draw the staff systems and the measure bars -- */
function draw_systems(indent) {
	var	s, s2, st, x, x2, res, sy,
		staves_bar, bar_force,
		xstaff = [],
		bar_bot = [],
		bar_height = []

	/* -- set the bottom and height of the measure bars -- */
	function bar_set() {
		var	st, staffscale, top, bot,
			dy = 0

		for (st = 0; st <= cur_sy.nstaff; st++) {
			if (xstaff[st] < 0) {
				bar_bot[st] = bar_height[st] = 0
				continue
			}
			staffscale = staff_tb[st].staffscale;
			top = staff_tb[st].topbar * staffscale;
			bot = staff_tb[st].botbar * staffscale
			if (dy == 0)
				dy = staff_tb[st].y + top;
			bar_bot[st] = staff_tb[st].y + bot;
			bar_height[st] = dy - bar_bot[st];
			dy = (cur_sy.staves[st].flags & STOP_BAR) ?
					0 : bar_bot[st]
		}
	} // bar_set()

	/* -- draw a staff -- */
	function draw_staff(st, x1, x2) {
		var	w, ws, i, dy, ty,
			y = 0,
			ln = "",
			stafflines = cur_sy.staves[st].stafflines,
			l = stafflines.length

		if (!/[\[|]/.test(stafflines))
			return				// no line
		w = x2 - x1;
		set_sscale(st);
		ws = w / stv_g.scale

		// check if default staff
		if (cache && cache.st_l == stafflines && cache.st_ws == ws) {
			xygl(x1, staff_tb[st].y, 'stdef' + cfmt.fullsvg)
			return
		}
		for (i = 0; i < l; i++, y -= 6) {
			if (stafflines[i] == '.')
				continue
			dy = 0
			for (; i < l; i++, y -= 6, dy -= 6) {
				switch (stafflines[i]) {
				case '.':
				case '-':
					continue
				case ty:
					ln += 'm-' + ws.toFixed(2) +
						' ' + dy +
						'h' + ws.toFixed(2);
					dy = 0
					continue
				}
				if (ty != undefined)
					ln += '"/>\n';
				ty = stafflines[i]
				ln += '<path class="stroke"'
				if (ty == '[')
					ln += ' stroke-width="1.5"';
				ln += ' d="m0 ' + y + 'h' + ws.toFixed(2);
				dy = 0
			}
			ln += '"/>\n'
		}
		y = staff_tb[st].y
		if (!cache
		 && w == get_lwidth()) {
			cache = {
				st_l: stafflines,
				st_ws: ws
			}
			i = 'stdef' + cfmt.fullsvg;
			glyphs[i] = '<g id="' + i + '">\n' + ln + '</g>';
			xygl(x1, y, i)
			return
		}
		out_XYAB('<g transform="translate(X, Y)">\n' + ln + '</g>\n', x1, y)
	} // draw_staff()

	draw_vname(indent)

	/* draw the staff, skipping the staff breaks */
	for (st = 0; st <= nstaff; st++)
		xstaff[st] = !cur_sy.st_print[st] ? -1 : 0;
	bar_set();
	draw_lstaff(0)
	for (s = tsfirst; s; s = s.ts_next) {
		if (bar_force && s.time != bar_force) {
			bar_force = 0
			for (st = 0; st <= nstaff; st++) {
				if (!cur_sy.st_print[st])
					xstaff[st] = -1
			}
			bar_set()
		}
		switch (s.type) {
		case C.STAVES:
			staves_bar = s.ts_prev.type == C.BAR ? s.ts_prev.x : 0
		    if (!staves_bar) {
			for (s2 = s.ts_next; s2; s2 = s2.ts_next) {
				if (s2.time != s.time)
					break
				switch (s2.type) {
				case C.BAR:
				case C.CLEF:
				case C.KEY:
				case C.METER:
					staves_bar = s2.x
					continue
				}
				break
			}
			if (!s2)
				staves_bar = realwidth;
		    }
			sy = s.sy
			for (st = 0; st <= nstaff; st++) {
				x = xstaff[st]
				if (x < 0) {		// no staff yet
					if (sy.st_print[st])
						xstaff[st] = staves_bar ?
							staves_bar : (s.x - s.wl - 2)
					continue
				}
				if (sy.st_print[st]	// if not staff stop
				 && sy.staves[st].stafflines ==
						cur_sy.staves[st].stafflines)
					continue
				if (staves_bar) {
					x2 = staves_bar;
					bar_force = s.time
				} else {
					x2 = s.x - s.wl - 2;
					xstaff[st] = -1
				}
				draw_staff(st, x, x2)
				if (sy.st_print[st])
					xstaff[st] = x2
			}
			cur_sy = sy;
			bar_set()
			continue
		case C.BAR:
			st = s.st
			if (s.second || s.invis)
				break
			draw_bar(s, bar_bot[st], bar_height[st]);
			break
		case C.STBRK:
			if (cur_sy.voices[s.v].range == 0) {
				if (s.xmx > 14) {

					/* draw the left system if stbrk in all voices */
					var nv = 0
					for (var i = 0; i < voice_tb.length; i++) {
						if (cur_sy.voices[i].range > 0)
							nv++
					}
					for (s2 = s.ts_next; s2; s2 = s2.ts_next) {
						if (s2.type != C.STBRK)
							break
						nv--
					}
					if (nv == 0)
						draw_lstaff(s.x)
				}
			}
			s2 = s.prev
			if (!s2)
				break
			x2 = s2.x
			if (s2.type != C.BAR)
				x2 += s2.wr;
			st = s.st;
			x = xstaff[st]
			if (x >= 0) {
				if (x >= x2)
					continue
				draw_staff(st, x, x2)
			}
			xstaff[st] = s.x
			break
//		default:
//fixme:does not work for "%%staves K: M: $" */
//removed for K:/M: in empty staves
//			if (!cur_sy.st_print[st])
//				s.invis = true
//			break
		}
	}

	// draw the end of the staves
	for (st = 0; st <= nstaff; st++) {
		if (bar_force && !cur_sy.st_print[st])
			continue
		x = xstaff[st]
		if (x < 0 || x >= realwidth)
			continue
		draw_staff(st, x, realwidth)
	}
//	set_sscale(-1)
}

/* -- draw remaining symbols when the staves are defined -- */
function draw_symbols(p_voice) {
	var	bm = {},
		s, g, x, y, st;

//	bm.s2 = undefined
	for (s = p_voice.sym; s; s = s.next) {
		if (s.invis) {
			switch (s.type) {
			case C.KEY:
				p_voice.key = s
			default:
				continue
			case C.NOTE:	// (beams may start on invisible notes)
				break
			}
		}
		x = s.x;
		set_color(s.color)
		switch (s.type) {
		case C.NOTE:
//--fixme: recall set_scale if different staff
			set_scale(s)
			if (s.beam_st && !s.beam_end) {
				if (calculate_beam(bm, s))
					draw_beams(bm)
			}
			if (!s.invis) {
				anno_start(s);
				draw_note(s, !bm.s2);
				anno_stop(s)
			}
			if (s == bm.s2)
				bm.s2 = null
			break
		case C.REST:
			draw_rest(s);
			break
		case C.BAR:
			break			/* drawn in draw_systems */
		case C.CLEF:
			st = s.st
			if (s.time > staff_tb[st].clef.time)
				staff_tb[st].clef = s
			if (s.second)
/*			 || p_voice.st != st)	*/
				break		/* only one clef per staff */
			if (!staff_tb[s.st].topbar)
				break
			set_color(undefined);
			set_sscale(st);
			anno_start(s);
			y = staff_tb[st].y
			if (s.clef_name)
				xygl(x, y + s.y, s.clef_name)
			else if (!s.clef_small)
				xygl(x, y + s.y, s.clef_type + "clef")
			else
				xygl(x, y + s.y, "s" + s.clef_type + "clef")
			if (s.clef_octave) {
/*fixme:break the compatibility and avoid strange numbers*/
				if (s.clef_octave > 0) {
					y += s.ymx - 10
					if (s.clef_small)
						y -= 1
				} else {
					y += s.ymn + 2
					if (s.clef_small)
						y += 1
				}
				xygl(x - 2, y, "oct")
			}
			anno_stop(s)
			break
		case C.METER:
			p_voice.meter = s
			if (s.second
			 || !staff_tb[s.st].topbar)
				break
			if (cfmt.alignbars && s.st != 0)
				break
			set_color(undefined);
			set_sscale(s.st);
			anno_start(s);
			draw_meter(x, s);
			anno_stop(s)
			break
		case C.KEY:
			p_voice.key = s
			if (s.second
			 || !staff_tb[s.st].topbar)
				break
			set_color(undefined);
			set_sscale(s.st);
			anno_start(s);
			draw_keysig(p_voice, x, s);
			anno_stop(s)
			break
		case C.MREST:
			set_scale(s);
			x += 32;
			anno_start(s);
			xygl(x, staff_tb[s.st].y + 12, "mrest");
			out_XYAB('<text style="font-family:serif; font-weight:bold; font-size: 15px"\n\
	x ="X" y="Y" text-anchor="middle">A</text>\n',
				x, staff_tb[s.st].y + 28, s.nmes);
			anno_stop(s)
			break
		case C.GRACE:
			set_scale(s);
			draw_gracenotes(s)
			break
		case C.SPACE:
		case C.STBRK:
			break			/* nothing */
		case C.CUSTOS:
			set_scale(s);
			draw_note(s, 0)
			break
		case C.BLOCK:			// no width
		case C.PART:
		case C.REMARK:
		case C.STAVES:
		case C.TEMPO:
			break
		default:
			error(2, s, "draw_symbols - Cannot draw symbol " + s.type)
			break
		}
	}
	set_scale(p_voice.sym);
	draw_all_ties(p_voice);
// no need to reset the scale as in abcm2ps
	set_color(undefined)
}

/* -- draw all symbols -- */
function draw_all_sym() {
	var	p_voice, v,
		n = voice_tb.length

	for (v = 0; v < n; v++) {
		p_voice = voice_tb[v]
		if (p_voice.sym
		 && p_voice.sym.x != undefined)
			draw_symbols(p_voice)
	}

	draw_all_deco();
	set_sscale(-1)				/* restore the scale */
}

/* -- set the tie directions for one voice -- */
function set_tie_dir(sym) {
	var s, i, ntie, dir, sec, pit, ti

	for (s = sym; s; s = s.next) {
		if (!s.ti1)
			continue

		/* if other voice, set the ties in opposite direction */
		if (s.multi != 0) {
			dir = s.multi > 0 ? C.SL_ABOVE : C.SL_BELOW
			for (i = 0; i <= s.nhd; i++) {
				ti = s.notes[i].ti1;
				if (!((ti & 0x07) == C.SL_AUTO))
					continue
				s.notes[i].ti1 = (ti & C.SL_DOTTED) | dir
			}
			continue
		}

		/* if one note, set the direction according to the stem */
		sec = ntie = 0;
		pit = 128
		for (i = 0; i <= s.nhd; i++) {
			if (s.notes[i].ti1) {
				ntie++
				if (pit < 128
				 && s.notes[i].pit <= pit + 1)
					sec++;
				pit = s.notes[i].pit
			}
		}
		if (ntie <= 1) {
			dir = s.stem < 0 ? C.SL_ABOVE : C.SL_BELOW
			for (i = 0; i <= s.nhd; i++) {
				ti = s.notes[i].ti1
				if (ti) {
					if ((ti & 0x07) == C.SL_AUTO)
						s.notes[i].ti1 =
							(ti & C.SL_DOTTED) | dir
					break
				}
			}
			continue
		}
		if (sec == 0) {
			if (ntie & 1) {
/* in chords with an odd number of notes, the outer noteheads are paired off
 * center notes are tied according to their position in relation to the
 * center line */
				ntie = (ntie - 1) / 2;
				dir = C.SL_BELOW
				for (i = 0; i <= s.nhd; i++) {
					ti = s.notes[i].ti1
					if (ti == 0)
						continue
					if (ntie == 0) {	/* central tie */
						if (s.notes[i].pit >= 22)
							dir = C.SL_ABOVE
					}
					if ((ti & 0x07) == C.SL_AUTO)
						s.notes[i].ti1 =
							(ti & C.SL_DOTTED) | dir
					if (ntie-- == 0)
						dir = C.SL_ABOVE
				}
				continue
			}
/* even number of notes, ties divided in opposite directions */
			ntie /= 2;
			dir = C.SL_BELOW
			for (i = 0; i <= s.nhd; i++) {
				ti = s.notes[i].ti1
				if (ti == 0)
					continue
				if ((ti & 0x07) == C.SL_AUTO)
					s.notes[i].ti1 =
						(ti & C.SL_DOTTED) | dir
				if (--ntie == 0)
					dir = C.SL_ABOVE
			}
			continue
		}
/*fixme: treat more than one second */
/*		if (nsec == 1) {	*/
/* When a chord contains the interval of a second, tie those two notes in
 * opposition; then fill in the remaining notes of the chord accordingly */
			pit = 128
			for (i = 0; i <= s.nhd; i++) {
				if (s.notes[i].ti1) {
					if (pit < 128
					 && s.notes[i].pit <= pit + 1) {
						ntie = i
						break
					}
					pit = s.notes[i].pit
				}
			}
			dir = C.SL_BELOW
			for (i = 0; i <= s.nhd; i++) {
				ti = s.notes[i].ti1
				if (ti == 0)
					continue
				if (ntie == i)
					dir = C.SL_ABOVE
				if ((ti & 0x07) == C.SL_AUTO)
					s.notes[i].ti1 = (ti & C.SL_DOTTED) | dir
			}
/*fixme..
			continue
		}
..*/
/* if a chord contains more than one pair of seconds, the pair farthest
 * from the center line receives the ties drawn in opposition */
	}
}

/* -- have room for the ties out of the staves -- */
function set_tie_room() {
	var p_voice, s, s2, v, dx, y, dy

	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v];
		s = p_voice.sym
		if (!s)
			continue
		s = s.next
		if (!s)
			continue
		set_tie_dir(s)
		for ( ; s; s = s.next) {
			if (!s.ti1)
				continue
			if (s.notes[0].pit < 20
			 && (s.notes[0].ti1 & 0x07) == C.SL_BELOW)
				;
			else if (s.notes[s.nhd].pit > 24
			      && (s.notes[s.nhd].ti1 & 0x07) == C.SL_ABOVE)
				;
			else
				continue
			s2 = s.next
			while (s2 && s2.type != C.NOTE)
				s2 = s2.next
			if (s2) {
				if (s2.st != s.st)
					continue
				dx = s2.x - s.x - 10
			} else {
				dx = realwidth - s.x - 10
			}
			if (dx < 100)
				dy = 9
			else if (dx < 300)
				dy = 12
			else
				dy = 16
			if (s.notes[s.nhd].pit > 24) {
				y = 3 * (s.notes[s.nhd].pit - 18) + dy
				if (s.ymx < y)
					s.ymx = y
				if (s2 && s2.ymx < y)
					s2.ymx = y;
				y_set(s.st, true, s.x + 5, dx, y)
			}
			if (s.notes[0].pit < 20) {
				y = 3 * (s.notes[0].pit - 18) - dy
				if (s.ymn > y)
					s.ymn = y
				if (s2 && s2.ymn > y)
					s2.ymn = y;
				y_set(s.st, false, s.x + 5, dx, y)
			}
		}
	}
}
// abc2svg music font
var musicfont = 'url("data:application/font-ttf;base64,\
AAEAAAANAIAAAwBQRkZUTX30pOoAACfYAAAAHE9TLzJYnlnxAAABWAAAAFZjbWFwN+qJgQAAAsAA\
AAIqY3Z0IAAiAogAAATsAAAABGdhc3D//wADAAAn0AAAAAhnbHlmirg/swAABXwAAB4caGVhZAsO\
geEAAADcAAAANmhoZWEIoQEcAAABFAAAACRobXR4cVoAlAAAAbAAAAEObG9jYQpbAnAAAATwAAAA\
im1heHAAiwDcAAABOAAAACBuYW1lNpjajAAAI5gAAAGDcG9zdA9CdgsAACUcAAACsQABAAAAAQAA\
tjNVVF8PPPUACwQAAAAAANGXIhcAAAAA1qodLf+6/QwD9ASUAAAACAACAAAAAAAAAAEAAASU/QwA\
XAQN/7r/vwP0AAEAAAAAAAAAAAAAAAAAAABDAAEAAABEAKsABQAAAAAAAgAAAAEAAQAAAEAALgAA\
AAAAAQG7AZAABQAIApkCzAAAAI8CmQLMAAAB6wAzAQkAAAIABQMAAAAAAAAAAAAAEAAAAAAAAAAA\
AAAAUGZFZABAAADpXAMz/zMAXASUAvQAAAABAAAAAAAAAXYAIgAAAAABVQAAAZAAAABXAAAB4P/c\
A14AegMLAAAC0gAAAr//ugHWAAADCwAAAw4AAAMn/8gBrgAAASIAAAGQAAABfAAAAZAAAAGQAAAB\
gQAAAZAAAAGQAAABgQAAAZkACQGYAAkB9AAAAQQAFAEEAAoCEQAAAhwAAAHAAAABSQAAAUoAAAFK\
//4BLAAAAjAAAAHgAAABDQAyAMgAAAENAAABCwAUAW4AAAENADIBQP/9ARgAAAJYAAAAtgAAAIIA\
AACCAAABLAAAASwAAADuAAAA/wAAAUkAAAGPAAAB2AAAAdgAAANTAAACM//wAyD/4QG1AAABtQAA\
AkQADQJEAA0EDQAAAhwADAAAAAAAAAADAAAAAwAAABwAAQAAAAABJAADAAEAAAAcAAQBCAAAAD4A\
IAAEAB4AAOAA4EjgUOBc4GLgaeB84IzgleCk4Kngs+EB4efiZOKA5KDkrOTA5M7k6uTu5QHlZ+Vp\
5W3mUOZV6Vz//wAAAADgAOBH4FDgXOBi4GngeuCA4JTgoOCp4LPhAeHn4mDigOSg5KzkwOTO5OHk\
7uUA5WflaeVs5lDmVelc//8AAyAEH74ftx+sH6cfoR+RH44fhx99H3kfcB8jHj4dxh2rG4wbgRtu\
G2EbTxtMGzsa1hrVGtMZ8RntFucAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBgAAAwAAAAAAAAABAgAAAAIAAAAAAAAAAAAA\
AAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
AAAAAAAAACICiAAAACoAKgAqADYAZgDOARABpgI4ApICpgNCA9QELAROBGIEtAUEBSQFagWqBeQG\
MAZwBrYHEAckB0oHcAesB8gH9ggiCDwIVgiMCJoIrAjSCOwJHAlGCaIJyAnwCgAKKApOCloKZgpy\
Cn4KoArGCvwLSguqDB4MNAxaDIgMzA0WDTANVA40DvAPDgAAAAIAIgAAATICqgADAAcALrEBAC88\
sgcEAO0ysQYF3DyyAwIA7TIAsQMALzyyBQQA7TKyBwYB/DyyAQIA7TIzESERJzMRIyIBEO7MzAKq\
/VYiAmYAAAEAAAAAAZEBkAADAAAxESERAZEBkP5wAAEAAAAAAFcEAwAgAAARNTY1NCcmNTQ3BhUU\
FxYVFAcWFRQHBhUUFyY1NDc2NTQ1IxJXPxUlTU0lFT9XEiMCAwIYQzZgOTRmOjJLIjlhTWEYGGZM\
YDklSjI6ZjQ5YDZIAAP/3AACAd4CswAHAA8ARwAAACImNDYyFhQEIiY0NjIWFBc0NjMyFhUUBxYz\
MjY1NCcmJwMnEyY1NDc2MhYVFAYjIiY1NDcmIyIGFRQXFhcTFwMWFRQHBiImAZ4gGBggGP5+IBgY\
IBhbGxQTHiwYKCdBMDxBzyvTmDgoYDgbFBMeLBgoJ0EwQTvUK9eYOChgOAFSGCAYGCBUGCAYGCDY\
EhwaER0OGC8lKDAtOP7eIAEmj2A1LxQzIRIcGhEdDhgvJSgwMTQBJh/+1pBgNS8UMwAFAHr/NANe\
AlQAFwAbAB8AIwAnAAABMxUeARczFSMOAQcVIzUuAScjNTM+ATcRIxYXNxU2NyczJicHNQYHAdgo\
VXgHiooHeFUoVXgHiooHeFVwBWsoawVwcAVrKGsFAlSJCItgKGCLCImJCItgKGKJCP7lug7IyA66\
KLoOyMkOuwAAAAAEAAD9gQKnBJQAPwBGAFoAZwAAATYzMhYXFhUUBwYHFxYVFAYjIiY1NDYzMhYV\
FAYHFjMyNTQvAQYjIiY1NDc+ATc+AjcuAjU0NjceARUUBgcbATY1NCYjCwEOARUUFy4BNTQ2NycO\
AQcSITIDBhUUFz4BNTQmJw4BAY8SCzVnID98QisQAkVPUWBAMi5CPjAbKmUBEQscr8E5El4mBi0w\
FwMKBW9ROx5beR8fq25OFSA3Ry8yM2BJEY9sAQUBLwQpBAdJcBgaO0UBCgIqJkR7lDwiBLsgDlBN\
WEEsQEQtKzIBD4ASCr4Bt6yEZiNkHgUoKBEhdUgdip4YQHlyiahf/rX+nieRQGr+ngFeCkAwLToM\
WjpGYhS9cpdn/tYEDiEuUiMxj0gpTw8HdwACAAD9/ALSAgAAZABoAAABMjY1NCcmIyIHDgIHJicm\
JxEjETMRNjc2Nx4DFxYzMjY1NCcmIyIHFhcUFhUUBisBJjU0NzY3NjMyFxYXFRQGBwYjIicHFzYz\
MhYXFh0BBgcGIyImNTQ3MzIWFRQGFQYHFgEzESMB3j5KDRpJRjwCBgoEIhoeLhwcLh4aIgYUDBkP\
JyUxPRIkUi8xMg0CMyEFRAUaVScjXlU3CFpIHy00PyIiPzRCZh4oCDdWXUxyRAUhMwIPMDX+TXt7\
/iB4Si0tbEkFDhsKYicrH/4EBAD+ER8rJ2ILKhcdCRt7QjE2YhoQKAMNBB4rGTIUC0QZDU80UxJO\
bxwNF0tKFz4sOUMSUzRQTjwyGSseBA4EJhAcA978AAAAA/+6/aUCwwD/ACYAMQA9AAA3NDYzMhcW\
FRQHDgEHNjc2NzY1NCcuASMiBgc+ATMyFhUUBwYjIiYFIiY1NDYyFhUUBiciJjU0NjMyFhUUBhOM\
ZqNLLJdU9oTwdVskCzgeOSg8Zg0XGxwuRychLThGAoIWHRkqHhoaFxsaFxQcGylgdm1Bb/aISm4H\
QH1erj0xfkEhGFJEHRBLLzIgHmeSHBcWHB0VFh3yHhkWGRsUGR4AAAAAAgAA/wYBcgD6AAMABwAA\
NzMTIwMzEyPclAKW3JQClvr+DAH0/gwAAAQAAP4KAh8DqgAJACAAYgBtAAAlFhc+ATU0JiMiAwIn\
DgEVFBcuATU0NjcmJw4BBx4BMzIXHgEfAR0BFCMiJjU0NjMyFhUUBgcWMzI2NTQvAQYjIiY1NDc+\
ATc+AjcmNTQ2Nx4BFRQGBx4BFzYzMhcWFRQHBgMGFRQXPgE1NCcGAUkTBk1HVkIODRgBLDkfICpM\
OwUJcVUBBW2CAyIDBgICejZTMyglNTEnFSIjLAENCRWNmS4OTB4FIycSDllALxlJYQIIBBIIXDky\
YzZkAwY3XilfdcRbEk8zNlb+4AELEAk0JykmEkEpOE4QPlpaeVNxfhogQBcXGwd/SDEkMzckIigB\
DDM1DwmNAZKKalEcUBgEICENwgdufxMzYltth0wRbiQCQzZidzAbA1YeIjkkJXszRiYmAAIAAP5j\
AkIBmgBjAGcAAAEyNjU0JyYjIgcOAQcmJyYnESMRMxE2NzY3HgMXFjMyNjU0JyYjIgcWFxQWFRQG\
KwEmNTQ3Njc2MzIXFhcVFAYHBiMiJwcXNjMyFhcWHQEGBwYjIiY1NDczMhYVFAYVBgcWATMRIwF+\
MjsKFTo4MAIMBB0TGCUWFiUYEx0EEQoTDCAdJzEOHEMlJygKAioaBDYEFUQjGElGLQZIOhglKzEb\
GzQoNVIYIAYtRkk9WzYEGioCDCYr/qNiYv6AYDskJFc7BR0LUhwiGf5qAzP+dBkiHFIIIhIXCBZi\
NSsoThUNIAILAxgiFCgQCTUVC0ArQQ4+WhYKEjw7EzIjLjUPQStAPzAoFCMYAwsDHw0WAxj8zQAA\
AAAD/8j+HgI2AMwAJgAvADsAADc0NjMyFxYVFAcOAQc2NzY3NjU0Jy4BIyIGBz4BMzIWFRQHBiMi\
JgUiJjQ2MhYUBiciJjU0NjMyFhUUBg9wUoI8I3hDxmnAXkceCS0YLSAwUgoSFhYlOSAZJSw5AgIS\
FxQiGBUVEhYVEhEWFSFNXlczWsZsO1cGM2RKjC8pZjMaFEI2Fw08JigaGFN1FyQWFyIYwhgUERQV\
EBMZAAAAAAIAAP8GAa4A+gALABQAADMUFjMyNjU0JiMiBgc0NjIWFAYiJooqIyIrJyYlKIp9tH19\
tH1ieHlhZXV2YWeQkdKRkgAAAQAA/wYBIgD6AAkAADE3MxEXFSM1NxFkfUHwQfr+Ph4UFB4BLAAA\
AAEAAP8GAY8A+gA8AAA3MhUUBw4DBzYzMhYzMjc+AjMOAgcGBwYjIiYjIgYjIjU0Jz4FNTQnIgcy\
FhUUBiMiNTQ+AcfIBQ02QG82EyAbZBwYHgUQDAEBBQUBBxAaKRp0FR9WAgcBAiw+RzwoU04aHCk3\
Hkw8WPp+Gg4hLh1ELQwjDgMNCwUWFgMpDhgnJhABAiFFODwyOBhiATUlHh8pZyg5GQAAAQAA/wYB\
dQD6ADkAADcyFhUUBiMiJjU0NzYzMhcWFRQGBx4BFRQHBiMiJicmNDYzMhYVFAYjFjMyNjU0Jicm\
NDc+ATQmIyJmGyInIRsyHzNZRiZERj0+UUskTSdXGCMyICIqJRsMPyQrSC4WFi9LKSQ8qhwXGyMr\
Iy8aKhMiSC5ECwtFLUMnExYUHUwuIRsZHikxJyY6CAQiBAk3UDAAAAEAAP8GAZAA+gARAAAFFyM3\
NSM1NjUzATM/AREzFSMBRTLIMuGTo/77sAFjS0vRKSkxKPKA/o6Wkf7ZKAAAAAABAAD/BwF+APoA\
LwAAFzYzMhYVFAYjFjMyNz4BNTQnJiMiBxMhDgErAQc2MzIXHgEVFAcOAiMiJy4BNTQSHCEbKiAc\
GiQxHBMJHhwoTkgKAWILNSXVBjlCUzEhK0MWQCslPCsQHl8gIBccICEeFB8gORwaNQEiJDp5Hh8V\
QSVPLxAQAhQJMhIjAAAAAAIAAP8GAYEA+gAJACwAABcyNjU0JiMiBxYTFhUUBiMiJjU0NjMmIyIG\
FT4CMzIWFRQGIyImJz4BMzIWyCktKigsMAfdGyMYHiIbEBY3NS8VGC0eTE9xSGFmAQFsWzA/0kUs\
IjAlngGfGiYZKB4bDB4jeF8LCglANkRZgnhpkRIAAQAA/wYBkAD7ACgAADciDgMHNz4IMzIWMzI2\
Nw4EFSM2NzY3NjcGIyImYRQaFAkRBQoBDAILBQsJDRAJL3UjGjsRG0UaHgiCAQgRaB4tER4lYKEF\
DgkbBnQBCwIJAQYBAwEmFw5Dp0FcQitFGzaHJzkKKAADAAD/BgGEAPoADgAcADQAABcOARUUFjMy\
NjU0LgM3PgE1NCYiBhUUHgMHLgE1NDY3MhYVFAYHHgEVFAYjIiY1NDaaNixYLCo/DyAdMT4zI0RS\
MwocEjFwMSlmSktlKjA6MnVNTHY5KhkkGx0wKR8OFxINE1oaIhwdMCggDxcTChU/GDw1M00BRjIn\
NBcaOjU3SkgwJDUAAAIAAP8GAYEA+gAJACwAADciBhUUFjMyNyYDJjU0NjMyFhUUBiMWMzI2NQ4C\
IyImNTQ2MzIWFw4BIyImuSktKigsMAfdGyMYHiIbEBY3NS8VGC0eTE9xSGFmAQFsWzA/0kUsIjAl\
nv5hGiYZKB4bDB4jeF8LCglANkRZgnhpkRIAAQAJ/woBmQD5ADAAACUwFzY1NCYjDgEVFBcWMzI3\
NjcUHgEVDgEHIicmJzQmNTQ3MhYXFhUUBiMiJjU+ATMBLxIEPB8yQSchMCsoHCoJCBtVVk87OwQB\
2yRAESIkHCApAiAapAMFCBQiAmVrjjMqIhhYAQQDAVVQATk5ZgIrAuYCHhQnJCU5LhwWJgACAAn+\
ogGZAV4AOAA/AAAlMBc2NTQmIyIHERYzMjc2NxQeARUOAQcjFSM1JicmJzQmNTQ3NTMVMjYzMhYX\
FhUUBiMiJjU+ATMDEQYVFBcWAS8SBDwfAxAMDCsoHCoJCBtRVQEjPS47BAGrIwMHAyRAESIkHCAp\
AiAaej0nCqQDBQgUIgT+SwQiGFgBBAMBVFEBaGsJLTlmAisCyxlpZgEeFCckJTkuHBYm/pcBli6R\
jjMNAAABAAD/BgH0APoACwAANTM1MxUzFSMVIzUj10bX10bXI9fXRtfXAAAAAQAU/gYA4wIAABMA\
ABMWBwYnJgI1NBI3NhcWBwYCFRQS3AcNCQVJa2tJCQsGBjxGR/4WCAUDBlcBIH18ASJWCwcGCEn+\
54iG/uUAAAEACv4CANwB/QATAAATNhI1NAInJjc2FxYSFRQCBwYnJhQ7R0Y8CQwKB0lra0kICwb+\
FkkBG4aIARlJCwQECVb+3nx9/uBXCQkEAAAEAAD/TAIRAKoAAwAHABsAJQAAJTMRIwEzESM3BhUU\
Fx4BFzMyNzY0Jy4BJzAjIgQUBiMiJjU0NjIB6Sgo/hcnJ5cFAwpVLg0zEwUDCVYuDTYBQXlnZnp5\
zqr+ogFe/qLzDA4LCyJHBCMJHAsiRwQmeEVEOD9HAAACAAD/JAIcANwAAwAPAAA3FSE1JTMVITUz\
ESM1IRUjGQHq/f0ZAeoZGf4WGUaMjJYyMv5IMjIAAAIAAP9/AcAAgQATAB0AADcGFRQXHgEXMzI3\
NjQnLgEnMCMiBBQGIyImNTQ2Mm8FAwpVLg0zEwUDCVYuDTYBQXlnZnp5zj8MDgsLIkcEIwkcCyJH\
BCZ4RUQ4P0cAAgAA/2wBSACUAA0AGwAAJSYjIgYVFBcWMzI2NTQ3FhUUBiMiJyY1NDYzMgEkDSU8\
lwYLJjyXEA9+SE8kD35IT0QXYSsKCRdhKwkXHh1DZ0MeHUNnAAAAAAEAAP90AUoAiwAOAAAVNDY3\
NjMyFhUUBwYjIiZdSB4RM0OlGBsxQSE+VBMHODJ1MAg5AAAB//7/bwFMAJEACwAAJzcXNxcHFwcn\
Byc3AhuMjBuGhhyLixyGcSB2dSBwcCF1dSFwAAAABQAA/2oBLACWAAUACwARABcAHwAAFwcWMzI3\
LwEGFRQXPwEmIyIHHwE2NTQnBjQ2MhYUBiKWRx0qKR9dRx0dXEgfKSodXEcdHfJYfFhYfBJIHR1a\
SR8pKh1YSB0dWkgfKSodhXxYWHxYAAAAAQAA/wYCMAD6AAMAABUBMwEBuHj+R/oB9P4MAAEAAP/O\
AGQAMgAHAAAWIiY0NjIWFEcqHR0qHTIdKh0dKgAAAAIAMv9kAQ0BsAAKABYAADciBh0BNjc2NTQm\
NzIWFRQHBiMRMxE2lBUqHCwuIAciOU9SOiMjeh4SywNCPzYbJiYyI0VQUgJM/rw0AAACAAD+hgDF\
AXoAAwAMAAAXNzUHERU3ESM1BxE3HJCQqRmsAWUtli0BSeg0/cDiMwJDAQAAAgAA/o8BDAF1AAMA\
HwAANxU3NQMjNQc1NzUHNTc1MxU3NTMVNxUHFTcVBxUjNQdSZmYZOTk5ORlmGDw8PDwYZk20HLX+\
Ja8RVQ63EFcOsqoat68PUxK0D1MPsaodAAAAAQAU/4QBCwB6AB4AABc1JicHMBUjNTM3JzAjNTMV\
Fhc3MDUzFSMGBxcwMxXDKAwzSDkzMzlIIRI0SDkhEzQ5fDsmDTM7SjIySDkiETM5RyIRNEgABAAA\
/2oBbAGwABAAHgAtADwAADcOAR0BMjc2NzY3NjU0JyYjNzIWFRQHBgcGIxEzETYXDgEdATI3Njc2\
NTQnJiM3MhYVFAcGBw4BIxEzETZOER4LGwQCHwwEChARGR0rCRgrNS8fGdERHQ0hHQsGCxAPFh8q\
CxkoFjcWHht9AR4QyyYFAys0DRkeFBUmOSESIDk0QAJG/sEyJgEdEcsuLzATExwWFSY2JBYcPi8b\
JQJG/sEyAAAAAAIAMv9kAQ0BsAAKABYAADciBhUUFxYXNTQmJzIXETMRIicmNTQ2qxcgLi4aKjM6\
IyM6Uk85eiYbMEVCA8sSHiY0AUT9tFJQRSMyAAAB//0AAAE/APQAGAAANwYjIiY1ND8BNi8BJjU0\
NjMyMRcFFhUUBxICAwcJBs8ODs0ICwcBAgEfDg4BARAICgNJBwZPAwsKEgFrBg4NBQAAAAEAAAAA\
ARgBNQAFAAAxGwEjJweMjEFYWgE1/svGxgAAAgAAAAACWAFKAA4AGQAAMTQ2MzIeAhUjLgEiBgch\
IiY0NjMyFhUUBrN5OWtVMwoLpuKmCwEhFyUlFxkjI5iyLFGATW6Ghm4kMCQkGBkjAAABAAAAAAC2\
AS0AFwAAEzIWFxYVFAcOASMnJjU0NjU0Iy4BNTQ2VhsbEBoyGUQQBgFHFBsoLQEtDBEdMD08HS0D\
AQIIaxMPASYcHjEAAQAA/wYAggD6AAMAADUzEyOAAoL6/gwAAQAAAAAAggD6AAMAADUzFSOCgvr6\
AAAAAQAA/4MBLAAAAAMAADEhFSEBLP7UfQAAAQAAAAABLAB9AAMAADUhFSEBLP7UfX0AAQAA/n4A\
6wGHABMAABMXBxcmIyIGFRQXJjU0NjMyFyc3Kb1nbDI0HyY4eDQlIiKHZAGH5dnPLiQdNTRLTSMt\
Fby0AAABAAD/DQEAAMAAFgAANw4CIyImNTQ2MhYVFAcyNjc2MhcDJ6sDGRoTKzcmOCkXIjMhAhUD\
ljA8AQcEKSgfIB4ZHRshLAIC/m8QAAAAAQAA/gwBSADAACQAABcGIyImNTQ2MzIWFRQHMj8BBiMi\
JjU0NjMyFhUUBzI3NjIXAyerKCErNycbHCkXQQs8NhgrNycbHCkXSC4CFQPFLcQMKCggIB8ZHRsi\
ygwpKB8gHhkdG00CAv1uDAAAAQAA/gwBjwHAADYAADcGIyImNTQ2MzIWFRQHMj8BIg4BIyImNTQ2\
MzIWFRQHMjc2MhcBJxMGIyImNTQ2MzIWFRQHMjf2KB8rNycbHCkXPws6ASAcEys3JxscKRdILgEW\
A/70LVUoISs3JxscKRdBCzwMKCggIB8ZHRsiywkEKSgfIB4ZHRtNAgL8bgwBJAwoKCAgHxkdGyIA\
AAAAAQAA/QwB2gHAAEUAABMGIyImNTQ2MzIWFRQHMj8BBiMiJjU0NjMyFhUUBzI/AQYjIiY1NDYz\
MhYVFAcyPwEiDgEjIiY1NDYyFhUUBzI3NjIXASerKCErNycbHCkXQQs6KCErNycbHCkXQQs6KB8r\
NycbHCkXPws6ASAcEys3JjgpF0guAhUD/qkt/jwMKCggIB8ZHRsiygwoKCAgHxkdGyLKDCgoICAf\
GR0bIssJBCkoHyAeGR0bTQIC+24MAAAAAQAA/QwCGQKuAFYAACUGIyImNTQ2MzIWFRQHMj8BBiMi\
JjU0NjMyFhUUBzI/ASIOASMiJjU0NjMyFhUUBzI3NjIXAScTBiMiJjU0NjMyFhUUBzI/AQYjIiY1\
NDYzMhYVFAcyNwE/KCErNycbHCkXQQs2KB8rNycbHCkXPws0ASAcEys3JxscKRdILgEWA/5qLVUo\
ISs3JxscKRdBCzooISs3JxscKRdBCzQMKCggIB8ZHRsixAwoKCAgHxkdGyLHCQQpKB8gHhkdG00C\
AvqADAEkDCgoICAfGR0bIsgMKCggIB8ZHRsiAAEAAP8aA1IA5gALAAA1MxUhNTMRIzUhFSMZAyAZ\
GfzgGeZ9ff40fX0AAAAAA//w/wYCJgD6AAcADwATAAA2IiY0NjIWFAAiJjQ2MhYUBQEzAVAyIyMy\
IwGIMiMjMiP90gG4fv5HSyMyIyMy/s8jMiMjMloB9P4MAAT/4f8GAwcA+gAHAA8AEwAXAAA2IiY0\
NjIWFAAiJjQ2MhYUBQEzATMBMwFBMiMjMiMCdzIjIzIj/OMBuHv+R3kBuHv+R0sjMiMjMv7PIzIj\
IzJaAfT+DAH0/gwAAQAA//0BtQDUAC8AACUyNjU0JwYjIjU+ATMyFhUUBwYjIi8BJiMiBhUUFzYz\
MhUUByInJjU0NzYzFh8BFgF2FRwWFBIcAQ8JIC0pFxwkHqggDxYcFRQTHBkZGBwoFiAoF6giJSkc\
JxAMGw8VQiYzJBUVghYoHicPDB0gAxoiLTMkEwIQghcAAAEAAP/NAbUBAwA2AAAXIiY1NDc2MxYf\
ATUzFRcWMzI2NTQnBiMiNT4BMzIWFRQHBiMiLwEVIzUnJiMiBhUUFzYzMhUUTSAtKBYgKBcuHlwi\
DxUcFhQSHAEPCSAtKRccJB4uHlwgDxYcFRQTHANDJjMkEwIQJGmARxcpHCcQDBsPFUImMyQVFSRs\
g0cWKB4nDwwdIAABAA0AAAJFAOAACwAANyc3FzcXNxcHJwcnIhWOZXhqTRaSaXRpLhmZfHx8VBeh\
fHx8AAAAAQAN/8sCRQERABMAACUHJwcnNxc3NTMXNxc3FwcnBxUjARZAaUsVjmUWGwFGak8UkmkZ\
G0ZGfE4ZmXwXlntKfFUYoXwblgAABAAA//wD9AJ/AAkAlACgAKoAAAUiJjQ2MzIWFAYlJjU0NzYz\
MhYVFAcOBwcWMzI2NTQ2Ny4CPQEeARUUBiMiJwYjIiYnDgEiJicmIyIGBwYjIjU0Njc+CTc2NTQm\
NTQ/AQ4BFDMyNxcOASMiJjU0PgIzMhYVFAYjIiYnNxYzMjY1NCYnBwYVFBYVFA8BHgEzMj4GNz4B\
NTQnJiMiBhUUBTY1NCYnDgEVFAPWCxMTCwwSEf3pIxwgThsjCgQMCxAKEgcSASosFTJDXSCBXrq0\
UUJBIyQ8IkETMCYgGxwaEg0tA1csCjohDhsPEQYKAwcDCQMCQgI0WnIgNRwQKTYwFBcfPXFIfntC\
JR05EQ0aNCEsXF8mAkYBJhE7DwQHBwkHDAgSLDUiBAQWHC8BPFoXEj8zAhIYEhIYEl84JTUlKykf\
IRMJEQ4QCg8GDgEzMBpSXxksWTQGATyxa0ZfOTooGCkbFiAtIwE6BwszFAgRBgwCEAMZDCkOCAIW\
QR4HDNcHWFAwCEUsIRofSEcvXDwlPispDC0dGyNJBaAIBhlEGggEowxYAgIHBAsHDyAwLyAHDhI5\
KyJwBYEiSRUdWUM+AAIADAAKAdMBzwAKAI8AACU0JiMiBhQWMzI2Jw4BIyImNDYzMhYXNjU0JyYj\
IiY0NjMyFx4BFxYzMjU0Jy4BNTQ2MzIWFRQGBxQzMjc+ATc2MzIWFRQGIyIGBwYVFDMyNjMyFhQG\
IyImIyIGFRQXHgEXFhUUBiMiJy4BJyYjIhUUFhUUBiMiJjQ2NTQjIgcOAQcGIyImNTQ3NjMyNzY1\
NAEWGA8QFRYPEBeJGSYOGRsaGQ0qGCUMFBgdHBkXEhALAxQLEhQBAiceFBIbIwEWEA0RAQ0MGhMe\
GxIbFQ0QIRsrDhwbHRkPJxQXEgsUOA0OGRcTFAwBExEKEiogExIdJhcNDhIDERIMFBoNDBYjEg3u\
EBQTIhYVCgElGSobJQIDFg4KExwoHQwLPhYNGA0IFycPFxobFhEjGSoQEzgPDhsUESMGCw4PFicd\
KBomCAoWChIDCw0ZExsOCzkVDx8eMBMUGBokMRckDhI9DAcWFBgODRINDBoAAAACAAD95AIdANwA\
AwAPAAA3FSE1JTMVITUzEyMDIRUjGQHq/f0ZAeoZARkB/hYZRoyMljIy/QgBcjIAAAAAAAwAlgAB\
AAAAAAABAAcAEAABAAAAAAACAAcAKAABAAAAAAADACIAdgABAAAAAAAEAAcAqQABAAAAAAAFAAsA\
yQABAAAAAAAGAAcA5QADAAEECQABAA4AAAADAAEECQACAA4AGAADAAEECQADAEQAMAADAAEECQAE\
AA4AmQADAAEECQAFABYAsQADAAEECQAGAA4A1QBhAGIAYwAyAHMAdgBnAABhYmMyc3ZnAABSAGUA\
ZwB1AGwAYQByAABSZWd1bGFyAABGAG8AbgB0AEYAbwByAGcAZQAgADIALgAwACAAOgAgAGEAYgBj\
ADIAcwB2AGcAIAA6ACAAOQAtADMALQAyADAAMQA4AABGb250Rm9yZ2UgMi4wIDogYWJjMnN2ZyA6\
IDktMy0yMDE4AABhAGIAYwAyAHMAdgBnAABhYmMyc3ZnAABWAGUAcgBzAGkAbwBuACAAMQAuADAA\
AFZlcnNpb24gMS4wAABhAGIAYwAyAHMAdgBnAABhYmMyc3ZnAAAAAgAAAAAAAAAAAAAAAAAAAAAA\
AAAAAAAAAAAAAAAAAABEAAAAAQACAQIBAwEEAQUBBgEHAQgBCQEKAQsBDAENAQ4BDwEQAREBEgET\
ARQBFQEWARcBGAEZARoBGwEcAR0BHgEfASABIQEiASMBJAElASYBJwEoASkBKgErASwBLQEuAS8B\
MAExATIBMwE0ATUBNgE3ATgBOQE6ATsBPAE9AT4BPwFAAUEBQgYubm9kZWYHdW5pRTAwMAd1bmlF\
MDQ3B3VuaUUwNDgHdW5pRTA1MAd1bmlFMDVDB3VuaUUwNjIHdW5pRTA2OQd1bmlFMDdBB3VuaUUw\
N0IHdW5pRTA3Qwd1bmlFMDgwB3VuaUUwODEHdW5pRTA4Mgd1bmlFMDgzB3VuaUUwODQHdW5pRTA4\
NQd1bmlFMDg2B3VuaUUwODcHdW5pRTA4OAd1bmlFMDg5B3VuaUUwOEEHdW5pRTA4Qgd1bmlFMDhD\
B3VuaUUwOTQHdW5pRTA5NQd1bmlFMEEwB3VuaUUwQTEHdW5pRTBBMgd1bmlFMEEzB3VuaUUwQTQH\
dW5pRTBBOQd1bmlFMEIzB3VuaUUxMDEHdW5pRTFFNwd1bmlFMjYwB3VuaUUyNjEHdW5pRTI2Mgd1\
bmlFMjYzB3VuaUUyNjQHdW5pRTI4MAd1bmlFNEEwB3VuaUU0QUMHdW5pRTRDMAd1bmlFNENFB3Vu\
aUU0RTEHdW5pRTRFMgd1bmlFNEUzB3VuaUU0RTQHdW5pRTRFNQd1bmlFNEU2B3VuaUU0RTcHdW5p\
RTRFOAd1bmlFNEU5B3VuaUU0RUEHdW5pRTRFRQd1bmlFNTAwB3VuaUU1MDEHdW5pRTU2Nwd1bmlF\
NTY5B3VuaUU1NkMHdW5pRTU2RAd1bmlFNjUwB3VuaUU2NTUHdW5pRTk1QwAAAAAAAAH//wACAAAA\
AQAAAADVs2WlAAAAANGXIhcAAAAA1qodLQ==\
")'
// abc2svg - format.js - formatting functions
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

var	defined_font = {},
	font_tb = {},
	fid = 1,
	font_scale_tb = {
		serif: 1.05,
		serifBold: 1.05,
		'sans-serif': 1.1,
		'sans-serifBold': 1.1,
		Palatino: 1.1,
		Mono: 1.35
	},
	fmt_lock = {}

var cfmt = {
	aligncomposer: 1,
//	botmargin: .7 * IN,		// != 1.8 * CM,
	breaklimit: .7,
	breakoneoln: true,
	cancelkey: true,
	composerspace: 6,
//	contbarnb: false,
	dblrepbar: ':][:',
	decoerr: true,
	dynalign: true,
	fullsvg: '',
	gracespace: new Float32Array([4, 8, 11]), // left, inside, right
	graceslurs: true,
	hyphencont: true,
	indent: 0,
	infoname: 'R "Rhythm: "\n\
B "Book: "\n\
S "Source: "\n\
D "Discography: "\n\
N "Notes: "\n\
Z "Transcription: "\n\
H "History: "',
	infospace: 0,
	keywarn: true,
	leftmargin: 1.4 * CM,
	lineskipfac: 1.1,
	linewarn: true,
	maxshrink: .65,
	maxstaffsep: 2000,
	maxsysstaffsep: 2000,
	measurefirst: 1,
	measurenb: -1,
	musicspace: 6,
//	notespacingfactor: 1.414,
	parskipfac: .4,
	partsspace: 8,
//	pageheight: 29.7 * CM,
	pagewidth: 21 * CM,
//	pos: {
//		dyn: 0,
//		gch: 0,
//		gst: 0,
//		orn: 0,
//		stm: 0,
//		voc: 0,
//		vol: 0
//	},
	printmargin: 0,
	rightmargin: 1.4 * CM,
	rbdbstop: true,
	rbmax: 4,
	rbmin: 2,
	scale: 1,
	slurheight: 1.0,
	staffsep: 46,
	stemheight: 21,			// one octave
	stretchlast: .25,
	stretchstaff: true,
	subtitlespace: 3,
	sysstaffsep: 34,
//	textoption: undefined,
	textspace: 14,
//	titleleft: false,
	titlespace: 6,
	titletrim: true,
//	transp: 0,			// global transpose
//	topmargin: .7 * IN,
	topspace: 22,
	tuplets: [0, 0, 0, 0],
	vocalspace: 10,
//	voicescale: 1,
	writefields: "CMOPQsTWw",
	wordsspace: 5
}

function get_bool(param) {
	return !param || !/^(0|n|f)/i.test(param) // accept void as true !
}

// %%font <font> [<encoding>] [<scale>]
function get_font_scale(param) {
	var	a = param.split(/\s+/)	// a[0] = font name

	if (a.length <= 1)
		return
	var scale = parseFloat(a[a.length - 1])

	if (isNaN(scale) || a <= 0) {
		syntax(1, "Bad scale value in %%font")
		return
	}
	font_scale_tb[a[0]] = scale
	for (var fn in font_tb) {
		if (!font_tb.hasOwnProperty(fn))
			continue
		var font = font_tb[fn]
		if (font.name == a[0])
			font.swfac = font.size * scale
	}
}

// %%xxxfont fontname|* [encoding] [size|*]
function param_set_font(xxxfont, param) {
	var font, fn, old_fn, n, a, new_name, new_fn, new_size, scale, cl

	// "setfont-<n>" goes to "u<n>font"
	if (xxxfont[xxxfont.length - 2] == '-') {
		n = xxxfont[xxxfont.length - 1]
		if (n < '1' || n > '9')
			return
		xxxfont = "u" + n + "font"
	}
	fn = cfmt[xxxfont]
	if (fn) {
		font = font_tb[fn]
		if (font) {
			old_fn = font.name + "." + font.size
			if (font.class)
				old_fn += '.' + font.class
		}
	}

	n = param.indexOf('class=')
	if (n >= 0) {
		n += 6;
		a = param.indexOf(' ', n)
		if (a > 0)
			cl = param.slice(n, a)
		else
			cl = param.slice(n);
		param = param.replace(new RegExp('class=' + cl), '').trim()
	}

	a = param.split(/\s+/);
	new_name = a[0]
	if (new_name == "*"
	 && font) {
		new_name = font.name
	} else {
		new_name = new_name.replace('Times-Roman', 'serif');
		new_name = new_name.replace('Times', 'serif');
		new_name = new_name.replace('Helvetica', 'sans-serif');
		new_name = new_name.replace('Courier', 'monospace')
	}
	if (a.length > 1) {
		new_size = a[a.length - 1]
		if (new_size == '*' && font)
			new_size = font.size
	} else if (font) {
		new_size = font.size
	}
	if (!new_size) {
		// error ?
		return
	}
	new_fn = new_name + "." + new_size
	if (cl)
		new_fn += '.' + cl
	if (new_fn == old_fn)
		return
	font = font_tb[new_fn]
	if (!font) {
		scale = font_scale_tb[new_name]
		if (!scale)
			scale = 1.1;
		font = {
			name: new_name,
			size: Number(new_size),
			swfac: new_size * scale
		}
		font_tb[new_fn] = font
	}
	if (cl)
		font.class = cl;
	cfmt[xxxfont] = new_fn
}

// get a length with a unit - return the number of pixels
function get_unit(param) {
	var v = parseFloat(param)

	switch (param.slice(-2)) {
	case "CM":
	case "cm":
		v *= CM
		break
	case "IN":
	case "in":
		v *= IN
		break
	case "PT":		// paper point in 1/72 inch
	case "pt":
		v *= .75
		break
//	default:  // ('px')	// screen pixel in 1/96 inch
	}
	return v
}

// set the infoname
function set_infoname(param) {
//fixme: check syntax: '<letter> ["string"]'
	var	tmp = cfmt.infoname.split("\n"),
		letter = param[0]

	for (var i = 0; i < tmp.length; i++) {
		var infoname = tmp[i]
		if (infoname[0] != letter)
			continue
		if (param.length == 1)
			tmp.splice(i, 1)
		else
			tmp[i] = param
		cfmt.infoname = tmp.join('\n')
		return
	}
	cfmt.infoname += "\n" + param
}

// get the text option
var textopt = {
	align: 'j',
	center: 'c',
	fill: 'f',
	justify: 'j',
	ragged: 'f',
	right: 'r',
	skip: 's'
}
function get_textopt(param) {
	return textopt[param]
}

/* -- position of a voice element -- */
var posval = {
	above: C.SL_ABOVE,
	auto: 0,		// !! not C.SL_AUTO !!
	below: C.SL_BELOW,
	down: C.SL_BELOW,
	hidden: C.SL_HIDDEN,
	opposite: C.SL_HIDDEN,
	under: C.SL_BELOW,
	up: C.SL_ABOVE
}

/* -- set the position of elements in a voice -- */
function set_pos(k, v) {		// keyword, value
	k = k.slice(0, 3)
	if (k == "ste")
		k = "stm"
	set_v_param("pos", k + ' ' + v)
}

// set/unset the fields to write
function set_writefields(parm) {
	var	c, i,
		a = parm.split(/\s+/)

	if (get_bool(a[1])) {
		for (i = 0; i < a[0].length; i++) {	// set
			c = a[0][i]
			if (cfmt.writefields.indexOf(c) < 0)
				cfmt.writefields += c
		}
	} else {
		for (i = 0; i < a[0].length; i++) {	// unset
			c = a[0][i]
			if (cfmt.writefields.indexOf(c) >= 0)
				cfmt.writefields = cfmt.writefields.replace(c, '')
		}
	}
}

// set a voice specific parameter
function set_v_param(k, v) {
	if (curvoice) {
		set_vp([k + '=', v])
		return
	}
	k = [k + '=', v];
	var vid = '*'
	if (!info.V)
		info.V = {}
	if (info.V[vid])
		Array.prototype.push.apply(info.V[vid], k)
	else
		info.V[vid] = k
}

function set_page() {
	if (!img.chg)
		return
	img.chg = false;
	img.lm = cfmt.leftmargin - cfmt.printmargin
	if (img.lm < 0)
		img.lm = 0;
	img.rm = cfmt.rightmargin - cfmt.printmargin
	if (img.rm < 0)
		img.rm = 0;
	img.width = cfmt.pagewidth - 2 * cfmt.printmargin

	// must have 100pt at least as the staff width
	if (img.width - img.lm - img.rm < 100) {
		error(0, undefined, "Bad staff width");
		img.width = img.lm + img.rm + 150
	}
	set_posx()
} // set_page()

// set a format parameter
function set_format(cmd, param, lock) {
	var f, f2, v, box, i

//fixme: should check the type and limits of the parameter values
	if (lock) {
		fmt_lock[cmd] = true
	} else if (fmt_lock[cmd])
		return

	if (/.+font(-[\d])?$/.test(cmd)) {
		if (param.slice(-4) == " box") {
			box = true;
			param = param.slice(0, -4)
		}
		param_set_font(cmd, param)
		switch (cmd) {
		case "gchordfont":
			cfmt.gchordbox = box
			break
//		case "annotationfont":
//			cfmt.annotationbox = box
//			break
		case "measurefont":
			cfmt.measurebox = box
			break
		case "partsfont":
			cfmt.partsbox = box
			break
		}
		return
	}

	switch (cmd) {
	case "aligncomposer":
	case "barsperstaff":
	case "infoline":
	case "measurefirst":
	case "measurenb":
	case "rbmax":
	case "rbmin":
	case "shiftunison":
		v = parseInt(param)
		if (isNaN(v)) {
			syntax(1, "Bad integer value");
			break
		}
		cfmt[cmd] = v
		break
	case "microscale":
		f = parseInt(param)
		if (isNaN(f) || f < 4 || f > 256 || f % 1) {
			syntax(1, errs.bad_val, "%%" + cmd)
			break
		}
		set_v_param("uscale", f)
		break
	case "bgcolor":
	case "dblrepbar":
	case "titleformat":
		cfmt[cmd] = param
		break
	case "breaklimit":			// float values
	case "lineskipfac":
	case "maxshrink":
	case "pagescale":
	case "parskipfac":
	case "scale":
	case "slurheight":
	case "stemheight":
	case "stretchlast":
		f = parseFloat(param)
		if (isNaN(f)) {
			syntax(1, errs.bad_val, '%%' + cmd)
			break
		}
		switch (cmd) {
		case "scale":			// old scale
			f /= .75
		case "pagescale":
			cmd = "scale";
			img.chg = true
			break
		}
		cfmt[cmd] = f
		break
	case "bstemdown":
	case "breakoneoln":
	case "cancelkey":
	case "contbarnb":
	case "custos":
	case "decoerr":
	case "dynalign":
	case "flatbeams":
	case "gchordbox":
	case "graceslurs":
	case "graceword":
	case "hyphencont":
	case "keywarn":
	case "linewarn":
	case "measurebox":
	case "partsbox":
	case "rbdbstop":
	case "singleline":
	case "squarebreve":
	case "straightflags":
	case "stretchstaff":
	case "timewarn":
	case "titlecaps":
	case "titleleft":
		cfmt[cmd] = get_bool(param)
		break
	case "chordnames":
		v = param.split(',')
		cfmt.chordnames = {}
		for (i = 0; i < v.length; i++)
			cfmt.chordnames['CDEFGAB'[i]] = v[i]
		break
	case "composerspace":
	case "indent":
	case "infospace":
	case "maxstaffsep":
	case "maxsysstaffsep":
	case "musicspace":
	case "partsspace":
	case "staffsep":
	case "subtitlespace":
	case "sysstaffsep":
	case "textspace":
	case "titlespace":
	case "topspace":
	case "vocalspace":
	case "wordsspace":
		f = get_unit(param)	// normally, unit in points - 72 DPI accepted
		if (isNaN(f))
			syntax(1, errs.bad_val, '%%' + cmd)
		else
			cfmt[cmd] = f
		break
	case "print-leftmargin":	// to remove
		syntax(0, "$1 is deprecated - use %%printmargin instead", '%%' + cmd)
		cmd = "printmargin"
		// fall thru
	case "printmargin":
//	case "botmargin":
	case "leftmargin":
//	case "pageheight":
	case "pagewidth":
	case "rightmargin":
//	case "topmargin":
		f = get_unit(param)	// normally unit in cm or in - 96 DPI
		if (isNaN(f)) {
			syntax(1, errs.bad_val, '%%' + cmd)
			break
		}
		cfmt[cmd] = f;
		img.chg = true
		break
	case "concert-score":
		cfmt.sound = "concert"
		break
	case "writefields":
		set_writefields(param)
		break
	case "dynamic":
	case "gchord":
	case "gstemdir":
	case "ornament":
	case "stemdir":
	case "vocal":
	case "volume":
		set_pos(cmd, param)
		break
	case "font":
		get_font_scale(param)
		break
	case "fullsvg":
		if (parse.state != 0) {
			syntax(1, "Cannot have %%fullsvg inside a tune")
			break
		}
//fixme: should check only alpha, num and '_' characters
		cfmt[cmd] = param
		break
	case "gracespace":
		v = param.split(/\s+/)
		for (i = 0; i < 3; i++)
			if (isNaN(Number(v[i]))) {
				syntax(1, errs.bad_val, "%%gracespace")
				break
			}
		for (i = 0; i < 3; i++)
			cfmt[cmd] = Number(v[i])
		break
		break
	case "tuplets":
		cfmt[cmd] = param.split(/\s+/);
		v = cfmt[cmd][3]
		if (v			// if 'where'
		 && (posval[v]))	// translate the keyword
			cfmt[cmd][3] = posval[v]
		break
	case "infoname":
		set_infoname(param)
		break
	case "notespacingfactor":
		f = parseFloat(param)
		if (isNaN(f) || f < 1 || f > 2) {
			syntax(1, errs.bad_val, "%%" + cmd)
			break
		}
		i = 5;				// index of crotchet
		f2 = space_tb[i]
		for ( ; --i >= 0; ) {
			f2 /= f;
			space_tb[i] = f2
		}
		i = 5;
		f2 = space_tb[i]
		for ( ; ++i < space_tb.length; ) {
			f2 *= f;
			space_tb[i] = f2
		}
		break
	case "play":
		cfmt.sound = "play"		// without clef
		break
	case "pos":
		cmd = param.split(/\s+/);
		set_pos(cmd[0], cmd[1])
		break
	case "sounding-score":
		cfmt.sound = "sounding"
		break
	case "staffwidth":
		v = get_unit(param)
		if (isNaN(v)) {
			syntax(1, errs.bad_val, '%%' + cmd)
			break
		}
		if (v < 100) {
			syntax(1, "%%staffwidth too small")
			break
		}
		v = cfmt.pagewidth - v - cfmt.leftmargin
		if (v < 2) {
			syntax(1, "%%staffwidth too big")
			break
		}
		cfmt.rightmargin = v;
		img.chg = true
		break
	case "textoption":
		cfmt[cmd] = get_textopt(param)
		break
	case "titletrim":
		v = Number(param)
		if (isNaN(v))
			cfmt[cmd] = get_bool(param)
		else
			cfmt[cmd] = v
		break
	case "combinevoices":
		syntax(1, "%%combinevoices is deprecated - use %%voicecombine instead")
		break
	case "voicemap":
		set_v_param("map", param)
		break
	case "voicescale":
		set_v_param("scale", param)
		break
	default:		// memorize all global commands
		if (parse.state == 0)		// (needed for modules)
			cfmt[cmd] = param
		break
	}
}

// font stuff

// initialize the default fonts
function font_init() {
	param_set_font("annotationfont", "sans-serif 12");
	param_set_font("composerfont", "serifItalic 14");
	param_set_font("footerfont", "serif 16");
	param_set_font("gchordfont", "sans-serif 12");
	param_set_font("headerfont", "serif 16");
	param_set_font("historyfont", "serif 16");
	param_set_font("infofont", "serifItalic 14");
	param_set_font("measurefont", "serifItalic 14");
	param_set_font("partsfont", "serif 15");
	param_set_font("repeatfont", "serif 13");
	param_set_font("subtitlefont", "serif 16");
	param_set_font("tempofont", "serifBold 15");
	param_set_font("textfont", "serif 16");
	param_set_font("titlefont", "serif 20");
	param_set_font("vocalfont", "serifBold 13");
	param_set_font("voicefont", "serifBold 13");
	param_set_font("wordsfont", "serif 16")
}

// build a font style
function style_font(fn) {		// 'font_name'.'size'
	var	r = fn.split('.'),
		sz = r[1],
		i = fn.indexOf("Italic"),
		j = 100,
		o = fn.indexOf("Oblique"),
		b = fn.indexOf("Bold");

	fn = r[0];
	r = ''
	if (b > 0) {
		r += "font-weight:bold; ";
		j = b
	}
	if (i > 0 || o > 0) {
		if (i > 0) {
			r += "font-style:italic; "
			if (i < j)
				j = i
		}
		if (o > 0) {
			r += "font-style:oblique; "
			if (o < j)
				j = o
		}
	}
	if (j != 100) {
		if (fn[j - 1] == '-')
			j--;
		fn = fn.slice(0, j)
	}
	return 'font-family:' + fn + '; ' + r + 'font-size:' + sz + 'px'
}
Abc.prototype.style_font = style_font

// build a font class
function font_class(font) {
	if (font.class)
		return 'f' + font.fid + cfmt.fullsvg + ' ' + font.class
	return 'f' + font.fid + cfmt.fullsvg
}

// output a font style
function style_add_font(font) {
	font_style += "\n.f" + font.fid + cfmt.fullsvg +
			" {" + style_font(font.name + '.' + font.size) + "}"
}

// use the font
function use_font(font) {
	if (!defined_font[font.fid]) {
		defined_font[font.fid] = true;
		style_add_font(font)
	}
}

// get the font of the 'xxxfont' parameter
function get_font(xxx) {
	xxx += "font"
	var	fn = cfmt[xxx],
		font = font_tb[fn]
	if (!font) {
		syntax(1, "Unknown font $1", xxx);
		font = gene.curfont
	}
	if (!font.fid)
		font.fid = fid++;
	use_font(font)
	return font
}
// abc2svg - front.js - ABC parsing front-end
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

// translation table from the ABC draft version 2.2
var abc_utf = {
	"=D": "Đ",
	"=H": "Ħ",
	"=T": "Ŧ",
	"=d": "đ",
	"=h": "ħ",
	"=t": "ŧ",
	"/O": "Ø",
	"/o": "ø",
//	"/D": "Đ",
//	"/d": "đ",
	"/L": "Ł",
	"/l": "ł",
	"vL": "Ľ",
	"vl": "ľ",
	"vd": "ď",
	".i": "ı",
	"AA": "Å",
	"aa": "å",
	"AE": "Æ",
	"ae": "æ",
	"DH": "Ð",
	"dh": "ð",
//	"ng": "ŋ",
	"OE": "Œ",
	"oe": "œ",
	"ss": "ß",
	"TH": "Þ",
	"th": "þ"
}

// accidentals as octal values (abcm2ps compatibility)
var oct_acc = {
	"1": "\u266f",
	"2": "\u266d",
	"3": "\u266e",
	"4": "&#x1d12a;",
	"5": "&#x1d12b;"
}

// convert the escape sequences to utf-8
function cnv_escape(src) {
	var	c, c2,
		dst = "",
		i, j = 0, codeUnits

	while (1) {
		i = src.indexOf('\\', j)
		if (i < 0)
			break
		dst += src.slice(j, i);
		c = src[++i]
		if (!c)
			return dst + '\\'
		switch (c) {
		case '0':
		case '2':
			if (src[i + 1] != '0')
				break
			c2 = oct_acc[src[i + 2]]
			if (c2) {
				dst += c2;
				j = i + 3
				continue
			}
			break
		case 'u':
			j = Number("0x" + src.slice(i + 1, i + 5));
			if (isNaN(j) || j < 0x20) {
				dst += src[++i] + "\u0306"	// breve
				j = i + 1
				continue
			}
			codeUnits = [j]
			if (j >= 0xd800 && j <= 0xdfff) {	// surrogates
				j = Number("0x" + src.slice(i + 7, i + 11));
				if (isNaN(j))
					break		// bad surrogate
				codeUnits.push(j);
				j = i + 11
			} else {
				j = i + 5
			}
			dst += String.fromCharCode.apply(null, codeUnits)
			continue
		case 't':			// TAB
			dst += ' ';
			j = i + 1
			continue
		default:
			c2 = abc_utf[src.slice(i, i + 2)]
			if (c2) {
				dst += c2;
				j = i + 2
				continue
			}

			// try unicode combine characters
			switch (c) {
			case '`':
				dst += src[++i] + "\u0300"	// grave
				j = i + 1
				continue
			case "'":
				dst += src[++i] + "\u0301"	// acute
				j = i + 1
				continue
			case '^':
				dst += src[++i] + "\u0302"	// circumflex
				j = i + 1
				continue
			case '~':
				dst += src[++i] + "\u0303"	// tilde
				j = i + 1
				continue
			case '=':
				dst += src[++i] + "\u0304"	// macron
				j = i + 1
				continue
			case '_':
				dst += src[++i] + "\u0305"	// overline
				j = i + 1
				continue
			case '.':
				dst += src[++i] + "\u0307"	// dot
				j = i + 1
				continue
			case '"':
				dst += src[++i] + "\u0308"	// dieresis
				j = i + 1
				continue
			case 'o':
				dst += src[++i] + "\u030a"	// ring
				j = i + 1
				continue
			case 'H':
				dst += src[++i] + "\u030b"	// hungarumlaut
				j = i + 1
				continue
			case 'v':
				dst += src[++i] + "\u030c"	// caron
				j = i + 1
				continue
//			case ',':
//				dst += src[++i] + "\u0326"	// comma below
//				j = i + 1
//				continue
			case 'c':
				dst += src[++i] + "\u0327"	// cedilla
				j = i + 1
				continue
			case ';':
				dst += src[++i] + "\u0328"	// ogonek
				j = i + 1
				continue
			}
			break
		}
		dst += '\\' + c;
		j = i + 1
	}
	return dst + src.slice(j)
}

// ABC include
var include = 0

function do_include(fn) {
	var file, parse_sav

	if (!user.read_file) {
		syntax(1, "No read_file support")
		return
	}
	if (include > 2) {
		syntax(1, "Too many include levels")
		return
	}
	include++;
	file = user.read_file(fn)
	if (!file) {
		syntax(1, "Cannot read file '$1'", fn)
		return
	}
	parse_sav = clone(parse);
	tosvg(fn, file);
	parse = parse_sav;
	include--
}

// parse ABC code
function tosvg(in_fname,		// file name
		file,			// file content
		bol, eof) {		// beginning/end of file
	var	i, c, bol, eol, end,
		ext, select,
		line0, line1,
		last_info, opt, text, a, b, s,
		cfmt_sav, info_sav, char_tb_sav, glovar_sav, maps_sav,
		mac_sav, maci_sav,
		pscom,
		txt_add = '\n'		// for "+:"

	// check if a tune is selected
	function tune_selected() {
		var	re, res,
			i = file.indexOf('K:', bol)

		if (i < 0) {
//			syntax(1, "No K: in tune")
			return false
		}
		i = file.indexOf('\n', i)
		if (parse.select.test(file.slice(parse.bol, i)))
			return true
		re = /\n\w*\n/;
		re.lastIndex = i;
		res = re.exec(file)
		if (res)
			eol = re.lastIndex
		else
			eol = eof
		return false
	} // tune_selected()

	// remove the comment at end of text
	function uncomment(src, do_escape) {
	    var i
		if (src.indexOf('%') >= 0)
			src = src.replace(/([^\\])%.*/, '$1')
				 .replace(/\\%/g, '%');
		src = src.replace(/\s+$/, '')
		if (do_escape && src.indexOf('\\') >= 0)
			return cnv_escape(src)
		return src
	} // uncomment()

	function end_tune() {
		generate()
		if (info.W)
			put_words(info.W);
		put_history();
		blk_flush();
		parse.state = 0;		// file header
		cfmt = cfmt_sav;
		info = info_sav;
		char_tb = char_tb_sav;
		glovar = glovar_sav;
		maps = maps_sav;
		mac = mac_sav;
		maci = maci_sav;
		init_tune()
		img.chg = true;
		set_page();
	} // end_tune()

	// export functions and/or set module hooks
	if (abc2svg.modules
	 && (abc2svg.modules.hooks.length || abc2svg.modules.g_hooks.length))
		set_hooks()

	// initialize
	parse.file = file;		// used for errors
	parse.fname = in_fname

	// scan the file
	if (bol == undefined)
		bol = 0
	if (!eof)
		eof = file.length
	for ( ; bol < eof; bol = parse.eol + 1) {
		eol = file.indexOf('\n', bol)	// get a line
		if (eol < 0 || eol > eof)
			eol = eof;
		parse.eol = eol

		// remove the ending white spaces
		while (1) {
			eol--
			switch (file[eol]) {
			case ' ':
			case '\t':
				continue
			}
			break
		}
		eol++
		if (eol == bol) {		// empty line
			if (parse.state == 1) {
				parse.istart = bol;
				syntax(1, "Empty line in tune header - ignored")
			} else if (parse.state >= 2) {
				end_tune()
				if (parse.select) {	// skip to next tune
					eol = file.indexOf('\nX:', parse.eol)
					if (eol < 0)
						eol = eof
					parse.eol = eol
				}
			}
			continue
		}
		parse.istart = parse.bol = bol;
		parse.iend = eol;
		parse.line.index = 0;

		// check if the line is a pseudo-comment or I:
		line0 = file[bol];
		line1 = file[bol + 1]
		if (line0 == '%') {
			if (parse.prefix.indexOf(line1) < 0)
				continue		// comment

			// change "%%abc xxxx" to "xxxx"
			if (file[bol + 2] == 'a'
			 && file[bol + 3] == 'b'
			 && file[bol + 4] == 'c'
			 && file[bol + 5] == ' ') {
				bol += 6;
				line0 = file[bol];
				line1 = file[bol + 1]
			} else {
				pscom = true
			}
		} else if (line0 == 'I' && line1 == ':') {
			pscom = true
		}

		// pseudo-comments
		if (pscom) {
			pscom = false;
			bol += 2		// skip %%/I:
			while (1) {
				switch (file[bol]) {
				case ' ':
				case '\t':
					bol++
					continue
				}
				break
			}
			text = file.slice(bol, eol)
			if (!text || text[0] == '%')
				continue
			a = text.split(/\s+/, 2)
			if (!a[0])
				a.shift()
			switch (a[0]) {
			case "abcm2ps":
			case "ss-pref":
				parse.prefix = a[1]
				continue
			case "abc-include":
				ext = a[1].match(/.*\.(.*)/)
				if (ext && ext[1] == "abc")
					do_include(a[1])
				continue
			}

			// beginxxx/endxxx
			if (a[0].slice(0, 5) == 'begin') {
				b = a[0].substr(5);
				end = '\n' + line0 + line1 + "end" + b;
				i = file.indexOf(end, eol)
				if (i < 0) {
					syntax(1, "No $1 after %%$2",
							end.slice(1), a[0]);
					parse.eol = eof
					continue
				}
				do_begin_end(b, a[1],
					file.slice(eol + 1, i).replace(
						new RegExp('^' + line0 + line1, 'gm'),
										''));
				parse.eol = file.indexOf('\n', i + 6)
				if (parse.eol < 0)
					parse.eol = eof
				continue
			}
			switch (a[0]) {
			case "select":
				if (parse.state != 0) {
					syntax(1, "%%select ignored")
					continue
				}
				select = uncomment(text.slice(7), false)
				if (select[0] == '"')
					select = select.slice(1, -1);
				if (!select) {
					delete parse.select
					continue
				}
				select = select.replace(/\(/g, '\\(');
				select = select.replace(/\)/g, '\\)');
//				select = select.replace(/\|/g, '\\|');
				parse.select = new RegExp(select, 'm')
				continue
			case "tune":
				syntax(1, "%%tune not treated yet")
				continue
			case "voice":
				if (parse.state != 0) {
					syntax(1, "%%voice ignored")
					continue
				}
				select = uncomment(text.slice(6), false)

				/* if void %%voice, free all voice options */
				if (!select) {
					if (parse.cur_tune_opts)
						parse.cur_tune_opts.voice_opts = null
					else
						parse.voice_opts = null
					continue
				}
				
				if (select == "end")
					continue	/* end of previous %%voice */

				/* get the voice options */
				if (parse.cur_tune_opts) {
					if (!parse.cur_tune_opts.voice_opts)
						parse.cur_tune_opts.voice_opts = {}
					opt = parse.cur_tune_opts.voice_opts
				} else {
					if (!parse.voice_opts)
						parse.voice_opts = {}
					opt = parse.voice_opts
				}
				opt[select] = []
				while (1) {
					bol = ++eol
					if (file[bol] != '%')
						break
					eol = file.indexOf('\n', eol);
					if (file[bol + 1] != line1)
						continue
					bol += 2
					if (eol < 0)
						text = file.slice(bol)
					else
						text = file.slice(bol, eol);
					a = text.match(/\S+/)
					switch (a[0]) {
					default:
						opt[select].push(
							uncomment(text, true))
						continue
					case "score":
					case "staves":
					case "tune":
					case "voice":
						bol -= 2
						break
					}
					break
				}
				parse.eol = bol - 1
				continue
			}
			do_pscom(uncomment(text, true))
			continue
		}

		// music line (or free text)
		if (line1 != ':' || !/[A-Za-z+]/.test(line0)) {
			last_info = undefined;
			if (parse.state < 2)
				continue
			parse.line.buffer = uncomment(file.slice(bol, eol), true);
			parse_music_line()
			continue
		}

		// information fields
		bol += 2
		while (1) {
			switch (file[bol]) {
			case ' ':
			case '\t':
				bol++
				continue
			}
			break
		}
		text = uncomment(file.slice(bol, eol), true)
		if (line0 == '+') {
			if (!last_info) {
				syntax(1, "+: without previous info field")
				continue
			}
			txt_add = ' ';		// concatenate
			line0 = last_info
		}

		switch (line0) {
		case 'X':			// start of tune
			if (parse.state != 0) {
				syntax(1, errs.ignored, line0)
				continue
			}
			if (parse.select
			 && !tune_selected()) {	// skip to the next tune
				eol = file.indexOf('\nX:', parse.eol)
				if (eol < 0)
					eol = eof;
				parse.eol = eol
				continue
			}

			cfmt_sav = clone(cfmt);
			cfmt.pos = clone(cfmt.pos);
			info_sav = clone(info, 1);
			char_tb_sav = clone(char_tb);
			glovar_sav = clone(glovar);
			maps_sav = clone(maps, 1);
			mac_sav = clone(mac);
			maci_sav = new Int8Array(maci);
			info.X = text;
			parse.state = 1			// tune header
			continue
		case 'T':
			switch (parse.state) {
			case 0:
				continue
			case 1:
				if (info.T == undefined)	// (keep empty T:)
					info.T = text
				else
					info.T += "\n" + text
				continue
			}
			s = new_block("title");
			s.text = text
			continue
		case 'K':
			switch (parse.state) {
			case 0:
				continue
			case 1:				// tune header
				info.K = text
				break
			}
			do_info(line0, text)
			continue
		case 'W':
			if (parse.state == 0
			 || cfmt.writefields.indexOf(line0) < 0)
				break
			if (info.W == undefined)
				info.W = text
			else
				info.W += txt_add + text
			break

		case 'm':
			if (parse.state >= 2) {
				syntax(1, errs.ignored, line0)
				continue
			}
			if ((!cfmt.sound || cfmt.sound != "play")
			 && cfmt.writefields.indexOf(line0) < 0)
				break
			a = text.match(/(.*?)[= ]+(.*)/)
			if (!a || !a[2]) {
				syntax(1, errs.bad_val, "m:")
				continue
			}
			mac[a[1]] = a[2];
			maci[a[1].charCodeAt(0)] = 1	// first letter
			break

		// info fields in tune body only
		case 's':
			if (parse.state != 3
			 || cfmt.writefields.indexOf(line0) < 0)
				break
			get_sym(text, txt_add == ' ')
			break
		case 'w':
			if (parse.state != 3
			 || cfmt.writefields.indexOf(line0) < 0)
				break
			get_lyrics(text, txt_add == ' ')
			if (text.slice(-1) == '\\') {	// old continuation
				txt_add = ' ';
				last_info = line0
				continue
			}
			break
		case '|':			// "|:" starts a music line
			if (parse.state < 2)
				continue
			parse.line.buffer = uncomment(file.slice(bol, eol), true);
			parse_music_line()
			continue
		default:
			if ("ABCDFGHOSZ".indexOf(line0) >= 0) {
				if (parse.state >= 2) {
					syntax(1, errs.ignored, line0)
					continue
				}
//				if (cfmt.writefields.indexOf(c) < 0)
//					break
				if (!info[line0])
					info[line0] = text
				else
					info[line0] += txt_add + text
				break
			}

			// info field which may be embedded
			do_info(line0, text)
			continue
		}
		txt_add = '\n';
		last_info = line0
	}
	if (include)
		return
	if (parse.state >= 2)
		end_tune();
	parse.state = 0
}
Abc.prototype.tosvg = tosvg
// abc2svg - music.js - music generation
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

var	gene,
	staff_tb,
	nstaff,			// current number of staves
	tsnext,			// next line when cut
	realwidth,		// real staff width while generating
	insert_meter,		// insert time signature (1) and indent 1st line (2)
	spf_last,		// spacing for last short line

/* width of notes indexed by log2(note_length) */
	space_tb = new Float32Array([
		7, 10, 14.15, 20, 28.3,
		40,			/* crotchet (whole note / 4) */
		56.6, 80, 100, 120
	]),
	smallest_duration

/* -- decide whether to shift heads to other side of stem on chords -- */
/* this routine is called only once per tune */

// distance for no overlap - index: [prev acc][cur acc]
//var dt_tb = [
//	[5, 5, 5, 5],		/* dble sharp */
//	[5, 6, 6, 6],		/* sharp */
//	[5, 6, 5, 6],		/* natural */
//	[5, 5, 5, 5]		/* flat / dble flat */
//]

// accidental x offset - index = note head type
var dx_tb = new Float32Array([
	10,		// FULL
	10,		// EMPTY
	11,		// OVAL
	13,		// OVALBARS
	13		// SQUARE
])

// head width  - index = note head type
var hw_tb = new Float32Array([
	4.5,		// FULL
	5,		// EMPTY
	6,		// OVAL
	7,		// OVALBARS
	8		// SQUARE
])

/* head width for voice overlap - index = note head type */
var w_note = new Float32Array([
	3.5,		// FULL
	3.7,		// EMPTY
	5,		// OVAL
	6,		// OVALBARS
	7		// SQUARE
])

function set_head_shift(s) {
	var	i, i1, i2, d, ps, dx,
		dx_head = dx_tb[s.head],
		dir = s.stem,
		n = s.nhd

	if (n == 0)
		return			// single note

	/* set the head shifts */
	dx = dx_head * .78
	if (s.grace)
		dx *= .5
	if (dir >= 0) {
		i1 = 1;
		i2 = n + 1;
		ps = s.notes[0].pit
	} else {
		dx = -dx;
		i1 = n - 1;
		i2 = -1;
		ps = s.notes[n].pit
	}
	var	shift = false,
		dx_max = 0
	for (i = i1; i != i2; i += dir) {
		d = s.notes[i].pit - ps;
		ps = s.notes[i].pit
		if (d == 0) {
			if (shift) {		/* unison on shifted note */
				var new_dx = s.notes[i].shhd =
						s.notes[i - dir].shhd + dx
				if (dx_max < new_dx)
					dx_max = new_dx
				continue
			}
			if (i + dir != i2	/* second after unison */
//fixme: should handle many unisons after second
			 && ps + dir == s.notes[i + dir].pit) {
				s.notes[i].shhd = -dx
				if (dx_max < -dx)
					dx_max = -dx
				continue
			}
		}
		if (d < 0)
			d = -d
		if (d > 3 || (d >= 2 && s.head != C.SQUARE)) {
			shift = false
		} else {
			shift = !shift
			if (shift) {
				s.notes[i].shhd = dx
				if (dx_max < dx)
					dx_max = dx
			}
		}
	}
	s.xmx = dx_max				/* shift the dots */
}

// set the accidental shifts for a set of chords
function acc_shift(notes, dx_head) {
	var	i, i1, dx, dx1, ps, p1, acc,
		n = notes.length

	// set the shifts from the head shifts
	for (i = n - 1; --i >= 0; ) {	// (no shift on top)
		dx = notes[i].shhd
		if (!dx || dx > 0)
			continue
		dx = dx_head - dx;
		ps = notes[i].pit
		for (i1 = n; --i1 >= 0; ) {
			if (!notes[i1].acc)
				continue
			p1 = notes[i1].pit
			if (p1 < ps - 3)
				break
			if (p1 > ps + 3)
				continue
			if (notes[i1].shac < dx)
				notes[i1].shac = dx
		}
	}

	// set the shifts from accidental shifts
	for (i = n; --i >= 0; ) {		// from top to bottom
		acc = notes[i].acc
		if (!acc)
			continue
		dx = notes[i].shac
		if (!dx) {
			dx = notes[i].shhd
			if (dx < 0)
				dx = dx_head - dx
			else
				dx = dx_head
		}
		ps = notes[i].pit
		for (i1 = n; --i1 > i; ) {
			if (!notes[i1].acc)
				continue
			p1 = notes[i1].pit
			if (p1 >= ps + 4) {	// pitch far enough
				if (p1 > ps + 4	// if more than a fifth
				 || acc < 0	// if flat/dble flat
				 || notes[i1].acc < 0)
					continue
			}
			if (dx > notes[i1].shac - 6) {
				dx1 = notes[i1].shac + 7
				if (dx1 > dx)
					dx = dx1
			}
		}
		notes[i].shac = dx
	}
}

/* set the horizontal shift of accidentals */
/* this routine is called only once per tune */
function set_acc_shft() {
	var s, s2, st, i, acc, st, t, dx_head;

	// search the notes with accidentals at the same time
	s = tsfirst
	while (s) {
		if (s.type != C.NOTE
		 || s.invis) {
			s = s.ts_next
			continue
		}
		st = s.st;
		t = s.time;
		acc = false
		for (s2 = s; s2; s2 = s2.ts_next) {
			if (s2.time != t
			 || s2.type != C.NOTE
			 || s2.st != st)
				break
			if (acc)
				continue
			for (i = 0; i <= s2.nhd; i++) {
				if (s2.notes[i].acc) {
					acc = true
					break
				}
			}
		}
		if (!acc) {
			s = s2
			continue
		}

		dx_head = dx_tb[s.head]
//		if (s.dur >= C.BLEN * 2 && s.head == C.OVAL)
//		if (s.dur >= C.BLEN * 2)
//			dx_head = 15.8;

		// build a pseudo chord and shift the accidentals
		st = {
			notes: []
		}
		for ( ; s != s2; s = s.ts_next)
			st.notes = st.notes.concat(s.notes);
		sort_pitch(st);
		acc_shift(st.notes, dx_head)
	}
}

// link a symbol before an other one
function lkvsym(s, next) {	// voice linkage
	s.next = next;
	s.prev = next.prev
	if (s.prev)
		s.prev.next = s
	else
		s.p_v.sym = s;
	next.prev = s
}
function lktsym(s, next) {	// time linkage
	if (next) {
		s.ts_next = next;
		s.ts_prev = next.ts_prev
		if (s.ts_prev)
			s.ts_prev.ts_next = s;
		next.ts_prev = s
	} else {
		s.ts_next = s.ts_prev = null
	}
}

/* -- unlink a symbol -- */
function unlksym(s) {
	if (s.next)
		s.next.prev = s.prev
	if (s.prev)
		s.prev.next = s.next
	else
		s.p_v.sym = s.next
	if (s.ts_next) {
		if (s.seqst && !s.ts_next.seqst) {
			s.ts_next.seqst = true;
			s.ts_next.shrink = s.shrink;
			s.ts_next.space = s.space
		}
		s.ts_next.ts_prev = s.ts_prev
	}
	if (s.ts_prev)
		s.ts_prev.ts_next = s.ts_next
	if (tsfirst == s)
		tsfirst = s.ts_next
	if (tsnext == s)
		tsnext = s.ts_next
}

/* -- insert a clef change (treble or bass) before a symbol -- */
function insert_clef(s, clef_type, clef_line) {
	var	p_voice = s.p_v,
		new_s,
		st = s.st

	/* don't insert the clef between two bars */
	if (s.type == C.BAR && s.prev && s.prev.type == C.BAR)
		s = s.prev;

	/* create the symbol */
	p_voice.last_sym = s.prev
	if (!p_voice.last_sym)
		p_voice.sym = null;
	p_voice.time = s.time;
	new_s = sym_add(p_voice, C.CLEF);
	new_s.next = s;
	s.prev = new_s;

	new_s.clef_type = clef_type;
	new_s.clef_line = clef_line;
	new_s.st = st;
	new_s.clef_small = true
	delete new_s.second;
	new_s.notes = []
	new_s.notes[0] = {
		pit: s.notes[0].pit
	}
	new_s.nhd = 0;

	/* link in time */
	while (!s.seqst)
		s = s.ts_prev;
	lktsym(new_s, s)
	if (new_s.ts_prev.type != C.CLEF)
		new_s.seqst = true
	return new_s
}

/* -- set the staff of the floating voices -- */
/* this function is called only once per tune */
function set_float() {
	var p_voice, st, staff_chg, v, s, s1, up, down

	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
//		if (!p_voice.floating)
//			continue
		staff_chg = false;
		st = p_voice.st
		for (s = p_voice.sym; s; s = s.next) {
			if (!s.floating) {
				while (s && !s.floating)
					s = s.next
				if (!s)
					break
				staff_chg = false
			}
			if (!s.dur) {
				if (staff_chg)
					s.st++
				continue
			}
			if (s.notes[0].pit >= 19) {		/* F */
				staff_chg = false
				continue
			}
			if (s.notes[s.nhd].pit <= 12) {	/* F, */
				staff_chg = true
				s.st++
				continue
			}
			up = 127
			for (s1 = s.ts_prev; s1; s1 = s1.ts_prev) {
				if (s1.st != st
				 || s1.v == s.v)
					break
				if (s1.type == C.NOTE)
				    if (s1.notes[0].pit < up)
					up = s1.notes[0].pit
			}
			if (up == 127) {
				if (staff_chg)
					s.st++
				continue
			}
			if (s.notes[s.nhd].pit > up - 3) {
				staff_chg = false
				continue
			}
			down = -127
			for (s1 = s.ts_next; s1; s1 = s1.ts_next) {
				if (s1.st != st + 1
				 || s1.v == s.v)
					break
				if (s1.type == C.NOTE)
				    if (s1.notes[s1.nhd].pit > down)
					down = s1.notes[s1.nhd].pit
			}
			if (down == -127) {
				if (staff_chg)
					s.st++
				continue
			}
			if (s.notes[0].pit < down + 3) {
				staff_chg = true
				s.st++
				continue
			}
			up -= s.notes[s.nhd].pit
			down = s.notes[0].pit - down
			if (!staff_chg) {
				if (up < down + 3)
					continue
				staff_chg = true
			} else {
				if (up < down - 3) {
					staff_chg = false
					continue
				}
			}
			s.st++
		}
	}
}

/* -- set the x offset of the grace notes -- */
function set_graceoffs(s) {
	var	next, m, dx, x,
		gspleft = cfmt.gracespace[0],
		gspinside = cfmt.gracespace[1],
		gspright = cfmt.gracespace[2],
		g = s.extra;

	if (s.prev && s.prev.type == C.BAR)
		gspleft -= 3;
	x = gspleft;

	g.beam_st = true
	for ( ; ; g = g.next) {
		set_head_shift(g)
		acc_shift(g.notes, 7);
		dx = 0
		for (m = g.nhd; m >= 0; m--) {
			if (g.notes[m].shac > dx)
				dx = g.notes[m].shac
		}
		x += dx;
		g.x = x

		if (g.nflags <= 0) {
			g.beam_st = true;
			g.beam_end = true
		}
		next = g.next
		if (!next) {
			g.beam_end = true
			break
		}
		if (next.nflags <= 0)
			g.beam_end = true
		if (g.beam_end) {
			next.beam_st = true;
			x += gspinside / 4
		}
		if (g.nflags <= 0)
			x += gspinside / 4
		if (g.y > next.y + 8)
			x -= 1.5
		x += gspinside
	}

	next = s.next
	if (next
	 && next.type == C.NOTE) {	/* if before a note */
		if (g.y >= 3 * (next.notes[next.nhd].pit - 18))
			gspright -= 1		// above, a bit closer
		else if (g.beam_st
		      && g.y < 3 * (next.notes[next.nhd].pit - 18) - 4)
			gspright += 2		// below with flag, a bit further
	}
	x += gspright;

	/* return the whole width */
	return x
}

/* -- compute the width needed by the guitar chords / annotations -- */
function gchord_width(s, wlnote, wlw) {
	var	s2, gch, w, wl, ix,
		lspc = 0,
		rspc = 0,
		alspc = 0,
		arspc = 0

	for (ix = 0; ix < s.a_gch.length; ix++) {
		gch = s.a_gch[ix]
		switch (gch.type) {
		default:		/* default = above */
			wl = -gch.x
			if (wl > lspc)
				lspc = wl;
			w = gch.w + 2 - wl
			if (w > rspc)
				rspc = w
			break
		case '<':		/* left */
			w = gch.w + wlnote
			if (w > alspc)
				alspc = w
			break
		case '>':		/* right */
			w = gch.w + s.wr
			if (w > arspc)
				arspc = w
			break
		}
	}

	/* adjust width for no clash */
	s2 = s.prev
	if (s2) {
		if (s2.a_gch) {
			for (s2 = s.ts_prev; ; s2 = s2.ts_prev) {
				if (s2 == s.prev) {
					if (wlw < lspc)
						wlw = lspc
					break
				}
				if (s2.seqst)
					lspc -= s2.shrink
			}
		}
		if (alspc != 0)
			if (wlw < alspc)
				wlw = alspc
	}
	s2 = s.next
	if (s2) {
		if (s2.a_gch) {
			for (s2 = s.ts_next; ; s2 = s2.ts_next) {
				if (s2 == s.next) {
					if (s.wr < rspc)
						s.wr = rspc
					break
				}
				if (s2.seqst)
					rspc -= 8
			}
		}
		if (arspc != 0)
			if (s.wr < arspc)
				s.wr = alspc
	}
	return wlw
}

/* -- set the width of a symbol -- */
/* This routine sets the minimal left and right widths wl,wr
 * so that successive symbols are still separated when
 * no extra glue is put between them */
function set_width(s) {
	var s2, i, m, xx, w, wlnote, wlw, acc

	switch (s.type) {
	case C.NOTE:
	case C.REST:

		/* set the note widths */
		s.wr = wlnote = hw_tb[s.head]

		/* room for shifted heads and accidental signs */
		if (s.xmx > 0)
			s.wr += s.xmx + 4;
		for (s2 = s.prev; s2; s2 = s2.prev) {
			if (w_tb[s2.type] != 0)
				break
		}
		if (s2) {
			switch (s2.type) {
			case C.BAR:
			case C.CLEF:
			case C.KEY:
			case C.METER:
				wlnote += 3
				break
			}
		}
		for (m = 0; m <= s.nhd; m++) {
			xx = s.notes[m].shhd
			if (xx < 0) {
				if (wlnote < -xx + 5)
					wlnote = -xx + 5
			}
			if (s.notes[m].acc) {
				var tmp = s.notes[m].shac +
					(s.notes[m].micro ? 5.5 : 3.5)
				if (wlnote < tmp)
					wlnote = tmp
			}
		}
		if (s2) {
			switch (s2.type) {
			case C.BAR:
			case C.CLEF:
			case C.KEY:
			case C.METER:
				wlnote -= 3
				break
			}
		}

		/* room for the decorations */
		if (s.a_dd)
			wlnote += deco_width(s)

		/* space for flag if stem goes up on standalone note */
		if (s.beam_st && s.beam_end
		 && s.stem > 0 && s.nflags > 0) {
			if (s.wr < s.xmx + 9)
				s.wr = s.xmx + 9
		}

		/* leave room for dots and set their offset */
		if (s.dots > 0) {
		  if (s.wl == undefined)	// don't recompute if new music line
			switch (s.head) {
			case C.SQUARE:
				s.xmx += 4
				break
			case C.OVALBARS:
			case C.OVAL:
				s.xmx += 2
				break
			case C.EMPTY:
				s.xmx += 1
				break
			}
			if (s.wr < s.xmx + 8)
				s.wr = s.xmx + 8
			if (s.dots >= 2)
				s.wr += 3.5 * (s.dots - 1)
		}

		/* if a tremolo on 2 notes, have space for the small beam(s) */
		if (s.trem2 && s.beam_end
		 && wlnote < 20)
			wlnote = 20

		wlw = wlnote

		if (s2) {
			switch (s2.type) {
			case C.NOTE:	/* extra space when up stem - down stem */
				if (s2.stem > 0 && s.stem < 0) {
					if (wlw < 7)
						wlw = 7
				}

				/* make sure helper lines don't overlap */
				if ((s.y > 27 && s2.y > 27)
				 || (s.y < -3 && s2.y < -3)) {
					if (wlw < 6)
						wlw = 6
				}

				/* have ties wide enough */
				if (s2.ti1) {
					if (wlw < 14)
						wlw = 14
				}
				break
			case C.CLEF:		/* extra space at start of line */
				if (s2.second
				 || s2.clef_small)
					break
				wlw += 8
				break
			case C.KEY:
/*			case C.METER:	*/
				wlw += 4
				break
			}
		}

		/* leave room for guitar chord */
		if (s.a_gch)
			wlw = gchord_width(s, wlnote, wlw)

		/* leave room for vocals under note */
		/* related to draw_lyrics() */
		if (s.a_ly)
			wlw = ly_width(s, wlw)

		/* if preceeded by a grace note sequence, adjust */
		if (s2 && s2.type == C.GRACE)
			s.wl = wlnote - 4.5
		else
			s.wl = wlw
		return
	case C.SPACE:
		xx = s.width / 2;
		s.wr = xx
		if (s.a_gch)
			xx = gchord_width(s, xx, xx)
		if (s.a_dd)
			xx += deco_width(s);
		s.wl = xx
		return
	case C.BAR:
		if (s.norepbra)
			break
		if (!s.invis) {
			var bar_type = s.bar_type

			switch (bar_type) {
			case "|":
				w = 7		// 4 + 3
				break
			case "|:":
			case ":|":
				w = 15		// 4 + 5 + 6
				break
			case "::":
				w = 26		// 4 + 5 + 6 + 6 + 5
				break
			default:
				if (!bar_type)
					break
				w = 4 + 3 * bar_type.length
				for (i = 0; i < bar_type.length; i++) {
					switch (bar_type[i]) {
					case "[":
					case "]":
						w += 3
						break
					case ":":
						w += 2
						break
					}
				}
				break
			}
			s.wl = w
			if (s.next
			 && s.next.type != C.METER)
				s.wr = 7
			else
				s.wr = 5
//			s.notes[0].shhd = (w - 5) * -.5

			/* if preceeded by a grace note sequence, adjust */
			for (s2 = s.prev; s2; s2 = s2.prev) {
				if (w_tb[s2.type] != 0) {
					if (s2.type == C.GRACE)
						s.wl -= 8
					break
				}
			}
		} else {
			s.wl = s.wr = 0
		}
		if (s.a_dd)
			s.wl += deco_width(s)

		/* have room for the repeat numbers / chord indication */
		if (s.text && s.text.length < 4
		 && s.next && s.next.a_gch) {
			set_font("repeat");
			s.wr += strwh(s.text)[0] + 2
		}
		return
	case C.CLEF:
// (there may be invisible clefs in empty staves)
		if (s.invis) {
			s.wl = s.wr = 1		// (!! not 0 !!)
			return
		}
		s.wl = s.wr = s.clef_small ? 8 : 12
		return
	case C.KEY:
		var n1, n2, esp;

		s.wl = 3;
		esp = 4
		if (!s.k_a_acc) {
			n1 = s.k_sf			/* new key sig */
			if (s.k_old_sf && (cfmt.cancelkey || n1 == 0))
				n2 = s.k_old_sf	/* old key */
			else
				n2 = 0
			if (n1 * n2 >= 0) {		/* if no natural */
				if (n1 < 0)
					n1 = -n1
				if (n2 < 0)
					n2 = -n2
				if (n2 > n1)
					n1 = n2
			} else {
				n1 -= n2
				if (n1 < 0)
					n1 = -n1;
				esp += 3	/* see extra space in draw_keysig() */
			}
		} else {
			n1 = n2 = s.k_a_acc.length
			if (n2)
			    var	last_acc = s.k_a_acc[0].acc
			for (i = 1; i < n2; i++) {
				acc = s.k_a_acc[i]
				if (acc.pit > s.k_a_acc[i - 1].pit + 6
				 || acc.pit < s.k_a_acc[i - 1].pit - 6)
					n1--		// no clash
				else if (acc.acc != last_acc)
					esp += 3;
				last_acc = acc.acc
			}
		}
		s.wr = 5.5 * n1 + esp
		return
	case C.METER:
		wlw = 0;
		s.x_meter = []
		for (i = 0; i < s.a_meter.length; i++) {
			var meter = s.a_meter[i]
			if (meter.top[0] == "C") {
				s.x_meter[i] = wlw + 6;
				wlw += 12
			} else {
				w = 0
				if (!meter.bot
				 || meter.top.length > meter.bot.length)
					meter = meter.top
				else
					meter = meter.bot;
				for (m = 0; m < meter.length; m++) {
					switch (meter[m]) {
					case '(':
						wlw += 4
						// fall thru
					case ')':
					case '1':
						w += 4
						break
					default:
						w += 12
						break
					}
				}
				s.x_meter[i] = wlw + w / 2
				wlw += w
			}
		}
		s.wl = 0;
		s.wr = wlw + 6
		return
	case C.MREST:
		s.wl = 6;
		s.wr = 66
		return
	case C.GRACE:
		s.wl = set_graceoffs(s);
		s.wr = 0
		if (s.a_ly)
			ly_width(s, wlw)
		return
	case C.STBRK:
		s.wl = s.xmx
		if (s.next && s.next.type == C.CLEF) {
			s.wr = 2
			delete s.next.clef_small	/* big clef */
		} else {
			s.wr = 8
		}
		return
	case C.CUSTOS:
		s.wl = s.wr = 4
		return
	case C.BLOCK:				// no width
	case C.PART:
	case C.REMARK:
	case C.STAVES:
	case C.TEMPO:
		break
	default:
		error(2, s, "set_width - Cannot set width for symbol $1", s.type)
		break
	}
	s.wl = s.wr = 0
}

// convert delta time to natural spacing
function time2space(s, len) {
    var i, l, space

	if (smallest_duration >= C.BLEN / 2) {
		if (smallest_duration >= C.BLEN)
			len /= 4
		else
			len /= 2
	} else if (!s.next && len >= C.BLEN) {
		len /= 2
	}
	if (len >= C.BLEN / 4) {
		if (len < C.BLEN / 2)
			i = 5
		else if (len < C.BLEN)
			i = 6
		else if (len < C.BLEN * 2)
			i = 7
		else if (len < C.BLEN * 4)
			i = 8
		else
			i = 9
	} else {
		if (len >= C.BLEN / 8)
			i = 4
		else if (len >= C.BLEN / 16)
			i = 3
		else if (len >= C.BLEN / 32)
			i = 2
		else if (len >= C.BLEN / 64)
			i = 1
		else
			i = 0
	}
	l = len - ((C.BLEN / 16 / 8) << i)
	space = space_tb[i]
	if (l != 0) {
		if (l < 0) {
			space = space_tb[0] * len / (C.BLEN / 16 / 8)
		} else {
			if (i >= 9)
				i = 8
			space += (space_tb[i + 1] - space_tb[i]) * l / len
		}
	}
	return space
}

/* -- set the natural space -- */
function set_space(s) {
	var	s2, space,
		prev_time = s.ts_prev.time,
		len = s.time - prev_time		/* time skip */

	if (len == 0) {
		switch (s.type) {
		case C.MREST:
			return s.wl
///*fixme:do same thing at start of line*/
//		case C.NOTE:
//		case C.REST:
//			if (s.ts_prev.type == C.BAR) {
//				if (s.nflags < -2)
//					return space_tb[0]
//				return space_tb[2]
//			}
//			break
		}
		return 0
	}
	if (s.ts_prev.type == C.MREST)
//		return s.ts_prev.wr + 16
//				+ 3		// (bar wl=5 wr=8)
		return 71	// 66 (mrest.wl) + 5 (bar.wl)

	space = time2space(s, len)

	while (!s.dur) {
		switch (s.type) {
		case C.BAR:
			// (hack to have quite the same note widths between measures)
			return space * .9 - 7
		case C.CLEF:
			return space - s.wl - s.wr
		case C.BLOCK:			// no space
		case C.PART:
		case C.REMARK:
		case C.STAVES:
		case C.TEMPO:
			s = s.ts_next
			if (!s)
				return space
			continue
		}
		break
	}

	/* reduce spacing within a beam */
	if (!s.beam_st)
		space *= .9			// ex fnnp

	/* decrease spacing when stem down followed by stem up */
/*fixme:to be done later, after x computed in sym_glue*/
	if (s.type == C.NOTE && s.nflags >= -1
	 && s.stem > 0) {
		var stemdir = true

		for (s2 = s.ts_prev;
		     s2 && s2.time == prev_time;
		     s2 = s2.ts_prev) {
			if (s2.type == C.NOTE
			 && (s2.nflags < -1 || s2.stem > 0)) {
				stemdir = false
				break
			}
		}
		if (stemdir) {
			for (s2 = s.ts_next;
			     s2 && s2.time == s.time;
			     s2 = s2.ts_next) {
				if (s2.type == C.NOTE
				 && (s2.nflags < -1 || s2.stem < 0)) {
					stemdir = false
					break
				}
			}
			if (stemdir)
				space *= .9
		}
	}
	return space
}

// set the fixed spacing inside tuplets
function set_sp_tup(s, s2) {
    var	tim = s.time,
	ttim = s2.time - tim,
	space = time2space(s, ttim / s.tq0) * s.tq0;

	s = s.ts_next
	while (1) {
		if (s.seqst)
			s.space = (s.time - tim) / ttim * space;
		tim = s.time;
		if (s == s2)
			break
		s = s.ts_next
	}
}

// create an invisible bar for end of music lines
function add_end_bar(s) {
	return {
		type: C.BAR,
		bar_type: "|",
		fname: s.fname,
		istart: s.istart,
		iend: s.iend,
		v: s.v,
		p_v: s.p_v,
		st: s.st,
		dur: 0,
		seqst: true,
		invis: true,
		time: s.time + s.dur,
		nhd: 0,
		notes: [{
			pit: s.notes[0].pit
		}],
		wl:0,
		wr:0
	}
}

/* -- set the width and space of all symbols -- */
/* this function is called once for the whole tune
 * then, once per music line up to the first sequence */
function set_allsymwidth(last_s) {
	var	new_val, s_tupc, s_tupn,
		s = tsfirst,
		xa = 0,
		xl = [],
		tupfl = 0,
		ntup = 0

	/* loop on all symbols */
	while (1) {
		var	maxx = xa,
			s2 = s

		do {
			set_width(s);
			new_val = (xl[s.st] || 0) + s.wl
			if (new_val > maxx)
				maxx = new_val;
			if (s.tp0) {		// start of tuplet
				if (++ntup == 1) {
					s_tupn = s;
					tupfl |= 1
				}
			} else if (s.te0) {	// end of tuplet
				if (--ntup == 0)
					tupfl = 4
			}
			s = s.ts_next
		} while (s != last_s && !s.seqst);

		// set the spaces of the time sequence
		s2.shrink = maxx - xa

		if (!(tupfl & 14)) {		// if not in a tuplet sequence
			if (s2.ts_prev)
				s2.space = set_space(s2)
			else
				s2.space = 0
		}
		if (tupfl) {
			if (tupfl & 8) {
				set_sp_tup(s_tupc, s2);
				tupfl &= ~8
			}
			if (tupfl & 1) {
				s_tupc = s_tupn;
				tupfl++		// 1 => 2
			}
			if (tupfl & 4)
				tupfl += 4	// 4 => 8
		}

		if (s2.shrink == 0 && s2.space == 0 && s2.type == C.CLEF) {
			delete s2.seqst;		/* no space */
			s2.time = s2.ts_prev.time
		}
		if (s == last_s)
			break

		// update the min left space per staff
		xa = maxx;
		s = s2
		do {
			if (!xl[s.st] || xl[s.st] < xa + s.wr)
				xl[s.st] = xa + s.wr;
			s = s.ts_next
		} while (!s.seqst)
	}
}

/* change a symbol into a rest */
function to_rest(s) {
	s.type = C.REST
// just keep nl and seqst
	delete s.in_tuplet
	delete s.sl1
	delete s.sl2
	delete s.a_dd
	delete s.a_gch
	s.slur_start = s.slur_end = 0
/*fixme: should set many parameters for set_width*/
//	set_width(s)
}

/* -- set the repeat sequences / measures -- */
function set_repeat(s) {	// first note
	var	s2, s3,  i, j, dur,
		n = s.repeat_n,
		k = s.repeat_k,
		st = s.st,
		v = s.v

	s.repeat_n = 0				// treated

	/* treat the sequence repeat */
	if (n < 0) {				/* number of notes / measures */
		n = -n;
		i = n				/* number of notes to repeat */
		for (s3 = s.prev; s3; s3 = s3.prev) {
			if (!s3.dur) {
				if (s3.type == C.BAR) {
					error(1, s3, "Bar in repeat sequence")
					return
				}
				continue
			}
			if (--i <= 0)
				break
		}
		if (!s3) {
			error(1, s, errs.not_enough_n)
			return
		}
		dur = s.time - s3.time;

		i = k * n		/* whole number of notes/rests to repeat */
		for (s2 = s; s2; s2 = s2.next) {
			if (!s2.dur) {
				if (s2.type == C.BAR) {
					error(1, s2, "Bar in repeat sequence")
					return
				}
				continue
			}
			if (--i <= 0)
				break
		}
		if (!s2
		 || !s2.next) {		/* should have some symbol */
			error(1, s, errs.not_enough_n)
			return
		}
		for (s2 = s.prev; s2 != s3; s2 = s2.prev) {
			if (s2.type == C.NOTE) {
				s2.beam_end = true
				break
			}
		}
		for (j = k; --j >= 0; ) {
			i = n			/* number of notes/rests */
			if (s.dur)
				i--;
			s2 = s.ts_next
			while (i > 0) {
				if (s2.st == st) {
					unlksym(s2)
					if (s2.v == v
					 && s2.dur)
						i--
				}
				s2 = s2.ts_next
			}
			to_rest(s);
			s.dur = s.notes[0].dur = dur;
			s.rep_nb = -1;		// single repeat
			s.beam_st = true;
			set_width(s)
			if (s.seqst)
				s.space = set_space(s);
			s.head = C.SQUARE;
			for (s = s2; s; s = s.ts_next) {
				if (s.st == st
				 && s.v == v
				 && s.dur)
					break
			}
		}
		return
	}

	/* check the measure repeat */
	i = n				/* number of measures to repeat */
	for (s2 = s.prev.prev ; s2; s2 = s2.prev) {
		if (s2.type == C.BAR
		 || s2.time == tsfirst.time) {
			if (--i <= 0)
				break
		}
	}
	if (!s2) {
		error(1, s, errs.not_enough_m)
		return
	}

	dur = s.time - s2.time		/* repeat duration */

	if (n == 1)
		i = k			/* repeat number */
	else
		i = n			/* check only 2 measures */
	for (s2 = s; s2; s2 = s2.next) {
		if (s2.type == C.BAR) {
			if (--i <= 0)
				break
		}
	}
	if (!s2) {
		error(1, s, errs.not_enough_m)
		return
	}

	/* if many 'repeat 2 measures'
	 * insert a new %%repeat after the next bar */
	i = k				/* repeat number */
	if (n == 2 && i > 1) {
		s2 = s2.next
		if (!s2) {
			error(1, s, errs.not_enough_m)
			return
		}
		s2.repeat_n = n;
		s2.repeat_k = --i
	}

	/* replace */
	dur /= n
	if (n == 2) {			/* repeat 2 measures (once) */
		s3 = s
		for (s2 = s.ts_next; ; s2 = s2.ts_next) {
			if (s2.st != st)
				continue
			if (s2.v == v
			 && s2.type == C.BAR)
				break
			unlksym(s2)
		}
		to_rest(s3);
		s3.dur = s3.notes[0].dur = dur;
		s3.invis = true
		if (s3.seqst)
			s3.space = set_space(s3);
		s2.bar_mrep = 2
		if (s2.seqst)
			s2.space = set_space(s2);
		s3 = s2.next;
		for (s2 = s3.ts_next; ; s2 = s2.ts_next) {
			if (s2.st != st)
				continue
			if (s2.v == v
			 && s2.type == C.BAR)
				break
			unlksym(s2)
		}
		to_rest(s3);
		s3.dur = s3.notes[0].dur = dur;
		s3.invis = true;
		set_width(s3)
		if (s3.seqst)
			s3.space = set_space(s3)
		if (s2.seqst)
			s2.space = set_space(s2)
		return
	}

	/* repeat 1 measure */
	s3 = s
	for (j = k; --j >= 0; ) {
		for (s2 = s3.ts_next; ; s2 = s2.ts_next) {
			if (s2.st != st)
				continue
			if (s2.v == v
			 && s2.type == C.BAR)
				break
			unlksym(s2)
		}
		to_rest(s3);
		s3.dur = s3.notes[0].dur = dur;
		s3.beam_st = true
		if (s3.seqst)
			s3.space = set_space(s3)
		if (s2.seqst)
			s2.space = set_space(s2)
		if (k == 1) {
			s3.rep_nb = 1
			break
		}
		s3.rep_nb = k - j + 1;	// number to print above the repeat rest
		s3 = s2.next
	}
}

/* add a custos before the symbol of the next line */
function custos_add(s) {
	var	p_voice, new_s, i,
		s2 = s

	while (1) {
		if (s2.type == C.NOTE)
			break
		s2 = s2.next
		if (!s2)
			return
	}

	p_voice = s.p_v;
	p_voice.last_sym = s.prev;
//	if (!p_voice.last_sym)
//		p_voice.sym = null;
	p_voice.time = s.time;
	new_s = sym_add(p_voice, C.CUSTOS);
	new_s.next = s;
	s.prev = new_s;
	lktsym(new_s, s);

	new_s.seqst = true;
	new_s.shrink = s.shrink
	if (new_s.shrink < 8 + 4)
		new_s.shrink = 8 + 4;
	new_s.space = s2.space;
	new_s.wl = 0;
	new_s.wr = 4;

	new_s.nhd = s2.nhd;
	new_s.notes = []
	for (i = 0; i < s.notes.length; i++) {
		new_s.notes[i] = {
			pit: s2.notes[i].pit,
			shhd: 0,
			dur: C.BLEN / 4
		}
	}
	new_s.stemless = true
}

/* -- define the beginning of a new music line -- */
function set_nl(s) {
	var s2, p_voice, done

	// set the end of line marker and
	function set_eol(s) {
		if (cfmt.custos && voice_tb.length == 1)
			custos_add(s)

		// set the nl flag if more music
		for (var s2 = s.ts_next; s2; s2 = s2.ts_next) {
			if (s2.seqst) {
				s.nl = true
				break
			}
		}
	} // set_eol()

	// set the eol on the next symbol
	function set_eol_next(s) {
		if (!s.next) {		// special case: the voice stops here
			set_eol(s)
			return s
		}
		for (s = s.ts_next; s; s = s.ts_next) {
			if (s.seqst) {
				set_eol(s)
				break
			}
		}
		return s
	} // set_eol_next()

	/* if explicit EOLN, cut on the next symbol */
	if (s.eoln && !cfmt.keywarn && !cfmt.timewarn)
		return set_eol_next(s)

	/* if normal symbol, cut here */
	switch (s.type) {
	case C.CLEF:
	case C.BAR:
	case C.STAVES:
		break
	case C.KEY:
		if (cfmt.keywarn && !s.k_none)
			break
		return set_eol_next(s)
	case C.METER:
		if (cfmt.timewarn)
			break
		return set_eol_next(s)
	case C.GRACE:			/* don't cut on a grace note */
		s = s.next
		if (!s)
			return s
		/* fall thru */
	default:
		return set_eol_next(s)
	}

	/* go back to handle the staff breaks at end of line */
	for (; s; s = s.ts_prev) {
		if (!s.seqst)
			continue
		switch (s.type) {
		case C.KEY:
		case C.CLEF:
		case C.METER:
			continue
		}
		break
	}
	done = 0
	for ( ; ; s = s.ts_next) {
		if (!s)
			return s
		if (!s.seqst)
			continue
		if (done < 0)
			break
		switch (s.type) {
		case C.STAVES:
			if (s.ts_prev && s.ts_prev.type == C.BAR)
				break
			while (s.ts_next) {
				if (w_tb[s.ts_next.type] != 0
				 && s.ts_next.type != C.CLEF)
					break
				s = s.ts_next
			}
			if (!s.ts_next || s.ts_next.type != C.BAR)
				continue
			s = s.ts_next
			// fall thru
		case C.BAR:
			if (done)
				break
			done = 1;
			continue
		case C.STBRK:
			if (!s.stbrk_forced)
				unlksym(s)	/* remove */
			else
				done = -1	// keep the next symbols on the next line
			continue
		case C.METER:
			if (!cfmt.timewarn)
				break
			continue
		case C.CLEF:
			if (done)
				break
			continue
		case C.KEY:
			if (!cfmt.keywarn || s.k_none)
				break
			continue
		default:
			if (!done || (s.prev && s.prev.type == C.GRACE))
				continue
			break
		}
		break
	}
	set_eol(s)
	return s
}

/* get the width of the starting clef and key signature */
// return
//	r[0] = width of clef and key signature
//	r[1] = width of the meter
function get_ck_width() {
    var	r0, r1,
	p_voice = voice_tb[0]

	set_width(p_voice.clef);
	set_width(p_voice.key);
	set_width(p_voice.meter)
	return [p_voice.clef.wl + p_voice.clef.wr +
			p_voice.key.wl + p_voice.key.wr,
		p_voice.meter.wl + p_voice.meter.wr]
}

// get the width of the symbols up to the next eoln or eof
function get_width(s, last) {
	var	shrink, space,
		w = 0,
		sp_fac = (1 - cfmt.maxshrink)

	do {
		if (s.seqst) {
			shrink = s.shrink
			if ((space = s.space) < shrink)
				w += shrink
			else
				w += shrink * cfmt.maxshrink
					+ space * sp_fac
			s.x = w
		}
		if (s == last)
			break
		s = s.ts_next
	} while (s)
	return w;
}

/* -- search where to cut the lines according to the staff width -- */
function set_lines(	s,		/* first symbol */
			last,		/* last symbol / null */
			lwidth,		/* w - (clef & key sig) */
			indent) {	/* for start of tune */
	var	first, s2, s3, x, xmin, xmid, xmax, wwidth, shrink, space,
		nlines, cut_here;

	for ( ; last; last = last.ts_next) {
		if (last.eoln)
			break
	}

	/* calculate the whole size of the piece of tune */
	wwidth = get_width(s, last) + indent

	/* loop on cutting the tune into music lines */
	while (1) {
		nlines = Math.ceil(wwidth / lwidth)
		if (nlines <= 1) {
			if (last)
				last = set_nl(last)
			return last
		}

		s2 = first = s;
		xmin = s.x - s.shrink - indent;
		xmax = xmin + lwidth;
		xmid = xmin + wwidth / nlines;
		xmin += wwidth / nlines * cfmt.breaklimit;
		for (s = s.ts_next; s != last ; s = s.ts_next) {
			if (!s.x)
				continue
			if (s.type == C.BAR)
				s2 = s
			if (s.x >= xmin)
				break
		}
//fixme: can this occur?
		if (s == last) {
			if (last)
				last = set_nl(last)
			return last
		}

		/* try to cut on a measure bar */
		cut_here = false;
		s3 = null
		for ( ; s != last; s = s.ts_next) {
			x = s.x
			if (!x)
				continue
			if (x > xmax)
				break
			if (s.type != C.BAR)
				continue
			if (x < xmid) {
				s3 = s		// keep the last bar
				continue
			}

			// cut on the bar closest to the middle
			if (!s3 || s.x < xmid) {
				s3 = s
				continue
			}
			if (s3 > xmid)
				break
			if (xmid - s3.x < s.x - xmid)
				break
			s3 = s
			break
		}

		/* if a bar, cut here */
		if (s3) {
			s = s3;
			cut_here = true
		}

		/* try to avoid to cut a beam or a tuplet */
		if (!cut_here) {
			var	beam = 0,
				bar_time = s2.time;

			xmax -= 8; // (left width of the inserted bar in set_allsymwidth)
			s = s2;			// restart from start or last bar
			s3 = null
			for ( ; s != last; s = s.ts_next) {
				if (s.beam_st)
					beam++
				if (s.beam_end && beam > 0)
					beam--
				x = s.x
				if (!x)
					continue
				if (x + s.wr >= xmax)
					break
				if (beam || s.in_tuplet)
					continue
//fixme: this depends on the meter
				if ((s.time - bar_time) % (C.BLEN / 4) == 0) {
					s3 = s
					continue
				}
				if (!s3 || s.x < xmid) {
					s3 = s
					continue
				}
				if (s3 > xmid)
					break
				if (xmid - s3.x < s.x - xmid)
					break
				s3 = s
				break
			}
			if (s3) {
				s = s3;
				cut_here = true
			}
		}

		// cut anyhere
		if (!cut_here) {
			s3 = s = s2
			for ( ; s != last; s = s.ts_next) {
				x = s.x
				if (!x)
					continue
				if (s.x < xmid) {
					s3 = s
					continue
				}
				if (s3 > xmid)
					break
				if (xmid - s3.x < s.x - xmid)
					break
				s3 = s
				break
			}
			s = s3
		}

		if (s.nl) {		/* already set here - advance */
			error(0, s,
			    "Line split problem - adjust maxshrink and/or breaklimit");
			nlines = 2
			for (s = s.ts_next; s != last; s = s.ts_next) {
				if (!s.x)
					continue
				if (--nlines <= 0)
					break
			}
		}
		s = set_nl(s)
		if (!s
		 || (last && s.time >= last.time))
			break
		wwidth -= s.x - first.x;
		indent = 0
	}
	return s
}

/* -- cut the tune into music lines -- */
function cut_tune(lwidth, indent) {
	var	s, s2, s3, i, xmin,
//fixme: not usable yet
//		pg_sav = {
//			leftmargin: cfmt.leftmargin,
//			rightmargin: cfmt.rightmargin,
//			pagewidth: cfmt.pagewidth,
//			scale: cfmt.scale
//		},
		s = tsfirst

	// take care of the voice subnames
	if (indent != 0) {
		i = set_indent()
		lwidth -= i;
		indent -= i;
	}

	/* adjust the line width according to the starting clef
	 * and key signature */
/*fixme: may change in the tune*/
	i = get_ck_width();
	lwidth -= i[0];
	indent += i[1]

	if (cfmt.custos && voice_tb.length == 1)
		lwidth -= 12

	/* if asked, count the measures and set the EOLNs */
	if (cfmt.barsperstaff) {
		i = cfmt.barsperstaff;
		for (s2 = s; s2; s2 = s2.ts_next) {
			if (s2.type != C.BAR
			 || !s2.bar_num
			 || --i > 0)
				continue
			s2.eoln = true;
			i = cfmt.barsperstaff
		}
	}

	/* cut at explicit end of line, checking the line width */
	xmin = indent;
	s2 = s
	for ( ; s; s = s.ts_next) {
//fixme: not usable yet
//		if (s.type == C.BLOCK) {
//			switch (s.subtype) {
//			case "leftmargin":
//			case "rightmargin":
//			case "pagescale":
//			case "pagewidth":
//			case "scale":
//			case "staffwidth":
//				set_format(s.subtype, s.param)
//				break
//			}
//			continue
//		}
		if (!s.seqst && !s.eoln)
			continue
		xmin += s.shrink
		if (xmin > lwidth) {		// overflow
			s2 = set_lines(s2, s, lwidth, indent)
		} else {
			if (!s.eoln)
				continue
			delete s.eoln

			// if eoln on a note or a rest,
			// check for a smaller duration in an other voice
			if (s.dur) {
				for (s3 = s.ts_next; s3; s3 = s3.ts_next) {
					if (s3.seqst
					 || s3.dur < s.dur)
						break
				}
				if (s3 && !s3.seqst)
					s2 = set_lines(s2, s, lwidth, indent)
				else
					s2 = set_nl(s)
			} else {
				s2 = set_nl(s)
			}
		}
		if (!s2)
			break

		// (s2 may be tsfirst - no ts_prev - when only one
		//  embedded info in the first line after the first K:)
		if (!s2.ts_prev) {
			delete s2.nl
			continue
		}
		xmin = s2.shrink;
		s = s2.ts_prev;		// don't miss an eoln
		indent = 0
	}

//fixme: not usable yet
//	// restore the page parameters at start of line
//	cfmt.leftmargin = pg_sav.leftmargin;
//	cfmt.rightmargin = pg_sav.rightmargin;
//	cfmt.pagewidth = pg_sav.pagewidth;
//	cfmt.scale = pg_sav.scale
}

/* -- set the y values of some symbols -- */
function set_yval(s) {
//fixme: staff_tb is not yet defined
//	var top = staff_tb[s.st].topbar
//	var bot = staff_tb[s.st].botbar
	switch (s.type) {
	case C.CLEF:
		if (s.second
		 || s.invis) {
//			s.ymx = s.ymn = (top + bot) / 2
			s.ymx = s.ymn = 12
			break
		}
		s.y = (s.clef_line - 1) * 6
		switch (s.clef_type) {
		default:			/* treble / perc */
			s.ymx = s.y + 28
			s.ymn = s.y - 14
			break
		case "c":
			s.ymx = s.y + 13
			s.ymn = s.y - 11
			break
		case "b":
			s.ymx = s.y + 7
			s.ymn = s.y - 12
			break
		}
		if (s.clef_small) {
			s.ymx -= 2;
			s.ymn += 2
		}
		if (s.ymx < 26)
			s.ymx = 26
		if (s.ymn > -1)
			s.ymn = -1
//		s.y += s.clef_line * 6
//		if (s.y > 0)
//			s.ymx += s.y
//		else if (s.y < 0)
//			s.ymn += s.y
		if (s.clef_octave) {
			if (s.clef_octave > 0)
				s.ymx += 12
			else
				s.ymn -= 12
		}
		break
	case C.KEY:
		if (s.k_sf > 2)
			s.ymx = 24 + 10
		else if (s.k_sf > 0)
			s.ymx = 24 + 6
		else
			s.ymx = 24 + 2;
		s.ymn = -2
		break
	default:
//		s.ymx = top + 2;
		s.ymx = 24 + 2;
		s.ymn = -2
		break
	}
}

// set the clefs (treble or bass) in a 'auto clef' sequence
// return the starting clef type
function set_auto_clef(st, s_start, clef_type_start) {
	var s, min, max, time, s2, s3;

	/* get the max and min pitches in the sequence */
	max = 12;					/* "F," */
	min = 20					/* "G" */
	for (s = s_start; s; s = s.ts_next) {
		if (s.type == C.STAVES && s != s_start)
			break
		if (s.st != st)
			continue
		if (s.type != C.NOTE) {
			if (s.type == C.CLEF) {
				if (s.clef_type != 'a')
					break
				unlksym(s)
			}
			continue
		}
		if (s.notes[0].pit < min)
			min = s.notes[0].pit
		else if (s.notes[s.nhd].pit > max)
			max = s.notes[s.nhd].pit
	}

	if (min >= 19					/* upper than 'F' */
	 || (min >= 13 && clef_type_start != 'b'))	/* or 'G,' */
		return 't'
	if (max <= 13					/* lower than 'G,' */
	 || (max <= 19 && clef_type_start != 't'))	/* or 'F' */
		return 'b'

	/* set clef changes */
	if (clef_type_start == 'a') {
		if ((max + min) / 2 >= 16)
			clef_type_start = 't'
		else
			clef_type_start = 'b'
	}
	var	clef_type = clef_type_start,
		s_last = s,
		s_last_chg = null
	for (s = s_start; s != s_last; s = s.ts_next) {
		if (s.type == C.STAVES && s != s_start)
			break
		if (s.st != st || s.type != C.NOTE)
			continue

		/* check if a clef change may occur */
		time = s.time
		if (clef_type == 't') {
			if (s.notes[0].pit > 12		/* F, */
			 || s.notes[s.nhd].pit > 20) {	/* G */
				if (s.notes[0].pit > 20)
					s_last_chg = s
				continue
			}
			s2 = s.ts_prev
			if (s2
			 && s2.time == time
			 && s2.st == st
			 && s2.type == C.NOTE
			 && s2.notes[0].pit >= 19)	/* F */
				continue
			s2 = s.ts_next
			if (s2
			 && s2.st == st
			 && s2.time == time
			 && s2.type == C.NOTE
			 && s2.notes[0].pit >= 19)	/* F */
				continue
		} else {
			if (s.notes[0].pit < 12		/* F, */
			 || s.notes[s.nhd].pit < 20) {	/* G */
				if (s.notes[s.nhd].pit < 12)
					s_last_chg = s
				continue
			}
			s2 = s.ts_prev
			if (s2
			 && s2.time == time
			 && s2.st == st
			 && s2.type == C.NOTE
			 && s2.notes[0].pit <= 13)	/* G, */
				continue
			s2 = s.ts_next
			if (s2
			 && s2.st == st
			 && s2.time == time
			 && s2.type == C.NOTE
			 && s2.notes[0].pit <= 13)	/* G, */
				continue
		}

		/* if first change, change the starting clef */
		if (!s_last_chg) {
			clef_type = clef_type_start =
					clef_type == 't' ? 'b' : 't';
			s_last_chg = s
			continue
		}

		/* go backwards and search where to insert a clef change */
		s3 = s
		for (s2 = s.ts_prev; s2 != s_last_chg; s2 = s2.ts_prev) {
			if (s2.st != st)
				continue
			if (s2.type == C.BAR
			 && s2.v == s.v) {
				s3 = s2
				break
			}
			if (s2.type != C.NOTE)
				continue

			/* have a 2nd choice on beam start */
			if (s2.beam_st
			 && !s2.p_v.second)
				s3 = s2
		}

		/* no change possible if no insert point */
		if (s3.time == s_last_chg.time) {
			s_last_chg = s
			continue
		}
		s_last_chg = s;

		/* insert a clef change */
		clef_type = clef_type == 't' ? 'b' : 't';
		s2 = insert_clef(s3, clef_type, clef_type == "t" ? 2 : 4);
		s2.clef_auto = true
//		s3.prev.st = st
	}
	return clef_type_start
}

/* set the clefs */
/* this function is called once at start of tune generation */
/*
 * global variables:
 *	- staff_tb[st].clef = clefs at start of line (here, start of tune)
 *				(created here, updated on clef draw)
 *	- voice_tb[v].clef = clefs at end of generation
 *				(created on voice creation, updated here)
 */
function set_clefs() {
	var	s, s2, st, v, p_voice, g, new_type, new_line, p_staff, pit,
		staff_clef = new Array(nstaff),	// st -> { clef, autoclef }
		sy = cur_sy,
		mid = []

	// create the staff table
	staff_tb = new Array(nstaff)
	for (st = 0; st <= nstaff; st++) {
		staff_clef[st] = {
			autoclef: true
		}
		staff_tb[st] = {
			output: "",
			sc_out: ""
		}
	}

	// set the starting clefs of the staves
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (sy.voices[v].range < 0)
			continue
		st = sy.voices[v].st
		if (!sy.voices[v].second) {		// main voices
			if (p_voice.staffnonote != undefined)
				sy.staves[st].staffnonote = p_voice.staffnonote
			if (p_voice.staffscale)
				sy.staves[st].staffscale = p_voice.staffscale
			if (sy.voices[v].sep)
				sy.staves[st].sep = sy.voices[v].sep
			if (sy.voices[v].maxsep)
				sy.staves[st].maxsep = sy.voices[v].maxsep;
		}
		if (!sy.voices[v].second
		 && !p_voice.clef.clef_auto)
			staff_clef[st].autoclef = false
	}
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (sy.voices[v].range < 0
		 || sy.voices[v].second)		// main voices
			continue
		st = sy.voices[v].st;
		s = p_voice.clef
		if (staff_clef[st].autoclef) {
			s.clef_type = set_auto_clef(st,
						tsfirst,
						s.clef_type);
			s.clef_line = s.clef_type == 't' ? 2 : 4
		}
		staff_clef[st].clef = staff_tb[st].clef = s
	}
	for (st = 0; st <= sy.nstaff; st++)
		mid[st] = (sy.staves[st].stafflines.length - 1) * 3

	for (s = tsfirst; s; s = s.ts_next) {
		if (s.repeat_n)
			set_repeat(s)

		switch (s.type) {
		case C.STAVES:
			sy = s.sy
			for (st = 0; st <= nstaff; st++)
				staff_clef[st].autoclef = true
			for (v = 0; v < voice_tb.length; v++) {
				if (sy.voices[v].range < 0)
					continue
				p_voice = voice_tb[v];
				st = sy.voices[v].st
				if (!sy.voices[v].second) {
					if (p_voice.staffnonote != undefined)
						sy.staves[st].staffnonote = p_voice.staffnonote
					if (p_voice.staffscale)
						sy.staves[st].staffscale = p_voice.staffscale
					if (sy.voices[v].sep)
						sy.staves[st].sep = sy.voices[v].sep
					if (sy.voices[v].maxsep)
						sy.staves[st].maxsep = sy.voices[v].maxsep
				}
				s2 = p_voice.clef
				if (!s2.clef_auto)
					staff_clef[st].autoclef = false
			}
			for (st = 0; st <= sy.nstaff; st++)
				mid[st] = (sy.staves[st].stafflines.length - 1) * 3
			for (v = 0; v < voice_tb.length; v++) {
				if (sy.voices[v].range < 0
				 || sy.voices[v].second)	// main voices
					continue
				p_voice = voice_tb[v];
				st = sy.voices[v].st;
				s2 = p_voice.clef
				if (s2.clef_auto) {
//fixme: the staff may have other voices with explicit clefs...
//					if (!staff_clef[st].autoclef)
//						???
					new_type = set_auto_clef(st, s,
						staff_clef[st].clef ?
							staff_clef[st].clef.clef_type :
							'a');
					new_line = new_type == 't' ? 2 : 4
				} else {
					new_type = s2.clef_type;
					new_line = s2.clef_line
				}
				if (!staff_clef[st].clef) {	// new staff
					if (s2.clef_auto) {
						if (s2.type != 'a')
							p_voice.clef =
								clone(p_voice.clef);
						p_voice.clef.clef_type = new_type;
						p_voice.clef.clef_line = new_line
					}
					staff_tb[st].clef =
						staff_clef[st].clef = p_voice.clef
					continue
				}
								// old staff
				if (new_type == staff_clef[st].clef.clef_type
				 && new_line == staff_clef[st].clef.clef_line)
					continue
				g = s.ts_next
				while (g && (g.v != v || g.st != st))
					g = g.ts_next
				if (!g)				// ??
					continue
				if (g.type != C.CLEF) {
					g = insert_clef(g, new_type, new_line)
					if (s2.clef_auto)
						g.clef_auto = true
				}
				staff_clef[st].clef = p_voice.clef = g
			}
			continue
		default:
			s.mid = mid[s.st]
			continue
		case C.CLEF:
			break
		}

		if (s.clef_type == 'a') {
			s.clef_type = set_auto_clef(s.st,
						s.ts_next,
						staff_clef[s.st].clef.clef_type);
			s.clef_line = s.clef_type == 't' ? 2 : 4
		}

		p_voice = s.p_v;
		p_voice.clef = s
		if (s.second) {
/*fixme:%%staves:can this happen?*/
//			if (!s.prev)
//				break
			unlksym(s)
			continue
		}
		st = s.st
// may have been inserted on %%staves
//		if (s.clef_auto) {
//			unlksym(s)
//			continue
//		}

		if (staff_clef[st].clef) {
			if (s.clef_type == staff_clef[st].clef.clef_type
			 && s.clef_line == staff_clef[st].clef.clef_line) {
//				unlksym(s)
				continue
			}
		} else {

			// the voice moved to a new staff with a forced clef
			staff_tb[st].clef = s
		}
		staff_clef[st].clef = s
	}

	/* set a pitch to the symbols of voices with no note */
	sy = cur_sy
	for (v = 0; v < voice_tb.length; v++) {
		if (sy.voices[v].range < 0)
			continue
		s2 = voice_tb[v].sym
		if (!s2 || s2.notes[0].pit != 127)
			continue
		st = sy.voices[v].st
		switch (staff_tb[st].clef.clef_type) {
		default:
			pit = 22		/* 'B' */
			break
		case "c":
			pit = 16		/* 'C' */
			break
		case "b":
			pit = 10		/* 'D,' */
			break
		}
		for (s = s2; s; s = s.next)
			s.notes[0].pit = pit
	}
}

/* set the pitch of the notes according to the clefs
 * and set the vertical offset of the symbols */
/* this function is called at start of tune generation and
 * then, once per music line up to the old sequence */

var delta_tb = {
	t: 0 - 2 * 2,
	c: 6 - 3 * 2,
	b: 12 - 4 * 2,
	p: 0 - 3 * 2
}

/* upper and lower space needed by rests */
var rest_sp = [
	[18, 18],
	[12, 18],
	[12, 12],
	[0, 12],
	[6, 8],
	[10, 10],			/* crotchet */
	[6, 4],
	[10, 0],
	[10, 4],
	[10, 10]
]

function set_pitch(last_s) {
	var	s, s2, g, st, delta, m, pitch, note,
		dur = C.BLEN,
		staff_delta = new Array(nstaff),
		sy = cur_sy

	// set the starting clefs of the staves
	for (st = 0; st <= nstaff; st++) {
		s = staff_tb[st].clef;
		staff_delta[st] = delta_tb[s.clef_type] + s.clef_line * 2
		if (s.clefpit)
			staff_delta[st] += s.clefpit
		if (cfmt.sound) {
			if (s.clef_octave && !s.clef_oct_transp)
				staff_delta[st] += s.clef_octave
		} else {
			if (s.clef_oct_transp)
				staff_delta[st] -= s.clef_octave
		}
	}

	for (s = tsfirst; s != last_s; s = s.ts_next) {
		st = s.st
		switch (s.type) {
		case C.CLEF:
			staff_delta[st] = delta_tb[s.clef_type] +
						s.clef_line * 2
			if (s.clefpit)
				staff_delta[st] += s.clefpit
			if (cfmt.sound) {
				if (s.clef_octave && !s.clef_oct_transp)
					staff_delta[st] += s.clef_octave
			} else {
				if (s.clef_oct_transp)
					staff_delta[st] -= s.clef_octave
			}
			set_yval(s)
			break
		case C.GRACE:
			for (g = s.extra; g; g = g.next) {
				delta = staff_delta[g.st]
				if (delta != 0
				 && !s.p_v.key.k_drum) {
					for (m = 0; m <= g.nhd; m++) {
						note = g.notes[m];
						note.pit += delta
					}
				}
				g.ymn = 3 * (g.notes[0].pit - 18) - 2;
				g.ymx = 3 * (g.notes[g.nhd].pit - 18) + 2
			}
			set_yval(s)
			break
		case C.KEY:
			s.k_y_clef = staff_delta[st] /* keep the y delta */
			/* fall thru */
		default:
			set_yval(s)
			break
		case C.MREST:
			if (s.invis)
				break
			s.y = 12;
			s.ymx = 24 + 15;
			s.ymn = -2
			break
		case C.REST:
			if (voice_tb.length == 1) {
				s.y = 12;		/* rest single voice */
//				s.ymx = 12 + 8;
//				s.ymn = 12 - 8
				s.ymx = 24;
				s.ymn = 0
				break
			}
			// fall thru
		case C.NOTE:
			delta = staff_delta[st]
			if (delta != 0
			 && !s.p_v.key.k_drum) {
				for (m = s.nhd; m >= 0; m--)
					s.notes[m].pit += delta
			}
			if (s.type == C.NOTE) {
				s.ymx = 3 * (s.notes[s.nhd].pit - 18) + 4;
				s.ymn = 3 * (s.notes[0].pit - 18) - 4;
			} else {
				s.y = (((s.notes[0].pit - 18) / 2) | 0) * 6;
				s.ymx = s.y + rest_sp[5 - s.nflags][0];
				s.ymn = s.y - rest_sp[5 - s.nflags][1]
			}
			if (s.dur < dur)
				dur = s.dur
			break
		}
	}
	if (!last_s)
		smallest_duration = dur
}

/* -- set the stem direction when multi-voices -- */
/* this function is called only once per tune */
function set_stem_dir() {
	var	t, u, i, st, rvoice, v,
		v_st,			// voice -> staff 1 & 2
		st_v, vobj,		// staff -> (v, ymx, ymn)*
		v_st_tb,		// array of v_st
		st_v_tb = [],		// array of st_v
		s = tsfirst,
		sy = cur_sy,
		nst = sy.nstaff

	while (s) {
		for (st = 0; st <= nst; st++)
			st_v_tb[st] = []
		v_st_tb = []

		/* get the max/min offsets in the delta time */
/*fixme: the stem height is not calculated yet*/
		for (u = s; u; u = u.ts_next) {
			if (u.type == C.BAR)
				break;
			if (u.type == C.STAVES) {
				if (u != s)
					break
				sy = s.sy
				for (st = nst; st <= sy.nstaff; st++)
					st_v_tb[st] = []
				nst = sy.nstaff
				continue
			}
			if ((u.type != C.NOTE && u.type != C.REST)
			 || u.invis)
				continue
			st = u.st;
/*fixme:test*/
if (st > nst) {
	var msg = "*** fatal set_stem_dir(): bad staff number " + st +
			" max " + nst;
	error(2, null, msg);
	throw new Error(msg)
}
			v = u.v;
			v_st = v_st_tb[v]
			if (!v_st) {
				v_st = {
					st1: -1,
					st2: -1
				}
				v_st_tb[v] = v_st
			}
			if (v_st.st1 < 0) {
				v_st.st1 = st
			} else if (v_st.st1 != st) {
				if (st > v_st.st1) {
					if (st > v_st.st2)
						v_st.st2 = st
				} else {
					if (v_st.st1 > v_st.st2)
						v_st.st2 = v_st.st1;
					v_st.st1 = st
				}
			}
			st_v = st_v_tb[st];
			rvoice = sy.voices[v].range;
			for (i = st_v.length; --i >= 0; ) {
				vobj = st_v[i]
				if (vobj.v == rvoice)
					break
			}
			if (i < 0) {
				vobj = {
					v: rvoice,
					ymx: 0,
					ymn: 24
				}
				for (i = 0; i < st_v.length; i++) {
					if (rvoice < st_v[i].v) {
						st_v.splice(i, 0, vobj)
						break
					}
				}
				if (i == st_v.length)
					st_v.push(vobj)
			}

			if (u.type != C.NOTE)
				continue
			if (u.ymx > vobj.ymx)
				vobj.ymx = u.ymx
			if (u.ymn < vobj.ymn)
				vobj.ymn = u.ymn

			if (u.xstem) {
				if (u.ts_prev.st != st - 1
				 || u.ts_prev.type != C.NOTE) {
					error(1, s, "Bad !xstem!");
					u.xstem = false
/*fixme:nflags KO*/
				} else {
					u.ts_prev.multi = 1;
					u.multi = 1;
					u.stemless = true
				}
			}
		}

		for ( ; s != u; s = s.ts_next) {
			if (s.multi)
				continue
			switch (s.type) {
			default:
				continue
			case C.REST:
				// handle %%voicecombine 0
				if ((s.combine != undefined && s.combine < 0)
				 || !s.ts_next || s.ts_next.type != C.REST
				 || s.ts_next.st != s.st
				 || s.time != s.ts_next.time
				 || s.dur != s.ts_next.dur
				 || s.invis)
					break
				unlksym(s.ts_next)
				break
			case C.NOTE:
			case C.GRACE:
				break
			}

			st = s.st;
			v = s.v;
			v_st = v_st_tb[v];
			st_v = st_v_tb[st]
			if (v_st && v_st.st2 >= 0) {
				if (st == v_st.st1)
					s.multi = -1
				else if (st == v_st.st2)
					s.multi = 1
				continue
			}
			if (st_v.length <= 1) { /* voice alone on the staff */
//				if (s.multi)
//					continue
/*fixme:could be done in set_var()*/
				if (s.floating)
					s.multi = st == voice_tb[v].st ? -1 : 1
				continue
			}
			rvoice = sy.voices[v].range
			for (i = st_v.length; --i >= 0; ) {
				if (st_v[i].v == rvoice)
					break
			}
			if (i < 0)
				continue		/* voice ignored */
			if (i == st_v.length - 1) {
				s.multi = -1	/* last voice */
			} else {
				s.multi = 1	/* first voice(s) */

				/* if 3 voices, and vertical space enough,
				 * have stems down for the middle voice */
				if (i != 0 && i + 2 == st_v.length) {
					if (st_v[i].ymn - cfmt.stemheight
							> st_v[i + 1].ymx)
						s.multi = -1;

					/* special case for unison */
					t = s.ts_next
//fixme: pb with ../lacerda/evol-7.5.5.abc
					if (s.ts_prev
					 && s.ts_prev.time == s.time
					 && s.ts_prev.st == s.st
					 && s.notes[s.nhd].pit == s.ts_prev.notes[0].pit
					 && s.beam_st
					 && s.beam_end
					 && (!t
					  || t.st != s.st
					  || t.time != s.time))
						s.multi = -1
				}
			}
		}
		while (s && s.type == C.BAR)
			s = s.ts_next
	}
}

/* -- adjust the offset of the rests when many voices -- */
/* this function is called only once per tune */
function set_rest_offset() {
	var	s, s2, v, end_time, not_alone, v_s, y, ymax, ymin,
		shift, dots, dx,
		v_s_tb = [],
		sy = cur_sy

	for (s = tsfirst; s; s = s.ts_next) {
		if (s.invis)
			continue
		if (s.type == C.STAVES)
			sy = s.sy
		if (!s.dur)
			continue
		v_s = v_s_tb[s.v]
		if (!v_s) {
			v_s = {}
			v_s_tb[s.v] = v_s
		}
		v_s.s = s;
		v_s.st = s.st;
		v_s.end_time = s.time + s.dur
		if (s.type != C.REST)
			continue

		/* check if clash with previous symbols */
		ymin = -127;
		ymax = 127;
		not_alone = dots = false
		for (v = 0; v <= v_s_tb.length; v++) {
			v_s = v_s_tb[v]
			if (!v_s || !v_s.s
			 || v_s.st != s.st
			 || v == s.v)
				continue
			if (v_s.end_time <= s.time)
				continue
			not_alone = true;
			s2 = v_s.s
			if (sy.voices[v].range < sy.voices[s.v].range) {
				if (s2.time == s.time) {
					if (s2.ymn < ymax) {
						ymax = s2.ymn
						if (s2.dots)
							dots = true
					}
				} else {
					if (s2.y < ymax)
						ymax = s2.y
				}
			} else {
				if (s2.time == s.time) {
					if (s2.ymx > ymin) {
						ymin = s2.ymx
						if (s2.dots)
							dots = true
					}
				} else {
					if (s2.y > ymin)
						ymin = s2.y
				}
			}
		}

		/* check if clash with next symbols */
		end_time = s.time + s.dur
		for (s2 = s.ts_next; s2; s2 = s2.ts_next) {
			if (s2.time >= end_time)
				break
			if (s2.st != s.st
//			 || (s2.type != C.NOTE && s2.type != C.REST)
			 || !s2.dur
			 || s2.invis)
				continue
			not_alone = true
			if (sy.voices[s2.v].range < sy.voices[s.v].range) {
				if (s2.time == s.time) {
					if (s2.ymn < ymax) {
						ymax = s2.ymn
						if (s2.dots)
							dots = true
					}
				} else {
					if (s2.y < ymax)
						ymax = s2.y
				}
			} else {
				if (s2.time == s.time) {
					if (s2.ymx > ymin) {
						ymin = s2.ymx
						if (s2.dots)
							dots = true
					}
				} else {
					if (s2.y > ymin)
						ymin = s2.y
				}
			}
		}
		if (!not_alone) {
			s.y = 12;
			s.ymx = 24;
			s.ymn = 0
			continue
		}
		if (ymax == 127 && s.y < 12) {
			shift = 12 - s.y
			s.y += shift;
			s.ymx += shift;
			s.ymn += shift
		}
		if (ymin == -127 && s.y > 12) {
			shift = s.y - 12
			s.y -= shift;
			s.ymx -= shift;
			s.ymn -= shift
		}
		shift = ymax - s.ymx
		if (shift < 0) {
			shift = Math.ceil(-shift / 6) * 6
			if (s.ymn - shift >= ymin) {
				s.y -= shift;
				s.ymx -= shift;
				s.ymn -= shift
				continue
			}
			dx = dots ? 15 : 10;
			s.notes[0].shhd = dx;
			s.xmx = dx
			continue
		}
		shift = ymin - s.ymn
		if (shift > 0) {
			shift = Math.ceil(shift / 6) * 6
			if (s.ymx + shift <= ymax) {
				s.y += shift;
				s.ymx += shift;
				s.ymn += shift
				continue
			}
			dx = dots ? 15 : 10;
			s.notes[0].shhd = dx;
			s.xmx = dx
			continue
		}
	}
}

/* -- create a starting symbol -- */
function new_sym(type, p_voice,
			last_s) {	/* symbol at same time */
	var s = {
		type: type,
		fname: last_s.fname,
//		istart: last_s.istart,
//		iend: last_s.iend,
		v: p_voice.v,
		p_v: p_voice,
		st: p_voice.st,
		time: last_s.time,
		next: p_voice.last_sym.next
	}
	if (s.next)
		s.next.prev = s;
	p_voice.last_sym.next = s;
	s.prev = p_voice.last_sym;
	p_voice.last_sym = s;

	lktsym(s, last_s)
	if (s.ts_prev.type != type)
		s.seqst = true
	if (last_s.type == type && s.v != last_s.v) {
		delete last_s.seqst;
		last_s.shrink = 0
	}
	return s
}

/* -- init the symbols at start of a music line -- */
function init_music_line() {
	var	p_voice, s, s2, last_s, v, st,
		nv = voice_tb.length

	/* initialize the voices */
	for (v = 0; v < nv; v++) {
		if (cur_sy.voices[v].range < 0)
			continue
		p_voice = voice_tb[v];
		p_voice.second = cur_sy.voices[v].second;
		p_voice.last_sym = p_voice.sym;

		/* move the voice to a printed staff */
		st = cur_sy.voices[v].st
		while (st < nstaff && !cur_sy.st_print[st])
			st++;
		p_voice.st = st
	}

	/* add a clef at start of the main voices */
	last_s = tsfirst
	while (last_s.type == C.CLEF) {		/* move the starting clefs */
		v = last_s.v
		if (cur_sy.voices[v].range >= 0
		 && !cur_sy.voices[v].second) {
			delete last_s.clef_small;	/* normal clef */
			p_voice = last_s.p_v;
			p_voice.last_sym = p_voice.sym = last_s
		}
		last_s = last_s.ts_next
	}
	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v]
		if (p_voice.sym && p_voice.sym.type == C.CLEF)
			continue
		if (cur_sy.voices[v].range < 0
		 || (cur_sy.voices[v].second
		  && !p_voice.bar_start))	// needed for correct linkage
			continue
		st = cur_sy.voices[v].st
		if (!staff_tb[st]
		 || !staff_tb[st].clef)
			continue
		s = clone(staff_tb[st].clef);
		s.v = v;
		s.p_v = p_voice;
		s.st = st;
		s.time = tsfirst.time;
		s.prev = null;
		s.next = p_voice.sym
		if (s.next)
			s.next.prev = s;
		p_voice.sym = s;
		p_voice.last_sym = s;
		s.ts_next = last_s;
		if (last_s)
			s.ts_prev = last_s.ts_prev
		else
			s.ts_prev = null
		if (!s.ts_prev) {
			tsfirst = s;
			s.seqst = true
		} else {
			s.ts_prev.ts_next = s
			delete s.seqst
		}
		if (last_s) {
			last_s.ts_prev = s
			if (last_s.type == C.CLEF)
				delete last_s.seqst
		}
		delete s.clef_small;
		s.second = cur_sy.voices[v].second
// (fixme: needed for sample5 X:3 Fugue & staffnonote.xhtml)
		if (!cur_sy.st_print[st])
			s.invis = true
	}

	/* add keysig */
	for (v = 0; v < nv; v++) {
		if (cur_sy.voices[v].range < 0
		 || cur_sy.voices[v].second
		 || !cur_sy.st_print[cur_sy.voices[v].st])
			continue
		p_voice = voice_tb[v]
		if (last_s && last_s.v == v && last_s.type == C.KEY) {
			p_voice.last_sym = last_s;
			last_s.k_old_sf = last_s.k_sf;	// no key cancel
			last_s = last_s.ts_next
			continue
		}
		s2 = p_voice.key
		if (s2.k_sf || s2.k_a_acc) {
			s = new_sym(C.KEY, p_voice, last_s);
			s.k_sf = s2.k_sf;
			s.k_old_sf = s2.k_sf;	// no key cancel
			s.k_none = s2.k_none;
			s.k_a_acc = s2.k_a_acc;
			s.istart = s2.istart;
			s.iend = s2.iend
			if (s2.k_bagpipe) {
				s.k_bagpipe = s2.k_bagpipe
				if (s.k_bagpipe == 'p')
					s.k_old_sf = 3	/* "A" -> "D" => G natural */
			}
		}
	}

	/* add time signature (meter) if needed */
	if (insert_meter & 1) {
		for (v = 0; v < nv; v++) {
			p_voice = voice_tb[v];
			s2 = p_voice.meter
			if (cur_sy.voices[v].range < 0
			 || cur_sy.voices[v].second
			 || !cur_sy.st_print[cur_sy.voices[v].st]
			 || s2.a_meter.length == 0)
				continue
			if (last_s && last_s.v == v && last_s.type == C.METER) {
				p_voice.last_sym = last_s;
				last_s = last_s.ts_next
				continue
			}
			s = new_sym(C.METER, p_voice, last_s);
			s.istart = s2.istart;
			s.iend = s2.iend;
			s.wmeasure = s2.wmeasure;
			s.a_meter = s2.a_meter
		}
		insert_meter &= ~1		// no meter any more
	}

	/* add bar if needed (for repeat bracket) */
	for (v = 0; v < nv; v++) {

		// if bar already, keep it in sequence
		p_voice = voice_tb[v];
		if (last_s && last_s.v == v && last_s.type == C.BAR) {
			p_voice.last_sym = last_s;
			last_s = last_s.ts_next
			continue
		}

		s2 = p_voice.bar_start
		if (!s2)
			continue
		p_voice.bar_start = null
		if (cur_sy.voices[v].range < 0
		 || !cur_sy.st_print[cur_sy.voices[v].st])
			continue

		s2.next = p_voice.last_sym.next
		if (s2.next)
			s2.next.prev = s2;
		p_voice.last_sym.next = s2;
		s2.prev = p_voice.last_sym;
		p_voice.last_sym = s2;
		lktsym(s2, last_s);
		s2.time = tsfirst.time
		if (s2.ts_prev.type != s2.type)
			s2.seqst = true;
		if (last_s && last_s.type == s2.type && s2.v != last_s.v) {
			delete last_s.seqst;
			last_s.shrink = 0
		}
	}

	/* if initialization of a new music line, compute the spacing,
	 * including the first (old) sequence */
	set_pitch(last_s);
	for (s = last_s; s; s = s.ts_next) {
		if (s.seqst) {
			for (s = s.ts_next; s; s = s.ts_next)
				if (s.seqst)
					break
			break
		}
	}
	set_allsymwidth(s)	/* set the width of the added symbols */
}

/* -- set a pitch in all symbols and the start/stop of the beams -- */
function set_words(p_voice) {
	var	s, s2, nflags, lastnote,
		start_flag = true,
		pitch = 127			/* no note */

	for (s = p_voice.sym; s; s = s.next) {
		if (s.type == C.NOTE) {
			pitch = s.notes[0].pit
			break
		}
	}
	for (s = p_voice.sym; s; s = s.next) {
		switch (s.type) {
		case C.MREST:
			start_flag = true
			break
		case C.BAR:
			if (!s.beam_on)
				start_flag = true
			if (!s.next && s.prev
//			 && s.prev.type == C.NOTE
//			 && s.prev.dur >= C.BLEN * 2)
			 && s.prev.head == C.OVALBARS)
				s.prev.head = C.SQUARE
			break
		case C.NOTE:
		case C.REST:
			if (s.trem2)
				break
			nflags = s.nflags

			if (s.ntrem)
				nflags += s.ntrem
			if (s.type == C.REST && s.beam_end) {
				s.beam_end = false;
				start_flag = true
			}
			if (start_flag
			 || nflags <= 0) {
				if (lastnote) {
					lastnote.beam_end = true;
					lastnote = null
				}
				if (nflags <= 0) {
					s.beam_st = true;
					s.beam_end = true
				} else if (s.type == C.NOTE) {
					s.beam_st = true;
					start_flag = false
				}
			}
			if (s.beam_end)
				start_flag = true
			if (s.type == C.NOTE)
				lastnote = s
			break
		}
		if (s.type == C.NOTE) {
			if (s.nhd != 0)
				sort_pitch(s);
			pitch = s.notes[0].pit
//			if (s.prev
//			 && s.prev.type != C.NOTE) {
//				s.prev.notes[0].pit = (s.prev.notes[0].pit
//						    + pitch) / 2
			for (s2 = s.prev; s2; s2 = s2.prev) {
				if (s2.type != C.REST)
					break
				s2.notes[0].pit = pitch
			}
		} else {
			if (!s.notes) {
				s.notes = []
				s.notes[0] = {}
				s.nhd = 0
			}
			s.notes[0].pit = pitch
		}
	}
	if (lastnote)
		lastnote.beam_end = true
}

/* -- set the end of the repeat sequences -- */
function set_rb(p_voice) {
	var	s2, mx, n,
		s = p_voice.sym

	while (s) {
		if (s.type != C.BAR || !s.rbstart || s.norepbra) {
			s = s.next
			continue
		}

		mx = cfmt.rbmax

		/* if 1st repeat sequence, compute the bracket length */
		if (s.text && s.text[0] == '1') {
			n = 0;
			s2 = null
			for (s = s.next; s; s = s.next) {
				if (s.type != C.BAR)
					continue
				n++
				if (s.rbstop) {
					if (n <= cfmt.rbmax) {
						mx = n;
						s2 = null
					}
					break
				}
				if (n == cfmt.rbmin)
					s2 = s
			}
			if (s2) {
				s2.rbstop = 1;
				mx = cfmt.rbmin
			}
		}
		while (s) {

			/* check repbra shifts (:| | |2 in 2nd staves) */
			if (s.rbstart != 2) {
				s = s.next
				if (!s)
					break
				if (s.rbstart != 2) {
					s = s.next
					if (!s)
						break
					if (s.rbstart != 2)
						break
				}
			}
			n = 0;
			s2 = null
			for (s = s.next; s; s = s.next) {
				if (s.type != C.BAR)
					continue
				n++
				if (s.rbstop)
					break
				if (!s.next)
					s.rbstop = 2	// right repeat with end
				else if (n == mx)
					s.rbstop = 1	// right repeat without end
			}
		}
	}
}

/* -- initialize the generator -- */
/* this function is called only once per tune  */

var delpit = [0, -7, -14, 0]

function set_global() {
	var p_voice, st, v, nv, sy

	/* get the max number of staves */
	sy = cur_sy;
	st = sy.nstaff;
//	sy.st_print = new Uint8Array(sy.staves.length)
	while (1) {
		sy = sy.next
		if (!sy)
			break
//		sy.st_print = new Uint8Array(sy.staves.length)
		if (sy.nstaff > st)
			st = sy.nstaff
	}
	nstaff = st;

	/* set the pitches, the words (beams) and the repeat brackets */
	nv = voice_tb.length
	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v];
		set_words(p_voice)
// (test removed because v.second may change after %%staves)
//		if (!p_voice.second && !p_voice.norepbra)
			set_rb(p_voice)
	}

	/* set the staff of the floating voices */
	set_float();

	// set the clefs and adjust the pitches of all symbol
	set_clefs();
	set_pitch(null)
}

/* -- return the left indentation of the staves -- */
function set_indent(first) {
	var	st, v, w, p_voice, p, i, j, font,
		nv = voice_tb.length,
		maxw = 0

	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v]
		if (cur_sy.voices[v].range < 0)
			continue
		st = cur_sy.voices[v].st
//		if (!cur_sy.st_print[st])
//			continue
		p = ((first || p_voice.new_name) && p_voice.nm) ?
			p_voice.nm : p_voice.snm
		if (!p)
			continue
		if (!font) {
			font = get_font("voice");
			set_font(font);
		}
		i = 0
		while (1) {
			j = p.indexOf("\\n", i)
			if (j < 0)
				w = strwh(p.slice(i))
			else
				w = strwh(p.slice(i, j))
			w = w[0]
			if (w > maxw)
				maxw = w
			if (j < 0)
				break
			i = j + 1
		}
	}
	if (font)
		maxw += 4 * cwid(' ') * font.swfac;

	w = .5				// (width of left bar)
	for (st = 0; st <= cur_sy.nstaff; st++) {
		if (cur_sy.staves[st].flags
				& (OPEN_BRACE2 | OPEN_BRACKET2)) {
			w = 12
			break
		}
		if (cur_sy.staves[st].flags & (OPEN_BRACE | OPEN_BRACKET))
			w = 6
	}
	maxw += w

	if (first)			// if %%indent
		maxw += cfmt.indent
	return maxw
}

/* -- decide on beams and on stem directions -- */
/* this routine is called only once per tune */
function set_beams(sym) {
	var	s, t, g, beam, s_opp, dy, avg, n, m, mid_p, pu, pd,
		laststem = -1

	for (s = sym; s; s = s.next) {
		if (s.type != C.NOTE) {
			if (s.type != C.GRACE)
				continue
			g = s.extra
			if (g.stem == 2) {	/* opposite gstem direction */
				s_opp = s
				continue
			}
			if (!s.stem
			 && (s.stem = s.multi) == 0)
				s.stem = 1
			for (; g; g = g.next) {
				g.stem = s.stem;
				g.multi = s.multi
			}
			continue
		}

		if (!s.stem			/* if not explicitly set */
		 && (s.stem = s.multi) == 0) { /* and alone on the staff */
			mid_p = s.mid / 3 + 18

			/* notes in a beam have the same stem direction */
			if (beam) {
				s.stem = laststem
			} else if (s.beam_st && !s.beam_end) {	// beam start
				beam = true;
				pu = s.notes[s.nhd].pit;
				pd = s.notes[0].pit
				for (g = s.next; g; g = g.next) {
					if (g.type != C.NOTE)
						continue
					if (g.stem || g.multi) {
						s.stem = g.stem || g.multi
						break
					}
					if (g.notes[g.nhd].pit > pu)
						pu = g.notes[g.nhd].pit
					if (g.notes[0].pit < pd)
						pd = g.notes[0].pit
					if (g.beam_end)
						break
				}
				if (g.beam_end) {
					if ((pu + pd) / 2 < mid_p) {
						s.stem = 1
					} else if ((pu + pd) / 2 > mid_p) {
						s.stem = -1
					} else {
//--fixme: equal: check all notes of the beam
						if (cfmt.bstemdown)
							s.stem = -1
					}
				}
				if (!s.stem)
					s.stem = laststem
			} else {				// no beam
				n = (s.notes[s.nhd].pit + s.notes[0].pit) / 2
				if (n == mid_p) {
					n = 0
					for (m = 0; m <= s.nhd; m++)
						n += s.notes[m].pit;
					n /= (s.nhd + 1)
				}
//				s.stem = n < mid_p ? 1 : -1
				if (n < mid_p)
					s.stem = 1
				else if (n > mid_p)
					s.stem = -1
				else if (cfmt.bstemdown)
					s.stem = -1
				else
					s.stem = laststem
			}
		} else {			/* stem set by set_stem_dir */
			if (s.beam_st && !s.beam_end)
				beam = true
		}
		if (s.beam_end)
			beam = false;
		laststem = s.stem;

		if (s_opp) {			/* opposite gstem direction */
			for (g = s_opp.extra; g; g = g.next)
				g.stem = -laststem;
			s_opp.stem = -laststem;
			s_opp = null
		}
	}
}

// check if there may be one head for unison when voice overlap
function same_head(s1, s2) {
	var i1, i2, l1, l2, head, i11, i12, i21, i22, sh1, sh2

	if (s1.shiftunison && s1.shiftunison >= 3)
		return false
	if ((l1 = s1.dur) >= C.BLEN)
		return false
	if ((l2 = s2.dur) >= C.BLEN)
		return false
	if (s1.stemless && s2.stemless)
		return false
	if (s1.dots != s2.dots) {
		if ((s1.shiftunison && (s1.shiftunison & 1))
		 || s1.dots * s2.dots != 0)
			return false
	}
	if (s1.stem * s2.stem > 0)
		return false

	/* check if a common unison */
	i1 = i2 = 0
	if (s1.notes[0].pit > s2.notes[0].pit) {
//fixme:dots
		if (s1.stem < 0)
			return false
		while (s2.notes[i2].pit != s1.notes[0].pit) {
			if (++i2 > s2.nhd)
				return false
		}
	} else if (s1.notes[0].pit < s2.notes[0].pit) {
//fixme:dots
		if (s2.stem < 0)
			return false
		while (s2.notes[0].pit != s1.notes[i1].pit) {
			if (++i1 > s1.nhd)
				return false
		}
	}
	if (s2.notes[i2].acc != s1.notes[i1].acc)
		return false;
	i11 = i1;
	i21 = i2;
	sh1 = s1.notes[i1].shhd;
	sh2 = s2.notes[i2].shhd
	do {
//fixme:dots
		i1++;
		i2++
		if (i1 > s1.nhd) {
//fixme:dots
//			if (s1.notes[0].pit < s2.notes[0].pit)
//				return false
			break
		}
		if (i2 > s2.nhd) {
//fixme:dots
//			if (s1.notes[0].pit > s2.notes[0].pit)
//				return false
			break
		}
		if (s2.notes[i2].acc != s1.notes[i1].acc)
			return false
		if (sh1 < s1.notes[i1].shhd)
			sh1 = s1.notes[i1].shhd
		if (sh2 < s2.notes[i2].shhd)
			sh2 = s2.notes[i2].shhd
	} while (s2.notes[i2].pit == s1.notes[i1].pit)
//fixme:dots
	if (i1 <= s1.nhd) {
		if (i2 <= s2.nhd)
			return false
		if (s2.stem > 0)
			return false
	} else if (i2 <= s2.nhd) {
		if (s1.stem > 0)
			return false
	}
	i12 = i1;
	i22 = i2;

	head = 0
	if (l1 != l2) {
		if (l1 < l2) {
			l1 = l2;
			l2 = s1.dur
		}
		if (l1 < C.BLEN / 2) {
			if (s2.dots > 0)
				head = 2
			else if (s1.dots > 0)
				head = 1
		} else if (l2 < C.BLEN / 4) {	/* (l1 >= C.BLEN / 2) */
//			if ((s1.shiftunison && s1.shiftunison == 2)
//			 || s1.dots != s2.dots)
			if (s1.shiftunison && (s1.shiftunison & 2))
				return false
			head = s2.dur >= C.BLEN / 2 ? 2 : 1
		} else {
			return false
		}
	}
	if (head == 0)
		head = s1.p_v.scale < s2.p_v.scale ? 2 : 1
	if (head == 1) {
		for (i2 = i21; i2 < i22; i2++) {
			s2.notes[i2].invis = true
			delete s2.notes[i2].acc
		}
		for (i2 = 0; i2 <= s2.nhd; i2++)
			s2.notes[i2].shhd += sh1
	} else {
		for (i1 = i11; i1 < i12; i1++) {
			s1.notes[i1].invis = true
			delete s1.notes[i1].acc
		}
		for (i1 = 0; i1 <= s1.nhd; i1++)
			s1.notes[i1].shhd += sh2
	}
	return true
}

/* handle unison with different accidentals */
function unison_acc(s1, s2, i1, i2) {
	var m, d

	if (!s2.notes[i2].acc) {
		d = w_note[s2.head] * 2 + s2.xmx + s1.notes[i1].shac + 2
		if (s1.notes[i1].micro)
			d += 2
		if (s2.dots)
			d += 6
		for (m = 0; m <= s1.nhd; m++) {
			s1.notes[m].shhd += d;
			s1.notes[m].shac -= d
		}
		s1.xmx += d
	} else {
		d = w_note[s1.head] * 2 + s1.xmx + s2.notes[i2].shac + 2
		if (s2.notes[i2].micro)
			d += 2
		if (s1.dots)
			d += 6
		for (m = 0; m <= s2.nhd; m++) {
			s2.notes[m].shhd += d;
			s2.notes[m].shac -= d
		}
		s2.xmx += d
	}
}

var MAXPIT = 48 * 2

/* set the left space of a note/chord */
function set_left(s) {
	var	m, i, j, shift,
		w_base = w_note[s.head],
		w = w_base,
		left = []

	for (i = 0; i < MAXPIT; i++)
		left.push(-100)

	/* stem */
	if (s.nflags > -2) {
		if (s.stem > 0) {
			w = -w;
			i = s.notes[0].pit * 2;
			j = (Math.ceil((s.ymx - 2) / 3) + 18) * 2
		} else {
			i = (Math.ceil((s.ymn + 2) / 3) + 18) * 2;
			j = s.notes[s.nhd].pit * 2
		}
		if (i < 0)
			i = 0
		if (j >= MAXPIT)
			j = MAXPIT - 1
		while (i <= j)
			left[i++] = w
	}

	/* notes */
	shift = s.notes[s.stem > 0 ? 0 : s.nhd].shhd;	/* previous shift */
	for (m = 0; m <= s.nhd; m++) {
		w = -s.notes[m].shhd + w_base + shift;
		i = s.notes[m].pit * 2
		if (i < 0)
			i = 0
		else if (i >= MAXPIT - 1)
			i = MAXPIT - 2
		if (w > left[i])
			left[i] = w
		if (s.head != C.SQUARE)
			w -= 1
		if (w > left[i - 1])
			left[i - 1] = w
		if (w > left[i + 1])
			left[i + 1] = w
	}

	return left
}

/* set the right space of a note/chord */
function set_right(s) {
	var	m, i, j, k, shift,
		w_base = w_note[s.head],
		w = w_base,
		flags = s.nflags > 0 && s.beam_st && s.beam_end,
		right = []

	for (i = 0; i < MAXPIT; i++)
		right.push(-100)

	/* stem and flags */
	if (s.nflags > -2) {
		if (s.stem < 0) {
			w = -w;
			i = (Math.ceil((s.ymn + 2) / 3) + 18) * 2;
			j = s.notes[s.nhd].pit * 2;
			k = i + 4
		} else {
			i = s.notes[0].pit * 2;
			j = (Math.ceil((s.ymx - 2) / 3) + 18) * 2
		}
		if (i < 0)
			i = 0
		if (j > MAXPIT)
			j = MAXPIT
		while (i < j)
			right[i++] = w
	}

	if (flags) {
		if (s.stem > 0) {
			if (s.xmx == 0)
				i = s.notes[s.nhd].pit * 2
			else
				i = s.notes[0].pit * 2;
			i += 4
			if (i < 0)
				i = 0
			for (; i < MAXPIT && i <= j - 4; i++)
				right[i] = 11
		} else {
			i = k
			if (i < 0)
				i = 0
			for (; i < MAXPIT && i <= s.notes[0].pit * 2 - 4; i++)
				right[i] = 3.5
		}
	}

	/* notes */
	shift = s.notes[s.stem > 0 ? 0 : s.nhd].shhd	/* previous shift */
	for (m = 0; m <= s.nhd; m++) {
		w = s.notes[m].shhd + w_base - shift;
		i = s.notes[m].pit * 2
		if (i < 0)
			i = 0
		else if (i >= MAXPIT - 1)
			i = MAXPIT - 2
		if (w > right[i])
			right[i] = w
		if (s.head != C.SQUARE)
			w -= 1
		if (w > right[i - 1])
			right[i - 1] = w
		if (w > right[i + 1])
			right[i + 1] = w
	}

	return right
}

/* -- shift the notes horizontally when voices overlap -- */
/* this routine is called only once per tune */
function set_overlap() {
	var	s, s1, s2, s3, i, i1, i2, m, sd, t, dp,
		d, d2, dr, dr2, dx,
		left1, right1, left2, right2, right3, pl, pr

	// invert the voices
	function v_invert() {
		s1 = s2;
		s2 = s;
		d = d2;
		pl = left1;
		pr = right1;
		dr2 = dr
	}

	for (s = tsfirst; s; s = s.ts_next) {
		if (s.type != C.NOTE
		 || s.invis)
			continue

		/* treat the stem on two staves with different directions */
		if (s.xstem
		 && s.ts_prev.stem < 0) {
			for (m = 0; m <= s.nhd; m++) {
				s.notes[m].shhd -= 7;		// stem_xoff
				s.notes[m].shac += 16
			}
		}

		/* search the next note at the same time on the same staff */
		s2 = s
		while (1) {
			s2 = s2.ts_next
			if (!s2)
				break
			if (s2.time != s.time) {
				s2 = null
				break
			}
			if (s2.type == C.NOTE
			 && !s2.invis
			 && s2.st == s.st)
				break
		}
		if (!s2)
			continue
		s1 = s

		/* set the dot vertical offset */
		if (cur_sy.voices[s1.v].range < cur_sy.voices[s2.v].range)
			s2.dot_low = true
		else
			s1.dot_low = true

		/* no shift if no overlap */
		if (s1.ymn > s2.ymx
		 || s1.ymx < s2.ymn)
			continue

		if (same_head(s1, s2))
			continue

		/* compute the minimum space for 's1 s2' and 's2 s1' */
		right1 = set_right(s1);
		left2 = set_left(s2);

		s3 = s1.ts_prev
		if (s3 && s3.time == s1.time
		 && s3.st == s1.st && s3.type == C.NOTE && !s3.invis) {
			right3 = set_right(s3)
			for (i = 0; i < MAXPIT; i++) {
				if (right3[i] > right1[i])
					right1[i] = right3[i]
			}
		} else {
			s3 = null
		}
		d = -10
		for (i = 0; i < MAXPIT; i++) {
			if (left2[i] + right1[i] > d)
				d = left2[i] + right1[i]
		}
		if (d < -3) {			// no clash if no dots clash
			if (!s1.dots || !s2.dots
			 || !s2.dot_low
			 || s1.stem > 0 || s2.stem < 0
			 || s1.notes[s1.nhd].pit + 2 != s2.notes[0].pit
			 || (s2.notes[0].pit & 1))
				continue
		}

		right2 = set_right(s2);
		left1 = set_left(s1)
		if (s3) {
			right3 = set_left(s3)
			for (i = 0; i < MAXPIT; i++) {
				if (right3[i] > left1[i])
					left1[i] = right3[i]
			}
		}
		d2 = dr = dr2 = -100
		for (i = 0; i < MAXPIT; i++) {
			if (left1[i] + right2[i] > d2)
				d2 = left1[i] + right2[i]
			if (right2[i] > dr2)
				dr2 = right2[i]
			if (right1[i] > dr)
				dr = right1[i]
		}

		/* check for unison with different accidentals
		 * and clash of dots */
		t = 0;
		i1 = s1.nhd;
		i2 = s2.nhd
		while (1) {
			dp = s1.notes[i1].pit - s2.notes[i2].pit
			switch (dp) {
			case 0:
				if (s1.notes[i1].acc != s2.notes[i2].acc) {
					t = -1
					break
				}
				if (s2.notes[i2].acc)
					s2.notes[i2].acc = 0
				if (s1.dots && s2.dots
				 && (s1.notes[i1].pit & 1))
					t = 1
				break
			case -1:
//fixme:dots++
//				if (s1.dots && s2.dots)
//					t = 1
//++--
				if (s1.dots && s2.dots) {
					if (s1.notes[i1].pit & 1) {
						s1.dot_low = false;
						s2.dot_low = false
					} else {
						s1.dot_low = true;
						s2.dot_low = true
					}
				}
//fixme:dots--
				break
			case -2:
				if (s1.dots && s2.dots
				 && !(s1.notes[i1].pit & 1)) {
//fixme:dots++
//					t = 1
//++--
					s1.dot_low = false;
					s2.dot_low = false
//fixme:dots--
					break
				}
				break
			}
			if (t < 0)
				break
			if (dp >= 0) {
				if (--i1 < 0)
					break
			}
			if (dp <= 0) {
				if (--i2 < 0)
					break
			}
		}

		if (t < 0) {	/* unison and different accidentals */
			unison_acc(s1, s2, i1, i2)
			continue
		}

		sd = 0;
		if (s1.dots) {
			if (s2.dots) {
				if (!t)			/* if no dot clash */
					sd = 1		/* align the dots */
//fixme:dots
			}
		} else if (s2.dots) {
			if (d2 + dr < d + dr2)
				sd = 1		/* align the dots */
//fixme:dots
		}
		pl = left2;
		pr = right2
		if (!s3 && d2 + dr < d + dr2)
			v_invert()
		d += 3
		if (d < 0)
			d = 0;			// (not return!)

		/* handle the previous shift */
		m = s1.stem >= 0 ? 0 : s1.nhd;
		d += s1.notes[m].shhd;
		m = s2.stem >= 0 ? 0 : s2.nhd;
		d -= s2.notes[m].shhd

		/*
		 * room for the dots
		 * - if the dots of v1 don't shift, adjust the shift of v2
		 * - otherwise, align the dots and shift them if clash
		 */
		if (s1.dots) {
			dx = 7.7 + s1.xmx +		// x 1st dot
				3.5 * s1.dots - 3.5 +	// x last dot
				3;			// some space
			if (!sd) {
				d2 = -100;
				for (i1 = 0; i1 <= s1.nhd; i1++) {
					i = s1.notes[i1].pit
					if (!(i & 1)) {
						if (!s1.dot_low)
							i++
						else
							i--
					}
					i *= 2
					if (i < 1)
						i = 1
					else if (i >= MAXPIT - 1)
						i = MAXPIT - 2
					if (pl[i] > d2)
						d2 = pl[i]
					if (pl[i - 1] + 1 > d2)
						d2 = pl[i - 1] + 1
					if (pl[i + 1] + 1 > d2)
						d2 = pl[i + 1] + 1
				}
				if (dx + d2 + 2 > d)
					d = dx + d2 + 2
			} else {
				if (dx < d + dr2 + s2.xmx) {
					d2 = 0
					for (i1 = 0; i1 <= s1.nhd; i1++) {
						i = s1.notes[i1].pit
						if (!(i & 1)) {
							if (!s1.dot_low)
								i++
							else
								i--
						}
						i *= 2
						if (i < 1)
							i = 1
						else if (i >= MAXPIT - 1)
							i = MAXPIT - 2
						if (pr[i] > d2)
							d2 = pr[i]
						if (pr[i - 1] + 1 > d2)
							d2 = pr[i - 1] = 1
						if (pr[i + 1] + 1 > d2)
							d2 = pr[i + 1] + 1
					}
					if (d2 > 4.5
					 && 7.7 + s1.xmx + 2 < d + d2 + s2.xmx)
						s2.xmx = d2 + 3 - 7.7
				}
			}
		}

		for (m = s2.nhd; m >= 0; m--) {
			s2.notes[m].shhd += d
//			if (s2.notes[m].acc
//			 && s2.notes[m].pit < s1.notes[0].pit - 4)
//				s2.notes[m].shac -= d
		}
		s2.xmx += d
		if (sd)
			s1.xmx = s2.xmx		// align the dots
	}
}

/* -- set the stem height -- */
/* this routine is called only once per tune */
function set_stems() {
	var s, s2, g, slen, scale,ymn, ymx, nflags, ymin, ymax

	for (s = tsfirst; s; s = s.ts_next) {
		if (s.type != C.NOTE) {
			if (s.type != C.GRACE)
				continue
			ymin = ymax = s.mid
			for (g = s.extra; g; g = g.next) {
				slen = GSTEM
				if (g.nflags > 1)
					slen += 1.2 * (g.nflags - 1);
				ymn = 3 * (g.notes[0].pit - 18);
				ymx = 3 * (g.notes[g.nhd].pit - 18)
				if (s.stem >= 0) {
					g.y = ymn;
					g.ys = ymx + slen;
					ymx = Math.round(g.ys)
				} else {
					g.y = ymx;
					g.ys = ymn - slen;
					ymn = Math.round(g.ys)
				}
				ymx += 2;
				ymn -= 2
				if (ymn < ymin)
					ymin = ymn
				else if (ymx > ymax)
					ymax = ymx;
				g.ymx = ymx;
				g.ymn = ymn
			}
			s.ymx = ymax;
			s.ymn = ymin
			continue
		}

		/* shift notes in chords (need stem direction to do this) */
		set_head_shift(s);

		/* if start or end of beam, adjust the number of flags
		 * with the other end */
		nflags = s.nflags
		if (s.beam_st && !s.beam_end) {
			if (s.feathered_beam)
				nflags = ++s.nflags
			for (s2 = s.next; /*s2*/; s2 = s2.next) {
				if (s2.type == C.NOTE) {
					if (s.feathered_beam)
						s2.nflags++
					if (s2.beam_end)
						break
				}
			}
/*			if (s2) */
			    if (s2.nflags > nflags)
				nflags = s2.nflags
		} else if (!s.beam_st && s.beam_end) {
//fixme: keep the start of beam ?
			for (s2 = s.prev; /*s2*/; s2 = s2.prev) {
				if (s2.beam_st)
					break
			}
/*			if (s2) */
			    if (s2.nflags > nflags)
				nflags = s2.nflags
		}

		/* set height of stem end */
		slen = cfmt.stemheight
		switch (nflags) {
		case 2: slen += 2; break
		case 3:	slen += 5; break
		case 4:	slen += 10; break
		case 5:	slen += 16; break
		}
		if ((scale = s.p_v.scale) != 1)
			slen *= (scale + 1) * .5;
		ymn = 3 * (s.notes[0].pit - 18)
		if (s.nhd > 0) {
			slen -= 2;
			ymx = 3 * (s.notes[s.nhd].pit - 18)
		} else {
			ymx = ymn
		}
		if (s.ntrem)
			slen += 2 * s.ntrem		/* tremolo */
		if (s.stemless) {
			if (s.stem >= 0) {
				s.y = ymn;
				s.ys = ymx
			} else {
				s.ys = ymn;
				s.y = ymx
			}
			if (nflags == -4)		/* if longa */
				ymn -= 6;
			s.ymx = ymx + 4;
			s.ymn = ymn - 4
		} else if (s.stem >= 0) {
			if (nflags >= 2)
				slen -= 1
			if (s.notes[s.nhd].pit > 26
			 && (nflags <= 0
			  || !s.beam_st
			  || !s.beam_end)) {
				slen -= 2
				if (s.notes[s.nhd].pit > 28)
					slen -= 2
			}
			s.y = ymn
			if (s.notes[0].ti1)
				ymn -= 3;
			s.ymn = ymn - 4;
			s.ys = ymx + slen
			if (s.ys < s.mid)
				s.ys = s.mid;
			s.ymx = (s.ys + 2.5) | 0
		} else {			/* stem down */
			if (s.notes[0].pit < 18
			 && (nflags <= 0
			  || !s.beam_st || !s.beam_end)) {
				slen -= 2
				if (s.notes[0].pit < 16)
					slen -= 2
			}
			s.ys = ymn - slen
			if (s.ys > s.mid)
				s.ys = s.mid;
			s.ymn = (s.ys - 2.5) | 0;
			s.y = ymx
/*fixme:the tie may be lower*/
			if (s.notes[s.nhd].ti1)
				ymx += 3;
			s.ymx = ymx + 4
		}
	}
}

/* -- split up unsuitable bars at end of staff -- */
function check_bar(s) {
	var	bar_type, i, b1, b2,
		p_voice = s.p_v

	/* search the last bar */
	while (s.type == C.CLEF || s.type == C.KEY || s.type == C.METER) {
		if (s.type == C.METER
		 && s.time > p_voice.sym.time)	/* if not empty voice */
			insert_meter |= 1;	/* meter in the next line */
		s = s.prev
		if (!s)
			return
	}
	if (s.type != C.BAR)
		return

	if (s.text != undefined) {			// if repeat bar
		p_voice.bar_start = clone(s);
		p_voice.bar_start.bar_type = "["
		delete s.text
		delete s.a_gch
//		return
	}
	bar_type = s.bar_type
	if (bar_type == ":")
		return
	if (bar_type.slice(-1) != ':')	// if not left repeat bar
		return

	if (!p_voice.bar_start)
		p_voice.bar_start = clone(s)
	if (bar_type[0] != ':') {			/* 'xx:' (not ':xx:') */
		if (bar_type == "||:") {
			p_voice.bar_start.bar_type = "|:";
			s.bar_type = "||"
			return
		}
		p_voice.bar_start.bar_type = bar_type
		if (s.prev && s.prev.type == C.BAR)
			unlksym(s)
		else
			s.bar_type = "|"
		return
	}
	if (bar_type == "::") {
		p_voice.bar_start.bar_type = "|:";
		s.bar_type = ":|"
		return
	}
	if (bar_type == "||:") {
		p_voice.bar_start.bar_type = "|:";
		s.bar_type = "||"
		return
	}

	// '::xx::' -> '::|' and '|::'
//fixme: do the same in abcm2ps
	i = 0
	while (bar_type[i] == ':')
		i++
	if (i < bar_type.length) {
		s.bar_type = bar_type.slice(0, i) + '|';
		i = bar_type.length - 1
		while (bar_type[i] == ':')
			i--;
		p_voice.bar_start.bar_type = '|' + bar_type.slice(i + 1)
	} else {
		i = (bar_type.length / 2) |0;			// '::::' !
		s.bar_type = bar_type.slice(0, i) + '|';
		p_voice.bar_start.bar_type = '|' + bar_type.slice(i)
	}
}

/* -- move the symbols of an empty staff to the next one -- */
function sym_staff_move(st) {
	for (var s = tsfirst; s; s = s.ts_next) {
		if (s.nl)
			break
		if (s.st == st
		 && s.type != C.CLEF) {
			s.st++;
			s.invis = true
		}
	}
}

// generate a block symbol
var blocks = []		// array of delayed block symbols

function block_gen(s) {
	switch (s.subtype) {
	case "leftmargin":
	case "rightmargin":
	case "pagescale":
	case "pagewidth":
	case "scale":
	case "staffwidth":
		svg_flush();
		set_format(s.subtype, s.param);
		break
	case "ml":
		svg_flush();
		user.img_out(s.text)
		break
	case "newpage":
		blk_flush();
		block.newpage = true;
		blk_out()
		break
	case "sep":
		set_page();
		vskip(s.sk1);
		output += '<path class="stroke"\n\td="M';
		out_sxsy(s.x, ' ', 0);
		output += 'h' + s.l.toFixed(2) + '"/>\n';
		vskip(s.sk2);
		break
	case "text":
		write_text(s.text, s.opt)
		break
	case "title":
		write_title(s.text, true)
		break
	case "vskip":
		vskip(s.sk);
//		blk_out()
		break
	default:
		error(2, s, 'Block $1 not treated', s.subtype)
		break
	}
}

/* -- define the start and end of a piece of tune -- */
/* tsnext becomes the beginning of the next line */
function set_piece() {
	var	s, last, p_voice, st, v, nst, nv,
		non_empty = [],
		non_empty_gl = [],
		sy = cur_sy

	function reset_staff(st) {
		var	p_staff = staff_tb[st],
			sy_staff = sy.staves[st]

		if (!p_staff)
			p_staff = staff_tb[st] = {}
		p_staff.y = 0;			// staff system not computed yet
		p_staff.stafflines = sy_staff.stafflines;
		p_staff.staffscale = sy_staff.staffscale;
		p_staff.ann_top = p_staff.ann_bot = 0
	} // reset_staff()

	// adjust the empty flag of brace systems
	function set_brace() {
		var	st, i, empty_fl,
			n = sy.staves.length

		// if a system brace has empty and non empty staves, keep all staves
		for (st = 0; st < n; st++) {
			if (!(sy.staves[st].flags & (OPEN_BRACE | OPEN_BRACE2)))
				continue
			empty_fl = 0;
			i = st
			while (st < n) {
				empty_fl |= non_empty[st] ? 1 : 2
				if (sy.staves[st].flags & (CLOSE_BRACE | CLOSE_BRACE2))
					break
				st++
			}
			if (empty_fl == 3) {	// if both empty and not empty staves
				while (i <= st) {
					non_empty[i] = true;
					non_empty_gl[i++] = true
				}
			}
		}
	} // set_brace()

	// set the top and bottom of the staves
	function set_top_bot() {
		var st, p_staff, i, l, hole

		for (st = 0; st <= nstaff; st++) {
			p_staff = staff_tb[st]
			if (!non_empty_gl[st]) {
				p_staff.botbar = p_staff.topbar = 0
				continue
			}
			l = p_staff.stafflines.length;
			p_staff.topbar = 6 * (l - 1)

			for (i = 0; i < l - 1; i++)
				if (p_staff.stafflines[i] != '.')
					break
			p_staff.botline = p_staff.botbar = i * 6
			if (i >= l - 2) {		// 0, 1 or 2 lines
				if (p_staff.stafflines[i] != '.') {
					p_staff.botbar -= 6;
					p_staff.topbar += 6
				} else {		// no line: big bar
					p_staff.botbar -= 12;
					p_staff.topbar += 12
				}
			}
		}
	} // set_top_bot()

	/* reset the staves */
	nstaff = nst = sy.nstaff
	for (st = 0; st <= nst; st++)
		reset_staff(st);

	/*
	 * search the next end of line,
	 * and mark the empty staves
	 */
	for (s = tsfirst; s; s = s.ts_next) {
		if (s.nl) {
//fixme: not useful
//			// delay the next block symbols
//			while (s && s.type == C.BLOCK) {
//				blocks.push(s);
//				unlksym(s);
//				s = s.ts_next
//			}
			break
		}
		if (!s.ts_next)
			last = s		// keep the last symbol
		switch (s.type) {
		case C.STAVES:
			set_brace();
			sy.st_print = new Uint8Array(non_empty);
			sy = s.sy;
			nst = sy.nstaff
			if (nstaff < nst) {
				for (st = nstaff + 1; st <= nst; st++)
					reset_staff(st);
				nstaff = nst
			}
			non_empty = []
			continue

		// the block symbols will be treated after music line generation
		case C.BLOCK:
			blocks.push(s);
			unlksym(s)
			if (last)
				last = s.ts_prev
			continue
		}
		st = s.st
		if (non_empty[st])
			continue
		switch (s.type) {
		case C.CLEF:
			if (st > nstaff) {	// if clef warning/change for new staff
				staff_tb[st].clef = s;
				unlksym(s)
			}
			break
		case C.BAR:
			if (!sy.staves[st].staffnonote	// default = 1
			 || sy.staves[st].staffnonote <= 1)
				break
			// fall thru
		case C.GRACE:
			non_empty_gl[st] = non_empty[st] = true
			break
		case C.NOTE:
		case C.REST:
		case C.SPACE:
		case C.MREST:
			if (sy.staves[st].staffnonote > 1) {
				non_empty_gl[st] = non_empty[st] = true
			} else if (!s.invis) {
				if (sy.staves[st].staffnonote != 0
				 || s.type == C.NOTE)
					non_empty_gl[st] = non_empty[st] = true
			}
			break
		}
	}
	tsnext = s;

	/* set the last empty staves */
	set_brace()
//	for (st = 0; st <= nstaff; st++)
//		sy.st_print[st] = non_empty[st];
	sy.st_print = new Uint8Array(non_empty);

	/* define the offsets of the measure bars */
	set_top_bot()

	/* move the symbols of the empty staves to the next staff */
//fixme: could be optimized (use a old->new staff array)
	for (st = 0; st < nstaff; st++) {
		if (!non_empty_gl[st])
			sym_staff_move(st)
	}

	/* let the last empty staff have a full height */
	if (!non_empty_gl[nstaff])
		staff_tb[nstaff].topbar = 0;

	/* initialize the music line */
	init_music_line();

	// keep the array of the staves to be printed
	gene.st_print = new Uint8Array(non_empty_gl)

	// if not the end of the tune, set the end of the music line
	if (tsnext) {
		s = tsnext;
		delete s.nl;
		last = s.ts_prev;
		last.ts_next = null;

		// and the end of the voices
		nv = voice_tb.length
		for (v = 0; v < nv; v++) {
			p_voice = voice_tb[v]
			if (p_voice.sym
			 && p_voice.sym.time <= tsnext.time) {
				for (s = tsnext.ts_prev; s; s = s.ts_prev) {
					if (s.v == v) {
						p_voice.s_next = s.next;
						s.next = null;
						check_bar(s)
						break
					}
				}
				if (s)
					continue
			}
			p_voice.s_next = p_voice.sym;
			p_voice.sym = null
		}
	}

	// if the last symbol is not a bar, add an invisible bar
	if (last.type != C.BAR) {
		s = add_end_bar(last);
		s.prev = s.ts_prev = last;
		last.ts_next = last.next = s;
		s.shrink = last.wr + 2;	// just a small space before end of staff
		s.space = set_space(s)
		if (s.space < s.shrink
		 && last.type != C.KEY)
			s.space = s.shrink
	}
}

/* -- position the symbols along the staff -- */
function set_sym_glue(width) {
    var	s, g,
	some_grace,
	spf,			// spacing factor
	xmin = 0,		// sigma shrink = minimum spacing
	xx = 0,			// sigma natural spacing
	x = 0,			// sigma expandable elements
	xs = 0,			// sigma unexpandable elements with no space
	xse = 0			// sigma unexpandable elements with space

	/* calculate the whole space of the symbols */
	for (s = tsfirst; s; s = s.ts_next) {
		if (s.type == C.GRACE && !some_grace)
			some_grace = s
		if (s.seqst) {
			xmin += s.shrink
			if (s.space) {
				if (s.space < s.shrink) {
					xse += s.shrink;
					xx += s.shrink
				} else {
					xx += s.space
				}
			} else {
				xs += s.shrink
			}
		}
	}

	// can occur when bar alone in a staff system
	if (xx == 0) {
		realwidth = 0
		return
	}

	// strong shrink
	if (xmin >= width
	 || xx == xse) {		// no space
		if (xmin > width)
			error(1, s, "Line too much shrunk $1 $2 $3",
				xmin.toFixed(2),
				xx.toFixed(2),
				width.toFixed(2));
		x = 0
		for (s = tsfirst; s; s = s.ts_next) {
			if (s.seqst)
				x += s.shrink;
			s.x = x
		}
//		realwidth = width
		spf_last = 0
	} else if (xx + xs > width * (1 - cfmt.stretchlast)
		 || (tsnext			// if not last line
		  && blocks.length == 0		// and no following text
		  && tsnext.type != C.BLOCK	//	(abcm2ps compatibility)
		  && cfmt.stretchstaff)) {
		for (var cnt = 4; --cnt >= 0; ) {
			spf = (width - xs - xse) / (xx - xse);
			xx = 0;
			xse = 0;
			x = 0
			for (s = tsfirst; s; s = s.ts_next) {
				if (s.seqst) {
					if (s.space) {
						if (s.space * spf <= s.shrink) {
							xse += s.shrink;
							xx += s.shrink;
							x += s.shrink
						} else {
							xx += s.space;
							x += s.space * spf
						}
					} else {
						x += s.shrink
					}
				}
				s.x = x
			}
			if (Math.abs(x - width) < 0.1)
				break
		}
		spf_last = spf
	} else {			// shorter line
		spf = (width - xs - xse) / xx
		if (spf_last < spf)
			spf = spf_last
		for (s = tsfirst; s; s = s.ts_next) {
			if (s.seqst)
				x += s.space * spf <= s.shrink ?
						s.shrink : s.space * spf
			s.x = x
		}
	}
	realwidth = x

	/* set the x offsets of the grace notes */
	for (s = some_grace; s; s = s.ts_next) {
		if (s.type != C.GRACE)
			continue
		if (s.gr_shift)
			x = s.prev.x + s.prev.wr
		else
			x = s.x - s.wl
		for (g = s.extra; g; g = g.next)
			g.x += x
	}
}

// set the starting symbols of the voices for the new music line
function set_sym_line() {
	var	p_voice, s, v,
		nv = voice_tb.length

	// set the first symbol of each voice
	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v];
		s = p_voice.s_next;		// (set in set_piece)
		p_voice.sym = s
		if (s)
			s.prev = null
	}
}

// set the left offset the images
function set_posx() {
	posx = img.lm / cfmt.scale
}

// initialize the start of generation / new music line
// and output the inter-staff blocks if any
function gen_init() {
	var	s = tsfirst,
		tim = s.time

	for ( ; s; s = s.ts_next) {
		if (s.time != tim) {
			set_page()
			return
		}
		switch (s.type) {
		case C.NOTE:
		case C.REST:
		case C.MREST:
			set_page()
			return
		default:
			continue
		case C.STAVES:
			cur_sy = s.sy
			break
		case C.BLOCK:
			block_gen(s)
			break
		}
		unlksym(s)
		if (s.p_v.s_next == s)
			s.p_v.s_next = s.next
	}
	tsfirst = null			/* no more notes */
}

/* -- generate the music -- */
function output_music() {
	var v, lwidth, indent, line_height

	gen_init()
	if (!tsfirst)
		return
	set_global()
	if (voice_tb.length > 1) {	/* if many voices */
		set_stem_dir()		/* set the stems direction in 'multi' */
	}

	for (v = 0; v < voice_tb.length; v++)
		set_beams(voice_tb[v].sym);	/* decide on beams */

	set_stems()			/* set the stem lengths */
	if (voice_tb.length > 1) {	/* if many voices */
		set_rest_offset();	/* set the vertical offset of rests */
		set_overlap();		/* shift the notes on voice overlap */
//		set_rp_bars()		// set repeat bars
	}
	set_acc_shft();			// set the horizontal offset of accidentals

	set_allsymwidth(null);		/* set the width of all symbols */

	indent = set_indent(true)

	/* if single line, adjust the page width */
	if (cfmt.singleline) {
		v = get_ck_width();
		lwidth = indent + v[0] + v[1] + get_width(tsfirst, null);
		img.width = lwidth * cfmt.scale + img.lm + img.rm + 2
	} else {

	/* else, split the tune into music lines */
		lwidth = get_lwidth();
		cut_tune(lwidth, indent)
	}

	spf_last = 1.2				// last spacing factor
	while (1) {				/* loop per music line */
		set_piece();
		set_sym_glue(lwidth - indent)
		if (realwidth != 0) {
			if (indent != 0)
				posx += indent;
			draw_sym_near();		// delayed output
			line_height = set_staff();
			delayed_update();
			draw_systems(indent);
			draw_all_sym();
			vskip(line_height)
			if (indent != 0) {
				posx -= indent;
				insert_meter &= ~2	// no more indentation
			}
			while (blocks.length != 0)
				block_gen(blocks.shift())
		}

		tsfirst = tsnext
		svg_flush()
		if (!tsnext)
			break

		// next line
		gen_init()
		if (!tsfirst)
			break
		tsfirst.ts_prev = null;
		set_sym_line();
		lwidth = get_lwidth()	// the image size may have changed
		indent = set_indent()
	}
}

/* -- reset the generator -- */
function reset_gen() {
	insert_meter = cfmt.writefields.indexOf('M') >= 0 ?
				3 :	/* insert meter and indent */
				2	/* indent only */
}
// abc2svg - parse.js - ABC parse
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

var	a_gch,		// array of parsed guitar chords
	a_dcn,		// array of parsed decoration names
	multicol,	// multi column object
	maps = {}	// maps object - hashcode = map name
			//	-> object - hashcode = note
			//	[0] array of heads
			//	[1] print
			//	[2] color
var	qplet_tb = new Int8Array([ 0, 1, 3, 2, 3, 0, 2, 0, 3, 0 ]),
	ntb = "CDEFGABcdefgab"


// set the source references of a symbol
function set_ref(s) {
	s.fname = parse.fname;
	s.istart = parse.istart;
	s.iend = parse.iend
}

// -- %% pseudo-comment

// clef definition (%%clef, K: and V:)
function new_clef(clef_def) {
	var	s = {
			type: C.CLEF,
			clef_line: 2,
			clef_type: "t",
			v: curvoice.v,
			p_v: curvoice,
			time: curvoice.time,
			dur: 0
		},
		i = 1

	set_ref(s)

	switch (clef_def[0]) {
	case '"':
		i = clef_def.indexOf('"', 1);
		s.clef_name = clef_def.slice(1, i);
		i++
		break
	case 'a':
		if (clef_def[1] == 'u') {	// auto
			s.clef_type = "a";
			s.clef_auto = true;
			i = 4
			break
		}
		i = 4				// alto
	case 'C':
		s.clef_type = "c";
		s.clef_line = 3
		break
	case 'b':				// bass
		i = 4
	case 'F':
		s.clef_type = "b";
		s.clef_line = 4
		break
	case 'n':				// none
		i = 4
		s.invis = true
		break
	case 't':
		if (clef_def[1] == 'e') {	// tenor
			s.clef_type = "c";
			s.clef_line = 4
			break
		}
		i = 6
	case 'G':
//		s.clef_type = "t"		// treble
		break
	case 'p':
		i = 4
	case 'P':				// perc
		s.clef_type = "p";
		s.clef_line = 3;
		curvoice.key.k_sf = 0		// no accidental
		break
	default:
		syntax(1, "Unknown clef '$1'", clef_def)
		return //undefined
	}
	if (clef_def[i] >= '1' && clef_def[i] <= '9') {
		s.clef_line = Number(clef_def[i]);
		i++
	}
	if (clef_def[i + 1] != '8')
		return s
	switch (clef_def[i]) {			// octave
	case '^':
		s.clef_oct_transp = true
	case '+':
		s.clef_octave = 7
		break
	case '_':
		s.clef_oct_transp = true
	case '-':
		s.clef_octave = -7
		break
	}
	return s
}

var note_pit = new Int8Array([0, 2, 4, 5, 7, 9, 11])

// get a transposition value
function get_transp(param,
			type) {		// undefined or "instr"
	var	i, val, tmp, note,
		pit = []

	if (param[0] == '0')
		return 0
	if ("123456789-+".indexOf(param[0]) >= 0) {	// by semi-tone
		val = parseInt(param) * 3
		if (isNaN(val) || val < -108 || val > 108) {
//fixme: no source reference...
			syntax(1, "Bad transpose value")
			return
		}
		switch (param.slice(-1)) {
		default:
			return val
		case '#':
			val++
			break
		case 'b':
			val += 2
			break
		}
		if (val > 0)
			return val
		return val - 3
	}

	// by music interval
	if (type == "instr") {	// convert instrument= into score= or sound=
		tmp = param.indexOf('/')
		if (!cfmt.sound) {
			if (tmp < 0)
				return 0	// written pitch
			param = param.replace('/', '')
		} else {
			if (tmp < 0)
				param = 'c' + param
			else
				param = param.replace(/.*\//, 'c')
		}
	}

	tmp = new scanBuf();
	tmp.buffer = param
	for (i = 0; i < 2; i++) {
		note = parse_acc_pit(tmp)
		if (!note) {
			syntax(1, "Bad transpose value")
			return
		}
		note.pit += 124;	// 126 - 2 for value > 0 and 'C' % 7 == 0
		val = ((note.pit / 7) | 0) * 12 + note_pit[note.pit % 7]
		if (note.acc && note.acc != 3)		// if not natural
			val += note.acc;
		pit[i] = val
	}
	if (cfmt.sound)
		pit[0] = 252;			// 'c'

	val = (pit[1] - pit[0]) * 3
	if (note) {
		switch (note.acc) {
		default:
			return val
		case 2:
		case 1:
			val++
			break
		case -1:
		case -2:
			val += 2
			break
		}
	}
	if (val > 0)
		return val
	return val - 3
}

// set the linebreak character
function set_linebreak(param) {
	var i, item

	for (i = 0; i < 128; i++) {
		if (char_tb[i] == "\n")
			char_tb[i] = nil	// remove old definition
	}
	param = param.split(/\s+/)
	for (i = 0; i < param.length; i++) {
		item = param[i]
		switch (item) {
		case '!':
		case '$':
		case '*':
		case ';':
		case '?':
		case '@':
			break
		case "<none>":
			continue
		case "<EOL>":
			item = '\n'
			break
		default:
			syntax(1, "Bad value '$1' in %%linebreak - ignored",
					item)
			continue
		}
		char_tb[item.charCodeAt(0)] = '\n'
	}
}

// set a new user character (U: or %%user)
function set_user(parm) {
    var	k, c, v,
	a = parm.match(/(.*?)[= ]*([!"].*[!"])/)

	if (!a) {
		syntax(1, 'Lack of starting ! or " in U: / %%user')
		return
	}
	c = a[1];
	v = a[2]
	if (v.slice(-1) != v[0]) {
		syntax(1, "Lack of ending $1 in U:/%%user", v[0])
		return
	}
	if (c[0] == '\\') {
		if (c[1] == 't')
			c = '\t'
		else if (!c[1])
			c = ' '
	}

	k = c.charCodeAt(0)
	if (k >= 128) {
		syntax(1, errs.not_ascii)
		return
	}
	switch (char_tb[k][0]) {
	case '0':			// nil
	case 'd':
	case 'i':
	case ' ':
		break
	case '"':
	case '!':
		if (char_tb[k].length > 1)
			break
		// fall thru
	default:
		syntax(1, "Bad user character '$1'", c)
		return
	}
	switch (v) {
	case "!beambreak!":
		v = " "
		break
	case "!ignore!":
		v = "i"
		break
	case "!nil!":
	case "!none!":
		v = "d"
		break
	}
	char_tb[k] = v
}

// get a stafflines value
function get_st_lines(param) {
	var n, val

	if (!param)
		return
	if (/^[\]\[|.-]+$/.test(param))
		return param.replace(/\]/g, '[')

	n = parseInt(param)
	switch (n) {
	case 0: return "..."
	case 1: return "..|"
	case 2: return ".||"
	case 3: return ".|||"
	}
	if (isNaN(n) || n < 0 || n > 16)
		return //undefined
	val = '|'
	while (--n > 0)
		val += '|'
	return val
}

// create a block symbol in the tune body
function new_block(subtype) {
	var	s = {
			type: C.BLOCK,
			subtype: subtype,
			dur: 0
		}

	if (parse.state == 2)
		goto_tune()
	var voice_s = curvoice;
	curvoice = voice_tb[par_sy.top_voice]
	sym_link(s);
	curvoice = voice_s
	return s
}

// set the voice parameters
function set_vp(a) {
    var	s, item, pos, val, clefpit

	while (1) {
		item = a.shift()
		if (!item)
			break
		if (item[item.length - 1] == '='
		 && a.length == 0) {
			syntax(1, errs.bad_val, item)
			break
		}
		switch (item) {
		case "clef=":
			s = a.shift()		// keep last clef
			break
		case "clefpitch=":
			item = a.shift()		// (<note><octave>)
			if (item) {
				val = ntb.indexOf(item[0])
				if (val >= 0) {
					switch (item[1]) {
					case "'":
						val += 7
						break
					case ',':
						val -= 7
						if (item[2] == ',')
							val -= 7
						break
					}
					clefpit = 4 - val	// 4 = 'G'
					break
				}
			}
			syntax(1, errs.bad_val, item)
			break
		case "octave=":
		case "uscale=":			// %%microscale
			val = parseInt(a.shift())
			if (isNaN(val))
				syntax(1, errs.bad_val, item)
			else
				curvoice[item.slice(0, -1)] = val
			break
		case "cue=":
			curvoice.scale = a.shift() == 'on' ? .7 : 1
			break
		case "instrument=":
			curvoice.transp = get_transp(a.shift(), 'instr')
			break
		case "map=":			// %%voicemap
			if (cfmt.sound != "play")
				curvoice.map = a.shift()
			break
		case "name=":
		case "nm=":
			curvoice.nm = a.shift()
			if (curvoice.nm[0] == '"')
				curvoice.nm = curvoice.nm.slice(1, -1);
			curvoice.new_name = true
			break
		case "stem=":
		case "pos=":
			if (item == "pos=")
				item = a.shift().split(' ')
			else
				item = ["stm", a.shift()];
			val = posval[item[1]]
			if (val == undefined) {
				syntax(1, errs.bad_val, item[0])
				break
			}
			if (!pos)
				pos = {}
			pos[item[0]] = val
			break
		case "scale=":			// %%voicescale
			val = parseFloat(a.shift())
			if (isNaN(val) || val < .6 || val > 1.5)
				syntax(1, errs.bad_val, "%%voicescale")
			else
				curvoice.scale = val
			break
		case "score=":
			if (cfmt.sound)
				break
			item = a.shift()
			if (item.indexOf('/') < 0)
				item += '/c';
			curvoice.transp = get_transp(item)
			break
		case "shift=":
			curvoice.shift = get_transp(a.shift())
			break
		case "sound=":
		case "transpose=":		// (abcMIDI compatibility)
			if (!cfmt.sound)
				break
			curvoice.transp = get_transp(a.shift())
			break
		case "subname=":
		case "sname=":
		case "snm=":
			curvoice.snm = a.shift()
			if (curvoice.snm[0] == '"')
				curvoice.snm = curvoice.snm.slice(1, -1);
			break
		case "stafflines=":
			val = get_st_lines(a.shift())
			if (val == undefined)
				syntax(1, "Bad %%stafflines value")
			else if (curvoice.st != undefined)
				par_sy.staves[curvoice.st].stafflines = val
			else
				curvoice.stafflines = val
			break
		case "staffnonote=":
			val = parseInt(a.shift())
			if (isNaN(val))
				syntax(1, "Bad %%staffnonote value")
			else
				curvoice.staffnonote = val
			break
		case "staffscale=":
			val = parseFloat(a.shift())
			if (isNaN(val) || val < .3 || val > 2)
				syntax(1, "Bad %%staffscale value")
			else
				curvoice.staffscale = val
			break
		default:
			switch (item.slice(0, 4)) {
			case "treb":
			case "bass":
			case "alto":
			case "teno":
			case "perc":
				s = item
				break
			default:
				if ("GFC".indexOf(item[0]) >= 0)
					s = item
				else if (item.slice(-1) == '=')
					a.shift()
				break
			}
			break
		}
	}
	if (pos) {
		curvoice.pos = clone(curvoice.pos)
		for (item in pos)
			if (pos.hasOwnProperty(item))
				curvoice.pos[item] = pos[item]
	}

	if (s) {
		s = new_clef(s)
		if (s) {
			if (clefpit)
				s.clefpit = clefpit
			get_clef(s)
		}
	}
} // set_vp()

// set the K: / V: parameters
function set_kv_parm(a) {	// array of items
	if (!curvoice.init) {	// add the global parameters if not done yet
		curvoice.init = true
		if (info.V) {
			if (info.V['*'])
				a = info.V['*'].concat(a)
			if (info.V[curvoice.id])
				a = info.V[curvoice.id].concat(a)
		}
	}
	if (a.length != 0)
		set_vp(a)
} // set_kv_parm()

// memorize the K:/V: parameters
function memo_kv_parm(vid,	// voice ID (V:) / '*' (K:/V:*)
			a) {	// array of items
	if (a.length == 0)
		return
	if (!info.V)
		info.V = {}
	if (info.V[vid])
		Array.prototype.push.apply(info.V[vid], a)
	else
		info.V[vid] = a
}

// K: key signature
// return the key and the voice/clef parameters
function new_key(param) {
	var	i, clef, key_end, c, tmp,
		mode = 0,
		s = {
			type: C.KEY,
			k_delta: 0,
			dur:0
		}

	set_ref(s);

	// tonic
	i = 1
	switch (param[0]) {
	case 'A': s.k_sf = 3; break
	case 'B': s.k_sf = 5; break
	case 'C': s.k_sf = 0; break
	case 'D': s.k_sf = 2; break
	case 'E': s.k_sf = 4; break
	case 'F': s.k_sf = -1; break
	case 'G': s.k_sf = 1; break
	case 'H':				// bagpipe
		switch (param[1]) {
		case 'P':
		case 'p':
			s.k_bagpipe = param[1];
			s.k_sf = param[1] == 'P' ? 0 : 2;
			i++
			break
		default:
			syntax(1, "Unknown bagpipe-like key")
			break
		}
		break
	case 'P':
		s.k_drum = true;
		key_end = true
		break
	case 'n':				// none
		if (param.indexOf("none") == 0) {
			s.k_sf = 0;
			s.k_none = true;
			i = 4
		}
		// fall thru
	default:
		key_end = true
		break
	}

	if (!key_end) {
		switch (param[i]) {
		case '#': s.k_sf += 7; i++; break
		case 'b': s.k_sf -= 7; i++; break
		}
		param = param.slice(i).trim()
		switch (param.slice(0, 3).toLowerCase()) {
		default:
			if (param[0] != 'm'
			 || (param[1] != ' ' && param[1] != '\t'
			  && param[1] != '\n')) {
				key_end = true
				break
			}
			// fall thru ('m')
		case "aeo":
		case "m":
		case "min": s.k_sf -= 3;
			mode = 5
			break
		case "dor": s.k_sf -= 2;
			mode = 1
			break
		case "ion":
		case "maj": break
		case "loc": s.k_sf -= 5;
			mode = 6
			break
		case "lyd": s.k_sf += 1;
			mode = 3
			break
		case "mix": s.k_sf -= 1;
			mode = 4
			break
		case "phr": s.k_sf -= 4;
			mode = 2
			break
		}
		if (!key_end)
			param = param.replace(/\w+\s*/, '')

		// [exp] accidentals
		if (param.indexOf("exp ") == 0) {
			param = param.replace(/\w+\s*/, '')
			if (!param)
				syntax(1, "No accidental after 'exp'");
			s.k_exp = true
		}
		c = param[0]
		if (c == '^' || c == '_' || c == '=') {
			s.k_a_acc = [];
			tmp = new scanBuf();
			tmp.buffer = param
			do {
				var note = parse_acc_pit(tmp)
				if (!note)
					return [s, null]
				s.k_a_acc.push(note);
				c = param[tmp.index]
				while (c == ' ')
					c = param[++tmp.index]
			} while (c == '^' || c == '_' || c == '=');
			param = param.slice(tmp.index)
		} else if (s.k_exp && param.indexOf("none") == 0) {
			s.k_sf = 0;
			param = param.replace(/\w+\s*/, '')
		}
	}

	s.k_delta = cgd2cde[(s.k_sf + 7) % 7];
	s.k_mode = mode

	return [s, info_split(param, 0)]
}

// M: meter
function new_meter(text) {
	var	s = {
			type: C.METER,
			dur: 0,
			a_meter: []
		},
		meter = {},
		val, v,
		m1 = 0, m2,
		i = 0, j,
		wmeasure,
		p = text,
		in_parenth;

	set_ref(s)

	if (p.indexOf("none") == 0) {
		i = 4;				/* no meter */
		wmeasure = 1;	// simplify measure numbering and C.MREST conversion
	} else {
		wmeasure = 0
		while (i < text.length) {
			if (p[i] == '=')
				break
			switch (p[i]) {
			case 'C':
				meter.top = p[i++]
				if (p[i] == '|')
					meter.top += p[i++];
				m1 = 4;
				m2 = 4
				break
			case 'c':
			case 'o':
				m1 = p[i] == 'c' ? 4 : 3;
				m2 = 4;
				meter.top = p[i++]
				if (p[i] == '.')
					meter.top += p[i++]
				break
			case '(':
				if (p[i + 1] == '(') {	/* "M:5/4 ((2+3)/4)" */
					in_parenth = true;
					meter.top = p[i++];
					s.a_meter.push(meter);
					meter = {}
				}
				j = i + 1
				while (j < text.length) {
					if (p[j] == ')' || p[j] == '/')
						break
					j++
				}
				if (p[j] == ')' && p[j + 1] == '/') {	/* "M:5/4 (2+3)/4" */
					i++		/* remove the parenthesis */
					continue
				}			/* "M:5 (2+3)" */
				/* fall thru */
			case ')':
				in_parenth = p[i] == '(';
				meter.top = p[i++];
				s.a_meter.push(meter);
				meter = {}
				continue
			default:
				if (p[i] <= '0' || p[i] > '9') {
					syntax(1, "Bad char '$1' in M:", p[i])
					return
				}
				m2 = 2;			/* default when no bottom value */
				meter.top = p[i++]
				for (;;) {
					while (p[i] >= '0' && p[i] <= '9')
						meter.top += p[i++]
					if (p[i] == ')') {
						if (p[i + 1] != '/')
							break
						i++
					}
					if (p[i] == '/') {
						i++;
						if (p[i] <= '0' || p[i] > '9') {
							syntax(1, "Bad char '$1' in M:", p[i])
							return
						}
						meter.bot = p[i++]
						while (p[i] >= '0' && p[i] <= '9')
							meter.bot += p[i++]
						break
					}
					if (p[i] != ' ' && p[i] != '+')
						break
					if (i >= text.length
					 || p[i + 1] == '(')	/* "M:5 (2/4+3/4)" */
						break
					meter.top += p[i++]
				}
				m1 = parseInt(meter.top)
				break
			}
			if (!in_parenth) {
				if (meter.bot)
					m2 = parseInt(meter.bot);
				wmeasure += m1 * C.BLEN / m2
			}
			s.a_meter.push(meter);
			meter = {}
			while (p[i] == ' ')
				i++
			if (p[i] == '+') {
				meter.top = p[i++];
				s.a_meter.push(meter);
				meter = {}
			}
		}
	}
	if (p[i] == '=') {
		val = p.substring(++i).match(/^(\d+)\/(\d+)$/)
		if (!val) {
			syntax(1, "Bad duration '$1' in M:", p.substring(i))
			return
		}
		wmeasure = C.BLEN * val[1] / val[2]
	}
	s.wmeasure = wmeasure

	if (parse.state != 3) {
		info.M = text;
		glovar.meter = s
		if (parse.state >= 1) {

			/* in the tune header, change the unit note length */
			if (!glovar.ulen) {
				if (wmeasure <= 1
				 || wmeasure >= C.BLEN * 3 / 4)
					glovar.ulen = C.BLEN / 8
				else
					glovar.ulen = C.BLEN / 16
			}
			for (v = 0; v < voice_tb.length; v++) {
				voice_tb[v].meter = s;
				voice_tb[v].wmeasure = wmeasure
			}
		}
	} else {
		curvoice.wmeasure = wmeasure
		if (is_voice_sig()) {
			curvoice.meter = s;
			reset_gen()
		} else {
			sym_link(s)
		}
	}
}

/* Q: tempo */
function new_tempo(text) {
	var	i = 0, j, c, nd, tmp,
		s = {
			type: C.TEMPO,
			dur: 0
		}

	set_ref(s)

	if (cfmt.writefields.indexOf('Q') < 0)
		s.del = true			// don't display

	/* string before */
	if (text[0] == '"') {
		i = text.indexOf('"', 1)
		if (i < 0) {
			syntax(1, "Unterminated string in Q:")
			return
		}
		s.tempo_str1 = text.slice(1, i);
		i++
		while (text[i] == ' ')
			i++
	}

	/* beat */
	tmp = new scanBuf();
	tmp.buffer = text;
	tmp.index = i
	while (1) {
//		c = tmp.char()
		c = text[tmp.index]
		if (c == undefined || c <= '0' || c > '9')
			break
		nd = parse_dur(tmp)
		if (!s.tempo_notes)
			s.tempo_notes = []
		s.tempo_notes.push(C.BLEN * nd[0] / nd[1])
		while (1) {
//			c = tmp.char()
			c = text[tmp.index]
			if (c != ' ')
				break
			tmp.index++
		}
	}

	/* tempo value */
	if (c == '=') {
		c = text[++tmp.index]
		while (c == ' ')
			c = text[++tmp.index];
		i = tmp.index
		if (c == 'c' && text[i + 1] == 'a'
		 && text[i + 2] == '.' && text[i + 3] == ' ') {
			s.tempo_ca = 'ca. ';
			tmp.index += 4;
//			c = text[tmp.index]
		}
		if (text[tmp.index + 1] != '/') {
			s.tempo = tmp.get_int()
		} else {
			nd = parse_dur(tmp);
			s.new_beat = C.BLEN * nd[0] / nd[1]
		}
		c = text[tmp.index]
		while (c == ' ')
			c = text[++tmp.index]
	}

	/* string after */
	if (c == '"') {
		tmp.index++;
		i = text.indexOf('"', tmp.index + 1)
		if (i < 0) {
			syntax(1, "Unterminated string in Q:")
			return
		}
		s.tempo_str2 = text.slice(tmp.index, i)
	}

	if (parse.state != 3) {
		if (parse.state == 1) {			// tune header
			info.Q = text;
			glovar.tempo = s
			return
		}
		goto_tune()
	}
	if (curvoice.v == par_sy.top_voice) {	/* tempo only for first voice */
		sym_link(s)
		if (glovar.tempo && curvoice.time == 0)
			glovar.tempo.del = true
	}
}

// treat the information fields which may embedded
function do_info(info_type, text) {
	var s, d1, d2, a, vid

	switch (info_type) {

	// info fields in any state
	case 'I':
		do_pscom(text)
		break
	case 'L':
//fixme: ??
		if (parse.state == 2)
			goto_tune();
		a = text.match(/^1\/(\d+)(=(\d+)\/(\d+))?$/)
		if (a) {
			d1 = Number(a[1])
			if (!d1 || (d1 & (d1 - 1)) != 0)
				break
			d1 = C.BLEN / d1
			if (a[2]) {
				d2 = Number(a[4])
				if (!d2 || (d2 & (d2 - 1)) != 0) {
					d2 = 0
					break
				}
				d2 = Number(a[3]) / d2 * C.BLEN
			} else {
				d2 = d1
			}
		} else if (text == "auto") {
			d1 = d2 = -1
		}
		if (!d2) {
			syntax(1, "Bad L: value")
			break
		}
		if (parse.state < 2) {
			glovar.ulen = d1
		} else {
			curvoice.ulen = d1;
			curvoice.dur_fact = d2 / d1
		}
		break
	case 'M':
		new_meter(text)
		break
	case 'U':
		set_user(text)
		break

	// fields in tune header or tune body
	case 'P':
		if (parse.state == 0)
			break
		if (parse.state == 1) {
			info.P = text
			break
		}
		if (parse.state == 2)
			goto_tune()
		if (cfmt.writefields.indexOf(info_type) < 0)
			break
		s = {
			type: C.PART,
			text: text,
			dur: 0
		}

		/*
		 * If not in the main voice, then,
		 * if the voices are synchronized and no P: yet in the main voice,
		 * the misplaced P: goes into the main voice.
		 */
		var p_voice = voice_tb[par_sy.top_voice]
		if (curvoice.v != p_voice.v) {
			if (curvoice.time != p_voice.time)
				break
			if (p_voice.last_sym && p_voice.last_sym.type == C.PART)
				break		// already a P:
			var voice_sav = curvoice;
			curvoice = p_voice;
			sym_link(s);
			curvoice = voice_sav
		} else {
			sym_link(s)
		}
		break
	case 'Q':
		if (parse.state == 0)
			break
		new_tempo(text)
		break
	case 'V':
		get_voice(text)
		break

	// key signature at end of tune header on in tune body
	case 'K':
		if (parse.state == 0)
			break
		get_key(text)
		break

	// info in any state
	case 'N':
	case 'R':
		if (!info[info_type])
			info[info_type] = text
		else
			info[info_type] += '\n' + text
		break
	case 'r':
		if (!user.keep_remark
		 || parse.state != 3)
			break
		s = {
			type: C.REMARK,
			text: text,
			dur: 0
		}
		sym_link(s)
		break
	default:
		syntax(0, "'$1:' line ignored", info_type)
		break
	}
}

// music line parsing functions

/* -- adjust the duration and time of symbols in a measure when L:auto -- */
function adjust_dur(s) {
	var s2, time, auto_time, i, res;

	/* search the start of the measure */
	s2 = curvoice.last_sym
	if (!s2)
		return;

	/* the bar time is correct if there are multi-rests */
	if (s2.type == C.MREST
	 || s2.type == C.BAR)			/* in second voice */
		return
	while (s2.type != C.BAR && s2.prev)
		s2 = s2.prev;
	time = s2.time;
	auto_time = curvoice.time - time

	/* remove the invisible rest at start of tune */
	if (time == 0) {
		while (s2 && !s2.dur)
			s2 = s2.next
		if (s2 && s2.type == C.REST
		 && s2.invis) {
			time += s2.dur * curvoice.wmeasure / auto_time
			if (s2.prev)
				s2.prev.next = s2.next
			else
				curvoice.sym = s2.next
			if (s2.next)
				s2.next.prev = s2.prev;
			s2 = s2.next
		}
	}
	if (curvoice.wmeasure == auto_time)
		return				/* already good duration */

	for ( ; s2; s2 = s2.next) {
		s2.time = time
		if (!s2.dur || s2.grace)
			continue
		s2.dur = s2.dur * curvoice.wmeasure / auto_time;
		s2.dur_orig = s2.dur_orig * curvoice.wmeasure / auto_time;
		time += s2.dur
		if (s2.type != C.NOTE && s2.type != C.REST)
			continue
		for (i = 0; i <= s2.nhd; i++)
			s2.notes[i].dur = s2.notes[i].dur
					 * curvoice.wmeasure / auto_time;
		res = identify_note(s2, s2.dur_orig);
		s2.head = res[0];
		s2.dots = res[1];
		s2.nflags = res[2]
		if (s2.nflags <= -2)
			s2.stemless = true
		else
			delete s2.stemless
	}
	curvoice.time = s.time = time
}

/* -- parse a bar -- */
function new_bar() {
	var	s2, c, bar_type,
		line = parse.line,
		s = {
			type: C.BAR,
			fname: parse.fname,
			istart: parse.bol + line.index,
			dur: 0,
			multi: 0		// needed for decorations
		}

	if (vover && vover.bar)			// end of voice overlay
		get_vover('|')
	if (glovar.new_nbar) {			// %%setbarnb
		s.bar_num = glovar.new_nbar;
		glovar.new_nbar = 0
	}
	bar_type = line.char()
	while (1) {
		c = line.next_char()
		switch (c) {
		case '|':
		case '[':
		case ']':
		case ':':
			bar_type += c
			continue
		}
		break
	}
	if (bar_type[0] == ':') {
		if (bar_type.length == 1) {	// ":" alone
			bar_type = '|';
			s.bar_dotted = true
		} else {
			s.rbstop = 2		// right repeat with end
		}
	}

	// set the guitar chord and the decorations
	if (a_gch)
		gch_build(s)
	if (a_dcn) {
		deco_cnv(a_dcn, s);
		a_dcn = null
	}

	/* if the last element is '[', it may start
	 * a chord or an embedded header */
	switch (bar_type.slice(-1)) {
	case '[':
		if (/[0-9" ]/.test(c))		// "
			break
		bar_type = bar_type.slice(0, -1);
		line.index--;
		c = '['
		break
	case ':':				// left repeat
		s.rbstop = 2			// with bracket end
		break
	}

	// check if repeat bar
	if (c > '0' && c <= '9') {
		if (bar_type.slice(-1) == '[')
			bar_type = bar_type.slice(0, -1);
		s.text = c
		while (1) {
			c = line.next_char()
			if ("0123456789,.-".indexOf(c) < 0)
				break
			s.text += c
		}
		s.rbstop = 2;
		s.rbstart = 2
	} else if (c == '"' && bar_type.slice(-1) == '[') {
		bar_type = bar_type.slice(0, -1);
		s.text = ""
		while (1) {
			c = line.next_char()
			if (!c) {
				syntax(1, "No end of repeat string")
				return
			}
			if (c == '"') {
				line.index++
				break
			}
			if (c == '\\') {
				s.text += c;
				c = line.next_char()
			}
			s.text += c
		}
		s.text = cnv_escape(s.text);
		s.rbstop = 2;
		s.rbstart = 2
	}

	// ']' as the first character indicates a repeat bar stop
	if (bar_type[0] == ']') {
		s.rbstop = 2			// with end
		if (bar_type.length != 1)
			bar_type = bar_type.slice(1)
		else
			s.invis = true
	}

	s.iend = parse.bol + line.index

	if (s.rbstart
	 && curvoice.norepbra
	 && !curvoice.second)
		s.norepbra = true

	if (curvoice.ulen < 0)			// L:auto
		adjust_dur(s);

	s2 = curvoice.last_sym
	if (s2 && s2.type == C.SPACE) {
		s2.time--		// keep the space at the right place
	} else if (s2 && s2.type == C.BAR) {
//fixme: why these next lines?
//		&& !s2.a_gch && !s2.a_dd
//		&& !s.a_gch && !s.a_dd) {

		/* remove the invisible repeat bars when no shift is needed */
		if (bar_type == "["
		 && !s2.text
		 && (curvoice.st == 0
		  || (par_sy.staves[curvoice.st - 1].flags & STOP_BAR)
		  || s.norepbra)) {
			if (s.text)
				s2.text = s.text
			if (s.a_gch)
				s2.a_gch = s.a_gch
			if (s.norepbra)
				s2.norepbra = s.norepbra
			if (s.rbstart)
				s2.rbstart = s.rbstart
			if (s.rbstop)
				s2.rbstop = s.rbstop
//--fixme: pb when on next line and empty staff above
			return
		}

		/* merge back-to-back repeat bars */
		if (bar_type == "|:") {
			if (s2.bar_type == ":|") {
				s2.bar_type = "::";
				s2.rbstop = 2
				return
			}
			if (s2.bar_type == "||") {
				s2.bar_type = "||:";
				s2.rbstop = 2
				return
			}
		}
	}

	/* set some flags */
	switch (bar_type) {
	case "[":
		s.rbstop = 2
	case "[]":
	case "[|]":
		s.invis = true;
		bar_type = "[]"
		break
	case ":|:":
	case ":||:":
		bar_type = "::"
		break
	case "||":
		if (!cfmt.rbdbstop)
			break
	case "[|":
	case "|]":
		s.rbstop = 2
		break
	}
	s.bar_type = bar_type
	if (!curvoice.lyric_restart)
		curvoice.lyric_restart = s
	if (!curvoice.sym_restart)
		curvoice.sym_restart = s

	/* the bar must appear before a key signature */
	if (s2 && s2.type == C.KEY
	 && (!s2.prev || s2.prev.type != C.BAR)) {
		curvoice.last_sym = s2.prev
		if (!s2.prev)
			curvoice.sym = s2.prev;	// null
		sym_link(s);
		s.next = s2;
		s2.prev = s;
		curvoice.last_sym = s2
	} else {
		sym_link(s)
	}
	s.st = curvoice.st			/* original staff */

	/* if repeat bar and shift, add a repeat bar */
	if (s.rbstart
	 && !curvoice.norepbra
	 && curvoice.st > 0
	 && !(par_sy.staves[curvoice.st - 1].flags & STOP_BAR)) {
		s2 = {
			type: C.BAR,
			fname: s.fname,
			istart: s.istart,
			iend: s.iend,
			bar_type: "[",
			multi: 0,
			invis: true,
			text: s.text,
			rbstart: 2
		}
		sym_link(s2);
		s2.st = curvoice.st
		delete s.text;
		s.rbstart = 0
	}
}

// parse %%staves / %%score
// return an array of [vid, flags] / null
function parse_staves(p) {
	var	v, vid,
		a_vf = [],
		err = false,
		flags = 0,
		brace = 0,
		bracket = 0,
		parenth = 0,
		flags_st = 0,
		i = 0

	/* parse the voices */
	while (i < p.length) {
		switch (p[i]) {
		case ' ':
		case '\t':
			break
		case '[':
			if (parenth || brace + bracket >= 2) {
				syntax(1, errs.misplaced, '[');
				err = true
				break
			}
			flags |= brace + bracket == 0 ? OPEN_BRACKET : OPEN_BRACKET2;
			bracket++;
			flags_st <<= 8;
			flags_st |= OPEN_BRACKET
			break
		case '{':
			if (parenth || brace || bracket >= 2) {
				syntax(1, errs.misplaced, '{');
				err = true
				break
			}
			flags |= !bracket ? OPEN_BRACE : OPEN_BRACE2;
			brace++;
			flags_st <<= 8;
			flags_st |= OPEN_BRACE
			break
		case '(':
			if (parenth) {
				syntax(1, errs.misplaced, '(');
				err = true
				break
			}
			flags |= OPEN_PARENTH;
			parenth++;
			flags_st <<= 8;
			flags_st |= OPEN_PARENTH
			break
		case '*':
			if (brace && !parenth && !(flags & (OPEN_BRACE | OPEN_BRACE2)))
				flags |= FL_VOICE
			break
		case '+':
			flags |= MASTER_VOICE
			break
		default:
			if (!/\w/.test(p[i])) {
				syntax(1, "Bad voice ID in %%staves");
				err = true
				break
			}

			/* get / create the voice in the voice table */
			vid = ""
			while (i < p.length) {
				if (" \t()[]{}|*".indexOf(p[i]) >= 0)
					break
				vid += p[i++]
			}
			for ( ; i < p.length; i++) {
				switch (p[i]) {
				case ' ':
				case '\t':
					continue
				case ']':
					if (!(flags_st & OPEN_BRACKET)) {
						syntax(1, errs.misplaced, ']');
						err = true
						break
					}
					bracket--;
					flags |= brace + bracket == 0 ?
							CLOSE_BRACKET :
							CLOSE_BRACKET2;
					flags_st >>= 8
					continue
				case '}':
					if (!(flags_st & OPEN_BRACE)) {
						syntax(1, errs.misplaced, '}');
						err = true
						break
					}
					brace--;
					flags |= !bracket ?
							CLOSE_BRACE :
							CLOSE_BRACE2;
					flags &= ~FL_VOICE;
					flags_st >>= 8
					continue
				case ')':
					if (!(flags_st & OPEN_PARENTH)) {
						syntax(1, errs.misplaced, ')');
						err = true
						break
					}
					parenth--;
					flags |= CLOSE_PARENTH;
					flags_st >>= 8
					continue
				case '|':
					flags |= STOP_BAR
					continue
				}
				break
			}
			a_vf.push([vid, flags]);
			flags = 0
			continue
		}
		i++
	}
	if (flags_st != 0) {
		syntax(1, "'}', ')' or ']' missing in %%staves");
		err = true
	}
	if (err || a_vf.length == 0)
		return //null
	return a_vf
}

// split an info string
function info_split(text) {
	if (!text)
		return []
    var	a = text.match(/(".+?"|.+?)(\s+|=|$)/g)
	if (!a) {
		syntax(1, "Unterminated string")
		return []
	}
	for (var i = 0; i < a.length; i++)
		a[i] = a[i].trim()
	return a
}

/* -- get head type, dots, flags of note/rest for a duration -- */
function identify_note(s, dur) {
	var head, dots, flags

	if (dur % 12 != 0)
		syntax(1, "Invalid note duration $1", dur);
	dur /= 12			/* see C.BLEN for values */
	if (dur == 0)
		syntax(1, "Note too short")
	for (flags = 5; dur != 0; dur >>= 1, flags--) {
		if (dur & 1)
			break
	}
	dur >>= 1
	switch (dur) {
	case 0: dots = 0; break
	case 1: dots = 1; break
	case 3: dots = 2; break
//	case 7: dots = 3; break
	default:
		dots = 3
		break
	}
	flags -= dots
//--fixme: is 'head' useful?
	if (flags >= 0) {
		head = C.FULL
	} else switch (flags) {
	default:
		syntax(1, "Note too long");
		flags = -4
		/* fall thru */
	case -4:
		head = C.SQUARE
		break
	case -3:
		head = cfmt.squarebreve ? C.SQUARE : C.OVALBARS
		break
	case -2:
		head = C.OVAL
		break
	case -1:
		head = C.EMPTY
		break
	}
	return [head, dots, flags]
}

// parse a duration and return [numerator, denominator]
// 'line' is not always 'parse.line'
var reg_dur = /(\d*)(\/*)(\d*)/g		/* (stop comment) */

function parse_dur(line) {
	var res, num, den;

	reg_dur.lastIndex = line.index;
	res = reg_dur.exec(line.buffer)
	if (!res[0])
		return [1, 1];
	num = res[1] || 1;
	den = res[3] || 1
	if (!res[3])
		den *= 1 << res[2].length;
	line.index = reg_dur.lastIndex
	return [num, den]
}

// parse the note accidental and pitch
function parse_acc_pit(line) {
	var	note, acc, micro_n, micro_d, pit, nd,
		c = line.char()

	// optional accidental
	switch (c) {
	case '^':
		c = line.next_char()
		if (c == '^') {
			acc = 2;
			c = line.next_char()
		} else {
			acc = 1
		}
		break
	case '=':
		acc = 3;
		c = line.next_char()
		break
	case '_':
		c = line.next_char()
		if (c == '_') {
			acc = -2;
			c = line.next_char()
		} else {
			acc = -1
		}
		break
	}

	/* look for microtone value */
	if (acc && acc != 3 && (c >= '1' && c <= '9')
	 || c == '/') {				// compatibility
		nd = parse_dur(line);
		micro_n = nd[0];
		micro_d = nd[1]
		if (micro_d == 1)
			micro_d = curvoice ? curvoice.uscale : 1
		else
			micro_d *= 2;	// 1/2 tone fraction -> tone fraction
		c = line.char()
	}

	/* get the pitch */
	pit = ntb.indexOf(c) + 16;
	c = line.next_char()
	if (pit < 16) {
		syntax(1, "'$1' is not a note", line.buffer[line.index - 1])
		return //undefined
	}

	// octave
	while (c == "'") {
		pit += 7;
		c = line.next_char()
	}
	while (c == ',') {
		pit -= 7;
		c = line.next_char()
	}
	note = {
		pit: pit,
		apit: pit,
		shhd: 0,
		shac: 0,
		ti1: 0
	}
	if (acc) {
		note.acc = acc
		if (micro_n) {
			note.micro_n = micro_n;
			note.micro_d = micro_d
		}
	}
	return note
}

/* set the mapping of a note */
function set_map(note) {
	var	bn, an, nn, i,
		map = maps[curvoice.map]	// never null

	bn = 'abcdefg'[(note.pit + 77) % 7]
	if (note.acc)
		an = ['__', '_', '', '^', '^^', '='][note.acc + 2]
	else
		an = ''
//fixme: treat microtone
	nn = an + bn
	for (i = note.pit; i >= 28; i -= 7)
		nn += "'"
	for (i = note.pit; i < 21; i += 7)
		nn += ",";

	if (!map[nn]) {
		nn = 'octave,' + an + bn		// octave
		if (!map[nn]) {
			nn = 'key,' +			// 'key,'
				'abcdefg'[(note.pit + 77 -
						curvoice.ckey.k_delta) % 7]
			if (!map[nn]) {
				nn = 'all'		// 'all'
				if (!map[nn])
					return
			}
		}
	}
	note.map = map[nn]
	if (note.map[1]) {
		note.apit = note.pit = note.map[1].pit;	// print
		note.acc = note.map[1].acc
	}
}

/* -- parse note or rest with pitch and length -- */
// 'line' is not always 'parse.line'
function parse_basic_note(line, ulen) {
	var	nd,
		note = parse_acc_pit(line)

	if (!note)
		return //null

	// duration
	if (line.char() == '0') {		// compatibility
		parse.stemless = true;
		line.index++
	}
	nd = parse_dur(line);
	note.dur = ulen * nd[0] / nd[1]
	return note
}

function parse_vpos() {
	var	c,
		line = parse.line,
		ti1 = 0

	if (line.buffer[line.index - 1] == '.' && !a_dcn)
		ti1 = C.SL_DOTTED
	switch (line.next_char()) {
	case "'":
		line.index++
		return ti1 + C.SL_ABOVE
	case ",":
		line.index++
		return ti1 + C.SL_BELOW
	}
	return ti1 + C.SL_AUTO
}

var	cde2fcg = new Int8Array([0, 2, 4, -1, 1, 3, 5]),
	cgd2cde = new Int8Array([0, 4, 1, 5, 2, 6, 3]),
	acc2 = new Int8Array([-2, -1, 3, 1, 2])

/* transpose a note / chord */
function note_transp(s) {
	var	i, j, n, d, a, acc, i1, i3, i4, note,
		m = s.nhd,
		sf_old = curvoice.okey.k_sf,
		i2 = curvoice.ckey.k_sf - sf_old,
		dp = cgd2cde[(i2 + 4 * 7) % 7],
		t = curvoice.vtransp

	if (t < 0 && dp != 0)
		dp -= 7;
	dp += ((t / 3 / 12) | 0) * 7
	for (i = 0; i <= m; i++) {
		note = s.notes[i];

		// pitch
		n = note.pit;
		note.pit += dp;
		note.apit = note.pit;

		// accidental
		i1 = cde2fcg[(n + 5 + 16 * 7) % 7];	/* fcgdaeb */
		a = note.acc
		if (!a) {
			if (!curvoice.okey.a_acc) {
				if (sf_old > 0) {
					if (i1 < sf_old - 1)
						a = 1	// sharp
				} else if (sf_old < 0) {
					if (i1 >= sf_old + 6)
						a = -1	// flat
				}
			} else {
				for (j = 0; j < curvoice.okey.a_acc.length; j++) {
					acc = curvoice.okey.a_acc[j]
					if ((n + 16 * 7 - acc.pit) % 7 == 0) {
						a = acc.acc
						break
					}
				}
			}
		}
		i3 = i1 + i2
		if (a && a != 3)				// ! natural
			i3 += a * 7;

		i1 = ((((i3 + 1 + 21) / 7) | 0) + 2 - 3 + 32 * 5) % 5;
		a = acc2[i1]
		if (note.acc) {
			;
		} else if (curvoice.ckey.k_none) {
			if (a == 3		// natural
			 || acc_same_pitch(note.pit))
				continue
		} else if (curvoice.ckey.a_acc) {	/* acc list */
			i4 = cgd2cde[(i3 + 16 * 7) % 7]
			for (j = 0; j < curvoice.ckey.a_acc.length; j++) {
				if ((i4 + 16 * 7 - curvoice.ckey.a_acc[j].pits) % 7
							== 0)
					break
			}
			if (j < curvoice.ckey.a_acc.length)
				continue
		} else {
			continue
		}
		i1 = note.acc;
		d = note.micro_d
		if (d				/* microtone */
		 && i1 != a) {			/* different accidental type */
			n = note.micro_n
//fixme: double sharps/flats ?*/
//fixme: does not work in all cases (tied notes, previous accidental)
			switch (a) {
			case 3:			// natural
				if (n > d / 2) {
					n -= d / 2;
					note.micro_n = n;
					a = i1
				} else {
					a = -i1
				}
				break
			case 2:			// double sharp
				if (n > d / 2) {
					note.pit += 1;
					note.apit = note.pit;
					n -= d / 2
				} else {
					n += d / 2
				}
				a = i1;
				note.micro_n = n
				break
			case -2:		// double flat
				if (n >= d / 2) {
					note.pit -= 1;
					note.apit = note.pit;
					n -= d / 2
				} else {
					n += d / 2
				}
				a = i1;
				note.micro_n = n
				break
			}
		}
		note.acc = a
	}
}

/* sort the notes of the chord by pitch (lowest first) */
function sort_pitch(s) {
	s.notes = s.notes.sort(function(n1, n2) {
			return n1.pit - n2.pit
		})
}
function new_note(grace, tp_fact) {
	var	note, s, in_chord, c, dcn, type,
		i, n, s2, nd, res, num, dur,
		sl1 = 0,
		line = parse.line,
		a_dcn_sav = a_dcn;	// save parsed decoration names

	a_dcn = null;
	parse.stemless = false;
	s = {
		type: C.NOTE,
		fname: parse.fname,
		stem: 0,
		multi: 0,
		nhd: 0,
		xmx: 0
	}
	s.istart = parse.bol + line.index

	if (curvoice.color)
		s.color = curvoice.color

	if (grace) {
		s.grace = true
	} else {
		if (a_gch)
			gch_build(s)
		if (parse.repeat_n) {
			s.repeat_n = parse.repeat_n;
			s.repeat_k = parse.repeat_k;
			parse.repeat_n = 0
		}
	}
	c = line.char()
	switch (c) {
	case 'X':
		s.invis = true
	case 'Z':
		s.type = C.MREST;
		c = line.next_char()
		s.nmes = (c > '0' && c <= '9') ? line.get_int() : 1;
		s.dur = curvoice.wmeasure * s.nmes

		// ignore if in second voice
		if (curvoice.second) {
			curvoice.time += s.dur
			return //null
		}
		break
	case 'y':
		s.type = C.SPACE;
		s.invis = true;
		s.dur = 0;
		c = line.next_char()
		if (c >= '0' && c <= '9')
			s.width = line.get_int()
		else
			s.width = 10
		break
	case 'x':
		s.invis = true
	case 'z':
		s.type = C.REST;
		line.index++;
		nd = parse_dur(line);
		s.dur_orig = ((curvoice.ulen < 0) ?
					15120 :	// 2*2*2*2*3*3*3*5*7
					curvoice.ulen) * nd[0] / nd[1];
		s.dur = s.dur_orig * curvoice.dur_fact;
		s.notes = [{
			pit: 18,
			dur: s.dur_orig
		}]
		break
	case '[':			// chord
		in_chord = true;
		c = line.next_char()
		// fall thru
	default:			// accidental, chord, note
		if (curvoice.uscale)
			s.uscale = curvoice.uscale;
		s.notes = []

		// loop on the chord
		while (1) {

			// when in chord, get the slurs and decorations
			if (in_chord) {
				while (1) {
					if (!c)
						break
					i = c.charCodeAt(0);
					if (i >= 128) {
						syntax(1, errs.not_ascii)
						return //null
					}
					type = char_tb[i]
					switch (type[0]) {
					case '(':
						sl1 <<= 4;
						sl1 += parse_vpos();
						c = line.char()
						continue
					case '!':
						if (!a_dcn)
							a_dcn = []
						if (type.length > 1) {
							a_dcn.push(type.slice(1, -1))
						} else {
							dcn = ""
							while (1) {
								c = line.next_char()
								if (!c) {
									syntax(1, "No end of decoration")
									return //null
								}
								if (c == '!')
									break
								dcn += c
							}
							a_dcn.push(dcn)
						}
						c = line.next_char()
						continue
					}
					break
				}
			}
			note = parse_basic_note(line,
					s.grace ? C.BLEN / 4 :
					curvoice.ulen < 0 ?
						15120 :	// 2*2*2*2*3*3*3*5*7
						curvoice.ulen)
			if (!note)
				return //null

			// transpose
			if (curvoice.octave)
				note.apit = note.pit += curvoice.octave * 7
			if (curvoice.ottava)
				note.pit += curvoice.ottava
			if (sl1) {
				note.sl1 = sl1
				if (s.sl1)
					s.sl1++
				else
					s.sl1 = 1;
				sl1 = 0
			}
			if (a_dcn) {
				note.a_dcn = a_dcn;
				a_dcn = null
			}
			s.notes.push(note)
			if (!in_chord)
				break

			// in chord: get the ending slurs and the ties
			c = line.char()
			while (1) {
				switch (c) {
				case ')':
					if (note.sl2)
						note.sl2++
					else
						note.sl2 = 1
					if (s.sl2)
						s.sl2++
					else
						s.sl2 = 1;
					c = line.next_char()
					continue
				case '-':
					note.ti1 = parse_vpos();
					s.ti1 = true;
					c = line.char()
					continue
				case '.':
					c = line.next_char()
					if (c != '-') {
						syntax(1, "Misplaced dot")
						break
					}
					continue
				}
				break
			}
			if (c == ']') {
				line.index++;

				// adjust the chord duration
				nd = parse_dur(line);
				s.nhd = s.notes.length - 1
				for (i = 0; i <= s.nhd ; i++) {
					note = s.notes[i];
					note.dur = note.dur * nd[0] / nd[1]
				}
				break
			}
		}

		// the duration of the chord is the duration of the 1st note
		s.dur_orig = s.notes[0].dur;
		s.dur = s.notes[0].dur * curvoice.dur_fact
	}
	if (s.grace && s.type != C.NOTE) {
		syntax(1, "Not a note in grace note sequence")
		return //null
	}

	if (s.notes) {				// if note or rest
		if (!s.grace) {
			switch (curvoice.pos.stm) {
			case C.SL_ABOVE: s.stem = 1; break
			case C.SL_BELOW: s.stem = -1; break
			case C.SL_HIDDEN: s.stemless = true; break
			}

			// adjust the symbol duration
			s.dur *= tp_fact;
			num = curvoice.brk_rhythm
			if (num) {
				curvoice.brk_rhythm = 0;
				s2 = curvoice.last_note
				if (num > 0) {
					n = num * 2 - 1;
					s.dur = s.dur * n / num;
					s.dur_orig = s.dur_orig * n / num
					for (i = 0; i <= s.nhd; i++)
						s.notes[i].dur =
							s.notes[i].dur * n / num;
					s2.dur /= num;
					s2.dur_orig /= num
					for (i = 0; i <= s2.nhd; i++)
						s2.notes[i].dur /= num
				} else {
					num = -num;
					n = num * 2 - 1;
					s.dur /= num;
					s.dur_orig /= num
					for (i = 0; i <= s.nhd; i++)
						s.notes[i].dur /= num;
					s2.dur = s2.dur * n / num;
					s2.dur_orig = s2.dur_orig * n / num
					for (i = 0; i <= s2.nhd; i++)
						s2.notes[i].dur =
							s2.notes[i].dur * n / num
				}
				curvoice.time = s2.time + s2.dur;
				res = identify_note(s2, s2.dur_orig);
				s2.head = res[0];
				s2.dots = res[1];
				s2.nflags = res[2]
				if (s2.nflags <= -2)
					s2.stemless = true
				else
					delete s2.stemless

				// adjust the time of the grace notes, bars...
				for (s2 = s2.next; s2; s2 = s2.next)
					s2.time = curvoice.time
			}
		} else {		/* grace note - adjust its duration */
			var div = curvoice.key.k_bagpipe ? 8 : 4

			for (i = 0; i <= s.nhd; i++)
				s.notes[i].dur /= div;
			s.dur /= div;
			s.dur_orig /= div
			if (grace.stem)
				s.stem = grace.stem
		}

		// set the symbol parameters
		if (s.type == C.NOTE) {
			res = identify_note(s, s.dur_orig);
			s.head = res[0];
			s.dots = res[1];
			s.nflags = res[2]
			if (s.nflags <= -2)
				s.stemless = true
		} else {					// rest

			/* change the figure of whole measure rests */
//--fixme: does not work in sample.abc because broken rhythm on measure bar
			dur = s.dur_orig
			if (dur == curvoice.wmeasure) {
				if (dur < C.BLEN * 2)
					dur = C.BLEN
				else if (dur < C.BLEN * 4)
					dur = C.BLEN * 2
				else
					dur = C.BLEN * 4
			}
			res = identify_note(s, dur);
			s.head = res[0];
			s.dots = res[1];
			s.nflags = res[2]
		}
		curvoice.last_note = s
	}

	sym_link(s)

	if (s.type == C.NOTE) {
		if (curvoice.vtransp)
			note_transp(s)
		if (curvoice.map
		 && maps[curvoice.map]) {
			for (i = 0; i <= s.nhd; i++)
				set_map(s.notes[i])
		}
	}

	if (cfmt.shiftunison)
		s.shiftunison = cfmt.shiftunison
	if (!grace) {
		if (!curvoice.lyric_restart)
			curvoice.lyric_restart = s
		if (!curvoice.sym_restart)
			curvoice.sym_restart = s
	}

	if (a_dcn_sav)
		deco_cnv(a_dcn_sav, s, s.prev)
	if (parse.stemless)
		s.stemless = true
	s.iend = parse.bol + line.index
	return s
}

// characters in the music line (ASCII only)
var nil = ["0"]
var char_tb = [
	nil, nil, nil, nil,		/* 00 - .. */
	nil, nil, nil, nil,
	nil, " ", "\n", nil,		/* . \t \n . */
	nil, nil, nil, nil,
	nil, nil, nil, nil,
	nil, nil, nil, nil,
	nil, nil, nil, nil,
	nil, nil, nil, nil,		/* .. - 1f */
	" ", "!", '"', "i",		/* (sp) ! " # */
	"\n", nil, "&", nil,		/* $ % & ' */
	"(", ")", "i", nil,		/* ( ) * + */
	nil, "-", "!dot!", nil,		/* , - . / */
	nil, nil, nil, nil, 		/* 0 1 2 3 */
	nil, nil, nil, nil, 		/* 4 5 6 7 */
	nil, nil, "|", "i",		/* 8 9 : ; */
	"<", "n", "<", "i",		/* < = > ? */
	"i", "n", "n", "n",		/* @ A B C */
	"n", "n", "n", "n", 		/* D E F G */
	"!fermata!", "d", "d", "d",	/* H I J K */
	"!emphasis!", "!lowermordent!",
		"d", "!coda!",		/* L M N O */
	"!uppermordent!", "d",
		"d", "!segno!",		/* P Q R S */
	"!trill!", "d", "d", "d",	/* T U V W */
	"n", "d", "n", "[",		/* X Y Z [ */
	"\\","|", "n", "n",		/* \ ] ^ _ */
	"i", "n", "n", "n",	 	/* ` a b c */
	"n", "n", "n", "n",	 	/* d e f g */
	"d", "d", "d", "d",		/* h i j k */
	"d", "d", "d", "d",		/* l m n o */
	"d", "d", "d", "d",		/* p q r s */
	"d", "!upbow!",
		"!downbow!", "d",	/* t u v w */
	"n", "n", "n", "{",		/* x y z { */
	"|", "}", "!gmark!", nil,	/* | } ~ (del) */
]

function parse_music_line() {
	var	grace, last_note_sav, a_dcn_sav, no_eol, s,
		tp_a = [], tp,
		tpn = -1,
		tp_fact = 1,
		slur_start = 0,
		line = parse.line

	// check if a transposing macro matches a source sequence
	// if yes return the base note
	function check_mac(m) {
	    var	i, j, b

		for (i = 1, j = line.index + 1; i < m.length; i++, j++) {
			if (m[i] == line.buffer[j])
				continue
			if (m[i] != 'n')		// search the base note
				return //null
			b = ntb.indexOf(line.buffer[j])
			if (b < 0)
				return //null
			while (line.buffer[j + 1] == "'") {
				b += 7;
				j++
			}
			while (line.buffer[j + 1] == ',') {
				b -= 7;
				j++
			}
		}
		line.index = j
		return b
	}

	// expand a transposing macro
	function expand(m, b) {
	    var	c, d,
		r = "",				// result
		n = m.length

		for (i = 0; i < n; i++) {
			c = m[i]
			if (c >= 'h' && c <= 'z') {
				d = b + c.charCodeAt(0) - 'n'.charCodeAt(0)
				c = ""
				while (d < 0) {
					d += 7;
					c += ','
				}
				while (d > 14) {
					d -= 7;
					c += "'"
				}
				r += ntb[d] + c
			} else {
				r += c
			}
		}
		return r
	} // expand()

	// parse a macro
	function parse_mac(m, b) {
	    var	seq,
		line_sav = line,
		istart_sav = parse.istart;

		parse.line = line = new scanBuf();
		parse.istart += line_sav.index;
		line.buffer = b ? expand(m, b) : m;
		parse_seq(true);
		parse.line = line = line_sav;
		parse.istart = istart_sav
	}

	// parse a music sequence
	function parse_seq(in_mac) {
	    var	c, idx, type, k, s, dcn, i, n, text

		while (1) {
			c = line.char()
			if (!c)
				break

			// special case for '.' (dot)
			if (c == '.') {
				switch (line.buffer[line.index + 1]) {
				case '(':
				case '-':
				case '|':
					c = line.next_char()
					break
				}
			}

			idx = c.charCodeAt(0);
			if (idx >= 128) {
				syntax(1, errs.not_ascii);
				line.index++
				break
			}

			// check if start of a macro
			if (!in_mac && maci[idx]) {
				n = 0
				for (k in mac) {
					if (!mac.hasOwnProperty(k)
					 || k[0] != c)
						continue
					if (k.indexOf('n') < 0) {
						if (line.buffer.indexOf(k, line.index)
								!= line.index)
							continue
						line.index += k.length
					} else {
						n = check_mac(k)
						if (!n)
							continue
					}
					parse_mac(mac[k], n);
					n = 1
					break
				}
				if (n)
					continue
			}

			type = char_tb[idx]
			switch (type[0]) {
			case ' ':			// beam break
				s = curvoice.last_note
				if (s) {
					s.beam_end = true
					if (grace)
						grace.gr_shift = true
				}
				break
			case '\n':			// line break
				if (cfmt.barsperstaff)
					break
				if (par_sy.voices[curvoice.v].range == 0
				 && curvoice.last_sym)
					curvoice.last_sym.eoln = true
				break
			case '&':			// voice overlay
				if (grace) {
					syntax(1, errs.bad_char, c)
					break
				}
				c = line.next_char()
				if (c == ')') {
					get_vover(')')
					break
				}
				get_vover('&')
				continue
			case '(':			// slur start - tuplet - vover
				c = line.next_char()
				if (c > '0' && c <= '9') {	// tuplet
				    var	pplet = line.get_int(),
					qplet = qplet_tb[pplet],
					rplet = pplet,
					c = line.char()

					if (c == ':') {
						c = line.next_char()
						if (c > '0' && c <= '9') {
							qplet = line.get_int();
							c = line.char()
						}
						if (c == ':') {
							c = line.next_char()
							if (c > '0' && c <= '9') {
								rplet = line.get_int();
								c = line.char()
							} else {
								syntax(1, "Invalid 'r' in tuplet")
								continue
							}
						}
					}
					if (qplet == 0 || qplet == undefined)
						qplet = (curvoice.wmeasure % 9) == 0 ?
									3 : 2;
					tp = tp_a[++tpn]
					if (!tp)
						tp_a[tpn] = tp = {}
					tp.p = pplet;
					tp.q = qplet;
					tp.r = rplet;
					tp.f = cfmt.tuplets;
					tp.fact	= tp_fact * qplet / pplet;
					tp_fact = tp.fact
					continue
				}
				if (c == '&') {		// voice overlay start
					if (grace) {
						syntax(1, errs.bad_char, c)
						break
					}
					get_vover('(')
					break
				}
				slur_start <<= 4;
				line.index--;
				slur_start += parse_vpos()
				continue
			case ')':			// slur end
				if (curvoice.ignore)
					break
				s = curvoice.last_sym
				if (s) {
					switch (s.type) {
					case C.NOTE:
					case C.REST:
					case C.SPACE:
						break
					default:
						s = null
						break
					}
				}
				if (!s) {
					syntax(1, errs.bad_char, c)
					break
				}
				if (s.slur_end)
					s.slur_end++
				else
					s.slur_end = 1
				break
			case '!':			// start of decoration
				if (!a_dcn)
					a_dcn = []
				if (type.length > 1) {	// decoration letter
					dcn = type.slice(1, -1)
				} else {
					dcn = "";
					i = line.index		// in case no deco end
					while (1) {
						c = line.next_char()
						if (!c)
							break
						if (c == '!')
							break
						dcn += c
					}
					if (!c) {
						line.index = i;
						syntax(1, "No end of decoration")
						break
					}
				}
				if (ottava[dcn])
					set_ottava(dcn)
				a_dcn.push(dcn)
				break
			case '"':
				parse_gchord(type)
				break
			case '-':
			    var tie_pos = 0

				if (!curvoice.last_note
				 || curvoice.last_note.type != C.NOTE) {
					syntax(1, "No note before '-'")
					break
				}
				tie_pos = parse_vpos();
				s = curvoice.last_note
				for (i = 0; i <= s.nhd; i++) {
					if (!s.notes[i].ti1)
						s.notes[i].ti1 = tie_pos
					else if (s.nhd == 0)
						syntax(1, "Too many ties")
				}
				s.ti1 = true
				if (grace)
					grace.ti1 = true
				continue
			case '[':
			    var c_next = line.buffer[line.index + 1]

				if ('|[]: "'.indexOf(c_next) >= 0
				 || (c_next >= '1' && c_next <= '9')) {
					if (grace) {
						syntax(1, errs.bar_grace)
						break
					}
					new_bar()
					continue
				}
				if (line.buffer[line.index + 2] == ':') {
					i = line.buffer.indexOf(']', line.index + 1)
					if (i < 0) {
						syntax(1, "Lack of ']'")
						break
					}
					text = line.buffer.slice(line.index + 3, i).trim()

					parse.istart = parse.bol + line.index;
					parse.iend = parse.bol + ++i;
					line.index = 0;
					do_info(c_next, text);
					line.index = i
					continue
				}
				// fall thru ('[' is start of chord)
			case 'n':				// note/rest
				s = new_note(grace, tp_fact)
				if (!s)
					continue
				if (s.type == C.NOTE) {
					if (slur_start) {
						s.slur_start = slur_start;
						slur_start = 0
					}
				}
				if (grace) {
//fixme: tuplets in grace notes?
					if (tpn >= 0)
						s.in_tuplet = true
					continue
				}

				// set the tuplet values
				if (tpn >= 0 && s.notes) {
					s.in_tuplet = true
//fixme: only one nesting level
					if (tpn > 0) {
						if (tp_a[0].p) {
							s.tp0 = tp_a[0].p;
							s.tq0 = tp_a[0].q;
							s.tf = tp_a[0].f;
							tp_a[0].p = 0
						}
						tp_a[0].r--
						if (tp.p) {
							s.tp1 = tp.p;
							s.tq1 = tp.q;
							s.tf = tp.f;
							tp.p = 0
						}
					} else if (tp.p) {
						s.tp0 = tp.p;
						s.tq0 = tp.q;
						s.tf = tp.f;	// %%tuplets
						tp.p = 0
					}
					tp.r--
					if (tp.r == 0) {
						if (tpn-- == 0) {
							s.te0 = true;
							tp_fact = 1;
							curvoice.time = Math.round(curvoice.time);
							s.dur = curvoice.time - s.time
						} else {
							s.te1 = true;
							tp = tp_a[0]
							if (tp.r == 0) {
								tpn--;
								s.te0 = true;
								tp_fact = 1;
								curvoice.time = Math.round(curvoice.time);
								s.dur = curvoice.time - s.time
							} else {
								tp_fact = tp.fact
							}
						}
					}
				}
				continue
			case '<':				/* '<' and '>' */
				if (!curvoice.last_note) {
					syntax(1, "No note before '<'")
					break
				}
				if (grace) {
					syntax(1, "Cannot have a broken rhythm in grace notes")
					break
				}
				n = c == '<' ? 1 : -1
				while (c == '<' || c == '>') {
					n *= 2;
					c = line.next_char()
				}
				curvoice.brk_rhythm = n
				continue
			case 'i':				// ignore
				break
			case '{':
				if (grace) {
					syntax(1, "'{' in grace note")
					break
				}
				last_note_sav = curvoice.last_note;
				curvoice.last_note = null;
				a_dcn_sav = a_dcn;
				a_dcn = undefined;
				grace = {
					type: C.GRACE,
					fname: parse.fname,
					istart: parse.bol + line.index,
					dur: 0,
					multi: 0
				}
				switch (curvoice.pos.gst) {
				case C.SL_ABOVE: grace.stem = 1; break
				case C.SL_BELOW: grace.stem = -1; break
				case C.SL_HIDDEN: grace.stem = 2; break	/* opposite */
				}
				sym_link(grace);
				c = line.next_char()
				if (c == '/') {
					grace.sappo = true	// acciaccatura
					break
				}
				continue
			case '|':
				if (grace) {
					syntax(1, errs.bar_grace)
					break
				}
				c = line.buffer[line.index - 1];
				new_bar()
				if (c == '.')
					curvoice.last_sym.bar_dotted = true
				continue
			case '}':
				s = curvoice.last_note
				if (!grace || !s) {
					syntax(1, errs.bad_char, c)
					break
				}
				if (a_dcn)
					syntax(1, "Decoration ignored");
				s.gr_end = true;
				grace.extra = grace.next;
				grace.extra.prev = null;
				grace.next = null;
				curvoice.last_sym = grace;
				grace = null
				if (!s.prev			// if one grace note
				 && !curvoice.key.k_bagpipe) {
					for (i = 0; i <= s.nhd; i++)
						s.notes[i].dur *= 2;
					s.dur *= 2;
					s.dur_orig *= 2
					var res = identify_note(s, s.dur_orig);
					s.head = res[0];
					s.dots = res[1];
					s.nflags = res[2]
				}
				curvoice.last_note = last_note_sav;
				a_dcn = a_dcn_sav
				break
			case "\\":
				c = line.buffer[line.index + 1]
				if (!c) {
					no_eol = true
					break
				}
				// fall thru
			default:
				syntax(1, errs.bad_char, c)
				break
			}
			line.index++
		}
	} // parse_seq()

	if (parse.state != 3) {		// if not in tune body
		if (parse.state != 2)
			return
		goto_tune()
	}

	parse_seq()

	if (tpn >= 0) {
		syntax(1, "No end of tuplet")
		for (s = curvoice.last_note; s; s = s.prev) {
			if (s.tp1)
				s.tp1 = 0
			if (s.tp0) {
				s.tp0 = 0
				break
			}
		}
	}
	if (grace) {
		syntax(1, "No end of grace note sequence");
		curvoice.last_sym = grace.prev;
		curvoice.last_note = last_note_sav
		if (grace.prev)
			grace.prev.next = null
	}
	if (cfmt.breakoneoln && curvoice.last_note)
		curvoice.last_note.beam_end = true
	if (no_eol || cfmt.barsperstaff)
		return
	if (char_tb['\n'.charCodeAt(0)] == '\n'
	 && par_sy.voices[curvoice.v].range == 0
	 && curvoice.last_sym)
		curvoice.last_sym.eoln = true
//--fixme: cfmt.alignbars
}
// abc2svg - subs.js - text output
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

/* width of characters according to the encoding */
/* these are the widths for Times-Roman, extracted from the 'a2ps' package */

var cw_tb = new Float32Array([
	.000,.000,.000,.000,.000,.000,.000,.000,	// 00
	.000,.000,.000,.000,.000,.000,.000,.000,
	.000,.000,.000,.000,.000,.000,.000,.000,	// 10
	.000,.000,.000,.000,.000,.000,.000,.000,
	.250,.333,.408,.500,.500,.833,.778,.333,	// 20
	.333,.333,.500,.564,.250,.564,.250,.278,
	.500,.500,.500,.500,.500,.500,.500,.500,	// 30
	.500,.500,.278,.278,.564,.564,.564,.444,
	.921,.722,.667,.667,.722,.611,.556,.722,	// 40
	.722,.333,.389,.722,.611,.889,.722,.722,
	.556,.722,.667,.556,.611,.722,.722,.944,	// 50
	.722,.722,.611,.333,.278,.333,.469,.500,
	.333,.444,.500,.444,.500,.444,.333,.500,	// 60
	.500,.278,.278,.500,.278,.778,.500,.500,
	.500,.500,.333,.389,.278,.500,.500,.722,	// 70
	.500,.500,.444,.480,.200,.480,.541,.500
])

/* -- return the character width -- */
function cwid(c) {
	var i = c.charCodeAt(0)		// utf-16

	if (i >= 0x80) {		// if not ASCII
		if (i >= 0x300 && i < 0x370)
			return 0;	// combining diacritical mark
		i = 0x61		// 'a'
	}
	return cw_tb[i]
}

// estimate the width and height of a string
function strwh(str) {
    var	font = gene.curfont,
	swfac = font.swfac,
	h = font.size,
	w = 0,
	i, j, c,
	n = str.length

	for (i = 0; i < n; i++) {
		c = str[i]
		switch (c) {
		case '$':
			c = str[i + 1]
			if (c == '0') {
				font = gene.deffont
			} else if (c >= '1' && c <= '9') {
				font = get_font("u" + c)
			} else {
				c = '$'
				break
			}
			i++;
			swfac = font.swfac
			if (font.size > h)
				h = font.size
			continue
		case '&':
			j = str.indexOf(';', i)
			if (j > 0 && j - i < 10) {
				i = j;
				c = 'a'		// XML character reference
			}
			break
		}
		w += cwid(c) * swfac
	}
	gene.curfont = font
	return [w, h]
}

// set the default and current font
function set_font(xxx) {
	if (typeof xxx == "string")
		xxx = get_font(xxx);
	gene.curfont = gene.deffont = xxx
}

// output a string handling the font changes
function out_str(str) {
	var	n_font,
		o_font = gene.curfont,
		c_font = o_font;

	output += str.replace(/<|>|&.*?;|&|  |\$./g, function(c){
			switch (c[0]) {
			case '<': return "&lt;"
			case '>': return "&gt;"
			case '&':
				if (c == '&')
					 return "&amp;"
				return c
			case ' ':
				return '  '		// space + nbspace
			case '$':
				if (c[1] == '0') {
					n_font = gene.deffont;
					use_font(n_font)
				} else if (c[1] >= '1' && c[1] <= '9')
					n_font = get_font("u" + c[1])
				else
					return c
				c = ''
				if (n_font == c_font)
					return c
				if (c_font != o_font)
					c = "</tspan>";
				c_font = n_font
				if (c_font == o_font)
					return c
				return c + '<tspan\n\tclass="' +
						font_class(n_font) + '">'
			}
		})
	if (c_font != o_font) {
		output += "</tspan>";
		gene.curfont = c_font	// keep current font for next paragraph
	}
}

// output a string, handling the font changes
// the action is:
//	'c' align center
//	'r' align right
//	'\t' handle the tabulations - dx is the space between the fields
//	'j' justify - line_w is the line width
//	otherwise align left
function xy_str(x, y, str,
		 action,
		 line_w) {
    var	h = strwh(str)[1];
	y += h * .2;			// a bit upper for the descent
	output += '<text class="' + font_class(gene.curfont) + '" x="';
	out_sxsy(x, '" y="', y)
	switch (action) {
	case 'c':
		output += '" text-anchor="middle">'
		break
	case 'j':
		output += '" textLength="' + line_w.toFixed(2) + '">'
		break
	case 'r':
		output += '" text-anchor="end">'
		break
	default:
		output += '">'
		break
	}
	out_str(str);
	output += "</text>\n"
}

// output a string in a box
function xy_str_b(x, y, str) {
// not in the SVG documentation,
// but this works for almost all browsers but firefox
//	output += '<g style="outline: solid black;\
// outline-width: 1px">\n';
//	xy_str(x, y, str, action, line_w);
//	output += '</g>\n'
    var	wh = strwh(str);

	output += '<rect class="stroke" x="';
	out_sxsy(x - 2, '" y="', y + wh[1] + 1);
	output += '" width="' + (wh[0] + 4).toFixed(2) +
		'" height="' + (wh[1] + 3).toFixed(2) +
		'"/>\n';
	xy_str(x, y, str)
}

/* -- move trailing "The" to front, set to uppercase letters or add xref -- */
function trim_title(title, is_subtitle) {
	var i

	if (cfmt.titletrim) {
		i = title.lastIndexOf(", ")
		if (i < 0 || title[i + 2] < 'A' || title[i + 2] > 'Z') {
			i = 0
		} else if (cfmt.titletrim == true) {	// compatibility
			if (i < title.length - 7
			 || title.indexOf(' ', i + 3) >= 0)
				i = 0
		} else {
			if (i < title.length - cfmt.titletrim - 2)
				i = 0
		}
	}
	if (!is_subtitle
	 && cfmt.writefields.indexOf('X') >= 0)
		title = info.X + '.  ' + title
	if (i)
		title = title.slice(i + 2).trim() + ' ' + title.slice(0, i)
	if (cfmt.titlecaps)
		return title.toUpperCase()
	return title
}

// return the width of the music line
function get_lwidth() {
	return (img.width - img.lm - img.rm
					- 2)	// for bar thickness at eol
			/ cfmt.scale
}

// header generation functions
function write_title(title, is_subtitle) {
    var	font, h

	if (!title)
		return
	set_page();
	title = trim_title(title, is_subtitle)
	if (is_subtitle) {
		set_font("subtitle");
		h = cfmt.subtitlespace
	} else {
		set_font("title");
		h = cfmt.titlespace
	}
	vskip(strwh(title)[1] + h)
	if (cfmt.titleleft)
		xy_str(0, 0, title)
	else
		xy_str(get_lwidth() / 2, 0, title, "c")
}

/* -- output a header format '111 (222)' -- */
function put_inf2r(x, y, str1, str2, action) {
	if (!str1) {
		if (!str2)
			return
		str1 = str2;
		str2 = null
	}
	if (!str2)
		xy_str(x, y, str1, action)
	else
		xy_str(x, y, str1 + ' (' + str2 + ')', action)
}

// let vertical room for a text line
function str_skip(str) {
	vskip(strwh(str)[1] * cfmt.lineskipfac)
}

/* -- write a text block (%%begintext / %%text / %%center) -- */
function write_text(text, action) {
	if (action == 's')
		return				// skip
	set_font("text");
	set_page();
	var	strlw = get_lwidth(),
		sz = gene.curfont.size,
		lineskip = sz * cfmt.lineskipfac,
		parskip = sz * cfmt.parskipfac,
		p_start = block.started ? function(){} : blk_out,
		p_flush = block.started ? svg_flush : blk_flush,
		i, j, x, words, w, k, ww, str;

	p_start()
	switch (action) {
	default:
//	case 'c':
//	case 'r':
		switch (action) {
		case 'c': x = strlw / 2; break
		case 'r': x = strlw; break
		default: x = 0; break
		}
		j = 0
		while (1) {
			i = text.indexOf('\n', j)
			if (i < 0) {
				str = text.slice(j);
				str_skip(str);
				xy_str(x, 0, str, action)
				break
			}
			if (i == j) {			// new paragraph
				vskip(parskip);
				p_flush();
				use_font(gene.curfont)
				while (text[i + 1] == '\n') {
					vskip(lineskip);
					i++
				}
				if (i == text.length)
					break
				p_start()
			} else {
				str = text.slice(j, i);
				str_skip(str);
				xy_str(x, 0, str, action)
			}
			j = i + 1
		}
		vskip(parskip);
		p_flush()
		break
	case 'f':
	case 'j':
		j = 0
		while (1) {
			i = text.indexOf('\n\n', j)
			if (i < 0)
				words = text.slice(j)
			else
				words = text.slice(j, i);
			words = words.split(/\s+/);
			w = k = 0
			for (j = 0; j < words.length; j++) {
				ww = strwh(words[j] + ' ')[0];
				w += ww
				if (w >= strlw) {
					str = words.slice(k, j).join(' ');
					str_skip(str);
					xy_str(0, 0, str, action, strlw);
					k = j;
					w = ww
				}
			}
			if (w != 0) {
				str = words.slice(k).join(' ');
				str_skip(str);
				xy_str(0, 0, str)
			}
			vskip(parskip);
			p_flush()
			if (i < 0)
				break
			while (text[i + 2] == '\n') {
				vskip(lineskip);
				i++
			}
			if (i == text.length)
				break
			p_start();
			use_font(gene.curfont);
			j = i + 2
		}
		break
	}
}

/* -- output the words after tune -- */
function put_words(words) {
	var p, i, j, n, nw, i2, i_end, have_text;

	// output a line of words after tune
	function put_wline(p, x, right) {
		var i = 0, j, k

		if (p[i] == '$' && p[i +  1] >= '0' && p[i + 1] <= '9')
			i += 2;
		k = 0;
		j = i
		if ((p[i] >= '0' && p[i] <= '9') || p[i + 1] == '.') {
			while (i < p.length) {
				i++
				if (p[i] == ' '
				 || p[i - 1] == ':'
				 || p[i - 1] == '.')
					break
			}
			k = i
			while (p[i] == ' ')
				i++
		}

		if (k != 0)
			xy_str(x, 0, p.slice(j, k), 'r')
		if (i < p.length)
			xy_str(x + 5, 0, p.slice(i), 'l')
		return i >= p.length && k == 0
	} // put_wline()

	blk_out();
	set_font("words")

	/* see if we may have 2 columns */
	var	middle = get_lwidth() / 2,
		max2col = (middle - 45.) / (cwid('a') * gene.curfont.swfac);
	n = 0;
	words = words.split('\n');
	nw = words.length
	for (i = 0; i < nw; i++) {
		p = words[i]
/*fixme:utf8*/
		if (p.length > max2col) {
			n = 0
			break
		}
		if (!p) {
			if (have_text) {
				n++;
				have_text = false
			}
		} else {
			have_text = true
		}
	}
	if (n > 0) {
		i = n = ((n + 1) / 2) | 0;
		have_text = false
		for (i_end = 0; i_end < nw; i_end++) {
			p = words[i_end];
			j = 0
			while (p[j] == ' ')
				j++
			if (j == p.length) {
				if (have_text && --i <= 0)
					break
				have_text = false
			} else {
				have_text = true
			}
		}
		i2 = i_end + 1
	} else {
		i2 = i_end = nw
	}

	/* output the text */
	vskip(cfmt.wordsspace)

	for (i = 0; i < i_end || i2 < nw; i++) {
//fixme:should also permit page break on stanza start
		if (i < i_end && words[i].length == 0) {
			blk_out();
			use_font(gene.curfont)
		}
		vskip(cfmt.lineskipfac * gene.curfont.size)
		if (i < i_end)
			put_wline(words[i], 45., 0)
		if (i2 < nw) {
			if (put_wline(words[i2], 20. + middle, 1)) {
				if (--n == 0) {
					if (i < i_end) {
						n++
					} else if (i2 < words.length - 1) {

						/* center the last words */
/*fixme: should compute the width average.. */
						middle *= .6
					}
				}
			}
			i2++
		}
	}
}

/* -- output history -- */
function put_history() {
	var	i, j, c, str, font, h, w, head,
		names = cfmt.infoname.split("\n"),
		n = names.length

	for (i = 0; i < n; i++) {
		c = names[i][0]
		if (cfmt.writefields.indexOf(c) < 0)
			continue
		str = info[c]
		if (!str)
			continue
		if (!font) {
			font = true;
			set_font("history");
			vskip(cfmt.textspace);
			h = gene.curfont.size * cfmt.lineskipfac
		}
		head = names[i].slice(2)
		if (head[0] == '"')
			head = head.slice(1, -1);
		vskip(h);
		xy_str(0, 0, head);
		w = strwh(head)[0];
		str = str.split('\n');
		xy_str(w, 0, str[0])
		for (j = 1; j < str.length; j++) {
			vskip(h);
			xy_str(w, 0, str[j])
		}
		vskip(h * .3);
		blk_out();
		use_font(gene.curfont)
	}
}

/* -- write heading with format -- */
var info_font_init = {
	A: "info",
	C: "composer",
	O: "composer",
	P: "parts",
	Q: "tempo",
	R: "info",
	T: "title",
	X: "title"
}
function write_headform(lwidth) {
	var	c, font, font_name, align, x, y, sz,
		info_val = {},
		info_font = clone(info_font_init),
		info_sz = {
			A: cfmt.infospace,
			C: cfmt.composerspace,
			O: cfmt.composerspace,
			R: cfmt.infospace
		},
		info_nb = {}

	// compress the format
	var	fmt = "",
		p = cfmt.titleformat,
		j = 0,
		i = 0

	while (1) {
		while (p[i] == ' ')
			i++
		if (i >= p.length)
			break
		c = p[i++]
		if (c < 'A' || c > 'Z') {
			if (c == '+') {
				if (fmt.length == 0
				 || fmt.slice(-1) == '+')
					continue
				fmt = fmt.slice(0, -1) + '+'
			} else if (c == ',') {
				if (fmt.slice(-1) == '+')
					fmt = fmt.slice(0, -1) + 'l'
				fmt += '\n'
			}
			continue
		}
		if (!info_val[c]) {
			if (!info[c])
				continue
			info_val[c] = info[c].split('\n');
			info_nb[c] = 1
		} else {
			info_nb[c]++
		}
		fmt += c
		switch (p[i]) {
		case '-':
			fmt += 'l'
			i++
			break
		case '0':
			fmt += 'c'
			i++
			break
		case '1':
			fmt += 'r'
			i++
			break
		default:
			fmt += 'c'
			break
		}
	}
	if (fmt.slice(-1) == '+')
		fmt = fmt.slice(0, -1) + 'l';
	fmt += '\n'

	// loop on the blocks
	var	ya = {
			l: cfmt.titlespace,
			c: cfmt.titlespace,
			r: cfmt.titlespace
		},
		xa = {
			l: 0,
			c: lwidth * .5,
			r: lwidth
		},
		yb = {},
		str;
	p = fmt;
	i = 0
	while (1) {

		// get the y offset of the top text
		yb.l = yb.c = yb.r = y = 0;
		j = i
		while (1) {
			c = p[j++]
			if (c == '\n')
				break
			align = p[j++]
			if (align == '+')
				align = p[j + 1]
			else if (yb[align] != 0)
				continue
			str = info_val[c]
			if (!str)
				continue
			font_name = info_font[c]
			if (!font_name)
				font_name = "history";
			font = get_font(font_name);
			sz = font.size * 1.1
			if (info_sz[c])
				sz += info_sz[c]
			if (y < sz)
				y = sz;
			yb[align] = sz
		}
		ya.l += y - yb.l;
		ya.c += y - yb.c;
		ya.r += y - yb.r
		while (1) {
			c = p[i++]
			if (c == '\n')
				break
			align = p[i++]
			if (info_val[c].length == 0)
				continue
			str = info_val[c].shift()
			if (align == '+') {
				info_nb[c]--;
				c = p[i++];
				align = p[i++]
				if (info_val[c].length > 0) {
					if (str)
						str += ' ' + info_val[c].shift()
					else
						str = ' ' + info_val[c].shift()
				}
			}
			font_name = info_font[c]
			if (!font_name)
				font_name = "history";
			font = get_font(font_name);
			sz = font.size * 1.1
			if (info_sz[c])
				sz += info_sz[c];
			set_font(font);
			x = xa[align];
			y = ya[align] + sz

			if (c == 'Q') {			/* special case for tempo */
				if (!glovar.tempo.del) {
					if (align != 'l') {
						var w = tempo_width(glovar.tempo)

						if (align == 'c')
							w *= .5;
						x -= w
					}
					write_tempo(glovar.tempo, x, -y)
				}
			} else if (str) {
				xy_str(x, -y, str, align)
			}

			if (c == 'T') {
				font_name = info_font.T = "subtitle";
				info_sz.T = cfmt.subtitlespace
			}
			if (info_nb[c] <= 1) {
				if (c == 'T') {
					font = get_font(font_name);
					sz = font.size * 1.1
					if (info_sz[c])
						sz += info_sz[c];
					set_font(font)
				}
				while (info_val[c].length > 0) {
					y += sz;
					str = info_val[c].shift();
					xy_str(x, -y, str, align)
				}
			}
			info_nb[c]--;
			ya[align] = y
		}
		if (ya.c > ya.l)
			ya.l = ya.c
		if (ya.r > ya.l)
			ya.l = ya.r
		if (i >= fmt.length)
			break
		ya.c = ya.r = ya.l
	}
	vskip(ya.l)
}

/* -- output the tune heading -- */
function write_heading() {
	var	i, j, area, composer, origin, rhythm, down1, down2,
		lwidth = get_lwidth()

	blk_out();
	vskip(cfmt.topspace)

	if (cfmt.titleformat) {
		write_headform(lwidth);
		vskip(cfmt.musicspace)
		return
	}

	/* titles */
	if (info.T
	 && cfmt.writefields.indexOf('T') >= 0) {
		i = 0
		while (1) {
			j = info.T.indexOf("\n", i)
			if (j < 0) {
				write_title(info.T.substring(i), i != 0)
				break
			}
			write_title(info.T.slice(i, j), i != 0);
			i = j + 1
		}
	}

	/* rhythm, composer, origin */
	set_font("composer");
//	down1 = cfmt.composerspace + gene.curfont.size
	down1 = down2 = 0
	if (parse.ckey.k_bagpipe
	 && !cfmt.infoline
	 && cfmt.writefields.indexOf('R') >= 0)
		rhythm = info.R
	if (rhythm) {
		xy_str(0, -cfmt.composerspace, rhythm);
		down1 = cfmt.composerspace
	}
	area = info.A
	if (cfmt.writefields.indexOf('C') >= 0)
		composer = info.C
	if (cfmt.writefields.indexOf('O') >= 0)
		origin = info.O
	if (composer || origin || cfmt.infoline) {
		var xcomp, align;

		vskip(cfmt.composerspace)
		if (cfmt.aligncomposer < 0) {
			xcomp = 0;
			align = ' '
		} else if (cfmt.aligncomposer == 0) {
			xcomp = lwidth * .5;
			align = 'c'
		} else {
			xcomp = lwidth;
			align = 'r'
		}
		down2 = down1
		if (composer || origin) {
			if (cfmt.aligncomposer >= 0
			 && down1 != down2)
				vskip(down1 - down2);
			i = 0
			while (1) {
				vskip(gene.curfont.size)
				if (composer)
					j = composer.indexOf("\n", i)
				else
					j = -1
				if (j < 0) {
					put_inf2r(xcomp, 0,
						composer ? composer.substring(i) : null,
						origin,
						align)
					break
				}
				xy_str(xcomp, 0, composer.slice(i, j), align);
				down1 += gene.curfont.size;
				i = j + 1
			}
			if (down2 > down1)
				vskip(down2 - down1)
		}

		rhythm = rhythm ? null : info.R
		if ((rhythm || area) && cfmt.infoline) {

			/* if only one of rhythm or area then do not use ()'s
			 * otherwise output 'rhythm (area)' */
			set_font("info");
			vskip(gene.curfont.size + cfmt.infospace);
			put_inf2r(lwidth, 0, rhythm, area, 'r');
			down1 += gene.curfont.size + cfmt.infospace
		}
//		down2 = 0
	} else {
		down2 = cfmt.composerspace
	}

	/* parts */
	if (info.P
	 && cfmt.writefields.indexOf('P') >= 0) {
		set_font("parts");
		down1 = cfmt.partsspace + gene.curfont.size - down1
		if (down1 > 0)
			down2 += down1
		if (down2 > .01)
			vskip(down2);
		xy_str(0, 0, info.P);
		down2 = 0
	}
	vskip(down2 + cfmt.musicspace)
}
// abc2svg - svg.js - svg functions
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

var	output = "",		// output buffer
	style = '\n.fill {fill: currentColor}\
\n.stroke {stroke: currentColor; fill: none}\
\n.music text, .music tspan {fill:currentColor}',
	font_style = '',
	posx = cfmt.leftmargin / cfmt.scale,	// default x offset of the images
	posy = 0,		// y offset in the block
	img = {			// image
		width: cfmt.pagewidth,	// width
		lm: cfmt.leftmargin,	// left and right margins
		rm: cfmt.rightmargin
//		chg: false
	},
	defined_glyph = {},
	defs = '',
	fulldefs = '',		// unreferenced defs as <filter>
	stv_g = {		/* staff/voice graphic parameters */
		scale: 1,
		dy: 0,
		st: -1,
		v: 0,
		g: 0
//		color: undefined
	},
	block = {}		/* started & newpage */

// glyphs in music font
var tgls = {
  brace: {x:0, y:0, c:"\ue000"},
  sgno: {x:-6, y:0, c:"\ue047"},
  coda: {x:-12, y:6, c:"\ue048"},
  tclef: {x:-8, y:0, c:"\ue050"},
  cclef: {x:-8, y:0, c:"\ue05c"},
  bclef: {x:-8, y:0, c:"\ue062"},
  pclef: {x:-6, y:0, c:"\ue069"},
  stclef: {x:-8, y:0, c:"\ue07a"},
  scclef: {x:-8, y:0, c:"\ue07b"},
  sbclef: {x:-7, y:0, c:"\ue07c"},
  spclef: {x:-6, y:0, c:"\ue069"},
  meter0: {c:"\ue080"},
  meter1: {c:"\ue081"},
  meter2: {c:"\ue082"},
  meter3: {c:"\ue083"},
  meter4: {c:"\ue084"},
  meter5: {c:"\ue085"},
  meter6: {c:"\ue086"},
  meter7: {c:"\ue087"},
  meter8: {c:"\ue088"},
  meter9: {c:"\ue089"},
  "meter+": {c:"\ue08c"},
  "meter(": {c:"\ue094"},
  "meter)": {c:"\ue095"},
  csig: {x:0, y:0, c:"\ue08a"},
  ctsig: {x:0, y:0, c:"\ue08b"},
  HDD: {x:-7, y:0, c:"\ue0a0"},
  breve: {x:-6, y:0, c:"\ue0a1"},
  HD: {x:-5.2, y:0, c:"\ue0a2"},
  Hd: {x:-3.8, y:0, c:"\ue0a3"},
  hd: {x:-3.7, y:0, c:"\ue0a4"},
  ghd: {x:2, y:0, c:"\ue0a4", sc:.66},
  pshhd: {x:-3.7, y:0, c:"\ue0a9"},
  pfthd: {x:-3.7, y:0, c:"\ue0b3"},
  x: {x:-3.7, y:0, c:"\ue0a9"},
  "circle-x": {x:-3.7, y:0, c:"\ue0b3"},
  srep: {x:-5, y:0, c:"\ue101"},
  dot: {x:-2, y:0, c:"\ue1e7"},
 "acc-1": {x:-3, y:0, c:"\ue260"},
  acc3: {x:-2, y:0, c:"\ue261"},
  acc1: {x:-3, y:0, c:"\ue262"},
  acc2: {x:-3, y:0, c:"\ue263"},
 "acc-2": {x:-3, y:0, c:"\ue264"},
 "acc-1_1_4": {x:-3, y:0, c:"\ue280"},
  accent: {x:-3, y:2, c:"\ue4a0"},
  marcato: {x:-3, y:0, c:"\ue4ac"},
  hld: {x:-7, y:0, c:"\ue4c0"},
  brth: {x:0, y:0, c:"\ue4ce"},
  r00: {x:-1.5, y:0, c:"\ue4e1"},
  r0: {x:-1.5, y:0, c:"\ue4e2"},
  r1: {x:-3.5, y:6, c:"\ue4e3"},
  r2: {x:-3.2, y:0, c:"\ue4e4"},
  r4: {x:-3, y:0, c:"\ue4e5"},
  r8: {x:-3, y:0, c:"\ue4e6"},
  r16: {x:-4, y:0, c:"\ue4e7"},
  r32: {x:-4, y:0, c:"\ue4e8"},
  r64: {x:-4, y:0, c:"\ue4e9"},
  r128: {x:-4, y:0, c:"\ue4ea"},
  mrest: {x:-10, y:0, c:"\ue4ee"},
  mrep: {x:-6, y:0, c:"\ue500"},
  mrep2: {x:-9, y:0, c:"\ue501"},
  turn: {x:-5, y:4, c:"\ue567"},
  turnx: {x:-5, y:4, c:"\ue569"},
  umrd: {x:-7, y:2, c:"\ue56c"},
  lmrd: {x:-7, y:2, c:"\ue56d"},
  ped: {x:-10, y:0, c:"\ue650"},
  pedoff: {x:-5, y:0, c:"\ue655"},
  longa: {x:-6, y:0, c:"\ue95c"}
}

// glyphs to put in <defs>
var glyphs = {
  acc1_1_4: '<g id="acc1_1_4">\n\
	<path d="m0 7.8v-15.4" class="stroke"/>\n\
	<path class="fill" d="M-1.8 2.7l3.6 -1.1v2.2l-3.6 1.1v-2.2z\n\
		M-1.8 -3.7l3.6 -1.1v2.2l-3.6 1.1v-2.2"/>\n\
</g>',
  acc1_3_4: '<g id="acc1_3_4">\n\
	<path d="m-2.5 8.7v-15.4M0 7.8v-15.4M2.5 6.9v-15.4" class="stroke"/>\n\
	<path class="fill" d="m-3.7 3.1l7.4 -2.2v2.2l-7.4 2.2v-2.2z\n\
		M-3.7 -3.2l7.4 -2.2v2.2l-7.4 2.2v-2.2"/>\n\
</g>',
 "acc-1_3_4": '<g id="acc-1_3_4">\n\
    <path class="fill" d="m0.6 -2.7\n\
	c-5.7 -3.1 -5.7 3.6 0 6.7c-3.9 -4 -4 -7.6 0 -5.8\n\
	M1 -2.7c5.7 -3.1 5.7 3.6 0 6.7c3.9 -4 4 -7.6 0 -5.8"/>\n\
    <path d="m1.6 3.5v-13M0 3.5v-13" class="stroke" stroke-width=".6"/>\n\
</g>',
  pmsig: '<path id="pmsig" class="stroke" stroke-width="0.8"\n\
	d="m0 -7a5 5 0 0 1 0 -10a5 5 0 0 1 0 10"/>',
  pMsig: '<g id="pMsig">\n\
	<use xlink:href="#pmsig"/>\n\
	<path class="fill" d="m0 -10a2 2 0 0 1 0 -4a2 2 0 0 1 0 4"/>\n\
</g>',
  imsig: '<path id="imsig" class="stroke" stroke-width="0.8"\n\
	d="m3 -8a5 5 0 1 1 0 -8"/>',
  iMsig: '<g id="iMsig">\n\
	<use xlink:href="#imsig"/>\n\
	<path class="fill" d="m0 -10a2 2 0 0 1 0 -4a2 2 0 0 1 0 4"/>\n\
</g>',
  hl: '<path id="hl" class="stroke" stroke-width="1" d="m-6 0h12"/>',
  hl1: '<path id="hl1" class="stroke" stroke-width="1" d="m-7 0h14"/>',
  hl2: '<path id="hl2" class="stroke" stroke-width="1" d="m-9 0h18"/>',
  ghl: '<path id="ghl" class="stroke" d="m-3.5 0h7"/>',
  rdots: '<g id="rdots" class="fill">\n\
	<circle cx="0" cy="-9" r="1.2"/>\n\
	<circle cx="0" cy="-15" r="1.2"/>\n\
</g>',
  grm: '<path id="grm" class="fill" d="m-5 -2.5\n\
	c5 -8.5 5.5 4.5 10 -2 -5 8.5 -5.5 -4.5 -10 2"/>',
  stc: '<circle id="stc" class="fill" cx="0" cy="-3" r="1.2"/>',
  sld: '<path id="sld" class="fill" d="m-7.2 4.8\n\
	c1.8 .7 4.5 -.2 7.2 -4.8 -2.1 5 -5.4 6.8 -7.6 6"/>',
  emb: '<path id="emb" class="stroke" stroke-width="1.2" stroke-linecap="round"\n\
	d="m-2.5 -3h5"/>',
  roll: '<path id="roll" class="fill" d="m-6 0\n\
	c0.4 -7.3 11.3 -7.3 11.7 0 -1.3 -6 -10.4 -6 -11.7 0"/>',
  upb: '<path id="upb" class="stroke" d="m-2.6 -9.4\n\
	l2.6 8.8 2.6 -8.8"/>',
  dnb: '<g id="dnb">\n\
	<path d="M-3.2 -2v-7.2m6.4 0v7.2" class="stroke"/>\n\
	<path d="M-3.2 -6.8v-2.4l6.4 0v2.4" class="fill"/>\n\
</g>',
  dplus: '<path id="dplus" class="stroke" stroke-width="1.7"\n\
	d="m0 -.5v-6m-3 3h6"/>',
  lphr: '<path id="lphr" class="stroke" stroke-width="1.2"\n\
	d="m0 0v18"/>',
  mphr: '<path id="mphr" class="stroke" stroke-width="1.2"\n\
	d="m0 0v12"/>',
  sphr: '<path id="sphr" class="stroke" stroke-width="1.2"\n\
	d="m0 0v6"/>',
  sfz: '<text id="sfz" x="-5" y="-7" \
style="font-family:serif; font-style:italic; font-size:14px">\n\
	s<tspan font-size="16" font-weight="bold">f</tspan>z</text>',
  trl: '<text id="trl" x="-2" y="-4"\n\
	style="font-family:serif; font-weight:bold; \
font-style:italic; font-size:16px">tr</text>',
  opend: '<circle id="opend" class="stroke"\n\
	cx="0" cy="-3" r="2.5"/>',
  snap: '<path id="snap" class="stroke" d="m-3 -6\n\
	c0 -5 6 -5 6 0 0 5 -6 5 -6 0\n\
	M0 -5v6"/>',
  thumb: '<path id="thumb" class="stroke" d="m-2.5 -7\n\
	c0 -6 5 -6 5 0 0 6 -5 6 -5 0\n\
	M-2.5 -9v4"/>',
  wedge: '<path id="wedge" class="fill" d="m0 -1l-1.5 -5h3l-1.5 5"/>',
  ltr: '<path id="ltr" class="fill"\n\
	d="m0 -.4c2 -1.5 3.4 -1.9 3.9 .4 0.2 .8 .7 .7 2.1 -.4\n\
	v0.8c-2 1.5 -3.4 1.9 -3.9 -.4 -.2 -.8 -.7 -.7 -2.1 .4z"/>',
  custos: '<g id="custos">\n\
	<path class="fill" d="m-4 0l2 2.5 2 -2.5 2 2.5 2 -2.5\n\
		-2 -2.5 -2 2.5 -2 -2.5 -2 2.5"/>\n\
	<path class="stroke" d="m3.5 0l5 -7"/>\n\
</g>',
  triangle: '<path id="triangle" class="fill" d="m-3.7 -3.2l7.4 0 -3.7 6.4 -3.7 -6.4"/>',
  diamond: '<path id="diamond" class="fill" d="m0 3.5l-3.7 -3.5 3.7 -3.5 3.7 3.5z"/>',
  oct: '<text id="oct" style="font-family:serif; font-size:12px">8</text>'
}

// mark a glyph as used and add it in <defs>
function def_use(gl) {
	var	i, j, g

	if (defined_glyph[gl])
		return
	defined_glyph[gl] = true;
	g = glyphs[gl]
	if (!g) {
//throw new Error("unknown glyph: " + gl)
		error(1, null, "Unknown glyph: '$1'", gl)
		return	// fixme: the xlink is set
	}
	j = 0
	while (1) {
		i = g.indexOf('xlink:href="#', j)
		if (i < 0)
			break
		i += 13;
		j = g.indexOf('"', i);
		def_use(g.slice(i, j))
	}
	defs += '\n' + g
}

// add user defs from %%beginsvg
function defs_add(text) {
	var	i, j, gl, tag, is,
		ie = 0

	// remove XML comments
	text = text.replace(/<!--.*?-->/g, '')

	while (1) {
		is = text.indexOf('<', ie);
		if (is < 0)
			break
		i = text.indexOf('id="', is)
		if (i < 0)
			break
		i += 4;
		j = text.indexOf('"', i);
		if (j < 0)
			break
		gl = text.slice(i, j);
		ie = text.indexOf('>', j);
		if (ie < 0)
			break
		if (text[ie - 1] == '/') {
			ie++
		} else {
			i = text.indexOf(' ', is);
			if (i < 0)
				break
			tag = text.slice(is + 1, i);
			ie = text.indexOf('</' + tag + '>', ie)
			if (ie < 0)
				break
			ie += 3 + tag.length
		}
		if (text.substr(is, 7) == '<filter')
			fulldefs += '\n' + text.slice(is, ie)
		else
			glyphs[gl] = text.slice(is, ie)
	}
}

// output the stop/start of a graphic sequence
function set_g() {

	// close the previous sequence
	if (stv_g.started) {
		stv_g.started = false;
		output += "</g>\n"
	}

	// check if new sequence needed
	if (stv_g.scale == 1 && !stv_g.color)
		return

	// open the new sequence
	output += '<g '
	if (stv_g.scale != 1) {
		if (stv_g.st >= 0)
			output += staff_tb[stv_g.st].scale_str
		else
			output += voice_tb[stv_g.v].scale_str
	}
	if (stv_g.color) {
		if (stv_g.scale != 1)
			output += ' ';
		output += 'style="color:' + stv_g.color + '"'
	}
	output += ">\n";
	stv_g.started = true
}

/* set the color */
function set_color(color) {
	if (color == stv_g.color)
		return undefined	// same color
	var	old_color = stv_g.color;
	stv_g.color = color;
	set_g()
	return old_color
}

/* -- set the staff scale (only) -- */
function set_sscale(st) {
	var	new_scale, dy

	if (st != stv_g.st && stv_g.scale != 1)
		stv_g.scale = 0;
	new_scale = st >= 0 ? staff_tb[st].staffscale : 1
	if (st >= 0 && new_scale != 1)
		dy = staff_tb[st].y
	else
		dy = posy
	if (new_scale == stv_g.scale && dy == stv_g.dy)
		return
	stv_g.scale = new_scale;
	stv_g.dy = dy;
	stv_g.st = st;
	set_g()
}

/* -- set the voice or staff scale -- */
function set_scale(s) {
	var	new_scale = s.p_v.scale

	if (new_scale == 1) {
		set_sscale(s.st)
		return
	}
/*fixme: KO when both staff and voice are scaled */
	if (new_scale == stv_g.scale && stv_g.dy == posy)
		return
	stv_g.scale = new_scale;
	stv_g.dy = posy;
	stv_g.st = -1;
	stv_g.v = s.v;
	set_g()
}

// -- set the staff output buffer and scale when delayed output
function set_dscale(st, no_scale) {
	if (output) {
		if (stv_g.st < 0) {
			staff_tb[0].output += output
		} else if (stv_g.scale == 1) {
			staff_tb[stv_g.st].output += output
		} else {
			staff_tb[stv_g.st].sc_out += output
		}
		output = ""
	}
	if (st < 0)
		stv_g.scale = 1
	else
		stv_g.scale = no_scale ? 1 : staff_tb[st].staffscale;
	stv_g.st = st;
	stv_g.dy = 0
}

// update the y offsets of delayed output
function delayed_update() {
	var st, new_out, text

	for (st = 0; st <= nstaff; st++) {
		if (staff_tb[st].sc_out) {
			output += '<g transform="translate(0,' +
					(posy - staff_tb[st].y).toFixed(2) +
					') scale(' +
					 staff_tb[st].staffscale.toFixed(2) +
					')">\n' +
				staff_tb[st].sc_out +
				'</g>\n';
			staff_tb[st].sc_out = ""
		}
		if (!staff_tb[st].output)
			continue
		output += '<g transform="translate(0,' +
				(-staff_tb[st].y).toFixed(2) +
				')">\n' +
			staff_tb[st].output +
			'</g>\n';
		staff_tb[st].output = ""
	}
}

// output the annotations
// !! tied to the symbol types in abc2svg.js !!
var anno_type = ['bar', 'clef', 'custos', '', 'grace',
		'key', 'meter', 'Zrest', 'note', 'part',
		'rest', 'yspace', 'staves', 'Break', 'tempo',
		'', 'block', 'remark']

function anno_out(s, t, f) {
	if (s.istart == undefined)
		return
	var	type = s.type,
		h = s.ymx - s.ymn + 4,
		wl = s.wl || 2,
		wr = s.wr || 2

	if (s.grace)
		type = C.GRACE

	f(t || anno_type[type], s.istart, s.iend,
		s.x - wl - 2, staff_tb[s.st].y + s.ymn + h - 2,
		wl + wr + 4, h, s);
}

function a_start(s, t) {
	anno_out(s, t, user.anno_start)
}
function a_stop(s, t) {
	anno_out(s, t, user.anno_stop)
}
function empty_function() {
}
var	anno_start = user.anno_start ? a_start : empty_function,
	anno_stop = user.anno_stop ? a_stop : empty_function

// output a string with x, y, a and b
// In the string,
//	X and Y are replaced by scaled x and y
//	A and B are replaced by a and b as string
//	F and G are replaced by a and b as float
function out_XYAB(str, x, y, a, b) {
	x = sx(x);
	y = sy(y);
	output += str.replace(/X|Y|A|B|F|G/g, function(c) {
		switch (c) {
		case 'X': return x.toFixed(2)
		case 'Y': return y.toFixed(2)
		case 'A': return a
		case 'B': return b
		case 'F': return a.toFixed(2)
//		case 'G':
		default: return b.toFixed(2)
		}
		})
}

// open / close containers
function g_open(x, y, rot, sx, sy) {
	out_XYAB('<g transform="translate(X,Y', x, y);
	if (rot)
		output += ') rotate(' + rot.toFixed(2)
	if (sx) {
		if (sy)
			output += ') scale(' + sx.toFixed(2) +
						', ' + sy.toFixed(2)
		else
			output += ') scale(' + sx.toFixed(2)
	}
	output += ')">\n';
	stv_g.g++
}
function g_close() {
	stv_g.g--;
	output += '</g>\n'
}

// external SVG string
Abc.prototype.out_svg = function(str) { output += str }

// exported functions for the annotation
function sx(x) {
	if (stv_g.g)
		return x
	return (x + posx) / stv_g.scale
}
Abc.prototype.sx = sx
function sy(y) {
	if (stv_g.g)
		return y
	if (stv_g.scale == 1)
		return posy - y
	if (stv_g.st < 0)
		return (posy - y) / stv_g.scale	// voice scale
	return stv_g.dy - y			// staff scale
}
Abc.prototype.sy = sy;
Abc.prototype.sh = function(h) {
	if (stv_g.st < 0)
		return h / stv_g.scale
	return h
}
// for absolute X,Y coordinates
Abc.prototype.ax = function(x) { return x + posx }
Abc.prototype.ay = function(y) {
	if (stv_g.st < 0)
		return posy - y
	return posy + (stv_g.dy - y) * stv_g.scale - stv_g.dy
}
Abc.prototype.ah = function(h) {
	if (stv_g.st < 0)
		return h
	return h * stv_g.scale
}
// output scaled (x + <sep> + y)
function out_sxsy(x, sep, y) {
	x = sx(x);
	y = sy(y);
	output += x.toFixed(2) + sep + y.toFixed(2)
}
Abc.prototype.out_sxsy = out_sxsy

// define the start of a path
function xypath(x, y, fill) {
	out_XYAB('<path class="A" d="mX Y\n', x, y, fill ? "fill" : "stroke")
}
Abc.prototype.xypath = xypath

// output a glyph
function xygl(x, y, gl) {
// (avoid ps<->js loop)
//	if (psxygl(x, y, gl))
//		return
	var 	tgl = tgls[gl]
	if (tgl && !glyphs[gl]) {
		x += tgl.x * stv_g.scale;
		y += tgl.y
		if (tgl.sc)
			out_XYAB('<text transform="translate(X,Y) scale(F)">B</text>\n',
				x, y, tgl.sc, tgl.c);
		else
			out_XYAB('<text x="X" y="Y">A</text>\n', x, y, tgl.c)
		return
	}
	if (!glyphs[gl]) {
		error(1, null, 'no definition of $1', gl)
		return
	}
	def_use(gl);
	out_XYAB('<use x="X" y="Y" xlink:href="#A"/>\n', x, y, gl)
}
// - specific functions -
// gua gda (acciaccatura)
function out_acciac(x, y, dx, dy, up) {
	if (up) {
		x -= 1;
		y += 4
	} else {
		x -= 5;
		y -= 4
	}
	out_XYAB('<path class="stroke" d="mX YlF G"/>\n',
		x, y, dx, -dy)
}
// simple /dotted measure bar
function out_bar(x, y, h, dotted) {
	output += '<path class="stroke" stroke-width="1" ' +
		(dotted ? 'stroke-dasharray="5,5" ' : '') +
		'd="m' + (x + posx).toFixed(2) +
		' ' + (posy - y).toFixed(2) + 'v' + (-h).toFixed(2) +
		'"/>\n'
}
// tuplet value - the staves are not defined
function out_bnum(x, y, str) {
	out_XYAB('<text style="font-family:serif; font-style:italic; font-size:12px"\n\
	x="X" y="Y" text-anchor="middle">A</text>\n',
		x, y, str.toString())
}
// staff system brace
function out_brace(x, y, h) {
//fixme: '-6' depends on the scale
	x += posx - 6;
	y = posy - y;
	h /= 24;
	output += '<text transform="translate(' +
				x.toFixed(2) + ',' + y.toFixed(2) +
			') scale(2.5,' + h.toFixed(2) +
			')">' + tgls.brace.c + '</text>\n'
}

// staff system bracket
function out_bracket(x, y, h) {
	x += posx - 5;
	y = posy - y - 3;
	h += 2;
	output += '<path class="fill"\n\
	d="m' + x.toFixed(2) + ' ' + y.toFixed(2) + '\n\
	c10.5 1 12 -4.5 12 -3.5c0 1 -3.5 5.5 -8.5 5.5\n\
	v' + h.toFixed(2) + '\n\
	c5 0 8.5 4.5 8.5 5.5c0 1 -1.5 -4.5 -12 -3.5"/>\n'
}
// hyphen
function out_hyph(x, y, w) {
	var	n, a_y,
		d = 25 + ((w / 20) | 0) * 3

	if (w > 15.)
		n = ((w - 15) / d) | 0
	else
		n = 0;
	x += (w - d * n - 5) / 2;
	out_XYAB('<path class="stroke" stroke-width="1.2"\n\
	stroke-dasharray="5,A"\n\
	d="mX YhB"/>\n',
		x, y + 6,		// set the line a bit upper
		Math.round((d - 5) / stv_g.scale), d * n + 5)
}
// stem [and flags]
// fixme: h is already scaled - change that?
function out_stem(x, y, h, grace,
		  nflags, straight) {	// optional
//fixme: dx KO with half note or longa
	var	dx = grace ? GSTEM_XOFF : 3.5,
		slen = -h

	if (h < 0)
		dx = -dx;		// down
	x += dx * stv_g.scale
	if (stv_g.st < 0)
		slen /= stv_g.scale;
	out_XYAB('<path class="stroke" d="mX YvF"/>\n',	// stem
		x, y, slen)
	if (!nflags)
		return

	output += '<path class="fill"\n\
	d="';
	y += h
	if (h > 0) {				// up
		if (!straight) {
			if (!grace) {
				if (nflags == 1) {
					out_XYAB('MX Yc0.6 5.6 9.6 9 5.6 18.4\n\
	1.6 -6 -1.3 -11.6 -5.6 -12.8\n', x, y)
				} else {
					while (--nflags >= 0) {
						out_XYAB('MX Yc0.9 3.7 9.1 6.4 6 12.4\n\
	1 -5.4 -4.2 -8.4 -6 -8.4\n', x, y);
						y -= 5.4
					}
				}
			} else {		// grace
				if (nflags == 1) {
					out_XYAB('MX Yc0.6 3.4 5.6 3.8 3 10\n\
	1.2 -4.4 -1.4 -7 -3 -7\n', x, y)
				} else {
					while (--nflags >= 0) {
						out_XYAB('MX Yc1 3.2 5.6 2.8 3.2 8\n\
	1.4 -4.8 -2.4 -5.4 -3.2 -5.2\n', x, y);
						y -= 3.5
					}
				}
			}
		} else {			// straight
			if (!grace) {
//fixme: check endpoints
				y += 1
				while (--nflags >= 0) {
					out_XYAB('MX Yl7 3.2 0 3.2 -7 -3.2z\n',
						x, y);
					y -= 5.4
				}
			} else {		// grace
				while (--nflags >= 0) {
					out_XYAB('MX Yl3 1.5 0 2 -3 -1.5z\n',
						x, y);
					y -= 3
				}
			}
		}
	} else {				// down
		if (!straight) {
			if (!grace) {
				if (nflags == 1) {
					out_XYAB('MX Yc0.6 -5.6 9.6 -9 5.6 -18.4\n\
	1.6 6 -1.3 11.6 -5.6 12.8\n', x, y)
				} else {
					while (--nflags >= 0) {
						out_XYAB('MX Yc0.9 -3.7 9.1 -6.4 6 -12.4\n\
	1 5.4 -4.2 8.4 -6 8.4\n', x, y);
						y += 5.4
					}
				}
			} else {		// grace
				if (nflags == 1) {
					out_XYAB('MX Yc0.6 -3.4 5.6 -3.8 3 -10\n\
	1.2 4.4 -1.4 7 -3 7\n', x, y)
				} else {
					while (--nflags >= 0) {
						out_XYAB('MX Yc1 -3.2 5.6 -2.8 3.2 -8\n\
	1.4 4.8 -2.4 5.4 -3.2 5.2\n', x, y);
						y += 3.5
					}
				}
			}
		} else {			// straight
			if (!grace) {
//fixme: check endpoints
				y += 1
				while (--nflags >= 0) {
					out_XYAB('MX Yl7 -3.2 0 -3.2 -7 3.2z\n',
						x, y);
					y += 5.4
				}
//			} else {		// grace
//--fixme: error?
			}
		}
	}
	output += '"/>\n'
}
// thick measure bar
function out_thbar(x, y, h) {
	x += posx + 1.5;
	y = posy - y;
	output += '<path class="stroke" stroke-width="3" d="m' +
		x.toFixed(2) + ' ' + y.toFixed(2) +
		'v' + (-h).toFixed(2) + '"/>\n'
}
// tremolo
function out_trem(x, y, ntrem) {
	out_XYAB('<path class="fill" d="mX Y\n\t', x - 4.5, y)
	while (1) {
		output += 'l9 -3v3l-9 3z'
		if (--ntrem <= 0)
			break
		output += 'm0 5.4'
	}
	output += '"/>\n'
}
// tuplet bracket - the staves are not defined
function out_tubr(x, y, dx, dy, up) {
	var	h = up ? -3 : 3;

	y += h;
	dx /= stv_g.scale;
	output += '<path class="stroke" d="m';
	out_sxsy(x, ' ', y);
	output += 'v' + h.toFixed(2) +
		'l' + dx.toFixed(2) + ' ' + (-dy).toFixed(2) +
		'v' + (-h).toFixed(2) + '"/>\n'
}
// tuplet bracket with number - the staves are not defined
function out_tubrn(x, y, dx, dy, up, str) {
    var	sw = str.length * 10,
	h = up ? -3 : 3;

	out_XYAB('<text style="font-family:serif; font-style:italic; font-size:12px"\n\
	x="X" y="Y" text-anchor="middle">A</text>\n',
		x + dx / 2, y + dy / 2, str);
	dx /= stv_g.scale
	if (!up)
		y += 6;
	output += '<path class="stroke" d="m';
	out_sxsy(x, ' ', y);
	output += 'v' + h.toFixed(2) +
		'm' + dx.toFixed(2) + ' ' + (-dy).toFixed(2) +
		'v' + (-h).toFixed(2) + '"/>\n' +
		'<path class="stroke" stroke-dasharray="' +
		((dx - sw) / 2).toFixed(2) + ' ' + sw.toFixed(2) +
		'" d="m';
	out_sxsy(x, ' ', y - h);
	output += 'l' + dx.toFixed(2) + ' ' + (-dy).toFixed(2) + '"/>\n'

}
// underscore line
function out_wln(x, y, w) {
	out_XYAB('<path class="stroke" stroke-width="0.8" d="mX YhF"/>\n',
		x, y + 3, w)
}

// decorations with string
var deco_str_style = {
crdc:	{
		dx: 0,
		dy: 5,
		style: 'font-family:serif; font-style:italic; font-size:14px'
	},
dacs:	{
		dx: 0,
		dy: 3,
		style: 'font-family:serif; font-size:16px',
		anchor: ' text-anchor="middle"'
	},
fng:	{
		dx: 0,
		dy: 1,
		style: 'font-family:Bookman; font-size:8px',
		anchor: ' text-anchor="middle"'
	},
pf:	{
		dx: 0,
		dy: 5,
		style: 'font-family:serif; font-weight:bold; font-style:italic; font-size:16px'
	},
'@':	{
		dx: 0,
		dy: 5,
		style: 'font-family:sans-serif; font-size:12px'
	}
}

function out_deco_str(x, y, name, str) {
	var	a, f,
		a_deco = deco_str_style[name]

	if (!a_deco) {
		xygl(x, y, name)
		return
	}
	x += a_deco.dx;
	y += a_deco.dy;
	if (!a_deco.def) {
		style += "\n." + name + " {" + a_deco.style + "}";
		a_deco.def = true
	}
	out_XYAB('<text x="X" y="Y" class="A"B>', x, y,
		name, a_deco.anchor || "");
	set_font("annotation");
	out_str(str);
	output += '</text>\n'
}

function out_arp(x, y, val) {
	g_open(x, y, 270);
	x = 0;
	y = -4;
	val = Math.ceil(val / 6)
	while (--val >= 0) {
		xygl(x, y, "ltr");
		x += 6
	}
	g_close()
}
function out_cresc(x, y, val, defl) {
	x += val;
	val = -val;
	out_XYAB('<path class="stroke"\n\
	d="mX YlA ', x, y + 5, val)
	if (defl.nost)
		output += '-2.2m0 -3.6l' + (-val).toFixed(2) + ' -2.2"/>\n'
	else
		output += '-4l' + (-val).toFixed(2) + ' -4"/>\n'

}
function out_dim(x, y, val, defl) {
	out_XYAB('<path class="stroke"\n\
	d="mX YlA ', x, y + 5, val)
	if (defl.noen)
		output += '-2.2m0 -3.6l' + (-val).toFixed(2) + ' -2.2"/>\n'
	else
		output += '-4l' + (-val).toFixed(2) + ' -4"/>\n'
}
function out_ltr(x, y, val) {
	y += 4;
	val = Math.ceil(val / 6)
	while (--val >= 0) {
		xygl(x, y, "ltr");
		x += 6
	}
}
function out_8va(x, y, val, defl) {
	if (!defl.nost) {
		out_XYAB('<text x="X" y="Y" \
style="font-family:serif; font-weight:bold; font-style:italic; font-size:12px">8\
<tspan dy="-4" style="font-size:10px">va</tspan></text>\n',
			x - 8, y);
		x += 12;
		val -= 12
	} else {
		val -= 5
	}
	y += 6;
	out_XYAB('<path class="stroke" stroke-dasharray="6,6" d="mX YhA"/>\n',
		x, y, val)
	if (!defl.noen)
		out_XYAB('<path class="stroke" d="mX Yv6"/>\n', x + val, y)
}
function out_8vb(x, y, val, defl) {
	if (!defl.nost) {
		out_XYAB('<text x="X" y="Y" \
style="font-family:serif; font-weight:bold; font-style:italic; font-size:12px">8\
<tspan dy="-4" style="font-size:10px">vb</tspan></text>\n',
			x - 8, y);
		x += 4;
		val -= 4
	} else {
		val -= 5
	}
//	y -= 2;
	out_XYAB('<path class="stroke" stroke-dasharray="6,6" d="mX YhA"/>\n',
		x, y, val)
	if (!defl.noen)
		out_XYAB('<path class="stroke" d="mX Yv-6"/>\n', x + val, y)
}
function out_15ma(x, y, val, defl) {
	if (!defl.nost) {
		out_XYAB('<text x="X" y="Y" \
style="font-family:serif; font-weight:bold; font-style:italic; font-size:12px">15\
<tspan dy="-4" style="font-size:10px">ma</tspan></text>\n',
			x - 10, y);
		x += 20;
		val -= 20
	} else {
		val -= 5
	}
	y += 6;
	out_XYAB('<path class="stroke" stroke-dasharray="6,6" d="mX YhA"/>\n',
		x, y, val)
	if (!defl.noen)
		out_XYAB('<path class="stroke" d="mX Yv6"/>\n', x + val, y)
}
function out_15mb(x, y, val, defl) {
	if (!defl.nost) {
		out_XYAB('<text x="X" y="Y" \
style="font-family:serif; font-weight:bold; font-style:italic; font-size:12px">15\
<tspan dy="-4" style="font-size:10px">mb</tspan></text>\n',
			x - 10, y);
		x += 7;
		val -= 7
	} else {
		val -= 5
	}
//	y -= 2;
	out_XYAB('<path class="stroke" stroke-dasharray="6,6" d="mX YhA"/>\n',
		x, y, val)
	if (!defl.noen)
		out_XYAB('<path class="stroke" d="mX Yv-6"/>\n', x + val, y)
}
var deco_val_tb = {
	arp:	out_arp,
	cresc:	out_cresc,
	dim:	out_dim,
	ltr:	out_ltr,
	"8va":	out_8va,
	"8vb":	out_8vb,
	"15ma":	out_15ma,
	"15mb": out_15mb
}

function out_deco_val(x, y, name, val, defl) {
	if (deco_val_tb[name])
		deco_val_tb[name](x, y, val, defl)
	else
		error(1, null, "No function for decoration '$1'", name)
}

function out_glisq(x2, y2, de) {
	var	de1 = de.start,
		x1 = de1.x,
		y1 = de1.y + staff_tb[de1.st].y,
		ar = -Math.atan2(y2 - y1, x2 - x1),
		a = ar / Math.PI * 180,
		len = (x2 - x1) / Math.cos(ar);

	g_open(x1, y1, a);
	x1 = de1.s.dots ? 13 + de1.s.xmx : 8;
	len = (len - x1 - 6) / 6 | 0
	if (len < 1)
		len = 1
	while (--len >= 0) {
		xygl(x1, 0, "ltr");
		x1 += 6
	}
	g_close()
}

function out_gliss(x2, y2, de) {
	var	de1 = de.start,
		x1 = de1.x,
		y1 = de1.y + staff_tb[de1.st].y,
		ar = -Math.atan2(y2 - y1, x2 - x1),
		a = ar / Math.PI * 180,
		len = (x2 - x1) / Math.cos(ar);

	g_open(x1, y1, a);
	x1 = de1.s.dots ? 13 + de1.s.xmx : 8;
	len -= x1 + 8;
	xypath(x1, 0);
	output += 'l' + len.toFixed(2) + ' 0" stroke-width="1"/>\n';
	g_close()
}

var deco_l_tb = {
	glisq: out_glisq,
	gliss: out_gliss
}

function out_deco_long(x, y, de) {
	var	name = de.dd.glyph

	if (deco_l_tb[name])
		deco_l_tb[name](x, y, de)
	else
		error(1, null, "No function for decoration '$1'", name)
}

// update the vertical offset
function vskip(h) {
	posy += h
}

// create the SVG image of the block
function svg_flush() {
	if (multicol || !output || !user.img_out || posy == 0)
		return

    var	head = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"\n\
	xmlns:xlink="http://www.w3.org/1999/xlink"\n\
	color="black" class="music" stroke-width=".7"',
	g = ''

	if (cfmt.bgcolor)
		head += ' style="background-color: ' + cfmt.bgcolor + '"';

	posy *= cfmt.scale

	if (user.imagesize) {
		head += '\n' +
			user.imagesize +
			' viewBox="0 0 ' + img.width.toFixed(0) + ' ' +
			 posy.toFixed(0) + '">\n'
	} else {
		head += '\n\twidth="' + img.width.toFixed(0) +
			'px" height="' + posy.toFixed(0) + 'px">\n'
	}

	if (style || font_style || musicfont) {
		head += '<style type="text/css">' + style + font_style
		if (musicfont) {
			if (musicfont.indexOf('(') > 0) {
				head += '\n\
.music {font-family: music; font-size: 24px; fill: currentColor}\n\
@font-face {\n\
  font-family: music;\n\
  src: ' + musicfont + '}';
			} else {
				head += '\n\
.music {font-family: '+ musicfont +'; font-size: 24px; fill: currentColor}'
			}
		}
		head += '\n</style>\n'
	}
	defs += fulldefs
	if (defs)
		head += '<defs>' + defs + '\n</defs>\n'

	// if %%pagescale != 1, do a global scale
	// (with a container: transform scale in <svg> does not work
	//	the same in all browsers)
	// the class is used to know that the container is global
	if (cfmt.scale != 1) {
		head += '<g class="g" transform="scale(' +
			cfmt.scale.toFixed(2) + ')">\n';
		g = '</g>\n'
	}

	if (psvg)			// if PostScript support
		psvg.ps_flush(true);	// + setg(0)

	user.img_out(head + output + g + "</svg>");
	output = ""

	font_style = ''
	if (cfmt.fullsvg) {
		defined_glyph = {}
		defined_font = {}
	} else {
		musicfont = '';
		style = '';
		fulldefs = ''
	}
	defs = '';
	posy = 0
}

// output a part of a block of images
function blk_out() {
	if (multicol || !user.img_out)
		return
	blk_flush()
	if (user.page_format && !block.started) {
		block.started = true
		if (block.newpage) {
			block.newpage = false;
			user.img_out('<div class="nobrk newpage">')
		} else {
			user.img_out('<div class="nobrk">')
		}
	}
}
Abc.prototype.blk_out = blk_out

// output the end of a block (or tune)
function blk_flush() {
	svg_flush()
	if (block.started) {
		block.started = false;
		user.img_out('</div>')
	}
}
Abc.prototype.blk_flush = blk_flush
// abc2svg - tune.js - tune generation
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

var	par_sy,		// current staff system for parse
	cur_sy,		// current staff system for generation
	voice_tb,
	curvoice,
	staves_found,
	vover,		// voice overlay
	tsfirst

/* apply the %%voice options of the current voice */
function voice_filter() {
	var opt, sel, i

	for (opt in parse.voice_opts) {
		if (!parse.voice_opts.hasOwnProperty(opt))
			continue
		sel = new RegExp(opt)
		if (sel.test(curvoice.id)
		 || sel.test(curvoice.nm)) {
			for (i in parse.voice_opts[opt])
			    if (parse.voice_opts[opt].hasOwnProperty(i))
				do_pscom(parse.voice_opts[opt][i])
		}
	}
}

/* -- link a ABC symbol into the current voice -- */
function sym_link(s) {
	if (!s.fname)
		set_ref(s)
	if (!curvoice.ignore) {
		parse.last_sym = s;
		s.prev = curvoice.last_sym
		if (curvoice.last_sym)
			curvoice.last_sym.next = s
		else
			curvoice.sym = s;
		curvoice.last_sym = s
	}
	s.v = curvoice.v;
	s.p_v = curvoice;
	s.st = curvoice.cst;
	s.time = curvoice.time
	if (s.dur && !s.grace)
		curvoice.time += s.dur;
	s.pos = curvoice.pos
	if (curvoice.second)
		s.second = true
	if (curvoice.floating)
		s.floating = true
}

/* -- add a new symbol in a voice -- */
function sym_add(p_voice, type) {
	var	s = {
			type:type,
			dur:0
		},
		s2,
		p_voice2 = curvoice;

	curvoice = p_voice;
	sym_link(s);
	curvoice = p_voice2;
	s2 = s.prev
	if (!s2)
		s2 = s.next
	if (s2) {
		s.fname = s2.fname;
		s.istart = s2.istart;
		s.iend = s2.iend
	}
	return s
}

/* -- expand a multi-rest into single rests and measure bars -- */
function mrest_expand(s) {
	var	p_voice, s2, next,
		nb = s.nmes,
		dur = s.dur / nb

	/* change the multi-rest (type bar) to a single rest */
	var a_dd = s.a_dd;
	s.type = C.REST;
	s.dur = dur;
	s.head = C.FULL;
	s.nflags = -2;

	/* add the bar(s) and rest(s) */
	next = s.next;
	p_voice = s.p_v;
	p_voice.last_sym = s;
	p_voice.time = s.time + dur;
	p_voice.cst = s.st;
	s2 = s
	while (--nb > 0) {
		s2 = sym_add(p_voice, C.BAR);
		s2.bar_type = "|";
		s2 = sym_add(p_voice, C.REST);
		if (s.invis)
			s2.invis = true;
		s2.dur = dur;
		s2.head = C.FULL;
		s2.nflags = -2;
		p_voice.time += dur
	}
	s2.next = next
	if (next)
		next.prev = s2;

	/* copy the mrest decorations to the last rest */
	s2.a_dd = a_dd
}

/* -- sort all symbols by time and vertical sequence -- */
// weight of the symbols !! depends on the symbol type !!
var w_tb = new Uint8Array([
	2,	// bar
	1,	// clef
	8,	// custos
	0,	// (free)
	3,	// grace
	5,	// key
	6,	// meter
	9,	// mrest
	9,	// note
	0,	// part
	9,	// rest
	3,	// space
	0,	// staves
	7,	// stbrk
	0,	// tempo
	0,	// (free)
	0,	// block
	0	// remark
])

function sort_all() {
	var	s, s2, p_voice, v, time, w, wmin, ir, multi,
		prev, nb, ir2, v2, sy,
		nv = voice_tb.length,
		vtb = [],
		vn = [],			/* voice indexed by range */
		mrest_time = -1

	for (v = 0; v < nv; v++)
		vtb.push(voice_tb[v].sym)

	/* initialize the voice order */
	var	fl = 1,				// start a new time sequence
		new_sy = cur_sy

	while (1) {
		if (new_sy && fl) {
			sy = new_sy;
			new_sy = null;
			multi = -1;
			vn = []
			for (v = 0; v < nv; v++) {
				if (!sy.voices[v]) {
					sy.voices[v] = {
						range: -1
					}
					continue
				}
				ir = sy.voices[v].range
				if (ir < 0)
					continue
				vn[ir] = v;
				multi++
			}
		}

		/* search the min time and symbol weight */
		wmin = time = 1000000				/* big int */
		for (ir = 0; ir < nv; ir++) {
			v = vn[ir]
			if (v == undefined)
				break
			s = vtb[v]
			if (!s || s.time > time)
				continue
			w = w_tb[s.type]
			if (s.time < time) {
				time = s.time;
				wmin = w
			} else if (w < wmin) {
				wmin = w
			}
			if (s.type == C.MREST) {
				if (s.nmes == 1)
					mrest_expand(s)
				else if (multi > 0)
					mrest_time = time
			}
		}

		if (wmin > 127)
			break			// done

		/* if some multi-rest and many voices, expand */
		if (time == mrest_time) {
			nb = 0
			for (ir = 0; ir < nv; ir++) {
				v = vn[ir]
				if (v == undefined)
					break
				s = vtb[v]
				if (!s || s.time != time
				 || w_tb[s.type] != wmin)
					continue
				if (s.type != C.MREST) {
					mrest_time = -1 /* some note or rest */
					break
				}
				if (nb == 0) {
					nb = s.nmes
				} else if (nb != s.nmes) {
					mrest_time = -1	/* different duration */
					break
				}
			}
			if (mrest_time < 0) {
				for (ir = 0; ir < nv; ir++) {
					v = vn[ir]
					if (v == undefined)
						break
					s = vtb[v]
					if (s && s.type == C.MREST)
						mrest_expand(s)
				}
			}
		}

		/* link the vertical sequence */
		for (ir = 0; ir < nv; ir++) {
			v = vn[ir]
			if (v == undefined)
				break
			s = vtb[v]
			if (!s || s.time != time
			 || w_tb[s.type] != wmin)
				continue
			if (s.type == C.STAVES) {
				new_sy = s.sy;

				// set all voices of previous and next staff systems
				// as reachable
				for (ir2 = 0; ir2 < nv; ir2++) {
					if (vn[ir2] == undefined)
						break
				}
				for (v2 = 0; v2 < nv; v2++) {
					if (!new_sy.voices[v2])
						continue
					ir = new_sy.voices[v2].range
					if (ir < 0
					 || sy.voices[v2].range >= 0)
						continue
					vn[ir2++] = v2
				}
			}
			if (fl) {
				fl = 0;
				s.seqst = true
			}
			s.ts_prev = prev
			if (prev)
				prev.ts_next = s
			else
				tsfirst = s;
			prev = s

			vtb[v] = s.next
		}
		fl = wmin		/* start a new sequence if some width */
	}
}

// adjust some voice elements
function voice_adj() {
	var p_voice, s, s2, v

	// set the duration of the notes under a feathered beam
	function set_feathered_beam(s1) {
		var	s, s2, t, d, b, i, a,
			d = s1.dur,
			n = 1

		/* search the end of the beam */
		for (s = s1; s; s = s.next) {
			if (s.beam_end || !s.next)
				break
			n++
		}
		if (n <= 1) {
			delete s1.feathered_beam
			return
		}
		s2 = s;
		b = d / 2;		/* smallest note duration */
		a = d / (n - 1);	/* delta duration */
		t = s1.time
		if (s1.feathered_beam > 0) {	/* !beam-accel! */
			for (s = s1, i = n - 1;
			     s != s2;
			     s = s.next, i--) {
				d = ((a * i) | 0) + b;
				s.dur = d;
				s.time = t;
				t += d
			}
		} else {				/* !beam-rall! */
			for (s = s1, i = 0;
			     s != s2;
			     s = s.next, i++) {
				d = ((a * i) | 0) + b;
				s.dur = d;
				s.time = t;
				t += d
			}
		}
		s.dur = s.time + s.dur - t;
		s.time = t
	} // end set_feathered_beam()

	/* if Q: from tune header, put it at start of the music */
	s = glovar.tempo
	if (s && staves_found <= 0) {	// && !s.del) {		- play problem
		v = par_sy.top_voice;
		p_voice = voice_tb[v];
		if (p_voice.sym && p_voice.sym.type != C.TEMPO) {
			s = clone(s);
			s.v = v;
			s.p_v = p_voice;
			s.st = p_voice.st;
			s.time = 0;
			s.next = p_voice.sym
			if (s.next)
				s.next.prev = s;
			p_voice.sym = s
		}
	}

	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (p_voice.ignore)
			p_voice.ignore = false
		for (s = p_voice.sym; s; s = s.next) {
			if (s.time >= staves_found)
				break
		}
		for ( ; s; s = s.next) {
			switch (s.type) {
			case C.GRACE:
				// with w_tb[C.BAR] = 2,
				// the grace notes go after the bar;
				// if before a bar, change the grace time
				if (s.next && s.next.type == C.BAR)
					s.time--

				if (!cfmt.graceword)
					continue
				for (s2 = s.next; s2; s2 = s2.next) {
					switch (s2.type) {
					case C.SPACE:
						continue
					case C.NOTE:
						if (!s2.a_ly)
							break
						s.a_ly = s2.a_ly;
						s2.a_ly = null
						break
					}
					break
				}
				continue
			}

			if (s.feathered_beam)
				set_feathered_beam(s)
		}
	}
}

/* -- duplicate the voices as required -- */
function dupl_voice() {
	var	p_voice, p_voice2, s, s2, g, g2, v, i,
		nv = voice_tb.length

	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v];
		p_voice2 = p_voice.clone
		if (!p_voice2)
			continue
		p_voice.clone = null
		for (s = p_voice.sym; s; s = s.next) {
//fixme: there may be other symbols before the %%staves at this same time
			if (s.time >= staves_found)
				break
		}
		p_voice2.clef = clone(p_voice.clef);
		curvoice = p_voice2
		for ( ; s; s = s.next) {
			if (s.type == C.STAVES)
				continue
			s2 = clone(s)
			if (s.notes) {
				s2.notes = []
				for (i = 0; i <= s.nhd; i++)
					s2.notes.push(clone(s.notes[i]))
			}
			sym_link(s2)
//			s2.time = s.time
			if (p_voice2.second)
				s2.second = true
			else
				delete s2.second
			if (p_voice2.floating)
				s2.floating = true
			else
				delete s2.floating
			delete s2.a_ly;
			g = s2.extra
			if (!g)
				continue
			g2 = clone(g);
			s2.extra = g2;
			s2 = g2;
			s2.v = p_voice2.v;
			s2.p_v = p_voice2;
			s2.st = p_voice2.st
			for (g = g.next; g; g = g.next) {
				g2 = clone(g)
				if (g.notes) {
					g2.notes = []
					for (i = 0; i <= g.nhd; i++)
						g2.notes.push(clone(g.notes[i]))
				}
				s2.next = g2;
				g2.prev = s2;
				s2 = g2;
				s2.v = p_voice2.v;
				s2.p_v = p_voice2;
				s2.st = p_voice2.st
			}
		}
	}
}

/* -- create a new staff system -- */
function new_syst(init) {
	var	st, v,
		sy_new = {
			voices: [],
			staves: [],
			top_voice: 0
		}

	if (init) {				/* first staff system */
		cur_sy = par_sy = sy_new
		return
	}

	// update the previous system
	for (v = 0; v < voice_tb.length; v++) {
		st = par_sy.voices[v].st
		var	sy_staff = par_sy.staves[st],
			p_voice = voice_tb[v]
		if (p_voice.staffnonote != undefined)
			sy_staff.staffnonote = p_voice.staffnonote
		if (p_voice.staffscale)
			sy_staff.staffscale = p_voice.staffscale;
		sy_new.voices[v] = clone(par_sy.voices[v]);
		sy_new.voices[v].range = -1;
		delete sy_new.voices[v].second
	}
	for (st = 0; st < par_sy.staves.length; st++) {
		sy_new.staves[st] = clone(par_sy.staves[st]);
		sy_new.staves[st].flags = 0
	}
	par_sy.next = sy_new;
	par_sy = sy_new
}

/* -- set the bar numbers -- */
function set_bar_num() {
	var	s, s2, tim, bar_time, bar_num, rep_dtime,
		v = cur_sy.top_voice,
		wmeasure = voice_tb[v].meter.wmeasure,
		bar_rep = gene.nbar

	/* don't count a bar at start of line */
	for (s = tsfirst; ; s = s.ts_next) {
		if (!s)
			return
		switch (s.type) {
		case C.METER:
			wmeasure = s.wmeasure
		case C.CLEF:
		case C.KEY:
		case C.STBRK:
			continue
		case C.BAR:
			if (s.bar_num) {
				gene.nbar = s.bar_num	/* (%%setbarnb) */
				break
			}
			if (s.text			// if repeat bar
			 && !cfmt.contbarnb) {
				if (s.text[0] == '1') {
					bar_rep = gene.nbar
				} else {
					gene.nbar = bar_rep; /* restart bar numbering */
					s.bar_num = gene.nbar
				}
			}
			break
		}
		break
	}

	// at start of tune, check for an anacrusis
	bar_time = s.time + wmeasure
	if (s.time == 0) {
		for (s2 = s.ts_next; s2; s2 = s2.ts_next) {
			if (s2.type == C.BAR && s2.time) {
				if (s2.time < bar_time) {	// if anacrusis
					s = s2;
					bar_time = s.time + wmeasure
				}
				break
			}
		}
	}

	// set the measure number on the top bars
	bar_num = gene.nbar

	for ( ; s; s = s.ts_next) {
		switch (s.type) {
		case C.METER:
			wmeasure = s.wmeasure
			if (s.time < bar_time)
				bar_time = s.time + wmeasure
			break
		case C.MREST:
			bar_num += s.nmes - 1
			while (s.ts_next
			    && s.ts_next.type != C.BAR)
				s = s.ts_next
			break
		case C.BAR:
			if (s.bar_num)
				bar_num = s.bar_num	// (%%setbarnb)
			if (s.time < bar_time) {	// incomplete measure
				if (s.text && s.text[0] == '1') {
					bar_rep = bar_num;
					rep_dtime = bar_time - s.time
				}
				break
			}

			/* check if any repeat bar at this time */
			tim = s.time;
			s2 = s
			do {
				if (s2.dur)
					break
				if (s2.type == C.BAR && s2.text)	// if repeat bar
					break
				s2 = s2.next
			} while (s2 && s2.time == tim);
			bar_num++
			if (s2 && s2.type == C.BAR && s2.text) {
				if (s2.text[0] == '1') {
					rep_dtime = 0;
					bar_rep = bar_num
				} else {			// restart bar numbering
					if (!cfmt.contbarnb)
						bar_num = bar_rep
					if (rep_dtime) {	// [1 inside measure
						if (cfmt.contbarnb)
							bar_num--;
						bar_time = tim + rep_dtime
						break
					}
				}
			}
			s.bar_num = bar_num;
			bar_time = tim + wmeasure

			// skip the bars of the other voices
			while (s.ts_next
			    && !s.ts_next.seqst)
				s = s.ts_next
			break
		}
	}
	if (cfmt.measurenb < 0)		/* if no display of measure bar */
		gene.nbar = bar_num	/* update in case of more music to come */
}

// note mapping
// %%map map_name note [print [note_head]] [param]*
function get_map(text) {
	if (!text)
		return

	var	i, note, notes, map, tmp, ns,
		a = info_split(text, 2)

	if (a.length < 3) {
		syntax(1, "Not enough parameters in %%map")
		return
	}
	ns = a[1]
	if (ns.indexOf("octave,") == 0
	 || ns.indexOf("key,") == 0) {		// remove the octave part
		ns = ns.replace(/[,']+$/m, '').toLowerCase(); //'
		if (ns[0] == 'k')		// remove the accidental part
			ns = ns.replace(/[_=^]+/, '')
	} else if (ns[0] == '*' || ns.indexOf("all") == 0) {
		ns = 'all'
	} else {				// exact pitch, rebuild the note
		tmp = new scanBuf();
		tmp.buffer = a[1];
		note = parse_acc_pit(tmp)
		if (!note) {
			syntax(1, "Bad note in %%map")
			return
		}
		ns = 'abcdefg'[(note.pit + 77) % 7]
		if (note.acc)
			ns = ['__', '_', '', '^', '^^', '='][note.acc + 2] + ns
		for (i = note.pit; i >= 28; i -= 7)
			ns += "'"
		for (i = note.pit; i < 21; i += 7)
			ns += ","
	}

	notes = maps[a[0]]
	if (!notes)
		maps[a[0]] = notes = {}
	map = notes[ns]
	if (!map)
		notes[ns] = map = []

	/* try the optional 'print' and 'heads' parameters */
	if (!a[2])
		return
	i = 2
	if (a[2].indexOf('=') < 0) {
		if (a[2][0] != '*') {
			tmp = new scanBuf();		// print
			tmp.buffer = a[2];
			map[1] = parse_acc_pit(tmp)
		}
		if (!a[3])
			return
		i++
		if (a[3].indexOf('=') < 0) {
			map[0] = a[3].split(',');
			i++
		}
	}

	for (; i < a.length; i++) {
		switch (a[i]) {
		case "heads=":
			map[0] = a[++i].split(',')
			break
		case "print=":
			tmp = new scanBuf();
			tmp.buffer = a[++i];
			map[1] = parse_acc_pit(tmp)
			break
//		case "transpose=":
//			switch (a[++i][0]) {
//			case "n":
//				map[2] = false
//				break
//			case "y":
//				map[2] = true
//				break
//			}
//			break
		case "color=":
			map[2] = a[++i]
			break
		}
	}
}

// set the transposition in the previous or starting key
function set_transp() {
	var	s, transp, vtransp

	if (curvoice.ckey.k_bagpipe || curvoice.ckey.k_drum)
		return

	if (cfmt.transp && curvoice.transp)	// if %%transpose and score=
		syntax(0, "Mix of old and new transposition syntaxes");

	transp = (cfmt.transp || 0) +		// %%transpose
		(curvoice.transp || 0) +	// score= / sound=
		(curvoice.shift || 0);		// shift=
	vtransp = curvoice.vtransp || 0
	if (transp == vtransp)
		return

	curvoice.vtransp = transp;

	s = curvoice.last_sym
	if (!s) {				// no symbol yet
		curvoice.key = clone(curvoice.okey);
		key_transp(curvoice.key);
		curvoice.ckey = clone(curvoice.key)
		if (curvoice.key.k_none)
			curvoice.key.k_sf = 0
		return
	}

	// set the transposition in the previous K:
	while (1) {
		if (s.type == C.KEY)
			break
		if (!s.prev) {
			s = curvoice.key
			break
		}
		s = s.prev
	}
	key_transp(s);
	curvoice.ckey = clone(s)
	if (curvoice.key.k_none)
		s.k_sf = 0
}

function set_ottava(dcn) {
	if (cfmt.sound)
		return
	switch (dcn) {
	case "15ma(":
		curvoice.ottava = -14
		break
	case "8va(":
		curvoice.ottava = -7
		break
	case "8vb(":
		curvoice.ottava = 7
		break
	case "15mb(":
		curvoice.ottava = 14
		break
	case "15ma)":
	case "8va)":
	case "8vb)":
	case "15mb)":
		curvoice.ottava = 0
		break
	}
}

/* -- process a pseudo-comment (%% or I:) -- */
function do_pscom(text) {
	var	h1, val, s, cmd, param, n, k, b,
		lock = false

	if (text.slice(-5) == ' lock') {
		lock = true;
		text = text.slice(0, -5).trim()
	}
	cmd = text.match(/(\w|-)+/)
	if (!cmd)
		return
	cmd = cmd[0];
	param = text.replace(cmd, '').trim()
	switch (cmd) {
	case "center":
		if (parse.state >= 2) {
			s = new_block("text");
			s.text = cnv_escape(param);
			s.opt = 'c'
			return
		}
		write_text(cnv_escape(param), 'c')
		return
	case "clef":
		if (parse.state >= 2) {
			if (parse.state == 2)
				goto_tune();
			s = new_clef(param)
			if (s)
				get_clef(s)
		}
		return
	case "deco":
		deco_add(param)
		return
	case "linebreak":
		set_linebreak(param)
		return
	case "map":
		get_map(param)
		return
	case "maxsysstaffsep":
		if (parse.state == 3) {
			par_sy.voices[curvoice.v].maxsep = get_unit(param)
			return
		}
		break
	case "multicol":
		generate()
		switch (param) {
		case "start":
			blk_out();
			multicol = {
				posy: posy,
				maxy: posy,
				lmarg: cfmt.leftmargin,
				rmarg: cfmt.rightmargin,
				state: parse.state
			}
			break
		case "new":
			if (!multicol) {
				syntax(1, "%%multicol new without start")
				break
			}
			if (posy > multicol.maxy)
				multicol.maxy = posy;
			cfmt.leftmargin = multicol.lmarg;
			cfmt.rightmargin = multicol.rmarg;
			img.chg = true;
			set_page();
			posy = multicol.posy
			break
		case "end":
			if (!multicol) {
				syntax(1, "%%multicol end without start")
				break
			}
			if (posy < multicol.maxy)
				posy = multicol.maxy;
			cfmt.leftmargin = multicol.lmarg;
			cfmt.rightmargin = multicol.rmarg;
			multicol = undefined;
			blk_flush();
			img.chg = true;
			set_page()
			break
		default:
			syntax(1, "Unknown keyword '$1' in %%multicol", param)
			break
		}
		return
	case "musicfont":
		musicfont = param
		return
	case "ottava":
		if (parse.state != 3) {
			if (parse.state != 2)
				return
			goto_tune()
		}
		n = parseInt(param)
		if (isNaN(n) || n < -2 || n > 2) {
			syntax(1, errs.bad_val, "%%ottava")
			return
		}
		switch (curvoice.ottava) {
		case 14: b = "15mb)"; break
		case 7: b = "8vb)"; break
		case -7: b = "8va)"; break
		case -14: b = "15ma)"; break
		}
		if (b) {
			if (!a_dcn)
				a_dcn = []
			a_dcn.push(b);
			set_ottava(b)
		}
		switch (n) {
		case -2: b = "15mb("; break
		case -1: b = "8vb("; break
		case 0: return
		case 1: b = "8va("; break
		case 2: b = "15ma("; break
		}
		if (!a_dcn)
			a_dcn = []
		a_dcn.push(b);
		set_ottava(b)
		return
	case "repbra":
		if (parse.state >= 2) {
			if (parse.state == 2)
				goto_tune();
			curvoice.norepbra = !get_bool(param)
		}
		return
	case "repeat":
		if (parse.state != 3)
			return
		if (!curvoice.last_sym) {
			syntax(1, "%%repeat cannot start a tune")
			return
		}
		if (!param.length) {
			n = 1;
			k = 1
		} else {
			b = param.split(/\s+/);

			n = parseInt(b[0]);
			k = parseInt(b[1])
			if (isNaN(n) || n < 1
			 || (curvoice.last_sym.type == C.BAR
			  && n > 2)) {
				syntax(1, "Incorrect 1st value in %%repeat")
				return
			}
			if (isNaN(k)) {
				k = 1
			} else {
				if (k < 1) {
					syntax(1, "Incorrect 2nd value in %%repeat")
					return
				}
			}
		}
		parse.repeat_n = curvoice.last_sym.type == C.BAR ? n : -n;
		parse.repeat_k = k
		return
	case "sep":
		var	h2, len, values, lwidth;

		set_page();
		lwidth = img.width - img.lm - img.rm;
		h1 = h2 = len = 0
		if (param) {
			values = param.split(/\s+/);
			h1 = get_unit(values[0])
			if (values[1]) {
				h2 = get_unit(values[1])
				if (values[2])
					len = get_unit(values[2])
			}
		}
		if (h1 < 1)
			h1 = 14
		if (h2 < 1)
			h2 = h1
		if (len < 1)
			len = 90
		if (parse.state >= 2) {
			s = new_block(cmd);
			s.x = (lwidth - len) / 2 / cfmt.scale;
			s.l = len / cfmt.scale;
			s.sk1 = h1;
			s.sk2 = h2
			return
		}
		blk_out();
		vskip(h1);
		output += '<path class="stroke"\n\td="M';
		out_sxsy((lwidth - len) / 2 / cfmt.scale, ' ', 0);
		output += 'h' + (len / cfmt.scale).toFixed(2) + '"/>\n';
		vskip(h2);
		blk_flush()
		return
	case "setbarnb":
		val = parseInt(param)
		if (isNaN(val))
			syntax(1, "Bad %%setbarnb value")
		else if (parse.state >= 2)
			glovar.new_nbar = val
		else
			cfmt.measurefirst = val
		return
	case "staff":
		if (parse.state != 3) {
			if (parse.state != 2)
				return
			goto_tune()
		}
		val = parseInt(param)
		if (isNaN(val)) {
			syntax(1, "Bad %%staff value '$1'", param)
			return
		}
		var st
		if (param[0] == '+' || param[0] == '-')
			st = curvoice.cst + val
		else
			st = val - 1
		if (st < 0 || st > nstaff) {
			syntax(1, "Bad %%staff number $1 (cur $2, max $3)",
					st, curvoice.cst, nstaff)
			return
		}
		delete curvoice.floating;
		curvoice.cst = st
		return
	case "staffbreak":
		if (parse.state != 3) {
			if (parse.state != 2)
				return
			goto_tune()
		}
		s = {
			type: C.STBRK,
			dur:0
		}
		if (param[0] >= '0' && param[0] <= '9') {
			s.xmx = get_unit(param)
			if (param.slice(-1) == 'f')
				s.stbrk_forced = true
		} else {
			s.xmx = 14
			if (param[0] == 'f')
				s.stbrk_forced = true
		}
		sym_link(s)
		return
	case "stafflines":
	case "staffscale":
	case "staffnonote":
		set_v_param(cmd, param)
		return
	case "staves":
	case "score":
		if (parse.state == 0)
			return
		get_staves(cmd, param)
		return
	case "sysstaffsep":
//--fixme: may be global
		if (parse.state == 3) {
			par_sy.voices[curvoice.v].sep = get_unit(param)
			return
		}
		break
	case "text":
		if (parse.state >= 2) {
			s = new_block(cmd);
			s.text = cnv_escape(param);
			s.opt = cfmt.textoption
			return
		}
		write_text(cnv_escape(param), cfmt.textoption)
		return
	case "transpose":		// (abcm2ps compatibility)
		if (cfmt.sound)
			return
		switch (parse.state) {
		case 0:
			cfmt.transp = 0
			// fall thru
		case 1:
		case 2:
			cfmt.transp = (cfmt.transp || 0) + get_transp(param)
			return
//		case 2:
//			goto_tune()
//			break
		}
		for (s = curvoice.last_sym; s; s = s.prev) {
			switch (s.type) {
			case C.NOTE:		// insert a key
				s = clone(curvoice.okey);
				s.k_old_sf = curvoice.ckey.k_sf;
				sym_link(s)
				break
			case C.KEY:
				break
			default:
				continue
			}
			break
		}
		do_info('V', curvoice.id + ' shift=' + param)
		return
	case "tune":
//fixme: to do
		return
	case "user":
		set_user(param)
		return
	case "voicecolor":
		if (parse.state != 3) {
			if (parse.state != 2)
				return
			goto_tune()
		}
		curvoice.color = param
		return
	case "vskip":
		val = get_unit(param)
		if (val < 0) {
			syntax(1, "%%vskip cannot be negative")
			return
		}
		if (parse.state >= 2) {
			s = new_block(cmd);
			s.sk = val
			return
		}
		vskip(val);
		return
	case "newpage":
	case "leftmargin":
	case "rightmargin":
	case "pagescale":
	case "pagewidth":
	case "printmargin":
	case "scale":
	case "staffwidth":
		if (parse.state == 3) {			// tune body
			s = new_block(cmd);
			s.param = param
			return
		}
		if (cmd == "newpage") {
			blk_flush();
			block.newpage = true;
			return
		}
		break
	}
	set_format(cmd, param, lock)
}

// treat the %%beginxxx / %%endxxx sequences
function do_begin_end(type,
			opt,
			text) {
	var i, j, action, s

	switch (type) {
	case "js":
		js_inject(text)
		break
	case "ml":
		if (parse.state >= 2) {
			s = new_block(type);
			s.text = text
		} else {
			svg_flush();
			user.img_out(text)
		}
		break
	case "svg":
		j = 0
		while (1) {
			i = text.indexOf('<style type="text/css">\n', j)
			if (i < 0)
				break
			j = text.indexOf('</style>', i)
			if (j < 0) {
				syntax(1, "No </style> in %%beginsvg sequence")
				break
			}
			style += text.slice(i + 23, j).replace(/\s+$/, '')
		}
		j = 0
		while (1) {
			i = text.indexOf('<defs>\n', j)
			if (i < 0)
				break
			j = text.indexOf('</defs>', i)
			if (j < 0) {
				syntax(1, "No </defs> in %%beginsvg sequence")
				break
			}
			defs_add(text.slice(i + 6, j))
		}
		break
	case "text":
		action = get_textopt(opt);
		if (!action)
			action = cfmt.textoption
		if (parse.state >= 2) {
			s = new_block(type);
			s.text = cnv_escape(text);
			s.opt = action
			break
		}
		write_text(cnv_escape(text), action)
		break
	}
}

/* -- generate a piece of tune -- */
function generate() {
	var v, p_voice;

	if (vover) {
		syntax(1, "No end of voice overlay");
		get_vover(vover.bar ? '|' : ')')
	}

	if (voice_tb.length == 0)
		return
	voice_adj();
	dupl_voice();
	sort_all()			/* define the time / vertical sequences */
	if (!tsfirst)
		return
	set_bar_num()
	if (!tsfirst)
		return				/* no more symbol */

	// give the parser result to the application
	if (user.get_abcmodel)
		user.get_abcmodel(tsfirst, voice_tb, anno_type, info)

	if (user.img_out)		// if SVG generation
		output_music()

	/* reset the parser */
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v];
		p_voice.time = 0;
		p_voice.sym = p_voice.last_sym = null;
		p_voice.st = cur_sy.voices[v].st;
		p_voice.second = cur_sy.voices[v].second;
//		p_voice.clef.time = 0;
		delete p_voice.have_ly;
		p_voice.hy_st = 0;
		delete p_voice.bar_start
		delete p_voice.slur_st
		delete p_voice.s_tie
		delete p_voice.s_rtie
	}
	staves_found = 0			// (for compress/dup the voices)
}

// transpose a key
//fixme: transpose of the accidental list is not done
function key_transp(s_key) {
	var	t = (curvoice.vtransp / 3) | 0,
		sf = (t & ~1) + (t & 1) * 7 + s_key.k_sf

	switch ((curvoice.vtransp + 210) % 3) {
	case 1:
		sf = (sf + 4 + 12 * 4) % 12 - 4	/* more sharps */
		break
	case 2:
		sf = (sf + 7 + 12 * 4) % 12 - 7	/* more flats */
		break
	default:
		sf = (sf + 5 + 12 * 4) % 12 - 5	/* Db, F# or B */
		break
	}
	s_key.k_sf = sf;
	s_key.k_delta = cgd2cde[(sf + 7) % 7]
}

/* -- set the accidentals when K: with modified accidentals -- */
function set_k_acc(s) {
	var i, j, n, nacc, p_acc,
		accs = [],
		pits = [],
		m_n = [],
		m_d = []

	if (s.k_sf > 0) {
		for (nacc = 0; nacc < s.k_sf; nacc++) {
			accs[nacc] = 1;			// sharp
			pits[nacc] = [26, 23, 27, 24, 21, 25, 22][nacc]
		}
	} else {
		for (nacc = 0; nacc < -s.k_sf; nacc++) {
			accs[nacc] = -1;		// flat
			pits[nacc] = [22, 25, 21, 24, 20, 23, 26][nacc]
		}
	}
	n = s.k_a_acc.length
	for (i = 0; i < n; i++) {
		p_acc = s.k_a_acc[i]
		for (j = 0; j < nacc; j++) {
			if (pits[j] == p_acc.pit) {
				accs[j] = p_acc.acc
				if (p_acc.micro_n) {
					m_n[j] = p_acc.micro_n;
					m_d[j] = p_acc.micro_d
				}
				break
			}
		}
		if (j == nacc) {
			accs[j] = p_acc.acc;
			pits[j] = p_acc.pit
			if (p_acc.micro_n) {
				m_n[j] = p_acc.micro_n;
				m_d[j] = p_acc.micro_d
			}
			nacc++
		}
	}
	for (i = 0; i < nacc; i++) {
		p_acc = s.k_a_acc[i]
		if (!p_acc)
			p_acc = s.k_a_acc[i] = {}
		p_acc.acc = accs[i];
		p_acc.pit = pits[i]
		if (m_n[i]) {
			p_acc.micro_n = m_n[i];
			p_acc.micro_d = m_d[i]
		} else {
			delete p_acc.micro_n
			delete p_acc.micro_d
		}
	}
}

/*
 * for transpose purpose, check if a pitch is already in the measure or
 * if it is tied from a previous note, and return the associated accidental
 */
function acc_same_pitch(pitch) {
	var	i, time,
		s = curvoice.last_sym.prev

	if (!s)
		return //undefined;

	time = s.time

	for (; s; s = s.prev) {
		switch (s.type) {
		case C.BAR:
			if (s.time < time)
				return //undefined // no same pitch
			while (1) {
				s = s.prev
				if (!s)
					return //undefined
				if (s.type == C.NOTE) {
					if (s.time + s.dur == time)
						break
					return //undefined
				}
				if (s.time < time)
					return //undefined
			}
			for (i = 0; i <= s.nhd; i++) {
				if (s.notes[i].pit == pitch
				 && s.notes[i].ti1)
					return s.notes[i].acc
			}
			return //undefined
		case C.NOTE:
			for (i = 0; i <= s.nhd; i++) {
				if (s.notes[i].pit == pitch)
					return s.notes[i].acc
			}
			break
		}
	}
	return //undefined
}

/* -- get staves definition (%%staves / %%score) -- */
function get_staves(cmd, parm) {
	var	s, p_voice, p_voice2, i, flags, v, vid,
		st, range,
		a_vf = parse_staves(parm) // array of [vid, flags]

	if (!a_vf)
		return

	if (voice_tb.length != 0) {
		voice_adj();
		dupl_voice()
	}

	/* create a new staff system */
	var	maxtime = 0,
		no_sym = true

	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (p_voice.time > maxtime)
			maxtime = p_voice.time
		if (p_voice.sym)
			no_sym = false
	}
	if (no_sym				/* if first %%staves */
	 || (maxtime == 0 && staves_found < 0)) {
		for (v = 0; v < par_sy.voices.length; v++)
			par_sy.voices[v].range = -1
	} else {

		/*
		 * create a new staff system and
		 * link the 'staves' symbol in a voice which is seen from
		 * the previous system - see sort_all
		 */
		for (v = 0; v < par_sy.voices.length; v++) {
			if (par_sy.voices[v].range >= 0) {
				curvoice = voice_tb[v]
				break
			}
		}
		curvoice.time = maxtime;
		s = {
			type: C.STAVES,
			dur: 0
		}

		sym_link(s);		// link the staves in this voice
		par_sy.nstaff = nstaff;
		new_syst();
		s.sy = par_sy
	}

	staves_found = maxtime

	/* initialize the (old) voices */
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		delete p_voice.second
		delete p_voice.ignore
		delete p_voice.floating
	}
	range = 0
	for (i = 0; i < a_vf.length; i++) {
		vid = a_vf[i][0];
		p_voice = new_voice(vid);
		p_voice.time = maxtime;
		v = p_voice.v
		if (i == 0)
			par_sy.top_voice = p_voice.v

		// if the voice is already here, clone it
		if (par_sy.voices[v].range >= 0) {
			p_voice2 = clone(p_voice);
			par_sy.voices[voice_tb.length] = clone(par_sy.voices[v]);
			v = voice_tb.length;
			p_voice2.v = v;
			p_voice2.sym = p_voice2.last_sym = null;
			p_voice2.time = maxtime;
			voice_tb.push(p_voice2)
			delete p_voice2.clone
			while (p_voice.clone)
				p_voice = p_voice.clone;
			p_voice.clone = p_voice2;
			p_voice = p_voice2
		}
		a_vf[i][0] = p_voice;
		par_sy.voices[v].range = range++
	}

	/* change the behavior from %%staves to %%score */
	if (cmd[1] == 't') {				/* if %%staves */
		for (i = 0; i < a_vf.length; i++) {
			flags = a_vf[i][1]
			if (!(flags & (OPEN_BRACE | OPEN_BRACE2)))
				continue
			if ((flags & (OPEN_BRACE | CLOSE_BRACE))
					== (OPEN_BRACE | CLOSE_BRACE)
			 || (flags & (OPEN_BRACE2 | CLOSE_BRACE2))
					== (OPEN_BRACE2 | CLOSE_BRACE2))
				continue
			if (a_vf[i + 1][1] != 0)
				continue
			if ((flags & OPEN_PARENTH)
			 || (a_vf[i + 2][1] & OPEN_PARENTH))
				continue

			/* {a b c} -> {a *b c} */
			if (a_vf[i + 2][1] & (CLOSE_BRACE | CLOSE_BRACE2)) {
				a_vf[i + 1][1] |= FL_VOICE

			/* {a b c d} -> {(a b) (c d)} */
			} else if (a_vf[i + 2][1] == 0
				&& (a_vf[i + 3][1]
					& (CLOSE_BRACE | CLOSE_BRACE2))) {
				a_vf[i][1] |= OPEN_PARENTH;
				a_vf[i + 1][1] |= CLOSE_PARENTH;
				a_vf[i + 2][1] |= OPEN_PARENTH;
				a_vf[i + 3][1] |= CLOSE_PARENTH
			}
		}
	}

	/* set the staff system */
	st = -1
	for (i = 0; i < a_vf.length; i++) {
		flags = a_vf[i][1]
		if ((flags & (OPEN_PARENTH | CLOSE_PARENTH))
				== (OPEN_PARENTH | CLOSE_PARENTH)) {
			flags &= ~(OPEN_PARENTH | CLOSE_PARENTH);
			a_vf[i][1] = flags
		}
		p_voice = a_vf[i][0]
		if (flags & FL_VOICE) {
			p_voice.floating = true;
			p_voice.second = true
		} else {
			st++;
			if (!par_sy.staves[st]) {
				par_sy.staves[st] = {
					stafflines: '|||||',
					staffscale: 1
				}
			}
			par_sy.staves[st].flags = 0
		}
		v = p_voice.v;
		p_voice.st = p_voice.cst =
				par_sy.voices[v].st = st;
		par_sy.staves[st].flags |= flags
		if (flags & OPEN_PARENTH) {
			p_voice2 = p_voice
			while (i < a_vf.length - 1) {
				p_voice = a_vf[++i][0];
				v = p_voice.v
				if (a_vf[i][1] & MASTER_VOICE) {
					p_voice2.second = true
					p_voice2 = p_voice
				} else {
					p_voice.second = true;
				}
				p_voice.st = p_voice.cst
						= par_sy.voices[v].st
						= st
				if (a_vf[i][1] & CLOSE_PARENTH)
					break
			}
			par_sy.staves[st].flags |= a_vf[i][1]
		}
	}
	if (st < 0)
		st = 0
	par_sy.nstaff = nstaff = st

	/* change the behaviour of '|' in %%score */
	if (cmd[1] == 'c') {				/* if %%score */
		for (st = 0; st < nstaff; st++)
			par_sy.staves[st].flags ^= STOP_BAR
	}

	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (par_sy.voices[v].range < 0) {
			p_voice.ignore = true
			continue
		}
		par_sy.voices[v].second = p_voice.second;
		st = p_voice.st
		if (st > 0 && !p_voice.norepbra
		 && !(par_sy.staves[st - 1].flags & STOP_BAR))
			p_voice.norepbra = true
	}

	curvoice = parse.state >= 2 ? voice_tb[par_sy.top_voice] : null
}

/* -- get a voice overlay -- */
function get_vover(type) {
	var	p_voice2, p_voice3, range, s, time, v, v2, v3,
		line = parse.line

	// get a voice or create a clone of the current voice
	function clone_voice(id) {
		var v, p_voice

		for (v = 0; v < voice_tb.length; v++) {
			p_voice = voice_tb[v]
			if (p_voice.id == id)
				return p_voice		// found
		}
		p_voice = clone(curvoice);
		p_voice.v = voice_tb.length;
		p_voice.id = id;
		p_voice.sym = p_voice.last_sym = null;

		delete p_voice.nm
		delete p_voice.snm
		delete p_voice.new_name
		delete p_voice.lyric_restart
		delete p_voice.lyric_cont
		delete p_voice.ly_a_h;
		delete p_voice.sym_restart
		delete p_voice.sym_cont

		voice_tb.push(p_voice)
		return p_voice
	} // clone_voice()

	/* treat the end of overlay */
	if (curvoice.ignore)
		return
	if (type == '|'
	 || type == ')')  {
		if (!curvoice.last_note) {
			syntax(1, errs.nonote_vo)
			return
		}
		curvoice.last_note.beam_end = true
		if (!vover) {
			syntax(1, "Erroneous end of voice overlay")
			return
		}
		if (curvoice.time != vover.p_voice.time) {
			syntax(1, "Wrong duration in voice overlay");
			if (curvoice.time > vover.p_voice.time)
				vover.p_voice.time = curvoice.time
		}
		curvoice = vover.p_voice;
		vover = null
		return
	}

	/* treat the full overlay start */
	if (type == '(') {
		if (vover) {
			syntax(1, "Voice overlay already started")
			return
		}
		vover = {
			p_voice: curvoice,
			time: curvoice.time
		}
		return
	}

	/* (here is treated a new overlay - '&') */
	/* create the extra voice if not done yet */
	if (!curvoice.last_note) {
		syntax(1, errs.nonote_vo)
		return
	}
	curvoice.last_note.beam_end = true;
	p_voice2 = curvoice.voice_down
	if (!p_voice2) {
		p_voice2 = clone_voice(curvoice.id + 'o');
		curvoice.voice_down = p_voice2;
		p_voice2.time = 0;
		p_voice2.second = true;
		v2 = p_voice2.v;
		par_sy.voices[v2] = {
			st: curvoice.st,
			second: true
		}
		var f_clone = curvoice.clone != undefined ? 1 : 0;
		range = par_sy.voices[curvoice.v].range
		for (v = 0; v < par_sy.voices.length; v++) {
			if (par_sy.voices[v].range > range)
				par_sy.voices[v].range += f_clone + 1
		}
		par_sy.voices[v2].range = range + 1
		if (f_clone) {
			p_voice3 = clone_voice(p_voice2.id + 'c');
			p_voice3.second = true;
			v3 = p_voice3.v;
			par_sy.voices[v3] = {
				second: true,
				range: range + 2
			}
			p_voice2.clone = p_voice3
		}
	}
	p_voice2.ulen = curvoice.ulen
	p_voice2.dur_fact = curvoice.dur_fact
	if (curvoice.uscale)
		p_voice2.uscale = curvoice.uscale

	if (!vover) {				/* first '&' in a measure */
		vover = {
			bar: true,
			p_voice: curvoice
		}
		time = p_voice2.time
		for (s = curvoice.last_sym; /*s*/; s = s.prev) {
			if (s.type == C.BAR
			 || s.time <= time)	/* (if start of tune) */
				break
		}
		vover.time = s.time
	} else {
		if (curvoice != vover.p_voice
		 && curvoice.time != vover.p_voice.time) {
			syntax(1, "Wrong duration in voice overlay")
			if (curvoice.time > vover.p_voice.time)
				vover.p_voice.time = curvoice.time
		}
	}
	p_voice2.time = vover.time;
	curvoice = p_voice2
}

// check if a clef, key or time signature may go at start of the current voice
function is_voice_sig() {
	var s

	if (!curvoice.sym)
		return true	// new voice (may appear in the middle of a tune)
	if (curvoice.time != 0)
		return false
	for (s = curvoice.last_sym; s; s = s.prev)
		if (w_tb[s.type] != 0)
			return false
	return true
}

// treat a clef found in the tune body
function get_clef(s) {
	var	s2, s3

	if (is_voice_sig()) {
		curvoice.clef = s
		return
	}

	// clef change
	/* the clef must appear before a key signature or a bar */
	for (s2 = curvoice.last_sym;
	     s2 && s2.prev && s2.time == curvoice.time;
	     s2 = s2.prev) {
		if (w_tb[s2.type] != 0)
			break
	}
	if (s2 && s2.prev
	 && s2.time == curvoice.time		// if no time skip
	 && ((s2.type == C.KEY && !s2.k_none) || s2.type == C.BAR)) {
		for (s3 = s2; s3.prev; s3 = s3.prev) {
			switch (s3.prev.type) {
			case C.KEY:
			case C.BAR:
				continue
			}
			break
		}
		s2 = curvoice.last_sym;
		curvoice.last_sym = s3.prev;
		sym_link(s);
		s.next = s3;
		s3.prev = s;
		curvoice.last_sym = s2
	} else {
		sym_link(s)
	}
	s.clef_small = true
}

// treat K: (kp = key signature + parameters)
function get_key(parm) {
	var	v, p_voice, s, transp,
//		[s_key, a] = new_key(parm)	// KO with nodejs
		a = new_key(parm),
		s_key = a[0];

	a = a[1]
	if (s_key.k_sf
	 && !s_key.k_exp
	 && s_key.k_a_acc)
		set_k_acc(s_key)

	switch (parse.state) {
	case 1:				// in tune header (first K:)
		if (s_key.k_sf == undefined && !s_key.k_a_acc) { // empty K:
			s_key.k_sf = 0;
			s_key.k_none = true
		}
		for (v = 0; v < voice_tb.length; v++) {
			p_voice = voice_tb[v];
			p_voice.key = clone(s_key);
			p_voice.okey = clone(s_key);
			p_voice.ckey = clone(s_key)
		}
		parse.okey = clone(s_key);
		parse.ckey = s_key
		if (a.length != 0)
			memo_kv_parm('*', a)
		if (!glovar.ulen)
			glovar.ulen = C.BLEN / 8;
		parse.state = 2;		// in tune header after K:

		set_page();
		write_heading();
		reset_gen();
		gene.nbar = cfmt.measurefirst	// measure numbering
		return
	case 2:					// K: at start of tune body
		goto_tune(true)
		break
	}
	if (a.length != 0)
		set_kv_parm(a);

	transp = (cfmt.transp || 0) +
		(curvoice.transp || 0) +
		(curvoice.shift || 0)

	if (s_key.k_sf == undefined) {
		if (!s_key.k_a_acc
		 && !transp)
			return
		s_key.k_sf = curvoice.okey.k_sf
	}

	curvoice.okey = clone(s_key)
	if (transp) {
		curvoice.vtransp = transp;
		key_transp(s_key)
	}

	s_key.k_old_sf = curvoice.ckey.k_sf;	// memorize the key changes

	curvoice.ckey = s_key

	if (is_voice_sig()) {
		curvoice.key = clone(s_key)
		if (s_key.k_none)
			curvoice.key.k_sf = 0
		return
	}

	/* the key signature must appear before a time signature */
	s = curvoice.last_sym
	if (s && s.type == C.METER) {
		curvoice.last_sym = s.prev
		if (!curvoice.last_sym)
			curvoice.sym = null;
		sym_link(s_key);
		s_key.next = s;
		s.prev = s_key;
		curvoice.last_sym = s
	} else {
		sym_link(s_key)
	}
}

// get / create a new voice
function new_voice(id) {
	var	p_voice, v, p_v_sav,
		n = voice_tb.length

	// if first explicit voice and no music, replace the default V:1
	if (n == 1
	 && voice_tb[0].default) {
		delete voice_tb[0].default
		if (voice_tb[0].time == 0) {
			p_voice = voice_tb[0];
			p_voice.id = id
			if (cfmt.transp	// != undefined
			 && parse.state >= 2) {
				p_v_sav = curvoice;
				curvoice = p_voice;
				set_transp();
				curvoice = p_v_sav
			}
			return p_voice		// default voice
		}
	}
	for (v = 0; v < n; v++) {
		p_voice = voice_tb[v]
		if (p_voice.id == id)
			return p_voice		// old voice
	}

	p_voice = {
		v: v,
		id: id,
		time: 0,
		new: true,
		pos: {
			dyn: 0,
			gch: 0,
			gst: 0,
			orn: 0,
			stm: 0,
			voc: 0,
			vol: 0
		},
		scale: 1,
//		st: 0,
//		cst: 0,
		ulen: glovar.ulen,
		dur_fact: 1,
		key: clone(parse.ckey),
		ckey: clone(parse.ckey),
		okey: clone(parse.okey),
		meter: clone(glovar.meter),
		wmeasure: glovar.meter.wmeasure,
		clef: {
			type: C.CLEF,
			clef_auto: true,
			clef_type: "a",		// auto
			time: 0
		},
		hy_st: 0
	}

	voice_tb.push(p_voice);

	par_sy.voices[v] = {
		range: -1
	}

	return p_voice
}

// this function is called at program start and on end of tune
function init_tune() {
	nstaff = -1;
	voice_tb = [];
	curvoice = null;
	new_syst(true);
	staves_found = -1;
	gene = {}
	a_de = []			// remove old decorations
	od = {}				// no ottava decorations anymore
}

// treat V: with many voices
function do_cloning(vs) {
    var	i, eol,
	file = parse.file,
	start = parse.eol + 1,		// next line after V:
	bol = start

	// search the end of the music to be cloned
	while (1) {
		eol = file.indexOf('\n', bol)
		if (eol < 0) {
			eol = 0
			break
		}

		// stop on comment, or information field
		if (/%.*|\n.*|.:.|\[.:/.test(file.slice(eol + 1, eol + 4)))
			break
		bol = eol + 1
	}

	// insert the music sequence in each voice
	include++;
	tosvg(parse.fname, file, start, eol)	// first voice
	for (i = 0; i < vs.length; i++) {
		get_voice(vs[i]);
		tosvg(parse.fname, file, start, eol)
	}
	include--
}

// treat a 'V:' info
function get_voice(parm) {
	var	v, transp, vtransp, vs,
		a = info_split(parm, 1),
		vid = a.shift();

	if (!vid)
		return				// empty V:

	if (vid.indexOf(',') > 0) {		// if many voices
		vs = vid.split(',');
		vid = vs.shift()
	}

	if (parse.state < 2) {
		if (a.length != 0)
			memo_kv_parm(vid, a)
		if (vid != '*' && parse.state == 1)
			new_voice(vid)
		return
	}

	if (vid == '*') {
		syntax(1, "Cannot have V:* in tune body")
		return
	}
	curvoice = new_voice(vid);
	set_kv_parm(a)
	if (parse.state == 2)			// if first voice
		goto_tune();
	set_transp();

	v = curvoice.v
	if (curvoice.new) {			// if new voice
		delete curvoice.new
		if (staves_found < 0) {		// if no %%score/%%staves
			curvoice.st = curvoice.cst = ++nstaff;
			par_sy.nstaff = nstaff;
			par_sy.voices[v].st = nstaff;
			par_sy.voices[v].range = v;
			par_sy.staves[nstaff] = {
				stafflines: "|||||",
				staffscale: 1
			}
		}
	
		if (par_sy.voices[v].range < 0) {
//			if (cfmt.alignbars)
//				syntax(1, "V: does not work with %%alignbars")
			if (staves_found >= 0)
				curvoice.ignore = true
		}
	}

	if (curvoice.stafflines) {
		par_sy.staves[curvoice.st].stafflines = curvoice.stafflines;
		curvoice.stafflines = ''
	}

	if (!curvoice.filtered
	 && !curvoice.ignore
	 && parse.voice_opts) {
		curvoice.filtered = true;
		voice_filter()
	}

	if (vs)
		do_cloning(vs)
}

// change state from 'tune header after K:' to 'in tune body'
// curvoice is defined when called from get_voice()
function goto_tune(is_K) {
	var	v, p_voice,
		s = {
			type: C.STAVES,
			dur: 0,
			sy: par_sy
		}

	parse.state = 3;			// in tune body

	// if no voice yet, create the default voice
	if (voice_tb.length == 0) {
		curvoice = new_voice("1");
		curvoice.clef.istart = curvoice.key.istart;
		curvoice.clef.iend = curvoice.key.iend;
//		nstaff = 0;
		curvoice.default = true
	} else if (!curvoice) {
		curvoice = voice_tb[staves_found < 0 ? 0 : par_sy.top_voice]
	}

	if (!curvoice.init && !is_K) {
		set_kv_parm([]);
		set_transp()
	}

	// update some voice parameters
	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v];
		p_voice.ulen = glovar.ulen
		if (p_voice.key.k_bagpipe
		 && !p_voice.pos.stm) {
			p_voice.pos = clone(p_voice.pos);
			p_voice.pos.stm = C.SL_BELOW
		}
	}

	// initialize the voices when no %%staves/score	
	if (staves_found < 0) {
		nstaff = voice_tb.length - 1
		for (v = 0; v <= nstaff; v++) {
			p_voice = voice_tb[v];
			delete p_voice.new;		// old voice
			p_voice.st = p_voice.cst =
				par_sy.voices[v].st =
					par_sy.voices[v].range = v;
			par_sy.staves[v] = {
				stafflines: '|||||',
				staffscale: 1
			}
		}
		par_sy.nstaff = nstaff
	}

	// link the first %%score in the top voice
	p_voice = curvoice;
	curvoice = voice_tb[par_sy.top_voice];
	sym_link(s)
	if (staves_found < 0)
		s.default = true;
	curvoice = p_voice
}
// abc2svg - lyrics.js - lyrics
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

// parse a symbol line (s:)
function get_sym(p, cont) {
	var s, c, i, j, d

	if (curvoice.ignore)
		return

	// get the starting symbol of the lyrics
	if (cont) {					// +:
		s = curvoice.sym_cont
		if (!s) {
			syntax(1, "+: symbol line without music")
			return
		}
	} else {
		if (curvoice.sym_restart) {		// new music
			curvoice.sym_start = s = curvoice.sym_restart;
			curvoice.sym_restart = null
		} else {
			s = curvoice.sym_start
		}
		if (!s)
			s = curvoice.sym
		if (!s) {
			syntax(1, "s: without music")
			return
		}
	}

	/* scan the symbol line */
	i = 0
	while (1) {
		while (p[i] == ' ' || p[i] == '\t')
			i++;
		c = p[i]
		if (!c)
			break
		switch (c) {
		case '|':
			while (s && s.type != C.BAR)
				s = s.next
			if (!s) {
				syntax(1, "Not enough measure bars for symbol line")
				return
			}
			s = s.next;
			i++
			continue
		case '!':
		case '"':
			j = ++i
			i = p.indexOf(c, j)
			if (i < 0) {
				syntax(1, c == '!' ?
					"No end of decoration" :
					"No end of guitar chord");
				i = p.length
				continue
			}
			d = p.slice(j - 1, i + 1)
			break
		case '*':
			break
		default:
			d = c.charCodeAt(0)
			if (d < 128) {
				d = char_tb[d]
				if (d.length > 1
				 && (d[0] == '!' || d[0] == '"')) {
					c = d[0]
					break
				}
			}
			syntax(1, errs.bad_char, c)
			break
		}

		/* store the element in the next note */
		while (s && (s.type != C.NOTE || s.grace))
			s = s.next
		if (!s) {
			syntax(1, "Too many elements in symbol line")
			return
		}
		switch (c) {
		default:
//		case '*':
			break
		case '!':
			deco_cnv([d.slice(1, -1)], s, s.prev)
			break
		case '"':
			a_gch = s.a_gch;
			parse_gchord(d)
			if (a_gch)
				gch_build(s)
			break
		}
		s = s.next;
		i++
	}
	curvoice.lyric_cont = s
}

/* -- parse a lyric (vocal) line (w:) -- */
function get_lyrics(text, cont) {
	var s, word, p, i, j, ly

	if (curvoice.ignore)
		return
	if (curvoice.pos.voc != C.SL_HIDDEN)
		curvoice.have_ly = true

	// get the starting symbol of the lyrics
	if (cont) {					// +:
		s = curvoice.lyric_cont
		if (!s) {
			syntax(1, "+: lyric without music")
			return
		}
	} else {
		set_font("vocal")
		if (curvoice.lyric_restart) {		// new music
			curvoice.lyric_start = s = curvoice.lyric_restart;
			curvoice.lyric_restart = null;
			curvoice.lyric_line = 0
		} else {
			curvoice.lyric_line++;
			s = curvoice.lyric_start
		}
		if (!s)
			s = curvoice.sym
		if (!s) {
			syntax(1, "w: without music")
			return
		}
	}

	/* scan the lyric line */
	p = text;
	i = 0
	while (1) {
		while (p[i] == ' ' || p[i] == '\t')
			i++
		if (!p[i])
			break
		j = parse.istart + i + 2	// start index
		switch (p[i]) { 
		case '|':
			while (s && s.type != C.BAR)
				s = s.next
			if (!s) {
				syntax(1, "Not enough measure bars for lyric line")
				return
			}
			s = s.next;
			i++
			continue
		case '-':
			word = "-\n"
			break
		case '_':
			word = "_\n"
			break
		case '*':
			word = ""
			break
		default:
			if (p[i] == '\\'
			 && i == p.length - 1) {
				curvoice.lyric_cont = s
				return
			}
			word = "";
			while (1) {
				if (!p[i])
					break
				switch (p[i]) {
				case '_':
				case '*':
				case '|':
					i--
				case ' ':
				case '\t':
					break
				case '~':
					word += ' ';
					i++
					continue
				case '-':
					word += "\n"
					break
				case '\\':
					word += p[++i];
					i++
					continue
				default:
					word += p[i++]
					continue
				}
				break
			}
			break
		}

		/* store the word in the next note */
		while (s && (s.type != C.NOTE || s.grace))
			s = s.next
		if (!s) {
			syntax(1, "Too many words in lyric line")
			return
		}
		if (word
		 && s.pos.voc != C.SL_HIDDEN) {
			if (word.match(/^\$\d/)) {
				if (word[1] == '0')
					set_font("vocal")
				else
					set_font("u" + word[1]);
				word = word.slice(2)
			}
			ly = {
				t: word,
				font: gene.curfont,
				w: strwh(word)[0],
				istart: j,
				iend: j + word.length
			}
			if (!s.a_ly)
				s.a_ly = []
			s.a_ly[curvoice.lyric_line] = ly
		}
		s = s.next;
		i++
	}
	curvoice.lyric_cont = s
}

// -- set the width needed by the lyrics --
// (called once per tune)
function ly_width(s, wlw) {
	var	ly, sz, swfac, align, xx, w, i, j, k, shift, p,
		a_ly = s.a_ly;

	align = 0
	for (i = 0; i < a_ly.length; i++) {
		ly = a_ly[i]
		if (!ly)
			continue
		p = ly.t;
		if (p == "-\n" || p == "_\n") {
			ly.shift = 0
			continue
		}
		w = ly.w;
		swfac = ly.font.swfac;
		xx = w + 2 * cwid(' ') * swfac
		if (s.type == C.GRACE) {			// %%graceword
			shift = s.wl
		} else if ((p[0] >= '0' && p[0] <= '9' && p.length > 2)
		 || p[1] == ':'
		 || p[0] == '(' || p[0] == ')') {
			if (p[0] == '(') {
				sz = cwid('(') * swfac
			} else {
				j = p.indexOf(' ');
				set_font(ly.font)
				if (j > 0)
					sz = strwh(p.slice(0, j))[0]
				else
					sz = w
			}
			shift = (w - sz + 2 * cwid(' ') * swfac) * .4
			if (shift > 20)
				shift = 20;
			shift += sz
			if (ly.t[0] >= '0' && ly.t[0] <= '9') {
				if (shift > align)
					align = shift
			}
		} else {
			shift = xx * .4
			if (shift > 20)
				shift = 20
		}
		ly.shift = shift
		if (wlw < shift)
			wlw = shift;
//		if (p[p.length - 1] == "\n")		// if "xx-"
//			xx -= cwid(' ') * swfac
		xx -= shift;
		shift = 2 * cwid(' ') * swfac
		for (k = s.next; k; k = k.next) {
			switch (k.type) {
			case C.NOTE:
			case C.REST:
				if (!k.a_ly || !k.a_ly[i]
				 || k.a_ly[i].w == 0)
					xx -= 9
				else if (k.a_ly[i].t == "-\n"
				      || k.a_ly[i].t == "_\n")
					xx -= shift
				else
					break
				if (xx <= 0)
					break
				continue
			case C.CLEF:
			case C.METER:
			case C.KEY:
				xx -= 10
				continue
			default:
				xx -= 5
				break
			}
			break
		}
		if (xx > s.wr)
			s.wr = xx
	}
	if (align > 0) {
		for (i = 0; i < a_ly.length; i++) {
			ly = a_ly[i]
			if (ly && ly.t[0] >= '0' && ly.t[0] <= '9')
				ly.shift = align
		}
	}
	return wlw
}

/* -- draw the lyrics under (or above) notes -- */
/* (the staves are not yet defined) */
/* !! this routine is tied to ly_width() !! */
function draw_lyric_line(p_voice, j, y) {
	var	p, lastx, w, s, s2, ly, lyl,
		hyflag, lflag, x0, font, shift

	if (p_voice.hy_st & (1 << j)) {
		hyflag = true;
		p_voice.hy_st &= ~(1 << j)
	}
	for (s = p_voice.sym; /*s*/; s = s.next)
		if (s.type != C.CLEF
		 && s.type != C.KEY && s.type != C.METER)
			break
	lastx = s.prev ? s.prev.x : tsfirst.x;
	x0 = 0
	for ( ; s; s = s.next) {
		if (s.a_ly)
			ly = s.a_ly[j]
		else
			ly = null
		if (!ly) {
			switch (s.type) {
			case C.REST:
			case C.MREST:
				if (lflag) {
					out_wln(lastx + 3, y, x0 - lastx);
					lflag = false;
					lastx = s.x + s.wr
				}
			}
			continue
		}
		if (ly.font != gene.curfont)		/* font change */
			gene.curfont = font = ly.font;
		p = ly.t;
		w = ly.w;
		shift = ly.shift
		if (hyflag) {
			if (p == "_\n") {		/* '_' */
				p = "-\n"
			} else if (p != "-\n") {	/* not '-' */
				out_hyph(lastx, y, s.x - shift - lastx);
				hyflag = false;
				lastx = s.x + s.wr
			}
		}
		if (lflag
		 && p != "_\n") {		/* not '_' */
			out_wln(lastx + 3, y, x0 - lastx + 3);
			lflag = false;
			lastx = s.x + s.wr
		}
		if (p == "-\n"			/* '-' */
		 || p == "_\n") {		/* '_' */
			if (x0 == 0 && lastx > s.x - 18)
				lastx = s.x - 18
			if (p[0] == '-')
				hyflag = true
			else
				lflag = true;
			x0 = s.x - shift
			continue
		}
		x0 = s.x - shift;
		if (p.slice(-1) == '\n') {
			p = p.slice(0, -1);	/* '-' at end */
			hyflag = true
		}
		if (user.anno_start || user.anno_stop) {
			s2 = {
				st: s.st,
				istart: ly.istart,
				iend: ly.iend,
				x: x0,
				y: y,
				ymn: y,
				ymx: y + gene.curfont.size,
				wl: 0,
				wr: w
			}
			anno_start(s2, 'lyrics')
		}
		xy_str(x0, y, p);
		anno_stop(s2, 'lyrics')
		lastx = x0 + w
	}
	if (hyflag) {
		hyflag = false;
		x0 = realwidth - 10
		if (x0 < lastx + 10)
			x0 = lastx + 10;
		out_hyph(lastx, y, x0 - lastx)
		if (cfmt.hyphencont)
			p_voice.hy_st |= (1 << j)
	}

	/* see if any underscore in the next line */
	for (p_voice.s_next ; s; s = s.next) {
		if (s.type == C.NOTE) {
			if (!s.a_ly)
				break
			ly = s.a_ly[j]
			if (ly && ly.t == "_\n") {
				lflag = true;
				x0 = realwidth - 15
				if (x0 < lastx + 12)
					x0 = lastx + 12
			}
			break
		}
	}
	if (lflag) {
		out_wln(lastx + 3, y, x0 - lastx + 3);
		lflag = false
	}
}

function draw_lyrics(p_voice, nly, a_h, y,
				incr) {	/* 1: below, -1: above */
	var	j, top,
		sc = staff_tb[p_voice.st].staffscale;

	set_font("vocal")
	if (incr > 0) {				/* under the staff */
		if (y > -cfmt.vocalspace)
			y = -cfmt.vocalspace;
		y *= sc
		for (j = 0; j < nly; j++) {
			y -= a_h[j] * 1.1;
			draw_lyric_line(p_voice, j, y)
		}
		return (y - a_h[j - 1] / 6) / sc
	}

	/* above the staff */
	top = staff_tb[p_voice.st].topbar + cfmt.vocalspace
	if (y < top)
		y = top;
	y *= sc
	for (j = nly; --j >= 0;) {
		draw_lyric_line(p_voice, j, y);
		y += a_h[j] * 1.1
	}
	return y / sc
}

// -- draw all the lyrics --
/* (the staves are not yet defined) */
function draw_all_lyrics() {
	var	p_voice, s, v, nly, i, x, y, w, a_ly, ly,
		lyst_tb = new Array(nstaff),
		nv = voice_tb.length,
		h_tb = new Array(nv),
		nly_tb = new Array(nv),
		above_tb = new Array(nv),
		rv_tb = new Array(nv),
		top = 0,
		bot = 0,
		st = -1

	/* compute the number of lyrics per voice - staff
	 * and their y offset on the staff */
	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v]
		if (!p_voice.sym)
			continue
		if (p_voice.st != st) {
			top = 0;
			bot = 0;
			st = p_voice.st
		}
		nly = 0
		if (p_voice.have_ly) {
			if (!h_tb[v])
				h_tb[v] = []
			for (s = p_voice.sym; s; s = s.next) {
				a_ly = s.a_ly
				if (!a_ly)
					continue
/*fixme:should get the real width*/
				x = s.x;
				w = 10
				for (i = 0; i < a_ly.length; i++) {
					ly = a_ly[i]
					if (ly && ly.w != 0) {
						x -= ly.shift;
						w = ly.w
						break
					}
				}
				y = y_get(p_voice.st, 1, x, w)
				if (top < y)
					top = y;
				y = y_get(p_voice.st, 0, x, w)
				if (bot > y)
					bot = y
				while (nly < a_ly.length)
					h_tb[v][nly++] = 0
				for (i = 0; i < a_ly.length; i++) {
					ly = a_ly[i]
					if (!ly)
						continue
					if (!h_tb[v][i]
					 || ly.font.size > h_tb[v][i])
						h_tb[v][i] = ly.font.size
				}
			}
		} else {
			y = y_get(p_voice.st, 1, 0, realwidth)
			if (top < y)
				top = y;
			y = y_get(p_voice.st, 0, 0, realwidth)
			if (bot > y)
				bot = y
		}
		if (!lyst_tb[st])
			lyst_tb[st] = {}
		lyst_tb[st].top = top;
		lyst_tb[st].bot = bot;
		nly_tb[v] = nly
		if (nly == 0)
			continue
		if (p_voice.pos.voc)
			above_tb[v] = p_voice.pos.voc == C.SL_ABOVE
		else if (voice_tb[v + 1]
/*fixme:%%staves:KO - find an other way..*/
		      && voice_tb[v + 1].st == st
		      && voice_tb[v + 1].have_ly)
			above_tb[v] = true
		else
			above_tb[v] = false
		if (above_tb[v])
			lyst_tb[st].a = true
		else
			lyst_tb[st].b = true
	}

	/* draw the lyrics under the staves */
	i = 0
	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v]
		if (!p_voice.sym)
			continue
		if (!p_voice.have_ly)
			continue
		if (above_tb[v]) {
			rv_tb[i++] = v
			continue
		}
		st = p_voice.st;
// don't scale the lyrics
		set_dscale(st, true)
		if (nly_tb[v] > 0)
			lyst_tb[st].bot = draw_lyrics(p_voice, nly_tb[v],
							h_tb[v],
							lyst_tb[st].bot, 1)
	}

	/* draw the lyrics above the staff */
	while (--i >= 0) {
		v = rv_tb[i];
		p_voice = voice_tb[v];
		st = p_voice.st;
		set_dscale(st, true);
		lyst_tb[st].top = draw_lyrics(p_voice, nly_tb[v],
						h_tb[v],
						lyst_tb[st].top, -1)
	}

	/* set the max y offsets of all symbols */
	for (v = 0; v < nv; v++) {
		p_voice = voice_tb[v]
		if (!p_voice.sym)
			continue
		st = p_voice.st;
		if (lyst_tb[st].a) {
			top = lyst_tb[st].top + 2
			for (s = p_voice.sym.next; s; s = s.next) {
/*fixme: may have lyrics crossing a next symbol*/
				if (s.a_ly) {
/*fixme:should set the real width*/
					y_set(st, 1, s.x - 2, 10, top)
				}
			}
		}
		if (lyst_tb[st].b) {
			bot = lyst_tb[st].bot - 2
			if (nly_tb[p_voice.v] > 0) {
				for (s = p_voice.sym.next; s; s = s.next) {
					if (s.a_ly) {
/*fixme:should set the real width*/
						y_set(st, 0, s.x - 2, 10, bot)
					}
				}
			} else {
				y_set(st, 0, 0, realwidth, bot)
			}
		}
	}
}
// abc2svg - gchord.js - chord symbols
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

// -- parse a chord symbol / annotation --
// the result is added in the global variable a_gch
// 'type' may be a single '"' or a string '"xxx"' created by U:
function parse_gchord(type) {
	var	c, text, gch, x_abs, y_abs, type,
		i, istart, iend,
		ann_font = get_font("annotation"),
		h_ann = ann_font.size,
		line = parse.line

	function get_float() {
		var txt = ''

		while (1) {
			c = text[i++]
			if ("1234567890.-".indexOf(c) < 0)
				return parseFloat(txt)
			txt += c
		}
	} // get_float()

	istart = parse.bol + line.index
	if (type.length > 1) {			// U:
		text = type.slice(1, -1);
		iend = istart + 1
	} else {
		text = ""
		while (1) {
			c = line.next_char()
			if (!c) {
				syntax(1, "No end of guitar chord")
				return
			}
			if (c == '"')
				break
			if (c == '\\') {
				text += c;
				c = line.next_char()
			}
			text += c
		}
		iend = parse.bol + line.index + 1
	}

	if (curvoice.pos.gch == C.SL_HIDDEN)
		return

	i = 0;
	type = 'g'
	while (1) {
		c = text[i]
		if (!c)
			break
		gch = {
			text: "",
			istart: istart,
			iend: iend,
			font: ann_font
		}
		switch (c) {
		case '@':
			type = c;
			i++;
			x_abs = get_float()
			if (c != ',') {
				syntax(1, "',' lacking in annotation '@x,y'");
				y_abs = 0
			} else {
				y_abs = get_float()
				if (c != ' ')
					i--
			}
			gch.x = x_abs;
			gch.y = y_abs - h_ann / 2
			break
		case '^':
		case '_':
		case '<':
		case '>':
			i++;
			type = c
			break
		default:
			switch (type) {
			case 'g':
				gch.font = get_font("gchord")
				break
			case '@':
				gch.x = x_abs;
				y_abs -= h_ann;
				gch.y = y_abs - h_ann / 2
				break
			}
			break
		}
		gch.type = type
		while (1) {
			c = text[i]
			if (!c)
				break
			switch (c) {
			case '\\':
				c = text[++i]
				if (!c || c == 'n')
					break
				gch.text += '\\'
			default:
				gch.text += c;
				i++
				continue
			case '&':			/* skip "&xxx;" */
				while (1) {
					gch.text += c;
					c = text[++i]
					switch (c) {
					default:
						continue
					case ';':
					case undefined:
					case '\\':
						break
					}
					break
				}
				if (c == ';') {
					gch.text += c
					continue
				}
				break
			case ';':
				break
			}
			i++
			break
		}
		if (!a_gch)
			a_gch = []
		a_gch.push(gch)
	}
}

// transpose a chord symbol
var	note_names = "CDEFGAB",
	latin_names = [ "Do", "Re", "Mi", "Fa", "Sol", "La", "Si" ],
	acc_name = ["bb", "b", "", "#", "##"]

	function gch_tr1(p, i2) {
		var	new_txt, l,
			n, i1, i3, i4, ix, a, ip, ip2,
			latin = 0

		/* main chord */
		switch (p[0]) {
		case 'A': n = 5; break
		case 'B': n = 6; break
		case 'C': n = 0; break
		case 'D':
			if (p[1] == 'o') {
				latin++;
				n = 0		/* Do */
				break
			}
			n = 1
			break
		case 'E': n = 2; break
		case 'F':
			if (p[1] == 'a')
				latin++;	/* Fa */
			n = 3
			break
		case 'G': n = 4; break
		case 'L':
			latin++;		/* La */
			n = 5
			break
		case 'M':
			latin++;		/* Mi */
			n = 2
			break
		case 'R':
			latin++
			n = 1			/* Re */
			break
		case 'S':
			latin++
			if (p[1] == 'o') {
				latin++;
				n = 4		/* Sol */
			} else {
				n = 6		/* Si */
			}
			break
		case '/':			// bass only
			latin--
			break
		default:
			return p
		}

		a = 0;
		ip = latin + 1
		if (latin >= 0) {		// if some chord
			while (p[ip] == '#') {
				a++;
				ip++
			}
			while (p[ip] == 'b') {
				a--;
				ip++
			}
//			if (p[ip] == '=')
//				ip++
			i3 = cde2fcg[n] + i2 + a * 7;
			i4 = cgd2cde[(i3 + 16 * 7) % 7];	// note
			i1 = ((((i3 + 22) / 7) | 0) + 159) % 5;	// accidental
			new_txt = (latin ? latin_names[i4] : note_names[i4]) +
					acc_name[i1]
		} else {
			new_txt = ''
		}

		ip2 = p.indexOf('/', ip)	// skip 'm'/'dim'..
		if (ip2 < 0)
			return new_txt + p.slice(ip);

		/* bass */
		n = note_names.indexOf(p[++ip2])
		if (n < 0)
			return new_txt + p.slice(ip);
//fixme: latin names not treated
		new_txt += p.slice(ip, ip2);
		a = 0
		if (p[++ip2] == '#') {
			a++
			if (p[++ip2] == '#') {
				a++;
				ip2++
			}
		} else if (p[ip2] == 'b') {
			a--
			if (p[++ip2] == 'b') {
				a--;
				ip2++
			}
		}
		i3 = cde2fcg[n] + i2 + a * 7;
		i4 = cgd2cde[(i3 + 16 * 7) % 7];	// note
		i1 = ((((i3 + 22) / 7) | 0) + 159) % 5;	// accidental
		return new_txt + note_names[i4] + acc_name[i1] + p.slice(ip2)
	} // get_tr1

function gch_transp(s) {
	var	gch, p, j,
		i = 0,
		i2 = curvoice.ckey.k_sf - curvoice.okey.k_sf

	while (1) {
		gch = s.a_gch[i++]
		if (!gch)
			return
		if (gch.type != 'g')
			continue
		p = gch.text;
		j = p.indexOf('\t')
		if (j >= 0) {
			j++;
			p = p.slice(0, j) + gch_tr1(p.slice(j), i2)
		}
		gch.text = gch_tr1(p, i2)
	}
}

// -- build the chord indications / annotations --
function gch_build(s) {

	/* split the chord indications / annotations
	 * and initialize their vertical offsets */
	var	gch, wh, xspc, ix,
		pos = curvoice.pos.gch == C.SL_BELOW ? -1 : 1,
		y_above = 0,
		y_below = 0,
		y_left = 0,
		y_right = 0,
		box = cfmt.gchordbox,
		GCHPRE = .4;		// portion of chord before note

	s.a_gch = a_gch;
	a_gch = null

	if (curvoice.vtransp)
		gch_transp(s)

	// change the accidentals in the chord symbols,
	// convert the escape sequences in annotations, and
	// set the offsets
	for (ix = 0; ix < s.a_gch.length; ix++) {
		gch = s.a_gch[ix]
		if (gch.type == 'g') {
			if (cfmt.chordnames) {
				gch.otext = gch.text;	// save for %%diagram
				gch.text = gch.text.replace(/A|B|C|D|E|F|G/g,
					function(c){return cfmt.chordnames[c]})
				if (cfmt.chordnames.B == 'H')
					gch.text = gch.text.replace(/Hb/g, 'Bb')
			}
			gch.text = gch.text.replace(/##|#|=|bb|b/g,
				function(x) {
					switch (x) {
					case '##': return "&#x1d12a;"
					case '#': return "\u266f"
					case '=': return "\u266e"
					case 'b': return "\u266d"
					}
					return "&#x1d12b;"
				});
		} else {
			gch.text = cnv_escape(gch.text);
			if (gch.type == '@'
			 && !user.anno_start && !user.anno_stop)
				continue		/* no width */
		}

		/* set the offsets and widths */
		gene.curfont = gch.font;
		wh = strwh(gch.text);
		gch.w = wh[0]
		switch (gch.type) {
		case '@':
			break
		case '^':			/* above */
			xspc = wh[0] * GCHPRE
			if (xspc > 8)
				xspc = 8;
			gch.x = -xspc;
			y_above -= wh[1];
			gch.y = y_above
			break
		case '_':			/* below */
			xspc = wh[0] * GCHPRE
			if (xspc > 8)
				xspc = 8;
			gch.x = -xspc;
			y_below -= wh[1];
			gch.y = y_below
			break
		case '<':			/* left */
			gch.x = -(wh[0] + 6);
			y_left -= wh[1];
			gch.y = y_left + wh[1] / 2
			break
		case '>':			/* right */
			gch.x = 6;
			y_right -= wh[1];
			gch.y = y_right + wh[1] / 2
			break
		default:			// chord symbol
			gch.box = box
			xspc = wh[0] * GCHPRE
			if (xspc > 8)
				xspc = 8;
			gch.x = -xspc;
			if (pos < 0) {		/* below */
				y_below -= wh[1];
				gch.y = y_below
				if (box) {
					y_below -= 2;
					gch.y -= 1
				}
			} else {
				y_above -= wh[1];
				gch.y = y_above
				if (box) {
					y_above -= 2;
					gch.y -= 1
				}
			}
			break
		}
	}

	/* move upwards the top and middle texts */
	y_left /= 2;
	y_right /= 2
	for (ix = 0; ix < s.a_gch.length; ix++) {
		gch = s.a_gch[ix]
		switch (gch.type) {
		case '^':			/* above */
			gch.y -= y_above
			break
		case '<':			/* left */
			gch.y -= y_left
			break
		case '>':			/* right */
			gch.y -= y_right
			break
		case 'g':			// chord symbol
			if (pos > 0)
				gch.y -= y_above
			break
		}
	}
}

// -- draw the chord symbols and annotations
// (the staves are not yet defined)
// (unscaled delayed output)
function draw_gchord(s, gchy_min, gchy_max) {
	var	gch, gch2, text, ix, x, y, y2, i, j, hbox, h

	// adjust the vertical offset according to the chord symbols
//fixme: w may be too small
	var	w = s.a_gch[0].w,
		y_above = y_get(s.st, 1, s.x - 2, w),
		y_below = y_get(s.st, 0, s.x - 2, w),
		yav = (((s.notes[s.nhd].pit + s.notes[0].pit) >> 1) - 18) * 3

	for (ix = 0; ix < s.a_gch.length; ix++) {
		gch = s.a_gch[ix]
		if (gch.type != 'g')
			continue
		gch2 = gch		// chord symbol closest to the staff
		if (gch.y < 0)
			break
	}
	if (gch2) {
		if (gch2.y >= 0) {
			if (y_above < gchy_max)
				y_above = gchy_max
		} else {
			if (y_below > gchy_min)
				y_below = gchy_min
		}
	}

	set_dscale(s.st);
	for (ix = 0; ix < s.a_gch.length; ix++) {
		gch = s.a_gch[ix];
		use_font(gch.font);
		set_font(gch.font);
		h = gch.font.size;
		w = gch.w;
		x = s.x + gch.x;
		text = gch.text
		switch (gch.type) {
		case '_':			/* below */
			y = gch.y + y_below;
			y_set(s.st, 0, x, w, y - h * .2 - 2)
			break
		case '^':			/* above */
			y = gch.y + y_above;
			y_set(s.st, 1, x, w, y + h * .8 + 2)
			break
		case '<':			/* left */
/*fixme: what symbol space?*/
			if (s.notes[0].acc)
				x -= s.notes[0].shac;
			y = gch.y + yav - h / 2
			break
		case '>':			/* right */
			x += s.xmx
			if (s.dots > 0)
				x += 1.5 + 3.5 * s.dots;
			y = gch.y + yav - h / 2
			break
		default:			// chord symbol
			hbox = gch.box ? 3 : 2
			if (gch.y >= 0) {
				y = gch.y + y_above;
				y_set(s.st, true, x, w, y + h + hbox)
			} else {
				y = gch.y + y_below;
				y_set(s.st, false, x, w, y - hbox)
			}
			i = text.indexOf('\t')

			// if some TAB: expand the chord symbol
			if (i >= 0) {
				x = realwidth
				for (var next = s.next; next; next = next.next) {
					switch (next.type) {
					default:
						continue
					case C.NOTE:
					case C.REST:
					case C.BAR:
						x = next.x
						break
					}
					break
				}
				j = 2
				for (;;) {
					i = text.indexOf('\t', i + 1)
					if (i < 0)
						break
					j++
				}
				var expdx = (x - s.x) / j;

				x = s.x;
				y *= staff_tb[s.st].staffscale
				if (user.anno_start)
					user.anno_start("gchord", gch.istart, gch.iend,
						x - 2, y + h + 2, w + 4, h + 4, s)
				i = 0;
				j = i;
				for (;;) {
					i = text.indexOf('\t', j)
					if (i < 0)
						break
					xy_str(x, y, text.slice(j, i), 'c');
					x += expdx;
					j = i + 1
				}
				xy_str(x, y, text.slice(j), 'c')
				if (user.anno_stop)
					user.anno_stop("gchord", gch.istart, gch.iend,
						s.x - 2, y + h + 2, w + 4, h + 4, s)
				continue
			}
			break
		case '@':			/* absolute */
			y = gch.y + yav
			if (y > 0) {
				y2 = y + h
				if (y2 > staff_tb[s.st].ann_top)
					staff_tb[s.st].ann_top = y2
			} else {
				if (y < staff_tb[s.st].ann_bot)
					staff_tb[s.st].ann_bot = y
			}
			break
		}
		if (user.anno_start)
			user.anno_start("annot", gch.istart, gch.iend,
				x - 2, y + h + 2, w + 4, h + 4, s)
		if (gch.box)
			xy_str_b(x, y, text)
		else
			xy_str(x, y, text)
		if (user.anno_stop)
			user.anno_stop("annot", gch.istart, gch.iend,
				x - 2, y + h + 2, w + 4, h + 4, s)
	}
}
// abc2svg - tail.js
//
// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

function psdeco() { return false }
function psxygl() { return false }

// initialize
	font_init();
	init_tune()

// Abc functions used by the modules
Abc.prototype.add_style = function(s) { style += s };
Abc.prototype.cfmt = function() { return cfmt };
Abc.prototype.get_a_gch = function() { return a_gch };
Abc.prototype.get_cur_sy = function() { return cur_sy };
Abc.prototype.get_curvoice = function() { return curvoice };
Abc.prototype.get_delta_tb = function() { return delta_tb };
Abc.prototype.get_decos = function() { return decos };
Abc.prototype.get_fname = function() { return parse.fname };
Abc.prototype.get_font = get_font;
Abc.prototype.get_font_style = function() { return font_style };
Abc.prototype.get_glyphs = function() { return glyphs };
Abc.prototype.get_img = function() { return img };
Abc.prototype.get_maps = function() { return maps };
Abc.prototype.get_multi = function() { return multicol };
Abc.prototype.get_newpage = function() {
	if (block.newpage) {
		block.newpage = false;
		return true
	}
};
Abc.prototype.get_posy = function() { var t = posy; posy = 0; return t };
Abc.prototype.get_staff_tb = function() { return staff_tb };
Abc.prototype.get_top_v = function() { return par_sy.top_voice };
Abc.prototype.get_tsfirst = function() { return tsfirst };
Abc.prototype.get_voice_tb = function() { return voice_tb };
Abc.prototype.info = function() { return info };
Abc.prototype.set_cur_sy = function(sy) { cur_sy = sy };
Abc.prototype.set_tsfirst = function(s) { tsfirst = s };
Abc.prototype.set_xhtml = function(wt) {
    var wto = write_text;
	write_text = wt
	return wto
};
Abc.prototype.sort_pitch = sort_pitch;
Abc.prototype.stv_g = function() { return stv_g };
Abc.prototype.svg_flush = svg_flush;

    var	hook_init		// set after setting the first module hooks

    // export functions and/or set module hooks
    function set_hooks() {
    var	h = abc2svg.modules.hooks,
	gh = abc2svg.modules.g_hooks

	function set_hs(hs) {
	    var	of, h
		for (var k = 0; k < hs.length; k++) {
			h = hs[k]
			if (typeof h == "string") {
				if (!self[h])
					eval("self." + h + "=" + h)
			} else {
				eval("of=" + h[0] + ";" +
					h[0] + "=" + h[1] + ".bind(self,of)")
			}
		}
	} // set_hs()

	if (hook_init) {			// if new modules
		if (h.length) {
			set_hs(h);
			gh.push.apply(gh, h);
			abc2svg.modules.hooks = []
		}
	} else {				// all modules
		if (h.length) {
			gh.push.apply(gh, h);
			abc2svg.modules.hooks = []
		}
		set_hs(gh);
		hook_init = true
	}
    } // set_hooks()

    var	self = this

}	// end of Abc()

} // end of abc2svg

// compatibility
var Abc = abc2svg.Abc

// nodejs
if (typeof module == 'object' && typeof exports == 'object') {
	exports.abc2svg = abc2svg;
	exports.Abc = Abc
}
// abc2svg - modules.js - module handling
//
// Copyright (C) 2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

abc2svg.loadjs = function(fn, onsuccess, onerror) {
	if (onerror)
		onerror()
}

abc2svg.modules = {
		ambitus: { fn: 'ambitus-1.js' },
		beginps: { fn: 'psvg-1.js' },
		break: { fn: 'break-1.js' },
		capo: { fn: 'capo-1.js' },
		clip: { fn: 'clip-1.js' },
		voicecombine: { fn: 'combine-1.js' },
		diagram: { fn: 'diag-1.js' },
	equalbars: { fn: 'equalbars-1.js' },
		grid: { fn: 'grid-1.js' },
		grid2: { fn: 'grid2-1.js' },
		MIDI: { fn: 'MIDI-1.js' },
		percmap: { fn: 'perc-1.js' },
	sth: { fn: 'sth-1.js' },
	temperament: { fn: 'temper-1.js' },

	nreq: 0,
	hooks: [],
	g_hooks: [],

	// scan the file and find the required modules
	// @file: ABC file
	// @relay: (optional) callback function for continuing the treatment
	// @errmsg: (optional) function to display an error message if any
	//	This function gets one argument: the message
	// return true when all modules are loaded
	load: function(file, relay, errmsg) {

		function get_errmsg() {
			if (typeof user == 'object' && user.errmsg)
				return user.errmsg
			if (typeof printErr == 'function')
				return printErr
			if (typeof alert == 'function')
				return function(m) { alert(m) }
			if (typeof console == 'object')
				return console.log
			return function(){}
		}

		// test if some keyword in the file
	    var	m, r,
		nreq_i = this.nreq,
		ls = file.match(/(^|\n)(%%|I:).+?\b/g)

		if (!ls)
			return true
		this.cbf = relay ||		// (only one callback function)
			function(){}
		this.errmsg = errmsg || get_errmsg()

		for (var i = 0; i < ls.length; i++) {
			m = abc2svg.modules[ls[i].replace(/\n?(%%|I:)/, '')]
			if (!m || m.loaded)
				continue

			m.loaded = true

			// load the module
				this.nreq++;
				abc2svg.loadjs(m.fn,
				    function() {	// if success
					if (--abc2svg.modules.nreq == 0)
						abc2svg.modules.cbf()
				    },
				    function() {	// if error
					abc2svg.modules.errmsg('error loading ' + m.fn);
					if (--abc2svg.modules.nreq == 0)
						abc2svg.modules.cbf()
				    })
		}
		return this.nreq == nreq_i
	}
} // modules
abc2svg.version="1.17.8-4f07d34b4d";abc2svg.vdate="2018-08-24"
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
//#javascript
// Generate a JSON representation of ABC
//
// Copyright (C) 2016 Jean-Francois Moine
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.

// Usage:
//	// Define a get_abcmodel() callback function
//	// This one is called by abc2svg after ABC parsing 
//	user.get_abcmodel = json_callback
//
//	// In this function
//	function json_callback(tsfirst, voice_tb, music_types, info) {
//
//		// Create a AbcJSON instance
//		var abcjson = new AbcJSON();
//
//		// and generate the ABC representation
//		json += abcjson.gen_json(tsfirst, voice_tb, anno_type, info);
//	}
//
//	// result
//	var json = ''

// AbcJSON creation
function AbcJSON(nindent) {			// indentation level
	var inb = Array((nindent || 2) + 1).join(' ') // indentation base

    AbcJSON.prototype.gen_json = function (tsfirst, voice_tb, anno_type, info) {
	var	json, i, j, l, v, s, h,
		ind2 = inb + inb,
		ind3 = ind2 + inb,
		ind4 = ind3 + inb,
		links = {
			next: true,
			prev: true,
			ts_next: true,
			ts_prev: true,
			extra: true,
			p_v: true,
			dd_st: true
		}
	// generate an attribute
	function attr_gen(ind, attr, val) {
		var	i, e,
			indn = ind + inb	// next indentation

		if (links[attr]) {
			if (attr == "extra") {
				json += h + ind + '"extra": [';
				h = '\n'
				for (e = val ; e; e = e.next)
					attr_gen(indn, null, e);
				json += '\n' + ind + ']'
			}
			return
		}
		json += h + ind
		if (attr)
			 json += '"' + attr.toString() + '": ';
		switch (typeof(val)) {
		case "undefined":
			json += "null"
			break
		case "object":
			if (!val) {
				json += "null"
				break
			}
			if (Array.isArray(val)) {
				if (val.length == 0) {
					json += "[]"
					break
				}
				h = '[\n';
				l = val.length
				for (i = 0; i < l; i++)
					attr_gen(indn, null, val[i]);
				json += '\n' + ind + ']'
			} else {
				h = '{\n'
				for (i in val)
				    if (val.hasOwnProperty(i))
					attr_gen(indn, i, val[i]);
				json += '\n' + ind + '}'
			}
			break
		default:
			json += JSON.stringify(val)
			break
		}
		h = ',\n'
	} // attr_gen()

	// music types
	json = '';
	h = '{\n';
	attr_gen(inb, "music_types", anno_type);

	h = ',\n' + inb + '"music_type_ids": {\n';
	l = anno_type.length
	for (i = 0; i < l; i++) {
		if (anno_type[i]) {
			json += h + ind2 + '"' + anno_type[i] + '": ' + i;
			h = ',\n'
		}
	}

	// info
	h = '\n' + inb + '},\n';
	attr_gen(inb, "info", info);

	// voices
	json += ',\n' + inb + '"voices": [';
	v = 0;
	h = '\n'
	while (1) {
		h += ind2 + '{\n' +
			ind3 + '"voice_properties": {\n'
		for (i in voice_tb[v])
		    if (voice_tb[v].hasOwnProperty(i))
			attr_gen(ind4, i, voice_tb[v][i]);

		json += '\n' + ind3 + '},\n' +
			ind3 + '"symbols": [';
		s = voice_tb[v].sym
		if (!s) {
			json += ']\n' + ind3 + '}'
		} else {
			h = '\n'
			for ( ; s; s = s.next)
				attr_gen(ind4, null, s);
			json += '\n' + ind3 + ']\n' +
				ind2 + '}'
		}
		h = ',\n'
		if (!voice_tb[++v])
			break
	}
	return json + '\n' + inb + ']\n}\n'
    }
}
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
//#javascript
// Set the MIDI pitches in the notes
//
// Copyright (C) 2015-2017 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

// Usage:
//	// Define a get_abcmodel() callback function
//	// This one is called by abc2svg after ABC parsing 
//	user.get_abcmodel = my_midi_callback
//
//	// In this function
//	function my_midi_callback(tsfirst, voice_tb, music_types, info) {
//
//		// Create a AbcMIDI instance
//		var abcmidi = new AbcMIDI();
//
//		// and set the MIDI pitches
//		abcmidi.add(tsfirst, voice_tb);
//
//		// The MIDI pitches are stored in the notes
//		//	s.notes[i].midi
//	}

// AbcMIDI creation
function AbcMIDI() {
    var	C = abc2svg.C

	// add MIDI pitches
	AbcMIDI.prototype.add = function(s,		// starting symbol
					voice_tb) {	// voice table

		var	scale = new Int8Array(		// note to pitch
					[0, 2, 4, 5, 7, 9, 11]),
			bmap = new Int8Array(7),	// measure base map
			map = new Int8Array(70),	// current map - 10 octaves
			tie_map,			// index = MIDI pitch
			v,
			transp				// clef transpose

		// re-initialize the map on bar
		function bar_map() {
			for (var j = 0; j < 10; j++)
				for (var i = 0; i < 7; i++)
					map[j * 7 + i] = bmap[i]
		} // bar_map()

		// define the note map
		function key_map(s) {
			for (var i = 0; i < 7; i++)
				bmap[i] = 0
			switch (s.k_sf) {
			case 7: bmap[6] = 1
			case 6: bmap[2] = 1
			case 5: bmap[5] = 1
			case 4: bmap[1] = 1
			case 3: bmap[4] = 1
			case 2: bmap[0] = 1
			case 1: bmap[3] = 1; break
			case -7: bmap[3] = -1
			case -6: bmap[0] = -1
			case -5: bmap[4] = -1
			case -4: bmap[1] = -1
			case -3: bmap[5] = -1
			case -2: bmap[2] = -1
			case -1: bmap[6] = -1; break
			}
			bar_map()
		} // key_map()

		// convert ABC pitch to MIDI
		function pit2midi(p, a) {
			if (a)
				map[p] = a == 3 ? 0 : a; // (3 = natural)
			return ((p / 7) | 0) * 12 + scale[p % 7] +
						(tie_map[p] ||  map[p])
		} // pit2midi()

		// initialize the clefs and keys
		for (v = 0; v < voice_tb.length; v++) {
			if (!voice_tb[v].sym)
				continue
			s = voice_tb[v].clef
			if (!s.clef_octave
			 || s.clef_oct_transp)
				transp = 0
			else
				transp = s.clef_octave

			key_map(voice_tb[v].key);	// init acc. map from key sig.

			// and loop on the symbols of the voice
			vloop(v)
		}
	    function vloop(v) {
		var	i, g, p, note,
			s = voice_tb[v].sym,
			vtime = s.time,		// next time
			tie_time = [],
			rep_tie_map = []

		tie_map = []
		while (s) {
			if (s.time > vtime) {	// if time skip
				bar_map()	// force a measure bar
				vtime = s.time
			}
			if (s.dur)
				vtime = s.time + s.dur
			switch (s.type) {
			case C.BAR:
//fixme: pb when lack of measure bar (voice overlay, new voice)
				// x times repeat
				if (s.text) {
					if (s.text[0] == '1') {	// 1st time
						rep_tie_map = [];
						rep_tie_time = []
						for (i = 0; i < tie_map.length; i++)
							rep_tie_map[i] = tie_map[i]
					} else if (rep_tie_map.length != 0) {
						tie_map = []
						tie_time = []
						for (i = 0; i < rep_tie_map.length; i++) {
							tie_map[i] = rep_tie_map[i];
							tie_time[i] = s.time
						}
					}
				}
				if (!s.invis)
					bar_map()
				break
			case C.CLEF:
				if (!s.clef_octave
				 || s.clef_oct_transp)
					transp = 0
				else
					transp = s.clef_octave
				break
			case C.GRACE:
				for (g = s.extra; g; g = g.next) {
					if (!g.type != C.NOTE)
						continue
					for (i = 0; i <= g.nhd; i++) {
						note = g.notes[i];
						p = note.apit + 19 + transp;
						note.midi = pit2midi(p, note.acc)
					}
				}
				break
			case C.KEY:
				key_map(s)
				break
			case C.NOTE:
				for (i = 0; i <= s.nhd; i++) {
					note = s.notes[i];
					p = note.apit + 19 +	// pitch from C-1
							transp
					if (tie_map[p]) {
						if (s.time > tie_time[p]) {
							delete tie_map[p]
							delete tie_time[p]
						}
					}
					note.midi = pit2midi(p, note.acc)
					if (note.ti1) {
						tie_map[p] = map[p];
						tie_time[p] = s.time + s.dur
					}
				}
				break
			}
			s = s.next
		}
	    } // vloop()
	} // add()
} // end AbcMidi
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// play-1.js - file to include in html pages with abc2svg-1.js for playing
//
// Copyright (C) 2015-2018 Jean-Francois Moine
//
// This file is part of abc2svg.
//
// abc2svg is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with abc2svg.  If not, see <http://www.gnu.org/licenses/>.

// This file is a wrapper around
// - ToAudio (toaudio.js - convert ABC to audio sequences)
// - Audio5 (toaudio5.js - play the audio sequences with webaudio and SF2)
// - Midi5 (tomidi5.js - play the audio sequences with webmidi)

// AbcPlay methods:
//
// get_outputs() - return an array of output devices
//
// set_output() - set the output type/port
//
// set_sfu() - get/set the soundfont URL
// @url: URL - undefined = return current value
//
// set_speed() - get/set the play speed
// @speed: < 1 slower, > 1 faster - undefined = return current value
//
// set_vol() - get/set the current sound volume
// @volume: range [0..1] - undefined = return current value

function AbcPlay(i_conf) {
    var	conf = i_conf,
	audio = ToAudio(),
	audio5, midi5, current,
	abcplay = {				// returned object (only instance)

		// get the output type/ports
		get_outputs: function() {
		    var o,
			outputs = []

			if (midi5) {
				o = midi5.get_outputs()
				if (o)
					outputs = o
			}
			if (audio5) {
				o = audio5.get_outputs()
				if (o)
					outputs = outputs.concat(o)
			}
			return outputs
		},
		set_output: set_output,
		clear: audio.clear,
		add: audio.add,
		set_sft: vf,
		set_sfu: function(v) {
			if (v == undefined)
				return conf.sfu
			conf.sfu = v
		},
		set_speed: function(v) {
			if (v == undefined)
				return conf.speed
			conf.new_speed = v
		},
		set_vol: function(v) {
			if (v == undefined)
				return conf.gain;
			conf.gain = v
			if (current && current.set_vol)
				current.set_vol(v)
		},
		play: play,
		stop: vf
	}

	function vf() {}			// void function

	// start playing when no defined output
	function play(istart, i_iend, a_e) {
	    var o,
		os = abcplay.get_outputs()
		if (os.length == 1) {
			o = 0
		} else {
			o = -1
			var res = window.prompt('Use \n0: ' + os[0] +
					'\n1: ' + os[1] + '?', '0')
			if (res) {
				o = Number(res)
				if (isNaN(o) || o < 0 || o >= os.length)
					o = -1
			}
			if (!res || o < 0) {
				if (conf.onend)
					conf.onend()
				return
			}
		}
		set_output(os[o]);
		abcplay.play(istart, i_iend, a_e)
	}

	// set the current output changing the play functions
	function set_output(name) {
		current = name == 'sf2' ? audio5 : midi5
		if (!current)
			return
		abcplay.play = current.play;
		abcplay.stop = current.stop
		if (current.set_output)
			current.set_output(name)
	} // set_output()

	// set default configuration values
	conf.gain = 0.7;
	conf.speed = 1;

	// get the play parameters from localStorage
	(function get_param() {
		try {
			if (!localStorage)
				return
		} catch (e) {
			return
		}
	    var	v = localStorage.getItem("sfu")
		if (v)
			conf.sfu = v;
		v = localStorage.getItem("volume")
		if (v)
			conf.gain = Number(v)
	})()

	// initialize the playing engines
	if (typeof Midi5 == "function")
		midi5 = Midi5(conf)
	if (typeof Audio5 == "function")
		audio5 = Audio5(conf);

	return abcplay
} // AbcPlay
// toaudio.js - audio generation
//
// Copyright (C) 2015-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

// ToAudio creation
function ToAudio() {

  var	C = abc2svg.C,

	scale = new Uint8Array([0, 2, 4, 5, 7, 9, 11]),	// note to pitch conversion

	a_e,				// event array

	p_time,				// last playing time
	abc_time,			// last ABC time
	play_factor;			// play time factor

// ToAudio
  return {

// clear the playing events and
// return the old ones as an array of Float32Array:
//	[0]: index of the note in the ABC source
//	[1]: time in seconds
//	[2]: MIDI instrument (MIDI GM number - 1)
//	[3]: MIDI note pitch (with cents)
//	[4]: duration
//	[5]: volume (0..1)
//	[6]: voice number
    clear: function() {
	var a_pe = a_e;
	a_e = null
	return a_pe
    }, // clear()

// add playing events from the ABC model
    add: function(start,		// starting symbol
		 voice_tb) {		// voice table
	var	kmaps = [],		// accidentals per voice from key signature
		cmaps = [],		// current accidental table
		map,			// map of the current voice - 10 octaves
		temper,			// temperament
		i, n, dt, d, v,
		top_v,			// top voice
		rep_st_s,		// start of sequence to be repeated
		rep_en_s,		// end ("|1")
		rep_nx_s,		// restart at end of repeat
		rep_st_transp,		// transposition at start of repeat sequence
		rep_st_map,		// and map
		rep_st_fac,		// and play factor
		transp,			// clef transposition per voice
		instr = [],		// instrument per voice
		s = start

	// set the accidentals, transpositions and instruments of the voices
	function set_voices() {
	    var v, p_v, s, mi

		temper = voice_tb[0].temper;	// (set by the module temper.js)
		transp = new Int8Array(voice_tb.length)
		for (v = 0; v < voice_tb.length; v++) {
			p_v = voice_tb[v];

			mi = p_v.instr || 0
			if (p_v.midictl) {
				if (p_v.midictl[32])		// bank LSB
					mi += p_v.midictl[32] * 128
				if (p_v.midictl[0])		// bank MSB
					mi += p_v.midictl[0] * 128 * 128
			}
			instr[v] = mi;			// MIDI instrument

			s = p_v.clef;
			transp[v] = (!s.clef_octave || s.clef_oct_transp) ?
					0 : s.clef_octave

			kmaps[v] = new Float32Array(70);
			cmaps[v] = new Float32Array(70);
			p_v.key.v = v;
			key_map(p_v.key)
		}
	} // set_voices()

	// define the accidentals of a voice
	function key_map(s) {
	    var i, bmap

	    if (s.k_bagpipe) {
		// detune for just intonation in A (C is C#, F is F# and G is Gnat)
//		bmap = new Float32Array([100-13.7, -2, 2, 100-15.6, -31.2, 0, 3.9])
//		for (i = 0; i < 7; i++)
//			bmap[i] = (bmap[i] + 150.6) / 100 // 'A' bagpipe = 480Hz
//				// 150.6 = (Math.log2(480/440) - 1)*1200
		bmap = new Float32Array([2.37, 1.49, 1.53, 2.35, 1.19, 1.51, 1.55])
	    } else {
		bmap = new Float32Array(7)
		switch (s.k_sf) {
		case 7: bmap[6] = 1
		case 6: bmap[2] = 1
		case 5: bmap[5] = 1
		case 4: bmap[1] = 1
		case 3: bmap[4] = 1
		case 2: bmap[0] = 1
		case 1: bmap[3] = 1; break
		case -7: bmap[3] = -1
		case -6: bmap[0] = -1
		case -5: bmap[4] = -1
		case -4: bmap[1] = -1
		case -3: bmap[5] = -1
		case -2: bmap[2] = -1
		case -1: bmap[6] = -1; break
		}
	    }
	    for (i = 0; i < 10; i++)
		kmaps[s.v].set(bmap, i * 7);
	    cmaps[s.v].set(kmaps[s.v])
	} // key_map()

	// convert ABC pitch to MIDI index
	function pit2mid(s, i) {
		var	note = s.notes[i],
			p = note.apit + 19, // pitch from C-1
			a = note.acc

		if (transp[s.v])
			p += transp[s.v]
		if (a) {
			if (a == 3)		// (3 = natural)
				a = 0
			else if (note.micro_n)
				a = (a < 0 ? -note.micro_n : note.micro_n) /
						note.micro_d * 2;
			map[p] = a
		} else {
			a = map[p]
		}
		p = ((p / 7) | 0) * 12 + scale[p % 7] + a
		if (!temper || a | 0 != a)	// if equal temperament or micro-tone
			return p
		return p + temper[p % 12]
	} // pit2mid()

	// handle the ties
	function do_tie(s, note, d) {
		var	n,
			end_time = s.time + s.dur,
			pit = note.apit,
			p = pit + 19,
			a = note.acc

		if (transp[s.v])
			p += transp[s.v]

		// search the end of the tie
		for (s = s.next; ; s = s.next) {
			if (!s)
				return d

			// skip if end of sequence to be repeated
			if (s == rep_en_s) {
				var v = s.v;
				s = rep_nx_s.ts_next
				while (s && s.v != v)
					s = s.ts_next
				if (!s)
					return d
				end_time = s.time
			}
			if (s.time != end_time)
				return d
			if (s.type == C.NOTE)
				break
		}
		n = s.notes.length
		for (i = 0; i < n; i++) {
			note = s.notes[i]
			if (note.apit == pit) {
				d += s.dur / play_factor;
				note.ti2 = true
				return note.ti1 ? do_tie(s, note, d) : d
			}
		}
		return d
	} // do_tie()

	// generate the grace notes
	function gen_grace(s) {
		var	g, i, n, t, d, s2,
			next = s.next

		// before beat
		if (s.sappo) {
			d = C.BLEN / 16
		} else if ((!next || next.type != C.NOTE)
			&& s.prev && s.prev.type == C.NOTE) {
			d = s.prev.dur / 2

		// on beat
		} else {

			// keep the sound elements in time order
			next.ts_prev.ts_next = next.ts_next;
			next.ts_next.ts_prev = next.ts_prev;
			for (s2 = next.ts_next; s2; s2 = s2.ts_next) {
				if (s2.time != next.time) {
					next.ts_next = s2
					next.ts_prev = s2.ts_prev;
					next.ts_prev.ts_next = next;
					s2.ts_prev = next
					break
				}
			}

			if (!next.dots)
				d = next.dur / 2
			else if (next.dots == 1)
				d = next.dur / 3
			else
				d = next.dur * 2 / 7;
			next.time += d;
			next.dur -= d
		}
		n = 0
		for (g = s.extra; g; g = g.next)
			if (g.type == C.NOTE)
				n++;
		d /= n * play_factor;
		t = p_time
		for (g = s.extra; g; g = g.next) {
			if (g.type != C.NOTE)
				continue
			gen_notes(g, t, d);
			t += d
		}
	} // gen_grace()

	// generate the notes
	function gen_notes(s, t, d) {
		for (var i = 0; i <= s.nhd; i++) {
		    var	note = s.notes[i]
			if (note.ti2)
				continue
			a_e.push(new Float32Array([
				s.istart,
				t,
				instr[s.v],
				pit2mid(s, i),
				note.ti1 ? do_tie(s, note, d) : d,
				1,
				s.v]))
		}
	} // gen_note()

	// add() main

	set_voices();			// initialize the voice parameters

	if (!a_e) {			// if first call
		a_e = []
		abc_time = rep_st_t = p_time = 0;
		play_factor = C.BLEN / 4 * 120 / 60	// default: Q:1/4=120
	} else if (s.time < abc_time) {
		abc_time = rep_st_t = s.time
	}

	// loop on the symbols
	while (s) {
//		if (s.type == C.TEMPO
//		 && s.tempo) {
		if (s.tempo) {				// tempo change
			d = 0;
			n = s.tempo_notes.length
			for (i = 0; i < n; i++)
				d += s.tempo_notes[i];
			play_factor = d * s.tempo / 60
		}

		dt = s.time - abc_time
		if (dt > 0) {
			p_time += dt / play_factor;
			abc_time = s.time
		}

		if (s == rep_en_s) {			// repeat end
			s = rep_nx_s;
			abc_time = s.time
		}

		map = cmaps[s.v]
		switch (s.type) {
		case C.BAR:
//fixme: does not work if different measures per voice
			if (s.v != top_v)
				break

			// right repeat
			if (s.bar_type[0] == ':') {
				s.bar_type = '|' +
					 s.bar_type.slice(1); // don't repeat again
				rep_nx_s = s		// repeat next
				if (!rep_en_s)		// if no "|1"
					rep_en_s = s	// repeat end
				if (rep_st_s) {		// if left repeat
					s = rep_st_s
					for (v = 0; v < voice_tb.length; v++) {
						cmaps[v].set(rep_st_map[v]);
						transp[v] = rep_st_transp[v]
					}
					play_factor = rep_st_fac;
				} else {			// back to start
					s = start;
					set_voices();
				}
				abc_time = s.time
				break
			}

			if (!s.invis) {
				for (v = 0; v < voice_tb.length; v++)
					cmaps[v].set(kmaps[v])
			}

			// left repeat
			if (s.bar_type[s.bar_type.length - 1] == ':') {
				rep_st_s = s;
				rep_en_s = null
				for (v = 0; v < voice_tb.length; v++) {
					if (!rep_st_map)
						rep_st_map = []
					if (!rep_st_map[v])
						rep_st_map[v] =
							new Float32Array(70)
					rep_st_map[v].set(cmaps[v]);
					if (!rep_st_transp)
						rep_st_transp = []
					rep_st_transp[v] = transp[v]
				}
				rep_st_fac = play_factor
				break

			// 1st time repeat
			} else if (s.text && s.text[0] == '1') {
				rep_en_s = s
			}
			break
		case C.CLEF:
			transp[s.v] = (!s.clef_octave || s.clef_oct_transp) ?
					0 : s.clef_octave
			break
		case C.GRACE:
			if (s.time == 0		// if before beat at start time
			 && abc_time == 0) {
				dt = 0
				if (s.sappo)
					dt = C.BLEN / 16
				else if (!s.next || s.next.type != C.NOTE)
					dt = d / 2;
				abc_time -= dt
			}
			gen_grace(s)
			break
		case C.KEY:
			key_map(s)
			break
		case C.REST:
		case C.NOTE:
			d = s.dur
			if (s.next && s.next.type == C.GRACE) {
				dt = 0
				if (s.next.sappo)
					dt = C.BLEN / 16
				else if (!s.next.next || s.next.next.type != C.NOTE)
					dt = d / 2;
				s.next.time -= dt;
				d -= dt
			}
			d /= play_factor
			if (s.type == C.NOTE)
				gen_notes(s, p_time, d)
			else
				a_e.push(new Float32Array([
					s.istart,
					p_time,
					0,
					0,
					d,
					0,
					s.v]))
			break
		case C.STAVES:
			top_v = s.sy.top_voice
			break
		}
		s = s.ts_next
	}
    } // add()
  } // return
} // ToAudio

// nodejs
if (typeof module == 'object' && typeof exports == 'object')
	exports.ToAudio = ToAudio
// toaudio5.js - audio output using HTML5 audio
//
// Copyright (C) 2015-2018 Jean-Francois Moine
//
// This file is part of abc2svg.
//
// abc2svg is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with abc2svg.  If not, see <http://www.gnu.org/licenses/>.

// Audio5 creation

// @conf: configuration object - all items are optional:
//	ac: audio context - (default: created on play start)
//	sfu: soundfont URL (sf2 base64 encoded - default: "Scc1t2")
//	onend: callback function called at end of playing
//		(no arguments)
//	onnote: callback function called on note start/stop playing
//		Arguments:
//			i: start index of the note in the ABC source
//			on: true on note start, false on note stop
//	errmsg: function called on error (default: alert)
//
//  When playing, the following items must/may be set:
//	gain: (mandatory) volume, must be set to [0..1]
//	speed: (mandatory) must be set to 1
//	new_speed: (optional) new speed value

// Audio5 methods

// get_outputs() - get the output devices
//	return ['sf2'] or null
//
// play() - start playing
// @start_index -
// @stop_index: indexes of the play_event array
// @play_event: array of array
//		[0]: index of the note in the ABC source
//		[1]: time in seconds
//		[2]: MIDI instrument (MIDI GM number - 1)
//		[3]: MIDI note pitch (with cents)
//		[4]: duration
//		[5]: volume (0..1 - optional)
//
// stop() - stop playing
//
// set_vol() - set the current sound volume
// @volume: range [0..1] - undefined = return current value

    var	abcsf2 = []			// SF2 instruments

function Audio5(i_conf) {
	var	conf = i_conf,		// configuration
		onend = conf.onend || function() {},
		onnote = conf.onnote || function() {},
		errmsg = conf.errmsg || alert,
		ac,			// audio context
		gain,			// global gain

	// instruments/notes
		params = [],		// [instr][key] note parameters per instrument
		rates = [],		// [instr][key] playback rates
		w_instr = 0,		// number of instruments being loaded

	// -- play the memorized events --
		evt_idx,		// event index while playing
		iend,			// play array stop index
		stime			// start playing time

	// base64 stuff
	    var b64d = []
	function init_b64d() {
	    var	b64l = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
		l = b64l.length
		for (var i = 0; i < l; i++)
			b64d[b64l[i]] = i
		b64d['='] = 0
	}
	function b64dcod(s) {
	    var	i, t, dl, a,
		l = s.length,
		j = 0

		dl = l * 3 / 4			// destination length
		if (s[l - 1] == '=') {
			if (s[l - 2] == '=')
				dl--;
			dl--;
			l -= 4
		}
		a = new Uint8Array(dl)
		for (i = 0; i < l; i += 4) {
			t =	(b64d[s[i]] << 18) +
				(b64d[s[i + 1]] << 12) +
				(b64d[s[i + 2]] << 6) +
				 b64d[s[i + 3]];
			a[j++] = (t >> 16) & 0xff;
			a[j++] = (t >> 8) & 0xff;
			a[j++] = t & 0xff
		}
		if (l != s.length) {
			t =	(b64d[s[i]] << 18) +
				(b64d[s[i + 1]] << 12) +
				(b64d[s[i + 2]] << 6) +
				 b64d[s[i + 3]];
			a[j++] = (t >> 16) & 0xff
			if (j < dl)
				a[j++] = (t >> 8) & 0xff
		}
		return a
	}

	// copy a sf2 sample to an audio buffer
	// @b = audio buffer (array of [-1..1])
	// @s = sf2 sample (PCM 16 bits)
	function sample_cp(b, s) {
	    var	i, n,
		a = b.getChannelData(0)		// destination = array of float32

		for (i = 0; i < s.length; i++)
			a[i] = s[i] / 196608	// volume divided by 6
	}

	// create all notes of an instrument
	function sf2_create(parser, instr) {
	    var i, sid, gen, parm, sampleRate, sample,
		infos = parser.getInstruments()[0].info;

		rates[instr] = []
		for (i = 0; i < infos.length; i++) {
			gen = infos[i].generator;
			if (!gen.sampleID)	// (empty generator!)
				continue
			sid = gen.sampleID.amount;
			sampleRate = parser.sampleHeader[sid].sampleRate;
			sample = parser.sample[sid];
			parm = {
				attack: Math.pow(2, (gen.attackVolEnv ?
					gen.attackVolEnv.amount : -12000) / 1200),
				hold: Math.pow(2, (gen.holdVolEnv ?
					gen.holdVolEnv.amount : -12000) / 1200),
				decay: Math.pow(2, (gen.decayVolEnv ?
					gen.decayVolEnv.amount : -12000) / 1200) / 3,
				sustain: gen.sustainVolEnv ?
					(gen.sustainVolEnv.amount / 1000) : 0,
//				release: Math.pow(2, (gen.releaseVolEnv ?
//					gen.releaseVolEnv.amount : -12000) / 1200),
				buffer: ac.createBuffer(1,
							sample.length,
							sampleRate)
			}
			parm.hold += parm.attack;
			parm.decay += parm.hold;

			// sustain > 40dB is not audible
			if (parm.sustain >= .4)
				parm.sustain = 0.01	// must not be null
			else
				parm.sustain = 1 - parm.sustain / .4

			sample_cp(parm.buffer, sample)

			if (gen.sampleModes && (gen.sampleModes.amount & 1)) {
				parm.loopStart = parser.sampleHeader[sid].startLoop /
					sampleRate;
				parm.loopEnd = parser.sampleHeader[sid].endLoop /
					sampleRate
			}

			// define the notes
		    var scale = (gen.scaleTuning ?
					gen.scaleTuning.amount : 100) / 100,
			tune = (gen.coarseTune ? gen.coarseTune.amount : 0) +
				(gen.fineTune ? gen.fineTune.amount : 0) / 100 +
				parser.sampleHeader[sid].pitchCorrection / 100 -
				(gen.overridingRootKey ?
					gen.overridingRootKey.amount :
					parser.sampleHeader[sid].originalPitch)

			for (j = gen.keyRange.lo; j <= gen.keyRange.hi; j++) {
				rates[instr][j] = Math.pow(Math.pow(2, 1 / 12),
							(j + tune) * scale);
				params[instr][j] = parm
			}
		}
	} // sf2_create()

	// load an instrument (.js file)
	function load_instr(instr) {
		w_instr++;
		abc2svg.loadjs(conf.sfu + '/' + instr + '.js',
			function() {
			    var	parser = new sf2.Parser(b64dcod(abcsf2[instr]));
				parser.parse();
				sf2_create(parser, instr);
				w_instr--
			},
			function() {
				errmsg('could not find the instrument ' +
					((instr / 128) | 0).toString() + '-' +
					(instr % 128).toString());
				w_instr--
			})
	} // load_instr()

	// start loading the instruments
	function load_res(a_e) {
		var i, e, instr

		for (i = evt_idx; ; i++) {
			e = a_e[i]
			if (!e || evt_idx >= iend)
				break
			instr = e[2]
			if (!params[instr]) {
				params[instr] = [];
				load_instr(instr)
			}
		}
	}

	// create a note
	// @e[2] = instrument index
	// @e[3] = MIDI key + detune
	// @t = audio start time
	// @d = duration adjusted for speed
	function note_run(e, t, d) {
	    var	g, st,
		instr = e[2],
		key = e[3] | 0,
		parm = params[instr][key],
		o = ac.createBufferSource();

		if (!parm)		// if the instrument could not be loaded
			return		// or if it has not this key
		o.buffer = parm.buffer
		if (parm.loopStart) {
			o.loop = true;
			o.loopStart = parm.loopStart;
			o.loopEnd = parm.loopEnd;
		}
		if (o.detune) {
		    var	dt = (e[3] * 100) % 100
			if (dt)			// if micro-tone
				 o.detune.value = dt
		}
//		o.playbackRate.setValueAtTime(parm.rate, ac.currentTime);
		o.playbackRate.value = rates[instr][key];

		g = ac.createGain();
		if (parm.hold < 0.002) {
			g.gain.setValueAtTime(1, t)
		} else {
			if (parm.attack < 0.002) {
				g.gain.setValueAtTime(1, t)
			} else {
				g.gain.setValueAtTime(0, t);
				g.gain.linearRampToValueAtTime(1, t + parm.attack)
			}
			g.gain.setValueAtTime(1, t + parm.hold)
		}

		g.gain.exponentialRampToValueAtTime(parm.sustain,
					t + parm.decay);

		o.connect(g);
		g.connect(gain);

		// start the note
		o.start(t);
		o.stop(t + d)
	} // note_run()

	// play the next time sequence
	function play_next(a_e) {
		var	t, e, e2, maxt, st, d;

		// play the next events
		e = a_e[evt_idx]
		if (!e || evt_idx >= iend) {
			onend()
			return
		}

		// if speed change, shift the start time
		if (conf.new_speed) {
			stime = ac.currentTime -
					(ac.currentTime - stime) *
						conf.speed / conf.new_speed;
			conf.speed = conf.new_speed;
			conf.new_speed = 0
		}

//fixme: better, count the number of events?
		t = e[1] / conf.speed;		// start time
		maxt = t + 3			// max time = evt time + 3 seconds
		while (1) {
			d = e[4] / conf.speed
			if (e[5] != 0)		// if not a rest
				note_run(e, t + stime, d)

			// follow the notes while playing
			    var	i = e[0];
				st = (t + stime - ac.currentTime) * 1000;
				setTimeout(onnote, st, i, true);
				setTimeout(onnote, st + d * 1000, i, false)

			e = a_e[++evt_idx]
			if (!e || evt_idx >= iend) {
				setTimeout(onend,
					(t + stime - ac.currentTime + d) * 1000)
				return
			}
			t = e[1] / conf.speed
			if (t > maxt)
				break
		}

		// delay before next sound generation
		setTimeout(play_next, (t + stime - ac.currentTime)
				* 1000 - 300,	// wake before end of playing
				a_e)
	} // play_next()

	// wait for all resources, then start playing
	function play_start(a_e) {
		if (iend == 0) {	// play stop
			onend()
			return
		}

		// wait for instruments
		if (w_instr != 0) {
			setTimeout(play_start, 300, a_e)
			return
		}

		// all resources are there
		gain.connect(ac.destination);
		stime = ac.currentTime + .2		// start time + 0.2s
			- a_e[evt_idx][1] * conf.speed;
		play_next(a_e)
	} // play_start()

// Audio5 object creation

	init_b64d();			// initialize base64 decoding

	if (!conf.sfu)
		conf.sfu = "Scc1t2"	// set the default soundfont location

    // external methods
    return {

	// get outputs
	get_outputs: function() {
		return (window.AudioContext || window.webkitAudioContext) ?
				['sf2'] : null
	}, // get_outputs()

	// play the events
	play: function(istart, i_iend, a_e) {
		if (!a_e || istart >= a_e.length) {
			onend()			// nothing to play
			return
		}

		// initialize the audio subsystem if not done yet
		// (needed for iPhone/iPad/...)
		if (!gain) {
			ac = conf.ac
			if (!ac)
				conf.ac = ac = new (window.AudioContext ||
							window.webkitAudioContext);
			gain = ac.createGain();
			gain.gain.value = conf.gain
		}

		iend = i_iend;
		evt_idx = istart;
		load_res(a_e);
		play_start(a_e)
	}, // play()

	// stop playing
	stop: function() {
		iend = 0
		if (gain) {
			gain.disconnect();
			gain = null
		}
	}, // stop()

	// set volume
	set_vol: function(v) {
		if (gain)
			gain.gain.value = v
	} // set_vol()
    }
} // end Audio5
/*! JavaScript SoundFont 2 Parser. Copyright 2013-2015 imaya/GREE Inc and Colin Clark. Licensed under the MIT License. */

/*
 * JavaScript SoundFont 2 Parser
 *
 * Copyright 2013 imaya/GREE Inc
 * Copyright 2015 Colin Clark
 *
 * Based on code from the "SoundFont Synthesizer for WebMidiLink"
 *   https://github.com/gree/sf2synth.js
 *
 * Adapted to abc2svg
 * Copyright (C) 2018 Jean-Francois Moine
 *
 * Licensed under the MIT License.
 */

/*global require*/

(function (root, factory) {
    if (typeof exports === "object") {
        // We're in a CommonJS-style loader.
        root.sf2 = exports;
        factory(exports);
    } else if (typeof define === "function" && define.amd) {
        // We're in an AMD-style loader.
        define(["exports"], function (exports) {
            root.sf2 = exports;
            return (root.sf2, factory(exports));
        });
    } else {
        // Plain old browser.
        root.sf2 = {};
        factory(root.sf2);
    }
}(this, function (exports) {
    "use strict";

    var sf2 = exports;

    sf2.Parser = function (input, options) {
      options = options || {};
      /** @type {ByteArray} */
      this.input = input;
      /** @type {(Object|undefined)} */
      this.parserOptions = options.parserOptions;

      /** @type {Array.<Object>} */
      // this.presetHeader;
      /** @type {Array.<Object>} */
      // this.presetZone;
      /** @type {Array.<Object>} */
      // this.presetZoneModulator;
      /** @type {Array.<Object>} */
      // this.presetZoneGenerator;
      /** @type {Array.<Object>} */
      // this.instrument;
      /** @type {Array.<Object>} */
      // this.instrumentZone;
      /** @type {Array.<Object>} */
      // this.instrumentZoneModulator;
      /** @type {Array.<Object>} */
      // this.instrumentZoneGenerator;
      /** @type {Array.<Object>} */
      //this.sampleHeader;
    };

    sf2.Parser.prototype.parse = function () {
      /** @type {sf2.Riff.Parser} */
      var parser = new sf2.Riff.Parser(this.input, this.parserOptions),
      /** @type {?sf2.Riff.Chunk} */
	  chunk;

      // parse RIFF chunk
      parser.parse();
      if (parser.chunkList.length !== 1)
        throw new Error('wrong chunk length');

      chunk = parser.getChunk(0);
      if (chunk === null)
        throw new Error('chunk not found');

      this.parseRiffChunk(chunk);

      // TODO: Presumably this is here to reduce memory,
      // but does it really matter? Shouldn't we always be
      // referencing the underlying ArrayBuffer and thus
      // it will persist, in which case why delete it?
      this.input = null;
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseRiffChunk = function (chunk) {
      /** @type {sf2.Riff.Parser} */
      var parser,
      /** @type {ByteArray} */
	  data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {string} */
	  signature;

      // check parse target
      if (chunk.type !== 'RIFF')
        throw new Error('invalid chunk type:' + chunk.type);

      // check signature
      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);
      if (signature !== 'sfbk')
        throw new Error('invalid signature:' + signature);

      // read structure
      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});
      parser.parse();
      if (parser.getNumberOfChunks() !== 3)
        throw new Error('invalid sfbk structure');

      // INFO-list
      this.parseInfoList(/** @type {!sf2.Riff.Chunk} */parser.getChunk(0));

      // sdta-list
      this.parseSdtaList(/** @type {!sf2.Riff.Chunk} */parser.getChunk(1));

      // pdta-list
      this.parsePdtaList(/** @type {!sf2.Riff.Chunk} */parser.getChunk(2));
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseInfoList = function (chunk) {
      /** @type {sf2.Riff.Parser} */
      var parser,
      /** @type {ByteArray} */
	  data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {string} */
	  signature;

      // check parse target
      if (chunk.type !== 'LIST')
        throw new Error('invalid chunk type:' + chunk.type);

      // check signature
      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);
      if (signature !== 'INFO')
        throw new Error('invalid signature:' + signature);

      // read structure
      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});
      parser.parse();
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseSdtaList = function (chunk) {
      /** @type {sf2.Riff.Parser} */
      var parser,
      /** @type {ByteArray} */
	  data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {string} */
	  signature;

      // check parse target
      if (chunk.type !== 'LIST')
        throw new Error('invalid chunk type:' + chunk.type);

      // check signature
      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);
      if (signature !== 'sdta')
        throw new Error('invalid signature:' + signature);

      // read structure
      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});
      parser.parse();
      if (parser.chunkList.length !== 1)
        throw new Error('TODO');
      this.samplingData =
        /** @type {{type: string, size: number, offset: number}} */
	  parser.getChunk(0);
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parsePdtaList = function (chunk) {
      /** @type {sf2.Riff.Parser} */
      var parser,
      /** @type {ByteArray} */
	  data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {string} */
	  signature;

      // check parse target
      if (chunk.type !== 'LIST')
        throw new Error('invalid chunk type:' + chunk.type);

      // check signature
      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);
      if (signature !== 'pdta')
        throw new Error('invalid signature:' + signature);

      // read structure
      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});
      parser.parse();

      // check number of chunks
      if (parser.getNumberOfChunks() !== 9)
        throw new Error('invalid pdta chunk');

      this.parsePhdr(/** @type {sf2.Riff.Chunk} */(parser.getChunk(0)));
      this.parsePbag(/** @type {sf2.Riff.Chunk} */(parser.getChunk(1)));
      this.parsePmod(/** @type {sf2.Riff.Chunk} */(parser.getChunk(2)));
      this.parsePgen(/** @type {sf2.Riff.Chunk} */(parser.getChunk(3)));
      this.parseInst(/** @type {sf2.Riff.Chunk} */(parser.getChunk(4)));
      this.parseIbag(/** @type {sf2.Riff.Chunk} */(parser.getChunk(5)));
      this.parseImod(/** @type {sf2.Riff.Chunk} */(parser.getChunk(6)));
      this.parseIgen(/** @type {sf2.Riff.Chunk} */(parser.getChunk(7)));
      this.parseShdr(/** @type {sf2.Riff.Chunk} */(parser.getChunk(8)));
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parsePhdr = function (chunk) {
      /** @type {ByteArray} */
      var data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {Array.<Object>} */
	  presetHeader = this.presetHeader = [],
      /** @type {number} */
	  size = chunk.offset + chunk.size;

      // check parse target
      if (chunk.type !== 'phdr')
        throw new Error('invalid chunk type:' + chunk.type);

      while (ip < size) {
        presetHeader.push({
          presetName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),
          preset: data[ip++] | (data[ip++] << 8),
          bank: data[ip++] | (data[ip++] << 8),
          presetBagIndex: data[ip++] | (data[ip++] << 8),
          library: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,
          genre: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,
          morphology: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0
        });
      }
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parsePbag = function (chunk) {
      /** @type {ByteArray} */
      var data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {Array.<Object>} */
	  presetZone = this.presetZone = [],
      /** @type {number} */
	  size = chunk.offset + chunk.size;

      // check parse target
      if (chunk.type !== 'pbag')
        throw new Error('invalid chunk type:'  + chunk.type);

      while (ip < size) {
        presetZone.push({
          presetGeneratorIndex: data[ip++] | (data[ip++] << 8),
          presetModulatorIndex: data[ip++] | (data[ip++] << 8)
        });
      }
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parsePmod = function (chunk) {
      // check parse target
      if (chunk.type !== 'pmod')
        throw new Error('invalid chunk type:' + chunk.type);

      this.presetZoneModulator = this.parseModulator(chunk);
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parsePgen = function (chunk) {
      // check parse target
      if (chunk.type !== 'pgen')
        throw new Error('invalid chunk type:' + chunk.type);
      this.presetZoneGenerator = this.parseGenerator(chunk);
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseInst = function (chunk) {
      /** @type {ByteArray} */
      var data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {Array.<Object>} */
	  instrument = this.instrument = [],
      /** @type {number} */
	  size = chunk.offset + chunk.size;

      // check parse target
      if (chunk.type !== 'inst')
        throw new Error('invalid chunk type:' + chunk.type);

      while (ip < size) {
        instrument.push({
          instrumentName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),
          instrumentBagIndex: data[ip++] | (data[ip++] << 8)
        });
      }
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseIbag = function (chunk) {
      /** @type {ByteArray} */
      var data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {Array.<Object>} */
	  instrumentZone = this.instrumentZone = [],
      /** @type {number} */
	  size = chunk.offset + chunk.size;

      // check parse target
      if (chunk.type !== 'ibag')
        throw new Error('invalid chunk type:' + chunk.type);

      while (ip < size) {
        instrumentZone.push({
          instrumentGeneratorIndex: data[ip++] | (data[ip++] << 8),
          instrumentModulatorIndex: data[ip++] | (data[ip++] << 8)
        });
      }
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseImod = function (chunk) {
      // check parse target
      if (chunk.type !== 'imod')
        throw new Error('invalid chunk type:' + chunk.type);

      this.instrumentZoneModulator = this.parseModulator(chunk);
    };


    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseIgen = function (chunk) {
      // check parse target
      if (chunk.type !== 'igen')
        throw new Error('invalid chunk type:' + chunk.type);

      this.instrumentZoneGenerator = this.parseGenerator(chunk);
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     */
    sf2.Parser.prototype.parseShdr = function (chunk) {
      /** @type {ByteArray} */
      var data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {Array.<Object>} */
	  samples = this.sample = [],
      /** @type {Array.<Object>} */
	  sampleHeader = this.sampleHeader = [],
      /** @type {number} */
	  size = chunk.offset + chunk.size,
      /** @type {string} */
	  sampleName,
      /** @type {number} */
	  start,
      /** @type {number} */
	  end,
      /** @type {number} */
	  startLoop,
      /** @type {number} */
	  endLoop,
      /** @type {number} */
	  sampleRate,
      /** @type {number} */
	  originalPitch,
      /** @type {number} */
	  pitchCorrection,
      /** @type {number} */
	  sampleLink,
      /** @type {number} */
	  sampleType;

      // check parse target
      if (chunk.type !== 'shdr')
        throw new Error('invalid chunk type:' + chunk.type);

      while (ip < size) {
        sampleName = String.fromCharCode.apply(null, data.subarray(ip, ip += 20));
        start =
          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24);
        end =
          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24);
        startLoop =
          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24);
        endLoop =
          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24);
        sampleRate =
          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24);
        originalPitch = data[ip++];
        pitchCorrection = (data[ip++] << 24) >> 24;
        sampleLink = data[ip++] | (data[ip++] << 8);
        sampleType = data[ip++] | (data[ip++] << 8);

        var sample = new Int16Array(new Uint8Array(data.subarray(
          this.samplingData.offset + start * 2,
          this.samplingData.offset + end   * 2
        )).buffer);

        startLoop -= start;
        endLoop -= start;

        if (sampleRate > 0) {
          var adjust = this.adjustSampleData(sample, sampleRate);
          sample = adjust.sample;
          sampleRate *= adjust.multiply;
          startLoop *= adjust.multiply;
          endLoop *= adjust.multiply;
        }

        samples.push(sample);

        sampleHeader.push({
          sampleName: sampleName,
          /*
          start: start,
          end: end,
          */
          startLoop: startLoop,
          endLoop: endLoop,
          sampleRate: sampleRate,
          originalPitch: originalPitch,
          pitchCorrection: pitchCorrection,
          sampleLink: sampleLink,
          sampleType: sampleType
        });
      }
    };

    // TODO: This function is questionable;
    // it doesn't interpolate the sample data
    // and always forces a sample rate of 22050 or higher. Why?
    sf2.Parser.prototype.adjustSampleData = function (sample, sampleRate) {
      /** @type {Int16Array} */
      var newSample,
      /** @type {number} */
	  i,
      /** @type {number} */
	  il,
      /** @type {number} */
	  j,
      /** @type {number} */
	  multiply = 1;

      // buffer
      while (sampleRate < 22050) {
        newSample = new Int16Array(sample.length * 2);
        for (i = j = 0, il = sample.length; i < il; ++i) {
          newSample[j++] = sample[i];
          newSample[j++] = sample[i];
        }
        sample = newSample;
        multiply *= 2;
        sampleRate *= 2;
      }

      return {
        sample: sample,
        multiply: multiply
      };
    };

    /**
     * @param {sf2.Riff.Chunk} chunk
     * @return {Array.<Object>}
     */
    sf2.Parser.prototype.parseModulator = function (chunk) {
        /** @type {ByteArray} */
        var data = this.input,
        /** @type {number} */
	    ip = chunk.offset,
        /** @type {number} */
	    size = chunk.offset + chunk.size,
        /** @type {number} */
	    code,
        /** @type {string} */
	    key,
        /** @type {Array.<Object>} */
	    output = [];

        while (ip < size) {
          // Src  Oper
          // TODO
          ip += 2;

          // Dest Oper
          code = data[ip++] | (data[ip++] << 8);
          key = sf2.Parser.GeneratorEnumeratorTable[code];
          if (key === undefined) {
            // Amount
            output.push({
              type: key,
              value: {
                code: code,
                amount: data[ip] | (data[ip+1] << 8) << 16 >> 16,
                lo: data[ip++],
                hi: data[ip++]
              }
            });
          } else {
            // Amount
            switch (key) {
              case 'keyRange': /* FALLTHROUGH */
              case 'velRange': /* FALLTHROUGH */
              case 'keynum': /* FALLTHROUGH */
              case 'velocity':
                output.push({
                  type: key,
                  value: {
                    lo: data[ip++],
                    hi: data[ip++]
                  }
                });
                break;
              default:
                output.push({
                  type: key,
                  value: {
                    amount: data[ip++] | (data[ip++] << 8) << 16 >> 16
                  }
                });
                break;
            }
          }

          // AmtSrcOper
          // TODO
          ip += 2;

          // Trans Oper
          // TODO
          ip += 2;
        }

        return output;
      };

    /**
     * @param {sf2.Riff.Chunk} chunk
     * @return {Array.<Object>}
     */
    sf2.Parser.prototype.parseGenerator = function (chunk) {
      /** @type {ByteArray} */
      var data = this.input,
      /** @type {number} */
	  ip = chunk.offset,
      /** @type {number} */
	  size = chunk.offset + chunk.size,
      /** @type {number} */
	  code,
      /** @type {string} */
	  key,
      /** @type {Array.<Object>} */
	  output = [];

      while (ip < size) {
        code = data[ip++] | (data[ip++] << 8);
        key = sf2.Parser.GeneratorEnumeratorTable[code];
        if (key === undefined) {
          output.push({
            type: key,
            value: {
              code: code,
              amount: data[ip] | (data[ip+1] << 8) << 16 >> 16,
              lo: data[ip++],
              hi: data[ip++]
            }
          });
          continue;
        }

        switch (key) {
          case 'keynum': /* FALLTHROUGH */
          case 'keyRange': /* FALLTHROUGH */
          case 'velRange': /* FALLTHROUGH */
          case 'velocity':
            output.push({
              type: key,
              value: {
                lo: data[ip++],
                hi: data[ip++]
              }
            });
            break;
          default:
            output.push({
              type: key,
              value: {
                amount: data[ip++] | (data[ip++] << 8) << 16 >> 16
              }
            });
            break;
        }
      }

      return output;
    };

    sf2.Parser.prototype.getInstruments = function () {
      /** @type {Array.<Object>} */
      var instrument = this.instrument,
      /** @type {Array.<Object>} */
	  zone = this.instrumentZone,
      /** @type {Array.<Object>} */
	  output = [],
      /** @type {number} */
	  bagIndex,
      /** @type {number} */
	  bagIndexEnd,
      /** @type {Array.<Object>} */
	  zoneInfo,
      /** @type {{generator: Object, generatorInfo: Array.<Object>}} */
	  instrumentGenerator,
      /** @type {{modulator: Object, modulatorInfo: Array.<Object>}} */
	  instrumentModulator,
      /** @type {number} */
	  i,
      /** @type {number} */
	  il,
      /** @type {number} */
	  j,
      /** @type {number} */
	  jl;

      // instrument -> instrument bag -> generator / modulator
      for (i = 0, il = instrument.length; i < il; ++i) {
        bagIndex    = instrument[i].instrumentBagIndex;
        bagIndexEnd = instrument[i+1] ? instrument[i+1].instrumentBagIndex : zone.length;
        zoneInfo = [];

        // instrument bag
        for (j = bagIndex, jl = bagIndexEnd; j < jl; ++j) {
          instrumentGenerator = this.createInstrumentGenerator_(zone, j);
          instrumentModulator = this.createInstrumentModulator_(zone, j);

          zoneInfo.push({
            generator: instrumentGenerator.generator,
            modulator: instrumentModulator.modulator,
          });
        }

        output.push({
          name: instrument[i].instrumentName,
          info: zoneInfo
        });
      }

      return output;
    };

    /**
     * @param {Array.<Object>} zone
     * @param {number} index
     * @returns {{generator: Object, generatorInfo: Array.<Object>}}
     * @private
     */
    sf2.Parser.prototype.createInstrumentGenerator_ = function (zone, index) {
      var modgen = this.createBagModGen_(
        zone,
        zone[index].instrumentGeneratorIndex,
        zone[index+1] ? zone[index+1].instrumentGeneratorIndex: this.instrumentZoneGenerator.length,
        this.instrumentZoneGenerator
      );

      return {
        generator: modgen.modgen,
      };
    };

    /**
     * @param {Array.<Object>} zone
     * @param {number} index
     * @returns {{modulator: Object, modulatorInfo: Array.<Object>}}
     * @private
     */
    sf2.Parser.prototype.createInstrumentModulator_ = function (zone, index) {
      var modgen = this.createBagModGen_(
        zone,
        zone[index].presetModulatorIndex,
        zone[index+1] ? zone[index+1].instrumentModulatorIndex: this.instrumentZoneModulator.length,
        this.instrumentZoneModulator
      );

      return {
        modulator: modgen.modgen
      };
    };

    /**
     * @param {Array.<Object>} zone
     * @param {number} indexStart
     * @param {number} indexEnd
     * @param zoneModGen
     * @returns {{modgen: Object, modgenInfo: Array.<Object>}}
     * @private
     */
    sf2.Parser.prototype.createBagModGen_ = function (zone, indexStart, indexEnd, zoneModGen) {
      /** @type {Object} */
      var modgen = {
        unknown: [],
        'keyRange': {
          hi: 127,
          lo: 0
        }
      }; // TODO
      /** @type {Object} */
      var info,
      /** @type {number} */
	  i,
      /** @type {number} */
	  il;

      for (i = indexStart, il = indexEnd; i < il; ++i) {
        info = zoneModGen[i];

        if (info.type === 'unknown')
          modgen.unknown.push(info.value);
	else
          modgen[info.type] = info.value;
      }

      return {
        modgen: modgen
      };
    };


    /**
     * @type {Array.<string>}
     * @const
     */
    sf2.Parser.GeneratorEnumeratorTable = [
      'startAddrsOffset',
      'endAddrsOffset',
      'startloopAddrsOffset',
      'endloopAddrsOffset',
      'startAddrsCoarseOffset',
      'modLfoToPitch',
      'vibLfoToPitch',
      'modEnvToPitch',
      'initialFilterFc',
      'initialFilterQ',
      'modLfoToFilterFc',
      'modEnvToFilterFc',
      'endAddrsCoarseOffset',
      'modLfoToVolume',
      undefined, // 14
      'chorusEffectsSend',
      'reverbEffectsSend',
      'pan',
      undefined,
      undefined,
      undefined, // 18,19,20
      'delayModLFO',
      'freqModLFO',
      'delayVibLFO',
      'freqVibLFO',
      'delayModEnv',
      'attackModEnv',
      'holdModEnv',
      'decayModEnv',
      'sustainModEnv',
      'releaseModEnv',
      'keynumToModEnvHold',
      'keynumToModEnvDecay',
      'delayVolEnv',
      'attackVolEnv',
      'holdVolEnv',
      'decayVolEnv',
      'sustainVolEnv',
      'releaseVolEnv',
      'keynumToVolEnvHold',
      'keynumToVolEnvDecay',
      'instrument',
      undefined, // 42
      'keyRange',
      'velRange',
      'startloopAddrsCoarseOffset',
      'keynum',
      'velocity',
      'initialAttenuation',
      undefined, // 49
      'endloopAddrsCoarseOffset',
      'coarseTune',
      'fineTune',
      'sampleID',
      'sampleModes',
      undefined, // 55
      'scaleTuning',
      'exclusiveClass',
      'overridingRootKey'
    ];

    sf2.Riff = {};

    sf2.Riff.Parser = function (input, options) {
      options = options || {};
      /** @type {ByteArray} */
      this.input = input;
      /** @type {number} */
      this.ip = options.index || 0;
      /** @type {number} */
      this.length = options.length || input.length - this.ip;
      /** @type {Array.<sf2.Riff.Chunk>} */
    //   this.chunkList;
      /** @type {number} */
      this.offset = this.ip;
      /** @type {boolean} */
      this.padding = options.padding !== undefined ? options.padding : true;
      /** @type {boolean} */
      this.bigEndian = options.bigEndian !== undefined ? options.bigEndian : false;
    };

    /**
     * @param {string} type
     * @param {number} size
     * @param {number} offset
     * @constructor
     */
    sf2.Riff.Chunk = function (type, size, offset) {
      /** @type {string} */
      this.type = type;
      /** @type {number} */
      this.size = size;
      /** @type {number} */
      this.offset = offset;
    };

    sf2.Riff.Parser.prototype.parse = function () {
      /** @type {number} */
      var length = this.length + this.offset;

      this.chunkList = [];

      while (this.ip < length)
        this.parseChunk();
    };

    sf2.Riff.Parser.prototype.parseChunk = function () {
      /** @type {ByteArray} */
      var input = this.input,
      /** @type {number} */
	  ip = this.ip,
      /** @type {number} */
	  size;

      this.chunkList.push(new sf2.Riff.Chunk(
        String.fromCharCode(input[ip++], input[ip++], input[ip++], input[ip++]),
        (size = this.bigEndian ?
           ((input[ip++] << 24) | (input[ip++] << 16) |
            (input[ip++] <<  8) | (input[ip++]      )) :
           ((input[ip++]      ) | (input[ip++] <<  8) |
            (input[ip++] << 16) | (input[ip++] << 24))
        ),
        ip
      ));

      ip += size;

      // padding
      if ((this.padding && (ip - this.offset) & 1) === 1)
        ip++;

      this.ip = ip;
    };

    /**
     * @param {number} index chunk index.
     * @return {?sf2.Riff.Chunk}
     */
    sf2.Riff.Parser.prototype.getChunk = function (index) {
      /** @type {sf2.Riff.Chunk} */
      var chunk = this.chunkList[index];

      if (chunk === undefined)
        return null;

      return chunk;
    };

    /**
     * @return {number}
     */
    sf2.Riff.Parser.prototype.getNumberOfChunks = function () {
      return this.chunkList.length;
    };

    return sf2;
}));
// tomidi5.js - audio output using HTML5 MIDI
//
// Copyright (C) 2018 Jean-Francois Moine
//
// This file is part of abc2svg.
//
// abc2svg is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with abc2svg.  If not, see <http://www.gnu.org/licenses/>.

// Midi5 creation

// @conf: configuration object - all items are optional:
//	onend: callback function called at end of playing
//		(no arguments)
//	onnote: callback function called on note start/stop playing
//		Arguments:
//			i: start index of the note in the ABC source
//			on: true on note start, false on note stop

//  When playing, the following items must/may be set:
//	speed: (mandatory) must be set to 1
//	new_speed: (optional) new speed value

// Midi5 methods

// get_outputs() - get the output ports
//
// set_output() - set the output port
//
// play() - start playing
// @start_index -
// @stop_index: indexes of the play_event array
// @play_event: array of array
//		[0]: index of the note in the ABC source
//		[1]: time in seconds
//		[2]: MIDI instrument (MIDI GM number - 1)
//		[3]: MIDI note pitch (with cents)
//		[4]: duration
//		[5]: volume (0..1 - optional)
//		[6]: voice number
//
// stop() - stop playing

function Midi5(i_conf) {
    var	conf = i_conf,		// configuration
	onend = conf.onend || function() {},
	onnote = conf.onnote || function() {},

// MIDI variables
	op,			// output port
	v_i = [],		// voice (channel) to instrument

// -- play the memorized events --
	evt_idx,		// event index while playing
	iend,			// play array stop index
	stime			// start playing time in ms

// create a note
// @e[2] = instrument index
// @e[3] = MIDI key + detune
// @e[6] = voice (channel) number
// @t = audio start time (ms)
// @d = duration adjusted for speed (ms)
    function note_run(e, t, d) {
    var	k = e[3] | 0,
	i = e[2],
	c = e[6] & 0x0f,	//fixme
	d = (e[3] * 100) % 100

	if (i != v_i[c]) {			// if program change
		v_i[c] = i
		op.send(new Uint8Array([
				0xb0 + c, 0, (i >> 14) & 0x7f,	// MSB bank
				0xb0 + c, 32, (i >> 7) & 0x7f,	// LSB bank
				0xc0 + c, i & 0x7f		// program
			]))
	}
	if (d && Midi5.ma.sysexEnabled) {	// if microtone
// fixme: should cache the current microtone values
		op.send(new Uint8Array([
			0xf0, 0x7f,	// realtime SysEx
			0x7f,		// all devices
			0x08,		// MIDI tuning standard
			0x02,		// note change
			i & 0x7f,		// tuning prog number
			0x01,		// number of notes
				k,		// key
				k,		// note
				d / .78125,	// MSB fract
				0,		// LSB fract
			0xf7		// SysEx end
			]), t);
	}
	op.send(new Uint8Array([0x90 + c, k, 127]), t);		// note on
	op.send(new Uint8Array([0x80 + c, k, 0x40]), t + d - 20) // note off
    } // note_run()

// play the next time sequence
    function play_next(a_e) {
    var	t, e, e2, maxt, st, d

	// play the next events
	e = a_e[evt_idx]
	if (!op || evt_idx >= iend || !e) {
		onend()
		return
	}
			
	// if speed change, shift the start time
	if (conf.new_speed) {
		stime = window-performance.now() -
				(window.performance.now() - stime) *
					conf.speed / conf.new_speed;
		conf.speed = conf.new_speed;
		conf.new_speed = 0
	}

	t = e[1] / conf.speed * 1000;	// start time
	maxt = t + 3000			// max time = evt time + 3 seconds
	while (1) {
		d = e[4] / conf.speed * 1000
		if (e[5] != 0)		// if not a rest
			note_run(e, t + stime, d)

		// follow the notes while playing
			st = t + stime - window.performance.now();
			setTimeout(onnote, st, e[0], true);
			setTimeout(onnote, st + d, e[0], false)

		e = a_e[++evt_idx]
		if (!e || evt_idx >= iend) {
			setTimeout(onend,
				t + stime - window.performance.now() + d)
			return
		}
		t = e[1] / conf.speed * 1000
		if (t > maxt)
			break
	}

	// delay before next sound generation
	setTimeout(play_next, (t + stime - window.performance.now())
			- 300,		// wake before end of playing
			a_e)
    } // play_next()

// Midi5 object creation (only one instance)

// public methods
    return {

	// get outputs
	get_outputs: function() {
//fixme: just the first output port for now...
		if (Midi5.ma)
			op = Midi5.ma.outputs.values().next().value
			if (op)
				return [op.name]
	}, // get_outputs()

	// set the output port
	set_output: function(name) {
//fixme: todo
//		if (!Midi5.ma)
//			return
	},

	// play the events
	play: function(istart, i_iend, a_e) {
		if (!a_e || istart >= a_e.length) {
			onend()			// nothing to play
			return
		}
		iend = i_iend;
		evt_idx = istart;
if (0) {
// temperament
	op.send(new Uint8Array([
			0xf0, 0x7f,	// realtime SysEx
			0x7f,		// all devices
			0x08,		// MIDI tuning standard
			0x02,		// note change
			0x00,		// tuning prog number
			0x01,		// number of notes
				0x69,		// key
				0x69,		// note
				0x00,		// MSB fract
				0,		// LSB fract
			0xf7		// SysEx end
			]), t);
}

		stime = window.performance.now() + 200	// start time + 0.2s
			- a_e[evt_idx][1] * conf.speed * 1000;
		play_next(a_e)
	}, // play()

	// stop playing
	stop: function() {
		iend = 0
//fixme: op.clear() should exist...
		if (op && op.clear)
			op.clear()
	} // stop()
    }
} // end Midi5

// check MIDI access at script load time
function onMIDISuccess(access) {
	Midi5.ma = access	// store the MIDI access in the Midi5 function
} // onMIDISuccess()

// (no SysEx)
function onMIDIFailure1(msg) {
	navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure2)
} // onMIDIFailure1()

// (no MIDI access)
function onMIDIFailure2(msg) {
} // onMIDIFailure2()

// (try SysEx)
if (navigator.requestMIDIAccess)
	navigator.requestMIDIAccess({sysex: true}).then(onMIDISuccess, onMIDIFailure1)
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// ambitus.js - module to insert an ambitus at start of a voice
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%ambitus" appears in a ABC source.
//
// Parameters
//	%%ambitus 1

abc2svg.ambitus = {
    do_ambitus: function() {
    var	C = abc2svg.C,
	s, v, p_v, min, max,
	voice_tb = this.get_voice_tb()

	for (v = 0; v < voice_tb.length; v++) {
		p_v = voice_tb[v];
		if (p_v.second)
			continue
		min = 100;
		max = -100

		// search the top and bottom pitches
		for (s = p_v.sym; s; s = s.next) {
			if (s.type != C.NOTE)
				continue
			if (s.notes[s.nhd].pit > max)
				max = s.notes[s.nhd].pit
			if (s.notes[0].pit < min)
				min = s.notes[0].pit
		}
		if (min == 100)
			continue			// no note

		s = p_v.clef;
		s.stem = 1;
		s.head = C.FULL;
		s.stemless = true;
		s.nhd = 1;
		s.notes = [{
				dur: C.BLEN / 4,
				pit: min,
				shhd: 0
			},{
				dur: C.BLEN / 4,
				pit: max,
				shhd: 0
			}]
	}
    }, // do_ambitus()

    draw_symbols: function(of, p_voice) {
// constants from the abc2svg core
    var	staff_tb = this.get_staff_tb(),
	s = p_voice.sym

	if (s.clef_type != undefined && s.nhd > 0) {
		s.x -= 26;
		this.set_scale(s);
		this.draw_note(s)
		if (s.notes[1].pit - s.notes[0].pit > 4) {
			this.xypath(s.x, 3 * (s.notes[1].pit - 18) + staff_tb[s.st].y);
			this.out_svg('v' +
				((s.notes[1].pit - s.notes[0].pit) * 3).toFixed(2) +
				'" stroke-width=".6"/>\n');
		}
		s.x += 26;
		p_voice.clef.nhd = 0
	}
	of(p_voice)
    }, // draw_symbols()

    set_pitch: function(of, last_s) {
	of(last_s)
	if (!last_s && this.cfmt().ambitus)
		abc2svg.ambitus.do_ambitus.call(this)
    },

    set_fmt: function(of, cmd, param, lock) {
	if (cmd == "ambitus") {
		this.cfmt().ambitus = param
		return
	}
	of(cmd, param, lock)
    },

    set_width: function(of, s) {
	if (s.clef_type != undefined && s.nhd > 0) {
		s.wl = 40;
		s.wr = 12
	} else {
		of(s)
	}
    }
} // ambitus

abc2svg.modules.hooks.push(
// export
	"draw_note",
	"set_scale",
// hooks
	[ "draw_symbols", "abc2svg.ambitus.draw_symbols" ],
	[ "set_pitch", "abc2svg.ambitus.set_pitch" ],
	[ "set_format", "abc2svg.ambitus.set_fmt" ],
	[ "set_width", "abc2svg.ambitus.set_width" ]
)

// the module is loaded
abc2svg.modules.ambitus.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// break.js - module to handle the %%break command
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%break" appears in a ABC source.
//
// Parameters
//	%%break measure_nb [":" num "/" den] [" " measure ...]*

abc2svg.break = {

	// get the %%break parameters
	get_break: function(parm) {
	    var	C = abc2svg.C,
		b, c, d, sq,
		a = parm.split(/[ ,]/),
		cfmt = this.cfmt()

		if (!cfmt.break)
			cfmt.break = []
		for (n = 1; n < a.length; n++) {
			b = a[n];
			c = b.match(/(\d+)([a-z]?)(:\d+\/\d+)?/)
			if (!c) {
				this.syntax(1, errs.bad_val, "%%break")
				continue
			}
			if (c[2])
				sq = c[2].charCodeAt(0) - 0x61
			if (!c[3]) {
				cfmt.break.push({	// on measure bar
						m: c[1],
						t: 0,
						sq: sq})
				continue
			}
			d = c[3].match(/:(\d+)\/(\d+)/)
			if (!d || d[2] < 1) {
				this.syntax(1, "Bad denominator in %%break")
				continue
			}
			cfmt.break.push({
					m: c[1],
					t: d[1] * C.BLEN / d[2],
					sq: sq})
		}
	}, // get_break()

	// insert the EOLs of %%break
	do_break: function() {
	    var	i, m, t, brk, seq,
		voice_tb = this.get_voice_tb()
		v = this.get_cur_sy().top_voice,
		s1 = voice_tb[v].sym,
		cfmt = this.cfmt()

		for (i = 0; i < cfmt.break.length; i++) {
			brk = cfmt.break[i];
			m = brk.m
			for (s = s1; s; s = s.next) {
				if (s.bar_num == m)
					break
			}
			if (!s)
				continue

			if (brk.sq) {
				seq = brk.sq
				for (s = s.ts_next; s; s = s.ts_next) {
					if (s.bar_num == m) {
						if (--seq == 0)
							break
					}
				}
				if (!s)
					continue
			}

			t = brk.t
			if (t) {
				t = s.time + t
				for ( ; s; s = s.next) {
					if (s.time >= t)
						break
				}
				if (!s)
					continue
				s = s.prev
			}
			s.eoln = true
		}
	}, // do_break()

    do_pscom: function (of, text) {
	if (text.slice(0, 6) == "break ")
		abc2svg.break.get_break.call(this, text)
	else
		of(text)
    },

    set_bar_num: function(of) {
	of()
	if (this.cfmt().break)
		abc2svg.break.do_break.call(this)
    }
} // break

abc2svg.modules.hooks.push(
// export
	"errs",
	"syntax",
// hooks
	[ "do_pscom", "abc2svg.break.do_pscom" ],
	[ "set_bar_num", "abc2svg.break.set_bar_num" ]
);

// the module is loaded
abc2svg.modules.break.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// capo.js - module to add a capo chord line
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%capo" appears in a ABC source.
//
// Parameters
//	%%capo n	'n' is the capo fret number

abc2svg.capo = {

// function called when setting a chord symbol on a music element
    gch_capo: function(a_gch) {
    var	gch, gch2, i2,
	cfmt = this.cfmt(),
	transp = cfmt.capo,
	i = 0

	while (1) {
		gch = a_gch[i++]
		if (!gch)
			return
		if (gch.type == 'g')
			break
	}
	gch2 = Object.create(gch);
	gch2.capo = false;		// (would be erased when setting gch)
	gch2.text = this.gch_tr1(gch2.text,
			[0, 5, -2, 3, -4, 1, -6, -1, 4, -3, 2, -5][transp % 12])
	if (!this.capo_first) {			// if new tune
		this.capo_first = true;
		gch2.text += "  (capo: " + transp.toString() + ")"
	}

	gch2.font = this.get_font(cfmt.capofont ? "capo" : "annotation");
	a_gch.splice(i, 0, gch2)

	// set a mark in the first chord symbol for %%diagram
	gch.capo = true
    }, // gch_capo()

    gch_build: function(of, s) {
    var	a_gch = this.get_a_gch()
	if (this.cfmt().capo && a_gch)
		abc2svg.capo.gch_capo.call(this, a_gch);
	of(s)
    },

    output_music: function(of) {
	this.capo_first = false;
	of()
    },

    set_fmt: function(of, cmd, param, lock) {
	if (cmd == "capo") {
		this.cfmt().capo = param
		return
	}
	of(cmd, param, lock)
    }

} // capo


abc2svg.modules.hooks.push(
// export
	"gch_tr1",
	"get_font",
// hooks
	[ "set_format", "abc2svg.capo.set_fmt" ],
	[ "gch_build", "abc2svg.capo.gch_build" ],
	[ "output_music", "abc2svg.capo.output_music" ]
)

// the module is loaded
abc2svg.modules.capo.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// clip.js - module to handle the %%clip command
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%clip" appears in a ABC source.
//
// Parameters
//	%%clip start_measure_nb [":" num "/" den] "-" end_measure_nb [":" num "/" den]

abc2svg.clip = {

    get_clip: function(parm) {
    var	C = abc2svg.C

	// get the start/stop points
	function get_symsel(a) {
	    var	j, d, sq,
		b = a.match(/(\d+)([a-z]?)(:\d+\/\d+)?/)

		if (!b)
			return
		if (b[2])
			sq = b[2].charCodeAt(0) - 0x61
		if (!b[3])
			return {m: b[1], t: 0, sq: sq}	// on measure bar
		a = b[3].match(/:(\d+)\/(\d+)/)
		if (!a || a[2] < 1)
			return
		return {m: b[1], t: a[1] * C.BLEN / a[2], sq: sq}
	} // get_symsel()

	    var	b, c,
		a = parm.split(/[ -]/)

		if (a.length != 3) {
			this.syntax(1, this.errs.bad_val, "%%clip")
			return
		}
		if (!a[1])
			b = {m: 0, t: 0}
		else
			b = get_symsel(a[1]);
		c = get_symsel(a[2])
		if (!b || !c) {
			this.syntax(1, this.errs.bad_val, "%%clip")
			return
		}
		this.cfmt().clip = [b, c]
    }, // get_clip()

    // cut the tune
    do_clip: function() {
    var	C = abc2svg.C
	voice_tb = this.get_voice_tb(),
	cfmt = this.cfmt()

	// go to a global (measure + time)
	function go_global_time(s, sel) {
	    var	s2, bar_time, seq

		if (sel.m <= 1) {	// special case: there is no measure 0/1
			if (sel.m == 1) {
				for (s2 = s; s2; s2 = s2.ts_next) {
					if (s2.type == C.BAR
					 && s2.time != 0)
						break
				}
				if (s2.time < voice_tb[this.get_cur_sy().top_voice].
								meter.wmeasure)
					s = s2
			}
		} else {
			for ( ; s; s = s.ts_next) {
				if (s.type == C.BAR
				 && s.bar_num >= sel.m)
					break
			}
			if (!s)
				return // null

			if (sel.sq) {
				seq = sel.sq
				for (s = s.ts_next; s; s = s.ts_next) {
					if (s.type == C.BAR
					 && s.bar_num == sel.m) {
						if (--seq == 0)
							break
					}
				}
				if (!s)
					return // null
			}
		}

		if (sel.t == 0)
			return s;
		bar_time = s.time + sel.t
		while (s.time < bar_time) {
			s = s.ts_next
			if (!s)
				return s
		}
		do {
			s = s.ts_prev	// go back to the previous sequence
		} while (!s.seqst)
		return s
	}

	    var	s, s2, sy, p_voice, v

		// remove the beginning of the tune
		s = this.get_tsfirst()
		if (cfmt.clip[0].m > 0
		 || cfmt.clip[0].t > 0) {
			s = go_global_time(s, cfmt.clip[0])
			if (!s) {
				this.set_tsfirst(null)
				return
			}

			// update the start of voices
			sy = this.get_cur_sy()
			for (s2 = this.get_tsfirst(); s2 != s; s2 = s2.ts_next) {
				switch (s2.type) {
				case C.CLEF:
					s2.p_v.clef = s2
					break
				case C.KEY:
					s2.p_v.key = this.clone(s2.as.u.key)
					break
				case C.METER:
					s2.p_v.meter = this.clone(s2.as.u.meter)
					break
				case C.STAVES:
					sy = s2.sy;
					this.set_cur_sy(sy)
					break
				}
			}
			for (v = 0; v < voice_tb.length; v++) {
				p_voice = voice_tb[v]
				for (s2 = s; s2; s2 = s2.ts_next) {
					if (s2.v == v) {
						delete s2.prev
						break
					}
				}
				p_voice.sym = s2
			}
			this.set_tsfirst(s)
			delete s.ts_prev
		}

		/* remove the end of the tune */
		s = go_global_time(s, cfmt.clip[1])
		if (!s)
			return

		/* keep the current sequence */
		do {
			s = s.ts_next
			if (!s)
				return
		} while (!s.seqst)

		/* cut the voices */
		for (v = 0; v < voice_tb.length; v++) {
			p_voice = voice_tb[v]
			for (s2 = s.ts_prev; s2; s2 = s2.ts_prev) {
				if (s2.v == v) {
					delete s2.next
					break
				}
			}
			if (!s2)
				p_voice.sym = null
		}
		delete s.ts_prev.ts_next
	}, // do_clip()

    do_pscom: function (of, text) {
	if (text.slice(0, 5) == "clip ")
		abc2svg.clip.get_clip.call(this, text)
	else
		of(text)
    },

    set_bar_num: function(of) {
	of()
	if (this.cfmt().clip)
		abc2svg.clip.do_clip.call(this)
    }
} // clip

abc2svg.modules.hooks.push(
// export
	"clone",
	"errs",
	"syntax",
// hooks
	[ "do_pscom", "abc2svg.clip.do_pscom" ],
	[ "set_bar_num", "abc2svg.clip.set_bar_num" ]
);

// the module is loaded
abc2svg.modules.clip.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// combine.js - module to add a combine chord line
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%voicecombine" appears in a ABC source.
//
// Parameters
//	%%voicecombine n	'n' is the combine level

abc2svg.combine = {

    // function called at start of the generation when multi-voices
    comb_v: function() {
    var	C = abc2svg.C

    // check if voice combine may occur
    function may_combine(s) {
    var	nhd2,
	s2 = s.ts_next

	if (!s2 || (s2.type != C.NOTE && s2.type != C.REST))
		return false
	if (s2.v == s.v
	 || s2.st != s.st
	 || s2.time != s.time
	 || s2.dur != s.dur)
		return false
	if (s.combine <= 0
	 && s2.type != s.type)
		return false
//	if (s2.a_dd) { //fixme: should check the double decorations
//		return false
//	}
	if (s.a_gch && s2.a_gch)
		return false
	if (s.type == C.REST) {
		if (s.type == s2.type && s.invis && !s2.invis)
			return false
		return true
	}
	if (s2.a_ly
	 || s2.sl1 || s2.sl2
	 || s2.slur_start || s2.slur_end)
		return false
	if (s2.beam_st != s.beam_st
	 || s2.beam_end != s.beam_end)
		return false;
	nhd2 = s2.nhd
	if (s.combine <= 1
	 && s.notes[0].pit <= s2.notes[nhd2].pit + 1)
		return false
	return true
    } // may_combine()

    // combine two notes
    function combine_notes(s, s2) {
    var	nhd, type, m;

	s.notes = s.notes.concat(s2.notes);
	s.nhd = nhd = s.notes.length - 1;
	this.sort_pitch(s)		// sort the notes by pitch

	if (s.combine >= 3) {		// remove unison heads
		for (m = nhd; m > 0; m--) {
			if (s.notes[m].pit == s.notes[m - 1].pit
			 && s.notes[m].acc == s.notes[m - 1].acc)
				s.notes.splice(m, 1)
		}
		s.nhd = nhd = s.notes.length - 1
	}

	s.ymx = 3 * (s.notes[nhd].pit - 18) + 4;
	s.ymn = 3 * (s.notes[0].pit - 18) - 4;

	// force the tie directions
	type = s.notes[0].ti1
	if ((type & 0x0f) == C.SL_AUTO)
		s.notes[0].ti1 = C.SL_BELOW | (type & ~C.SL_DOTTED);
	type = s.notes[nhd].ti1
	if ((type & 0x0f) == C.SL_AUTO)
		s.notes[nhd].ti1 = C.SL_ABOVE | (type & ~C.SL_DOTTED)
} // combine_notes()

// combine 2 voices
function do_combine(s) {
	var s2, nhd, nhd2, type

	while (1) {
		nhd = s.nhd;
		s2 = s.ts_next;
		nhd2 = s2.nhd
		if (s.type != s2.type) {	// if note and rest
			if (s2.type != C.REST) {
				s2 = s;
				s = s2.ts_next
			}
		} else if (s.type == C.REST) {
			if (s.invis
			 && !s2.invis)
				delete s.invis
		} else {
			combine_notes.call(this, s, s2)
		}

		if (s2.a_gch)
			s.a_gch = s2.a_gch
		if (s2.a_dd) {
			if (!s.a_dd)
				s.a_dd = s2.a_dd
			else
				s.a_dd = s.a_dd.concat(s2.a_dd)
		}
		this.unlksym(s2)			// remove the next symbol

		// there may be more voices
		if (s.in_tuplet || !may_combine.call(this, s))
			break
	}
} // do_combine()

	var s, s2, g, i, r

	for (s = this.get_tsfirst(); s; s = s.ts_next) {
		switch (s.type) {
		case C.REST:
			if (s.combine == undefined || s.combine < 0)
				continue
			if (may_combine.call(this, s))
				do_combine.call(this, s)
			continue
		default:
			continue
		case C.NOTE:
			if (s.combine == undefined || s.combine <= 0)
				continue
			break
		}

		if (!s.beam_st)
			continue
		if (s.beam_end) {
			if (may_combine.call(this, s))
				do_combine.call(this, s)
			continue
		}

		s2 = s
		while (1) {
			if (!may_combine.call(this, s2)) {
				s2 = null
				break
			}
//fixme: may have rests in beam
			if (s2.beam_end)
				break
			do {
				s2 = s2.next
			} while (s2.type != C.NOTE && s2.type != C.REST)
		}
		if (!s2)
			continue
		s2 = s
		while (1) {
			do_combine.call(this, s2)
//fixme: may have rests in beam
			if (s2.beam_end)
				break
			do {
				s2 = s2.next
			} while (s2.type != C.NOTE && s2.type != C.REST)
		}
	}
    }, // comb_v()

    do_pscom: function(of, text) {
	if (text.slice(0, 13) == "voicecombine ")
		this.set_v_param("combine", text.split(/[ \t]/)[1])
	else
		of(text)
    },

    new_note: function(of, gr, tp) {
    var curvoice = this.get_curvoice()
    var s = of(gr, tp)
	if (s && s.notes && curvoice.combine != undefined)
		s.combine = curvoice.combine
	return s
    },

    set_stem_dir: function(of) {
	of();
	abc2svg.combine.comb_v.call(this)
    },

    // set the combine parameter in the current voice
    set_vp: function(of, a) {
    var	i,
	curvoice = this.get_curvoice()

	for (i = 0; i < a.length; i++) {
		if (a[i] == "combine=") {	// %%voicecombine
			curvoice.combine = a[i + 1]
			break
		}
	}
	of(a)
    }
} // combine

abc2svg.modules.hooks.push(
// export
	"set_v_param",
	"sort_pitch",
	"unlksym",
// hooks
	[ "do_pscom", "abc2svg.combine.do_pscom" ],
	[ "new_note", "abc2svg.combine.new_note" ],
	[ "set_stem_dir", "abc2svg.combine.set_stem_dir" ],
	[ "set_vp", "abc2svg.combine.set_vp" ]
);

// the module is loaded
abc2svg.modules.voicecombine.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// diag.js - module to insert guitar chord diagrams
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%diagram" appears in a ABC source.
//
// Parameters
//	%%diagram 1

abc2svg.diag = {

// function called before tune generation
    do_diag: function() {
    var	glyphs = this.get_glyphs(),
	voice_tb = this.get_voice_tb()

	// create the decorations if not done yet
	if (!glyphs['fb']) {
	    var	i, j, d,
		decos = this.get_decos();
		ns = "CDEFGAB",
		ms = ["", "m", "7", "m7", "maj7", "sus4"]

		this.add_style("\
\n.diag {font:6px sans-serif}\
\n.frn {font:italic 7px sans-serif}")

		for (i = 0; i < ns.length; i++) {
			for (j = 0; j < ms.length; j++) {
				d = ns[i] + ms[j];
				decos[d] = "3 " + d + " 40 0 0"
			}
		}
		for (j = 0; j < ms.length; j++) {
			d = "F♯" + ms[j]
			decos[d] = "3 F#" + ms[j] + " 40 0 0"
		}

	// add the glyphs (converted to SVG from Guido Gonzato PS)

	// fingerboard
		glyphs['fb'] = '<g id="fb">\n\
<path class="stroke" stroke-width="0.4" d="\
M-10 -34h20m0 6h-20\
m0 6h20m0 6h-20\
m0 6h20"/>\n\
<path class="stroke" stroke-width="0.5" d="\
M-10 -34v24m4 0v-24\
m4 0v24m4 0v-24\
m4 0v24m4 0v-24"/>\n\
</g>';

// fret information
		glyphs['nut'] =
			'<path id="nut" class="stroke" stroke-width="1.6" d="\
M-10.2 -34.5h20.4"/>';
		glyphs['barre'] =
			'<path id="barre" class="stroke" stroke-width=".9" d="\
M-10.2 -31h20.4"/>';
		glyphs['fr1'] =
			'<text id="fr1" x="-20" y="-29" class="frn">fr1</text>';
		glyphs['fr2'] =
			'<text id="fr2" x="-20" y="-29" class="frn">fr2</text>';
		glyphs['fr3'] =
			'<text id="fr3" x="-20" y="-29" class="frn">fr3</text>';
		glyphs['ddot'] =
			'<circle id="ddot" class="fill" r="1.5"/>';

// chords
		glyphs['C'] = '<g id="C">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-3,4" y="-36" class="diag">321</text>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="6" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Cm'] = '<g id="Cm">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr3"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0,4" y="-36" class="diag">342</text>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['C7'] = '<g id="C7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4,0,4" y="-36" class="diag">3241</text>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="6" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Cm7'] = '<g id="Cm7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr3"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-4,4" y="-36" class="diag">x32</text>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Cmaj7'] = '<g id="Cmaj7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,-4" y="-36" class="diag">x21</text>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Csus4'] = '<g id="Csus4">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr3"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,0,4" y="-36" class="diag">x34</text>\n\
<use x="6" y="-13" xlink:href="#ddot"/>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
</g>';

		glyphs['D'] = '<g id="D">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,0,4,8" y="-36" class="diag">x132</text>\n\
<use x="6" y="-19" xlink:href="#ddot"/>\n\
<use x="10" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Dm'] = '<g id="Dm">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,0,4,8" y="-36" class="diag">x231</text>\n\
<use x="6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="10" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['D7'] = '<g id="D7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,0,4,8" y="-36" class="diag">x312</text>\n\
<use x="10" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="6" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Dm7'] = '<g id="Dm7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,0,4,8" y="-36" class="diag">xx211</text>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="10" y="-31" xlink:href="#ddot"/>\n\
<use x="6" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Dmaj7'] = '<g id="Dmaj7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,0,4,8" y="-36" class="diag">xx123</text>\n\
<use x="10" y="-25" xlink:href="#ddot"/>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Dsus4'] = '<g id="Dsus4">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,0,4,8" y="-36" class="diag">xx123</text>\n\
<use x="10" y="-19" xlink:href="#ddot"/>\n\
<use x="6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
</g>';

		glyphs['E'] = '<g id="E">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4,0" y="-36" class="diag">231</text>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Em'] = '<g id="Em">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4" y="-36" class="diag">23</text>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['E7'] = '<g id="E7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,0" y="-36" class="diag">21</text>\n\
<use x="2" y="-31" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Em7'] = '<g id="Em7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8" y="-36" class="diag">1</text>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Emaj7'] = '<g id="Emaj7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4,0" y="-36" class="diag">312</text>\n\
<use x="2" y="-31" xlink:href="#ddot"/>\n\
<use x="-2" y="-31" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Esus4'] = '<g id="Esus4">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0" y="-36" class="diag">12</text>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
</g>';

		glyphs['F'] = '<g id="F">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr1"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4,0" y="-36" class="diag">342</text>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Fm'] = '<g id="Fm">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr1"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4" y="-36" class="diag">34</text>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['F7'] = '<g id="F7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr1"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,0" y="-36" class="diag">32</text>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Fm7'] = '<g id="Fm7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr1"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8" y="-36" class="diag">3</text>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Fmaj7'] = '<g id="Fmaj7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr1"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4,0" y="-36" class="diag">423</text>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Fsus4'] = '<g id="Fsus4">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr1"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0" y="-36" class="diag">34</text>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
</g>';

		glyphs['F#'] = '<g id="F#">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4,0" y="-36" class="diag">342</text>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['F#m'] = '<g id="F#m">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4" y="-36" class="diag">34</text>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['F#7'] = '<g id="F#7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,0" y="-36" class="diag">32</text>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['F#m7'] = '<g id="F#m7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8" y="-36" class="diag">3</text>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['F#maj7'] = '<g id="F#maj7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4,0" y="-36" class="diag">423</text>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['F#sus4'] = '<g id="F#sus4">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0" y="-36" class="diag">34</text>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
</g>';

		glyphs['G'] = '<g id="G">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,8" y="-36" class="diag">234</text>\n\
<use x="10" y="-19" xlink:href="#ddot"/>\n\
<use x="-10" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Gm'] = '<g id="Gm">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr3"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8,-4" y="-36" class="diag">34</text>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['G7'] = '<g id="G7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,8" y="-36" class="diag">321</text>\n\
<use x="-10" y="-19" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
<use x="10" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Gm7'] = '<g id="Gm7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr3"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-8" y="-36" class="diag">3</text>\n\
<use x="-6" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Gmaj7'] = '<g id="Gmaj7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,8" y="-36" class="diag">312</text>\n\
<use x="10" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
<use x="-10" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Gsus4'] = '<g id="Gsus4">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr3"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0" y="-36" class="diag">34</text>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
</g>';

		glyphs['A'] = '<g id="A">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0,4" y="-36" class="diag">234</text>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Am'] = '<g id="Am">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0,4" y="-36" class="diag">231</text>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
<use x="6" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['A7'] = '<g id="A7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,4" y="-36" class="diag">23</text>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Am7'] = '<g id="Am7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,4" y="-36" class="diag">21</text>\n\
<use x="6" y="-31" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
</g>';
	glyphs['Amaj7'] = '<g id="Amaj7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-4,0,4" y="-36" class="diag">x213</text>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-31" xlink:href="#ddot"/>\n\
<use x="-2" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Asus4'] = '<g id="Asus4">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,0,4" y="-36" class="diag">x12</text>\n\
<use x="6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
</g>';

		glyphs['B'] = '<g id="B">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0,4" y="-36" class="diag">234</text>\n\
<use x="6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Bm'] = '<g id="Bm">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-4,0,4" y="-36" class="diag">341</text>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-19" xlink:href="#ddot"/>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['B7'] = '<g id="B7">\n\
<use xlink:href="#nut"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-8,-4,0,8" y="-36" class="diag">x2134</text>\n\
<use x="10" y="-25" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-6" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-31" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Bm7'] = '<g id="Bm7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,0,8" y="-36" class="diag">x32</text>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
<use x="6" y="-25" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Bmaj7'] = '<g id="Bmaj7">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,-4,0,4" y="-36" class="diag">x324</text>\n\
<use x="6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
<use x="-2" y="-19" xlink:href="#ddot"/>\n\
</g>';
		glyphs['Bsus4'] = '<g id="Bsus4">\n\
<use xlink:href="#barre"/>\n\
<use xlink:href="#fr2"/>\n\
<use xlink:href="#fb"/>\n\
<text x="-12,0,4" y="-36" class="diag">x34</text>\n\
<use x="6" y="-19" xlink:href="#ddot"/>\n\
<use x="2" y="-25" xlink:href="#ddot"/>\n\
</g>'
	}

    var	s, i, gch, t

	for (s = voice_tb[0].sym; s; s = s.next) {
		if (!s.a_gch)
			continue
		for (i = 0; i < s.a_gch.length; i++) {
			gch = s.a_gch[i]
			if (!gch || gch.type != 'g' || gch.capo)
				continue

			t = gch.otext || gch.text

			// insert the diagram as a decoration
			this.deco_cnv(t.split(/[ \t/]/, 1), s, null)
		}
	}
    }, // do_diag()

    output_music: function(of) {
	if (this.cfmt().diag)
		abc2svg.diag.do_diag.call(this)
	of()
    },

    set_fmt: function(of, cmd, param, lock) {
	if (cmd == "diagram") {
		this.cfmt().diag = param
		return
	}
	of(cmd, param, lock)
    }
} // diag

abc2svg.modules.hooks.push(
// export
	"deco_cnv",
// hooks
	[ "output_music", "abc2svg.diag.output_music" ],
	[ "set_format", "abc2svg.diag.set_fmt" ]
);

// the module is loaded
abc2svg.modules.diagram.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// equalbars.js - module to set equal spaced measure bars
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%equalbars" appears in a ABC source.
//
// Parameters
//	%%equalbars bool

abc2svg.equalbars = {

    // new tune - clear the width of the start of the staff
    output_music: function(of) {
	this.equalbars_d = 0;
	of()
    },

    // get the equalbars parameter
    set_fmt: function(of, cmd, param, lock) {
	if (cmd == "equalbars")
		this.cfmt().equalbars = this.get_bool(param)
	else
		of(cmd, param, lock)
    },

    // adjust the symbol offsets of a music line
    set_sym_glue: function(of, width) {
    var	C = abc2svg.C,
	s, s2, w, i, n, x, g, t, t0,
	bars = [],
	tsfirst = this.get_tsfirst();

	of(width)			// compute the x offset of the symbols
	if (!this.cfmt().equalbars)
		return

	// search the first note/rest/bar
	for (s2 = tsfirst; s2; s2 = s2.ts_next) {
		if (!s2.seqst)
			continue
		switch (s2.type) {
		default:
			continue
		case C.BAR:
		case C.GRACE:
		case C.MREST:
		case C.NOTE:
		case C.REST:
		case C.SPACE:
			break
		}
		break
	}
	if (!s2)
		return

	// build an array of the bars
	s = s2.ts_next;
	t0 = t = s.time
	while (1) {
		if (!s.ts_next) {
			bars.push([s, s.time - t]);
			t = s.time
			if (s.dur)
				t += s.dur
			break
		}
		if (s.type == C.BAR && s.seqst) {
			bars.push([s, s.time - t]);
			t = s.time
		}
		s = s.ts_next
	}
	n = bars.length
	if (n == 0)
		return				// no bar!

	// set the measure parameters
	x = s2.type == C.GRACE ? s2.extra.x : s2.x;
	d = this.equalbars_d
	if (!d)
		d = this.equalbars_d = x;	// offset first note/rest

	w = (width - d) / (t - t0)		// width per time unit

	// loop on the bars
	for (i = 0; i < n; i++) {
		s = bars[i][0];			// next bar
		f = w * bars[i][1] / (s.x - x)

		// and update the x offsets
		for ( ; s2 != s; s2 = s2.ts_next) {
			if (s2.type == C.GRACE) {
				for (g = s2.extra; g; g = g.next)
					g.x = d + (g.x - x) * f
			} else if (s2.x) {
				s2.x = d + (s2.x - x) * f
			}
		}
		d += w * bars[i][1];
		x = s2.x
		while (1) {
			s2.x = d;
			s2 = s2.ts_next
			if (!s2 || s2.seqst)
				break
		}
		if (!s2)
			break
	}
    } // set_sym_glue()
} // equalbars


abc2svg.modules.hooks.push(
// export
	"get_bool",
// hooks
	[ "output_music", "abc2svg.equalbars.output_music" ],
	[ "set_format", "abc2svg.equalbars.set_fmt" ],
	[ "set_sym_glue", "abc2svg.equalbars.set_sym_glue" ]
)

// the module is loaded
abc2svg.modules.equalbars.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// grid.js - module to insert a chord grid before or after a tune
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%grid" appears in a ABC source.
//
// Parameters
//	%%grid 1 | -1	(above the tune | below the tune)
//	%%gridfont font_name size (default: 'serif 16')

abc2svg.grid = {

// function called before tune generation
    do_grid: function() {
    var	C = abc2svg.C,
	tsfirst = this.get_tsfirst(),
	voice_tb = this.get_voice_tb(),
	img, font_cl, cls,
	cfmt = this.cfmt()

function get_beat(s) {
    var	beat = C.BLEN / 4

	if (!s.a_meter[0] || s.a_meter[0].top[0] == 'C' || !s.a_meter[0].bot)
		return beat;
	beat = C.BLEN / s.a_meter[0].bot[0] |0
	if (s.a_meter[0].bot[0] == 8
	 && s.a_meter[0].top[0] % 3 == 0)
		beat = C.BLEN / 8 * 3
	return beat
} // get_beat()

// generate the grid
function build_grid(chords, bars, font) {
    var	i, j, nr, line, bar, bar2, chord, cell, w, hr, x0, x, y,
	wmx = 0,
	cells = [],
	nc = chords.length % 6 == 0 ? 6 : 8;	// number of columns

	if (nc > chords.length)
		nc = chords.length;

	// build the content of the cells
	nr = 0
	for (i = 0; i < chords.length; i++) {
		if (i % nc == 0)
			nr++;			// number of rows
		chord = chords[i]
		if (chord.length == 0) {
			cell = '%'
		} else {
			cell = ''
			for (j = 0; j < chord.length; j++) {
				if (chord[j]) {
					if (j != 0)
						cell += ' / ';
					cell += chord[j]
				} else if (j == 0) {
					cell += '%'
				}
			}
		}
		bar = bars[i];
		if (bar[bar.length - 1] == ':')
			cell = '  ' + cell
		bar2 = bars[i + 1]
		if (bar2 && bar2[0] == ':')
			cell += '  ';
		cells.push(cell)

		// and find their max width
		if (bar[bar.length - 1] == ':')
			cell += '  '
		if (bar2 && bar2[0] == ':')
			cell += '  ';
		w = this.strwh(cell)[0]
		if (w > wmx)
			wmx = w
	}
	if (wmx < 20)
		wmx = 20;
	w = wmx * nc
	if (w > img.width) {
		nc /= 2;
		nr *= 2;
		w /= 2
	}

	// build the SVG image
	hr = font.size + 8;		// vert: 4 - cell - 4
	line = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"\n\
	xmlns:xlink="http://www.w3.org/1999/xlink"\n\
	color="black" width="' + img.width.toFixed(0) +
			'px" height="' + (hr * nr + 6).toFixed(0) + 'px"'
	i = cfmt.bgcolor
	if (i)
		line += ' style="background-color: ' + i + '"';
	line += '>\n<style type="text/css">\n\
.mid {text-anchor:middle}\n'

	if (cfmt.fullsvg)
		line += '\
.stroke {stroke: currentColor; fill: none}\n\
.' + font_cl + ' {' + this.style_font(font.name + '.' + font.size) +  '}\n'
	line += '</style>\n'

	// draw the lines
	line += '<path class="stroke" d="\n';
	x0 = (img.width - w) / 2;
	y = 1
	for (j = 0; j <= nr; j++) {
		line += 'M' + x0.toFixed(2) + ' ' + y.toFixed(2) +
			'h' + w.toFixed(2)+ '\n';
		y += hr
	}
	x = x0
	for (i = 0; i <= nc; i++) {
		line += 'M' + x.toFixed(2) + ' 1v' + (hr * nr).toFixed(2) + '\n';
		x += wmx
	}
	line += '"/>\n';

	// insert the chords
	y = -1 - hr * .2
	for (i = 0; i < cells.length; i++) {
		if (i % nc == 0) {
			y += hr;			// new row
			x = x0 + wmx / 2
		}
		line += '<text class="' + cls + '" x="' +
			x.toFixed(2) + '" y="' + y.toFixed(2) + '">' +
			cells[i] + '</text>\n';
		x += wmx
	}

	// show the repeat signs
	y = -1 - hr * .2;
	x = x0
	for (i = 0; i < bars.length; i++) {
		bar = bars[i]
		if (bar[0] == ':')
			line += '<text class="' + cls + '" x="' +
				(x - 5).toFixed(2) +
				'" y="' + y.toFixed(2) +
				'" style="font-weight:bold;font-size:' +
			(font.size + 2).toFixed(2) + '">:|</text>\n'
		if (i % nc == 0) {
			y += hr;			// new row
			x = x0
		}
		if (bar[bar.length - 1] == ':')
			line += '<text class="' + cls + '" x="' +
				(x + 5).toFixed(2) +
				'" y="' + y.toFixed(2) +
				'" style="font-weight:bold;font-size:' +
			(font.size + 2).toFixed(2) + '">|:</text>\n'
		x += wmx
	}

	return line + '</svg>'
} // build_grid()

    var	s, beat, cur_beat, i, beat_i, p_voice, n, font,
	bars = [],
	chords = [],
	chord = []

	img = this.get_img();

	// get the beat
	beat = get_beat(voice_tb[0].meter);

	// scan the tune
	cur_beat = beat_i = n = 0;
	bars.push('|')
	for (s = voice_tb[0].sym; s; s = s.next) {
		while (s.time > cur_beat) {
			beat_i++;
			cur_beat += beat
		}
		switch (s.type) {
		case C.NOTE:
		case C.REST:
			if (s.a_gch) {		// search a chord symbol
				for (i = 0; i < s.a_gch.length; i++) {
					if (s.a_gch[i].type == 'g') {
						if (!chord[beat_i]) {
							chord[beat_i] = s.a_gch[i].text;
							n++
						}
						break
					}
				}
			}
			break
		case C.BAR:
			if (s.time < beat) {		// if anacrusis
				bars[0] = s.bar_type;
//				chord = [];
				beat_i = 0;
				cur_beat = s.time	// re-synchronize
				break
			}
			if (s.time != cur_beat)		// if out of time
				break
			chords.push(chord);
			bars.push(s.bar_type);
			chord = [];
			beat_i = 0
			break
		case C.METER:
			beat = get_beat(s)
			break
		}
	}
	if (n == 0)				// no chord in this tune
		return

	if (chord.length != 0) {
		bars.push('')
		chords.push(chord)
	}

	// set the text style
	if (!this.cfmt().gridfont)
		this.param_set_font("gridfont", "serif 16");
	font = this.get_font('grid');
	font_cl = this.font_class(font)
	cls = font_cl + " mid";
	this.set_font('grid');		// (for strwh())

	// create the grid
	p_voice = voice_tb[this.get_top_v()]
	s = {
		type: C.BLOCK,
		subtype: 'ml',
		dur: 0,
		time: 0,
		p_v: p_voice,
		v: p_voice.v,
		text: build_grid.call(this, chords, bars, font)
	}

	// and insert it in the tune
	if (cfmt.grid < 0) {		// below
		for (var s2 = tsfirst; s2.ts_next; s2 = s2.ts_next)
			;
		s.time = s2.time;
		s.prev = p_voice.last_sym;
		s.ts_prev = s2;
		p_voice.last_sym.next = s;
		s2.ts_next = s
	} else {			// above
		s.time = 0;
		s.next = p_voice.sym;
		s.ts_next = tsfirst;
		tsfirst.ts_prev = s;
		tsfirst = s;
		this.set_tsfirst(s);
		p_voice.sym.prev = s;
		p_voice.sym = s
	}
    }, // do_grid()

    output_music: function(of) {
	if (this.cfmt().grid)
		abc2svg.grid.do_grid.call(this);
	of()
    },

    set_fmt: function(of, cmd, param, lock) {
	if (cmd == "grid") {
		this.cfmt().grid = param
		return
	}
	of(cmd, param, lock)
    }
} // grid

abc2svg.modules.hooks.push(
// export
	"font_class",
	"get_font",
	"param_set_font",
	"set_font",
	"strwh",
// hooks
	[ "output_music", "abc2svg.grid.output_music" ],
	[ "set_format", "abc2svg.grid.set_fmt" ]
)

// the module is loaded
abc2svg.modules.grid.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// grid2.js - module to replace a voice in the music by a chord grid
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%grid2" appears in a ABC source.
//
// Parameters
//	%%grid2 y
// This command must appear in a voice.

abc2svg.grid2 = {

// function called before tune generation
    do_grid: function() {
    var s, v, p_v,
	voice_tb = this.get_voice_tb()

	for (v = 0; v < voice_tb.length; v++) {
		p_v = voice_tb[v]
		if (!p_v.grid2)
			continue
		p_v.stafflines = '...';		// no staff lines
		p_v.clef.invis = true;		// no clef
		p_v.key.k_sf = p_v.key.k_a_acc = 0; // no key signature
		p_v.staffnonote = 2		// draw the staff
		for (s = p_v.sym; s; s = s.next) {
			if (s.dur) {		// set all notes
				s.invis = true;	//  as invisible
				delete s.sl1;	//  with no slur
				s.ti1 = 0	//  and no tie
			}
		}
	}
    }, // do_grid()

    // draw the chord symbol in the middle of the staff
    draw_chosym: function(s) {
    var	ix, gch;

	this.set_dscale(s.st)
	for (ix = 0; ix < s.a_gch.length; ix++) {
		gch = s.a_gch[ix]
		if (gch.type != 'g')
			continue
		this.use_font(gch.font);
		this.set_font(gch.font);
		this.xy_str(s.x + gch.x, gch.y + 6, gch.text)
	}
    }, // draw_chosym()

    draw_gchord: function(of, s, gchy_min, gchy_max) {
	if (s.p_v.grid2)
		abc2svg.grid2.draw_chosym.call(this, s)
	else
		of(s, gchy_min, gchy_max)
    },

    output_music: function(of) {
	abc2svg.grid2.do_grid.call(this);
	of()
    },

    set_format: function(of, cmd, param, lock) {
	if (cmd == "grid2") {
	    var	curvoice = this.get_curvoice()
		if (curvoice)
			curvoice.grid2 = param
		return
	}
	of(cmd, param, lock)
    }
} // grid2

abc2svg.modules.hooks.push(
// export
	"set_dscale",
	"set_font",
	"use_font",
	"xy_str",
// hooks
	[ "draw_gchord",  "abc2svg.grid2.draw_gchord" ],
	[ "output_music", "abc2svg.grid2.output_music" ],
	[ "set_format", "abc2svg.grid2.set_format" ]
);

// the module is loaded
abc2svg.modules.grid2.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// MIDI.js - module to handle the %%MIDI parameters
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%MIDI" appears in a ABC source.
//
// Parameters (see abcMIDI for details)
//	%%MIDI channel n
//	%%MIDI program n
//	%%MIDI control k v
//	%%MIDI drummap ABC_note MIDI_pitch

abc2svg.MIDI = {

    // parse %%MIDI commands
    do_midi: function(parm) {
    var	pits = new Int8Array([0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6]),
	accs = new Int8Array([0, 1, 0, -1, 0, 0, 1, 0, -1, 0, -1, 0])

    // convert a MIDI pitch to a note
    function tonote(p) {
    var	pit = Number(p)
	if (isNaN(pit))
		return
	p = ((pit / 12) | 0) * 7 - 19;	// octave
	pit = pit % 12;			// in octave
	p += pits[pit]
	note = {
		pit: p,
		apit: p,
	}
	if (accs[pit])
		note.acc = accs[pit]
	return note
    } // tonote()

    // normalize a note for mapping
    function norm(p) {
    var	a = p.match(/^([_^]*)([A-Ga-g])([,']*)$/)	// '
	if (!a)
		return
	if (p.match(/[A-Z]/)) {
		p = p.toLowerCase();
		if (p.indexOf("'") > 0)
			p = p.replace("'", '')
		else
			p += ','
	}
	return p
    } // norm()

	var	n, v,
	maps = this.get_maps(),
		a = parm.split(/\s+/)

	switch (a[1]) {
	case "channel":
		if (a[2] != "10")
			break
		this.set_v_param("midictl", "0 1") // channel 10 is bank 128 program 0
		break
	case "drummap":
		if (this.cfmt().sound != "play")
			break
//fixme: should have a 'MIDIdrum' per voice?
		n = norm(a[2]);
		v = tonote(a[3]);
		if (!n || !v) {
			this.syntax(1, abc.errs.bad_val, "%%MIDI drummap")
			break
		}
		if (!maps.MIDIdrum)
			maps.MIDIdrum = {}
		maps.MIDIdrum[n] = [null, v];
		this.set_v_param("mididrum", "MIDIdrum")
		break
	case "program":
		if (a[3] != undefined)	// the channel is unused
			v = a[3]
		else
			v = a[2];
		v = parseInt(v)
		if (isNaN(v) || v < 0 || v > 127) {
			this.syntax(1, "Bad program in %%MIDI")
			return
		}
		this.set_v_param("instr", v)
		break
	case "control":
		n = parseInt(a[2])
		if (isNaN(n) || n < 0 || n > 127) {
			this.syntax(1, "Bad controller number in %%MIDI")
			return
		}
		v = parseInt(a[3])
		if (isNaN(v) || v < 0 || v > 127) {
			this.syntax(1, "Bad controller value in %%MIDI")
			return
		}
		this.set_v_param("midictl", a[2] + ' ' + a[3])
		break
	}
    }, // do_midi()

    // set the MIDI parameters in the current voice
    set_midi: function(a) {
    var	i, item,
	curvoice = this.get_curvoice()

	for (i = 0; i < a.length; i++) {
		switch (a[i]) {
		case "instr=":			// %%MIDI program
			curvoice.instr = a[i + 1]
			break
		case "midictl=":		// %%MIDI control
			if (!curvoice.midictl)
				curvoice.midictl = {}
			item = a[i + 1].split(' ');
			curvoice.midictl[item[0]] = Number(item[1])
			break
		case "mididrum=":		// %%MIDI drummap note midipitch
			if (!curvoice.map)
				curvoice.map = {}
			curvoice.map = a[i + 1]
			break
		}
	}
    }, // set_midi()

    do_pscom: function(of, text) {
	if (text.slice(0, 5) == "MIDI ")
		abc2svg.MIDI.do_midi.call(this, text)
	else
		of(text)
    },

    set_vp: function(of, a) {
	abc2svg.MIDI.set_midi.call(this, a);
	of(a)
    }
} // MIDI

abc2svg.modules.hooks.push(
// export
	"errs",
	"set_v_param",
	"syntax",
// hooks
	[ "do_pscom", "abc2svg.MIDI.do_pscom" ],
	[ "set_vp", "abc2svg.MIDI.set_vp" ]
);

// the module is loaded
abc2svg.modules.MIDI.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// wps.js
// (c) 2009 Tomas Hlavaty

function isQuoted(V) {
  return V.q;
}

function quote(V) {
  V.q = true;
  return V;
}

function unquote(V) {
  delete V.q;
  return V;
}

function Symbol(N) {
  this.nm = N;
  return this;
}

function isSymbol(V) {
  return V &&  V.constructor === Symbol;
}

function symbolName(V) {
  return V.nm;
}

function isArray(V) {
  return V &&  V.constructor === Array;
}

function inDs(Ds, K) {
  for(var I = Ds.length - 1; 0 <= I; --I) {
	if("undefined" != typeof Ds[I][K])
	  return Ds[I];
  }
  return false;
}

function member(C, L) {
  return 0 <= L.indexOf(C);
}

function PsParser() {
  var Self = this;
  function init(L) {
    Self.L = L;
    Self.N = L.length;
    Self.I = 0;
    Self.D = 0;
  }
  function peek() {return Self.I < Self.N && Self.L[Self.I];}
  function xchar() {return Self.I < Self.N && Self.L[Self.I++];}
  function skip() { // TODO white space ffeed + null???
    while(Self.I < Self.N && member(Self.L[Self.I], " \t\n"))
      Self.I++;
  }
  function comment() {
    while("%" == peek()) {
      while(peek() && "\n" != peek())
        xchar();
      skip();
    }
  }
  function text() {
    // TODO hex text in <>
    // TODO ASCII base-85 <~ and ~>
    xchar();
    var L = [];
    var N = 1;
    while(0 < N && peek()) {
      var C = xchar();
      switch(C) {
        case "(":
          N++;
          break;
        case ")":
          N--;
          if(N <= 0) C = false;
          break;
        case "\\":
          C = xchar();
          switch(C) {
            case "(": break;
            case ")": break;
            case "\\": break;
            case "n": C = "\n"; break;
            case "r": C = "\r"; break;
            case "t": C = "\t"; break;
            // TODO \n (ignore \n) \b \f \ddd octal
            default:
              C = false;
          }
          break;
      }
      if(C !== false) L.push(C);
    }
    return L.join("");
  }
  function symbol() {
    // TODO 1e10 1E-5 real numbers
    // TODO radix numbers 8#1777 16#FFFE 2#1000
    var C = xchar();
    if(member(C, "()<>/% \t\n")) throw new Error("Symbol expected, got " + C);
    var N = member(C, "+-0123456789.");
    var F = "." == C;
    var L = [C];
    while(peek() && !member(peek(), "()<>[]{}/% \t\n")) {
      C = xchar();
      L.push(C);
      if(N && !member(C, "0123456789")) {
        if(!F && "." == C) F = true;
        else N = false;
      }
    }
    L = L.join("");
    if(1 == L.length && member(L, "+-.")) N = false;
    return N ? (F ? parseFloat(L) : parseInt(L, 10)) : new Symbol(L);
  }
  function token() {
    skip();
    switch(peek()) { // TODO read dict in <> <~~> <<>> immediate literal //
      case false: return undefined;
      case "%": return comment();
      case "[": return new Symbol(xchar());
      case "]": return new Symbol(xchar());
      case "{": Self.D++; return new Symbol(xchar());
      case "}": Self.D--; return new Symbol(xchar());
      case "/": xchar(); var X = symbol(); return quote(X);
      case "(": return text();
      case "<":
        xchar();
        if("<" != peek()) throw new Error("Encoded strings not implemented yet");
        xchar();
        return new Symbol("<<");
      case ">":
        xchar();
        if(">" != peek()) throw new Error("Unexpected >");
        xchar();
        return new Symbol(">>");
      default: return symbol();
    }
  }
  PsParser.prototype.init = init;
  PsParser.prototype.peek = peek;
  PsParser.prototype.token = token;
  return this;
}

function Ps0(Os, Ds, Es) {
  function run(X, Z) {
    if(isSymbol(X) && !isQuoted(X)) { // executable name
      var K = symbolName(X);
      var D = inDs(Ds, K);
      if(!D)
        throw new Error("bind error '" + K + "'");
      Es.push([false, D[K]]);
    } else if(Z && isArray(X) && isQuoted(X)) { // proc from Es
      if(0 < X.length) {
        var F = X[0];
        var R = quote(X.slice(1));
        if(0 < R.length) Es.push([false, R]);
        run(F, false);
      }
    } else if("function" == typeof X) X(); // operator
    else Os.push(X);
  }
  function exec() {
    var X = Os.pop();
    run(X, false);
  }
  function step() {
    var C = Es.pop();
    var L = C.shift(); // TODO use for 'exit'
    var X = C.pop();
    for(var I = 0; I < C.length; I++)
      Os.push(C[I]);
    run(X, true);
  }
  var PsP = new PsParser;
  function parse(L) {
    PsP.init(L);
    while(PsP.peek()) {
      var T = PsP.token();
      if(T || T === 0) {
        Os.push(T);
        if(PsP.D <= 0 || isSymbol(T) &&
           (member(symbolName(T), "[]{}") ||
            "<<" == symbolName(T) || ">>" == symbolName(T))) {
          exec();
          while(0 < Es.length)
            step();
        }
      }
    }
    return Os;
  }
  Ps0.prototype.run = run;
  Ps0.prototype.exec = exec;
  Ps0.prototype.step = step;
  Ps0.prototype.parse = parse;
  return this;
}

function Wps(psvg_i) {
	var psvg = psvg_i;
  var Os = [];
  var Sd = {};
  var Ds = [Sd];
  var Es = [];
  var Ps = new Ps0(Os, Ds, Es);

  // trivial
  Sd["true"] = function() {Os.push(true);};
  Sd["false"] = function() {Os.push(false);};
  Sd["null"] = function() {Os.push(null);};
  // math
  Sd["sub"] = function() {var X = Os.pop(); Os.push(Os.pop() - X);};
  Sd["mul"] = function() {Os.push(Os.pop() * Os.pop());};
  Sd["div"] = function() {var X = Os.pop(); Os.push(Os.pop() / X);};
  Sd["mod"] = function() {var X = Os.pop(); Os.push(Os.pop() % X);};
  // stack
  var M = {};
  Sd["mark"] = function() {Os.push(M);};
  Sd["counttomark"] = function() {
    var N = 0;
    for(var I = Os.length - 1; 0 <= I; I--)
      if(M === Os[I]) return Os.push(N);
      else N++;
    throw new Error("Mark not found");
  };
  Sd["<<"] = Sd["mark"]; // TODO doc
  Sd[">>"] = function() { // TODO doc
    var D = {};
    while(0 < Os.length) {
      var V = Os.pop();
      if(M === V) return Os.push(D);
      D[Os.pop()] = V;
    }
    throw new Error("Mark not found");
  };
  Sd["exch"] = function() {
    var Y = Os.pop();
    var X = Os.pop();
    Os.push(Y);
    Os.push(X);
  };
  Sd["clear"] = function() {Os.length = 0;};
  Sd["pop"] = function() {Os.pop();};
  Sd["index"] = function() {
    Os.push(Os[Os.length - 2 - Os.pop()]);
  };
  Sd["roll"] = function() { // TODO in ps
    var J = Os.pop();
    var N = Os.pop();
    var X = [];
    var Y = [];
//jfm patch
    if (J < 0)
    	J = N + J
    for(var I = 0; I < N; I++)
      if(I < J) X.unshift(Os.pop());
      else Y.unshift(Os.pop());
    for(I = 0; I < J; I++) Os.push(X.shift());
    for(I = 0; I < N - J; I++) Os.push(Y.shift());
  };
  Sd["copy"] = function() {
	var N = Os.pop();
	if("object" == typeof N) {
	  var X = Os.pop();
	  for(var I in X)
        N[I] = X[I];
      Os.push(N);
    } else {
      var X = Os.length - N;
      for(var I = 0; I < N; I++)
        Os.push(Os[X + I]);
    }
  };
  // array
  Sd["length"] = function() {Os.push(Os.pop().length);};
  Sd["astore"] = function() {
    var A = Os.pop();
    var N = A.length;
    for(var I = N - 1; 0 <= I; I--)
      A[I] = Os.pop();
    Os.push(A);
  };
  Sd["array"] = function() {Os.push(new Array(Os.pop()));};
  // conditionals
  Sd["eq"] = function() {var Y = Os.pop(); var X = Os.pop(); Os.push(X == Y);};
  Sd["lt"] = function() {var Y = Os.pop(); var X = Os.pop(); Os.push(X < Y);};
  // control
  Sd["ifelse"] = function() {
    var N = Os.pop();
    var P = Os.pop();
    var C = Os.pop();
    Es.push([false, C === true ? P : N]);
  };
//jfm++
	Sd["and"] = function() {
		var A = Os.pop();
		var B = Os.pop();
		if (true === A || false === A) {
			Os.push(A == true && B === true)
			return
		}
		Os.push(A & B)
	}
//jfm--
  Sd["repeat"] = function Xrepeat() { // TODO in ps
    var B = Os.pop();
    var N = Os.pop();
    if(1 < N) Es.push([true, N - 1, B, Xrepeat]);
    if(0 < N) Es.push([false, B]);
  };
  Sd["for"] = function Xfor() { // TODO in ps
    var B = Os.pop();
    var L = Os.pop();
    var K = Os.pop();
    var J = Os.pop();
    if(K < 0) {
      if(L <= J + K) Es.push([true, J + K, K, L, B, Xfor]);
      if(L <= J) Es.push([false, J, B]);
    } else {
      if(J + K <= L) Es.push([true, J + K, K, L, B, Xfor]);
      if(J <= L) Es.push([false, J, B]);
    }
  };
  Sd["exec"] = function() {Es.push([false, Os.pop()]);};
  Sd["cvx"] = function() {
    var X = Os.pop();
    if(isSymbol(X) && isQuoted(X)) Os.push(unquote(X)); // executable name
    else if(isArray(X) && !isQuoted(X)) Os.push(quote(X)); // proc
    // TODO string -> parse
    else Os.push(X);
  };
  // dictionary
  Sd["dict"] = function() {Os.pop(); Os.push({});};
  Sd["get"] = function() {
    var K = Os.pop();
    var D = Os.pop();
    // TODO other datatypes
    if(isSymbol(K)) Os.push(D[symbolName(K)]);
    else Os.push(D[K]);
  };
  Sd["getinterval"] = function() {
    var N = Os.pop(),
	K = Os.pop() + N,
	D = Os.pop(),
	A = []
	while (--N >= 0)
		A.push(D[K++])
	Os.push(A);
  };
  Sd["put"] = function() {
    var V = Os.pop();
    var K = Os.pop();
    var D = Os.pop();
    // TODO other datatypes
    if(isSymbol(K)) D[symbolName(K)] = V;
    else D[K] = V;
  };
  Sd["begin"] = function() {Ds.push(Os.pop());};
  Sd["end"] = function() {Ds.pop();};
  Sd["currentdict"] = function() {Os.push(Ds[Ds.length - 1]);};
  Sd["where"] = function() {
    var K = symbolName(Os.pop());
    var D = inDs(Ds, K);
	if(D) {
	  Os.push(D);
	  Os.push(true);
	} else Os.push(false);
  };
  // miscellaneous
  Sd["save"] = function() {
    var X = Ds.slice();
    for(var I = 0; I < X.length; I++) {
      var A = X[I];
      var B = {};
      for(var J in A)
        B[J] = A[J];
      X[I] = B;
    }
    Os.push(X);
  };
  Sd["restore"] = function() {
    var X = Os.pop();
    while(0 < Ds.length)
      Ds.pop();
    while(0 < X.length)
      Ds.unshift(X.pop());
  };
  Sd["type"] = function() {
    var A = Os.pop();
    var X;
    if(null === A) X = "nulltype";
    else if(true === A || false === A) X = "booleantype";
    else if(M === A) X = "marktype";
    else if("string" == typeof A) X = "stringtype";
    else if(isSymbol(A)) X = isQuoted(A) ? "nametype" : "operatortype";
    else if("function" == typeof A) X = "operatortype";
    else if(isArray(A)) X = "arraytype";
    else if("object" == typeof A) X = "dicttype";
    else if(1 * A == A) X = A % 1 == 0 ? "integertype" : "realtype";
    else throw new Error("Undefined type '" + A + "'");
    Os.push(X);
    // filetype
    // packedarraytype (LanguageLevel 2)
    // fonttype
    // gstatetype (LanguageLevel 2)
    // savetype
  };
  var Sb = true;
  Sd[".strictBind"] = function() {Sb = true === Os.pop();};
  Sd["bind"] = function() {Os.push(bind(Os.pop()));};
  function bind(X) {
    if(isSymbol(X) && !isQuoted(X)) {
//jfm++
//      var K = symbolName(X);
//      var D = inDs(Ds, K);
//      if(Sb) {
//        if(!D)
//          throw new Error("bind error '" + K + "'");
//        return bind(D[K]);
//      } else return !D ? X : bind(D[K]);
	return X
//jfm--
    } else if(isArray(X) && isQuoted(X)) {
      var N = X.length;
      var A = [];
      for(var I = 0; I < N; I++) {
        var Xi = X[I];
        var Xb = bind(Xi);
        if(isArray(Xi))
          A = A.concat(isQuoted(Xi) ? quote([Xb]) : [Xb]);
        else
          A = A.concat(Xb);
      }
      return quote(A);
    }
    return X;
  }
  // debugging
  Sd["="] = function() {var X = Os.pop(); alert(X && X.nm || X);}; // TODO
  Sd["=="] = function() {alert(Os.pop());}; // TODO
  Sd["stack"] = function() {alert(Os);}; // TODO
  Sd["pstack"] = function() {alert(Os);}; // TODO
  // js ffi
  Sd[".call"] = function() {
    var N = Os.pop();
    var K = Os.pop();
    var D = Os.pop();
    var X = [];
    for(var I = 0; I < N; I++) X.unshift(Os.pop());
    if (!D[K]) throw new Error(".call: " + K + " undef")
    Os.push(D[K].apply(D, X));
  };
//jfm++
  Sd[".call0"] = function() {
    var N = Os.pop(),
	K = Os.pop(),
	D = Os.pop(),
	X = []
    for(var I = 0; I < N; I++) X.unshift(Os.pop());
    if (!D[K]) throw new Error(".call0: " + K + " undef")
    D[K].apply(D, X);
  };
  Sd[".svg"] = function() {Os.push(psvg)};
//jfm--
  Sd[".math"] = function() {Os.push(Math);};
  Sd[".date"] = function() {Os.push(new Date());}; // TODO split new and Date
  Sd[".window"] = function() {Os.push(window);};
  Sd[".callback"] = function() { // TODO event arg?
    var X = Os.pop();
    Os.push(function() {
              Ps.run(X, true);
              while(0 < Es.length)
                Ps.step();
            });
  };
  // html5
  Sd[".minv"] = function() { // TODO in ps
    var M = Os.pop();
    var a = M[0]; var b = M[1];
    var d = M[2]; var e = M[3];
    var g = M[4]; var h = M[5];
    Os.push([e, b, d, a, d*h-e*g, b*g-a*h]);
  };
  Sd[".mmul"] = function() { // TODO in ps
    var B = Os.pop();
    var A = Os.pop();
    var a = A[0]; var b = A[1];
    var d = A[2]; var e = A[3];
    var g = A[4]; var h = A[5];
    var r = B[0]; var s = B[1];
    var u = B[2]; var v = B[3];
    var x = B[4]; var y = B[5];
    Os.push([a*r+b*u, a*s+b*v, d*r+e*u, d*s+e*v, g*r+h*u+x, g*s+h*v+y]);
  };
  Sd[".xy"] = function() { // TODO in ps
    var M = Os.pop();
    var Y = Os.pop();
    var X = Os.pop();
    Os.push(M[0] * X + M[2] * Y + M[4]);
    Os.push(M[1] * X + M[3] * Y + M[5]);
  };
  // TODO js ffi to manipulate strings so the following can be in ps
  Sd[".rgb"] = function() { // TODO in ps
    var B = Os.pop();
    var G = Os.pop();
    var R = Os.pop();
    Os.push("rgb(" + R + "," + G + "," + B + ")");
  };
  Sd[".rgba"] = function() { // TODO in ps
    var A = Os.pop();
    var B = Os.pop();
    var G = Os.pop();
    var R = Os.pop();
    Os.push("rgba(" + R + "," + G + "," + B + "," + A + ")");
  };

  function parse() {
    var T = arguments;
    if(T.length)
      for(var I = 0; I < T.length; I++)
        Ps.parse(T[I]);
    else Ps.parse(T);
    return Os;
  }
  Wps.prototype.parse = parse;
  return this;
}
// psvg.js - small PS to SVG convertor for abc2svg

// Copyright (C) 2014-2018 Jean-Francois Moine
//
// This file is part of abc2svg-core.
//
// abc2svg-core is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// abc2svg-core is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with abc2svg-core.  If not, see <http://www.gnu.org/licenses/>.

function Psvg(abcobj_r) {
    var	svgbuf = '',

// SVG functions - adapted from abcm2ps svg.c
	abcobj = abcobj_r,
	wps = new Wps(this),
	g = 0,			// graphic state
	gchg,			// graphic change
	gcur = {		// current graphic context
		cx:0,
		cy:0,
		xoffs:0,
		yoffs:0,
		xscale: 1,
		yscale: 1,
		rotate: 0,
		sin: 0,
		cos: 1,
		linewidth: 0.7,
		dash: ''
	},
	gc_stack = [],		// graphic stack
	x_rot = 0,
	y_rot = 0,
	font_n = "",
	font_n_old = "",
	font_s = 0,
	path;

// function called from Abc
    function getorig() {
	setg(0);
	return [gcur.xoffs - gcur.xorig, gcur.yoffs - gcur.yorig]
    }

    function defg1() {
	gchg = false;
	setg(0);
	svgbuf += "<g"
	if (gcur.xscale != 1 || gcur.yscale != 1 || gcur.rotate) {
		svgbuf += ' transform="'
		if (gcur.xscale != 1 || gcur.yscale != 1) {
			if (gcur.xscale == gcur.yscale)
				svgbuf += "scale(" + gcur.xscale.toFixed(3) + ")"
			else
				svgbuf += "scale(" + gcur.xscale.toFixed(3) +
						"," + gcur.yscale.toFixed(3) + ")"
		}
		if (gcur.rotate) {
			if (gcur.xoffs || gcur.yoffs) {
				var	x, xtmp = gcur.xoffs,
					y = gcur.yoffs,
					_sin = gcur.sin,
					_cos = gcur.cos;
				x = xtmp * _cos - y * _sin;
				y = xtmp * _sin + y * _cos;
				svgbuf += " translate(" + x.toFixed(2) + "," +
						y.toFixed(2) + ")";
				x_rot = gcur.xoffs;
				y_rot = gcur.yoffs;
				gcur.xoffs = 0;
				gcur.yoffs = 0
			}
			svgbuf += " rotate(" + gcur.rotate.toFixed(2) + ")"
		}
		svgbuf += '"'
	}
	output_font(false)
	if (gcur.rgb)
		svgbuf += ' style="color:' + gcur.rgb + '"';
	svgbuf += ">\n";
	g = 1
    }

    function objdup(obj) {
	var	k, tmp = new obj.constructor()
	for (k in obj)
	    if (obj.hasOwnProperty(k))
		tmp[k] = obj[k]
	return tmp
    }

    function output_font(back) {
	var	name = gcur.font_n
	if (!name)
		return
	var	prop = "",
		i = name.indexOf("Italic"),
		j = 100,
		o = name.indexOf("Oblique"),
		b = name.indexOf("Bold"),
		flags = 0
	if (b > 0) {
		prop = ' font-weight="bold"';
		j = b;
		flags = 2
	}
	if (i > 0 || o > 0) {
		if (i > 0) {
			prop += ' font-style="italic"';
			if (i < j)
				j = i;
			flags |= 4
		}
		if (o > 0) {
			prop += ' font-style="oblique"';
			if (o < j)
				j = o;
			flags = 8
		}
	}
	if (j != 100) {
		if (name[j - 1] == '-')
			j--;
		name = name.slice(0, j)
	}

	if (back) {
		if (!(flags & 2)
		 && font_n_old.indexOf("Bold") >= 0)
			prop += ' font-weight="normal"';
		if (!(flags & 12)
		 && (font_n_old.indexOf("Italic") >= 0
		  || font_n_old.indexOf("Oblique") >= 0))
			prop += ' font-style="normal"'
	}
	svgbuf += ' font-family="' + name + '"' +
		prop + ' font-size="' + gcur.font_s + '"'
    }

    function path_def() {
	if (path)
		return
	setg(1);
	gcur.px = gcur.cx;
	gcur.py = gcur.cy;
	path = '<path d="m' + (gcur.xoffs + gcur.cx).toFixed(2) +
		' ' + (gcur.yoffs - gcur.cy).toFixed(2) + '\n'
    }

    function path_end() {
	svgbuf += path;
	path = ''
    }

    function setg(newg) {
	if (g == 2) {
		svgbuf += "</text>\n";
		g = 1
	}
	if (newg == 0) {
		if (g) {
			g = 0;
			svgbuf += "</g>\n"
			if (gcur.rotate) {
				gcur.xoffs = x_rot;
				gcur.yoffs = y_rot;
				x_rot = 0;
				y_rot = 0
			}
		}
	} else if (gchg) {
		defg1()
	}
    }

    function strw(s) {
	return s.length * gcur.font_s * 0.5	// fixme: approximate value
    }
    Psvg.prototype.strw = strw;

// graphic functions called from wps.js
    function arc(x, y, r, a1, a2, arcn) {
	var x1, y1, x2, y2
	if (a1 >= 360)
		a1 -= 360
	if (a2 >= 360)
		a2 -= 360;
	x1 = x + r * Math.cos(a1 * Math.PI / 180);
	y1 = y + r * Math.sin(a1 * Math.PI / 180)

	if (gcur.cx != undefined) {
		if (path) {
			if (x1 != gcur.cx || y1 != gcur.cy)
				path += 'l'
			else
				path += 'm';
			path += (x1 - gcur.cx).toFixed(2) + " " +
				(-(y1 - gcur.cy)).toFixed(2)
		} else {
			gcur.cx = x1;
			gcur.cy = y1;
			path_def()
		}
	} else {
		if (path)		// should not occur
			path = ''
		gcur.cx = x1;
		gcur.cy = y1;
		path_def()
	}

	if (a1 == a2) {			/* circle */
		a2 = 180 - a1;
		x2 = x + r * Math.cos(a2 * Math.PI / 180);
		y2 = y + r * Math.sin(a2 * Math.PI / 180);
		path += 'a' + r.toFixed(2) + ' ' + r.toFixed(2) + ' 0 0 ' +
			(arcn ? '1 ' : '0 ') +
			(x2 - x1).toFixed(2) + ' ' +
			(y1 - y2).toFixed(2) + ' ' +
			r.toFixed(2) + ' ' + r.toFixed(2) + ' 0 0 ' +
			(arcn ? '1 ' : '0 ') +
			(x1 - x2).toFixed(2) + ' ' +
			(y2 - y1).toFixed(2) + '\n';
		gcur.cx = x1;
		gcur.cy = y1
	} else {
		x2 = x + r * Math.cos(a2 * Math.PI / 180);
		y2 = y + r * Math.sin(a2 * Math.PI / 180);
		path += 'a' + r.toFixed(2) + ' ' + r.toFixed(2) + ' 0 0 ' +
			(arcn ? '1 ' : '0 ') +
			(x2 - x1).toFixed(2) + ' ' +
			(y1 - y2).toFixed(2) + '\n';
		gcur.cx = x2;
		gcur.cy = y2
	}
    }
    Psvg.prototype.arc = arc

    Psvg.prototype.arcn = function(x, y, r, a1, a2) {
	arc(x, y, r, a1, a2, true)
    }

    Psvg.prototype.closepath = function() {
	if (path && gcur.cx)
		rlineto(gcur.px - gcur.cx, gcur.py - gcur.cy)
    }

    Psvg.prototype.cx = function() {
	return gcur.cx
    }

    Psvg.prototype.cy = function() {
	return gcur.cy
    }

    Psvg.prototype.curveto = function(x1, y1, x2, y2, x, y) {
	path_def();
	path += "\tC" + 
		(gcur.xoffs + x1).toFixed(2) + " " + (gcur.yoffs - y1).toFixed(2) + " " +
		(gcur.xoffs + x2).toFixed(2) + " " + (gcur.yoffs - y2).toFixed(2) + " " +
		(gcur.xoffs + x).toFixed(2) + " " + (gcur.yoffs - y).toFixed(2) + "\n";
	gcur.cx = x;
	gcur.cy = y
    }

    Psvg.prototype.eofill = function() {
	path_end();
	svgbuf += '" fill-rule="evenodd" fill="currentColor"/>\n'
    }

    Psvg.prototype.fill = function() {
	path_end();
	svgbuf += '" fill="currentColor"/>\n'
    }

    Psvg.prototype.gsave = function() {
	gc_stack.push(objdup(gcur))
    }

    Psvg.prototype.grestore = function() {
	gcur = gc_stack.pop();
	gchg = true
    }

    Psvg.prototype.lineto = function(x, y) {
	path_def()
	if (x == gcur.cx)
		path += "\tv" + (gcur.cy - y).toFixed(2) + "\n"
	else if (y == gcur.cy)
		path += "\th" + (x - gcur.cx).toFixed(2) + "\n"
	else
		path += "\tl" + (x - gcur.cx).toFixed(2) + " " +
			(gcur.cy - y).toFixed(2) + "\n";
	gcur.cx = x;
	gcur.cy = y
    }

    Psvg.prototype.moveto = function(x, y) {
	gcur.cx = x;
	gcur.cy = y
	if (path) {
		path += "\tM" + (gcur.xoffs + gcur.cx).toFixed(2) + " " +
				(gcur.yoffs - gcur.cy).toFixed(2) + "\n"
	} else if (g == 2) {
		svgbuf += "</text>\n";
		g = 1
	}
    }

    Psvg.prototype.newpath = function() {
	gcur.cx = gcur.cy = undefined
    }

    Psvg.prototype.rcurveto = function(x1, y1, x2, y2, x, y) {
	path_def();
	path += "\tc" + 
		x1.toFixed(2) + " " + (-y1).toFixed(2) + " " +
		x2.toFixed(2) + " " + (-y2).toFixed(2) + " " +
		x.toFixed(2) + " " + (-y).toFixed(2) + "\n";
	gcur.cx += x;
	gcur.cy += y
    }

    function rlineto(x, y) {
	path_def()
	if (x == 0)
		path += "\tv" + (-y).toFixed(2) + "\n"
	else if (y == 0)
		path += "\th" + x.toFixed(2) + "\n"
	else
		path += "\tl" + x.toFixed(2) + " " +
			(-y).toFixed(2) + "\n";
	gcur.cx += x;
	gcur.cy += y
    }
    Psvg.prototype.rlineto = rlineto;

    Psvg.prototype.rmoveto = function(x, y) {
	if (path) {
		path += "\tm" + x.toFixed(2) + " " +
				(-y).toFixed(2) + "\n"
	} else if (g == 2) {
		svgbuf += "</text>\n";
		g = 1
	}
	gcur.cx += x;
	gcur.cy += y
    }

    Psvg.prototype.rotate = function(a) {
	setg(0)

	// convert orig and currentpoint coord to absolute coord
	var	x, xtmp = gcur.xoffs,
		y = gcur.yoffs,
		_sin = gcur.sin,
		_cos = gcur.cos;
	x = xtmp * _cos - y * _sin;
	y = xtmp * _sin + y * _cos;
	gcur.xoffs = x / gcur.xscale;
	gcur.yoffs = y / gcur.yscale;

	xtmp = gcur.cx;
	y = gcur.cy;
	x = xtmp * _cos - y * _sin;
	y = -xtmp * _sin + y * _cos;
	gcur.cx = x / gcur.xscale;
	gcur.cy = y / gcur.yscale;

	// rotate
	a = 360 - a;
	gcur.rotate += a
	if (gcur.rotate > 180)
		gcur.rotate -= 360
	else if (gcur.rotate <= -180)
		gcur.rotate += 360
	a = gcur.rotate * Math.PI / 180;
	gcur.sin = _sin = Math.sin(a);
	gcur.cos = _cos = Math.cos(a);
	x = gcur.cx;
	gcur.cx = (x * _cos + gcur.cy * _sin) * gcur.xscale;
	gcur.cy = (-x * _sin + gcur.cy * _cos) * gcur.yscale;
	x = gcur.xoffs;
	gcur.xoffs = (x * _cos + gcur.yoffs * _sin) *
			gcur.xscale;
	gcur.yoffs = (-x * _sin + gcur.yoffs * _cos) *
			gcur.yscale;
	gchg = true
    }

    Psvg.prototype.scale = function(sx, sy) {
	gcur.xoffs /= sx;
	gcur.yoffs /= sy;
	gcur.cx /= sx;
	gcur.cy /= sy;
	gcur.xscale *= sx;
	gcur.yscale *= sy;
	gchg = true
    }

    Psvg.prototype.selectfont = function(s, h) {
	s = s.nm;			// Symbol
	if (font_s != h || s != font_n) {
		gcur.font_n_old = gcur.font_n;
		gcur.font_n = s;
		gcur.font_s = h;
		gchg = true
	}
    }

    Psvg.prototype.setdash = function(a, o) {
	var n = a.length, i
	if (n == 0) {
		gcur.dash= ''
		return
	}
	gcur.dash = ' stroke-dashoffset="' + o + '"  stroke-dasharray="';
	i = 0
	while (1) {
		gcur.dash += a[i]
		if (--n == 0)
			break
		gcur.dash += ' '
	}
	gcur.dash += '"'
    }

    Psvg.prototype.setlinewidth = function(w) {
	gcur.linewidth = w
    }

    Psvg.prototype.setrgbcolor = function(r, g, b) {
	var rgb = 0x1000000 +
		(Math.floor(r * 255) << 16) +
		(Math.floor(g * 255) << 8) +
		Math.floor(b * 255);
	rgb = rgb.toString(16);
	rgb = rgb.replace('1', '#')
	if (rgb != gcur.rgb) {
		gcur.rgb = rgb;
		gchg = true
	}
    }

    Psvg.prototype.show = function(s) {
	var span, x, y
	if (gchg) {
		if (g == 2)
			span = true
		else
			defg1()
	}
	x = gcur.cx;
	y = gcur.cy
	if (span) {
		svgbuf += "<tspan\n\t";
		output_font(true);
		svgbuf += ">"
	} else if (g != 2) {
		svgbuf += '<text x="' + (x + gcur.xoffs).toFixed(2) + '" y="' +
				(gcur.yoffs - y).toFixed(2) + '">';
		g = 2
	}
	svgbuf += s.replace(/<|>|&|  /g, function(c){
			switch (c) {
			case '<': return "&lt;"
			case '>': return "&gt;"
			case '&': return "&amp;"
			case '  ': return '  '		// space + nbspace
			}
		})
	if (span)
		svgbuf += "</tspan>";
	gcur.cx = x + strw(s)
    }

    Psvg.prototype.stroke = function() {
	path_end()
	if (gcur.linewidth != 0.7)
		svgbuf += '" stroke-width="' + gcur.linewidth.toFixed(2);
	svgbuf += '" stroke="currentColor" fill="none"' + gcur.dash + '/>\n'
    }

    Psvg.prototype.translate = function(x, y) {
	gcur.xoffs += x;
	gcur.yoffs -= y;
	gcur.cx -= x;
	gcur.cy -= y
    }

// abcm2ps functions
    Psvg.prototype.arp = function(val, x, y) {
    var	xy = getorig();
	ps_flush();
	abcobj.out_arp((x + xy[0]) * abcobj.stv_g().scale, y - xy[1], val)
    }
    Psvg.prototype.ltr = function(val, x, y) {
    var	xy = getorig();
	ps_flush();
	abcobj.out_ltr((x + xy[0]) * abcobj.stv_g().scale, y - xy[1], val)
    }
    Psvg.prototype.xygl = function(x, y, gl) {
    var	xy = getorig();
	ps_flush();
	abcobj.xygl((x + xy[0]) * abcobj.stv_g().scale, y - xy[1], gl)
    }
    Psvg.prototype.xygls = function(str, x, y, gl) {
    var	xy = getorig();
	ps_flush();
	abcobj.out_deco_str((x + xy[0]) * abcobj.stv_g().scale, y - xy[1], gl, str)
    }
    Psvg.prototype.xyglv = function(val, x, y, gl) {
    var	xy = getorig();
	ps_flush();
	abcobj.out_deco_val((x + xy[0]) * abcobj.stv_g().scale, y - xy[1], gl, val)
    }
    Psvg.prototype.y0 = function(y) {
    var	staff_tb = abcobj.get_staff_tb()
	return y + staff_tb[0].y
    }
    Psvg.prototype.y1 = function(y) {
    var	staff_tb = abcobj.get_staff_tb()
	return y + staff_tb[1].y
    }

// flush the PS buffer
function ps_flush(g0) {
	if (g0)
		setg(0);
	if (!svgbuf)
		return
	abcobj.out_svg(svgbuf);
	svgbuf = ''
}
Psvg.prototype.ps_flush = ps_flush

// evaluate a PS user sequence (%beginps .. %%endps)
Psvg.prototype.ps_eval = function(txt) {
	wps.parse(txt);
	ps_flush()
}

// ------ output builtin decorations
// common part
function pscall(f, x, y, script) {
	gcur.xorig = gcur.xoffs = abcobj.sx(0);
	gcur.yorig = gcur.yoffs = abcobj.sy(0);
	gcur.cx = 0;
	gcur.cy = 0;
	wps.parse(script +
		(x / abcobj.stv_g().scale).toFixed(2) + ' ' + y.toFixed(2) + ' ' + f);
	ps_flush(true)			// + setg(0)
	return true
}

// try to generate a decoration by PS
Psvg.prototype.psdeco = function(f, x, y, de) {
	var	dd, de2, script, defl,
		Os = wps.parse('/' + f + ' where'),
		A = Os.pop(),
	staff_tb = abcobj.get_staff_tb()

	if (!A)
		return false;
	defl = 0
	if (de.defl.nost)
		defl = 1
	if (de.defl.noen)
		defl |= 2
	if (de.s.stem >= 0)
		defl |= 4;

	Os.pop();
	script = '/defl ' + defl + ' def '
	if (de.lden) {
		script += x.toFixed(2) + ' ' + y.toFixed(2) + ' ';
		de2 = de.start;
		x = de2.x;
		y = de2.y + staff_tb[de2.st].y
		if (x > de.x - 20)
			x = de.x - 20
	}
	dd = de.dd
	if (de.has_val) {
		script += de.val + ' '
	} else if (dd.str) {
		script += '(' + dd.str + ') ';
		y += dd.h * 0.2
	}
	return pscall(f, x, y, script)
}

// try to generate a glyph by PS
Psvg.prototype.psxygl = function(x, y, gl) {
	var	Os = wps.parse('/' + gl + ' where'),
		A = Os.pop()
	if (!A)
		return false
	Os.pop()
	return pscall(gl, x, y, 'dlw ')
}

Psvg.prototype.svgcall = function(f, x, y, v1, v2) {
    var	xy = getorig();
	ps_flush();
	f((x + xy[0]) * abcobj.stv_g().scale, y - xy[1], v1, v2)
}

//  initialize the PostScript functions
	wps.parse("\
currentdict/systemdict currentdict put\n\
systemdict/{/mark cvx put\n\
systemdict/[/mark cvx put\n\
systemdict/]\n\
/counttomark cvx\n\
/array cvx\n\
/astore cvx\n\
/exch cvx\n\
/pop cvx\n\
5 array astore cvx put\n\
systemdict/}/] cvx/cvx cvx 2 array astore cvx put\n\
systemdict/def{currentdict 2 index 2 index put pop pop}put\n\
\n\
/maxlength 1000 def % TODO\n\
/.bdef{bind def}bind def\n\
/.xdef{exch def}.bdef\n\
/dup{0 index}.bdef\n\
/load{dup where pop exch get}.bdef\n\
/.ldef{load def}.bdef\n\
/if{{}ifelse}.bdef\n\
/cleartomark{array pop}.bdef\n\
/known{exch begin where{currentdict eq}{false}if end}.bdef\n\
/store{1 index where{3 1 roll put}{def}ifelse}.bdef\n\
/not{{false}{true}ifelse}.bdef\n\
%/.logand{{{true}{false}ifelse}{pop false}ifelse}.bdef\n\
%/and/.logand .ldef % TODO numeric and\n\
/.logor{{pop true}{{true}{false}ifelse}ifelse}.bdef\n\
/or/.logor .ldef % TODO numeric or\n\
/ne{eq not}.bdef\n\
/ge{lt not}.bdef\n\
/le{1 index 1 index eq 3 1 roll lt or}.bdef\n\
/gt{le not}.bdef\n\
/.repeat{1 1 4 2 roll for}.bdef\n\
\n\
%% math\n\
\n\
/floor{.math(floor)1 .call}.bdef\n\
\n\
/neg{0 exch sub}.bdef\n\
/add{neg sub}.bdef\n\
/idiv{div floor}.bdef\n\
\n\
/.pi{.math(PI)get}.bdef\n\
\n\
/abs{.math(abs)1 .call}.bdef\n\
%/.acos{.math(acos)1 .call}.bdef\n\
%/.asin{.math(asin)1 .call}.bdef\n\
/atan{.math(atan2)2 .call 180 mul .pi div}.bdef\n\
%/.atan2{.math(atan2)2 .call}.bdef\n\
%/ceiling{.math(ceil)1 .call}.bdef\n\
/cos{.pi mul 180 div .math(cos)1 .call}.bdef\n\
%/.exp{.math(exp)1 .call}.bdef\n\
%/log{.math(log)1 .call}.bdef\n\
%/.max{.math(max)2 .call}.bdef\n\
%/.min{.math(min)2 .call}.bdef\n\
%/.pow{.math(pow)2 .call}.bdef\n\
%/.random{.math(random)0 .call}.bdef\n\
%/rand{.random}.bdef % TODO follow spec\n\
%/round{.math(round)1 .call}.bdef\n\
%/sin{.math(sin)1 .call}.bdef\n\
%/sqrt{.math(sqrt)1 .call}.bdef\n\
%/.tan{.math(tan)1 .call}.bdef\n\
%/truncate{.math(truncate)1 .call}.bdef % TODO Math.truncate does not exist!\n\
\n\
% graphic\n\
/arc{.svg(arc)5 .call0}.bdef\n\
/arcn{.svg(arcn)5 .call0}.bdef\n\
/closepath{.svg(closepath)0 .call}.bdef\n\
/currentpoint{.svg(cx)0 .call .svg(cy)0 .call}.bdef\n\
/curveto{.svg(curveto)6 .call0}.bdef\n\
/eofill{.svg(eofill)0 .call0}.bdef\n\
/fill{.svg(fill)0 .call0}.bdef\n\
/grestore{.svg(grestore)0 .call0}.bdef\n\
/gsave{.svg(gsave)0 .call0}.bdef\n\
/lineto{.svg(lineto)2 .call0}.bdef\n\
/moveto{.svg(moveto)2 .call0}.bdef\n\
/newpath{.svg(newpath)0 .call0}.bdef\n\
/rcurveto{.svg(rcurveto)6 .call0}.bdef\n\
/rlineto{.svg(rlineto)2 .call0}.bdef\n\
/rmoveto{.svg(rmoveto)2 .call0}.bdef\n\
/rotate{.svg(rotate)1 .call0}.bdef\n\
/scale{.svg(scale)2 .call0}.bdef\n\
/selectfont{.svg(selectfont)2 .call0}.bdef\n\
/setdash{.svg(setdash)2 .call0}.bdef\n\
/setlinewidth{.svg(setlinewidth)1 .call0}.bdef\n\
/setrgbcolor{.svg(setrgbcolor)3 .call0}.bdef\n\
/show{.svg(show)1 .call0}.bdef\n\
/stroke{.svg(stroke)0 .call0}.bdef\n\
/stringwidth{.svg(strw)1 .call 1}.bdef		%fixme: height KO\n\
/translate{.svg(translate)2 .call0}.bdef\n\
\n\
/setgray{255 mul dup dup setrgbcolor}.bdef\n\
% abcm2ps syms.c\n\
/!{bind def}bind def\n\
/T/translate load def\n\
/M/moveto load def\n\
/RM/rmoveto load def\n\
/L/lineto load def\n\
/RL/rlineto load def\n\
/C/curveto load def\n\
/RC/rcurveto load def\n\
/SLW/setlinewidth load def\n\
/defl 0 def\n\
/dlw{0.7 SLW}!\n\
/xymove{/x 2 index def/y 1 index def M}!\n\
/showc{dup stringwidth pop .5 mul neg 0 RM show}!\n\
%\n\
% abcm2ps internal glyphs\n\
/arp{.svg(arp)3 .call0}.bdef\n\
/ltr{.svg(ltr)3 .call0}.bdef\n\
/ft0{(acc-1).svg(xygl)3 .call0}.bdef\n\
/nt0{(acc3).svg(xygl)3 .call0}.bdef\n\
/sh0{(acc1).svg(xygl)3 .call0}.bdef\n\
/dsh0{(acc2).svg(xygl)3 .call0}.bdef\n\
/trl{(trl).svg(xygl)3 .call0}.bdef\n\
/lmrd{(lmrd).svg(xygl)3 .call0}.bdef\n\
/turn{(turn).svg(xygl)3 .call0}.bdef\n\
/umrd{(umrd).svg(xygl)3 .call0}.bdef\n\
/y0{.svg(y0)1 .call}.bdef\n\
/y1{.svg(y1)1 .call}.bdef\n")

} // Psvg()

abc2svg.modules.psvg = {
	do_begin_end: function(of, type, opt, text) {
		if (type != "ps") {
			of(type, opt, text)
			return
		}
		if (opt == 'nosvg')
			return
		if (!this.psvg)
			this.psvg = new Psvg(this);
		this.psvg.ps_eval.call(this.psvg, text)
	},
	psdeco: function(of, f, x, y, de) {
		if (!this.psvg)			// no %%beginps yet
			return false
		return this.psvg.psdeco.call(this.psvg, f, x, y, de)
	},
	psxygl: function(of, x, y, gl) {
		if (!this.psvg)
			return false
		return this.psvg.psxygl.call(this.psvg, x, y, gl)
	}
}

abc2svg.modules.hooks.push(
// export
	"out_arp",
	"out_deco_str",
	"out_deco_val",
	"out_ltr",
	"xygl",
// hooks
	[ "do_begin_end", "abc2svg.modules.psvg.do_begin_end" ],
	[ "psdeco", "abc2svg.modules.psvg.psdeco" ],
	[ "psxygl", "abc2svg.modules.psvg.psxygl" ]
);

// the module is loaded
abc2svg.modules.beginps.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// sth.js - module to set the stem heights
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%sth" appears in a ABC source.
//
// Parameters
//	%%sth h1 h2 h3 ...
// The values h1, h2, .. are applied to the following notes which
// have a stem and which are not inside a beam.
// The value may be '*' for keeping the original stem length.

abc2svg.sth = {

// function called after beam calculation
    recal_beam: function(bm, s) {
    var staff_tb = this.get_staff_tb(),
	st = s.st,
	s2 = bm.s2
	if (s.sth)
		s.ys = s.sth
	if (s2.sth)
		s2.ys = s2.sth;
	bm.a = (s.ys- s2.ys) / (s.xs - s2.xs);
	bm.b = s.ys - s.xs * bm.a + staff_tb[st].y
	while (1) {
		s.ys = bm.a * s.xs + bm.b - staff_tb[st].y
		if (s.stem > 0)
			s.ymx = s.ys + 2.5
		else
			s.ymn = s.ys - 2.5;
		s = s.next
		if (s == s2)
			break
	}
    },

// function called after the stem heights have been computed
    set_sth: function() {
    var s, h, v, sth_a, p_voice,
	voice_tb = this.get_voice_tb()

	for (v = 0; v < voice_tb.length; v++) {
		p_voice = voice_tb[v]
		if (p_voice.sth != null)	// if no stem length in this voice
			continue
		sth_a = []
		for (s = p_voice.sym; s; s = s.next) {
			if (s.sth) {
				sth_a = s.sth;
				s.sth = null
			}
			if (sth_a.length == 0
			 || s.nflags <= -2 || s.stemless
			 || !(s.beam_st || s.beam_end))
				continue
			h = sth_a.shift()
			if (h == '*')
				continue	// no change
			if (h == '|') {		// skip to the next measure bar
				for (s = s.next; s; s = s.next) {
					if (s.bar_type)
						break
				}
				continue
			}
			h = Number(h)
			if (isNaN(h) || !h)
				continue	// fixme: error
			if (s.stem >= 0) {
				s.ys = s.y + h;
				s.ymx = (s.ys + 2.5) | 0
			} else {
				s.ys = s.y - h;
				s.ymn = (s.ys - 2.5) | 0
			}
			s.sth = s.ys
		}
	}
    }, // set_sth()

    calculate_beam: function(of, bm, s1) {
    var	done = of(bm, s1)
	if (done && bm.s2 && s1.sth)
		abc2svg.sth.recal_beam.call(this, bm, s1)
	return done
    },

    new_note: function(of, grace, tp_fact) {
    var	C = abc2svg.C,
	s = of(grace, tp_fact),
	curvoice = this.get_curvoice()

	if (curvoice.sth && s && s.type == C.NOTE) {
		s.sth = curvoice.sth;
		curvoice.sth = null
	}
	return s
    },

    set_format: function(of, cmd, param, lock) {
	if (cmd == "sth") {
	    var	curvoice = this.get_curvoice()
		if (this.parse.state == 2)
			this.goto_tune()
		if (curvoice)
			curvoice.sth = param.split(/[ \t;-]+/)
		return
	}
	of(cmd, param, lock)
    },

    set_stems: function(of) {
	of();
	abc2svg.sth.set_sth.call(this)
    }

} // sth

abc2svg.modules.hooks.push(
// export
	"goto_tune",
	"parse",
// hooks
	[ "calculate_beam", "abc2svg.sth.calculate_beam" ],
	[ "new_note", "abc2svg.sth.new_note" ],
	[ "set_format", "abc2svg.sth.set_format" ],
	[ "set_stems", "abc2svg.sth.set_stems" ]
);

// the module is loaded
abc2svg.modules.sth.loaded = true
// abc2svg - ABC to SVG translator
// @source: https://chiselapp.com/user/moinejf/repository/abc2svg
// Copyright (C) 2014-2018 Jean-Francois Moine - LGPL3+
// temper.js - module to define the temperament
//
// Copyright (C) 2018 Jean-Francois Moine - GPL3+
//
// This module is loaded when "%%temperament" appears in a ABC source.
//
// Parameters
//	%%temperament <list>
// The <list> must contain 12 integer values that are the detune values in cents
// of the 12 notes of the equal scale.
// Examples:
//
// % pythagore (~500 B.C)
// %%temperament +00 +14 +04 -06 +08 -02 +12 +02 +16 +06 -04 +10
//
// % just intonation
// %%temperament +00 -08 -18 -06 -14 -02 -10 +02 -08 -16 -04 -12
//
// % meantone (Pietro Aaron 1523)
// %%temperament +00 -24 -07 +10 -14 +03 -21 -03 -27 +10 +07 -17
//
// % Andreas Werckmeister III (1681)
// %%temperament +00 -04 +04 +00 -04 +04 +00 +02 -08 +00 +02 -02
//
// % well temperament (F.A. Vallotti 1754)
// %%temperament +00 -06 -04 -02 -08 +02 -08 -02 -04 -06 +00 -10

abc2svg.temper = {

    // move the temperament to the 1st voice
    set_bar_num: function(of) {
	of()
	if (this.cfmt().temper) {
	    var	v0 = this.get_voice_tb()[0];

		v0.temper = new Float32Array(12)
		for (var i = 0; i < 12; i++)
			v0.temper[i] = this.cfmt().temper[i] / 100
	}
    },

    // get the temperament
    set_fmt: function(of, cmd, param, lock) {
	if (cmd == "temperament") {
	    var	ls = new Float32Array(param.split(/ +/)),
		i = ls.length

		if (i == 12) {
			while (--i >= 0) {
				if (isNaN(parseInt(ls[i])))
					break
			}
			if (i < 0) {
				this.cfmt().temper = ls
				return
			}
		}
		this.syntax(1, errs.bad_val, "%%temperament")
		return
	}
	of(cmd, param, lock)
    }

} // temper


abc2svg.modules.hooks.push(
// export
	"syntax",
// hooks
	[ "set_bar_num", "abc2svg.temper.set_bar_num" ],
	[ "set_format", "abc2svg.temper.set_fmt" ]
)

// the module is loaded
abc2svg.modules.temperament.loaded = true
Opal.loaded(["./abc2svg-1.js"]);
/* Generated by Opal 1.0.0 */
Opal.modules["opal-webworker"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$is_a?', '$Native', '$to_json', '$lambda', '$[]', '$parse', '$call', '$post_message', '$empty?', '$on_message', '$[]=', '$-']);
  
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'Webworker');

    var $nesting = [self].concat($parent_nesting), $Webworker_initialize$1, $Webworker_createWorker$2, $Webworker_post_message$3, $Webworker_on_message$4;

    self.$$prototype.worker = nil;
    
    
    Opal.def(self, '$initialize', $Webworker_initialize$1 = function $$initialize(parent) {
      var self = this;

      
      self.handlers = $hash2([], {});
      if ($truthy(self.$Native(parent)['$is_a?']($$($nesting, 'String')))) {
        
        self.worker = new Worker(parent);
        return (self.name = "main script");
      } else {
        
        self.worker = parent;
        return (self.name = "worker");
      };
    }, $Webworker_initialize$1.$$arity = 1);
    
    Opal.def(self, '$createWorker', $Webworker_createWorker$2 = function $$createWorker(script) {
      var self = this;

      return (self.worker = new Worker(script))
    }, $Webworker_createWorker$2.$$arity = 1);
    
    Opal.def(self, '$post_message', $Webworker_post_message$3 = function $$post_message(object) {
      var self = this;

      return self.worker.postMessage(object.$to_json())
    }, $Webworker_post_message$3.$$arity = 1);
    return (Opal.def(self, '$on_message', $Webworker_on_message$4 = function $$on_message() {
      var $iter = $Webworker_on_message$4.$$p, block = $iter || nil, $$5, self = this, listener = nil;

      if ($iter) $Webworker_on_message$4.$$p = null;
      
      
      if ($iter) $Webworker_on_message$4.$$p = null;;
      listener = $send(self, 'lambda', [], ($$5 = function(event){var self = $$5.$$s || this, payload = nil, result = nil;

      
        
        if (event == null) {
          event = nil;
        };
        payload = self.$Native(event)['$[]']("data");
        result = nil;
        result = $$($nesting, 'JSON').$parse(payload);
        block.$call(result);
        return nil;}, $$5.$$s = self, $$5.$$arity = 1, $$5));
      return self.worker.addEventListener('message', listener, false);
    }, $Webworker_on_message$4.$$arity = 0), nil) && 'on_message';
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'NamedWebworker');

    var $nesting = [self].concat($parent_nesting), $NamedWebworker_post_named_message$6, $NamedWebworker_on_named_message$7;

    self.$$prototype.handlers = nil;
    
    
    Opal.def(self, '$post_named_message', $NamedWebworker_post_named_message$6 = function $$post_named_message(cmd, object) {
      var self = this;

      return self.$post_message($hash2(["name", "payload"], {"name": cmd, "payload": object}))
    }, $NamedWebworker_post_named_message$6.$$arity = 2);
    return (Opal.def(self, '$on_named_message', $NamedWebworker_on_named_message$7 = function $$on_named_message(cmd) {
      var $iter = $NamedWebworker_on_named_message$7.$$p, block = $iter || nil, $$8, self = this, $writer = nil;

      if ($iter) $NamedWebworker_on_named_message$7.$$p = null;
      
      
      if ($iter) $NamedWebworker_on_named_message$7.$$p = null;;
      if ($truthy(self.handlers['$empty?']())) {
        $send(self, 'on_message', [], ($$8 = function(object){var self = $$8.$$s || this, handler = nil;
          if (self.handlers == null) self.handlers = nil;

        
          
          if (object == null) {
            object = nil;
          };
          if ($truthy(object['$is_a?']($$($nesting, 'Hash')))) {
            
            handler = self.handlers['$[]'](object['$[]']("name"));
            if ($truthy(handler)) {
              return handler.$call(object)
            } else {
              return nil
            };
          } else {
            return nil
          };}, $$8.$$s = self, $$8.$$arity = 1, $$8))};
      
      $writer = [cmd, block];
      $send(self.handlers, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $NamedWebworker_on_named_message$7.$$arity = 1), nil) && 'on_named_message';
  })($nesting[0], $$($nesting, 'Webworker'), $nesting);
};

'use strict';

/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 1.5.3 Built on 2019-09-04T13:52:13.528Z
 *                      CommitID dbd88b981b
 *
 * Copyright (c) 2010-2018 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2018 yWorks GmbH, http://www.yworks.com
 *               2015-2018 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, willow-systems.com
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Licensed under the MIT License
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */

/**
 * polyfill to make jsped work in a webworker
 * @type {{}}
 */
window = {};

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/* eslint-disable no-console */

/* global saveAs, define, RGBColor */
// eslint-disable-next-line no-unused-vars
var jsPDF = function (global) {
  /**
   * jsPDF's Internal PubSub Implementation.
   * Backward compatible rewritten on 2014 by
   * Diego Casorran, https://github.com/diegocr
   *
   * @class
   * @name PubSub
   * @ignore
   */

  function PubSub(context) {
    if (_typeof(context) !== 'object') {
      throw new Error('Invalid Context passed to initialize PubSub (jsPDF-module)');
    }

    var topics = {};

    this.subscribe = function (topic, callback, once) {
      once = once || false;

      if (typeof topic !== 'string' || typeof callback !== 'function' || typeof once !== 'boolean') {
        throw new Error('Invalid arguments passed to PubSub.subscribe (jsPDF-module)');
      }

      if (!topics.hasOwnProperty(topic)) {
        topics[topic] = {};
      }

      var token = Math.random().toString(35);
      topics[topic][token] = [callback, !!once];
      return token;
    };

    this.unsubscribe = function (token) {
      for (var topic in topics) {
        if (topics[topic][token]) {
          delete topics[topic][token];

          if (Object.keys(topics[topic]).length === 0) {
            delete topics[topic];
          }

          return true;
        }
      }

      return false;
    };

    this.publish = function (topic) {
      if (topics.hasOwnProperty(topic)) {
        var args = Array.prototype.slice.call(arguments, 1),
            tokens = [];

        for (var token in topics[topic]) {
          var sub = topics[topic][token];

          try {
            sub[0].apply(context, args);
          } catch (ex) {
            if (global.console) {
              console.error('jsPDF PubSub Error', ex.message, ex);
            }
          }

          if (sub[1]) { tokens.push(token); }
        }

        if (tokens.length) { tokens.forEach(this.unsubscribe); }
      }
    };

    this.getTopics = function () {
      return topics;
    };
  }
  /**
  * Creates new jsPDF document object instance.
  * @name jsPDF
  * @class
  * @param {Object} [options] - Collection of settings initializing the jsPDF-instance
  * @param {string} [options.orientation=portrait] - Orientation of the first page. Possible values are "portrait" or "landscape" (or shortcuts "p" or "l").<br />
  * @param {string} [options.unit=mm] Measurement unit (base unit) to be used when coordinates are specified.<br />
  * Possible values are "pt" (points), "mm", "cm", "m", "in" or "px".
  * @param {string/Array} [options.format=a4] The format of the first page. Can be:<ul><li>a0 - a10</li><li>b0 - b10</li><li>c0 - c10</li><li>dl</li><li>letter</li><li>government-letter</li><li>legal</li><li>junior-legal</li><li>ledger</li><li>tabloid</li><li>credit-card</li></ul><br />
  * Default is "a4". If you want to use your own format just pass instead of one of the above predefined formats the size as an number-array, e.g. [595.28, 841.89]
  * @param {boolean} [options.putOnlyUsedFonts=false] Only put fonts into the PDF, which were used.
  * @param {boolean} [options.compress=false] Compress the generated PDF.
  * @param {number} [options.precision=2] Precision of the element-positions.
  * @param {number} [options.userUnit=1.0] Not to be confused with the base unit. Please inform yourself before you use it.
  * @returns {jsPDF} jsPDF-instance
  * @description
  * ```
  * {
  *  orientation: 'p',
  *  unit: 'mm',
  *  format: 'a4',
  *  putOnlyUsedFonts:true
  * }
  * ```
  *
  * @constructor
  */


  function jsPDF(options) {
    var orientation = typeof arguments[0] === 'string' ? arguments[0] : 'p';
    var unit = arguments[1];
    var format = arguments[2];
    var compressPdf = arguments[3];
    var filters = [];
    var userUnit = 1.0;
    var precision;
    var defaultPathOperation = 'S';
    options = options || {};

    if (_typeof(options) === 'object') {
      orientation = options.orientation;
      unit = options.unit || unit;
      format = options.format || format;
      compressPdf = options.compress || options.compressPdf || compressPdf;
      userUnit = typeof options.userUnit === "number" ? Math.abs(options.userUnit) : 1.0;
      precision = options.precision;
      defaultPathOperation = options.defaultPathOperation || 'S';
    }

    filters = options.filters || (compressPdf === true ? ['FlateEncode'] : filters);
    unit = unit || 'mm';
    orientation = ('' + (orientation || 'P')).toLowerCase();
    var putOnlyUsedFonts = options.putOnlyUsedFonts || false;
    var usedFonts = {};
    var API = {
      internal: {},
      __private__: {}
    };
    API.__private__.PubSub = PubSub;
    var pdfVersion = '1.3';

    var getPdfVersion = API.__private__.getPdfVersion = function () {
      return pdfVersion;
    };

    API.__private__.setPdfVersion = function (value) {
      pdfVersion = value;
    }; // Size in pt of various paper formats


    var pageFormats = {
      'a0': [2383.94, 3370.39],
      'a1': [1683.78, 2383.94],
      'a2': [1190.55, 1683.78],
      'a3': [841.89, 1190.55],
      'a4': [595.28, 841.89],
      'a5': [419.53, 595.28],
      'a6': [297.64, 419.53],
      'a7': [209.76, 297.64],
      'a8': [147.40, 209.76],
      'a9': [104.88, 147.40],
      'a10': [73.70, 104.88],
      'b0': [2834.65, 4008.19],
      'b1': [2004.09, 2834.65],
      'b2': [1417.32, 2004.09],
      'b3': [1000.63, 1417.32],
      'b4': [708.66, 1000.63],
      'b5': [498.90, 708.66],
      'b6': [354.33, 498.90],
      'b7': [249.45, 354.33],
      'b8': [175.75, 249.45],
      'b9': [124.72, 175.75],
      'b10': [87.87, 124.72],
      'c0': [2599.37, 3676.54],
      'c1': [1836.85, 2599.37],
      'c2': [1298.27, 1836.85],
      'c3': [918.43, 1298.27],
      'c4': [649.13, 918.43],
      'c5': [459.21, 649.13],
      'c6': [323.15, 459.21],
      'c7': [229.61, 323.15],
      'c8': [161.57, 229.61],
      'c9': [113.39, 161.57],
      'c10': [79.37, 113.39],
      'dl': [311.81, 623.62],
      'letter': [612, 792],
      'government-letter': [576, 756],
      'legal': [612, 1008],
      'junior-legal': [576, 360],
      'ledger': [1224, 792],
      'tabloid': [792, 1224],
      'credit-card': [153, 243]
    };

    API.__private__.getPageFormats = function () {
      return pageFormats;
    };

    var getPageFormat = API.__private__.getPageFormat = function (value) {
      return pageFormats[value];
    };

    format = format || 'a4';

    var roundToPrecision = API.roundToPrecision = API.__private__.roundToPrecision = function (number, parmPrecision) {
      var tmpPrecision = precision || parmPrecision;

      if (isNaN(number) || isNaN(tmpPrecision)) {
        throw new Error('Invalid argument passed to jsPDF.roundToPrecision');
      }

      if (tmpPrecision >= 16) {
        return number.toFixed(tmpPrecision).replace(/0+$/, "");
      } else {
        return number.toFixed(tmpPrecision);
      }
    };

    var scale = API.scale = API.__private__.scale = function (number) {
      if (isNaN(number)) {
        throw new Error('Invalid argument passed to jsPDF.scale');
      }

      return number * scaleFactor;
    };

    var hpf = API.hpf = API.__private__.hpf = function (number) {
      if (isNaN(number)) {
        throw new Error('Invalid argument passed to jsPDF.hpf');
      }

      return roundToPrecision(number, 16);
    };

    var f2 = API.f2 = API.__private__.f2 = function (number) {
      if (isNaN(number)) {
        throw new Error('Invalid argument passed to jsPDF.f2');
      }

      return roundToPrecision(number, 2);
    };

    var f3 = API.__private__.f3 = function (number) {
      if (isNaN(number)) {
        throw new Error('Invalid argument passed to jsPDF.f3');
      }

      return roundToPrecision(number, 3);
    };

    var transformY = function transformY(y) {
      return y;
    };

    var transformScaleY = function transformScaleY(y) {
      return scale(transformY(y));
    };
    /**
     * @name setPrecision
     * @memberof jsPDF#
     * @function
     * @instance
     * @param {string} precision
     * @returns {jsPDF}
     */


    API.__private__.setPrecision = API.setPrecision = function (value) {
      if (typeof parseInt(value, 10) === 'number') {
        precision = parseInt(value, 10);
      }
    };

    var fileId = '00000000000000000000000000000000';

    var getFileId = API.__private__.getFileId = function () {
      return fileId;
    };

    var setFileId = API.__private__.setFileId = function (value) {
      if (typeof value !== 'undefined' && /^[a-fA-F0-9]{32}$/.test(value)) {
        fileId = value.toUpperCase();
      } else {
        fileId = fileId.split('').map(function () {
          return "ABCDEF0123456789".charAt(Math.floor(Math.random() * 16));
        }).join('');
      }

      return fileId;
    };
    /**
     * @name setFileId
     * @memberof jsPDF#
     * @function
     * @instance
     * @param {string} value GUID.
     * @returns {jsPDF}
     */


    API.setFileId = function (value) {
      setFileId(value);
      return this;
    };
    /**
     * @name getFileId
     * @memberof jsPDF#
     * @function
     * @instance
     *
     * @returns {string} GUID.
     */


    API.getFileId = function () {
      return getFileId();
    };

    var creationDate;

    var convertDateToPDFDate = API.__private__.convertDateToPDFDate = function (parmDate) {
      var result = '';
      var tzoffset = parmDate.getTimezoneOffset(),
          tzsign = tzoffset < 0 ? '+' : '-',
          tzhour = Math.floor(Math.abs(tzoffset / 60)),
          tzmin = Math.abs(tzoffset % 60),
          timeZoneString = [tzsign, padd2(tzhour), "'", padd2(tzmin), "'"].join('');
      result = ['D:', parmDate.getFullYear(), padd2(parmDate.getMonth() + 1), padd2(parmDate.getDate()), padd2(parmDate.getHours()), padd2(parmDate.getMinutes()), padd2(parmDate.getSeconds()), timeZoneString].join('');
      return result;
    };

    var convertPDFDateToDate = API.__private__.convertPDFDateToDate = function (parmPDFDate) {
      var year = parseInt(parmPDFDate.substr(2, 4), 10);
      var month = parseInt(parmPDFDate.substr(6, 2), 10) - 1;
      var date = parseInt(parmPDFDate.substr(8, 2), 10);
      var hour = parseInt(parmPDFDate.substr(10, 2), 10);
      var minutes = parseInt(parmPDFDate.substr(12, 2), 10);
      var seconds = parseInt(parmPDFDate.substr(14, 2), 10); // var timeZoneHour = parseInt(parmPDFDate.substr(16, 2), 10);
      // var timeZoneMinutes = parseInt(parmPDFDate.substr(20, 2), 10);

      var resultingDate = new Date(year, month, date, hour, minutes, seconds, 0);
      return resultingDate;
    };

    var setCreationDate = API.__private__.setCreationDate = function (date) {
      var tmpCreationDateString;
      var regexPDFCreationDate = /^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/;

      if (typeof date === "undefined") {
        date = new Date();
      }

      if (date instanceof Date) {
        tmpCreationDateString = convertDateToPDFDate(date);
      } else if (regexPDFCreationDate.test(date)) {
        tmpCreationDateString = date;
      } else {
        throw new Error('Invalid argument passed to jsPDF.setCreationDate');
      }

      creationDate = tmpCreationDateString;
      return creationDate;
    };

    var getCreationDate = API.__private__.getCreationDate = function (type) {
      var result = creationDate;

      if (type === "jsDate") {
        result = convertPDFDateToDate(creationDate);
      }

      return result;
    };
    /**
     * @name setCreationDate
     * @memberof jsPDF#
     * @function
     * @instance
     * @param {Object} date
     * @returns {jsPDF}
     */


    API.setCreationDate = function (date) {
      setCreationDate(date);
      return this;
    };
    /**
     * @name getCreationDate
     * @memberof jsPDF#
     * @function
     * @instance
     * @param {Object} type
     * @returns {Object}
     */


    API.getCreationDate = function (type) {
      return getCreationDate(type);
    };

    var padd2 = API.__private__.padd2 = function (number) {
      return ('0' + parseInt(number)).slice(-2);
    };

    var padd2Hex = API.__private__.padd2Hex = function (hexString) {
      hexString = hexString.toString();
      return ("00" + hexString).substr(hexString.length);
    };

    var objectNumber = 0; // 'n' Current object number

    var offsets = []; // List of offsets. Activated and reset by buildDocument(). Pupulated by various calls buildDocument makes.

    var content = [];
    var contentLength = 0;
    var additionalObjects = [];
    var pages = [];
    var currentPage;
    var hasCustomDestination = false;
    var outputDestination = content;

    var resetDocument = function resetDocument() {
      //reset fields relevant for objectNumber generation and xref.
      objectNumber = 0;
      contentLength = 0;
      content = [];
      offsets = [];
      additionalObjects = [];
      rootDictionaryObjId = newObjectDeferred();
      resourceDictionaryObjId = newObjectDeferred();
    };

    API.__private__.setCustomOutputDestination = function (destination) {
      hasCustomDestination = true;
      outputDestination = destination;
    };

    var setOutputDestination = function setOutputDestination(destination) {
      if (!hasCustomDestination) {
        outputDestination = destination;
      }
    };

    API.__private__.resetCustomOutputDestination = function () {
      hasCustomDestination = false;
      outputDestination = content;
    };

    var out = API.__private__.out = function (string) {
      string = string.toString();
      contentLength += string.length + 1;
      outputDestination.push(string);
      return outputDestination;
    };

    var write = API.__private__.write = function (value) {
      return out(arguments.length === 1 ? value.toString() : Array.prototype.join.call(arguments, ' '));
    };

    var getArrayBuffer = API.__private__.getArrayBuffer = function (data) {
      return new Uint8Array(data.split('')).buffer;
    };

    var standardFonts = [['Helvetica', "helvetica", "normal", 'WinAnsiEncoding'], ['Helvetica-Bold', "helvetica", "bold", 'WinAnsiEncoding'], ['Helvetica-Oblique', "helvetica", "italic", 'WinAnsiEncoding'], ['Helvetica-BoldOblique', "helvetica", "bolditalic", 'WinAnsiEncoding'], ['Courier', "courier", "normal", 'WinAnsiEncoding'], ['Courier-Bold', "courier", "bold", 'WinAnsiEncoding'], ['Courier-Oblique', "courier", "italic", 'WinAnsiEncoding'], ['Courier-BoldOblique', "courier", "bolditalic", 'WinAnsiEncoding'], ['Times-Roman', "times", "normal", 'WinAnsiEncoding'], ['Times-Bold', "times", "bold", 'WinAnsiEncoding'], ['Times-Italic', "times", "italic", 'WinAnsiEncoding'], ['Times-BoldItalic', "times", "bolditalic", 'WinAnsiEncoding'], ['ZapfDingbats', "zapfdingbats", "normal", null], ['Symbol', "symbol", "normal", null]];

    API.__private__.getStandardFonts = function () {
      return standardFonts;
    };

    var activeFontSize = options.fontSize || 16;
    /**
     * Sets font size for upcoming text elements.
     *
     * @param {number} size Font size in points.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setFontSize
     */

    API.__private__.setFontSize = API.setFontSize = function (size) {
      activeFontSize = size;
      return this;
    };
    /**
     * Gets the fontsize for upcoming text elements.
     *
     * @function
     * @instance
     * @returns {number}
     * @memberof jsPDF#
     * @name getFontSize
     */


    var getFontSize = API.__private__.getFontSize = API.getFontSize = function () {
      return activeFontSize;
    };

    var R2L = options.R2L || false;
    /**
     * Set value of R2L functionality.
     *
     * @param {boolean} value
     * @function
     * @instance
     * @returns {jsPDF} jsPDF-instance
     * @memberof jsPDF#
     * @name setR2L
     */

    API.__private__.setR2L = API.setR2L = function (value) {
      R2L = value;
      return this;
    };
    /**
     * Get value of R2L functionality.
     *
     * @function
     * @instance
     * @returns {boolean} jsPDF-instance
     * @memberof jsPDF#
     * @name getR2L
     */


    API.__private__.getR2L = API.getR2L = function () {
      return R2L;
    };

    var zoomMode; // default: 1;

    var setZoomMode = API.__private__.setZoomMode = function (zoom) {
      var validZoomModes = [undefined, null, 'fullwidth', 'fullheight', 'fullpage', 'original'];

      if (/^\d*\.?\d*%$/.test(zoom)) {
        zoomMode = zoom;
      } else if (!isNaN(zoom)) {
        zoomMode = parseInt(zoom, 10);
      } else if (validZoomModes.indexOf(zoom) !== -1) {
        zoomMode = zoom;
      } else {
        throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + zoom + '" is not recognized.');
      }
    };

    API.__private__.getZoomMode = function () {
      return zoomMode;
    };

    var pageMode; // default: 'UseOutlines';

    var setPageMode = API.__private__.setPageMode = function (pmode) {
      var validPageModes = [undefined, null, 'UseNone', 'UseOutlines', 'UseThumbs', 'FullScreen'];

      if (validPageModes.indexOf(pmode) == -1) {
        throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + pmode + '" is not recognized.');
      }

      pageMode = pmode;
    };

    API.__private__.getPageMode = function () {
      return pageMode;
    };

    var layoutMode; // default: 'continuous';

    var setLayoutMode = API.__private__.setLayoutMode = function (layout) {
      var validLayoutModes = [undefined, null, 'continuous', 'single', 'twoleft', 'tworight', 'two'];

      if (validLayoutModes.indexOf(layout) == -1) {
        throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + layout + '" is not recognized.');
      }

      layoutMode = layout;
    };

    API.__private__.getLayoutMode = function () {
      return layoutMode;
    };
    /**
     * Set the display mode options of the page like zoom and layout.
     *
     * @name setDisplayMode
     * @memberof jsPDF#
     * @function 
     * @instance
     * @param {integer|String} zoom   You can pass an integer or percentage as
     * a string. 2 will scale the document up 2x, '200%' will scale up by the
     * same amount. You can also set it to 'fullwidth', 'fullheight',
     * 'fullpage', or 'original'.
     *
     * Only certain PDF readers support this, such as Adobe Acrobat.
     *
     * @param {string} layout Layout mode can be: 'continuous' - this is the
     * default continuous scroll. 'single' - the single page mode only shows one
     * page at a time. 'twoleft' - two column left mode, first page starts on
     * the left, and 'tworight' - pages are laid out in two columns, with the
     * first page on the right. This would be used for books.
     * @param {string} pmode 'UseOutlines' - it shows the
     * outline of the document on the left. 'UseThumbs' - shows thumbnails along
     * the left. 'FullScreen' - prompts the user to enter fullscreen mode.
     *
     * @returns {jsPDF}
     */


    API.__private__.setDisplayMode = API.setDisplayMode = function (zoom, layout, pmode) {
      setZoomMode(zoom);
      setLayoutMode(layout);
      setPageMode(pmode);
      return this;
    };

    var documentProperties = {
      'title': '',
      'subject': '',
      'author': '',
      'keywords': '',
      'creator': ''
    };

    API.__private__.getDocumentProperty = function (key) {
      if (Object.keys(documentProperties).indexOf(key) === -1) {
        throw new Error('Invalid argument passed to jsPDF.getDocumentProperty');
      }

      return documentProperties[key];
    };

    API.__private__.getDocumentProperties = function () {
      return documentProperties;
    };
    /**
     * Adds a properties to the PDF document.
     *
     * @param {Object} A property_name-to-property_value object structure.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setDocumentProperties
     */


    API.__private__.setDocumentProperties = API.setProperties = API.setDocumentProperties = function (properties) {
      // copying only those properties we can render.
      for (var property in documentProperties) {
        if (documentProperties.hasOwnProperty(property) && properties[property]) {
          documentProperties[property] = properties[property];
        }
      }

      return this;
    };

    API.__private__.setDocumentProperty = function (key, value) {
      if (Object.keys(documentProperties).indexOf(key) === -1) {
        throw new Error('Invalid arguments passed to jsPDF.setDocumentProperty');
      }

      return documentProperties[key] = value;
    };

    var fonts = {}; // collection of font objects, where key is fontKey - a dynamically created label for a given font.

    var fontmap = {}; // mapping structure fontName > fontStyle > font key - performance layer. See addFont()

    var activeFontKey; // will be string representing the KEY of the font as combination of fontName + fontStyle

    var fontStateStack = []; //

    var patterns = {}; // collection of pattern objects

    var patternMap = {}; // see fonts

    var gStates = {}; // collection of graphic state objects

    var gStatesMap = {}; // see fonts

    var activeGState = null;
    var scaleFactor; // Scale factor

    var page = 0;
    var pagesContext = [];
    var events = new PubSub(API);
    var hotfixes = options.hotfixes || [];
    var renderTargets = {};
    var renderTargetMap = {};
    var renderTargetStack = [];
    var pageX;
    var pageY;
    var pageMatrix; // only used for FormObjects

    /**
    * A matrix object for 2D homogenous transformations: <br>
    * | a b 0 | <br>
    * | c d 0 | <br>
    * | e f 1 | <br>
    * pdf multiplies matrices righthand: v' = v x m1 x m2 x ...
    *
    * @class
    * @name Matrix
    * @param {number} sx
    * @param {number} shy
    * @param {number} shx
    * @param {number} sy
    * @param {number} tx
    * @param {number} ty
    * @constructor
    */

    var Matrix = function Matrix(sx, shy, shx, sy, tx, ty) {
      var round = function round(number) {
        if (precision >= 16) {
          return number;
        } else {
          return Math.round(number * 100000) / 100000;
        }
      };

      var _matrix = [];
      /**
      * @name sx
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'sx', {
        get: function get() {
          return _matrix[0];
        },
        set: function set(value) {
          _matrix[0] = round(value);
        }
      });
      /**
      * @name shy
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'shy', {
        get: function get() {
          return _matrix[1];
        },
        set: function set(value) {
          _matrix[1] = round(value);
        }
      });
      /**
      * @name shx
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'shx', {
        get: function get() {
          return _matrix[2];
        },
        set: function set(value) {
          _matrix[2] = round(value);
        }
      });
      /**
      * @name sy
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'sy', {
        get: function get() {
          return _matrix[3];
        },
        set: function set(value) {
          _matrix[3] = round(value);
        }
      });
      /**
      * @name tx
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'tx', {
        get: function get() {
          return _matrix[4];
        },
        set: function set(value) {
          _matrix[4] = round(value);
        }
      });
      /**
      * @name ty
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'ty', {
        get: function get() {
          return _matrix[5];
        },
        set: function set(value) {
          _matrix[5] = round(value);
        }
      });
      Object.defineProperty(this, 'a', {
        get: function get() {
          return _matrix[0];
        },
        set: function set(value) {
          _matrix[0] = round(value);
        }
      });
      Object.defineProperty(this, 'b', {
        get: function get() {
          return _matrix[1];
        },
        set: function set(value) {
          _matrix[1] = round(value);
        }
      });
      Object.defineProperty(this, 'c', {
        get: function get() {
          return _matrix[2];
        },
        set: function set(value) {
          _matrix[2] = round(value);
        }
      });
      Object.defineProperty(this, 'd', {
        get: function get() {
          return _matrix[3];
        },
        set: function set(value) {
          _matrix[3] = round(value);
        }
      });
      Object.defineProperty(this, 'e', {
        get: function get() {
          return _matrix[4];
        },
        set: function set(value) {
          _matrix[4] = round(value);
        }
      });
      Object.defineProperty(this, 'f', {
        get: function get() {
          return _matrix[5];
        },
        set: function set(value) {
          _matrix[5] = round(value);
        }
      });
      /**
      * @name rotation
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'rotation', {
        get: function get() {
          return Math.atan2(this.shx, this.sx);
        }
      });
      /**
      * @name scaleX
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'scaleX', {
        get: function get() {
          return this.decompose().scale.sx;
        }
      });
      /**
      * @name scaleY
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'scaleY', {
        get: function get() {
          return this.decompose().scale.sy;
        }
      });
      /**
      * @name isIdentity
      * @memberof Matrix#
      */

      Object.defineProperty(this, 'isIdentity', {
        get: function get() {
          if (this.sx !== 1) {
            return false;
          }

          if (this.shy !== 0) {
            return false;
          }

          if (this.shx !== 0) {
            return false;
          }

          if (this.sy !== 1) {
            return false;
          }

          if (this.tx !== 0) {
            return false;
          }

          if (this.ty !== 0) {
            return false;
          }

          return true;
        }
      });
      this.sx = !isNaN(sx) ? sx : 1;
      this.shy = !isNaN(shy) ? shy : 0;
      this.shx = !isNaN(shx) ? shx : 0;
      this.sy = !isNaN(sy) ? sy : 1;
      this.tx = !isNaN(tx) ? tx : 0;
      this.ty = !isNaN(ty) ? ty : 0;
      return this;
    };
    /**
    * Join the Matrix Values to a String
    * 
    * @function join
    * @param {string} separator Specifies a string to separate each pair of adjacent elements of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma (","). If separator is an empty string, all elements are joined without any characters in between them.
    * @returns {string} A string with all array elements joined.
    * @memberof Matrix#
    */


    Matrix.prototype.join = function (separator) {
      return [this.sx, this.shy, this.shx, this.sy, this.tx, this.ty].join(separator);
    };
    /**
    * Multiply the matrix with given Matrix
    * 
    * @function multiply
    * @param matrix
    * @returns {Matrix}
    * @memberof Matrix#
    */


    Matrix.prototype.multiply = function (matrix) {
      var sx = matrix.sx * this.sx + matrix.shy * this.shx;
      var shy = matrix.sx * this.shy + matrix.shy * this.sy;
      var shx = matrix.shx * this.sx + matrix.sy * this.shx;
      var sy = matrix.shx * this.shy + matrix.sy * this.sy;
      var tx = matrix.tx * this.sx + matrix.ty * this.shx + this.tx;
      var ty = matrix.tx * this.shy + matrix.ty * this.sy + this.ty;
      return new Matrix(sx, shy, shx, sy, tx, ty);
    };
    /**
    * @function decompose
    * @memberof Matrix#
    */


    Matrix.prototype.decompose = function () {
      var a = this.sx;
      var b = this.shy;
      var c = this.shx;
      var d = this.sy;
      var e = this.tx;
      var f = this.ty;
      var scaleX = Math.sqrt(a * a + b * b);
      a /= scaleX;
      b /= scaleX;
      var shear = a * c + b * d;
      c -= a * shear;
      d -= b * shear;
      var scaleY = Math.sqrt(c * c + d * d);
      c /= scaleY;
      d /= scaleY;
      shear /= scaleY;

      if (a * d < b * c) {
        a = -a;
        b = -b;
        shear = -shear;
        scaleX = -scaleX;
      }

      return {
        scale: new Matrix(scaleX, 0, 0, scaleY, 0, 0),
        translate: new Matrix(1, 0, 0, 1, e, f),
        rotate: new Matrix(a, b, -b, a, 0, 0),
        skew: new Matrix(1, 0, shear, 1, 0, 0)
      };
    };
    /**
    * @function toString
    * @memberof Matrix#
    */


    Matrix.prototype.toString = function (parmPrecision) {
      var tmpPrecision = precision || parmPrecision || 5;

      var round = function round(number) {
        if (tmpPrecision >= 16) {
          return hpf(number);
        } else {
          return Math.round(number * Math.pow(10, tmpPrecision)) / Math.pow(10, tmpPrecision);
        }
      };

      return [round(this.sx), round(this.shy), round(this.shx), round(this.sy), round(this.tx), round(this.ty)].join(" ");
    };
    /**
    * @function inversed
    * @memberof Matrix#
    */


    Matrix.prototype.inversed = function () {
      var a = this.sx,
          b = this.shy,
          c = this.shx,
          d = this.sy,
          e = this.tx,
          f = this.ty;
      var quot = 1 / (a * d - b * c);
      var aInv = d * quot;
      var bInv = -b * quot;
      var cInv = -c * quot;
      var dInv = a * quot;
      var eInv = -aInv * e - cInv * f;
      var fInv = -bInv * e - dInv * f;
      return new Matrix(aInv, bInv, cInv, dInv, eInv, fInv);
    };
    /**
    * @function applyToPoint
    * @memberof Matrix#
    */


    Matrix.prototype.applyToPoint = function (pt) {
      var x = pt.x * this.sx + pt.y * this.shx + this.tx;
      var y = pt.x * this.shy + pt.y * this.sy + this.ty;
      return new Point(x, y);
    };
    /**
    * @function applyToRectangle
    * @memberof Matrix#
    */


    Matrix.prototype.applyToRectangle = function (rect) {
      var pt1 = this.applyToPoint(rect);
      var pt2 = this.applyToPoint(new Point(rect.x + rect.w, rect.y + rect.h));
      return new Rectangle(pt1.x, pt1.y, pt2.x - pt1.x, pt2.y - pt1.y);
    };
    /**
    * Clone the Matrix
    *
    * @function clone
    * @memberof Matrix#
    * @name clone
    * @instance
    */


    Matrix.prototype.clone = function () {
      var sx = this.sx;
      var shy = this.shy;
      var shx = this.shx;
      var sy = this.sy;
      var tx = this.tx;
      var ty = this.ty;
      return new Matrix(sx, shy, shx, sy, tx, ty);
    };

    API.Matrix = Matrix;
    /**
     * Multiplies two matrices. (see {@link Matrix})
     * @param {Matrix} m1
     * @param {Matrix} m2
     * @memberof jsPDF#
     * @name matrixMult
     */

    API.matrixMult = function (m1, m2) {
      return m1.multiply(m2);
    };
    /**
     * The identity matrix (equivalent to new Matrix(1, 0, 0, 1, 0, 0)).
     * @type {Matrix}
     * @memberof! jsPDF#
     * @name identityMatrix
     */


    var identityMatrix = new Matrix(1, 0, 0, 1, 0, 0);
    API.unitMatrix = API.identityMatrix = identityMatrix;

    var Pattern = function Pattern(gState, matrix) {
      this.gState = gState;
      this.matrix = matrix;
      this.id = ""; // set by addPattern()

      this.objectNumber = -1; // will be set by putPattern()
    };
    /**
     * Adds a new pattern for later use.
     * @param {String} key The key by it can be referenced later. The keys must be unique!
     * @param {API.Pattern} pattern The pattern
     */


    var addPattern = function addPattern(key, pattern) {
      // only add it if it is not already present (the keys provided by the user must be unique!)
      if (patternMap[key]) { return; }
      var prefix = pattern instanceof API.ShadingPattern ? "Sh" : "P";
      var patternKey = prefix + (Object.keys(patterns).length + 1).toString(10);
      pattern.id = patternKey;
      patternMap[key] = patternKey;
      patterns[patternKey] = pattern;
      events.publish("addPattern", pattern);
    };
    /**
     * A pattern describing a shading pattern.
     *
     * Only available in "advanced" API mode.
     *
     * @param {String} type One of "axial" or "radial"
     * @param {Array<Number>} coords Either [x1, y1, x2, y2] for "axial" type describing the two interpolation points
     * or [x1, y1, r, x2, y2, r2] for "radial" describing inner and the outer circle.
     * @param {Array<Object>} colors An array of objects with the fields "offset" and "color". "offset" describes
     * the offset in parameter space [0, 1]. "color" is an array of length 3 describing RGB values in [0, 255].
     * @param {GState=} gState An additional graphics state that gets applied to the pattern (optional).
     * @param {Matrix=} matrix A matrix that describes the transformation between the pattern coordinate system
     * and the use coordinate system (optional).
     * @constructor
     * @extends API.Pattern
     */


    API.ShadingPattern = function (type, coords, colors, gState, matrix) {
      // see putPattern() for information how they are realized
      this.type = type === "axial" ? 2 : 3;
      this.coords = coords;
      this.colors = colors;
      Pattern.call(this, gState, matrix);
    };
    /**
     * A PDF Tiling pattern.
     *
     * Only available in "advanced" API mode.
     *
     * @param {Array.<Number>} boundingBox The bounding box at which one pattern cell gets clipped.
     * @param {Number} xStep Horizontal spacing between pattern cells.
     * @param {Number} yStep Vertical spacing between pattern cells.
     * @param {API.GState=} gState An additional graphics state that gets applied to the pattern (optional).
     * @param {Matrix=} matrix A matrix that describes the transformation between the pattern coordinate system
     * and the use coordinate system (optional).
     * @constructor
     * @extends API.Pattern
     */


    API.TilingPattern = function (boundingBox, xStep, yStep, gState, matrix) {
      this.boundingBox = boundingBox;
      this.xStep = xStep;
      this.yStep = yStep;
      this.stream = ""; // set by endTilingPattern();

      this.cloneIndex = 0;
      Pattern.call(this, gState, matrix);
    };

    API.TilingPattern.prototype = {
      createClone: function createClone(patternKey, boundingBox, xStep, yStep, matrix) {
        var clone = new API.TilingPattern(boundingBox || this.boundingBox, xStep || this.xStep, yStep || this.yStep, this.gState, matrix || this.matrix);
        clone.stream = this.stream;
        var key = patternKey + "$$" + this.cloneIndex++ + "$$";
        addPattern(key, clone);
        return clone;
      }
    };
    /**
     * Adds a new {@link API.ShadingPattern} for later use. Only available in "advanced" API mode.
     * @param {String} key
     * @param {Pattern} pattern
     * @function
     * @returns {jsPDF}
     * @methodOf jsPDF#
     * @name addPattern
     */

    API.addShadingPattern = function (key, pattern) {
      addPattern(key, pattern);
      return this;
    };
    /**
     * Begins a new tiling pattern. All subsequent render calls are drawn to this pattern until {@link API.endTilingPattern}
     * gets called. Only available in "advanced" API mode.
     * @param {API.Pattern} pattern
     * @methodOf jsPDF#
     * @name beginTilingPattern
     */


    API.beginTilingPattern = function (pattern) {
      beginNewRenderTarget(pattern.boundingBox[0], pattern.boundingBox[1], pattern.boundingBox[2] - pattern.boundingBox[0], pattern.boundingBox[3] - pattern.boundingBox[1], pattern.matrix);
    };
    /**
     * Ends a tiling pattern and sets the render target to the one active before {@link API.beginTilingPattern} has been called.
     *
     * Only available in "advanced" API mode.
     *
     * @param {string} key A unique key that is used to reference this pattern at later use.
     * @param {API.Pattern} pattern The pattern to end.
     * @methodOf jsPDF#
     * @name endTilingPattern
     */


    API.endTilingPattern = function (key, pattern) {
      // retrieve the stream
      pattern.stream = pages[currentPage].join("\n");
      addPattern(key, pattern);
      events.publish("endTilingPattern", pattern); // restore state from stack

      renderTargetStack.pop().restore();
    };

    var newObject = API.__private__.newObject = function () {
      var oid = newObjectDeferred();
      newObjectDeferredBegin(oid, true);
      return oid;
    }; // Does not output the object.  The caller must call newObjectDeferredBegin(oid) before outputing any data


    var newObjectDeferred = API.__private__.newObjectDeferred = function () {
      objectNumber++;

      offsets[objectNumber] = function () {
        return contentLength;
      };

      return objectNumber;
    };

    var newObjectDeferredBegin = function newObjectDeferredBegin(oid, doOutput) {
      doOutput = typeof doOutput === 'boolean' ? doOutput : false;
      offsets[oid] = contentLength;

      if (doOutput) {
        out(oid + ' 0 obj');
      }

      return oid;
    }; // Does not output the object until after the pages have been output.
    // Returns an object containing the objectId and content.
    // All pages have been added so the object ID can be estimated to start right after.
    // This does not modify the current objectNumber;  It must be updated after the newObjects are output.


    var newAdditionalObject = API.__private__.newAdditionalObject = function () {
      var objId = newObjectDeferred();
      var obj = {
        objId: objId,
        content: ''
      };
      additionalObjects.push(obj);
      return obj;
    };

    var rootDictionaryObjId = newObjectDeferred();
    var resourceDictionaryObjId = newObjectDeferred(); /////////////////////
    // Private functions
    /////////////////////

    var decodeColorString = API.__private__.decodeColorString = function (color) {
      var colorEncoded = color.split(' ');

      if (colorEncoded.length === 2 && (colorEncoded[1] === 'g' || colorEncoded[1] === 'G')) {
        // convert grayscale value to rgb so that it can be converted to hex for consistency
        var floatVal = parseFloat(colorEncoded[0]);
        colorEncoded = [floatVal, floatVal, floatVal, 'r'];
      } else if (colorEncoded.length === 5 && (colorEncoded[4] === 'k' || colorEncoded[4] === 'K')) {
        // convert CMYK values to rbg so that it can be converted to hex for consistency
        var red = (1.0 - colorEncoded[0]) * (1.0 - colorEncoded[3]);
        var green = (1.0 - colorEncoded[1]) * (1.0 - colorEncoded[3]);
        var blue = (1.0 - colorEncoded[2]) * (1.0 - colorEncoded[3]);
        colorEncoded = [red, green, blue, 'r'];
      }

      var colorAsRGB = '#';

      for (var i = 0; i < 3; i++) {
        colorAsRGB += ('0' + Math.floor(parseFloat(colorEncoded[i]) * 255).toString(16)).slice(-2);
      }

      return colorAsRGB;
    };

    var encodeColorString = API.__private__.encodeColorString = function (options) {
      var color;

      if (typeof options === "string") {
        options = {
          ch1: options
        };
      }

      var ch1 = options.ch1;
      var ch2 = options.ch2;
      var ch3 = options.ch3;
      var ch4 = options.ch4;
      var letterArray = options.pdfColorType === "draw" ? ['G', 'RG', 'K'] : ['g', 'rg', 'k'];

      if (typeof ch1 === "string" && ch1.charAt(0) !== '#') {
        var rgbColor = new RGBColor(ch1);

        if (rgbColor.ok) {
          ch1 = rgbColor.toHex();
        } else if (!/^\d*\.?\d*$/.test(ch1)) {
          throw new Error('Invalid color "' + ch1 + '" passed to jsPDF.encodeColorString.');
        }
      } //convert short rgb to long form


      if (typeof ch1 === "string" && /^#[0-9A-Fa-f]{3}$/.test(ch1)) {
        ch1 = '#' + ch1[1] + ch1[1] + ch1[2] + ch1[2] + ch1[3] + ch1[3];
      }

      if (typeof ch1 === "string" && /^#[0-9A-Fa-f]{6}$/.test(ch1)) {
        var hex = parseInt(ch1.substr(1), 16);
        ch1 = hex >> 16 & 255;
        ch2 = hex >> 8 & 255;
        ch3 = hex & 255;
      }

      if (typeof ch2 === "undefined" || typeof ch4 === "undefined" && ch1 === ch2 && ch2 === ch3) {
        // Gray color space.
        if (typeof ch1 === "string") {
          color = ch1 + " " + letterArray[0];
        } else {
          switch (options.precision) {
            case 2:
              color = f2(ch1 / 255) + " " + letterArray[0];
              break;

            case 3:
            default:
              color = f3(ch1 / 255) + " " + letterArray[0];
          }
        }
      } else if (typeof ch4 === "undefined" || _typeof(ch4) === "object") {
        // assume RGBA
        if (ch4 && !isNaN(ch4.a)) {
          //TODO Implement transparency.
          //WORKAROUND use white for now, if transparent, otherwise handle as rgb
          if (ch4.a === 0) {
            color = ['1.000', '1.000', '1.000', letterArray[1]].join(" ");
            return color;
          }
        } // assume RGB


        if (typeof ch1 === "string") {
          color = [ch1, ch2, ch3, letterArray[1]].join(" ");
        } else {
          switch (options.precision) {
            case 2:
              color = [f2(ch1 / 255), f2(ch2 / 255), f2(ch3 / 255), letterArray[1]].join(" ");
              break;

            default:
            case 3:
              color = [f3(ch1 / 255), f3(ch2 / 255), f3(ch3 / 255), letterArray[1]].join(" ");
          }
        }
      } else {
        // assume CMYK
        if (typeof ch1 === 'string') {
          color = [ch1, ch2, ch3, ch4, letterArray[2]].join(" ");
        } else {
          switch (options.precision) {
            case 2:
              color = [f2(ch1), f2(ch2), f2(ch3), f2(ch4), letterArray[2]].join(" ");
              break;

            case 3:
            default:
              color = [f3(ch1), f3(ch2), f3(ch3), f3(ch4), letterArray[2]].join(" ");
          }
        }
      }

      return color;
    };

    var getFilters = API.__private__.getFilters = function () {
      return filters;
    };

    var putStream = API.__private__.putStream = function (options) {
      options = options || {};
      var data = options.data || '';
      var filters = options.filters || getFilters();
      var alreadyAppliedFilters = options.alreadyAppliedFilters || [];
      var addLength1 = options.addLength1 || false;
      var valueOfLength1 = data.length;
      var processedData = {};

      if (filters === true) {
        filters = ['FlateEncode'];
      }

      var keyValues = options.additionalKeyValues || [];

      if (typeof jsPDF.API.processDataByFilters !== 'undefined') {
        processedData = jsPDF.API.processDataByFilters(data, filters);
      } else {
        processedData = {
          data: data,
          reverseChain: []
        };
      }

      var filterAsString = processedData.reverseChain + (Array.isArray(alreadyAppliedFilters) ? alreadyAppliedFilters.join(' ') : alreadyAppliedFilters.toString());

      if (processedData.data.length !== 0) {
        keyValues.push({
          key: 'Length',
          value: processedData.data.length
        });

        if (addLength1 === true) {
          keyValues.push({
            key: 'Length1',
            value: valueOfLength1
          });
        }
      }

      if (filterAsString.length != 0) {
        if (filterAsString.split('/').length - 1 === 1) {
          keyValues.push({
            key: 'Filter',
            value: filterAsString
          });
        } else {
          keyValues.push({
            key: 'Filter',
            value: '[' + filterAsString + ']'
          });

          for (var j = 0; j < keyValues.length; j += 1) {
            if (keyValues[j].key === 'DecodeParms') {
              var decodeParmsArray = [];

              for (var i = 0; i < processedData.reverseChain.split('/').length - 1; i += 1) {
                decodeParmsArray.push('null');
              }

              decodeParmsArray.push(keyValues[j].value);
              keyValues[j].value = '[' + decodeParmsArray.join(' ') + ']';
            }
          }
        }
      }

      out('<<');

      for (var k = 0; k < keyValues.length; k++) {
        out('/' + keyValues[k].key + ' ' + keyValues[k].value);
      }

      out('>>');

      if (processedData.data.length !== 0) {
        out('stream');
        out(processedData.data);
        out('endstream');
      }
    };

    var putPage = API.__private__.putPage = function (page) {
      var pageNumber = page.number;
      var data = page.data;
      var pageObjectNumber = page.objId;
      var pageContentsObjId = page.contentsObjId;
      newObjectDeferredBegin(pageObjectNumber, true);
      out('<</Type /Page');
      out('/Parent ' + page.rootDictionaryObjId + ' 0 R');
      out('/Resources ' + page.resourceDictionaryObjId + ' 0 R');
      out('/MediaBox [' + parseFloat(f2(page.mediaBox.bottomLeftX)) + ' ' + parseFloat(f2(page.mediaBox.bottomLeftY)) + ' ' + f2(page.mediaBox.topRightX) + ' ' + f2(page.mediaBox.topRightY) + ']');

      if (page.cropBox !== null) {
        out('/CropBox [' + f2(page.cropBox.bottomLeftX) + ' ' + f2(page.cropBox.bottomLeftY) + ' ' + f2(page.cropBox.topRightX) + ' ' + f2(page.cropBox.topRightY) + ']');
      }

      if (page.bleedBox !== null) {
        out('/BleedBox [' + f2(page.bleedBox.bottomLeftX) + ' ' + f2(page.bleedBox.bottomLeftY) + ' ' + f2(page.bleedBox.topRightX) + ' ' + f2(page.bleedBox.topRightY) + ']');
      }

      if (page.trimBox !== null) {
        out('/TrimBox [' + f2(page.trimBox.bottomLeftX) + ' ' + f2(page.trimBox.bottomLeftY) + ' ' + f2(page.trimBox.topRightX) + ' ' + f2(page.trimBox.topRightY) + ']');
      }

      if (page.artBox !== null) {
        out('/ArtBox [' + f2(page.artBox.bottomLeftX) + ' ' + f2(page.artBox.bottomLeftY) + ' ' + f2(page.artBox.topRightX) + ' ' + f2(page.artBox.topRightY) + ']');
      }

      if (typeof page.userUnit === "number" && page.userUnit !== 1.0) {
        out('/UserUnit ' + page.userUnit);
      }

      events.publish('putPage', {
        objId: pageObjectNumber,
        pageContext: pagesContext[pageNumber],
        pageNumber: pageNumber,
        page: data
      });
      out('/Contents ' + pageContentsObjId + ' 0 R');
      out('>>');
      out('endobj'); // Page content

      var pageContent = data.join('\n');
      newObjectDeferredBegin(pageContentsObjId, true);
      putStream({
        data: pageContent,
        filters: getFilters()
      });
      out('endobj');
      return pageObjectNumber;
    };

    var putPages = API.__private__.putPages = function () {
      var n,
          i,
          pageObjectNumbers = [];

      for (n = 1; n <= page; n++) {
        pagesContext[n].objId = newObjectDeferred();
        pagesContext[n].contentsObjId = newObjectDeferred();
      }

      for (n = 1; n <= page; n++) {
        pageObjectNumbers.push(putPage({
          number: n,
          data: pages[n],
          objId: pagesContext[n].objId,
          contentsObjId: pagesContext[n].contentsObjId,
          mediaBox: pagesContext[n].mediaBox,
          cropBox: pagesContext[n].cropBox,
          bleedBox: pagesContext[n].bleedBox,
          trimBox: pagesContext[n].trimBox,
          artBox: pagesContext[n].artBox,
          userUnit: pagesContext[n].userUnit,
          rootDictionaryObjId: rootDictionaryObjId,
          resourceDictionaryObjId: resourceDictionaryObjId
        }));
      }

      newObjectDeferredBegin(rootDictionaryObjId, true);
      out('<</Type /Pages');
      var kids = '/Kids [';

      for (i = 0; i < page; i++) {
        kids += pageObjectNumbers[i] + ' 0 R ';
      }

      out(kids + ']');
      out('/Count ' + page);
      out('>>');
      out('endobj');
      events.publish('postPutPages');
    };

    var putFont = function putFont(font) {
      var pdfEscapeWithNeededParanthesis = function pdfEscapeWithNeededParanthesis(text, flags) {
        var addParanthesis = text.indexOf(' ') !== -1;
        return addParanthesis ? '(' + pdfEscape(text, flags) + ')' : pdfEscape(text, flags);
      };

      events.publish('putFont', {
        font: font,
        out: out,
        newObject: newObject,
        putStream: putStream,
        pdfEscapeWithNeededParanthesis: pdfEscapeWithNeededParanthesis
      });

      if (font.isAlreadyPutted !== true) {
        font.objectNumber = newObject();
        out('<<');
        out('/Type /Font');
        out('/BaseFont /' + pdfEscapeWithNeededParanthesis(font.postScriptName));
        out('/Subtype /Type1');

        if (typeof font.encoding === 'string') {
          out('/Encoding /' + font.encoding);
        }

        out('/FirstChar 32');
        out('/LastChar 255');
        out('>>');
        out('endobj');
      }
    };

    var putFonts = function putFonts() {
      for (var fontKey in fonts) {
        if (fonts.hasOwnProperty(fontKey)) {
          if (putOnlyUsedFonts === false || putOnlyUsedFonts === true && usedFonts.hasOwnProperty(fontKey)) {
            putFont(fonts[fontKey]);
          }
        }
      }
    };

    var putXObject = function putXObject(xObject) {
      xObject.objectNumber = newObject();
      var options = [];
      options.push({
        key: 'Type',
        value: '/XObject'
      });
      options.push({
        key: 'Subtype',
        value: '/Form'
      });
      options.push({
        key: 'BBox',
        value: "[" + [hpf(xObject.x), hpf(xObject.y), hpf(xObject.x + xObject.width), hpf(xObject.y + xObject.height)].join(" ") + "]"
      });
      options.push({
        key: 'Matrix',
        value: "[" + xObject.matrix.toString() + "]"
      });
      var stream = xObject.pages[1].join("\n");
      putStream({
        data: stream,
        additionalKeyValues: options
      });
      out("endobj");
    };

    var putXObjects = function putXObjects() {
      for (var xObjectKey in renderTargets) {
        if (renderTargets.hasOwnProperty(xObjectKey)) {
          putXObject(renderTargets[xObjectKey]);
        }
      }
    };

    var interpolateAndEncodeRGBStream = function interpolateAndEncodeRGBStream(colors, numberSamples) {
      var tValues = [];
      var t;
      var dT = 1.0 / (numberSamples - 1);

      for (t = 0.0; t < 1.0; t += dT) {
        tValues.push(t);
      }

      tValues.push(1.0); // add first and last control point if not present

      if (colors[0].offset != 0.0) {
        var c0 = {
          offset: 0.0,
          color: colors[0].color
        };
        colors.unshift(c0);
      }

      if (colors[colors.length - 1].offset != 1.0) {
        var c1 = {
          offset: 1.0,
          color: colors[colors.length - 1].color
        };
        colors.push(c1);
      }

      var out = "";
      var index = 0;

      for (var i = 0; i < tValues.length; i++) {
        t = tValues[i];

        while (t > colors[index + 1].offset) {
          index++;
        }

        var a = colors[index].offset;
        var b = colors[index + 1].offset;
        var d = (t - a) / (b - a);
        var aColor = colors[index].color;
        var bColor = colors[index + 1].color;
        out += padd2Hex(Math.round((1 - d) * aColor[0] + d * bColor[0]).toString(16)) + padd2Hex(Math.round((1 - d) * aColor[1] + d * bColor[1]).toString(16)) + padd2Hex(Math.round((1 - d) * aColor[2] + d * bColor[2]).toString(16));
      }

      return out.trim();
    };

    var putShadingPattern = function putShadingPattern(pattern, numberSamples) {
      /*
       Axial patterns shade between the two points specified in coords, radial patterns between the inner
       and outer circle.
       The user can specify an array (colors) that maps t-Values in [0, 1] to RGB colors. These are now
       interpolated to equidistant samples and written to pdf as a sample (type 0) function.
       */
      // The number of color samples that should be used to describe the shading.
      // The higher, the more accurate the gradient will be.
      numberSamples || (numberSamples = 21);
      var funcObjectNumber = newObject();
      var stream = interpolateAndEncodeRGBStream(pattern.colors, numberSamples);
      var options = [];
      options.push({
        key: 'FunctionType',
        value: '0'
      });
      options.push({
        key: 'Domain',
        value: '[0.0 1.0]'
      });
      options.push({
        key: 'Size',
        value: "[" + numberSamples + "]"
      });
      options.push({
        key: 'BitsPerSample',
        value: '8'
      });
      options.push({
        key: 'Range',
        value: '[0.0 1.0 0.0 1.0 0.0 1.0]'
      });
      options.push({
        key: 'Decode',
        value: '[0.0 1.0 0.0 1.0 0.0 1.0]'
      });
      putStream({
        data: stream,
        additionalKeyValues: options,
        alreadyAppliedFilters: ['/ASCIIHexDecode']
      });
      out("endobj");
      pattern.objectNumber = newObject();
      out("<< /ShadingType " + pattern.type);
      out("/ColorSpace /DeviceRGB");
      var coords = "/Coords [" + hpf(parseFloat(pattern.coords[0])) + " " + // x1
      hpf(parseFloat(pattern.coords[1])) + " "; // y1

      if (pattern.type === 2) {
        // axial
        coords += hpf(parseFloat(pattern.coords[2])) + " " + // x2
        hpf(parseFloat(pattern.coords[3])); // y2
      } else {
        // radial
        coords += hpf(parseFloat(pattern.coords[2])) + " " + // r1
        hpf(parseFloat(pattern.coords[3])) + " " + // x2
        hpf(parseFloat(pattern.coords[4])) + " " + // y2
        hpf(parseFloat(pattern.coords[5])); // r2
      }

      coords += "]";
      out(coords);

      if (pattern.matrix) {
        out("/Matrix [" + pattern.matrix.toString() + "]");
      }

      out("/Function " + funcObjectNumber + " 0 R");
      out("/Extend [true true]");
      out(">>");
      out("endobj");
    };

    var putTilingPattern = function putTilingPattern(pattern) {
      var resourcesObjectNumber = newObject();
      putResourceDictionary();
      out("endobj");
      pattern.objectNumber = newObject();
      var options = [];
      options.push({
        key: 'Type',
        value: '/Pattern'
      });
      options.push({
        key: 'PatternType',
        value: '1'
      }); // tiling pattern

      options.push({
        key: 'PaintType',
        value: '1'
      }); // colored tiling pattern

      options.push({
        key: 'TilingType',
        value: '1'
      }); // constant spacing

      options.push({
        key: 'BBox',
        value: "[" + pattern.boundingBox.map(hpf).join(" ") + "]"
      });
      options.push({
        key: 'XStep',
        value: hpf(pattern.xStep)
      });
      options.push({
        key: 'YStep',
        value: hpf(pattern.yStep)
      });
      options.push({
        key: 'Resources',
        value: resourcesObjectNumber + " 0 R"
      });

      if (pattern.matrix) {
        options.push({
          key: 'Matrix',
          value: "[" + pattern.matrix.toString() + "]"
        });
      }

      putStream({
        data: pattern.stream,
        additionalKeyValues: options
      });
      out("endobj");
    };

    var putPatterns = function putPatterns() {
      var patternKey;

      for (patternKey in patterns) {
        if (patterns.hasOwnProperty(patternKey)) {
          if (patterns[patternKey] instanceof API.ShadingPattern) {
            putShadingPattern(patterns[patternKey]);
          } else if (patterns[patternKey] instanceof API.TilingPattern) {
            putTilingPattern(patterns[patternKey]);
          }
        }
      }
    };

    var putGState = function putGState(gState) {
      gState.objectNumber = newObject();
      out("<<");

      for (var p in gState) {
        switch (p) {
          case "opacity":
            out("/ca " + f2(gState[p]));
            break;

          case "stroke-opacity":
            out("/CA " + f2(gState[p]));
            break;
        }
      }

      out(">>");
      out("endobj");
    };

    var putGStates = function putGStates() {
      var gStateKey;

      for (gStateKey in gStates) {
        if (gStates.hasOwnProperty(gStateKey)) {
          putGState(gStates[gStateKey]);
        }
      }
    };

    var putXobjectDict = function putXobjectDict() {
      out("/XObject <<");

      for (var xObjectKey in renderTargets) {
        if (renderTargets.hasOwnProperty(xObjectKey) && renderTargets[xObjectKey].objectNumber >= 0) {
          out("/" + xObjectKey + " " + renderTargets[xObjectKey].objectNumber + " 0 R");
        }
      } // Loop through images, or other data objects


      events.publish("putXobjectDict");
      out(">>");
    };

    var putFontDict = function putFontDict() {
      out('/Font <<');

      for (var fontKey in fonts) {
        if (fonts.hasOwnProperty(fontKey)) {
          if (putOnlyUsedFonts === false || putOnlyUsedFonts === true && usedFonts.hasOwnProperty(fontKey)) {
            out('/' + fontKey + ' ' + fonts[fontKey].objectNumber + ' 0 R');
          }
        }
      }

      out('>>');
    };

    var putShadingPatternDict = function putShadingPatternDict() {
      if (Object.keys(patterns).length > 0) {
        out("/Shading <<");

        for (var patternKey in patterns) {
          if (patterns.hasOwnProperty(patternKey) && patterns[patternKey] instanceof API.ShadingPattern && patterns[patternKey].objectNumber >= 0) {
            out("/" + patternKey + " " + patterns[patternKey].objectNumber + " 0 R");
          }
        }

        events.publish("putShadingPatternDict");
        out(">>");
      }
    };

    var putTilingPatternDict = function putTilingPatternDict() {
      if (Object.keys(patterns).length > 0) {
        out("/Pattern <<");

        for (var patternKey in patterns) {
          if (patterns.hasOwnProperty(patternKey) && patterns[patternKey] instanceof API.TilingPattern && patterns[patternKey].objectNumber >= 0) {
            out("/" + patternKey + " " + patterns[patternKey].objectNumber + " 0 R");
          }
        }

        events.publish("putTilingPatternDict");
        out(">>");
      }
    };

    var putGStatesDict = function putGStatesDict() {
      if (Object.keys(gStates).length > 0) {
        var gStateKey;
        out("/ExtGState <<");

        for (gStateKey in gStates) {
          if (gStates.hasOwnProperty(gStateKey) && gStates[gStateKey].objectNumber >= 0) {
            out("/" + gStateKey + " " + gStates[gStateKey].objectNumber + " 0 R");
          }
        }

        events.publish("putGStateDict");
        out(">>");
      }
    };

    var putResourceDictionary = function putResourceDictionary() {
      newObjectDeferredBegin(resourceDictionaryObjId, true);
      out('<<');
      out('/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]');
      putFontDict();
      putShadingPatternDict();
      putTilingPatternDict();
      putGStatesDict();
      putXobjectDict();
      out('>>');
      out('endobj');
    };

    var putResources = function putResources() {
      putFonts();
      putGStates();
      putXObjects();
      putPatterns();
      events.publish('putResources');
      putResourceDictionary();
      events.publish('postPutResources');
    };

    var putAdditionalObjects = function putAdditionalObjects() {
      events.publish('putAdditionalObjects');

      for (var i = 0; i < additionalObjects.length; i++) {
        var obj = additionalObjects[i];
        newObjectDeferredBegin(obj.objId, true);
        out(obj.content);
        out('endobj');
      }

      events.publish('postPutAdditionalObjects');
    };

    var addFontToFontDictionary = function addFontToFontDictionary(font) {
      fontmap[font.fontName] = fontmap[font.fontName] || {};
      fontmap[font.fontName][font.fontStyle] = font.id;
    };

    var addFont = function addFont(postScriptName, fontName, fontStyle, encoding, isStandardFont) {
      var font = {
        'id': 'F' + (Object.keys(fonts).length + 1).toString(10),
        'postScriptName': postScriptName,
        'fontName': fontName,
        'fontStyle': fontStyle,
        'encoding': encoding,
        'isStandardFont': isStandardFont || false,
        'metadata': {}
      };
      var instance = this;
      events.publish('addFont', {
        font: font,
        instance: instance
      });
      fonts[font.id] = font;
      addFontToFontDictionary(font);
      return font.id;
    };

    var addFonts = function addFonts(arrayOfFonts) {
      for (var i = 0, l = standardFonts.length; i < l; i++) {
        var fontKey = addFont(arrayOfFonts[i][0], arrayOfFonts[i][1], arrayOfFonts[i][2], standardFonts[i][3], true);

        if (putOnlyUsedFonts === false) {
          usedFonts[fontKey] = true;
        } // adding aliases for standard fonts, this time matching the capitalization


        var parts = arrayOfFonts[i][0].split('-');
        addFontToFontDictionary({
          id: fontKey,
          fontName: parts[0],
          fontStyle: parts[1] || ''
        });
      }

      events.publish('addFonts', {
        fonts: fonts,
        dictionary: fontmap
      });
    };

    var SAFE = function __safeCall(fn) {
      fn.foo = function __safeCallWrapper() {
        try {
          return fn.apply(this, arguments);
        } catch (e) {
          var stack = e.stack || '';
          if (~stack.indexOf(' at ')) { stack = stack.split(" at ")[1]; }
          var m = "Error in function " + stack.split("\n")[0].split('<')[0] + ": " + e.message;

          if (global.console) {
            global.console.error(m, e);
            if (global.alert) { alert(m); }
          } else {
            throw new Error(m);
          }
        }
      };

      fn.foo.bar = fn;
      return fn.foo;
    };

    var to8bitStream = function to8bitStream(text, flags) {
      /**
       * PDF 1.3 spec:
       * "For text strings encoded in Unicode, the first two bytes must be 254 followed by
       * 255, representing the Unicode byte order marker, U+FEFF. (This sequence conflicts
       * with the PDFDocEncoding character sequence thorn ydieresis, which is unlikely
       * to be a meaningful beginning of a word or phrase.) The remainder of the
       * string consists of Unicode character codes, according to the UTF-16 encoding
       * specified in the Unicode standard, version 2.0. Commonly used Unicode values
       * are represented as 2 bytes per character, with the high-order byte appearing first
       * in the string."
       *
       * In other words, if there are chars in a string with char code above 255, we
       * recode the string to UCS2 BE - string doubles in length and BOM is prepended.
       *
       * HOWEVER!
       * Actual *content* (body) text (as opposed to strings used in document properties etc)
       * does NOT expect BOM. There, it is treated as a literal GID (Glyph ID)
       *
       * Because of Adobe's focus on "you subset your fonts!" you are not supposed to have
       * a font that maps directly Unicode (UCS2 / UTF16BE) code to font GID, but you could
       * fudge it with "Identity-H" encoding and custom CIDtoGID map that mimics Unicode
       * code page. There, however, all characters in the stream are treated as GIDs,
       * including BOM, which is the reason we need to skip BOM in content text (i.e. that
       * that is tied to a font).
       *
       * To signal this "special" PDFEscape / to8bitStream handling mode,
       * API.text() function sets (unless you overwrite it with manual values
       * given to API.text(.., flags) )
       * flags.autoencode = true
       * flags.noBOM = true
       *
       * ===================================================================================
       * `flags` properties relied upon:
       *   .sourceEncoding = string with encoding label.
       *                     "Unicode" by default. = encoding of the incoming text.
       *                     pass some non-existing encoding name
       *                     (ex: 'Do not touch my strings! I know what I am doing.')
       *                     to make encoding code skip the encoding step.
       *   .outputEncoding = Either valid PDF encoding name
       *                     (must be supported by jsPDF font metrics, otherwise no encoding)
       *                     or a JS object, where key = sourceCharCode, value = outputCharCode
       *                     missing keys will be treated as: sourceCharCode === outputCharCode
       *   .noBOM
       *       See comment higher above for explanation for why this is important
       *   .autoencode
       *       See comment higher above for explanation for why this is important
       */
      var i, l, sourceEncoding, encodingBlock, outputEncoding, newtext, isUnicode, ch, bch;
      flags = flags || {};
      sourceEncoding = flags.sourceEncoding || 'Unicode';
      outputEncoding = flags.outputEncoding; // This 'encoding' section relies on font metrics format
      // attached to font objects by, among others,
      // "Willow Systems' standard_font_metrics plugin"
      // see jspdf.plugin.standard_font_metrics.js for format
      // of the font.metadata.encoding Object.
      // It should be something like
      //   .encoding = {'codePages':['WinANSI....'], 'WinANSI...':{code:code, ...}}
      //   .widths = {0:width, code:width, ..., 'fof':divisor}
      //   .kerning = {code:{previous_char_code:shift, ..., 'fof':-divisor},...}

      if ((flags.autoencode || outputEncoding) && fonts[activeFontKey].metadata && fonts[activeFontKey].metadata[sourceEncoding] && fonts[activeFontKey].metadata[sourceEncoding].encoding) {
        encodingBlock = fonts[activeFontKey].metadata[sourceEncoding].encoding; // each font has default encoding. Some have it clearly defined.

        if (!outputEncoding && fonts[activeFontKey].encoding) {
          outputEncoding = fonts[activeFontKey].encoding;
        } // Hmmm, the above did not work? Let's try again, in different place.


        if (!outputEncoding && encodingBlock.codePages) {
          outputEncoding = encodingBlock.codePages[0]; // let's say, first one is the default
        }

        if (typeof outputEncoding === 'string') {
          outputEncoding = encodingBlock[outputEncoding];
        } // we want output encoding to be a JS Object, where
        // key = sourceEncoding's character code and
        // value = outputEncoding's character code.


        if (outputEncoding) {
          isUnicode = false;
          newtext = [];

          for (i = 0, l = text.length; i < l; i++) {
            ch = outputEncoding[text.charCodeAt(i)];

            if (ch) {
              newtext.push(String.fromCharCode(ch));
            } else {
              newtext.push(text[i]);
            } // since we are looping over chars anyway, might as well
            // check for residual unicodeness


            if (newtext[i].charCodeAt(0) >> 8) {
              /* more than 255 */
              isUnicode = true;
            }
          }

          text = newtext.join('');
        }
      }

      i = text.length; // isUnicode may be set to false above. Hence the triple-equal to undefined

      while (isUnicode === undefined && i !== 0) {
        if (text.charCodeAt(i - 1) >> 8) {
          /* more than 255 */
          isUnicode = true;
        }

        i--;
      }

      if (!isUnicode) {
        return text;
      }

      newtext = flags.noBOM ? [] : [254, 255];

      for (i = 0, l = text.length; i < l; i++) {
        ch = text.charCodeAt(i);
        bch = ch >> 8; // divide by 256

        if (bch >> 8) {
          /* something left after dividing by 256 second time */
          throw new Error("Character at position " + i + " of string '" + text + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
        }

        newtext.push(bch);
        newtext.push(ch - (bch << 8));
      }

      return String.fromCharCode.apply(undefined, newtext);
    };

    var pdfEscape = API.__private__.pdfEscape = API.pdfEscape = function (text, flags) {
      /**
       * Replace '/', '(', and ')' with pdf-safe versions
       *
       * Doing to8bitStream does NOT make this PDF display unicode text. For that
       * we also need to reference a unicode font and embed it - royal pain in the rear.
       *
       * There is still a benefit to to8bitStream - PDF simply cannot handle 16bit chars,
       * which JavaScript Strings are happy to provide. So, while we still cannot display
       * 2-byte characters property, at least CONDITIONALLY converting (entire string containing)
       * 16bit chars to (USC-2-BE) 2-bytes per char + BOM streams we ensure that entire PDF
       * is still parseable.
       * This will allow immediate support for unicode in document properties strings.
       */
      return to8bitStream(text, flags).replace(/\\/g, '\\\\').replace(/\(/g, '\\(').replace(/\)/g, '\\)');
    };

    var beginPage = API.__private__.beginPage = function (parmFormat, parmOrientation) {
      var dimensions, width, height;
      orientation = parmOrientation || orientation;

      if (typeof parmFormat === 'string') {
        dimensions = getPageFormat(parmFormat.toLowerCase());

        if (Array.isArray(dimensions)) {
          width = dimensions[0];
          height = dimensions[1];
        }
      }

      if (Array.isArray(parmFormat)) {
        width = parmFormat[0] * scaleFactor;
        height = parmFormat[1] * scaleFactor;
      }

      if (isNaN(width)) {
        width = format[0];
        height = format[1];
      }

      if (width > 14400 || height > 14400) {
        console.warn('A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400');
        width = Math.min(14400, width);
        height = Math.min(14400, height);
      }

      format = [width, height];

      switch (orientation.substr(0, 1)) {
        case 'l':
          if (height > width) {
            format = [height, width];
          }

          break;

        case 'p':
          if (width > height) {
            format = [height, width];
          }

          break;
      }

      pages[++page] = [];
      pagesContext[page] = {
        objId: 0,
        contentsObjId: 0,
        userUnit: Number(userUnit),
        artBox: null,
        bleedBox: null,
        cropBox: null,
        trimBox: null,
        mediaBox: {
          bottomLeftX: 0,
          bottomLeftY: 0,
          topRightX: Number(format[0]),
          topRightY: Number(format[1])
        }
      };

      _setPage(page);

      setOutputDestination(pages[currentPage]);
    };

    var _addPage = function _addPage() {
      beginPage.apply(this, arguments); // Set line width

      setLineWidth(lineWidth); // Set draw color

      out(strokeColor); // resurrecting non-default line caps, joins

      if (lineCapID !== 0) {
        out(lineCapID + ' J');
      }

      if (lineJoinID !== 0) {
        out(lineJoinID + ' j');
      }

      events.publish('addPage', {
        pageNumber: page
      });
    };

    var _deletePage = function _deletePage(n) {
      if (n > 0 && n <= page) {
        pages.splice(n, 1);
        pagesContext.splice(n, 1);
        page--;

        if (currentPage > page) {
          currentPage = page;
        }

        this.setPage(currentPage);
      }
    };

    var _setPage = function _setPage(n) {
      if (n > 0 && n <= page) {
        currentPage = n;
      }
    };

    var getNumberOfPages = API.__private__.getNumberOfPages = API.getNumberOfPages = function () {
      return pages.length - 1;
    };
    /**
     * Returns a document-specific font key - a label assigned to a
     * font name + font type combination at the time the font was added
     * to the font inventory.
     *
     * Font key is used as label for the desired font for a block of text
     * to be added to the PDF document stream.
     * @private
     * @function
     * @param fontName {string} can be undefined on "falthy" to indicate "use current"
     * @param fontStyle {string} can be undefined on "falthy" to indicate "use current"
     * @returns {string} Font key.
     * @ignore
     */


    var getFont = function getFont(fontName, fontStyle, options) {
      var key = undefined,
          fontNameLowerCase;
      options = options || {};
      fontName = fontName !== undefined ? fontName : fonts[activeFontKey].fontName;
      fontStyle = fontStyle !== undefined ? fontStyle : fonts[activeFontKey].fontStyle;
      fontNameLowerCase = fontName.toLowerCase();

      if (fontmap[fontNameLowerCase] !== undefined && fontmap[fontNameLowerCase][fontStyle] !== undefined) {
        key = fontmap[fontNameLowerCase][fontStyle];
      } else if (fontmap[fontName] !== undefined && fontmap[fontName][fontStyle] !== undefined) {
        key = fontmap[fontName][fontStyle];
      } else {
        if (options.disableWarning === false) {
          console.warn("Unable to look up font label for font '" + fontName + "', '" + fontStyle + "'. Refer to getFontList() for available fonts.");
        }
      }

      if (!key && !options.noFallback) {
        key = fontmap['times'][fontStyle];

        if (key == null) {
          key = fontmap['times']['normal'];
        }
      }

      return key;
    };

    var putInfo = API.__private__.putInfo = function () {
      newObject();
      out('<<');
      out('/Producer (jsPDF ' + jsPDF.version + ')');

      for (var key in documentProperties) {
        if (documentProperties.hasOwnProperty(key) && documentProperties[key]) {
          out('/' + key.substr(0, 1).toUpperCase() + key.substr(1) + ' (' + pdfEscape(documentProperties[key]) + ')');
        }
      }

      out('/CreationDate (' + creationDate + ')');
      out('>>');
      out('endobj');
    };

    var putCatalog = API.__private__.putCatalog = function (options) {
      options = options || {};
      var tmpRootDictionaryObjId = options.rootDictionaryObjId || rootDictionaryObjId;
      newObject();
      out('<<');
      out('/Type /Catalog');
      out('/Pages ' + tmpRootDictionaryObjId + ' 0 R'); // PDF13ref Section 7.2.1

      if (!zoomMode) { zoomMode = 'fullwidth'; }

      switch (zoomMode) {
        case 'fullwidth':
          out('/OpenAction [3 0 R /FitH null]');
          break;

        case 'fullheight':
          out('/OpenAction [3 0 R /FitV null]');
          break;

        case 'fullpage':
          out('/OpenAction [3 0 R /Fit]');
          break;

        case 'original':
          out('/OpenAction [3 0 R /XYZ null null 1]');
          break;

        default:
          var pcn = '' + zoomMode;
          if (pcn.substr(pcn.length - 1) === '%') { zoomMode = parseInt(zoomMode) / 100; }

          if (typeof zoomMode === 'number') {
            out('/OpenAction [3 0 R /XYZ null null ' + f2(zoomMode) + ']');
          }

      }

      if (!layoutMode) { layoutMode = 'continuous'; }

      switch (layoutMode) {
        case 'continuous':
          out('/PageLayout /OneColumn');
          break;

        case 'single':
          out('/PageLayout /SinglePage');
          break;

        case 'two':
        case 'twoleft':
          out('/PageLayout /TwoColumnLeft');
          break;

        case 'tworight':
          out('/PageLayout /TwoColumnRight');
          break;
      }

      if (pageMode) {
        /**
         * A name object specifying how the document should be displayed when opened:
         * UseNone      : Neither document outline nor thumbnail images visible -- DEFAULT
         * UseOutlines  : Document outline visible
         * UseThumbs    : Thumbnail images visible
         * FullScreen   : Full-screen mode, with no menu bar, window controls, or any other window visible
         */
        out('/PageMode /' + pageMode);
      }

      events.publish('putCatalog');
      out('>>');
      out('endobj');
    };

    var putTrailer = API.__private__.putTrailer = function () {
      out('trailer');
      out('<<');
      out('/Size ' + (objectNumber + 1));
      out('/Root ' + objectNumber + ' 0 R');
      out('/Info ' + (objectNumber - 1) + ' 0 R');
      out("/ID [ <" + fileId + "> <" + fileId + "> ]");
      out('>>');
    };

    var putHeader = API.__private__.putHeader = function () {
      out('%PDF-' + pdfVersion);
      out("%\xBA\xDF\xAC\xE0");
    };

    var putXRef = API.__private__.putXRef = function () {
      var p = '0000000000';
      out('xref');
      out('0 ' + (objectNumber + 1));
      out('0000000000 65535 f');

      for (var i = 1; i <= objectNumber; i++) {
        var offset = offsets[i];

        if (typeof offset === 'function') {
          out((p + offsets[i]()).slice(-10) + ' 00000 n');
        } else {
          if (typeof offsets[i] !== "undefined") {
            out((p + offsets[i]).slice(-10) + ' 00000 n');
          } else {
            out('0000000000 00000 n');
          }
        }
      }
    };

    var buildDocument = API.__private__.buildDocument = function () {
      resetDocument();
      setOutputDestination(content);
      events.publish('buildDocument');
      putHeader();
      putPages();
      putAdditionalObjects();
      putResources();
      putInfo();
      putCatalog();
      var offsetOfXRef = contentLength;
      putXRef();
      putTrailer();
      out('startxref');
      out('' + offsetOfXRef);
      out('%%EOF');
      setOutputDestination(pages[currentPage]);
      return content.join('\n');
    };

    var getBlob = API.__private__.getBlob = function (data) {
      return new Blob([getArrayBuffer(data)], {
        type: "application/pdf"
      });
    };
    /**
     * Generates the PDF document.
     *
     * If `type` argument is undefined, output is raw body of resulting PDF returned as a string.
     *
     * @param {string} type A string identifying one of the possible output types. Possible values are 'arraybuffer', 'blob', 'bloburi'/'bloburl', 'datauristring'/'dataurlstring', 'datauri'/'dataurl', 'dataurlnewwindow', 'pdfobjectnewwindow', 'pdfjsnewwindow'.
     * @param {Object} options An object providing some additional signalling to PDF generator. Possible options are 'filename'.
     *
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name output
     */


    var output = API.output = API.__private__.output = SAFE(function output(type, options) {
      options = options || {};

      if (typeof options === "string") {
        options = {
          filename: options
        };
      } else {
        options.filename = options.filename || 'generated.pdf';
      }

      switch (type) {
        case undefined:
          return buildDocument();

        case 'save':
          API.save(options.filename);
          break;

        case 'arraybuffer':
          return getArrayBuffer(buildDocument());

        case 'blob':
          return getBlob(buildDocument());

        case 'bloburi':
        case 'bloburl':
          // Developer is responsible of calling revokeObjectURL
          if (typeof global.URL !== "undefined" && typeof global.URL.createObjectURL === "function") {
            return global.URL && global.URL.createObjectURL(getBlob(buildDocument())) || void 0;
          } else {
            console.warn('bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.');
          }

          break;

        case 'datauristring':
        case 'dataurlstring':
          var dataURI = '';
          var pdfDocument = buildDocument();

          try {
            dataURI = btoa(pdfDocument);
          } catch (e) {
            dataURI = btoa(unescape(encodeURIComponent(pdfDocument)));
          }

          return 'data:application/pdf;filename=' + options.filename + ';base64,' + dataURI;

        case 'pdfobjectnewwindow':
          if (Object.prototype.toString.call(global) === '[object Window]') {
            var pdfObjectUrl = options.pdfObjectUrl || 'https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js';
            var htmlForNewWindow = '<html>' + '<style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + pdfObjectUrl + '"></script><script >PDFObject.embed("' + this.output('dataurlstring') + '", ' + JSON.stringify(options) + ');</script></body></html>';
            var nW = global.open();

            if (nW !== null) {
              nW.document.write(htmlForNewWindow);
            }

            return nW;
          } else {
            throw new Error('The option pdfobjectnewwindow just works in a browser-environment.');
          }

        case 'pdfjsnewwindow':
          if (Object.prototype.toString.call(global) === '[object Window]') {
            var pdfJsUrl = options.pdfJsUrl || 'examples/PDF.js/web/viewer.html';
            var htmlForPDFjsNewWindow = '<html>' + '<style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style>' + '<body><iframe id="pdfViewer" src="' + pdfJsUrl + '?file=" width="500px" height="400px" />' + '</body></html>';
            var PDFjsNewWindow = global.open();

            if (PDFjsNewWindow !== null) {
              PDFjsNewWindow.document.write(htmlForPDFjsNewWindow);
              var scope = this;

              PDFjsNewWindow.document.documentElement.querySelector('#pdfViewer').onload = function () {
                PDFjsNewWindow.document.documentElement.querySelector('#pdfViewer').contentWindow.PDFViewerApplication.open(scope.output('bloburl'));
              };
            }

            return PDFjsNewWindow;
          } else {
            throw new Error('The option pdfjsnewwindow just works in a browser-environment.');
          }

        case 'dataurlnewwindow':
          if (Object.prototype.toString.call(global) === '[object Window]') {
            var htmlForDataURLNewWindow = '<html>' + '<style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style>' + '<body>' + '<iframe src="' + this.output('datauristring', options) + '"></iframe>' + '</body></html>';
            var dataURLNewWindow = global.open();

            if (dataURLNewWindow !== null) {
              dataURLNewWindow.document.write(htmlForDataURLNewWindow);
            }

            if (dataURLNewWindow || typeof safari === "undefined") { return dataURLNewWindow; }
          } else {
            throw new Error('The option dataurlnewwindow just works in a browser-environment.');
          }

          break;

        case 'datauri':
        case 'dataurl':
          return global.document.location.href = this.output('datauristring', options);

        default:
          return null;
      }
    });
    /**
     * Used to see if a supplied hotfix was requested when the pdf instance was created.
     * @param {string} hotfixName - The name of the hotfix to check.
     * @returns {boolean}
     */

    var hasHotfix = function hasHotfix(hotfixName) {
      return Array.isArray(hotfixes) === true && hotfixes.indexOf(hotfixName) > -1;
    };

    switch (unit) {
      case 'pt':
        scaleFactor = 1;
        break;

      case 'mm':
        scaleFactor = 72 / 25.4;
        break;

      case 'cm':
        scaleFactor = 72 / 2.54;
        break;

      case 'in':
        scaleFactor = 72;
        break;

      case 'px':
        if (hasHotfix('px_scaling') == true) {
          scaleFactor = 72 / 96;
        } else {
          scaleFactor = 96 / 72;
        }

        break;

      case 'pc':
        scaleFactor = 12;
        break;

      case 'em':
        scaleFactor = 12;
        break;

      case 'ex':
        scaleFactor = 6;
        break;

      default:
        throw new Error('Invalid unit: ' + unit);
    }

    setCreationDate();
    setFileId(); //---------------------------------------
    // Public API

    var getPageInfo = API.__private__.getPageInfo = API.getPageInfo = function (pageNumberOneBased) {
      if (isNaN(pageNumberOneBased) || pageNumberOneBased % 1 !== 0) {
        throw new Error('Invalid argument passed to jsPDF.getPageInfo');
      }

      var objId = pagesContext[pageNumberOneBased].objId;
      return {
        objId: objId,
        pageNumber: pageNumberOneBased,
        pageContext: pagesContext[pageNumberOneBased]
      };
    };

    var getPageInfoByObjId = API.__private__.getPageInfoByObjId = function (objId) {
      if (isNaN(objId) || objId % 1 !== 0) {
        throw new Error('Invalid argument passed to jsPDF.getPageInfoByObjId');
      }

      for (var pageNumber in pagesContext) {
        if (pagesContext[pageNumber].objId === objId) {
          break;
        }
      }

      return getPageInfo(pageNumber);
    };

    var getCurrentPageInfo = API.__private__.getCurrentPageInfo = API.getCurrentPageInfo = function () {
      return {
        objId: pagesContext[currentPage].objId,
        pageNumber: currentPage,
        pageContext: pagesContext[currentPage]
      };
    };
    /**
     * Adds (and transfers the focus to) new page to the PDF document.
     * @param format {String/Array} The format of the new page. Can be: <ul><li>a0 - a10</li><li>b0 - b10</li><li>c0 - c10</li><li>dl</li><li>letter</li><li>government-letter</li><li>legal</li><li>junior-legal</li><li>ledger</li><li>tabloid</li><li>credit-card</li></ul><br />
     * Default is "a4". If you want to use your own format just pass instead of one of the above predefined formats the size as an number-array, e.g. [595.28, 841.89]
     * @param orientation {string} Orientation of the new page. Possible values are "portrait" or "landscape" (or shortcuts "p" (Default), "l").
     * @function
     * @instance
     * @returns {jsPDF}
     *
     * @memberof jsPDF#
     * @name addPage
     */


    API.addPage = function () {
      _addPage.apply(this, arguments);

      return this;
    };
    /**
     * Adds (and transfers the focus to) new page to the PDF document.
     * @function
     * @instance
     * @returns {jsPDF}
     *
     * @memberof jsPDF#
     * @name setPage
     * @param {number} page Switch the active page to the page number specified.
     * @example
     * doc = jsPDF()
     * doc.addPage()
     * doc.addPage()
     * doc.text('I am on page 3', 10, 10)
     * doc.setPage(1)
     * doc.text('I am on page 1', 10, 10)
     */


    API.setPage = function () {
      _setPage.apply(this, arguments);

      setOutputDestination.call(this, pages[currentPage]);
      return this;
    };
    /**
     * @name insertPage
     * @memberof jsPDF#
     * 
     * @function 
     * @instance
     * @param {Object} beforePage
     * @returns {jsPDF}
     */


    API.insertPage = function (beforePage) {
      this.addPage();
      this.movePage(currentPage, beforePage);
      return this;
    };
    /**
     * @name movePage
     * @memberof jsPDF#
     * @function
     * @instance
     * @param {number} targetPage
     * @param {number} beforePage
     * @returns {jsPDF}
     */


    API.movePage = function (targetPage, beforePage) {
      var tmpPages, tmpPagesContext;

      if (targetPage > beforePage) {
        tmpPages = pages[targetPage];
        tmpPagesContext = pagesContext[targetPage];

        for (var i = targetPage; i > beforePage; i--) {
          pages[i] = pages[i - 1];
          pagesContext[i] = pagesContext[i - 1];
        }

        pages[beforePage] = tmpPages;
        pagesContext[beforePage] = tmpPagesContext;
        this.setPage(beforePage);
      } else if (targetPage < beforePage) {
        tmpPages = pages[targetPage];
        tmpPagesContext = pagesContext[targetPage];

        for (var j = targetPage; j < beforePage; j++) {
          pages[j] = pages[j + 1];
          pagesContext[j] = pagesContext[j + 1];
        }

        pages[beforePage] = tmpPages;
        pagesContext[beforePage] = tmpPagesContext;
        this.setPage(beforePage);
      }

      return this;
    };
    /**
     * Deletes a page from the PDF.
     * @name deletePage
     * @memberof jsPDF#
     * @function
     * @param {number} targetPage
     * @instance
     * @returns {jsPDF}
     */


    API.deletePage = function () {
      _deletePage.apply(this, arguments);

      return this;
    };
    /**
     * Adds text to page. Supports adding multiline text when 'text' argument is an Array of Strings.
     *
     * @function
     * @instance
     * @param {String|Array} text String or array of strings to be added to the page. Each line is shifted one line down per font, spacing settings declared before this call.
     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {Object} [options] - Collection of settings signaling how the text must be encoded.
     * @param {string} [options.align=left] - The alignment of the text, possible values: left, center, right, justify.
     * @param {string} [options.baseline=alphabetic] - Sets text baseline used when drawing the text, possible values: alphabetic, ideographic, bottom, top, middle, hanging
     * @param {string} [options.angle=0] - Rotate the text clockwise or counterclockwise. Expects the angle in degree.
     * @param {string} [options.rotationDirection=1] - Direction of the rotation. 0 = clockwise, 1 = counterclockwise.
     * @param {string} [options.charSpace=0] - The space between each letter.
     * @param {string} [options.lineHeightFactor=1.15] - The lineheight of each line.
     * @param {string} [options.flags] - Flags for to8bitStream.
     * @param {string} [options.flags.noBOM=true] - Don't add BOM to Unicode-text.
     * @param {string} [options.flags.autoencode=true] - Autoencode the Text.
     * @param {string} [options.maxWidth=0] - Split the text by given width, 0 = no split.
     * @param {string} [options.renderingMode=fill] - Set how the text should be rendered, possible values: fill, stroke, fillThenStroke, invisible, fillAndAddForClipping, strokeAndAddPathForClipping, fillThenStrokeAndAddToPathForClipping, addToPathForClipping.
     * @param {boolean} [options.isInputVisual] - Option for the BidiEngine
     * @param {boolean} [options.isOutputVisual] - Option for the BidiEngine
     * @param {boolean} [options.isInputRtl] - Option for the BidiEngine
     * @param {boolean} [options.isOutputRtl] - Option for the BidiEngine
     * @param {boolean} [options.isSymmetricSwapping] - Option for the BidiEngine
     * @param {number|Matrix} transform If transform is a number the text will be rotated by this value around the anchor set by x and y.
     *
     * If it is a Matrix, this matrix gets directly applied to the text, which allows shearing
     * effects etc.; the x and y offsets are then applied AFTER the coordinate system has been established by this
     * matrix. This means passing a rotation matrix that is equivalent to some rotation angle will in general yield a
     * DIFFERENT result. A matrix is only allowed in "advanced" API mode.
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name text
     */


    API.__private__.text = API.text = function (text, x, y, options, transform) {
      /*
       * Inserts something like this into PDF
       *   BT
       *    /F1 16 Tf  % Font name + size
       *    16 TL % How many units down for next line in multiline text
       *    0 g % color
       *    28.35 813.54 Td % position
       *    (line one) Tj
       *    T* (line two) Tj
       *    T* (line three) Tj
       *   ET
       */
      options = options || {};
      var scope = options.scope || this;
      var payload, da, angle, align, charSpace, maxWidth, flags; // Pre-August-2012 the order of arguments was function(x, y, text, flags)
      // in effort to make all calls have similar signature like
      //   function(data, coordinates... , miscellaneous)
      // this method had its args flipped.
      // code below allows backward compatibility with old arg order.

      if (typeof text === 'number' && typeof x === 'number' && (typeof y === 'string' || Array.isArray(y))) {
        var tmp = y;
        y = x;
        x = text;
        text = tmp;
      }

      var transformationMatrix;

      if (arguments[3] instanceof Matrix === false) {
        flags = arguments[3];
        angle = arguments[4];
        align = arguments[5];

        if (_typeof(flags) !== "object" || flags === null) {
          if (typeof angle === 'string') {
            align = angle;
            angle = null;
          }

          if (typeof flags === 'string') {
            align = flags;
            flags = null;
          }

          if (typeof flags === 'number') {
            angle = flags;
            flags = null;
          }

          options = {
            flags: flags,
            angle: angle,
            align: align
          };
        }
      } else {
        transformationMatrix = transform;
      }

      if (isNaN(x) || isNaN(y) || typeof text === "undefined" || text === null) {
        throw new Error('Invalid arguments passed to jsPDF.text');
      }

      if (text.length === 0) {
        return scope;
      }

      var xtra = '';
      var isHex = false;
      var lineHeight = typeof options.lineHeightFactor === 'number' ? options.lineHeightFactor : lineHeightFactor;
      var scaleFactor = scope.internal.scaleFactor;

      function ESC(s) {
        s = s.split("\t").join(Array(options.TabLen || 9).join(" "));
        return pdfEscape(s, flags);
      }

      function transformTextToSpecialArray(text) {
        //we don't want to destroy original text array, so cloning it
        var sa = text.concat();
        var da = [];
        var len = sa.length;
        var curDa; //we do array.join('text that must not be PDFescaped")
        //thus, pdfEscape each component separately

        while (len--) {
          curDa = sa.shift();

          if (typeof curDa === "string") {
            da.push(curDa);
          } else {
            if (Array.isArray(text) && (curDa.length === 1 || curDa[1] === undefined && curDa[2] === undefined)) {
              da.push(curDa[0]);
            } else {
              da.push([curDa[0], curDa[1], curDa[2]]);
            }
          }
        }

        return da;
      }

      function processTextByFunction(text, processingFunction) {
        var result;

        if (typeof text === 'string') {
          result = processingFunction(text)[0];
        } else if (Array.isArray(text)) {
          //we don't want to destroy original text array, so cloning it
          var sa = text.concat();
          var da = [];
          var len = sa.length;
          var curDa;
          var tmpResult; //we do array.join('text that must not be PDFescaped")
          //thus, pdfEscape each component separately

          while (len--) {
            curDa = sa.shift();

            if (typeof curDa === "string") {
              da.push(processingFunction(curDa)[0]);
            } else if (Array.isArray(curDa) && typeof curDa[0] === "string") {
              tmpResult = processingFunction(curDa[0], curDa[1], curDa[2]);
              da.push([tmpResult[0], tmpResult[1], tmpResult[2]]);
            }
          }

          result = da;
        }

        return result;
      } //Check if text is of type String


      var textIsOfTypeString = false;
      var tmpTextIsOfTypeString = true;

      if (typeof text === 'string') {
        textIsOfTypeString = true;
      } else if (Array.isArray(text)) {
        //we don't want to destroy original text array, so cloning it
        var sa = text.concat();
        da = [];
        var len = sa.length;
        var curDa; //we do array.join('text that must not be PDFescaped")
        //thus, pdfEscape each component separately

        while (len--) {
          curDa = sa.shift();

          if (typeof curDa !== "string" || Array.isArray(curDa) && typeof curDa[0] !== "string") {
            tmpTextIsOfTypeString = false;
          }
        }

        textIsOfTypeString = tmpTextIsOfTypeString;
      }

      if (textIsOfTypeString === false) {
        throw new Error('Type of text must be string or Array. "' + text + '" is not recognized.');
      } //If there are any newlines in text, we assume
      //the user wanted to print multiple lines, so break the
      //text up into an array. If the text is already an array,
      //we assume the user knows what they are doing.
      //Convert text into an array anyway to simplify
      //later code.


      if (typeof text === 'string') {
        if (text.match(/[\r?\n]/)) {
          text = text.split(/\r\n|\r|\n/g);
        } else {
          text = [text];
        }
      } //baseline


      var height = activeFontSize / scope.internal.scaleFactor;
      var descent = height * (lineHeightFactor - 1);

      switch (options.baseline) {
        case 'bottom':
          y -= descent;
          break;

        case 'top':
          y += height - descent;
          break;

        case 'hanging':
          y += height - 2 * descent;
          break;

        case 'middle':
          y += height / 2 - descent;
          break;

        case 'ideographic':
        case 'alphabetic':
        default:
          // do nothing, everything is fine
          break;
      } //multiline


      maxWidth = options.maxWidth || 0;

      if (maxWidth > 0) {
        if (typeof text === 'string') {
          text = scope.splitTextToSize(text, maxWidth);
        } else if (Object.prototype.toString.call(text) === '[object Array]') {
          text = scope.splitTextToSize(text.join(" "), maxWidth);
        }
      } //creating Payload-Object to make text byRef


      payload = {
        text: text,
        x: x,
        y: y,
        options: options,
        mutex: {
          pdfEscape: pdfEscape,
          activeFontKey: activeFontKey,
          fonts: fonts,
          activeFontSize: activeFontSize
        }
      };
      events.publish('preProcessText', payload);
      text = payload.text;
      options = payload.options; //angle

      angle = options.angle;

      if (transformationMatrix instanceof Matrix === false && angle && typeof angle === "number") {
        angle *= Math.PI / 180;

        if (options.rotationDirection === 0) {
          angle = -angle;
        }

        var c = Math.cos(angle);
        var s = Math.sin(angle);
        transformationMatrix = new Matrix(f2(c), f2(s), f2(s * -1), f2(c), 0, 0);
      } else if (angle && angle instanceof Matrix) {
        transformationMatrix = angle;
      } //charSpace


      charSpace = options.charSpace || activeCharSpace;

      if (typeof charSpace !== 'undefined') {
        xtra += f3(charSpace * scaleFactor) + " Tc\n";
        this.setCharSpace(this.getCharSpace() || 0);
      } //lang


      var lang = options.lang;
      //renderingMode


      var renderingMode = -1;
      var parmRenderingMode = typeof options.renderingMode !== "undefined" ? options.renderingMode : options.stroke;
      var pageContext = scope.internal.getCurrentPageInfo().pageContext;

      switch (parmRenderingMode) {
        case 0:
        case false:
        case 'fill':
          renderingMode = 0;
          break;

        case 1:
        case true:
        case 'stroke':
          renderingMode = 1;
          break;

        case 2:
        case 'fillThenStroke':
          renderingMode = 2;
          break;

        case 3:
        case 'invisible':
          renderingMode = 3;
          break;

        case 4:
        case 'fillAndAddForClipping':
          renderingMode = 4;
          break;

        case 5:
        case 'strokeAndAddPathForClipping':
          renderingMode = 5;
          break;

        case 6:
        case 'fillThenStrokeAndAddToPathForClipping':
          renderingMode = 6;
          break;

        case 7:
        case 'addToPathForClipping':
          renderingMode = 7;
          break;
      }

      var usedRenderingMode = typeof pageContext.usedRenderingMode !== 'undefined' ? pageContext.usedRenderingMode : -1; //if the coder wrote it explicitly to use a specific 
      //renderingMode, then use it

      if (renderingMode !== -1) {
        xtra += renderingMode + " Tr\n"; //otherwise check if we used the rendering Mode already
        //if so then set the rendering Mode...
      } else if (usedRenderingMode !== -1) {
        xtra += "0 Tr\n";
      }

      if (renderingMode !== -1) {
        pageContext.usedRenderingMode = renderingMode;
      } //align


      align = options.align || 'left';
      var leading = activeFontSize * lineHeight;
      var pageWidth = scope.internal.pageSize.getWidth();
      var activeFont = fonts[activeFontKey];
      charSpace = options.charSpace || activeCharSpace;
      maxWidth = options.maxWidth || 0;
      var lineWidths;
      flags = {};
      var wordSpacingPerLine = [];

      if (Object.prototype.toString.call(text) === '[object Array]') {
        da = transformTextToSpecialArray(text);
        var newY;

        if (align !== "left") {
          lineWidths = da.map(function (v) {
            return scope.getStringUnitWidth(v, {
              font: activeFont,
              charSpace: charSpace,
              fontSize: activeFontSize,
              doKerning: false
            }) * activeFontSize / scaleFactor;
          });
        } //The first line uses the "main" Td setting,
        //and the subsequent lines are offset by the
        //previous line's x coordinate.


        var prevWidth = 0;
        var newX;

        if (align === "right") {
          //The passed in x coordinate defines the
          //rightmost point of the text.
          x -= lineWidths[0];
          text = [];
          len = da.length;

          for (var i = 0; i < len; i++) {
            if (i === 0) {
              newX = getHorizontalCoordinate(x);
              newY = getVerticalCoordinate(y);
            } else {
              newX = (prevWidth - lineWidths[i]) * scaleFactor;
              newY = -leading;
            }

            text.push([da[i], newX, newY]);
            prevWidth = lineWidths[i];
          }
        } else if (align === "center") {
          //The passed in x coordinate defines
          //the center point.
          x -= lineWidths[0] / 2;
          text = [];
          len = da.length;

          for (var j = 0; j < len; j++) {
            if (j === 0) {
              newX = getHorizontalCoordinate(x);
              newY = getVerticalCoordinate(y);
            } else {
              newX = (prevWidth - lineWidths[j]) / 2 * scaleFactor;
              newY = -leading;
            }

            text.push([da[j], newX, newY]);
            prevWidth = lineWidths[j];
          }
        } else if (align === "left") {
          text = [];
          len = da.length;

          for (var h = 0; h < len; h++) {
            text.push(da[h]);
          }
        } else if (align === "justify") {
          text = [];
          len = da.length;
          maxWidth = maxWidth !== 0 ? maxWidth : pageWidth;

          for (var l = 0; l < len; l++) {
            newY = l === 0 ? getVerticalCoordinate(y) : -leading;
            newX = l === 0 ? getHorizontalCoordinate(x) : 0;

            if (l < len - 1) {
              wordSpacingPerLine.push(f2((maxWidth - lineWidths[l]) / (da[l].split(" ").length - 1) * scaleFactor));
            }

            text.push([da[l], newX, newY]);
          }
        } else {
          throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
        }
      } //R2L


      var doReversing = typeof options.R2L === "boolean" ? options.R2L : R2L;

      if (doReversing === true) {
        text = processTextByFunction(text, function (text, posX, posY) {
          return [text.split("").reverse().join(""), posX, posY];
        });
      } //creating Payload-Object to make text byRef


      payload = {
        text: text,
        x: x,
        y: y,
        options: options,
        mutex: {
          pdfEscape: pdfEscape,
          activeFontKey: activeFontKey,
          fonts: fonts,
          activeFontSize: activeFontSize
        }
      };
      events.publish('postProcessText', payload);
      text = payload.text;
      isHex = payload.mutex.isHex || false; //Escaping 

      var activeFontEncoding = fonts[activeFontKey].encoding;

      if (activeFontEncoding === "WinAnsiEncoding" || activeFontEncoding === "StandardEncoding") {
        text = processTextByFunction(text, function (text, posX, posY) {
          return [ESC(text), posX, posY];
        });
      }

      da = transformTextToSpecialArray(text);
      text = [];
      var STRING = 0;
      var ARRAY = 1;
      var variant = Array.isArray(da[0]) ? ARRAY : STRING;
      var posX;
      var posY;
      var content;
      var wordSpacing = '';

      var generatePosition = function generatePosition(parmPosX, parmPosY, parmTransformationMatrix) {
        var position = '';

        if (parmTransformationMatrix instanceof Matrix) {
          parmTransformationMatrix.tx = parseFloat(f2(parmPosX));
          parmTransformationMatrix.ty = parseFloat(f2(parmPosY));
          position = parmTransformationMatrix.join(" ") + " Tm\n";
        } else {
          position = f2(parmPosX) + " " + f2(parmPosY) + " Td\n";
        }

        return position;
      };

      for (var lineIndex = 0; lineIndex < da.length; lineIndex++) {
        wordSpacing = '';

        switch (variant) {
          case ARRAY:
            content = (isHex ? "<" : "(") + da[lineIndex][0] + (isHex ? ">" : ")");
            posX = parseFloat(da[lineIndex][1]);
            posY = parseFloat(da[lineIndex][2]);
            break;

          case STRING:
            content = (isHex ? "<" : "(") + da[lineIndex] + (isHex ? ">" : ")");
            posX = getHorizontalCoordinate(x);
            posY = getVerticalCoordinate(y);
            break;
        }

        if (typeof wordSpacingPerLine !== 'undefined' && typeof wordSpacingPerLine[lineIndex] !== 'undefined') {
          wordSpacing = wordSpacingPerLine[lineIndex] + " Tw\n";
        }

        if (lineIndex === 0) {
          text.push(wordSpacing + generatePosition(posX, posY, transformationMatrix) + content);
        } else if (variant === STRING) {
          text.push(wordSpacing + content);
        } else if (variant === ARRAY) {
          text.push(wordSpacing + generatePosition(posX, posY) + content);
        }
      }

      text = variant === STRING ? text.join(" Tj\nT* ") : text.join(" Tj\n");
      text += " Tj\n";
      var result = 'BT\n/';
      result += activeFontKey + ' ' + activeFontSize + ' Tf\n'; // font face, style, size

      result += f2(activeFontSize * lineHeight) + ' TL\n'; // line spacing

      result += textColor + '\n';
      result += xtra;
      result += text;
      result += "ET";
      out(result);
      usedFonts[activeFontKey] = true;
      return scope;
    };
    /**
     * Letter spacing method to print text with gaps
     *
     * @function
     * @instance
     * @param {String|Array} text String to be added to the page.
     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page
     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page
     * @param {number} spacing Spacing (in units declared at inception)
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name lstext
     * @deprecated We'll be removing this function. It doesn't take character width into account.
     */


    API.__private__.lstext = API.lstext = function (text, x, y, charSpace) {
      return this.text(text, x, y, {
        charSpace: charSpace
      });
    }; // PDF supports these path painting and clip path operators:
    //
    // S - stroke
    // s - close/stroke
    // f (F) - fill non-zero
    // f* - fill evenodd
    // B - fill stroke nonzero
    // B* - fill stroke evenodd
    // b - close fill stroke nonzero
    // b* - close fill stroke evenodd
    // n - nothing (consume path)
    // W - clip nonzero
    // W* - clip evenodd
    //
    // In order to keep the API small, we omit the close-and-fill/stroke operators and provide a separate close()
    // method.

    /**
     * 
     * @name clip
     * @function
     * @instance
     * @param {string} rule Only possible value is 'evenodd'
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @description All .clip() after calling drawing ops with a style argument of null.
     */


    var clip = API.__private__.clip = API.clip = function (rule) {
      // Call .clip() after calling drawing ops with a style argument of null
      // W is the PDF clipping op
      if ('evenodd' === rule) {
        out('W*');
      } else {
        out('W');
      }

      return this;
    };
    /** 
     * @name clipEvenOdd
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @description Modify the current clip path by intersecting it with the current path using the even-odd rule. Note
     * that this will NOT consume the current path. In order to only use this path for clipping call
     * {@link API.discardPath} afterwards.
     */


    API.clipEvenOdd = function () {
      return clip('evenodd');
    };
    /**
     * This fixes the previous function clip(). Perhaps the 'stroke path' hack was due to the missing 'n' instruction?
     * We introduce the fixed version so as to not break API.
     * @param fillRule
     * @deprecated
     * @ignore
     */


    API.__private__.clip_fixed = API.clip_fixed = function (rule) {
      return API.clip(rule);
    };
    /**
     * Consumes the current path without any effect. Mainly used in combination with {@link clip} or
     * {@link clipEvenOdd}. The PDF "n" operator.
     * @name discardPath
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    API.__private__.discardPath = API.discardPath = function () {
      out("n");
      return this;
    };

    var isValidStyle = API.__private__.isValidStyle = function (style) {
      var validStyleVariants = [undefined, null, 'S', 'D', 'F', 'DF', 'FD', 'f', 'f*', 'B', 'B*', 'n'];
      var result = false;

      if (validStyleVariants.indexOf(style) !== -1) {
        result = true;
      }

      return result;
    };

    API.__private__.setDefaultPathOperation = API.setDefaultPathOperation = function (operator) {
      if (isValidStyle(operator)) {
        defaultPathOperation = operator;
      }

      return this;
    };

    var getStyle = API.__private__.getStyle = API.getStyle = function (style) {
      // see path-painting operators in PDF spec
      var op = defaultPathOperation; // stroke

      switch (style) {
        case 'D':
        case 'S':
          op = "S"; // stroke

          break;

        case 'F':
          op = 'f'; // fill

          break;

        case 'FD':
        case 'DF':
          op = 'B';
          break;

        case 'f':
        case 'f*':
        case 'B':
        case 'B*':
          /*
           Allow direct use of these PDF path-painting operators:
           - f    fill using nonzero winding number rule
           - f*    fill using even-odd rule
           - B    fill then stroke with fill using non-zero winding number rule
           - B*    fill then stroke with fill using even-odd rule
           */
          op = style;
          break;
      }

      return op;
    };
    /**
     * Close the current path. The PDF "h" operator.
     * @name close
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    var close = API.close = function () {
      out("h");
      return this;
    };
    /**
     * Stroke the path. The PDF "S" operator.
     * @name stroke
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    API.stroke = function () {
      out("S");
      return this;
    };
    /**
     * Fill the current path using the nonzero winding number rule. If a pattern is provided, the path will be filled
     * with this pattern, otherwise with the current fill color. Equivalent to the PDF "f" operator.
     * @name fill
     * @function
     * @instance
     * @param {PatternData=} pattern If provided the path will be filled with this pattern
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    API.fill = function (pattern) {
      fillWithOptionalPattern("f", pattern);
      return this;
    };
    /**
     * Fill the current path using the even-odd rule. The PDF f* operator.
     * @see API.fill
     * @name fillEvenOdd
     * @function
     * @instance
     * @param {PatternData=} pattern If provided the path will be filled with this pattern
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    API.fillEvenOdd = function (pattern) {
      fillWithOptionalPattern("f*", pattern);
      return this;
    };
    /**
     * Fill using the nonzero winding number rule and then stroke the current Path. The PDF "B" operator.
     * @see API.fill
     * @name fillStroke
     * @function
     * @instance
     * @param {PatternData=} pattern If provided the path will be stroked with this pattern
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    API.fillStroke = function (pattern) {
      fillWithOptionalPattern("B", pattern);
      return this;
    };
    /**
     * Fill using the even-odd rule and then stroke the current Path. The PDF "B" operator.
     * @see API.fill
     * @name fillStrokeEvenOdd
     * @function
     * @instance
     * @param {PatternData=} pattern If provided the path will be fill-stroked with this pattern
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    API.fillStrokeEvenOdd = function (pattern) {
      fillWithOptionalPattern("B*", pattern);
      return this;
    };

    var fillWithOptionalPattern = function fillWithOptionalPattern(style, pattern) {
      if (_typeof(pattern) === "object") {
        fillWithPattern(pattern, style);
      } else {
        out(style);
      }
    };

    var putStyle = function putStyle(style, patternKey, patternData) {
      if (style === null) {
        return;
      }

      style = getStyle(style); // stroking / filling / both the path

      if (!patternKey) {
        if (style !== 'n') {
          out(style);
        }

        return;
      }

      if (!patternData) {
        patternData = {
          matrix: identityMatrix
        };
      }

      if (patternData instanceof Matrix) {
        patternData = {
          matrix: patternData
        };
      }

      patternData.key = patternKey;
      patternData || (patternData = identityMatrix);
      fillWithPattern(patternData, style);
    };

    var fillWithPattern = function fillWithPattern(patternData, style) {
      var patternId = patternMap[patternData.key];
      var pattern = patterns[patternId];

      if (pattern instanceof API.ShadingPattern) {
        out("q");
        out(clipRuleFromStyle(style));

        if (pattern.gState) {
          API.setGState(pattern.gState);
        }

        out(patternData.matrix.toString() + " cm");
        out("/" + patternId + " sh");
        out("Q");
      } else if (pattern instanceof API.TilingPattern) {
        // pdf draws patterns starting at the bottom left corner and they are not affected by the global transformation,
        // so we must flip them
        var matrix = new Matrix(1, 0, 0, -1, 0, this.internal.pageSize.getHeight());

        if (patternData.matrix) {
          matrix = (patternData.matrix || identityMatrix).multiply(matrix); // we cannot apply a matrix to the pattern on use so we must abuse the pattern matrix and create new instances
          // for each use

          patternId = pattern.createClone(patternData.key, patternData.boundingBox, patternData.xStep, patternData.yStep, matrix).id;
        }

        out("q");
        out("/Pattern cs");
        out("/" + patternId + " scn");

        if (pattern.gState) {
          API.setGState(pattern.gState);
        }

        out(style);
        out("Q");
      }
    };

    var clipRuleFromStyle = function clipRuleFromStyle(style) {
      switch (style) {
        case "f":
        case "F":
          return "W n";

        case "f*":
          return "W* n";

        case "B":
          return "W S";

        case "B*":
          return "W* S";
        // these two are for compatibility reasons (in the past, calling any primitive method with a shading pattern
        // and "n"/"S" as style would still fill/fill and stroke the path)

        case "S":
          return "W S";

        case "n":
          return "W n";
      }
    };
    /**
     * Begin a new subpath by moving the current point to coordinates (x, y). The PDF "m" operator.
     * @param {number} x
     * @param {number} y
     * @name moveTo
     * @function
     * @instance
     * @memberof jsPDF#
     * @returns {jsPDF}
     */


    API.moveTo = function (x, y) {
      out(hpf(scale(x)) + " " + hpf(transformScaleY(y)) + " m");
      return this;
    };
    /**
     * Append a straight line segment from the current point to the point (x, y). The PDF "l" operator.
     * @param {number} x
     * @param {number} y
     * @memberof jsPDF#
     * @name lineTo
     * @function
     * @instance
     * @memberof jsPDF#
     * @returns {jsPDF}
     */


    API.lineTo = function (x, y) {
      out(hpf(scale(x)) + " " + hpf(transformScaleY(y)) + " l");
      return this;
    };
    /**
     * Append a cubic Bézier curve to the current path. The curve shall extend from the current point to the point
     * (x3, y3), using (x1, y1) and (x2, y2) as Bézier control points. The new current point shall be (x3, x3).
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {number} x3
     * @param {number} y3
     * @memberof jsPDF#
     * @name curveTo
     * @function
     * @instance
     * @memberof jsPDF#
     * @returns {jsPDF}
     */


    API.curveTo = function (x1, y1, x2, y2, x3, y3) {
      out([hpf(scale(x1)), hpf(transformScaleY(y1)), hpf(scale(x2)), hpf(transformScaleY(y2)), hpf(scale(x3)), hpf(transformScaleY(y3)), "c"].join(" "));
      return this;
    };
    /**
     * Draw a line on the current page.
     *
     * @name line
     * @function 
     * @instance
     * @param {number} x1
     * @param {number} y1
     * @param {number} x2
     * @param {number} y2
     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument. default: 'S'
     * @returns {jsPDF}
     * @memberof jsPDF#
     */


    API.__private__.line = API.line = function (x1, y1, x2, y2, style) {
      style = style || 'S';

      if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || !isValidStyle(style)) {
        throw new Error('Invalid arguments passed to jsPDF.line');
      }

      return this.lines([[x2 - x1, y2 - y1]], x1, y1);
    };
    /**
     * Adds series of curves (straight lines or cubic bezier curves) to canvas, starting at `x`, `y` coordinates.
     * All data points in `lines` are relative to last line origin.
     * `x`, `y` become x1,y1 for first line / curve in the set.
     * For lines you only need to specify [x2, y2] - (ending point) vector against x1, y1 starting point.
     * For bezier curves you need to specify [x2,y2,x3,y3,x4,y4] - vectors to control points 1, 2, ending point. All vectors are against the start of the curve - x1,y1.
     *
     * @example .lines([[2,2],[-2,2],[1,1,2,2,3,3],[2,1]], 212,110, [1,1], 'F', false) // line, line, bezier curve, line
     * @param {Array} lines Array of *vector* shifts as pairs (lines) or sextets (cubic bezier curves).
     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {number} scale (Defaults to [1.0,1.0]) x,y Scaling factor for all vectors. Elements can be any floating number Sub-one makes drawing smaller. Over-one grows the drawing. Negative flips the direction.
     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.
     * @param {boolean} closed If true, the path is closed with a straight line from the end of the last curve to the starting point.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name lines
     */


    API.__private__.lines = API.lines = function (lines, x, y, scale, style, closed, patternKey, patternData) {
      var scalex, scaley, i, l, leg, x2, y2, x3, y3, x4, y4, tmp; // Pre-August-2012 the order of arguments was function(x, y, lines, scale, style)
      // in effort to make all calls have similar signature like
      //   function(content, coordinateX, coordinateY , miscellaneous)
      // this method had its args flipped.
      // code below allows backward compatibility with old arg order.

      if (typeof lines === 'number') {
        tmp = y;
        y = x;
        x = lines;
        lines = tmp;
      }

      scale = scale || [1, 1];
      closed = closed || false;

      if (isNaN(x) || isNaN(y) || !Array.isArray(lines) || !Array.isArray(scale) || !isValidStyle(style) || typeof closed !== 'boolean') {
        throw new Error('Invalid arguments passed to jsPDF.lines');
      } // starting point


      out(f3(getHorizontalCoordinate(x)) + ' ' + f3(getVerticalCoordinate(y)) + ' m');
      scalex = scale[0];
      scaley = scale[1];
      l = lines.length; //, x2, y2 // bezier only. In page default measurement "units", *after* scaling
      //, x3, y3 // bezier only. In page default measurement "units", *after* scaling
      // ending point for all, lines and bezier. . In page default measurement "units", *after* scaling

      x4 = x; // last / ending point = starting point for first item.

      y4 = y; // last / ending point = starting point for first item.

      for (i = 0; i < l; i++) {
        leg = lines[i];

        if (leg.length === 2) {
          // simple line
          x4 = leg[0] * scalex + x4; // here last x4 was prior ending point

          y4 = leg[1] * scaley + y4; // here last y4 was prior ending point

          out(f3(getHorizontalCoordinate(x4)) + ' ' + f3(getVerticalCoordinate(y4)) + ' l');
        } else {
          // bezier curve
          x2 = leg[0] * scalex + x4; // here last x4 is prior ending point

          y2 = leg[1] * scaley + y4; // here last y4 is prior ending point

          x3 = leg[2] * scalex + x4; // here last x4 is prior ending point

          y3 = leg[3] * scaley + y4; // here last y4 is prior ending point

          x4 = leg[4] * scalex + x4; // here last x4 was prior ending point

          y4 = leg[5] * scaley + y4; // here last y4 was prior ending point

          out(f3(getHorizontalCoordinate(x2)) + ' ' + f3(getVerticalCoordinate(y2)) + ' ' + f3(getHorizontalCoordinate(x3)) + ' ' + f3(getVerticalCoordinate(y3)) + ' ' + f3(getHorizontalCoordinate(x4)) + ' ' + f3(getVerticalCoordinate(y4)) + ' c');
        }
      }

      if (closed) {
        close();
      } // stroking / filling / both the path


      putStyle(style, patternKey, patternData);
      return this;
    };
    /**
     * Similar to {@link API.lines} but all coordinates are interpreted as absolute coordinates instead of relative.
     * @param {Array<Object>} lines An array of {op: operator, c: coordinates} object, where op is one of "m" (move to), "l" (line to)
     * "c" (cubic bezier curve) and "h" (close (sub)path)). c is an array of coordinates. "m" and "l" expect two, "c"
     * six and "h" an empty array (or undefined).
     * @param {String=} style  The style. Deprecated!
     * @param {String=} patternKey The pattern key for the pattern that should be used to fill the path. Deprecated!
     * @param {(Matrix|PatternData)=} patternData The matrix that transforms the pattern into user space, or an object that
     * will modify the pattern on use. Deprecated!
     * @function
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name path
     */


    API.path = function (lines, style, patternKey, patternData) {
      for (var i = 0; i < lines.length; i++) {
        var leg = lines[i];
        var coords = leg.c;

        switch (leg.op) {
          case "m":
            this.moveTo(coords[0], coords[1]);
            break;

          case "l":
            this.lineTo(coords[0], coords[1]);
            break;

          case "c":
            this.curveTo.apply(this, coords);
            break;

          case "h":
            close();
            break;
        }
      }

      putStyle(style, patternKey, patternData);
      return this;
    };
    /**
     * Adds a rectangle to PDF.
     *
     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {number} w Width (in units declared at inception of PDF document).
     * @param {number} h Height (in units declared at inception of PDF document).
     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name rect
     */


    API.__private__.rect = API.rect = function (x, y, w, h, style, patternKey, patternData) {
      if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h) || !isValidStyle(style)) {
        throw new Error('Invalid arguments passed to jsPDF.rect');
      }

      out([f2(getHorizontalCoordinate(x)), f2(getVerticalCoordinate(y)), f2(scale(w)), f2(scale(-h)), 're'].join(' '));
      putStyle(style, patternKey, patternData);
      return this;
    };
    /**
     * Adds a triangle to PDF.
     *
     * @param {number} x1 Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y1 Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {number} x2 Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y2 Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {number} x3 Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y3 Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name triangle
     */


    API.__private__.triangle = API.triangle = function (x1, y1, x2, y2, x3, y3, style, patternKey, patternData) {
      if (isNaN(x1) || isNaN(y1) || isNaN(x2) || isNaN(y2) || isNaN(x3) || isNaN(y3) || !isValidStyle(style)) {
        throw new Error('Invalid arguments passed to jsPDF.triangle');
      }

      this.lines([[x2 - x1, y2 - y1], // vector to point 2
      [x3 - x2, y3 - y2], // vector to point 3
      [x1 - x3, y1 - y3] // closing vector back to point 1
      ], x1, y1, // start of path
      [1, 1], style, true, patternKey, patternData);
      return this;
    };
    /**
     * Adds a rectangle with rounded corners to PDF.
     *
     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {number} w Width (in units declared at inception of PDF document).
     * @param {number} h Height (in units declared at inception of PDF document).
     * @param {number} rx Radius along x axis (in units declared at inception of PDF document).
     * @param {number} ry Radius along y axis (in units declared at inception of PDF document).
     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name roundedRect
     */


    API.__private__.roundedRect = API.roundedRect = function (x, y, w, h, rx, ry, style, patternKey, patternData) {
      if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h) || isNaN(rx) || isNaN(ry) || !isValidStyle(style)) {
        throw new Error('Invalid arguments passed to jsPDF.roundedRect');
      }

      var MyArc = 4 / 3 * (Math.SQRT2 - 1);
      this.lines([[w - 2 * rx, 0], [rx * MyArc, 0, rx, ry - ry * MyArc, rx, ry], [0, h - 2 * ry], [0, ry * MyArc, -(rx * MyArc), ry, -rx, ry], [-w + 2 * rx, 0], [-(rx * MyArc), 0, -rx, -(ry * MyArc), -rx, -ry], [0, -h + 2 * ry], [0, -(ry * MyArc), rx * MyArc, -ry, rx, -ry]], x + rx, y, // start of path
      [1, 1], style, true, patternKey, patternData);
      return this;
    };
    /**
     * Adds an ellipse to PDF.
     *
     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {number} rx Radius along x axis (in units declared at inception of PDF document).
     * @param {number} ry Radius along y axis (in units declared at inception of PDF document).
     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name ellipse
     */


    API.__private__.ellipse = API.ellipse = function (x, y, rx, ry, style, patternKey, patternData) {
      if (isNaN(x) || isNaN(y) || isNaN(rx) || isNaN(ry) || !isValidStyle(style)) {
        throw new Error('Invalid arguments passed to jsPDF.ellipse');
      }

      var lx = 4 / 3 * (Math.SQRT2 - 1) * rx,
          ly = 4 / 3 * (Math.SQRT2 - 1) * ry;
      out([f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y)), 'm', f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y - ly)), f2(getHorizontalCoordinate(x + lx)), f2(getVerticalCoordinate(y - ry)), f2(getHorizontalCoordinate(x)), f2(getVerticalCoordinate(y - ry)), 'c'].join(' '));
      out([f2(getHorizontalCoordinate(x - lx)), f2(getVerticalCoordinate(y - ry)), f2(getHorizontalCoordinate(x - rx)), f2(getVerticalCoordinate(y - ly)), f2(getHorizontalCoordinate(x - rx)), f2(getVerticalCoordinate(y)), 'c'].join(' '));
      out([f2(getHorizontalCoordinate(x - rx)), f2(getVerticalCoordinate(y + ly)), f2(getHorizontalCoordinate(x - lx)), f2(getVerticalCoordinate(y + ry)), f2(getHorizontalCoordinate(x)), f2(getVerticalCoordinate(y + ry)), 'c'].join(' '));
      out([f2(getHorizontalCoordinate(x + lx)), f2(getVerticalCoordinate(y + ry)), f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y + ly)), f2(getHorizontalCoordinate(x + rx)), f2(getVerticalCoordinate(y)), 'c'].join(' '));
      putStyle(style, patternKey, patternData);
      return this;
    };
    /**
     * Adds an circle to PDF.
     *
     * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page.
     * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page.
     * @param {number} r Radius (in units declared at inception of PDF document).
     * @param {string} style A string specifying the painting style or null.  Valid styles include: 'S' [default] - stroke, 'F' - fill,  and 'DF' (or 'FD') -  fill then stroke. A null value postpones setting the style so that a shape may be composed using multiple method calls. The last drawing method call used to define the shape should not have a null style argument.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name circle
     */


    API.__private__.circle = API.circle = function (x, y, r, style, patternKey, patternData) {
      if (isNaN(x) || isNaN(y) || isNaN(r) || !isValidStyle(style)) {
        throw new Error('Invalid arguments passed to jsPDF.circle');
      }

      return this.ellipse(x, y, r, r, style, patternKey, patternData);
    };
    /**
     * Sets text font face, variant for upcoming text elements.
     * See output of jsPDF.getFontList() for possible font names, styles.
     *
     * @param {string} fontName Font name or family. Example: "times".
     * @param {string} fontStyle Font style or variant. Example: "italic".
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setFont
     */


    API.setFont = function (fontName, fontStyle) {
      activeFontKey = getFont(fontName, fontStyle, {
        disableWarning: false
      });
      return this;
    };
    /**
     * Gets text font face, variant for upcoming text elements.
     *
     * @function
     * @instance
     * @returns {Object}
     * @memberof jsPDF#
     * @name getFont
     */


    var getFontEntry = API.__private__.getFont = API.getFont = function () {
      return fonts[getFont.apply(API, arguments)];
    };
    /**
     * Switches font style or variant for upcoming text elements,
     * while keeping the font face or family same.
     * See output of jsPDF.getFontList() for possible font names, styles.
     *
     * @param {string} style Font style or variant. Example: "italic".
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @deprecated
     * @name setFontStyle
     */


    API.setFontStyle = API.setFontType = function (style) {
      activeFontKey = getFont(undefined, style); // if font is not found, the above line blows up and we never go further

      return this;
    };
    /**
     * Returns an object - a tree of fontName to fontStyle relationships available to
     * active PDF document.
     *
     * @public
     * @function
     * @instance
     * @returns {Object} Like {'times':['normal', 'italic', ... ], 'arial':['normal', 'bold', ... ], ... }
     * @memberof jsPDF#
     * @name getFontList
     */


    API.__private__.getFontList = API.getFontList = function () {
      var list = {},
          fontName,
          fontStyle;

      for (fontName in fontmap) {
        if (fontmap.hasOwnProperty(fontName)) {
          list[fontName] = [];

          for (fontStyle in fontmap[fontName]) {
            if (fontmap[fontName].hasOwnProperty(fontStyle)) {
              list[fontName].push(fontStyle);
            }
          }
        }
      }

      return list;
    };
    /**
     * Add a custom font to the current instance.
     *
     * @property {string} postScriptName PDF specification full name for the font.
     * @property {string} id PDF-document-instance-specific label assinged to the font.
     * @property {string} fontStyle Style of the Font.
     * @property {Object} encoding Encoding_name-to-Font_metrics_object mapping.
     * @function
     * @instance
     * @memberof jsPDF#
     * @name addFont
     * @returns {string} fontId
     */


    API.addFont = function (postScriptName, fontName, fontStyle, encoding) {
      encoding = encoding || 'Identity-H';
      return addFont.call(this, postScriptName, fontName, fontStyle, encoding);
    };

    var lineWidth = options.lineWidth || 0.200025; // 2mm

    /**
     * Sets line width for upcoming lines.
     *
     * @param {number} width Line width (in units declared at inception of PDF document).
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setLineWidth
     */

    var setLineWidth = API.__private__.setLineWidth = API.setLineWidth = function (width) {
      out(f2(width * scaleFactor) + ' w');
      return this;
    };
    /**
     * Sets the dash pattern for upcoming lines.
     * 
     * To reset the settings simply call the method without any parameters.
     * @param {Array<number>} dashArray An array containing 0-2 numbers. The first number sets the length of the
     * dashes, the second number the length of the gaps. If the second number is missing, the gaps are considered
     * to be as long as the dashes. An empty array means solid, unbroken lines.
     * @param {number} dashPhase The phase lines start with.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setLineDashPattern
     */


    API.__private__.setLineDash = jsPDF.API.setLineDash = jsPDF.API.setLineDashPattern = function (dashArray, dashPhase) {
      dashArray = dashArray || [];
      dashPhase = dashPhase || 0;

      if (isNaN(dashPhase) || !Array.isArray(dashArray)) {
        throw new Error('Invalid arguments passed to jsPDF.setLineDash');
      }

      dashArray = dashArray.map(function (x) {
        return f3(x * scaleFactor);
      }).join(' ');
      dashPhase = f3(dashPhase * scaleFactor);
      out('[' + dashArray + '] ' + dashPhase + ' d');
      return this;
    };

    var lineHeightFactor;

    var getLineHeight = API.__private__.getLineHeight = API.getLineHeight = function () {
      return activeFontSize * lineHeightFactor;
    };

    API.__private__.getLineHeight = API.getLineHeight = function () {
      return activeFontSize * lineHeightFactor;
    };
    /**
     * Sets the LineHeightFactor of proportion.
     *
     * @param {number} value LineHeightFactor value. Default: 1.15.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setLineHeightFactor
     */


    var setLineHeightFactor = API.__private__.setLineHeightFactor = API.setLineHeightFactor = function (value) {
      value = value || 1.15;

      if (typeof value === "number") {
        lineHeightFactor = value;
      }

      return this;
    };
    /**
     * Gets the LineHeightFactor, default: 1.15.
     *
     * @function
     * @instance
     * @returns {number} lineHeightFactor
     * @memberof jsPDF#
     * @name getLineHeightFactor
     */


    var getLineHeightFactor = API.__private__.getLineHeightFactor = API.getLineHeightFactor = function () {
      return lineHeightFactor;
    };

    setLineHeightFactor(options.lineHeight);

    var getHorizontalCoordinate = API.__private__.getHorizontalCoordinate = function (value) {
      return scale(value);
    };

    var getVerticalCoordinate = API.__private__.getVerticalCoordinate = function (value) {
      var pageHeight = pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY;
      return pageHeight - scale(value);
    };

    var getHorizontalCoordinateString = API.__private__.getHorizontalCoordinateString = API.getHorizontalCoordinateString = function (value) {
      return f2(scale(value));
    };

    var getVerticalCoordinateString = API.__private__.getVerticalCoordinateString = API.getVerticalCoordinateString = function (value) {
      var pageHeight = pagesContext[currentPage].mediaBox.topRightY - pagesContext[currentPage].mediaBox.bottomLeftY;
      return f2(pageHeight - scale(value));
    };

    var strokeColor = options.strokeColor || '0 G';
    /**
     *  Gets the stroke color for upcoming elements.
     *
     * @function
     * @instance
     * @returns {string} colorAsHex
     * @memberof jsPDF#
     * @name getDrawColor
     */

    API.__private__.getStrokeColor = API.getDrawColor = function () {
      return decodeColorString(strokeColor);
    };
    /**
     * Sets the stroke color for upcoming elements.
     *
     * Depending on the number of arguments given, Gray, RGB, or CMYK
     * color space is implied.
     *
     * When only ch1 is given, "Gray" color space is implied and it
     * must be a value in the range from 0.00 (solid black) to to 1.00 (white)
     * if values are communicated as String types, or in range from 0 (black)
     * to 255 (white) if communicated as Number type.
     * The RGB-like 0-255 range is provided for backward compatibility.
     *
     * When only ch1,ch2,ch3 are given, "RGB" color space is implied and each
     * value must be in the range from 0.00 (minimum intensity) to to 1.00
     * (max intensity) if values are communicated as String types, or
     * from 0 (min intensity) to to 255 (max intensity) if values are communicated
     * as Number types.
     * The RGB-like 0-255 range is provided for backward compatibility.
     *
     * When ch1,ch2,ch3,ch4 are given, "CMYK" color space is implied and each
     * value must be a in the range from 0.00 (0% concentration) to to
     * 1.00 (100% concentration)
     *
     * Because JavaScript treats fixed point numbers badly (rounds to
     * floating point nearest to binary representation) it is highly advised to
     * communicate the fractional numbers as String types, not JavaScript Number type.
     *
     * @param {Number|String} ch1 Color channel value or {string} ch1 color value in hexadecimal, example: '#FFFFFF'.
     * @param {Number} ch2 Color channel value.
     * @param {Number} ch3 Color channel value.
     * @param {Number} ch4 Color channel value.
     *
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setDrawColor
     */


    API.__private__.setStrokeColor = API.setDrawColor = function (ch1, ch2, ch3, ch4) {
      var options = {
        "ch1": ch1,
        "ch2": ch2,
        "ch3": ch3,
        "ch4": ch4,
        "pdfColorType": "draw",
        "precision": 2
      };
      strokeColor = encodeColorString(options);
      out(strokeColor);
      return this;
    };

    var fillColor = options.fillColor || '0 g';
    /**
     * Gets the fill color for upcoming elements.
     *
     * @function
     * @instance
     * @returns {string} colorAsHex
     * @memberof jsPDF#
     * @name getFillColor
     */

    API.__private__.getFillColor = API.getFillColor = function () {
      return decodeColorString(fillColor);
    };
    /**
     * Sets the fill color for upcoming elements.
     *
     * Depending on the number of arguments given, Gray, RGB, or CMYK
     * color space is implied.
     *
     * When only ch1 is given, "Gray" color space is implied and it
     * must be a value in the range from 0.00 (solid black) to to 1.00 (white)
     * if values are communicated as String types, or in range from 0 (black)
     * to 255 (white) if communicated as Number type.
     * The RGB-like 0-255 range is provided for backward compatibility.
     *
     * When only ch1,ch2,ch3 are given, "RGB" color space is implied and each
     * value must be in the range from 0.00 (minimum intensity) to to 1.00
     * (max intensity) if values are communicated as String types, or
     * from 0 (min intensity) to to 255 (max intensity) if values are communicated
     * as Number types.
     * The RGB-like 0-255 range is provided for backward compatibility.
     *
     * When ch1,ch2,ch3,ch4 are given, "CMYK" color space is implied and each
     * value must be a in the range from 0.00 (0% concentration) to to
     * 1.00 (100% concentration)
     *
     * Because JavaScript treats fixed point numbers badly (rounds to
     * floating point nearest to binary representation) it is highly advised to
     * communicate the fractional numbers as String types, not JavaScript Number type.
     *
     * @param {Number|String} ch1 Color channel value or {string} ch1 color value in hexadecimal, example: '#FFFFFF'.
     * @param {Number} ch2 Color channel value.
     * @param {Number} ch3 Color channel value.
     * @param {Number} ch4 Color channel value.
     *
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setFillColor
     */


    API.__private__.setFillColor = API.setFillColor = function (ch1, ch2, ch3, ch4) {
      var options = {
        "ch1": ch1,
        "ch2": ch2,
        "ch3": ch3,
        "ch4": ch4,
        "pdfColorType": "fill",
        "precision": 2
      };
      fillColor = encodeColorString(options);
      out(fillColor);
      return this;
    };

    var textColor = options.textColor || '0 g';
    /**
     * Gets the text color for upcoming elements.
     *
     * @function
     * @instance
     * @returns {string} colorAsHex
     * @memberof jsPDF#
     * @name getTextColor
     */

    var getTextColor = API.__private__.getTextColor = API.getTextColor = function () {
      return decodeColorString(textColor);
    };
    /**
     * Sets the text color for upcoming elements.
     *
     * Depending on the number of arguments given, Gray, RGB, or CMYK
     * color space is implied.
     *
     * When only ch1 is given, "Gray" color space is implied and it
     * must be a value in the range from 0.00 (solid black) to to 1.00 (white)
     * if values are communicated as String types, or in range from 0 (black)
     * to 255 (white) if communicated as Number type.
     * The RGB-like 0-255 range is provided for backward compatibility.
     *
     * When only ch1,ch2,ch3 are given, "RGB" color space is implied and each
     * value must be in the range from 0.00 (minimum intensity) to to 1.00
     * (max intensity) if values are communicated as String types, or
     * from 0 (min intensity) to to 255 (max intensity) if values are communicated
     * as Number types.
     * The RGB-like 0-255 range is provided for backward compatibility.
     *
     * When ch1,ch2,ch3,ch4 are given, "CMYK" color space is implied and each
     * value must be a in the range from 0.00 (0% concentration) to to
     * 1.00 (100% concentration)
     *
     * Because JavaScript treats fixed point numbers badly (rounds to
     * floating point nearest to binary representation) it is highly advised to
     * communicate the fractional numbers as String types, not JavaScript Number type.
     *
     * @param {Number|String} ch1 Color channel value or {string} ch1 color value in hexadecimal, example: '#FFFFFF'.
     * @param {Number} ch2 Color channel value.
     * @param {Number} ch3 Color channel value.
     * @param {Number} ch4 Color channel value.
     *
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setTextColor
     */


    API.__private__.setTextColor = API.setTextColor = function (ch1, ch2, ch3, ch4) {
      var options = {
        "ch1": ch1,
        "ch2": ch2,
        "ch3": ch3,
        "ch4": ch4,
        "pdfColorType": "text",
        "precision": 3
      };
      textColor = encodeColorString(options);
      return this;
    };

    var activeCharSpace = options.charSpace;
    /**
     * Get global value of CharSpace.
     *
     * @function
     * @instance
     * @returns {number} charSpace
     * @memberof jsPDF#
     * @name getCharSpace
     */

    var getCharSpace = API.__private__.getCharSpace = API.getCharSpace = function () {
      return parseFloat(activeCharSpace || 0);
    };
    /**
     * Set global value of CharSpace.
     *
     * @param {number} charSpace
     * @function
     * @instance
     * @returns {jsPDF} jsPDF-instance
     * @memberof jsPDF#
     * @name setCharSpace
     */


    API.__private__.setCharSpace = API.setCharSpace = function (charSpace) {
      if (isNaN(charSpace)) {
        throw new Error('Invalid argument passed to jsPDF.setCharSpace');
      }

      activeCharSpace = charSpace;
      return this;
    };

    var lineCapID = 0;
    /**
     * Is an Object providing a mapping from human-readable to
     * integer flag values designating the varieties of line cap
     * and join styles.
     *
     * @memberof jsPDF#
     * @name CapJoinStyles
     */

    API.CapJoinStyles = {
      0: 0,
      'butt': 0,
      'but': 0,
      'miter': 0,
      1: 1,
      'round': 1,
      'rounded': 1,
      'circle': 1,
      2: 2,
      'projecting': 2,
      'project': 2,
      'square': 2,
      'bevel': 2
    };
    /**
     * Sets the line cap styles.
     * See {jsPDF.CapJoinStyles} for variants.
     *
     * @param {String|Number} style A string or number identifying the type of line cap.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setLineCap
     */

    API.__private__.setLineCap = API.setLineCap = function (style) {
      var id = API.CapJoinStyles[style];

      if (id === undefined) {
        throw new Error("Line cap style of '" + style + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
      }

      lineCapID = id;
      out(id + ' J');
      return this;
    };

    var lineJoinID = 0;
    /**
     * Sets the line join styles.
     * See {jsPDF.CapJoinStyles} for variants.
     *
     * @param {String|Number} style A string or number identifying the type of line join.
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setLineJoin
     */

    API.__private__.setLineJoin = API.setLineJoin = function (style) {
      var id = API.CapJoinStyles[style];

      if (id === undefined) {
        throw new Error("Line join style of '" + style + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
      }

      lineJoinID = id;
      out(id + ' j');
      return this;
    };

    var miterLimit;
    /**
     * Sets the miterLimit property, which effects the maximum miter length.
     *
     * @param {number} length The length of the miter
     * @function
     * @instance
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setLineMiterLimit
     */

    API.__private__.setLineMiterLimit = API.__private__.setMiterLimit = API.setLineMiterLimit = API.setMiterLimit = function (length) {
      length = length || 0;

      if (isNaN(length)) {
        throw new Error('Invalid argument passed to jsPDF.setLineMiterLimit');
      }

      miterLimit = parseFloat(f2(length * scaleFactor));
      out(miterLimit + ' M');
      return this;
    };
    /**
    * GState
    */

    /**
     * An object representing a pdf graphics state.
     * @class GState
     */

    /**
    *
    * @param parameters A parameter object that contains all properties this graphics state wants to set.
    * Supported are: opacity, stroke-opacity
    * @constructor
    */


    API.GState = function (parameters) {
      /**
      * @name GState#opacity
      * @type {any}
      */

      /**
      * @name GState#stroke-opacity
      * @type {any}
      */
      var supported = "opacity,stroke-opacity".split(",");

      for (var p in parameters) {
        if (parameters.hasOwnProperty(p) && supported.indexOf(p) >= 0) {
          this[p] = parameters[p];
        }
      }
      /**
      * @name GState#id
      * @type {string}
      */


      this.id = ""; // set by addGState()

      /**
      * @name GState#objectNumber
      * @type {number}
      */

      this.objectNumber = -1; // will be set by putGState()
    };

    API.GState.prototype.equals = function equals(other) {
      var ignore = "id,objectNumber,equals";
      var p;
      if (!other || _typeof(other) !== _typeof(this)) { return false; }
      var count = 0;

      for (p in this) {
        if (ignore.indexOf(p) >= 0) { continue; }
        if (this.hasOwnProperty(p) && !other.hasOwnProperty(p)) { return false; }
        if (this[p] !== other[p]) { return false; }
        count++;
      }

      for (p in other) {
        if (other.hasOwnProperty(p) && ignore.indexOf(p) < 0) { count--; }
      }

      return count === 0;
    };
    /**
     * Sets a either previously added {@link GState} (via {@link addGState}) or a new {@link GState}.
     * @param {String|GState} gState If type is string, a previously added GState is used, if type is GState
     * it will be added before use.
     * @function
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setGState
     */


    API.setGState = function (gState) {
      if (typeof gState === "string") {
        gState = gStates[gStatesMap[gState]];
      } else {
        gState = addGState(null, gState);
      }

      if (!gState.equals(activeGState)) {
        out("/" + gState.id + " gs");
        activeGState = gState;
      }
    };
    /**
     * Adds a new Graphics State. Duplicates are automatically eliminated.
     * @param {String} key Might also be null, if no later reference to this gState is needed
     * @param {Object} gState The gState object
     */


    var addGState = function addGState(key, gState) {
      // only add it if it is not already present (the keys provided by the user must be unique!)
      if (key && gStatesMap[key]) { return; }
      var duplicate = false;

      for (var s in gStates) {
        if (gStates.hasOwnProperty(s)) {
          if (gStates[s].equals(gState)) {
            duplicate = true;
            break;
          }
        }
      }

      if (duplicate) {
        gState = gStates[s];
      } else {
        var gStateKey = "GS" + (Object.keys(gStates).length + 1).toString(10);
        gStates[gStateKey] = gState;
        gState.id = gStateKey;
      } // several user keys may point to the same GState object


      key && (gStatesMap[key] = gState.id);
      events.publish("addGState", gState);
      return gState;
    };
    /**
     * Adds a new {@link GState} for later use. See {@link setGState}.
     * @param {String} key
     * @param {GState} gState
     * @function
     * @instance
     * @returns {jsPDF}
     *
     * @memberof jsPDF#
     * @name addGState
     */


    API.addGState = function (key, gState) {
      addGState(key, gState);
      return this;
    };
    /**
     * Saves the current graphics state ("pushes it on the stack"). It can be restored by {@link restoreGraphicsState}
     * later. Here, the general pdf graphics state is meant, also including the current transformation matrix,
     * fill and stroke colors etc.
     * @function
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name saveGraphicsState
     */


    API.saveGraphicsState = function () {
      out("q"); // as we cannot set font key and size independently we must keep track of both

      fontStateStack.push({
        key: activeFontKey,
        size: activeFontSize,
        color: textColor
      });
      return this;
    };
    /**
     * Restores a previously saved graphics state saved by {@link saveGraphicsState} ("pops the stack").
     * @function
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name restoreGraphicsState
     */


    API.restoreGraphicsState = function () {
      out("Q"); // restore previous font state

      var fontState = fontStateStack.pop();
      activeFontKey = fontState.key;
      activeFontSize = fontState.size;
      textColor = fontState.color;
      activeGState = null;
      return this;
    };
    /**
     * Appends this matrix to the left of all previously applied matrices.
     *
     * @param {Matrix} matrix
     * @function
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name setCurrentTransformationMatrix
     */


    API.setCurrentTransformationMatrix = function (matrix) {
      out(matrix.toString() + " cm");
      return this;
    };
    /**
     * Inserts a debug comment into the generated pdf.
     * @function
     * @instance
     * @param {String} text
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name comment
     */


    API.comment = function (text) {
      out("#" + text);
      return this;
    };
    /**
    * Point
    */


    var Point = function Point(x, y) {
      var _x = x || 0;

      Object.defineProperty(this, 'x', {
        enumerable: true,
        get: function get() {
          return _x;
        },
        set: function set(value) {
          if (!isNaN(value)) {
            _x = parseFloat(value);
          }
        }
      });

      var _y = y || 0;

      Object.defineProperty(this, 'y', {
        enumerable: true,
        get: function get() {
          return _y;
        },
        set: function set(value) {
          if (!isNaN(value)) {
            _y = parseFloat(value);
          }
        }
      });
      var _type = 'pt';
      Object.defineProperty(this, 'type', {
        enumerable: true,
        get: function get() {
          return _type;
        },
        set: function set(value) {
          _type = value.toString();
        }
      });
      return this;
    };
    /**
    * Rectangle
    */


    var Rectangle = function Rectangle(x, y, w, h) {
      Point.call(this, x, y);
      this.type = 'rect';

      var _w = w || 0;

      Object.defineProperty(this, 'w', {
        enumerable: true,
        get: function get() {
          return _w;
        },
        set: function set(value) {
          if (!isNaN(value)) {
            _w = parseFloat(value);
          }
        }
      });

      var _h = h || 0;

      Object.defineProperty(this, 'h', {
        enumerable: true,
        get: function get() {
          return _h;
        },
        set: function set(value) {
          if (!isNaN(value)) {
            _h = parseFloat(value);
          }
        }
      });
      return this;
    };
    /**
    * FormObject/RenderTarget
    */


    var RenderTarget = function RenderTarget() {
      this.page = page;
      this.currentPage = currentPage;
      this.pages = pages.slice(0);
      this.pagesContext = pagesContext.slice(0);
      this.x = pageX;
      this.y = pageY;
      this.matrix = pageMatrix;
      this.width = getPageWidth(currentPage);
      this.height = getPageHeight(currentPage);
      this.outputDestination = outputDestination;
      this.id = ""; // set by endFormObject()

      this.objectNumber = -1; // will be set by putXObject()
    };

    RenderTarget.prototype.restore = function () {
      page = this.page;
      currentPage = this.currentPage;
      pagesContext = this.pagesContext;
      pages = this.pages;
      pageX = this.x;
      pageY = this.y;
      pageMatrix = this.matrix;
      setPageWidth(currentPage, this.width);
      setPageHeight(currentPage, this.height);
      outputDestination = this.outputDestination;
    };

    var beginNewRenderTarget = function beginNewRenderTarget(x, y, width, height, matrix) {
      // save current state
      renderTargetStack.push(new RenderTarget()); // clear pages

      page = currentPage = 0;
      pages = [];
      pageX = x;
      pageY = y;
      pageMatrix = matrix;
      beginPage([width, height]);
    };

    var endFormObject = function endFormObject(key) {
      // only add it if it is not already present (the keys provided by the user must be unique!)
      if (renderTargetMap[key]) { return; } // save the created xObject

      var newXObject = new RenderTarget();
      var xObjectId = "Xo" + (Object.keys(renderTargets).length + 1).toString(10);
      newXObject.id = xObjectId;
      renderTargetMap[key] = xObjectId;
      renderTargets[xObjectId] = newXObject;
      events.publish("addFormObject", newXObject); // restore state from stack

      renderTargetStack.pop().restore();
    };
    /**
     * Starts a new pdf form object, which means that all consequent draw calls target a new independent object
     * until {@link endFormObject} is called. The created object can be referenced and drawn later using
     * {@link doFormObject}. Nested form objects are possible.
     * x, y, width, height set the bounding box that is used to clip the content.
     *
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {Matrix} matrix The matrix that will be applied to convert the form objects coordinate system to
     * the parent's.
     * @function
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name beginFormObject
     */


    API.beginFormObject = function (x, y, width, height, matrix) {
      // The user can set the output target to a new form object. Nested form objects are possible.
      // Currently, they use the resource dictionary of the surrounding stream. This should be changed, as
      // the PDF-Spec states:
      // "In PDF 1.2 and later versions, form XObjects may be independent of the content streams in which
      // they appear, and this is strongly recommended although not requiredIn PDF 1.2 and later versions,
      // form XObjects may be independent of the content streams in which they appear, and this is strongly
      // recommended although not required"
      beginNewRenderTarget(x, y, width, height, matrix);
      return this;
    };
    /**
     * Completes and saves the form object. 
     * @param {String} key The key by which this form object can be referenced.
     * @function
     * @returns {jsPDF}
     * @memberof jsPDF#
     * @name endFormObject
     */


    API.endFormObject = function (key) {
      endFormObject(key);
      return this;
    };
    /**
    * Draws the specified form object by referencing to the respective pdf XObject created with
    * {@link API.beginFormObject} and {@link endFormObject}.
    * The location is determined by matrix.
    *
    * @param {String} key The key to the form object.
    * @param {Matrix} matrix The matrix applied before drawing the form object.
    * @function
    * @returns {jsPDF}
    * @memberof jsPDF#
    * @name doFormObject
    */


    API.doFormObject = function (key, matrix) {
      var xObject = renderTargets[renderTargetMap[key]];
      out("q");
      out(matrix.toString() + " cm");
      out("/" + xObject.id + " Do");
      out("Q");
      return this;
    };
    /**
    * Returns the form object specified by key.
    * @param key {String}
    * @returns {{x: number, y: number, width: number, height: number, matrix: Matrix}}
    * @function
    * @returns {jsPDF}
    * @memberof jsPDF#
    * @name getFormObject
    */


    API.getFormObject = function (key) {
      var xObject = renderTargets[renderTargetMap[key]];
      return {
        x: xObject.x,
        y: xObject.y,
        width: xObject.width,
        height: xObject.height,
        matrix: xObject.matrix
      };
    };
    /**
     * Saves as PDF document. An alias of jsPDF.output('save', 'filename.pdf').
     * Uses FileSaver.js-method saveAs.
     *
     * @memberof jsPDF#
     * @name save
     * @function
     * @instance
     * @param  {string} filename The filename including extension.
     * @param  {Object} options An Object with additional options, possible options: 'returnPromise'.
     * @returns {jsPDF} jsPDF-instance
     */


    API.save = function (filename, options) {
      filename = filename || 'generated.pdf';
      options = options || {};
      options.returnPromise = options.returnPromise || false;

      if (options.returnPromise === false) {
        saveAs(getBlob(buildDocument()), filename);

        if (typeof saveAs.unload === 'function') {
          if (global.setTimeout) {
            setTimeout(saveAs.unload, 911);
          }
        }
      } else {
        return new Promise(function (resolve, reject) {
          try {
            var result = saveAs(getBlob(buildDocument()), filename);

            if (typeof saveAs.unload === 'function') {
              if (global.setTimeout) {
                setTimeout(saveAs.unload, 911);
              }
            }

            resolve(result);
          } catch (e) {
            reject(e.message);
          }
        });
      }
    }; // applying plugins (more methods) ON TOP of built-in API.
    // this is intentional as we allow plugins to override
    // built-ins


    for (var plugin in jsPDF.API) {
      if (jsPDF.API.hasOwnProperty(plugin)) {
        if (plugin === 'events' && jsPDF.API.events.length) {
          (function (events, newEvents) {
            // jsPDF.API.events is a JS Array of Arrays
            // where each Array is a pair of event name, handler
            // Events were added by plugins to the jsPDF instantiator.
            // These are always added to the new instance and some ran
            // during instantiation.
            var eventname, handler_and_args, i;

            for (i = newEvents.length - 1; i !== -1; i--) {
              // subscribe takes 3 args: 'topic', function, runonce_flag
              // if undefined, runonce is false.
              // users can attach callback directly,
              // or they can attach an array with [callback, runonce_flag]
              // that's what the "apply" magic is for below.
              eventname = newEvents[i][0];
              handler_and_args = newEvents[i][1];
              events.subscribe.apply(events, [eventname].concat(typeof handler_and_args === 'function' ? [handler_and_args] : handler_and_args));
            }
          })(events, jsPDF.API.events);
        } else {
          API[plugin] = jsPDF.API[plugin];
        }
      }
    }

    var getPageWidth = API.getPageWidth = function (pageNumber) {
      pageNumber = pageNumber || currentPage;
      return (pagesContext[pageNumber].mediaBox.topRightX - pagesContext[pageNumber].mediaBox.bottomLeftX) / scaleFactor;
    };

    var setPageWidth = API.setPageWidth = function (pageNumber, value) {
      pagesContext[pageNumber].mediaBox.topRightX = value * scaleFactor + pagesContext[pageNumber].mediaBox.bottomLeftX;
    };

    var getPageHeight = API.getPageHeight = function (pageNumber) {
      pageNumber = pageNumber || currentPage;
      return (pagesContext[pageNumber].mediaBox.topRightY - pagesContext[pageNumber].mediaBox.bottomLeftY) / scaleFactor;
    };

    var setPageHeight = API.setPageHeight = function (pageNumber, value) {
      pagesContext[pageNumber].mediaBox.topRightY = value * scaleFactor + pagesContext[pageNumber].mediaBox.bottomLeftY;
    };
    /**
     * Object exposing internal API to plugins
     * @public
     * @ignore
     */


    API.internal = {
      'pdfEscape': pdfEscape,
      'getStyle': getStyle,
      'getFont': getFontEntry,
      'getFontSize': getFontSize,
      'getCharSpace': getCharSpace,
      'getTextColor': getTextColor,
      'getLineHeight': getLineHeight,
      'getLineHeightFactor': getLineHeightFactor,
      'write': write,
      'getHorizontalCoordinate': getHorizontalCoordinate,
      'getVerticalCoordinate': getVerticalCoordinate,
      'getCoordinateString': getHorizontalCoordinateString,
      'getVerticalCoordinateString': getVerticalCoordinateString,
      'collections': {},
      'newObject': newObject,
      'newAdditionalObject': newAdditionalObject,
      'newObjectDeferred': newObjectDeferred,
      'newObjectDeferredBegin': newObjectDeferredBegin,
      'getFilters': getFilters,
      'putStream': putStream,
      'events': events,
      'scaleFactor': scaleFactor,
      'pageSize': {
        getWidth: function getWidth() {
          return getPageWidth(currentPage);
        },
        setWidth: function setWidth(value) {
          setPageWidth(currentPage, value);
        },
        getHeight: function getHeight() {
          return getPageHeight(currentPage);
        },
        setHeight: function setHeight(value) {
          setPageHeight(currentPage, value);
        }
      },
      'output': output,
      'getNumberOfPages': getNumberOfPages,
      'pages': pages,
      'out': out,
      'f2': f2,
      'f3': f3,
      'getPageInfo': getPageInfo,
      'getPageInfoByObjId': getPageInfoByObjId,
      'getCurrentPageInfo': getCurrentPageInfo,
      'getPDFVersion': getPdfVersion,
      'Point': Point,
      'Rectangle': Rectangle,
      'Matrix': Matrix,
      'hasHotfix': hasHotfix //Expose the hasHotfix check so plugins can also check them.

    };
    Object.defineProperty(API.internal.pageSize, 'width', {
      get: function get() {
        return getPageWidth(currentPage);
      },
      set: function set(value) {
        setPageWidth(currentPage, value);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(API.internal.pageSize, 'height', {
      get: function get() {
        return getPageHeight(currentPage);
      },
      set: function set(value) {
        setPageHeight(currentPage, value);
      },
      enumerable: true,
      configurable: true
    }); //////////////////////////////////////////////////////
    // continuing initialization of jsPDF Document object
    //////////////////////////////////////////////////////
    // Add the first page automatically

    addFonts(standardFonts);
    activeFontKey = 'F1';

    _addPage(format, orientation);

    events.publish('initialized');
    return API;
  }
  /**
   * jsPDF.API is a STATIC property of jsPDF class.
   * jsPDF.API is an object you can add methods and properties to.
   * The methods / properties you add will show up in new jsPDF objects.
   *
   * One property is prepopulated. It is the 'events' Object. Plugin authors can add topics,
   * callbacks to this object. These will be reassigned to all new instances of jsPDF.
   *
   * @static
   * @public
   * @memberof jsPDF#
   * @name API
   *
   * @example
   * jsPDF.API.mymethod = function(){
   *   // 'this' will be ref to internal API object. see jsPDF source
   *   // , so you can refer to built-in methods like so:
   *   //     this.line(....)
   *   //     this.text(....)
   * }
   * var pdfdoc = new jsPDF()
   * pdfdoc.mymethod() // <- !!!!!!
   */


  jsPDF.API = {
    events: []
  };
  /**
   * The version of jsPDF.
   * @name version
   * @type {string}
   * @memberof jsPDF#
   */

  jsPDF.version = '1.5.3';

  if (typeof define === 'function' && define.amd) {
    define('jsPDF', function () {
      return jsPDF;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = jsPDF;
    module.exports.jsPDF = jsPDF;
  } else {
    global.jsPDF = jsPDF;
  }

  return jsPDF;
}(typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || Function('return typeof this === "object" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

/*rollup-keeper-start*/


window.tmp = jsPDF;
/*rollup-keeper-end*/

/* global jsPDF */

/** @license
 * jsPDF addImage plugin
 * Copyright (c) 2012 Jason Siefken, https://github.com/siefkenj/
 *               2013 Chris Dowling, https://github.com/gingerchris
 *               2013 Trinh Ho, https://github.com/ineedfat
 *               2013 Edwin Alejandro Perez, https://github.com/eaparango
 *               2013 Norah Smith, https://github.com/burnburnrocket
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 James Robb, https://github.com/jamesbrobb
 *
 * 
 */

/**
* @name addImage
* @module
*/
(function (jsPDFAPI) {

  var namespace = 'addImage_';
  jsPDFAPI.__addimage__ = {};
  var UNKNOWN = 'UNKNOWN';
  var imageFileTypeHeaders = {
    PNG: [[0x89, 0x50, 0x4e, 0x47]],
    TIFF: [[0x4D, 0x4D, 0x00, 0x2A], //Motorola
    [0x49, 0x49, 0x2A, 0x00] //Intel
    ],
    JPEG: [[0xFF, 0xD8, 0xFF, 0xE0, undefined, undefined, 0x4A, 0x46, 0x49, 0x46, 0x00], //JFIF
    [0xFF, 0xD8, 0xFF, 0xE1, undefined, undefined, 0x45, 0x78, 0x69, 0x66, 0x00, 0x00], //Exif
    [0xFF, 0xD8, 0xFF, 0xDB], //JPEG RAW
    [0xFF, 0xD8, 0xFF, 0xEE] //EXIF RAW
    ],
    JPEG2000: [[0x00, 0x00, 0x00, 0x0C, 0x6A, 0x50, 0x20, 0x20]],
    GIF87a: [[0x47, 0x49, 0x46, 0x38, 0x37, 0x61]],
    GIF89a: [[0x47, 0x49, 0x46, 0x38, 0x39, 0x61]],
    WEBP: [[0x52, 0x49, 0x46, 0x46, undefined, undefined, undefined, undefined, 0x57, 0x45, 0x42, 0x50]],
    BMP: [[0x42, 0x4D], //BM - Windows 3.1x, 95, NT, ... etc.
    [0x42, 0x41], //BA - OS/2 struct bitmap array
    [0x43, 0x49], //CI - OS/2 struct color icon
    [0x43, 0x50], //CP - OS/2 const color pointer
    [0x49, 0x43], //IC - OS/2 struct icon
    [0x50, 0x54] //PT - OS/2 pointer
    ]
  };
  /**
  * Recognize filetype of Image by magic-bytes
  * 
  * https://en.wikipedia.org/wiki/List_of_file_signatures
  *
  * @name getImageFileTypeByImageData
  * @public
  * @function
  * @param {string|arraybuffer} imageData imageData as binary String or arraybuffer
  * @param {string} format format of file if filetype-recognition fails, e.g. 'JPEG'
  * 
  * @returns {string} filetype of Image
  */

  var getImageFileTypeByImageData = jsPDFAPI.__addimage__.getImageFileTypeByImageData = function (imageData, fallbackFormat) {
    fallbackFormat = fallbackFormat || UNKNOWN;
    var i;
    var j;
    var result = UNKNOWN;
    var headerSchemata;
    var compareResult;
    var fileType;

    if (isArrayBufferView(imageData)) {
      for (fileType in imageFileTypeHeaders) {
        headerSchemata = imageFileTypeHeaders[fileType];

        for (i = 0; i < headerSchemata.length; i += 1) {
          compareResult = true;

          for (j = 0; j < headerSchemata[i].length; j += 1) {
            if (headerSchemata[i][j] === undefined) {
              continue;
            }

            if (headerSchemata[i][j] !== imageData[j]) {
              compareResult = false;
              break;
            }
          }

          if (compareResult === true) {
            result = fileType;
            break;
          }
        }
      }
    } else {
      for (fileType in imageFileTypeHeaders) {
        headerSchemata = imageFileTypeHeaders[fileType];

        for (i = 0; i < headerSchemata.length; i += 1) {
          compareResult = true;

          for (j = 0; j < headerSchemata[i].length; j += 1) {
            if (headerSchemata[i][j] === undefined) {
              continue;
            }

            if (headerSchemata[i][j] !== imageData.charCodeAt(j)) {
              compareResult = false;
              break;
            }
          }

          if (compareResult === true) {
            result = fileType;
            break;
          }
        }
      }
    }

    if (result === UNKNOWN && fallbackFormat !== UNKNOWN) {
      result = fallbackFormat;
    }

    return result;
  }; // Image functionality ported from pdf.js


  var putImage = function putImage(image) {
    var out = this.internal.write;
    var putStream = this.internal.putStream;
    var getFilters = this.internal.getFilters;
    var filter = getFilters();

    while (filter.indexOf('FlateEncode') !== -1) {
      filter.splice(filter.indexOf('FlateEncode'), 1);
    }

    image.objectId = this.internal.newObject();
    var additionalKeyValues = [];
    additionalKeyValues.push({
      key: 'Type',
      value: '/XObject'
    });
    additionalKeyValues.push({
      key: 'Subtype',
      value: '/Image'
    });
    additionalKeyValues.push({
      key: 'Width',
      value: image.width
    });
    additionalKeyValues.push({
      key: 'Height',
      value: image.height
    });

    if (image.colorSpace === color_spaces.INDEXED) {
      additionalKeyValues.push({
        key: 'ColorSpace',
        value: '[/Indexed /DeviceRGB ' // if an indexed png defines more than one colour with transparency, we've created a sMask
        + (image.palette.length / 3 - 1) + ' ' + ('sMask' in image && typeof image.sMask !== "undefined" ? image.objectId + 2 : image.objectId + 1) + ' 0 R]'
      });
    } else {
      additionalKeyValues.push({
        key: 'ColorSpace',
        value: '/' + image.colorSpace
      });

      if (image.colorSpace === color_spaces.DEVICE_CMYK) {
        additionalKeyValues.push({
          key: 'Decode',
          value: '[1 0 1 0 1 0 1 0]'
        });
      }
    }

    additionalKeyValues.push({
      key: 'BitsPerComponent',
      value: image.bitsPerComponent
    });

    if ('decodeParameters' in image && typeof image.decodeParameters !== "undefined") {
      additionalKeyValues.push({
        key: 'DecodeParms',
        value: '<<' + image.decodeParameters + '>>'
      });
    }

    if ('transparency' in image && Array.isArray(image.transparency)) {
      var transparency = '',
          i = 0,
          len = image.transparency.length;

      for (; i < len; i++) {
        transparency += image.transparency[i] + ' ' + image.transparency[i] + ' ';
      }

      additionalKeyValues.push({
        key: 'Mask',
        value: '[' + transparency + ']'
      });
    }

    if (typeof image.sMask !== "undefined") {
      additionalKeyValues.push({
        key: 'SMask',
        value: image.objectId + 1 + ' 0 R'
      });
    }

    var alreadyAppliedFilters = typeof image.filter !== "undefined" ? ['/' + image.filter] : undefined;
    putStream({
      data: image.data,
      additionalKeyValues: additionalKeyValues,
      alreadyAppliedFilters: alreadyAppliedFilters
    });
    out('endobj'); // Soft mask

    if ('sMask' in image && typeof image.sMask !== "undefined") {
      var decodeParameters = '/Predictor ' + image.predictor + ' /Colors 1 /BitsPerComponent ' + image.bitsPerComponent + ' /Columns ' + image.width;
      var sMask = {
        width: image.width,
        height: image.height,
        colorSpace: 'DeviceGray',
        bitsPerComponent: image.bitsPerComponent,
        decodeParameters: decodeParameters,
        data: image.sMask
      };

      if ('filter' in image) {
        sMask.filter = image.filter;
      }

      putImage.call(this, sMask);
    } //Palette


    if (image.colorSpace === color_spaces.INDEXED) {
      this.internal.newObject(); //out('<< /Filter / ' + img['f'] +' /Length ' + img['pal'].length + '>>');
      //putStream(zlib.compress(img['pal']));

      putStream({
        data: arrayBufferToBinaryString(new Uint8Array(image.palette))
      });
      out('endobj');
    }
  };

  var putResourcesCallback = function putResourcesCallback() {
    var images = this.internal.collections[namespace + 'images'];

    for (var i in images) {
      putImage.call(this, images[i]);
    }
  };

  var putXObjectsDictCallback = function putXObjectsDictCallback() {
    var images = this.internal.collections[namespace + 'images'],
        out = this.internal.write,
        image;

    for (var i in images) {
      image = images[i];
      out('/I' + image.index, image.objectId, '0', 'R');
    }
  };

  var checkCompressValue = function checkCompressValue(value) {
    if (value && typeof value === 'string') { value = value.toUpperCase(); }
    return value in jsPDFAPI.image_compression ? value : image_compression.NONE;
  };

  var initialize = function initialize() {
    if (!this.internal.collections[namespace + 'images']) {
      this.internal.collections[namespace + 'images'] = {};
      this.internal.events.subscribe('putResources', putResourcesCallback);
      this.internal.events.subscribe('putXobjectDict', putXObjectsDictCallback);
    }
  };

  var getImages = function getImages() {
    var images = this.internal.collections[namespace + 'images'];
    initialize.call(this);
    return images;
  };

  var getImageIndex = function getImageIndex() {
    return Object.keys(this.internal.collections[namespace + 'images']).length;
  };

  var notDefined = function notDefined(value) {
    return typeof value === 'undefined' || value === null || value.length === 0;
  };

  var generateAliasFromImageData = function generateAliasFromImageData(imageData) {
    if (typeof imageData === 'string' || isArrayBufferView(imageData)) {
      return sHashCode(imageData);
    }

    return null;
  };

  var isImageTypeSupported = function isImageTypeSupported(type) {
    return typeof jsPDFAPI["process" + type.toUpperCase()] === "function";
  };

  var isDOMElement = function isDOMElement(object) {
    return _typeof(object) === 'object' && object.nodeType === 1;
  };

  var getImageDataFromElement = function getImageDataFromElement(element, format) {
    //if element is an image which uses data url definition, just return the dataurl
    if (element.nodeName === 'IMG' && element.hasAttribute('src')) {
      var src = '' + element.getAttribute('src'); //is base64 encoded dataUrl, directly process it

      if (src.indexOf('data:image/') === 0) {
        return atob(unescape(src).split('base64,').pop());
      } //it is probably an url, try to load it


      var tmpImageData = jsPDFAPI.loadFile(src, true);

      if (tmpImageData !== undefined) {
        return tmpImageData;
      }
    }

    if (element.nodeName === 'CANVAS') {
      var mimeType;

      switch (format) {
        case 'PNG':
          mimeType = 'image/png';
          break;

        case 'WEBP':
          mimeType = 'image/webp';
          break;

        case 'JPEG':
        case 'JPG':
        default:
          mimeType = 'image/jpeg';
          break;
      }

      return atob(element.toDataURL(mimeType, 1.0).split('base64,').pop());
    }
  };

  var checkImagesForAlias = function checkImagesForAlias(alias) {
    var images = this.internal.collections[namespace + 'images'];

    if (images) {
      for (var e in images) {
        if (alias === images[e].alias) {
          return images[e];
        }
      }
    }
  };

  var determineWidthAndHeight = function determineWidthAndHeight(width, height, image) {
    if (!width && !height) {
      width = -96;
      height = -96;
    }

    if (width < 0) {
      width = -1 * image.width * 72 / width / this.internal.scaleFactor;
    }

    if (height < 0) {
      height = -1 * image.height * 72 / height / this.internal.scaleFactor;
    }

    if (width === 0) {
      width = height * image.width / image.height;
    }

    if (height === 0) {
      height = width * image.height / image.width;
    }

    return [width, height];
  };

  var writeImageToPDF = function writeImageToPDF(x, y, width, height, image, rotation) {
    var dims = determineWidthAndHeight.call(this, width, height, image),
        coord = this.internal.getCoordinateString,
        vcoord = this.internal.getVerticalCoordinateString;
    var images = getImages.call(this);
    width = dims[0];
    height = dims[1];
    images[image.index] = image;

    if (rotation) {
      rotation *= Math.PI / 180;
      var c = Math.cos(rotation);
      var s = Math.sin(rotation); //like in pdf Reference do it 4 digits instead of 2

      var f4 = function f4(number) {
        return number.toFixed(4);
      };

      var rotationTransformationMatrix = [f4(c), f4(s), f4(s * -1), f4(c), 0, 0, 'cm'];
    }

    this.internal.write('q'); //Save graphics state

    if (rotation) {
      this.internal.write([1, '0', '0', 1, coord(x), vcoord(y + height), 'cm'].join(' ')); //Translate

      this.internal.write(rotationTransformationMatrix.join(' ')); //Rotate

      this.internal.write([coord(width), '0', '0', coord(height), '0', '0', 'cm'].join(' ')); //Scale
    } else {
      this.internal.write([coord(width), '0', '0', coord(height), coord(x), vcoord(y + height), 'cm'].join(' ')); //Translate and Scale
    }

    this.internal.write('/I' + image.index + ' Do'); //Paint Image

    this.internal.write('Q'); //Restore graphics state
  };
  /**
   * COLOR SPACES
   */


  var color_spaces = jsPDFAPI.color_spaces = {
    DEVICE_RGB: 'DeviceRGB',
    DEVICE_GRAY: 'DeviceGray',
    DEVICE_CMYK: 'DeviceCMYK',
    CAL_GREY: 'CalGray',
    CAL_RGB: 'CalRGB',
    LAB: 'Lab',
    ICC_BASED: 'ICCBased',
    INDEXED: 'Indexed',
    PATTERN: 'Pattern',
    SEPARATION: 'Separation',
    DEVICE_N: 'DeviceN'
  };
  /**
   * DECODE METHODS
   */

  jsPDFAPI.decode = {
    DCT_DECODE: 'DCTDecode',
    FLATE_DECODE: 'FlateDecode',
    LZW_DECODE: 'LZWDecode',
    JPX_DECODE: 'JPXDecode',
    JBIG2_DECODE: 'JBIG2Decode',
    ASCII85_DECODE: 'ASCII85Decode',
    ASCII_HEX_DECODE: 'ASCIIHexDecode',
    RUN_LENGTH_DECODE: 'RunLengthDecode',
    CCITT_FAX_DECODE: 'CCITTFaxDecode'
  };
  /**
   * IMAGE COMPRESSION TYPES
   */

  var image_compression = jsPDFAPI.image_compression = {
    NONE: 'NONE',
    FAST: 'FAST',
    MEDIUM: 'MEDIUM',
    SLOW: 'SLOW'
  };
  /**
  * @name sHashCode
  * @function 
  * @param {string} data
  * @returns {string} 
  */

  var sHashCode = jsPDFAPI.__addimage__.sHashCode = function (data) {
    var hash = 0,
        i,
        len;

    if (typeof data === "string") {
      len = data.length;

      for (i = 0; i < len; i++) {
        hash = (hash << 5) - hash + data.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }
    } else if (isArrayBufferView(data)) {
      len = data.byteLength / 2;

      for (i = 0; i < len; i++) {
        hash = (hash << 5) - hash + data[i];
        hash |= 0; // Convert to 32bit integer
      }
    }

    return hash;
  };
  /**
  * Validates if given String is a valid Base64-String
  *
  * @name validateStringAsBase64
  * @public
  * @function
  * @param {String} possible Base64-String
  * 
  * @returns {boolean}
  */


  var validateStringAsBase64 = jsPDFAPI.__addimage__.validateStringAsBase64 = function (possibleBase64String) {
    possibleBase64String = possibleBase64String || '';
    possibleBase64String.toString().trim();
    var result = true;

    if (possibleBase64String.length === 0) {
      result = false;
    }

    if (possibleBase64String.length % 4 !== 0) {
      result = false;
    }

    if (/^[A-Za-z0-9+/]+$/.test(possibleBase64String.substr(0, possibleBase64String.length - 2)) === false) {
      result = false;
    }

    if (/^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(possibleBase64String.substr(-2)) === false) {
      result = false;
    }

    return result;
  };
  /**
   * Strips out and returns info from a valid base64 data URI
   *
   * @name extractImageFromDataUrl
   * @function 
   * @param {string} dataUrl a valid data URI of format 'data:[<MIME-type>][;base64],<data>'
   * @returns {Array}an Array containing the following
   * [0] the complete data URI
   * [1] <MIME-type>
   * [2] format - the second part of the mime-type i.e 'png' in 'image/png'
   * [4] <data>
   */


  var extractImageFromDataUrl = jsPDFAPI.__addimage__.extractImageFromDataUrl = function (dataUrl) {
    dataUrl = dataUrl || '';
    var dataUrlParts = dataUrl.split('base64,');
    var result = null;

    if (dataUrlParts.length === 2) {
      var extractedInfo = /^data:(\w*\/\w*);*(charset=[\w=-]*)*;*$/.exec(dataUrlParts[0]);

      if (Array.isArray(extractedInfo)) {
        result = {
          mimeType: extractedInfo[1],
          charset: extractedInfo[2],
          data: dataUrlParts[1]
        };
      }
    }

    return result;
  };
  /**
   * Check to see if ArrayBuffer is supported
   * 
   * @name supportsArrayBuffer
   * @function
   * @returns {boolean}
   */


  var supportsArrayBuffer = jsPDFAPI.__addimage__.supportsArrayBuffer = function () {
    return typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined';
  };
  /**
   * Tests supplied object to determine if ArrayBuffer
   *
   * @name isArrayBuffer
   * @function 
   * @param {Object} object an Object
   * 
   * @returns {boolean}
   */


  jsPDFAPI.__addimage__.isArrayBuffer = function (object) {
    return supportsArrayBuffer() && object instanceof ArrayBuffer;
  };
  /**
   * Tests supplied object to determine if it implements the ArrayBufferView (TypedArray) interface
   *
   * @name isArrayBufferView
   * @function 
   * @param {Object} object an Object
   * @returns {boolean}
   */


  var isArrayBufferView = jsPDFAPI.__addimage__.isArrayBufferView = function (object) {
    return supportsArrayBuffer() && typeof Uint32Array !== 'undefined' && (object instanceof Int8Array || object instanceof Uint8Array || typeof Uint8ClampedArray !== 'undefined' && object instanceof Uint8ClampedArray || object instanceof Int16Array || object instanceof Uint16Array || object instanceof Int32Array || object instanceof Uint32Array || object instanceof Float32Array || object instanceof Float64Array);
  };
  /**
  * Convert Binary String to ArrayBuffer
  *
  * @name binaryStringToUint8Array
  * @public
  * @function
  * @param {string} BinaryString with ImageData
  * @returns {Uint8Array}
  */


  var binaryStringToUint8Array = jsPDFAPI.__addimage__.binaryStringToUint8Array = function (binary_string) {
    var len = binary_string.length;
    var bytes = new Uint8Array(len);

    for (var i = 0; i < len; i++) {
      bytes[i] = binary_string.charCodeAt(i);
    }

    return bytes;
  };
  /**
  * Convert the Buffer to a Binary String
  *
  * @name arrayBufferToBinaryString
  * @public
  * @function
  * @param {ArrayBuffer} ArrayBuffer with ImageData
  * 
  * @returns {String}
  */


  var arrayBufferToBinaryString = jsPDFAPI.__addimage__.arrayBufferToBinaryString = function (buffer) {
    try {
      return atob(btoa(String.fromCharCode.apply(null, buffer)));
    } catch (e) {
      if (typeof Uint8Array !== 'undefined' && typeof Uint8Array.prototype.reduce !== 'undefined') {
        return new Uint8Array(buffer).reduce(function (data, _byte) {
          return data.push(String.fromCharCode(_byte)), data;
        }, []).join('');
      }
    }
  };
  /**
  * Adds an Image to the PDF.
  *
  * @name addImage
  * @public
  * @function
  * @param {string|HTMLImageElement|HTMLCanvasElement|Uint8Array} imageData imageData as base64 encoded DataUrl or Image-HTMLElement or Canvas-HTMLElement
  * @param {string} format format of file if filetype-recognition fails or in case of a Canvas-Element needs to be specified (default for Canvas is JPEG), e.g. 'JPEG', 'PNG', 'WEBP'
  * @param {number} x x Coordinate (in units declared at inception of PDF document) against left edge of the page
  * @param {number} y y Coordinate (in units declared at inception of PDF document) against upper edge of the page
  * @param {number} width width of the image (in units declared at inception of PDF document)
  * @param {number} height height of the Image (in units declared at inception of PDF document)
  * @param {string} alias alias of the image (if used multiple times)
  * @param {string} compression compression of the generated JPEG, can have the values 'NONE', 'FAST', 'MEDIUM' and 'SLOW'
  * @param {number} rotation rotation of the image in degrees (0-359)
  * 
  * @returns jsPDF
  */


  jsPDFAPI.addImage = function () {
    var imageData, format, x, y, w, h, alias, compression, rotation;
    imageData = arguments[0];

    if (typeof arguments[1] === 'number') {
      format = UNKNOWN;
      x = arguments[1];
      y = arguments[2];
      w = arguments[3];
      h = arguments[4];
      alias = arguments[5];
      compression = arguments[6];
      rotation = arguments[7];
    } else {
      format = arguments[1];
      x = arguments[2];
      y = arguments[3];
      w = arguments[4];
      h = arguments[5];
      alias = arguments[6];
      compression = arguments[7];
      rotation = arguments[8];
    }

    if (_typeof(imageData) === 'object' && !isDOMElement(imageData) && "imageData" in imageData) {
      var options = imageData;
      imageData = options.imageData;
      format = options.format || format || UNKNOWN;
      x = options.x || x || 0;
      y = options.y || y || 0;
      w = options.w || options.width || w;
      h = options.h || options.height || h;
      alias = options.alias || alias;
      compression = options.compression || compression;
      rotation = options.rotation || options.angle || rotation;
    } //If compression is not explicitly set, determine if we should use compression


    var filter = this.internal.getFilters();

    if (compression === undefined && filter.indexOf('FlateEncode') !== -1) {
      compression = 'SLOW';
    }

    if (isNaN(x) || isNaN(y)) {
      throw new Error('Invalid coordinates passed to jsPDF.addImage');
    }

    initialize.call(this);
    var image = processImageData.call(this, imageData, format, alias, compression);
    writeImageToPDF.call(this, x, y, w, h, image, rotation);
    return this;
  };

  var processImageData = function processImageData(imageData, format, alias, compression) {
    var result, dataAsBinaryString;

    if (typeof imageData === "string" && getImageFileTypeByImageData(imageData) === UNKNOWN) {
      imageData = unescape(imageData);
      var tmpImageData = convertBase64ToBinaryString(imageData, false);

      if (tmpImageData !== '') {
        imageData = tmpImageData;
      } else {
        tmpImageData = jsPDFAPI.loadFile(imageData, true);

        if (tmpImageData !== undefined) {
          imageData = tmpImageData;
        }
      }
    }

    if (isDOMElement(imageData)) {
      imageData = getImageDataFromElement(imageData, format);
    }

    format = getImageFileTypeByImageData(imageData, format);

    if (!isImageTypeSupported(format)) {
      throw new Error('addImage does not support files of type \'' + format + '\', please ensure that a plugin for \'' + format + '\' support is added.');
    } // now do the heavy lifting


    if (notDefined(alias)) {
      alias = generateAliasFromImageData(imageData);
    }

    result = checkImagesForAlias.call(this, alias);

    if (!result) {
      if (supportsArrayBuffer()) {
        // no need to convert if imageData is already uint8array
        if (!(imageData instanceof Uint8Array)) {
          dataAsBinaryString = imageData;
          imageData = binaryStringToUint8Array(imageData);
        }
      }

      result = this['process' + format.toUpperCase()](imageData, getImageIndex.call(this), alias, checkCompressValue(compression), dataAsBinaryString);
    }

    if (!result) {
      throw new Error('An unknown error occurred whilst processing the image.');
    }

    return result;
  };
  /**
  * @name convertBase64ToBinaryString
  * @function
  * @param {string} stringData
  * @returns {string} binary string
  */


  var convertBase64ToBinaryString = jsPDFAPI.__addimage__.convertBase64ToBinaryString = function (stringData, throwError) {
    throwError = typeof throwError === "boolean" ? throwError : true;
    var base64Info;
    var imageData = '';
    var rawData;

    if (typeof stringData === 'string') {
      base64Info = extractImageFromDataUrl(stringData);
      rawData = base64Info !== null ? base64Info.data : stringData;

      try {
        imageData = atob(rawData);
      } catch (e) {
        if (throwError) {
          if (!validateStringAsBase64(rawData)) {
            throw new Error('Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ');
          } else {
            throw new Error('atob-Error in jsPDF.convertBase64ToBinaryString ' + e.message);
          }
        }
      }
    }

    return imageData;
  };
  /**
  * @name getImageProperties
  * @function
  * @param {Object} imageData
  * @returns {Object}
  */


  jsPDFAPI.getImageProperties = function (imageData) {
    var image;
    var tmpImageData = '';
    var format;

    if (isDOMElement(imageData)) {
      imageData = getImageDataFromElement(imageData);
    }

    if (typeof imageData === "string" && getImageFileTypeByImageData(imageData) === UNKNOWN) {
      tmpImageData = convertBase64ToBinaryString(imageData, false);

      if (tmpImageData === '') {
        tmpImageData = jsPDFAPI.loadFile(imageData) || '';
      }

      imageData = tmpImageData;
    }

    format = getImageFileTypeByImageData(imageData);

    if (!isImageTypeSupported(format)) {
      throw new Error('addImage does not support files of type \'' + format + '\', please ensure that a plugin for \'' + format + '\' support is added.');
    }

    if (supportsArrayBuffer() && !(imageData instanceof Uint8Array)) {
      imageData = binaryStringToUint8Array(imageData);
    }

    image = this['process' + format.toUpperCase()](imageData);

    if (!image) {
      throw new Error('An unknown error occurred whilst processing the image');
    }

    image.fileType = format;
    return image;
  };
})(jsPDF.API);

/* global jsPDF */

/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
 * jsPDF Annotations PlugIn
 *
 * There are many types of annotations in a PDF document. Annotations are placed
 * on a page at a particular location. They are not 'attached' to an object.
 * <br />
 * This plugin current supports <br />
 * <li> Goto Page (set pageNumber and top in options)
 * <li> Goto Name (set name and top in options)
 * <li> Goto URL (set url in options)
 * <p>
 * 	The destination magnification factor can also be specified when goto is a page number or a named destination. (see documentation below)
 *  (set magFactor in options).  XYZ is the default.
 * </p>
 * <p>
 *  Links, Text, Popup, and FreeText are supported.
 * </p>
 * <p>
 * Options In PDF spec Not Implemented Yet
 * <li> link border
 * <li> named target
 * <li> page coordinates
 * <li> destination page scaling and layout
 * <li> actions other than URL and GotoPage
 * <li> background / hover actions
 * </p>
 * @name annotations
 * @module
 */

/*
    Destination Magnification Factors
    See PDF 1.3 Page 386 for meanings and options

    [supported]
	XYZ (options; left top zoom)
	Fit (no options)
	FitH (options: top)
	FitV (options: left)

	[not supported]
	FitR
	FitB
	FitBH
	FitBV
 */
(function (jsPDFAPI) {

  var notEmpty = function notEmpty(obj) {
    if (typeof obj != 'undefined') {
      if (obj != '') {
        return true;
      }
    }
  };

  jsPDF.API.events.push(['addPage', function (addPageData) {
    var pageInfo = this.internal.getPageInfo(addPageData.pageNumber);
    pageInfo.pageContext.annotations = [];
  }]);
  jsPDFAPI.events.push(['putPage', function (putPageData) {
    var getHorizontalCoordinateString = this.internal.getCoordinateString;
    var getVerticalCoordinateString = this.internal.getVerticalCoordinateString;
    var pageInfo = this.internal.getPageInfoByObjId(putPageData.objId);
    var pageAnnos = putPageData.pageContext.annotations;
    var anno, rect, line;
    var found = false;

    for (var a = 0; a < pageAnnos.length && !found; a++) {
      anno = pageAnnos[a];

      switch (anno.type) {
        case 'link':
          if (notEmpty(anno.options.url) || notEmpty(anno.options.pageNumber)) {
            found = true;
          }

          break;

        case 'reference':
        case 'text':
        case 'freetext':
          found = true;
          break;
      }
    }

    if (found == false) {
      return;
    }

    this.internal.write("/Annots [");

    for (var i = 0; i < pageAnnos.length; i++) {
      anno = pageAnnos[i];

      switch (anno.type) {
        case 'reference':
          // References to Widget Annotations (for AcroForm Fields)
          this.internal.write(' ' + anno.object.objId + ' 0 R ');
          break;

        case 'text':
          // Create a an object for both the text and the popup
          var objText = this.internal.newAdditionalObject();
          var objPopup = this.internal.newAdditionalObject();
          var title = anno.title || 'Note';
          rect = "/Rect [" + getHorizontalCoordinateString(anno.bounds.x) + " " + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + " " + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w) + " " + getVerticalCoordinateString(anno.bounds.y) + "] ";
          line = '<</Type /Annot /Subtype /' + 'Text' + ' ' + rect + '/Contents (' + anno.contents + ')';
          line += ' /Popup ' + objPopup.objId + " 0 R";
          line += ' /P ' + pageInfo.objId + " 0 R";
          line += ' /T (' + title + ') >>';
          objText.content = line;
          var parent = objText.objId + ' 0 R';
          var popoff = 30;
          rect = "/Rect [" + getHorizontalCoordinateString(anno.bounds.x + popoff) + " " + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + " " + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w + popoff) + " " + getVerticalCoordinateString(anno.bounds.y) + "] ";
          line = '<</Type /Annot /Subtype /' + 'Popup' + ' ' + rect + ' /Parent ' + parent;

          if (anno.open) {
            line += ' /Open true';
          }

          line += ' >>';
          objPopup.content = line;
          this.internal.write(objText.objId, '0 R', objPopup.objId, '0 R');
          break;

        case 'freetext':
          rect = "/Rect [" + getHorizontalCoordinateString(anno.bounds.x) + " " + getVerticalCoordinateString(anno.bounds.y) + " " + getHorizontalCoordinateString(anno.bounds.x + anno.bounds.w) + " " + getVerticalCoordinateString(anno.bounds.y + anno.bounds.h) + "] ";
          var color = anno.color || '#000000';
          line = '<</Type /Annot /Subtype /' + 'FreeText' + ' ' + rect + '/Contents (' + anno.contents + ')';
          line += ' /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#' + color + ')';
          line += ' /Border [0 0 0]';
          line += ' >>';
          this.internal.write(line);
          break;

        case 'link':
          if (anno.options.name) {
            var loc = this.annotations._nameMap[anno.options.name];
            anno.options.pageNumber = loc.page;
            anno.options.top = loc.y;
          } else {
            if (!anno.options.top) {
              anno.options.top = 0;
            }
          }

          rect = "/Rect [" + getHorizontalCoordinateString(anno.x) + " " + getVerticalCoordinateString(anno.y) + " " + getHorizontalCoordinateString(anno.x + anno.w) + " " + getVerticalCoordinateString(anno.y + anno.h) + "] ";
          line = '';

          if (anno.options.url) {
            line = '<</Type /Annot /Subtype /Link ' + rect + '/Border [0 0 0] /A <</S /URI /URI (' + anno.options.url + ') >>';
          } else if (anno.options.pageNumber) {
            // first page is 0
            var info = this.internal.getPageInfo(anno.options.pageNumber);
            line = '<</Type /Annot /Subtype /Link ' + rect + '/Border [0 0 0] /Dest [' + info.objId + " 0 R";
            anno.options.magFactor = anno.options.magFactor || "XYZ";

            switch (anno.options.magFactor) {
              case 'Fit':
                line += ' /Fit]';
                break;

              case 'FitH':
                line += ' /FitH ' + anno.options.top + ']';
                break;

              case 'FitV':
                anno.options.left = anno.options.left || 0;
                line += ' /FitV ' + anno.options.left + ']';
                break;

              case 'XYZ':
              default:
                var top = getVerticalCoordinateString(anno.options.top);
                anno.options.left = anno.options.left || 0; // 0 or null zoom will not change zoom factor

                if (typeof anno.options.zoom === 'undefined') {
                  anno.options.zoom = 0;
                }

                line += ' /XYZ ' + anno.options.left + ' ' + top + ' ' + anno.options.zoom + ']';
                break;
            }
          }

          if (line != '') {
            line += " >>";
            this.internal.write(line);
          }

          break;
      }
    }

    this.internal.write("]");
  }]);
  /**
  * @name createAnnotation
  * @function
  * @param {Object} options 
  */

  jsPDFAPI.createAnnotation = function (options) {
    var pageInfo = this.internal.getCurrentPageInfo();

    switch (options.type) {
      case 'link':
        this.link(options.bounds.x, options.bounds.y, options.bounds.w, options.bounds.h, options);
        break;

      case 'text':
      case 'freetext':
        pageInfo.pageContext.annotations.push(options);
        break;
    }
  };
  /**
   * Create a link
   *
   * valid options
   * <li> pageNumber or url [required]
   * <p>If pageNumber is specified, top and zoom may also be specified</p>
   * @name link
   * @function
   * @param {number} x
   * @param {number} y
   * @param {number} w
   * @param {number} h
   * @param {Object} options
   */


  jsPDFAPI.link = function (x, y, w, h, options) {
    var pageInfo = this.internal.getCurrentPageInfo();
    pageInfo.pageContext.annotations.push({
      x: x,
      y: y,
      w: w,
      h: h,
      options: options,
      type: 'link'
    });
  };
  /**
   * Currently only supports single line text.
   * Returns the width of the text/link
   *
   * @name textWithLink
   * @function
   * @param {string} text
   * @param {number} x
   * @param {number} y
   * @param {Object} options
   * @returns {number} width the width of the text/link
   */


  jsPDFAPI.textWithLink = function (text, x, y, options) {
    var width = this.getTextWidth(text);
    var height = this.internal.getLineHeight() / this.internal.scaleFactor;
    this.text(text, x, y, options); //TODO We really need the text baseline height to do this correctly.
    // Or ability to draw text on top, bottom, center, or baseline.

    y += height * .2;
    this.link(x, y - height, width, height, options);
    return width;
  }; //TODO move into external library

  /**
  * @name getTextWidth
  * @function
  * @param {string} text
  * @returns {number} txtWidth
  */


  jsPDFAPI.getTextWidth = function (text) {
    var fontSize = this.internal.getFontSize();
    var txtWidth = this.getStringUnitWidth(text) * fontSize / this.internal.scaleFactor;
    return txtWidth;
  };

  return this;
})(jsPDF.API);

/* global jsPDF */

/**
 * @license
 * Copyright (c) 2017 Aras Abbasi 
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* jsPDF arabic parser PlugIn
*
* @name arabic
* @module
*/
(function (jsPDFAPI) {
  /**
   * Arabic shape substitutions: char code => (isolated, final, initial, medial).
   * Arabic Substition A
   */

  var arabicSubstitionA = {
    0x0621: [0xFE80],
    // ARABIC LETTER HAMZA 
    0x0622: [0xFE81, 0xFE82],
    // ARABIC LETTER ALEF WITH MADDA ABOVE
    0x0623: [0xFE83, 0xFE84],
    // ARABIC LETTER ALEF WITH HAMZA ABOVE
    0x0624: [0xFE85, 0xFE86],
    // ARABIC LETTER WAW WITH HAMZA ABOVE
    0x0625: [0xFE87, 0xFE88],
    // ARABIC LETTER ALEF WITH HAMZA BELOW
    0x0626: [0xFE89, 0xFE8A, 0xFE8B, 0xFE8C],
    // ARABIC LETTER YEH WITH HAMZA ABOVE 
    0x0627: [0xFE8D, 0xFE8E],
    // ARABIC LETTER ALEF
    0x0628: [0xFE8F, 0xFE90, 0xFE91, 0xFE92],
    // ARABIC LETTER BEH
    0x0629: [0xFE93, 0xFE94],
    // ARABIC LETTER TEH MARBUTA 
    0x062A: [0xFE95, 0xFE96, 0xFE97, 0xFE98],
    // ARABIC LETTER TEH
    0x062B: [0xFE99, 0xFE9A, 0xFE9B, 0xFE9C],
    // ARABIC LETTER THEH
    0x062C: [0xFE9D, 0xFE9E, 0xFE9F, 0xFEA0],
    // ARABIC LETTER JEEM
    0x062D: [0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4],
    // ARABIC LETTER HAH
    0x062E: [0xFEA5, 0xFEA6, 0xFEA7, 0xFEA8],
    // ARABIC LETTER KHAH
    0x062F: [0xFEA9, 0xFEAA],
    // ARABIC LETTER DAL
    0x0630: [0xFEAB, 0xFEAC],
    // ARABIC LETTER THAL
    0x0631: [0xFEAD, 0xFEAE],
    // ARABIC LETTER REH
    0x0632: [0xFEAF, 0xFEB0],
    // ARABIC LETTER ZAIN
    0x0633: [0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4],
    // ARABIC LETTER SEEN
    0x0634: [0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8],
    // ARABIC LETTER SHEEN 
    0x0635: [0xFEB9, 0xFEBA, 0xFEBB, 0xFEBC],
    // ARABIC LETTER SAD
    0x0636: [0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0],
    // ARABIC LETTER DAD
    0x0637: [0xFEC1, 0xFEC2, 0xFEC3, 0xFEC4],
    // ARABIC LETTER TAH
    0x0638: [0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8],
    // ARABIC LETTER ZAH
    0x0639: [0xFEC9, 0xFECA, 0xFECB, 0xFECC],
    // ARABIC LETTER AIN
    0x063A: [0xFECD, 0xFECE, 0xFECF, 0xFED0],
    // ARABIC LETTER GHAIN 
    0x0641: [0xFED1, 0xFED2, 0xFED3, 0xFED4],
    // ARABIC LETTER FEH
    0x0642: [0xFED5, 0xFED6, 0xFED7, 0xFED8],
    // ARABIC LETTER QAF
    0x0643: [0xFED9, 0xFEDA, 0xFEDB, 0xFEDC],
    // ARABIC LETTER KAF
    0x0644: [0xFEDD, 0xFEDE, 0xFEDF, 0xFEE0],
    // ARABIC LETTER LAM
    0x0645: [0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4],
    // ARABIC LETTER MEEM
    0x0646: [0xFEE5, 0xFEE6, 0xFEE7, 0xFEE8],
    // ARABIC LETTER NOON 
    0x0647: [0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC],
    // ARABIC LETTER HEH
    0x0648: [0xFEED, 0xFEEE],
    // ARABIC LETTER WAW
    0x0649: [0xFEEF, 0xFEF0, 64488, 64489],
    // ARABIC LETTER ALEF MAKSURA 
    0x064A: [0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4],
    // ARABIC LETTER YEH
    0x0671: [0xFB50, 0xFB51],
    // ARABIC LETTER ALEF WASLA
    0x0677: [0xFBDD],
    // ARABIC LETTER U WITH HAMZA ABOVE
    0x0679: [0xFB66, 0xFB67, 0xFB68, 0xFB69],
    // ARABIC LETTER TTEH
    0x067A: [0xFB5E, 0xFB5F, 0xFB60, 0xFB61],
    // ARABIC LETTER TTEHEH
    0x067B: [0xFB52, 0xFB53, 0xFB54, 0xFB55],
    // ARABIC LETTER BEEH
    0x067E: [0xFB56, 0xFB57, 0xFB58, 0xFB59],
    // ARABIC LETTER PEH 
    0x067F: [0xFB62, 0xFB63, 0xFB64, 0xFB65],
    // ARABIC LETTER TEHEH
    0x0680: [0xFB5A, 0xFB5B, 0xFB5C, 0xFB5D],
    // ARABIC LETTER BEHEH
    0x0683: [0xFB76, 0xFB77, 0xFB78, 0xFB79],
    // ARABIC LETTER NYEH
    0x0684: [0xFB72, 0xFB73, 0xFB74, 0xFB75],
    // ARABIC LETTER DYEH
    0x0686: [0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D],
    // ARABIC LETTER TCHEH
    0x0687: [0xFB7E, 0xFB7F, 0xFB80, 0xFB81],
    // ARABIC LETTER TCHEHEH
    0x0688: [0xFB88, 0xFB89],
    // ARABIC LETTER DDAL
    0x068C: [0xFB84, 0xFB85],
    // ARABIC LETTER DAHAL
    0x068D: [0xFB82, 0xFB83],
    // ARABIC LETTER DDAHAL
    0x068E: [0xFB86, 0xFB87],
    // ARABIC LETTER DUL 
    0x0691: [0xFB8C, 0xFB8D],
    // ARABIC LETTER RREH
    0x0698: [0xFB8A, 0xFB8B],
    // ARABIC LETTER JEH
    0x06A4: [0xFB6A, 0xFB6B, 0xFB6C, 0xFB6D],
    // ARABIC LETTER VEH
    0x06A6: [0xFB6E, 0xFB6F, 0xFB70, 0xFB71],
    // ARABIC LETTER PEHEH
    0x06A9: [0xFB8E, 0xFB8F, 0xFB90, 0xFB91],
    // ARABIC LETTER KEHEH
    0x06AD: [0xFBD3, 0xFBD4, 0xFBD5, 0xFBD6],
    // ARABIC LETTER NG
    0x06AF: [0xFB92, 0xFB93, 0xFB94, 0xFB95],
    // ARABIC LETTER GAF
    0x06B1: [0xFB9A, 0xFB9B, 0xFB9C, 0xFB9D],
    // ARABIC LETTER NGOEH
    0x06B3: [0xFB96, 0xFB97, 0xFB98, 0xFB99],
    // ARABIC LETTER GUEH
    0x06BA: [0xFB9E, 0xFB9F],
    // ARABIC LETTER NOON GHUNNA
    0x06BB: [0xFBA0, 0xFBA1, 0xFBA2, 0xFBA3],
    // ARABIC LETTER RNOON
    0x06BE: [0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD],
    // ARABIC LETTER HEH DOACHASHMEE
    0x06C0: [0xFBA4, 0xFBA5],
    // ARABIC LETTER HEH WITH YEH ABOVE
    0x06C1: [0xFBA6, 0xFBA7, 0xFBA8, 0xFBA9],
    // ARABIC LETTER HEH GOAL
    0x06C5: [0xFBE0, 0xFBE1],
    // ARABIC LETTER KIRGHIZ OE
    0x06C6: [0xFBD9, 0xFBDA],
    // ARABIC LETTER OE
    0x06C7: [0xFBD7, 0xFBD8],
    // ARABIC LETTER U
    0x06C8: [0xFBDB, 0xFBDC],
    // ARABIC LETTER YU
    0x06C9: [0xFBE2, 0xFBE3],
    // ARABIC LETTER KIRGHIZ YU
    0x06CB: [0xFBDE, 0xFBDF],
    // ARABIC LETTER VE
    0x06CC: [0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF],
    // ARABIC LETTER FARSI YEH
    0x06D0: [0xFBE4, 0xFBE5, 0xFBE6, 0xFBE7],
    //ARABIC LETTER E
    0x06D2: [0xFBAE, 0xFBAF],
    // ARABIC LETTER YEH BARREE
    0x06D3: [0xFBB0, 0xFBB1] // ARABIC LETTER YEH BARREE WITH HAMZA ABOVE

  };
  /*
  var ligaturesSubstitutionA = {
      0xFBEA: []// ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM
  };
  */

  var ligatures = {
    0xFEDF: {
      0xFE82: 0xFEF5,
      // ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM
      0xFE84: 0xFEF7,
      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM
      0xFE88: 0xFEF9,
      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM
      0xFE8E: 0xFEFB // ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM

    },
    0xFEE0: {
      0xFE82: 0xFEF6,
      // ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM
      0xFE84: 0xFEF8,
      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM
      0xFE88: 0xFEFA,
      // ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM
      0xFE8E: 0xFEFC // ARABIC LIGATURE LAM WITH ALEF FINAL FORM

    },
    0xFE8D: {
      0xFEDF: {
        0xFEE0: {
          0xFEEA: 0xFDF2
        }
      }
    },
    // ALLAH
    0x0651: {
      0x064C: 0xFC5E,
      // Shadda + Dammatan
      0x064D: 0xFC5F,
      // Shadda + Kasratan
      0x064E: 0xFC60,
      // Shadda + Fatha
      0x064F: 0xFC61,
      // Shadda + Damma
      0x0650: 0xFC62 // Shadda + Kasra

    }
  };
  var arabic_diacritics = {
    1612: 64606,
    // Shadda + Dammatan
    1613: 64607,
    // Shadda + Kasratan
    1614: 64608,
    // Shadda + Fatha
    1615: 64609,
    // Shadda + Damma
    1616: 64610 // Shadda + Kasra

  };
  var alfletter = [1570, 1571, 1573, 1575];
  var noChangeInForm = -1;
  var isolatedForm = 0;
  var finalForm = 1;
  var initialForm = 2;
  var medialForm = 3;
  jsPDFAPI.__arabicParser__ = {}; //private

  var isInArabicSubstitutionA = jsPDFAPI.__arabicParser__.isInArabicSubstitutionA = function (letter) {
    return typeof arabicSubstitionA[letter.charCodeAt(0)] !== "undefined";
  };

  var isArabicLetter = jsPDFAPI.__arabicParser__.isArabicLetter = function (letter) {
    return typeof letter === "string" && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(letter);
  };

  var isArabicEndLetter = jsPDFAPI.__arabicParser__.isArabicEndLetter = function (letter) {
    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length <= 2;
  };

  var isArabicAlfLetter = jsPDFAPI.__arabicParser__.isArabicAlfLetter = function (letter) {
    return isArabicLetter(letter) && alfletter.indexOf(letter.charCodeAt(0)) >= 0;
  };

  jsPDFAPI.__arabicParser__.arabicLetterHasIsolatedForm = function (letter) {
    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 1;
  };

  var arabicLetterHasFinalForm = jsPDFAPI.__arabicParser__.arabicLetterHasFinalForm = function (letter) {
    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 2;
  };

  jsPDFAPI.__arabicParser__.arabicLetterHasInitialForm = function (letter) {
    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length >= 3;
  };

  var arabicLetterHasMedialForm = jsPDFAPI.__arabicParser__.arabicLetterHasMedialForm = function (letter) {
    return isArabicLetter(letter) && isInArabicSubstitutionA(letter) && arabicSubstitionA[letter.charCodeAt(0)].length == 4;
  };

  var resolveLigatures = jsPDFAPI.__arabicParser__.resolveLigatures = function (letters) {
    var i = 0;
    var tmpLigatures = ligatures;
    var result = '';
    var effectedLetters = 0;

    for (i = 0; i < letters.length; i += 1) {
      if (typeof tmpLigatures[letters.charCodeAt(i)] !== "undefined") {
        effectedLetters++;
        tmpLigatures = tmpLigatures[letters.charCodeAt(i)];

        if (typeof tmpLigatures === "number") {
          result += String.fromCharCode(tmpLigatures);
          tmpLigatures = ligatures;
          effectedLetters = 0;
        }

        if (i === letters.length - 1) {
          tmpLigatures = ligatures;
          result += letters.charAt(i - (effectedLetters - 1));
          i = i - (effectedLetters - 1);
          effectedLetters = 0;
        }
      } else {
        tmpLigatures = ligatures;
        result += letters.charAt(i - effectedLetters);
        i = i - effectedLetters;
        effectedLetters = 0;
      }
    }

    return result;
  };

  jsPDFAPI.__arabicParser__.isArabicDiacritic = function (letter) {
    return letter !== undefined && arabic_diacritics[letter.charCodeAt(0)] !== undefined;
  };

  var getCorrectForm = jsPDFAPI.__arabicParser__.getCorrectForm = function (currentChar, beforeChar, nextChar) {
    if (!isArabicLetter(currentChar)) {
      return -1;
    }

    if (isInArabicSubstitutionA(currentChar) === false) {
      return noChangeInForm;
    }

    if (!arabicLetterHasFinalForm(currentChar) || !isArabicLetter(beforeChar) && !isArabicLetter(nextChar) || !isArabicLetter(nextChar) && isArabicEndLetter(beforeChar) || isArabicEndLetter(currentChar) && !isArabicLetter(beforeChar) || isArabicEndLetter(currentChar) && isArabicAlfLetter(beforeChar) || isArabicEndLetter(currentChar) && isArabicEndLetter(beforeChar)) {
      return isolatedForm;
    }

    if (arabicLetterHasMedialForm(currentChar) && isArabicLetter(beforeChar) && !isArabicEndLetter(beforeChar) && isArabicLetter(nextChar) && arabicLetterHasFinalForm(nextChar)) {
      return medialForm;
    }

    if (isArabicEndLetter(currentChar) || !isArabicLetter(nextChar)) {
      return finalForm;
    }

    return initialForm;
  };
  /**
  * @name processArabic
  * @function
  * @param {string} text
  * @returns {string}
  */


  var parseArabic = function parseArabic(text) {
    text = text || "";
    var result = "";
    var i = 0;
    var j = 0;
    var position = 0;
    var currentLetter = "";
    var prevLetter = "";
    var nextLetter = "";
    var words = text.split("\\s+");
    var newWords = [];

    for (i = 0; i < words.length; i += 1) {
      newWords.push('');

      for (j = 0; j < words[i].length; j += 1) {
        currentLetter = words[i][j];
        prevLetter = words[i][j - 1];
        nextLetter = words[i][j + 1];

        if (isArabicLetter(currentLetter)) {
          position = getCorrectForm(currentLetter, prevLetter, nextLetter);

          if (position !== -1) {
            newWords[i] += String.fromCharCode(arabicSubstitionA[currentLetter.charCodeAt(0)][position]);
          } else {
            newWords[i] += currentLetter;
          }
        } else {
          newWords[i] += currentLetter;
        }
      }

      newWords[i] = resolveLigatures(newWords[i]);
    }

    result = newWords.join(' ');
    return result;
  };

  var processArabic = jsPDFAPI.__arabicParser__.processArabic = jsPDFAPI.processArabic = function () {
    var text = typeof arguments[0] === 'string' ? arguments[0] : arguments[0].text;
    var tmpText = [];
    var result;

    if (Array.isArray(text)) {
      var i = 0;
      tmpText = [];

      for (i = 0; i < text.length; i += 1) {
        if (Array.isArray(text[i])) {
          tmpText.push([parseArabic(text[i][0]), text[i][1], text[i][2]]);
        } else {
          tmpText.push([parseArabic(text[i])]);
        }
      }

      result = tmpText;
    } else {
      result = parseArabic(text);
    }

    if (typeof arguments[0] === 'string') {
      return result;
    } else {
      arguments[0].text = result;
      return arguments[0];
    }
  };

  jsPDFAPI.events.push(['preProcessText', processArabic]);
})(jsPDF.API);

/* global jsPDF */

/** @license
 * jsPDF Autoprint Plugin
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* @name autoprint
* @module
*/
(function (jsPDFAPI) {
  /**
  * Makes the PDF automatically open the print-Dialog when opened in a PDF-viewer.
  *
  * @name autoPrint
  * @function
  * @param {Object} options (optional) Set the attribute variant to 'non-conform' (default) or 'javascript' to activate different methods of automatic printing when opening in a PDF-viewer .
  * @returns {jsPDF}
  * @example
  * var doc = new jsPDF();
  * doc.text(10, 10, 'This is a test');
  * doc.autoPrint({variant: 'non-conform'});
  * doc.save('autoprint.pdf');
  */

  jsPDFAPI.autoPrint = function (options) {

    var refAutoPrintTag;
    options = options || {};
    options.variant = options.variant || 'non-conform';

    switch (options.variant) {
      case 'javascript':
        //https://github.com/Rob--W/pdf.js/commit/c676ecb5a0f54677b9f3340c3ef2cf42225453bb
        this.addJS('print({});');
        break;

      case 'non-conform':
      default:
        this.internal.events.subscribe('postPutResources', function () {
          refAutoPrintTag = this.internal.newObject();
          this.internal.out("<<");
          this.internal.out("/S /Named");
          this.internal.out("/Type /Action");
          this.internal.out("/N /Print");
          this.internal.out(">>");
          this.internal.out("endobj");
        });
        this.internal.events.subscribe("putCatalog", function () {
          this.internal.out("/OpenAction " + refAutoPrintTag + " 0 R");
        });
        break;
    }

    return this;
  };
})(jsPDF.API);

/* global jsPDF */

/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
 * jsPDF Canvas PlugIn
 * This plugin mimics the HTML5 Canvas
 * 
 * The goal is to provide a way for current canvas users to print directly to a PDF.
 * @name canvas
 * @module
 */
(function (jsPDFAPI) {
  /**
  * @class Canvas
  * @classdesc A Canvas Wrapper for jsPDF
  */

  var Canvas = function Canvas() {
    var jsPdfInstance = undefined;
    Object.defineProperty(this, 'pdf', {
      get: function get() {
        return jsPdfInstance;
      },
      set: function set(value) {
        jsPdfInstance = value;
      }
    });
    var _width = 150;
    /**
    * The height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.
    * This is one of the two properties, the other being width, that controls the size of the canvas.
    *
    * @name width
    */

    Object.defineProperty(this, 'width', {
      get: function get() {
        return _width;
      },
      set: function set(value) {
        if (isNaN(value) || Number.isInteger(value) === false || value < 0) {
          _width = 150;
        } else {
          _width = value;
        }

        if (this.getContext('2d').pageWrapXEnabled) {
          this.getContext('2d').pageWrapX = _width + 1;
        }
      }
    });
    var _height = 300;
    /**
    * The width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.
    * This is one of the two properties, the other being height, that controls the size of the canvas.
    *
    * @name height
    */

    Object.defineProperty(this, 'height', {
      get: function get() {
        return _height;
      },
      set: function set(value) {
        if (isNaN(value) || Number.isInteger(value) === false || value < 0) {
          _height = 300;
        } else {
          _height = value;
        }

        if (this.getContext('2d').pageWrapYEnabled) {
          this.getContext('2d').pageWrapY = _height + 1;
        }
      }
    });
    var _childNodes = [];
    Object.defineProperty(this, 'childNodes', {
      get: function get() {
        return _childNodes;
      },
      set: function set(value) {
        _childNodes = value;
      }
    });
    var _style = {};
    Object.defineProperty(this, 'style', {
      get: function get() {
        return _style;
      },
      set: function set(value) {
        _style = value;
      }
    });
    Object.defineProperty(this, 'parentNode', {});
  };
  /**
  * The getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.
  * 
  * @name getContext
  * @function
  * @param {string} contextType Is a String containing the context identifier defining the drawing context associated to the canvas. Possible value is "2d", leading to the creation of a Context2D object representing a two-dimensional rendering context.
  * @param {object} contextAttributes
  */


  Canvas.prototype.getContext = function (contextType, contextAttributes) {
    contextType = contextType || '2d';
    var key;

    if (contextType !== '2d') {
      return null;
    }

    for (key in contextAttributes) {
      if (this.pdf.context2d.hasOwnProperty(key)) {
        this.pdf.context2d[key] = contextAttributes[key];
      }
    }

    this.pdf.context2d._canvas = this;
    return this.pdf.context2d;
  };
  /**
  * The toDataURL() method is just a stub to throw an error if accidently called.
  * 
  * @name toDataURL
  * @function
  */


  Canvas.prototype.toDataURL = function () {
    throw new Error('toDataURL is not implemented.');
  };

  jsPDFAPI.events.push(['initialized', function () {
    this.canvas = new Canvas();
    this.canvas.pdf = this;
  }]);
  return this;
})(jsPDF.API);

/*global jsPDF */

/** 
 * @license
 * ====================================================================
 * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com
 *               2013 Eduardo Menezes de Morais, eduardo.morais@usp.br
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Hall, james@parall.ax
 *               2014 Diego Casorran, https://github.com/diegocr
 *
 * 
 * ====================================================================
 */

/**
* @name cell
* @module
*/
(function (jsPDFAPI) {

  var NO_MARGINS = {
    left: 0,
    top: 0,
    bottom: 0,
    right: 0
  };
  var px2pt = 0.264583 * 72 / 25.4;
  var printingHeaderRow = false;

  var _initialize = function _initialize() {
    if (typeof this.internal.__cell__ === "undefined") {
      this.internal.__cell__ = {};
      this.internal.__cell__.padding = 3;
      this.internal.__cell__.headerFunction = undefined;
      this.internal.__cell__.margins = Object.assign({}, NO_MARGINS);
      this.internal.__cell__.margins.width = this.getPageWidth();

      _reset.call(this);
    }
  };

  var _reset = function _reset() {
    this.internal.__cell__.lastCell = new Cell();
    this.internal.__cell__.pages = 1;
  };

  var Cell = function Cell() {
    var _x = arguments[0];
    Object.defineProperty(this, 'x', {
      enumerable: true,
      get: function get() {
        return _x;
      },
      set: function set(value) {
        _x = value;
      }
    });
    var _y = arguments[1];
    Object.defineProperty(this, 'y', {
      enumerable: true,
      get: function get() {
        return _y;
      },
      set: function set(value) {
        _y = value;
      }
    });
    var _width = arguments[2];
    Object.defineProperty(this, 'width', {
      enumerable: true,
      get: function get() {
        return _width;
      },
      set: function set(value) {
        _width = value;
      }
    });
    var _height = arguments[3];
    Object.defineProperty(this, 'height', {
      enumerable: true,
      get: function get() {
        return _height;
      },
      set: function set(value) {
        _height = value;
      }
    });
    var _text = arguments[4];
    Object.defineProperty(this, 'text', {
      enumerable: true,
      get: function get() {
        return _text;
      },
      set: function set(value) {
        _text = value;
      }
    });
    var _lineNumber = arguments[5];
    Object.defineProperty(this, 'lineNumber', {
      enumerable: true,
      get: function get() {
        return _lineNumber;
      },
      set: function set(value) {
        _lineNumber = value;
      }
    });
    var _align = arguments[6];
    Object.defineProperty(this, 'align', {
      enumerable: true,
      get: function get() {
        return _align;
      },
      set: function set(value) {
        _align = value;
      }
    });
    return this;
  };

  Cell.prototype.clone = function () {
    return new Cell(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
  };

  Cell.prototype.toArray = function () {
    return [this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align];
  };
  /**
  * @name setHeaderFunction
  * @function
  * @param {function} func
  */


  jsPDFAPI.setHeaderFunction = function (func) {
    _initialize.call(this);

    this.internal.__cell__.headerFunction = typeof func === 'function' ? func : undefined;
    return this;
  };
  /**
  * @name getTextDimensions
  * @function
  * @param {string} txt
  * @returns {Object} dimensions
  */


  jsPDFAPI.getTextDimensions = function (text, options) {
    _initialize.call(this);

    options = options || {};
    var fontSize = options.fontSize || this.getFontSize();
    var font = options.font || this.getFont();
    var scaleFactor = options.scaleFactor || this.internal.scaleFactor;
    var width = 0;
    var amountOfLines = 0;
    var height = 0;
    var tempWidth = 0;

    if (!Array.isArray(text) && typeof text !== 'string') {
      throw new Error('getTextDimensions expects text-parameter to be of type String or an Array of Strings.');
    }

    text = Array.isArray(text) ? text : [text];

    for (var i = 0; i < text.length; i++) {
      tempWidth = this.getStringUnitWidth(text[i], {
        font: font
      }) * fontSize;

      if (width < tempWidth) {
        width = tempWidth;
      }

      if (width !== 0) {
        amountOfLines = text.length;
      }
    }

    width = width / scaleFactor;
    height = Math.max((amountOfLines * fontSize * this.getLineHeightFactor() - fontSize * (this.getLineHeightFactor() - 1)) / scaleFactor, 0);
    return {
      w: width,
      h: height
    };
  };
  /**
  * @name cellAddPage
  * @function
  */


  jsPDFAPI.cellAddPage = function () {
    _initialize.call(this);

    this.addPage();
    var margins = this.internal.__cell__.margins || NO_MARGINS;
    this.internal.__cell__.lastCell = new Cell(margins.left, margins.top, undefined, undefined);
    this.internal.__cell__.pages += 1;
    return this;
  };
  /**
  * @name cellInitialize
  * @function
  * @deprecated
  */


  jsPDFAPI.cellInitialize = function () {
    _initialize.call(this);

    _reset.call(this);
  };
  /**
  * @name cell
  * @function
  * @param {number} x
  * @param {number} y
  * @param {number} width
  * @param {number} height
  * @param {string} text
  * @param {number} lineNumber lineNumber
  * @param {string} align
  * @return {jsPDF} jsPDF-instance
  */


  var cell = jsPDFAPI.cell = function () {
    var currentCell;

    if (arguments[0] instanceof Cell) {
      currentCell = arguments[0];
    } else {
      currentCell = new Cell(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
    }

    _initialize.call(this);

    var lastCell = this.internal.__cell__.lastCell;
    var padding = this.internal.__cell__.padding;
    var margins = this.internal.__cell__.margins || NO_MARGINS;
    var tableHeaderRow = this.internal.__cell__.tableHeaderRow;
    var printHeaders = this.internal.__cell__.printHeaders; // If this is not the first cell, we must change its position

    if (typeof lastCell.lineNumber !== 'undefined') {
      if (lastCell.lineNumber === currentCell.lineNumber) {
        //Same line
        currentCell.x = (lastCell.x || 0) + (lastCell.width || 0);
        currentCell.y = lastCell.y || 0;
      } else {
        //New line
        if (lastCell.y + lastCell.height + currentCell.height + margins.bottom > this.getPageHeight()) {
          this.cellAddPage();
          currentCell.y = margins.top;

          if (printHeaders && tableHeaderRow) {
            this.printHeaderRow(currentCell.lineNumber, true);
            currentCell.y += tableHeaderRow[0].height;
          }
        } else {
          currentCell.y = lastCell.y + lastCell.height || currentCell.y;
        }
      }
    }

    if (typeof currentCell.text[0] !== 'undefined') {
      this.rect(currentCell.x, currentCell.y, currentCell.width, currentCell.height, printingHeaderRow === true ? 'FD' : undefined);

      if (currentCell.align === 'right') {
        this.text(currentCell.text, currentCell.x + currentCell.width - padding, currentCell.y + padding, {
          align: 'right',
          baseline: 'top'
        });
      } else if (currentCell.align === 'center') {
        this.text(currentCell.text, currentCell.x + currentCell.width / 2, currentCell.y + padding, {
          align: 'center',
          baseline: 'top',
          maxWidth: currentCell.width - padding - padding
        });
      } else {
        this.text(currentCell.text, currentCell.x + padding, currentCell.y + padding, {
          align: 'left',
          baseline: 'top',
          maxWidth: currentCell.width - padding - padding
        });
      }
    }

    this.internal.__cell__.lastCell = currentCell;
    return this;
  };
  /**
   * Create a table from a set of data.
   * @name table
   * @function
   * @param {Integer} [x] : left-position for top-left corner of table
   * @param {Integer} [y] top-position for top-left corner of table
   * @param {Object[]} [data] An array of objects containing key-value pairs corresponding to a row of data.
   * @param {String[]} [headers] Omit or null to auto-generate headers at a performance cost
    * @param {Object} [config.printHeaders] True to print column headers at the top of every page
   * @param {Object} [config.autoSize] True to dynamically set the column widths to match the widest cell value
   * @param {Object} [config.margins] margin values for left, top, bottom, and width
   * @param {Object} [config.fontSize] Integer fontSize to use (optional)
   * @param {Object} [config.padding] cell-padding in pt to use (optional)
   * @param {Object} [config.headerBackgroundColor] default is #c8c8c8 (optional)
   * @returns {jsPDF} jsPDF-instance
   */


  jsPDFAPI.table = function (x, y, data, headers, config) {
    _initialize.call(this);

    if (!data) {
      throw new Error('No data for PDF table.');
    }

    config = config || {};
    var headerNames = [],
        headerLabels = [],
        headerAligns = [],
        i,
        columnMatrix = {},
        columnWidths = {},
        column,
        columnMinWidths = [],
        j,
        tableHeaderConfigs = [],
        //set up defaults. If a value is provided in config, defaults will be overwritten:
    autoSize = config.autoSize || false,
        printHeaders = config.printHeaders === false ? false : true,
        fontSize = config.css && typeof config.css['font-size'] !== "undefined" ? config.css['font-size'] * 16 : config.fontSize || 12,
        margins = config.margins || Object.assign({
      width: this.getPageWidth()
    }, NO_MARGINS),
        padding = typeof config.padding === 'number' ? config.padding : 3,
        headerBackgroundColor = config.headerBackgroundColor || '#c8c8c8';

    _reset.call(this);

    this.internal.__cell__.printHeaders = printHeaders;
    this.internal.__cell__.margins = margins;
    this.internal.__cell__.table_font_size = fontSize;
    this.internal.__cell__.padding = padding;
    this.internal.__cell__.headerBackgroundColor = headerBackgroundColor;
    this.setFontSize(fontSize); // Set header values

    if (headers === undefined || headers === null) {
      // No headers defined so we derive from data
      headerNames = Object.keys(data[0]);
      headerLabels = headerNames;
      headerAligns = headerNames.map(function () {
        return 'left';
      });
    } else if (Array.isArray(headers) && _typeof(headers[0]) === 'object') {
      headerNames = headers.map(function (header) {
        return header.name;
      });
      headerLabels = headers.map(function (header) {
        return header.prompt || header.name || '';
      });
      headerAligns = headerNames.map(function (header) {
        return header.align || 'left';
      }); // Split header configs into names and prompts

      for (i = 0; i < headers.length; i += 1) {
        columnWidths[headers[i].name] = headers[i].width * px2pt;
      }
    } else if (Array.isArray(headers) && typeof headers[0] === 'string') {
      headerNames = headers;
      headerLabels = headerNames;
      headerAligns = headerNames.map(function () {
        return 'left';
      });
    }

    if (autoSize) {
      var headerName;

      for (i = 0; i < headerNames.length; i += 1) {
        headerName = headerNames[i]; // Create a matrix of columns e.g., {column_title: [row1_Record, row2_Record]}

        columnMatrix[headerName] = data.map(function (rec) {
          return rec[headerName];
        }); // get header width

        this.setFontStyle('bold');
        columnMinWidths.push(this.getTextDimensions(headerLabels[i], {
          fontSize: this.internal.__cell__.table_font_size,
          scaleFactor: this.internal.scaleFactor
        }).w);
        column = columnMatrix[headerName]; // get cell widths

        this.setFontStyle('normal');

        for (j = 0; j < column.length; j += 1) {
          columnMinWidths.push(this.getTextDimensions(column[j], {
            fontSize: this.internal.__cell__.table_font_size,
            scaleFactor: this.internal.scaleFactor
          }).w);
        } // get final column width


        columnWidths[headerName] = Math.max.apply(null, columnMinWidths) + padding + padding; //have to reset

        columnMinWidths = [];
      }
    } // -- Construct the table


    if (printHeaders) {
      var row = {};

      for (i = 0; i < headerNames.length; i += 1) {
        row[headerNames[i]] = {};
        row[headerNames[i]].text = headerLabels[i];
        row[headerNames[i]].align = headerAligns[i];
      }

      var rowHeight = calculateLineHeight.call(this, row, columnWidths); // Construct the header row

      tableHeaderConfigs = headerNames.map(function (value) {
        return new Cell(x, y, columnWidths[value], rowHeight, row[value].text, undefined, row[value].align);
      }); // Store the table header config

      this.setTableHeaderRow(tableHeaderConfigs); // Print the header for the start of the table

      this.printHeaderRow(1, false);
    } // Construct the data rows


    var align = headers.reduce(function (pv, cv) {
      pv[cv.name] = cv.align;
      return pv;
    }, {});

    for (i = 0; i < data.length; i += 1) {
      var lineHeight = calculateLineHeight.call(this, data[i], columnWidths);

      for (j = 0; j < headerNames.length; j += 1) {
        cell.call(this, new Cell(x, y, columnWidths[headerNames[j]], lineHeight, data[i][headerNames[j]], i + 2, align[headerNames[j]]));
      }
    }

    this.internal.__cell__.table_x = x;
    this.internal.__cell__.table_y = y;
    return this;
  };
  /**
   * Calculate the height for containing the highest column
   *
   * @name calculateLineHeight
   * @function
   * @param {Object[]} model is the line of data we want to calculate the height of
   * @param {Integer[]} columnWidths is size of each column
   * @returns {number} lineHeight
  * @private
   */


  var calculateLineHeight = function calculateLineHeight(model, columnWidths) {
    var padding = this.internal.__cell__.padding;
    var fontSize = this.internal.__cell__.table_font_size;
    var scaleFactor = this.internal.scaleFactor;
    return Object.keys(model).map(function (value) {
      return _typeof(value) === 'object' ? value.text : value;
    }).map(function (value) {
      return this.splitTextToSize(value, columnWidths[value] - padding - padding);
    }, this).map(function (value) {
      return this.getLineHeightFactor() * value.length * fontSize / scaleFactor + padding + padding;
    }, this).reduce(function (pv, cv) {
      return Math.max(pv, cv);
    }, 0);
  };
  /**
  * Store the config for outputting a table header
  *
  * @name setTableHeaderRow
  * @function
  * @param {Object[]} config
  * An array of cell configs that would define a header row: Each config matches the config used by jsPDFAPI.cell
  * except the lineNumber parameter is excluded
  */


  jsPDFAPI.setTableHeaderRow = function (config) {
    _initialize.call(this);

    this.internal.__cell__.tableHeaderRow = config;
  };
  /**
   * Output the store header row
   * 
   * @name printHeaderRow
   * @function
   * @param {number} lineNumber The line number to output the header at
   * @param {boolean} new_page 
   */


  jsPDFAPI.printHeaderRow = function (lineNumber, new_page) {
    _initialize.call(this);

    if (!this.internal.__cell__.tableHeaderRow) {
      throw new Error('Property tableHeaderRow does not exist.');
    }

    var tableHeaderCell;
    printingHeaderRow = true;

    if (typeof this.internal.__cell__.headerFunction === 'function') {
      var position = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);

      this.internal.__cell__.lastCell = new Cell(position[0], position[1], position[2], position[3], undefined, -1);
    }

    this.setFontStyle('bold');
    var tempHeaderConf = [];

    for (var i = 0; i < this.internal.__cell__.tableHeaderRow.length; i += 1) {
      tableHeaderCell = this.internal.__cell__.tableHeaderRow[i].clone();

      if (new_page) {
        tableHeaderCell.y = this.internal.__cell__.margins.top || 0;
        tempHeaderConf.push(tableHeaderCell);
      }

      tableHeaderCell.lineNumber = lineNumber;
      this.setFillColor(this.internal.__cell__.headerBackgroundColor);
      cell.call(this, tableHeaderCell);
    }

    if (tempHeaderConf.length > 0) {
      this.setTableHeaderRow(tempHeaderConf);
    }

    this.setFontStyle('normal');
    printingHeaderRow = false;
  };
})(jsPDF.API);

/* eslint-disable no-fallthrough */

/* eslint-disable no-console */

/* global jsPDF, RGBColor */

/**
 * jsPDF Context2D PlugIn Copyright (c) 2014 Steven Spungin (TwelveTone LLC) steven@twelvetone.tv
 *
 * Licensed under the MIT License. http://opensource.org/licenses/mit-license
 */

/**
* This plugin mimics the HTML5 CanvasRenderingContext2D.
*
* The goal is to provide a way for current canvas implementations to print directly to a PDF.
*
* @name context2d
* @module
*/
(function (jsPDFAPI) {

  var ContextLayer = function ContextLayer(ctx) {
    ctx = ctx || {};
    this.isStrokeTransparent = ctx.isStrokeTransparent || false;
    this.strokeOpacity = ctx.strokeOpacity || 1;
    this.strokeStyle = ctx.strokeStyle || '#000000';
    this.fillStyle = ctx.fillStyle || '#000000';
    this.isFillTransparent = ctx.isFillTransparent || false;
    this.fillOpacity = ctx.fillOpacity || 1;
    this.font = ctx.font || '10px sans-serif';
    this.textBaseline = ctx.textBaseline || 'alphabetic';
    this.textAlign = ctx.textAlign || 'left';
    this.lineWidth = ctx.lineWidth || 1;
    this.lineJoin = ctx.lineJoin || 'miter';
    this.lineCap = ctx.lineCap || 'butt';
    this.path = ctx.path || [];
    this.transform = typeof ctx.transform !== 'undefined' ? ctx.transform.clone() : new Matrix();
    this.globalCompositeOperation = ctx.globalCompositeOperation || 'normal';
    this.globalAlpha = ctx.globalAlpha || 1.0;
    this.clip_path = ctx.clip_path || [];
    this.currentPoint = ctx.currentPoint || new Point();
    this.miterLimit = ctx.miterLimit || 10.0;
    this.lastPoint = ctx.lastPoint || new Point();
    this.ignoreClearRect = typeof ctx.ignoreClearRect === "boolean" ? ctx.ignoreClearRect : true;
    return this;
  }; //stub


  var f2, getHorizontalCoordinateString, getVerticalCoordinateString, getHorizontalCoordinate, getVerticalCoordinate, Point, Rectangle, Matrix, _ctx;

  jsPDFAPI.events.push(['initialized', function () {
    this.context2d = new Context2D(this);
    f2 = this.internal.f2;
    getHorizontalCoordinateString = this.internal.getCoordinateString;
    getVerticalCoordinateString = this.internal.getVerticalCoordinateString;
    getHorizontalCoordinate = this.internal.getHorizontalCoordinate;
    getVerticalCoordinate = this.internal.getVerticalCoordinate;
    Point = this.internal.Point;
    Rectangle = this.internal.Rectangle;
    Matrix = this.internal.Matrix;
    _ctx = new ContextLayer();
  }]);

  var Context2D = function Context2D(pdf) {
    Object.defineProperty(this, 'canvas', {
      get: function get() {
        return {
          parentNode: false,
          style: false
        };
      }
    });
    var _pdf = pdf;
    Object.defineProperty(this, 'pdf', {
      get: function get() {
        return _pdf;
      }
    });
    var _pageWrapXEnabled = false;
    /**
    * @name pageWrapXEnabled
    * @type {boolean}
    * @default false
    */

    Object.defineProperty(this, 'pageWrapXEnabled', {
      get: function get() {
        return _pageWrapXEnabled;
      },
      set: function set(value) {
        _pageWrapXEnabled = Boolean(value);
      }
    });
    var _pageWrapYEnabled = false;
    /**
    * @name pageWrapYEnabled
    * @type {boolean}
    * @default true
    */

    Object.defineProperty(this, 'pageWrapYEnabled', {
      get: function get() {
        return _pageWrapYEnabled;
      },
      set: function set(value) {
        _pageWrapYEnabled = Boolean(value);
      }
    });
    var _posX = 0;
    /**
    * @name posX
    * @type {number}
    * @default 0
    */

    Object.defineProperty(this, 'posX', {
      get: function get() {
        return _posX;
      },
      set: function set(value) {
        if (!isNaN(value)) {
          _posX = value;
        }
      }
    });
    var _posY = 0;
    /**
    * @name posY
    * @type {number}
    * @default 0
    */

    Object.defineProperty(this, 'posY', {
      get: function get() {
        return _posY;
      },
      set: function set(value) {
        if (!isNaN(value)) {
          _posY = value;
        }
      }
    });
    var _autoPaging = false;
    /**
    * @name autoPaging
    * @type {boolean}
    * @default true
    */

    Object.defineProperty(this, 'autoPaging', {
      get: function get() {
        return _autoPaging;
      },
      set: function set(value) {
        _autoPaging = Boolean(value);
      }
    });
    var lastBreak = 0;
    /**
    * @name lastBreak
    * @type {number}
    * @default 0
    */

    Object.defineProperty(this, 'lastBreak', {
      get: function get() {
        return lastBreak;
      },
      set: function set(value) {
        lastBreak = value;
      }
    });
    var pageBreaks = [];
    /**
    * Y Position of page breaks.
    * @name pageBreaks
    * @type {number}
    * @default 0
    */

    Object.defineProperty(this, 'pageBreaks', {
      get: function get() {
        return pageBreaks;
      },
      set: function set(value) {
        pageBreaks = value;
      }
    });
    /**
    * @name ctx
    * @type {object}
    * @default {}
    */

    Object.defineProperty(this, 'ctx', {
      get: function get() {
        return _ctx;
      },
      set: function set(value) {
        if (value instanceof ContextLayer) {
          _ctx = value;
        }
      }
    });
    /**
    * @name path
    * @type {array}
    * @default []
    */

    Object.defineProperty(this, 'path', {
      get: function get() {
        return _ctx.path;
      },
      set: function set(value) {
        _ctx.path = value;
      }
    });
    /**
    * @name ctxStack
    * @type {array}
    * @default []
    */

    var _ctxStack = [];
    Object.defineProperty(this, 'ctxStack', {
      get: function get() {
        return _ctxStack;
      },
      set: function set(value) {
        _ctxStack = value;
      }
    });
    /**
    * Sets or returns the color, gradient, or pattern used to fill the drawing
    *
    * @name fillStyle
    * @default #000000
    * @property {(color|gradient|pattern)} value The color of the drawing. Default value is #000000<br />
    * A gradient object (linear or radial) used to fill the drawing (not supported by context2d)<br />
    * A pattern object to use to fill the drawing (not supported by context2d)
    */

    Object.defineProperty(this, 'fillStyle', {
      get: function get() {
        return this.ctx.fillStyle;
      },
      set: function set(value) {
        var rgba;
        rgba = getRGBA(value);
        this.ctx.fillStyle = rgba.style;
        this.ctx.isFillTransparent = rgba.a === 0;
        this.ctx.fillOpacity = rgba.a;
        this.pdf.setFillColor(rgba.r, rgba.g, rgba.b, {
          a: rgba.a
        });
        this.pdf.setTextColor(rgba.r, rgba.g, rgba.b, {
          a: rgba.a
        });
      }
    });
    /**
    * Sets or returns the color, gradient, or pattern used for strokes
    *
    * @name strokeStyle
    * @default #000000
    * @property {color} color A CSS color value that indicates the stroke color of the drawing. Default value is #000000 (not supported by context2d)
    * @property {gradient} gradient A gradient object (linear or radial) used to create a gradient stroke (not supported by context2d)
    * @property {pattern} pattern A pattern object used to create a pattern stroke (not supported by context2d)
    */

    Object.defineProperty(this, 'strokeStyle', {
      get: function get() {
        return this.ctx.strokeStyle;
      },
      set: function set(value) {
        var rgba = getRGBA(value);
        this.ctx.strokeStyle = rgba.style;
        this.ctx.isStrokeTransparent = rgba.a === 0;
        this.ctx.strokeOpacity = rgba.a;

        if (rgba.a === 0) {
          this.pdf.setDrawColor(255, 255, 255);
        } else if (rgba.a === 1) {
          this.pdf.setDrawColor(rgba.r, rgba.g, rgba.b);
        } else {
          this.pdf.setDrawColor(rgba.r, rgba.g, rgba.b);
        }
      }
    });
    /**
    * Sets or returns the style of the end caps for a line
    *
    * @name lineCap
    * @default butt
    * @property {(butt|round|square)} lineCap butt A flat edge is added to each end of the line <br/>
    * round A rounded end cap is added to each end of the line<br/>
    * square A square end cap is added to each end of the line<br/>
    */

    Object.defineProperty(this, 'lineCap', {
      get: function get() {
        return this.ctx.lineCap;
      },
      set: function set(value) {
        if (['butt', 'round', 'square'].indexOf(value) !== -1) {
          this.ctx.lineCap = value;
          this.pdf.setLineCap(value);
        }
      }
    });
    /**
    * Sets or returns the current line width
    *
    * @name lineWidth
    * @default 1
    * @property {number} lineWidth The current line width, in pixels
    */

    Object.defineProperty(this, 'lineWidth', {
      get: function get() {
        return this.ctx.lineWidth;
      },
      set: function set(value) {
        if (!isNaN(value)) {
          this.ctx.lineWidth = value;
          this.pdf.setLineWidth(value);
        }
      }
    });
    /**
    * Sets or returns the type of corner created, when two lines meet
    */

    Object.defineProperty(this, 'lineJoin', {
      get: function get() {
        return this.ctx.lineJoin;
      },
      set: function set(value) {
        if (['bevel', 'round', 'miter'].indexOf(value) !== -1) {
          this.ctx.lineJoin = value;
          this.pdf.setLineJoin(value);
        }
      }
    });
    /**
    * A number specifying the miter limit ratio in coordinate space units. Zero, negative, Infinity, and NaN values are ignored. The default value is 10.0.
    *
    * @name miterLimit
    * @default 10
    */

    Object.defineProperty(this, 'miterLimit', {
      get: function get() {
        return this.ctx.miterLimit;
      },
      set: function set(value) {
        if (!isNaN(value)) {
          this.ctx.miterLimit = value;
          this.pdf.setMiterLimit(value);
        }
      }
    });
    Object.defineProperty(this, 'textBaseline', {
      get: function get() {
        return this.ctx.textBaseline;
      },
      set: function set(value) {
        this.ctx.textBaseline = value;
      }
    });
    Object.defineProperty(this, 'textAlign', {
      get: function get() {
        return this.ctx.textAlign;
      },
      set: function set(value) {
        if (['right', 'end', 'center', 'left', 'start'].indexOf(value) !== -1) {
          this.ctx.textAlign = value;
        }
      }
    });
    Object.defineProperty(this, 'font', {
      get: function get() {
        return this.ctx.font;
      },
      set: function set(value) {
        this.ctx.font = value;
        var rx, matches; //source: https://stackoverflow.com/a/10136041
        // eslint-disable-next-line no-useless-escape

        rx = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i;
        matches = rx.exec(value);

        if (matches !== null) {
          var fontStyle = matches[1];
          var fontVariant = matches[2];
          var fontWeight = matches[3];
          var fontSize = matches[4];
          var lineHeight = matches[5];
          var fontFamily = matches[6];
        } else {
          return;
        }

        var rxFontSize = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i;
        var fontSizeUnit = rxFontSize.exec(fontSize)[2];

        if ('px' === fontSizeUnit) {
          fontSize = Math.floor(parseFloat(fontSize));
        } else if ('em' === fontSizeUnit) {
          fontSize = Math.floor(parseFloat(fontSize) * this.pdf.getFontSize());
        } else {
          fontSize = Math.floor(parseFloat(fontSize));
        }

        this.pdf.setFontSize(fontSize);
        var style = '';

        if (fontWeight === 'bold' || parseInt(fontWeight, 10) >= 700 || fontStyle === 'bold') {
          style = 'bold';
        }

        if (fontStyle === 'italic') {
          style += 'italic';
        }

        if (style.length === 0) {
          style = 'normal';
        }

        var jsPdfFontName = '';
        var parts = fontFamily.toLowerCase().replace(/"|'/g, '').split(/\s*,\s*/);
        var fallbackFonts = {
          arial: 'Helvetica',
          verdana: 'Helvetica',
          helvetica: 'Helvetica',
          'sans-serif': 'Helvetica',
          fixed: 'Courier',
          monospace: 'Courier',
          terminal: 'Courier',
          courier: 'Courier',
          times: 'Times',
          cursive: 'Times',
          fantasy: 'Times',
          serif: 'Times'
        };

        for (var i = 0; i < parts.length; i++) {
          if (this.pdf.internal.getFont(parts[i], style, {
            noFallback: true,
            disableWarning: true
          }) !== undefined) {
            jsPdfFontName = parts[i];
            break;
          } else if (style === 'bolditalic' && this.pdf.internal.getFont(parts[i], 'bold', {
            noFallback: true,
            disableWarning: true
          }) !== undefined) {
            jsPdfFontName = parts[i];
            style = 'bold';
          } else if (this.pdf.internal.getFont(parts[i], 'normal', {
            noFallback: true,
            disableWarning: true
          }) !== undefined) {
            jsPdfFontName = parts[i];
            style = 'normal';
            break;
          }
        }

        if (jsPdfFontName === '') {
          for (var j = 0; j < parts.length; j++) {
            if (fallbackFonts[parts[j]]) {
              jsPdfFontName = fallbackFonts[parts[j]];
              break;
            }
          }
        }

        jsPdfFontName = jsPdfFontName === '' ? 'Times' : jsPdfFontName;
        this.pdf.setFont(jsPdfFontName, style);
      }
    });
    Object.defineProperty(this, 'globalCompositeOperation', {
      get: function get() {
        return this.ctx.globalCompositeOperation;
      },
      set: function set(value) {
        this.ctx.globalCompositeOperation = value;
      }
    });
    Object.defineProperty(this, 'globalAlpha', {
      get: function get() {
        return this.ctx.globalAlpha;
      },
      set: function set(value) {
        this.ctx.globalAlpha = value;
      }
    }); // Not HTML API

    Object.defineProperty(this, 'ignoreClearRect', {
      get: function get() {
        return this.ctx.ignoreClearRect;
      },
      set: function set(value) {
        this.ctx.ignoreClearRect = Boolean(value);
      }
    });
  };

  Context2D.prototype.fill = function () {
    pathPreProcess.call(this, 'fill', false);
  };
  /**
  * Actually draws the path you have defined
  *
  * @name stroke
  * @function
  * @description The stroke() method actually draws the path you have defined with all those moveTo() and lineTo() methods. The default color is black.
  */


  Context2D.prototype.stroke = function () {
    pathPreProcess.call(this, 'stroke', false);
  };
  /**
  * Begins a path, or resets the current 
  *
  * @name beginPath
  * @function 
  * @description The beginPath() method begins a path, or resets the current path.
  */


  Context2D.prototype.beginPath = function () {
    this.path = [{
      type: 'begin'
    }];
  };
  /**
  * Moves the path to the specified point in the canvas, without creating a line
  * 
  * @name moveTo
  * @function
  * @param x {Number} The x-coordinate of where to move the path to
  * @param y {Number} The y-coordinate of where to move the path to
  */


  Context2D.prototype.moveTo = function (x, y) {
    if (isNaN(x) || isNaN(y)) {
      console.error('jsPDF.context2d.moveTo: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.moveTo');
    }

    var pt = this.ctx.transform.applyToPoint(new Point(x, y));
    this.path.push({
      type: 'mt',
      x: pt.x,
      y: pt.y
    });
    this.ctx.lastPoint = new Point(x, y);
  };
  /**
  * Creates a path from the current point back to the starting point
  * 
  * @name closePath
  * @function
  * @description The closePath() method creates a path from the current point back to the starting point.
  */


  Context2D.prototype.closePath = function () {
    var pathBegin = new Point(0, 0);
    var i = 0;

    for (i = this.path.length - 1; i !== -1; i--) {
      if (this.path[i].type === 'begin') {
        if (_typeof(this.path[i + 1]) === 'object' && typeof this.path[i + 1].x === 'number') {
          pathBegin = new Point(this.path[i + 1].x, this.path[i + 1].y);
          this.path.push({
            type: 'lt',
            x: pathBegin.x,
            y: pathBegin.y
          });
          break;
        }
      }
    }

    if (_typeof(this.path[i + 2]) === 'object' && typeof this.path[i + 2].x === 'number') {
      this.path.push(JSON.parse(JSON.stringify(this.path[i + 2])));
    }

    this.path.push({
      type: 'close'
    });
    this.ctx.lastPoint = new Point(pathBegin.x, pathBegin.y);
  };
  /**
  * Adds a new point and creates a line to that point from the last specified point in the canvas
  * 
  * @name lineTo
  * @function
  * @param x The x-coordinate of where to create the line to
  * @param y The y-coordinate of where to create the line to
  * @description The lineTo() method adds a new point and creates a line TO that point FROM the last specified point in the canvas (this method does not draw the line).
  */


  Context2D.prototype.lineTo = function (x, y) {
    if (isNaN(x) || isNaN(y)) {
      console.error('jsPDF.context2d.lineTo: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.lineTo');
    }

    var pt = this.ctx.transform.applyToPoint(new Point(x, y));
    this.path.push({
      type: 'lt',
      x: pt.x,
      y: pt.y
    });
    this.ctx.lastPoint = new Point(pt.x, pt.y);
  };
  /**
  * Clips a region of any shape and size from the original canvas
  * 
  * @name clip
  * @function
  * @description The clip() method clips a region of any shape and size from the original canvas.
  */


  Context2D.prototype.clip = function () {
    this.ctx.clip_path = JSON.parse(JSON.stringify(this.path));
    pathPreProcess.call(this, null, true);
  };
  /**
  * Creates a cubic Bézier curve
  *
  * @name quadraticCurveTo
  * @function
  * @param cpx {Number} The x-coordinate of the Bézier control point
  * @param cpy {Number} The y-coordinate of the Bézier control point
  * @param x {Number} The x-coordinate of the ending point
  * @param y {Number} The y-coordinate of the ending point
  * @description The quadraticCurveTo() method adds a point to the current path by using the specified control points that represent a quadratic Bézier curve.<br /><br /> A quadratic Bézier curve requires two points. The first point is a control point that is used in the quadratic Bézier calculation and the second point is the ending point for the curve. The starting point for the curve is the last point in the current path. If a path does not exist, use the beginPath() and moveTo() methods to define a starting point.
  */


  Context2D.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
    if (isNaN(x) || isNaN(y) || isNaN(cpx) || isNaN(cpy)) {
      console.error('jsPDF.context2d.quadraticCurveTo: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.quadraticCurveTo');
    }

    var pt0 = this.ctx.transform.applyToPoint(new Point(x, y));
    var pt1 = this.ctx.transform.applyToPoint(new Point(cpx, cpy));
    this.path.push({
      type: 'qct',
      x1: pt1.x,
      y1: pt1.y,
      x: pt0.x,
      y: pt0.y
    });
    this.ctx.lastPoint = new Point(pt0.x, pt0.y);
  };
  /**
  * Creates a cubic Bézier curve
  *
  * @name bezierCurveTo
  * @function
  * @param cp1x {Number} The x-coordinate of the first Bézier control point
  * @param cp1y {Number} The y-coordinate of the first Bézier control point
  * @param cp2x {Number} The x-coordinate of the second Bézier control point
  * @param cp2y {Number} The y-coordinate of the second Bézier control point
  * @param x {Number} The x-coordinate of the ending point
  * @param y {Number} The y-coordinate of the ending point
  * @description The bezierCurveTo() method adds a point to the current path by using the specified control points that represent a cubic Bézier curve. <br /><br />A cubic bezier curve requires three points. The first two points are control points that are used in the cubic Bézier calculation and the last point is the ending point for the curve.  The starting point for the curve is the last point in the current path. If a path does not exist, use the beginPath() and moveTo() methods to define a starting point.
  */


  Context2D.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
    if (isNaN(x) || isNaN(y) || isNaN(cp1x) || isNaN(cp1y) || isNaN(cp2x) || isNaN(cp2y)) {
      console.error('jsPDF.context2d.bezierCurveTo: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.bezierCurveTo');
    }

    var pt0 = this.ctx.transform.applyToPoint(new Point(x, y));
    var pt1 = this.ctx.transform.applyToPoint(new Point(cp1x, cp1y));
    var pt2 = this.ctx.transform.applyToPoint(new Point(cp2x, cp2y));
    this.path.push({
      type: 'bct',
      x1: pt1.x,
      y1: pt1.y,
      x2: pt2.x,
      y2: pt2.y,
      x: pt0.x,
      y: pt0.y
    });
    this.ctx.lastPoint = new Point(pt0.x, pt0.y);
  };
  /**
  * Creates an arc/curve (used to create circles, or parts of circles)
  *
  * @name arc
  * @function
  * @param x {Number} The x-coordinate of the center of the circle
  * @param y {Number} The y-coordinate of the center of the circle
  * @param radius {Number} The radius of the circle
  * @param startAngle {Number} The starting angle, in radians (0 is at the 3 o'clock position of the arc's circle)
  * @param endAngle {Number} The ending angle, in radians
  * @param counterclockwise {Boolean} Optional. Specifies whether the drawing should be counterclockwise or clockwise. False is default, and indicates clockwise, while true indicates counter-clockwise.
  * @description The arc() method creates an arc/curve (used to create circles, or parts of circles).
  */


  Context2D.prototype.arc = function (x, y, radius, startAngle, endAngle, counterclockwise) {
    if (isNaN(x) || isNaN(y) || isNaN(radius) || isNaN(startAngle) || isNaN(endAngle)) {
      console.error('jsPDF.context2d.arc: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.arc');
    }

    counterclockwise = Boolean(counterclockwise);

    if (!this.ctx.transform.isIdentity) {
      var xpt = this.ctx.transform.applyToPoint(new Point(x, y));
      x = xpt.x;
      y = xpt.y;
      var x_radPt = this.ctx.transform.applyToPoint(new Point(0, radius));
      var x_radPt0 = this.ctx.transform.applyToPoint(new Point(0, 0));
      radius = Math.sqrt(Math.pow(x_radPt.x - x_radPt0.x, 2) + Math.pow(x_radPt.y - x_radPt0.y, 2));
    }

    if (Math.abs(endAngle - startAngle) >= 2 * Math.PI) {
      startAngle = 0;
      endAngle = 2 * Math.PI;
    }

    this.path.push({
      type: 'arc',
      x: x,
      y: y,
      radius: radius,
      startAngle: startAngle,
      endAngle: endAngle,
      counterclockwise: counterclockwise
    }); // this.ctx.lastPoint(new Point(pt.x,pt.y));
  };
  /**
  * Creates an arc/curve between two tangents
  * 
  * @name arcTo
  * @function
  * @param x1 {Number} The x-coordinate of the first tangent
  * @param y1 {Number} The y-coordinate of the first tangent
  * @param x2 {Number} The x-coordinate of the second tangent
  * @param y2 {Number} The y-coordinate of the second tangent
  * @param radius The radius of the arc
  * @description The arcTo() method creates an arc/curve between two tangents on the canvas.
  */
  // eslint-disable-next-line no-unused-vars


  Context2D.prototype.arcTo = function (x1, y1, x2, y2, radius) {
    throw new Error('arcTo not implemented.');
  };
  /**
  * Creates a rectangle
  *
  * @name rect
  * @function
  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle
  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle
  * @param w {Number} The width of the rectangle, in pixels
  * @param h {Number} The height of the rectangle, in pixels
  * @description The rect() method creates a rectangle.
  */


  Context2D.prototype.rect = function (x, y, w, h) {
    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {
      console.error('jsPDF.context2d.rect: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.rect');
    }

    this.moveTo(x, y);
    this.lineTo(x + w, y);
    this.lineTo(x + w, y + h);
    this.lineTo(x, y + h);
    this.lineTo(x, y);
    this.lineTo(x + w, y);
    this.lineTo(x, y);
  };
  /**
  * Draws a "filled" rectangle
  *
  * @name fillRect
  * @function
  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle
  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle
  * @param w {Number} The width of the rectangle, in pixels
  * @param h {Number} The height of the rectangle, in pixels
  * @description The fillRect() method draws a "filled" rectangle. The default color of the fill is black.
  */


  Context2D.prototype.fillRect = function (x, y, w, h) {
    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {
      console.error('jsPDF.context2d.fillRect: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.fillRect');
    }

    if (isFillTransparent.call(this)) {
      return;
    }

    var tmp = {};

    if (this.lineCap !== 'butt') {
      tmp.lineCap = this.lineCap;
      this.lineCap = 'butt';
    }

    if (this.lineJoin !== 'miter') {
      tmp.lineJoin = this.lineJoin;
      this.lineJoin = 'miter';
    }

    this.beginPath();
    this.rect(x, y, w, h);
    this.fill();

    if (tmp.hasOwnProperty('lineCap')) {
      this.lineCap = tmp.lineCap;
    }

    if (tmp.hasOwnProperty('lineJoin')) {
      this.lineJoin = tmp.lineJoin;
    }
  };
  /**
  *     Draws a rectangle (no fill)
  *
  * @name strokeRect
  * @function
  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle
  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle
  * @param w {Number} The width of the rectangle, in pixels
  * @param h {Number} The height of the rectangle, in pixels
  * @description The strokeRect() method draws a rectangle (no fill). The default color of the stroke is black.
  */


  Context2D.prototype.strokeRect = function strokeRect(x, y, w, h) {
    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {
      console.error('jsPDF.context2d.strokeRect: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.strokeRect');
    }

    if (isStrokeTransparent.call(this)) {
      return;
    }

    this.beginPath();
    this.rect(x, y, w, h);
    this.stroke();
  };
  /**
  * Clears the specified pixels within a given rectangle
  *
  * @name clearRect
  * @function
  * @param x {Number} The x-coordinate of the upper-left corner of the rectangle
  * @param y {Number} The y-coordinate of the upper-left corner of the rectangle
  * @param w {Number} The width of the rectangle to clear, in pixels
  * @param h {Number} The height of the rectangle to clear, in pixels
  * @description We cannot clear PDF commands that were already written to PDF, so we use white instead. <br />
  * As a special case, read a special flag (ignoreClearRect) and do nothing if it is set.
  * This results in all calls to clearRect() to do nothing, and keep the canvas transparent.
  * This flag is stored in the save/restore context and is managed the same way as other drawing states.
  *
  */


  Context2D.prototype.clearRect = function (x, y, w, h) {
    if (isNaN(x) || isNaN(y) || isNaN(w) || isNaN(h)) {
      console.error('jsPDF.context2d.clearRect: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.clearRect');
    }

    if (this.ignoreClearRect) {
      return;
    }

    this.fillStyle = '#ffffff';
    this.fillRect(x, y, w, h);
  };
  /**
  * Saves the state of the current context
  * 
  * @name save
  * @function
  */


  Context2D.prototype.save = function (doStackPush) {
    doStackPush = typeof doStackPush === 'boolean' ? doStackPush : true;
    var tmpPageNumber = this.pdf.internal.getCurrentPageInfo().pageNumber;

    for (var i = 0; i < this.pdf.internal.getNumberOfPages(); i++) {
      this.pdf.setPage(i + 1);
      this.pdf.internal.out('q');
    }

    this.pdf.setPage(tmpPageNumber);

    if (doStackPush) {
      this.ctx.fontSize = this.pdf.internal.getFontSize();
      var ctx = new ContextLayer(this.ctx);
      this.ctxStack.push(this.ctx);
      this.ctx = ctx;
    }
  };
  /**
  * Returns previously saved path state and attributes
  * 
  * @name restore
  * @function
  */


  Context2D.prototype.restore = function (doStackPop) {
    doStackPop = typeof doStackPop === 'boolean' ? doStackPop : true;
    var tmpPageNumber = this.pdf.internal.getCurrentPageInfo().pageNumber;

    for (var i = 0; i < this.pdf.internal.getNumberOfPages(); i++) {
      this.pdf.setPage(i + 1);
      this.pdf.internal.out('Q');
    }

    this.pdf.setPage(tmpPageNumber);

    if (doStackPop && this.ctxStack.length !== 0) {
      this.ctx = this.ctxStack.pop();
      this.fillStyle = this.ctx.fillStyle;
      this.strokeStyle = this.ctx.strokeStyle;
      this.font = this.ctx.font;
      this.lineCap = this.ctx.lineCap;
      this.lineWidth = this.ctx.lineWidth;
      this.lineJoin = this.ctx.lineJoin;
    }
  };
  /** 
  * @name toDataURL
  * @function
  */


  Context2D.prototype.toDataURL = function () {
    throw new Error('toDataUrl not implemented.');
  }; //helper functions

  /**
  * Get the decimal values of r, g, b and a
  *
  * @name getRGBA
  * @function
  * @private
  * @ignore
  */


  var getRGBA = function getRGBA(style) {
    var rxRgb = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
    var rxRgba = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/;
    var rxTransparent = /transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/;
    var r, g, b, a;

    if (style.isCanvasGradient === true) {
      style = style.getColor();
    }

    if (!style) {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        style: style
      };
    }

    if (rxTransparent.test(style)) {
      r = 0;
      g = 0;
      b = 0;
      a = 0;
    } else {
      var matches = rxRgb.exec(style);

      if (matches !== null) {
        r = parseInt(matches[1]);
        g = parseInt(matches[2]);
        b = parseInt(matches[3]);
        a = 1;
      } else {
        matches = rxRgba.exec(style);

        if (matches !== null) {
          r = parseInt(matches[1]);
          g = parseInt(matches[2]);
          b = parseInt(matches[3]);
          a = parseFloat(matches[4]);
        } else {
          a = 1;

          if (typeof style === "string" && style.charAt(0) !== '#') {
            var rgbColor = new RGBColor(style);

            if (rgbColor.ok) {
              style = rgbColor.toHex();
            } else {
              style = '#000000';
            }
          }

          if (style.length === 4) {
            r = style.substring(1, 2);
            r += r;
            g = style.substring(2, 3);
            g += g;
            b = style.substring(3, 4);
            b += b;
          } else {
            r = style.substring(1, 3);
            g = style.substring(3, 5);
            b = style.substring(5, 7);
          }

          r = parseInt(r, 16);
          g = parseInt(g, 16);
          b = parseInt(b, 16);
        }
      }
    }

    return {
      r: r,
      g: g,
      b: b,
      a: a,
      style: style
    };
  };
  /**
  * @name isFillTransparent
  * @function 
  * @private
  * @ignore
  * @returns {Boolean}
  */


  var isFillTransparent = function isFillTransparent() {
    return this.ctx.isFillTransparent || this.globalAlpha == 0;
  };
  /**
  * @name isStrokeTransparent
  * @function 
  * @private
  * @ignore
  * @returns {Boolean}
  */


  var isStrokeTransparent = function isStrokeTransparent() {
    return Boolean(this.ctx.isStrokeTransparent || this.globalAlpha == 0);
  };
  /**
  * Draws "filled" text on the canvas
  * 
  * @name fillText
  * @function
  * @param text {String} Specifies the text that will be written on the canvas
  * @param x {Number} The x coordinate where to start painting the text (relative to the canvas)
  * @param y {Number} The y coordinate where to start painting the text (relative to the canvas)
  * @param maxWidth {Number} Optional. The maximum allowed width of the text, in pixels
  * @description The fillText() method draws filled text on the canvas. The default color of the text is black.
  */


  Context2D.prototype.fillText = function (text, x, y, maxWidth) {
    if (isNaN(x) || isNaN(y) || typeof text !== 'string') {
      console.error('jsPDF.context2d.fillText: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.fillText');
    }

    maxWidth = isNaN(maxWidth) ? undefined : maxWidth;

    if (isFillTransparent.call(this)) {
      return;
    }

    y = getBaseline.call(this, y);
    var degs = rad2deg(this.ctx.transform.rotation); // We only use X axis as scale hint 

    var scale = this.ctx.transform.scaleX;
    putText.call(this, {
      text: text,
      x: x,
      y: y,
      scale: scale,
      angle: degs,
      align: this.textAlign,
      maxWidth: maxWidth
    });
  };
  /**
  * Draws text on the canvas (no fill)
  * 
  * @name strokeText
  * @function
  * @param text {String} Specifies the text that will be written on the canvas
  * @param x {Number} The x coordinate where to start painting the text (relative to the canvas)
  * @param y {Number} The y coordinate where to start painting the text (relative to the canvas)
  * @param maxWidth {Number} Optional. The maximum allowed width of the text, in pixels
  * @description The strokeText() method draws text (with no fill) on the canvas. The default color of the text is black.
  */


  Context2D.prototype.strokeText = function (text, x, y, maxWidth) {
    if (isNaN(x) || isNaN(y) || typeof text !== 'string') {
      console.error('jsPDF.context2d.strokeText: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.strokeText');
    }

    if (isStrokeTransparent.call(this)) {
      return;
    }

    maxWidth = isNaN(maxWidth) ? undefined : maxWidth;
    y = getBaseline.call(this, y);
    var degs = rad2deg(this.ctx.transform.rotation);
    var scale = this.ctx.transform.scaleX;
    putText.call(this, {
      text: text,
      x: x,
      y: y,
      scale: scale,
      renderingMode: 'stroke',
      angle: degs,
      align: this.textAlign,
      maxWidth: maxWidth
    });
  };
  /**
  * Returns an object that contains the width of the specified text
  *
  * @name measureText
  * @function 
  * @param text {String} The text to be measured
  * @description The measureText() method returns an object that contains the width of the specified text, in pixels.
  * @returns {Number}
  */


  Context2D.prototype.measureText = function (text) {
    if (typeof text !== 'string') {
      console.error('jsPDF.context2d.measureText: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.measureText');
    }

    var pdf = this.pdf;
    var k = this.pdf.internal.scaleFactor;
    var fontSize = pdf.internal.getFontSize();
    var txtWidth = pdf.getStringUnitWidth(text) * fontSize / pdf.internal.scaleFactor;
    txtWidth *= Math.round(k * 96 / 72 * 10000) / 10000;

    var TextMetrics = function TextMetrics(options) {
      options = options || {};

      var _width = options.width || 0;

      Object.defineProperty(this, 'width', {
        get: function get() {
          return _width;
        }
      });
      return this;
    };

    return new TextMetrics({
      width: txtWidth
    });
  }; //Transformations

  /**
  * Scales the current drawing bigger or smaller
  * 
  * @name scale 
  * @function
  * @param scalewidth {Number} Scales the width of the current drawing (1=100%, 0.5=50%, 2=200%, etc.)
  * @param scaleheight {Number} Scales the height of the current drawing (1=100%, 0.5=50%, 2=200%, etc.)
  * @description The scale() method scales the current drawing, bigger or smaller.
  */


  Context2D.prototype.scale = function (scalewidth, scaleheight) {
    if (isNaN(scalewidth) || isNaN(scaleheight)) {
      console.error('jsPDF.context2d.scale: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.scale');
    }

    var matrix = new Matrix(scalewidth, 0.0, 0.0, scaleheight, 0.0, 0.0);
    this.ctx.transform = this.ctx.transform.multiply(matrix);
  };
  /**
  * Rotates the current drawing
  * 
  * @name rotate
  * @function
  * @param angle {Number} The rotation angle, in radians.
  * @description To calculate from degrees to radians: degrees*Math.PI/180. <br />
  * Example: to rotate 5 degrees, specify the following: 5*Math.PI/180
  */


  Context2D.prototype.rotate = function (angle) {
    if (isNaN(angle)) {
      console.error('jsPDF.context2d.rotate: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.rotate');
    }

    var matrix = new Matrix(Math.cos(angle), Math.sin(angle), -Math.sin(angle), Math.cos(angle), 0.0, 0.0);
    this.ctx.transform = this.ctx.transform.multiply(matrix);
  };
  /**
  * Remaps the (0,0) position on the canvas
  * 
  * @name translate
  * @function
  * @param x {Number} The value to add to horizontal (x) coordinates
  * @param y {Number} The value to add to vertical (y) coordinates
  * @description The translate() method remaps the (0,0) position on the canvas.
  */


  Context2D.prototype.translate = function (x, y) {
    if (isNaN(x) || isNaN(y)) {
      console.error('jsPDF.context2d.translate: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.translate');
    }

    var matrix = new Matrix(1.0, 0.0, 0.0, 1.0, x, y);
    this.ctx.transform = this.ctx.transform.multiply(matrix);
  };
  /**
  * Replaces the current transformation matrix for the drawing
  * 
  * @name transform
  * @function
  * @param a {Number} Horizontal scaling
  * @param b {Number} Horizontal skewing
  * @param c {Number} Vertical skewing
  * @param d {Number} Vertical scaling
  * @param e {Number} Horizontal moving
  * @param f {Number} Vertical moving
  * @description Each object on the canvas has a current transformation matrix.<br /><br />The transform() method replaces the current transformation matrix. It multiplies the current transformation matrix with the matrix described by:<br /><br /><br /><br />a    c    e<br /><br />b    d    f<br /><br />0    0    1<br /><br />In other words, the transform() method lets you scale, rotate, move, and skew the current context.
  */


  Context2D.prototype.transform = function (a, b, c, d, e, f) {
    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d) || isNaN(e) || isNaN(f)) {
      console.error('jsPDF.context2d.transform: Invalid arguments', arguments);
      throw new Error('Invalid arguments passed to jsPDF.context2d.transform');
    }

    var matrix = new Matrix(a, b, c, d, e, f);
    this.ctx.transform = this.ctx.transform.multiply(matrix);
  };
  /**
  * Resets the current transform to the identity matrix. Then runs transform()
  * 
  * @name setTransform
  * @function
  * @param a {Number} Horizontal scaling
  * @param b {Number} Horizontal skewing
  * @param c {Number} Vertical skewing
  * @param d {Number} Vertical scaling
  * @param e {Number} Horizontal moving
  * @param f {Number} Vertical moving
  * @description Each object on the canvas has a current transformation matrix. <br /><br />The setTransform() method resets the current transform to the identity matrix, and then runs transform() with the same arguments.<br /><br />In other words, the setTransform() method lets you scale, rotate, move, and skew the current context.
  */


  Context2D.prototype.setTransform = function (a, b, c, d, e, f) {
    a = isNaN(a) ? 1 : a;
    b = isNaN(b) ? 0 : b;
    c = isNaN(c) ? 0 : c;
    d = isNaN(d) ? 1 : d;
    e = isNaN(e) ? 0 : e;
    f = isNaN(f) ? 0 : f;
    this.ctx.transform = new Matrix(a, b, c, d, e, f);
  };
  /**
  * Draws an image, canvas, or video onto the canvas
  * 
  * @function 
  * @param img {} Specifies the image, canvas, or video element to use
  * @param sx {Number} Optional. The x coordinate where to start clipping
  * @param sy {Number} Optional. The y coordinate where to start clipping
  * @param swidth {Number} Optional. The width of the clipped image
  * @param sheight {Number} Optional. The height of the clipped image
  * @param x {Number} The x coordinate where to place the image on the canvas
  * @param y {Number} The y coordinate where to place the image on the canvas
  * @param width {Number} Optional. The width of the image to use (stretch or reduce the image)
  * @param height {Number} Optional. The height of the image to use (stretch or reduce the image)
  */


  Context2D.prototype.drawImage = function (img, sx, sy, swidth, sheight, x, y, width, height) {
    var imageProperties = this.pdf.getImageProperties(img);
    var factorX = 1;
    var factorY = 1;
    var clipFactorX = 1;
    var clipFactorY = 1;

    if (typeof swidth !== 'undefined' && typeof width !== 'undefined') {
      clipFactorX = width / swidth;
      clipFactorY = height / sheight;
      factorX = imageProperties.width / swidth * width / swidth;
      factorY = imageProperties.height / sheight * height / sheight;
    } //is sx and sy are set and x and y not, set x and y with values of sx and sy


    if (typeof x === 'undefined') {
      x = sx;
      y = sy;
      sx = 0;
      sy = 0;
    }

    if (typeof swidth !== 'undefined' && typeof width === 'undefined') {
      width = swidth;
      height = sheight;
    }

    if (typeof swidth === 'undefined' && typeof width === 'undefined') {
      width = imageProperties.width;
      height = imageProperties.height;
    }

    var decomposedTransformationMatrix = this.ctx.transform.decompose();
    var angle = rad2deg(decomposedTransformationMatrix.rotate.shx);
    var matrix = new Matrix();
    matrix = matrix.multiply(decomposedTransformationMatrix.translate);
    matrix = matrix.multiply(decomposedTransformationMatrix.skew);
    matrix = matrix.multiply(decomposedTransformationMatrix.scale);
    var xRect = matrix.applyToRectangle(new Rectangle(x - sx * clipFactorX, y - sy * clipFactorY, swidth * factorX, sheight * factorY));
    var pageArray = getPagesByPath.call(this, xRect);
    var pages = [];

    for (var ii = 0; ii < pageArray.length; ii += 1) {
      if (pages.indexOf(pageArray[ii]) === -1) {
        pages.push(pageArray[ii]);
      }
    }

    pages.sort();
    var clipPath;

    if (this.autoPaging) {
      var min = pages[0];
      var max = pages[pages.length - 1];

      for (var i = min; i < max + 1; i++) {
        this.pdf.setPage(i);

        if (this.ctx.clip_path.length !== 0) {
          var tmpPaths = this.path;
          clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));
          this.path = pathPositionRedo(clipPath, this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY);
          drawPaths.call(this, 'fill', true);
          this.path = tmpPaths;
        }

        var tmpRect = JSON.parse(JSON.stringify(xRect));
        tmpRect = pathPositionRedo([tmpRect], this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY)[0];
        this.pdf.addImage(img, 'JPEG', tmpRect.x, tmpRect.y, tmpRect.w, tmpRect.h, null, null, angle);
      }
    } else {
      this.pdf.addImage(img, 'JPEG', xRect.x, xRect.y, xRect.w, xRect.h, null, null, angle);
    }
  };

  var getPagesByPath = function getPagesByPath(path, pageWrapX, pageWrapY) {
    var result = [];
    pageWrapX = pageWrapX || this.pdf.internal.pageSize.width;
    pageWrapY = pageWrapY || this.pdf.internal.pageSize.height;

    switch (path.type) {
      default:
      case 'mt':
      case 'lt':
        result.push(Math.floor((path.y + this.posY) / pageWrapY) + 1);
        break;

      case 'arc':
        result.push(Math.floor((path.y + this.posY - path.radius) / pageWrapY) + 1);
        result.push(Math.floor((path.y + this.posY + path.radius) / pageWrapY) + 1);
        break;

      case 'qct':
        var rectOfQuadraticCurve = getQuadraticCurveBoundary(this.ctx.lastPoint.x, this.ctx.lastPoint.y, path.x1, path.y1, path.x, path.y);
        result.push(Math.floor(rectOfQuadraticCurve.y / pageWrapY) + 1);
        result.push(Math.floor((rectOfQuadraticCurve.y + rectOfQuadraticCurve.h) / pageWrapY) + 1);
        break;

      case 'bct':
        var rectOfBezierCurve = getBezierCurveBoundary(this.ctx.lastPoint.x, this.ctx.lastPoint.y, path.x1, path.y1, path.x2, path.y2, path.x, path.y);
        result.push(Math.floor(rectOfBezierCurve.y / pageWrapY) + 1);
        result.push(Math.floor((rectOfBezierCurve.y + rectOfBezierCurve.h) / pageWrapY) + 1);
        break;

      case 'rect':
        result.push(Math.floor((path.y + this.posY) / pageWrapY) + 1);
        result.push(Math.floor((path.y + path.h + this.posY) / pageWrapY) + 1);
    }

    for (var i = 0; i < result.length; i += 1) {
      while (this.pdf.internal.getNumberOfPages() < result[i]) {
        addPage.call(this);
      }
    }

    return result;
  };

  var addPage = function addPage() {
    var fillStyle = this.fillStyle;
    var strokeStyle = this.strokeStyle;
    var font = this.font;
    var lineCap = this.lineCap;
    var lineWidth = this.lineWidth;
    var lineJoin = this.lineJoin;
    this.pdf.addPage();
    this.fillStyle = fillStyle;
    this.strokeStyle = strokeStyle;
    this.font = font;
    this.lineCap = lineCap;
    this.lineWidth = lineWidth;
    this.lineJoin = lineJoin;
  };

  var pathPositionRedo = function pathPositionRedo(paths, x, y) {
    for (var i = 0; i < paths.length; i++) {
      switch (paths[i].type) {
        case 'bct':
          paths[i].x2 += x;
          paths[i].y2 += y;

        case 'qct':
          paths[i].x1 += x;
          paths[i].y1 += y;

        case 'mt':
        case 'lt':
        case 'arc':
        default:
          paths[i].x += x;
          paths[i].y += y;
      }
    }

    return paths;
  };

  var pathPreProcess = function pathPreProcess(rule, isClip) {
    var fillStyle = this.fillStyle;
    var strokeStyle = this.strokeStyle;
    var lineCap = this.lineCap;
    var lineWidth = this.lineWidth;
    var lineJoin = this.lineJoin;
    var origPath = JSON.parse(JSON.stringify(this.path));
    var xPath = JSON.parse(JSON.stringify(this.path));
    var clipPath;
    var tmpPath;
    var pages = [];

    for (var i = 0; i < xPath.length; i++) {
      if (typeof xPath[i].x !== "undefined") {
        var page = getPagesByPath.call(this, xPath[i]);

        for (var ii = 0; ii < page.length; ii += 1) {
          if (pages.indexOf(page[ii]) === -1) {
            pages.push(page[ii]);
          }
        }
      }
    }

    for (var j = 0; j < pages.length; j++) {
      while (this.pdf.internal.getNumberOfPages() < pages[j]) {
        addPage.call(this);
      }
    }

    pages.sort();

    if (this.autoPaging) {
      var min = pages[0];
      var max = pages[pages.length - 1];

      for (var k = min; k < max + 1; k++) {
        this.pdf.setPage(k);
        this.fillStyle = fillStyle;
        this.strokeStyle = strokeStyle;
        this.lineCap = lineCap;
        this.lineWidth = lineWidth;
        this.lineJoin = lineJoin;

        if (this.ctx.clip_path.length !== 0) {
          var tmpPaths = this.path;
          clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));
          this.path = pathPositionRedo(clipPath, this.posX, -1 * this.pdf.internal.pageSize.height * (k - 1) + this.posY);
          drawPaths.call(this, rule, true);
          this.path = tmpPaths;
        }

        tmpPath = JSON.parse(JSON.stringify(origPath));
        this.path = pathPositionRedo(tmpPath, this.posX, -1 * this.pdf.internal.pageSize.height * (k - 1) + this.posY);

        if (isClip === false || k === 0) {
          drawPaths.call(this, rule, isClip);
        }
      }
    } else {
      drawPaths.call(this, rule, isClip);
    }

    this.path = origPath;
  };
  /**
  * Processes the paths
  *
  * @function 
  * @param rule {String}
  * @param isClip {Boolean}
  * @private
  * @ignore
  */


  var drawPaths = function drawPaths(rule, isClip) {
    if (rule === 'stroke' && !isClip && isStrokeTransparent.call(this)) {
      return;
    }

    if (rule !== 'stroke' && !isClip && isFillTransparent.call(this)) {
      return;
    }

    var moves = []; //var alpha = (this.ctx.fillOpacity < 1) ? this.ctx.fillOpacity : this.ctx.globalAlpha;

    var delta;
    var xPath = this.path;

    for (var i = 0; i < xPath.length; i++) {
      var pt = xPath[i];

      switch (pt.type) {
        case 'begin':
          moves.push({
            begin: true
          });
          break;

        case 'close':
          moves.push({
            close: true
          });
          break;

        case 'mt':
          moves.push({
            start: pt,
            deltas: [],
            abs: []
          });
          break;

        case 'lt':
          var iii = moves.length;

          if (!isNaN(xPath[i - 1].x)) {
            delta = [pt.x - xPath[i - 1].x, pt.y - xPath[i - 1].y];

            if (iii > 0) {
              for (iii; iii >= 0; iii--) {
                if (moves[iii - 1].close !== true && moves[iii - 1].begin !== true) {
                  moves[iii - 1].deltas.push(delta);
                  moves[iii - 1].abs.push(pt);
                  break;
                }
              }
            }
          }

          break;

        case 'bct':
          delta = [pt.x1 - xPath[i - 1].x, pt.y1 - xPath[i - 1].y, pt.x2 - xPath[i - 1].x, pt.y2 - xPath[i - 1].y, pt.x - xPath[i - 1].x, pt.y - xPath[i - 1].y];
          moves[moves.length - 1].deltas.push(delta);
          break;

        case 'qct':
          var x1 = xPath[i - 1].x + 2.0 / 3.0 * (pt.x1 - xPath[i - 1].x);
          var y1 = xPath[i - 1].y + 2.0 / 3.0 * (pt.y1 - xPath[i - 1].y);
          var x2 = pt.x + 2.0 / 3.0 * (pt.x1 - pt.x);
          var y2 = pt.y + 2.0 / 3.0 * (pt.y1 - pt.y);
          var x3 = pt.x;
          var y3 = pt.y;
          delta = [x1 - xPath[i - 1].x, y1 - xPath[i - 1].y, x2 - xPath[i - 1].x, y2 - xPath[i - 1].y, x3 - xPath[i - 1].x, y3 - xPath[i - 1].y];
          moves[moves.length - 1].deltas.push(delta);
          break;

        case 'arc':
          moves.push({
            deltas: [],
            abs: [],
            arc: true
          });

          if (Array.isArray(moves[moves.length - 1].abs)) {
            moves[moves.length - 1].abs.push(pt);
          }

          break;
      }
    }

    var style;

    if (!isClip) {
      if (rule === 'stroke') {
        style = 'stroke';
      } else {
        style = 'fill';
      }
    } else {
      style = null;
    }

    for (var k = 0; k < moves.length; k++) {
      if (moves[k].arc) {
        var arcs = moves[k].abs;

        for (var ii = 0; ii < arcs.length; ii++) {
          var arc = arcs[ii];

          if (arc.type === 'arc') {
            drawArc.call(this, arc.x, arc.y, arc.radius, arc.startAngle, arc.endAngle, arc.counterclockwise, undefined, isClip);
          } else {
            drawLine.call(this, arc.x, arc.y);
          }
        }

        putStyle.call(this, style);
        this.pdf.internal.out('h');
      }

      if (!moves[k].arc) {
        if (moves[k].close !== true && moves[k].begin !== true) {
          var x = moves[k].start.x;
          var y = moves[k].start.y;
          drawLines.call(this, moves[k].deltas, x, y);
        }
      }
    }

    if (style) {
      putStyle.call(this, style);
    }

    if (isClip) {
      doClip.call(this);
    }
  };

  var getBaseline = function getBaseline(y) {
    var height = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor;
    var descent = height * (this.pdf.internal.getLineHeightFactor() - 1);

    switch (this.ctx.textBaseline) {
      case 'bottom':
        return y - descent;

      case 'top':
        return y + height - descent;

      case 'hanging':
        return y + height - 2 * descent;

      case 'middle':
        return y + height / 2 - descent;

      case 'ideographic':
        // TODO not implemented
        return y;

      case 'alphabetic':
      default:
        return y;
    }
  };

  Context2D.prototype.createLinearGradient = function createLinearGradient() {
    var canvasGradient = function canvasGradient() {};

    canvasGradient.colorStops = [];

    canvasGradient.addColorStop = function (offset, color) {
      this.colorStops.push([offset, color]);
    };

    canvasGradient.getColor = function () {
      if (this.colorStops.length === 0) {
        return '#000000';
      }

      return this.colorStops[0][1];
    };

    canvasGradient.isCanvasGradient = true;
    return canvasGradient;
  };

  Context2D.prototype.createPattern = function createPattern() {
    return this.createLinearGradient();
  };

  Context2D.prototype.createRadialGradient = function createRadialGradient() {
    return this.createLinearGradient();
  };
  /**
  *
  * @param x Edge point X
  * @param y Edge point Y
  * @param r Radius
  * @param a1 start angle
  * @param a2 end angle
  * @param counterclockwise
  * @param style
  * @param isClip
  */


  var drawArc = function drawArc(x, y, r, a1, a2, counterclockwise, style, isClip) {
    var curves = createArc.call(this, r, a1, a2, counterclockwise);

    for (var i = 0; i < curves.length; i++) {
      var curve = curves[i];

      if (i === 0) {
        doMove.call(this, curve.x1 + x, curve.y1 + y);
      }

      drawCurve.call(this, x, y, curve.x2, curve.y2, curve.x3, curve.y3, curve.x4, curve.y4);
    }

    if (!isClip) {
      putStyle.call(this, style);
    } else {
      doClip.call(this);
    }
  };

  var putStyle = function putStyle(style) {
    switch (style) {
      case 'stroke':
        this.pdf.internal.out('S');
        break;

      case 'fill':
        this.pdf.internal.out('f');
        break;
    }
  };

  var doClip = function doClip() {
    this.pdf.clip();
    this.pdf.discardPath();
  };

  var doMove = function doMove(x, y) {
    this.pdf.internal.out(getHorizontalCoordinateString(x) + ' ' + getVerticalCoordinateString(y) + ' m');
  };

  var putText = function putText(options) {
    var textAlign;

    switch (options.align) {
      case 'right':
      case 'end':
        textAlign = 'right';
        break;

      case 'center':
        textAlign = 'center';
        break;

      case 'left':
      case 'start':
      default:
        textAlign = 'left';
        break;
    }

    var pt = this.ctx.transform.applyToPoint(new Point(options.x, options.y));
    var decomposedTransformationMatrix = this.ctx.transform.decompose();
    var matrix = new Matrix();
    matrix = matrix.multiply(decomposedTransformationMatrix.translate);
    matrix = matrix.multiply(decomposedTransformationMatrix.skew);
    matrix = matrix.multiply(decomposedTransformationMatrix.scale);
    var textDimensions = this.pdf.getTextDimensions(options.text);
    var textRect = this.ctx.transform.applyToRectangle(new Rectangle(options.x, options.y, textDimensions.w, textDimensions.h));
    var textXRect = matrix.applyToRectangle(new Rectangle(options.x, options.y - textDimensions.h, textDimensions.w, textDimensions.h));
    var pageArray = getPagesByPath.call(this, textXRect);
    var pages = [];

    for (var ii = 0; ii < pageArray.length; ii += 1) {
      if (pages.indexOf(pageArray[ii]) === -1) {
        pages.push(pageArray[ii]);
      }
    }

    pages.sort();
    var clipPath, oldSize;

    if (this.autoPaging === true) {
      var min = pages[0];
      var max = pages[pages.length - 1];

      for (var i = min; i < max + 1; i++) {
        this.pdf.setPage(i);

        if (this.ctx.clip_path.length !== 0) {
          var tmpPaths = this.path;
          clipPath = JSON.parse(JSON.stringify(this.ctx.clip_path));
          this.path = pathPositionRedo(clipPath, this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY);
          drawPaths.call(this, 'fill', true);
          this.path = tmpPaths;
        }

        var tmpRect = JSON.parse(JSON.stringify(textRect));
        tmpRect = pathPositionRedo([tmpRect], this.posX, -1 * this.pdf.internal.pageSize.height * (i - 1) + this.posY)[0];

        if (options.scale >= 0.01) {
          oldSize = this.pdf.internal.getFontSize();
          this.pdf.setFontSize(oldSize * options.scale);
        }

        this.pdf.text(options.text, tmpRect.x, tmpRect.y, {
          angle: options.angle,
          align: textAlign,
          renderingMode: options.renderingMode,
          maxWidth: options.maxWidth
        });

        if (options.scale >= 0.01) {
          this.pdf.setFontSize(oldSize);
        }
      }
    } else {
      if (options.scale >= 0.01) {
        oldSize = this.pdf.internal.getFontSize();
        this.pdf.setFontSize(oldSize * options.scale);
      }

      this.pdf.text(options.text, pt.x + this.posX, pt.y + this.posY, {
        angle: options.angle,
        align: textAlign,
        renderingMode: options.renderingMode,
        maxWidth: options.maxWidth
      });

      if (options.scale >= 0.01) {
        this.pdf.setFontSize(oldSize);
      }
    }
  };

  var drawLine = function drawLine(x, y, prevX, prevY) {
    prevX = prevX || 0;
    prevY = prevY || 0;
    this.pdf.internal.out(getHorizontalCoordinateString(x + prevX) + ' ' + getVerticalCoordinateString(y + prevY) + ' l');
  };

  var drawLines = function drawLines(lines, x, y) {
    return this.pdf.lines(lines, x, y, null, null);
  };

  var drawCurve = function drawCurve(x, y, x1, y1, x2, y2, x3, y3) {
    this.pdf.internal.out([f2(getHorizontalCoordinate(x1 + x)), f2(getVerticalCoordinate(y1 + y)), f2(getHorizontalCoordinate(x2 + x)), f2(getVerticalCoordinate(y2 + y)), f2(getHorizontalCoordinate(x3 + x)), f2(getVerticalCoordinate(y3 + y)), 'c'].join(' '));
  };
  /**
  * Return a array of objects that represent bezier curves which approximate the circular arc centered at the origin, from startAngle to endAngle (radians) with the specified radius.
  *
  * Each bezier curve is an object with four points, where x1,y1 and x4,y4 are the arc's end points and x2,y2 and x3,y3 are the cubic bezier's control points.
  * @function createArc
  */


  var createArc = function createArc(radius, startAngle, endAngle, anticlockwise) {
    var EPSILON = 0.00001; // Roughly 1/1000th of a degree, see below 

    var twoPi = Math.PI * 2;
    var halfPi = Math.PI / 2.0;

    while (startAngle > endAngle) {
      startAngle = startAngle - twoPi;
    }

    var totalAngle = Math.abs(endAngle - startAngle);

    if (totalAngle < twoPi) {
      if (anticlockwise) {
        totalAngle = twoPi - totalAngle;
      }
    } // Compute the sequence of arc curves, up to PI/2 at a time.


    var curves = []; // clockwise or counterclockwise

    var sgn = anticlockwise ? -1 : +1;
    var a1 = startAngle;

    for (; totalAngle > EPSILON;) {
      var remain = sgn * Math.min(totalAngle, halfPi);
      var a2 = a1 + remain;
      curves.push(createSmallArc.call(this, radius, a1, a2));
      totalAngle -= Math.abs(a2 - a1);
      a1 = a2;
    }

    return curves;
  };
  /**
  * Cubic bezier approximation of a circular arc centered at the origin, from (radians) a1 to a2, where a2-a1 < pi/2. The arc's radius is r.
  *
  * Returns an object with four points, where x1,y1 and x4,y4 are the arc's end points and x2,y2 and x3,y3 are the cubic bezier's control points.
  *
  * This algorithm is based on the approach described in: A. Riškus, "Approximation of a Cubic Bezier Curve by Circular Arcs and Vice Versa," Information Technology and Control, 35(4), 2006 pp. 371-378.
  */


  var createSmallArc = function createSmallArc(r, a1, a2) {
    var a = (a2 - a1) / 2.0;
    var x4 = r * Math.cos(a);
    var y4 = r * Math.sin(a);
    var x1 = x4;
    var y1 = -y4;
    var q1 = x1 * x1 + y1 * y1;
    var q2 = q1 + x1 * x4 + y1 * y4;
    var k2 = 4 / 3 * (Math.sqrt(2 * q1 * q2) - q2) / (x1 * y4 - y1 * x4);
    var x2 = x1 - k2 * y1;
    var y2 = y1 + k2 * x1;
    var x3 = x2;
    var y3 = -y2;
    var ar = a + a1;
    var cos_ar = Math.cos(ar);
    var sin_ar = Math.sin(ar);
    return {
      x1: r * Math.cos(a1),
      y1: r * Math.sin(a1),
      x2: x2 * cos_ar - y2 * sin_ar,
      y2: x2 * sin_ar + y2 * cos_ar,
      x3: x3 * cos_ar - y3 * sin_ar,
      y3: x3 * sin_ar + y3 * cos_ar,
      x4: r * Math.cos(a2),
      y4: r * Math.sin(a2)
    };
  };

  var rad2deg = function rad2deg(value) {
    return value * 180 / Math.PI;
  };

  var getQuadraticCurveBoundary = function getQuadraticCurveBoundary(sx, sy, cpx, cpy, ex, ey) {
    var midX1 = sx + (cpx - sx) * 0.50;
    var midY1 = sy + (cpy - sy) * 0.50;
    var midX2 = ex + (cpx - ex) * 0.50;
    var midY2 = ey + (cpy - ey) * 0.50;
    var resultX1 = Math.min(sx, ex, midX1, midX2);
    var resultX2 = Math.max(sx, ex, midX1, midX2);
    var resultY1 = Math.min(sy, ey, midY1, midY2);
    var resultY2 = Math.max(sy, ey, midY1, midY2);
    return new Rectangle(resultX1, resultY1, resultX2 - resultX1, resultY2 - resultY1);
  }; //De Casteljau algorithm


  var getBezierCurveBoundary = function getBezierCurveBoundary(ax, ay, bx, by, cx, cy, dx, dy) {
    var tobx = bx - ax;
    var toby = by - ay;
    var tocx = cx - bx;
    var tocy = cy - by;
    var todx = dx - cx;
    var tody = dy - cy;
    var precision = 40;
    var d, i, px, py, qx, qy, rx, ry, tx, ty, sx, sy, x, y, minx, miny, maxx, maxy, toqx, toqy, torx, tory, totx, toty;

    for (i = 0; i < precision + 1; i++) {
      d = i / precision;
      px = ax + d * tobx;
      py = ay + d * toby;
      qx = bx + d * tocx;
      qy = by + d * tocy;
      rx = cx + d * todx;
      ry = cy + d * tody;
      toqx = qx - px;
      toqy = qy - py;
      torx = rx - qx;
      tory = ry - qy;
      sx = px + d * toqx;
      sy = py + d * toqy;
      tx = qx + d * torx;
      ty = qy + d * tory;
      totx = tx - sx;
      toty = ty - sy;
      x = sx + d * totx;
      y = sy + d * toty;

      if (i == 0) {
        minx = x;
        miny = y;
        maxx = x;
        maxy = y;
      } else {
        minx = Math.min(minx, x);
        miny = Math.min(miny, y);
        maxx = Math.max(maxx, x);
        maxy = Math.max(maxy, y);
      }
    }

    return new Rectangle(Math.round(minx), Math.round(miny), Math.round(maxx - minx), Math.round(maxy - miny));
  };
})(jsPDF.API);

/* global jsPDF, Deflater */

/**
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi 
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
(function (jsPDFAPI) {

  var ASCII85Encode = function ASCII85Encode(a) {
    var b, c, d, e, f, g, h, i, j, k; // eslint-disable-next-line no-control-regex

    for (!/[^\x00-\xFF]/.test(a), b = "\x00\x00\x00\x00".slice(a.length % 4 || 4), a += b, c = [], d = 0, e = a.length; e > d; d += 4) {
      f = (a.charCodeAt(d) << 24) + (a.charCodeAt(d + 1) << 16) + (a.charCodeAt(d + 2) << 8) + a.charCodeAt(d + 3), 0 !== f ? (k = f % 85, f = (f - k) / 85, j = f % 85, f = (f - j) / 85, i = f % 85, f = (f - i) / 85, h = f % 85, f = (f - h) / 85, g = f % 85, c.push(g + 33, h + 33, i + 33, j + 33, k + 33)) : c.push(122);
    }

    return function (a, b) {
      for (var c = b; c > 0; c--) {
        a.pop();
      }
    }(c, b.length), String.fromCharCode.apply(String, c) + "~>";
  };

  var ASCII85Decode = function ASCII85Decode(a) {
    var c,
        d,
        e,
        f,
        g,
        h = String,
        l = "length",
        w = 255,
        x = "charCodeAt",
        y = "slice",
        z = "replace";

    for ("~>" === a[y](-2), a = a[y](0, -2)[z](/\s/g, "")[z]("z", "!!!!!"), c = "uuuuu"[y](a[l] % 5 || 5), a += c, e = [], f = 0, g = a[l]; g > f; f += 5) {
      d = 52200625 * (a[x](f) - 33) + 614125 * (a[x](f + 1) - 33) + 7225 * (a[x](f + 2) - 33) + 85 * (a[x](f + 3) - 33) + (a[x](f + 4) - 33), e.push(w & d >> 24, w & d >> 16, w & d >> 8, w & d);
    }

    return function (a, b) {
      for (var c = b; c > 0; c--) {
        a.pop();
      }
    }(e, c[l]), h.fromCharCode.apply(h, e);
  };

  var ASCIIHexEncode = function ASCIIHexEncode(value) {
    return value.split('').map(function (value) {
      return ("0" + value.charCodeAt().toString(16)).slice(-2);
    }).join('') + '>';
  };

  var ASCIIHexDecode = function ASCIIHexDecode(value) {
    var regexCheckIfHex = new RegExp(/^([0-9A-Fa-f]{2})+$/);
    value = value.replace(/\s/g, '');

    if (value.indexOf(">") !== -1) {
      value = value.substr(0, value.indexOf(">"));
    }

    if (value.length % 2) {
      value += "0";
    }

    if (regexCheckIfHex.test(value) === false) {
      return "";
    }

    var result = '';

    for (var i = 0; i < value.length; i += 2) {
      result += String.fromCharCode("0x" + (value[i] + value[i + 1]));
    }

    return result;
  };
  /*
  var FlatePredictors = {
      None: 1,
      TIFF: 2,
      PNG_None: 10,
      PNG_Sub: 11,
      PNG_Up: 12,
      PNG_Average: 13,
      PNG_Paeth: 14,
      PNG_Optimum: 15
  };
  */


  var appendBuffer = function appendBuffer(buffer1, buffer2) {
    var combinedBuffer = new Uint8Array(buffer1.byteLength + buffer2.byteLength);
    combinedBuffer.set(new Uint8Array(buffer1), 0);
    combinedBuffer.set(new Uint8Array(buffer2), buffer1.byteLength);
    return combinedBuffer;
  };

  var FlateEncode = function FlateEncode(data) {
    var arr = [];
    var i = data.length;
    var adler32;
    var deflater;

    while (i--) {
      arr[i] = data.charCodeAt(i);
    }

    adler32 = jsPDFAPI.adler32cs.from(data);
    deflater = new Deflater(6);
    data = deflater.append(new Uint8Array(arr));
    data = appendBuffer(data, deflater.flush());
    arr = new Uint8Array(data.byteLength + 6);
    arr.set(new Uint8Array([120, 156]));
    arr.set(data, 2);
    arr.set(new Uint8Array([adler32 & 0xff, adler32 >> 8 & 0xff, adler32 >> 16 & 0xff, adler32 >> 24 & 0xff]), data.byteLength + 2);
    data = arr.reduce(function (data, _byte) {
      return data + String.fromCharCode(_byte);
    }, '');
    return data;
  };

  jsPDFAPI.processDataByFilters = function (origData, filterChain) {

    var i = 0;
    var data = origData || '';
    var reverseChain = [];
    filterChain = filterChain || [];

    if (typeof filterChain === "string") {
      filterChain = [filterChain];
    }

    for (i = 0; i < filterChain.length; i += 1) {
      switch (filterChain[i]) {
        case "ASCII85Decode":
        case "/ASCII85Decode":
          data = ASCII85Decode(data);
          reverseChain.push("/ASCII85Encode");
          break;

        case "ASCII85Encode":
        case "/ASCII85Encode":
          data = ASCII85Encode(data);
          reverseChain.push("/ASCII85Decode");
          break;

        case "ASCIIHexDecode":
        case "/ASCIIHexDecode":
          data = ASCIIHexDecode(data);
          reverseChain.push("/ASCIIHexEncode");
          break;

        case "ASCIIHexEncode":
        case "/ASCIIHexEncode":
          data = ASCIIHexEncode(data);
          reverseChain.push("/ASCIIHexDecode");
          break;

        case "FlateEncode":
        case "/FlateEncode":
          data = FlateEncode(data);
          reverseChain.push("/FlateDecode");
          break;

        default:
          throw new Error("The filter: \"" + filterChain[i] + "\" is not implemented");
      }
    }

    return {
      data: data,
      reverseChain: reverseChain.reverse().join(" ")
    };
  };
})(jsPDF.API);

/* global jsPDF */

/**
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* @name fileloading
* @module
*/
(function (jsPDFAPI) {
  /**
  * @name loadFile
  * @function
  * @param {string} url
  * @param {boolean} sync
  * @param {function} callback
  * @returns {string|undefined} result
  */

  jsPDFAPI.loadFile = function (url, sync, callback) {
    sync = sync === false ? false : true;
    callback = typeof callback === 'function' ? callback : function () {};
    var result = undefined;

    var xhr = function xhr(url, sync, callback) {
      var request = new XMLHttpRequest();
      var i = 0;

      var sanitizeUnicode = function sanitizeUnicode(data) {
        var dataLength = data.length;
        var charArray = [];
        var StringFromCharCode = String.fromCharCode; //Transform Unicode to ASCII

        for (i = 0; i < dataLength; i += 1) {
          charArray.push(StringFromCharCode(data.charCodeAt(i) & 0xff));
        }

        return charArray.join('');
      };

      request.open('GET', url, !sync); // XHR binary charset opt by Marcus Granado 2006 [http://mgran.blogspot.com]

      request.overrideMimeType('text/plain; charset=x-user-defined');

      if (sync === false) {
        request.onload = function () {
          if (request.status === 200) {
            callback(sanitizeUnicode(this.responseText));
          } else {
            callback(undefined);
          }
        };
      }

      request.send(null);

      if (sync && request.status === 200) {
        return sanitizeUnicode(request.responseText);
      }
    };

    try {
      result = xhr(url, sync, callback); // eslint-disable-next-line no-empty
    } catch (e) {}

    return result;
  };
  /**
  * @name loadImageFile
  * @function
  * @param {string} path
  * @param {boolean} sync
  * @param {function} callback
  */


  jsPDFAPI.loadImageFile = jsPDFAPI.loadFile;
})(jsPDF.API);

/* global jsPDF html2canvas */

/**
 * Copyright (c) 2018 Erik Koopmans
 * Released under the MIT License.
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
 * jsPDF html PlugIn
 *
 * @name html
 * @module
 */
(function (jsPDFAPI, global) {

  if (typeof Promise === 'undefined') {
    // eslint-disable-next-line no-console
    console.warn('Promise not found. html-Plugin will not work');
    return;
  }
  /**
  * Determine the type of a variable/object.
  * 
  * @private
  * @ignore
  */


  var objType = function objType(obj) {
    var type = _typeof(obj);

    if (type === 'undefined') { return 'undefined'; }else if (type === 'string' || obj instanceof String) { return 'string'; }else if (type === 'number' || obj instanceof Number) { return 'number'; }else if (type === 'function' || obj instanceof Function) { return 'function'; }else if (!!obj && obj.constructor === Array) { return 'array'; }else if (obj && obj.nodeType === 1) { return 'element'; }else if (type === 'object') { return 'object'; }else { return 'unknown'; }
  };
  /**
  * Create an HTML element with optional className, innerHTML, and style.
  * 
  * @private
  * @ignore
  */


  var createElement = function createElement(tagName, opt) {
    var el = document.createElement(tagName);
    if (opt.className) { el.className = opt.className; }

    if (opt.innerHTML) {
      el.innerHTML = opt.innerHTML;
      var scripts = el.getElementsByTagName('script');

      for (var i = scripts.length; i-- > 0;) {
        scripts[i].parentNode.removeChild(scripts[i]);
      }
    }

    for (var key in opt.style) {
      el.style[key] = opt.style[key];
    }

    return el;
  };
  /**
  * Deep-clone a node and preserve contents/properties.
  * 
  * @private
  * @ignore
  */


  var cloneNode = function cloneNode(node, javascriptEnabled) {
    // Recursively clone the node.
    var clone = node.nodeType === 3 ? document.createTextNode(node.nodeValue) : node.cloneNode(false);

    for (var child = node.firstChild; child; child = child.nextSibling) {
      if (javascriptEnabled === true || child.nodeType !== 1 || child.nodeName !== 'SCRIPT') {
        clone.appendChild(cloneNode(child, javascriptEnabled));
      }
    }

    if (node.nodeType === 1) {
      // Preserve contents/properties of special nodes.
      if (node.nodeName === 'CANVAS') {
        clone.width = node.width;
        clone.height = node.height;
        clone.getContext('2d').drawImage(node, 0, 0);
      } else if (node.nodeName === 'TEXTAREA' || node.nodeName === 'SELECT') {
        clone.value = node.value;
      } // Preserve the node's scroll position when it loads.


      clone.addEventListener('load', function () {
        clone.scrollTop = node.scrollTop;
        clone.scrollLeft = node.scrollLeft;
      }, true);
    } // Return the cloned node.


    return clone;
  };
  /* ----- CONSTRUCTOR ----- */


  var Worker = function Worker(opt) {
    // Create the root parent for the proto chain, and the starting Worker.
    var root = Object.assign(Worker.convert(Promise.resolve()), JSON.parse(JSON.stringify(Worker.template)));
    var self = Worker.convert(Promise.resolve(), root); // Set progress, optional settings, and return.

    self = self.setProgress(1, Worker, 1, [Worker]);
    self = self.set(opt);
    return self;
  }; // Boilerplate for subclassing Promise.


  Worker.prototype = Object.create(Promise.prototype);
  Worker.prototype.constructor = Worker; // Converts/casts promises into Workers.

  Worker.convert = function convert(promise, inherit) {
    // Uses prototypal inheritance to receive changes made to ancestors' properties.
    promise.__proto__ = inherit || Worker.prototype;
    return promise;
  };

  Worker.template = {
    prop: {
      src: null,
      container: null,
      overlay: null,
      canvas: null,
      img: null,
      pdf: null,
      pageSize: null,
      callback: function callback() {}
    },
    progress: {
      val: 0,
      state: null,
      n: 0,
      stack: []
    },
    opt: {
      filename: 'file.pdf',
      margin: [0, 0, 0, 0],
      enableLinks: true,
      x: 0,
      y: 0,
      html2canvas: {},
      jsPDF: {}
    }
  };
  /* ----- FROM / TO ----- */

  Worker.prototype.from = function from(src, type) {
    function getType(src) {
      switch (objType(src)) {
        case 'string':
          return 'string';

        case 'element':
          return src.nodeName.toLowerCase === 'canvas' ? 'canvas' : 'element';

        default:
          return 'unknown';
      }
    }

    return this.then(function from_main() {
      type = type || getType(src);

      switch (type) {
        case 'string':
          return this.set({
            src: createElement('div', {
              innerHTML: src
            })
          });

        case 'element':
          return this.set({
            src: src
          });

        case 'canvas':
          return this.set({
            canvas: src
          });

        case 'img':
          return this.set({
            img: src
          });

        default:
          return this.error('Unknown source type.');
      }
    });
  };

  Worker.prototype.to = function to(target) {
    // Route the 'to' request to the appropriate method.
    switch (target) {
      case 'container':
        return this.toContainer();

      case 'canvas':
        return this.toCanvas();

      case 'img':
        return this.toImg();

      case 'pdf':
        return this.toPdf();

      default:
        return this.error('Invalid target.');
    }
  };

  Worker.prototype.toContainer = function toContainer() {
    // Set up function prerequisites.
    var prereqs = [function checkSrc() {
      return this.prop.src || this.error('Cannot duplicate - no source HTML.');
    }, function checkPageSize() {
      return this.prop.pageSize || this.setPageSize();
    }];
    return this.thenList(prereqs).then(function toContainer_main() {
      // Define the CSS styles for the container and its overlay parent.
      var overlayCSS = {
        position: 'fixed',
        overflow: 'hidden',
        zIndex: 1000,
        left: '-100000px',
        right: 0,
        bottom: 0,
        top: 0
      };
      var containerCSS = {
        position: 'relative',
        display: 'inline-block',
        width: Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) + 'px',
        left: 0,
        right: 0,
        top: 0,
        margin: 'auto',
        backgroundColor: 'white'
      }; // Set the overlay to hidden (could be changed in the future to provide a print preview).

      var source = cloneNode(this.prop.src, this.opt.html2canvas.javascriptEnabled);

      if (source.tagName === 'BODY') {
        containerCSS.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + 'px';
      }

      this.prop.overlay = createElement('div', {
        className: 'html2pdf__overlay',
        style: overlayCSS
      });
      this.prop.container = createElement('div', {
        className: 'html2pdf__container',
        style: containerCSS
      });
      this.prop.container.appendChild(source);
      this.prop.container.firstChild.appendChild(createElement('div', {
        style: {
          clear: 'both',
          border: '0 none transparent',
          margin: 0,
          padding: 0,
          height: 0
        }
      }));
      this.prop.container.style["float"] = 'none';
      this.prop.overlay.appendChild(this.prop.container);
      document.body.appendChild(this.prop.overlay);
      this.prop.container.firstChild.style.position = 'relative';
      this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + 'px';
    });
  };

  Worker.prototype.toCanvas = function toCanvas() {
    // Set up function prerequisites.
    var prereqs = [function checkContainer() {
      return document.body.contains(this.prop.container) || this.toContainer();
    }]; // Fulfill prereqs then create the canvas.

    return this.thenList(prereqs).then(function toCanvas_main() {
      // Handle old-fashioned 'onrendered' argument.
      var options = Object.assign({}, this.opt.html2canvas);
      delete options.onrendered;

      if (!this.isHtml2CanvasLoaded()) {
        return;
      }

      return html2canvas(this.prop.container, options);
    }).then(function toCanvas_post(canvas) {
      // Handle old-fashioned 'onrendered' argument.
      var onRendered = this.opt.html2canvas.onrendered || function () {};

      onRendered(canvas);
      this.prop.canvas = canvas;
      document.body.removeChild(this.prop.overlay);
    });
  };

  Worker.prototype.toContext2d = function toContext2d() {
    // Set up function prerequisites.
    var prereqs = [function checkContainer() {
      return document.body.contains(this.prop.container) || this.toContainer();
    }]; // Fulfill prereqs then create the canvas.

    return this.thenList(prereqs).then(function toContext2d_main() {
      // Handle old-fashioned 'onrendered' argument.
      var pdf = this.opt.jsPDF;
      var options = Object.assign({
        async: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        imageTimeout: 15000,
        logging: true,
        proxy: null,
        removeContainer: true,
        foreignObjectRendering: false,
        useCORS: false
      }, this.opt.html2canvas);
      delete options.onrendered;
      pdf.context2d.autoPaging = true;
      pdf.context2d.posX = this.opt.x;
      pdf.context2d.posY = this.opt.y;
      options.windowHeight = options.windowHeight || 0;
      options.windowHeight = options.windowHeight == 0 ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : options.windowHeight;

      if (!this.isHtml2CanvasLoaded()) {
        return;
      }

      return html2canvas(this.prop.container, options);
    }).then(function toContext2d_post(canvas) {
      // Handle old-fashioned 'onrendered' argument.
      var onRendered = this.opt.html2canvas.onrendered || function () {};

      onRendered(canvas);
      this.prop.canvas = canvas;
      document.body.removeChild(this.prop.overlay);
    });
  };

  Worker.prototype.toImg = function toImg() {
    // Set up function prerequisites.
    var prereqs = [function checkCanvas() {
      return this.prop.canvas || this.toCanvas();
    }]; // Fulfill prereqs then create the image.

    return this.thenList(prereqs).then(function toImg_main() {
      var imgData = this.prop.canvas.toDataURL('image/' + this.opt.image.type, this.opt.image.quality);
      this.prop.img = document.createElement('img');
      this.prop.img.src = imgData;
    });
  };

  Worker.prototype.toPdf = function toPdf() {
    // Set up function prerequisites.
    var prereqs = [function checkContext2d() {
      return this.toContext2d();
    } //function checkCanvas() { return this.prop.canvas || this.toCanvas(); }
    ]; // Fulfill prereqs then create the image.

    return this.thenList(prereqs).then(function toPdf_main() {
      // Create local copies of frequently used properties.
      this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
    });
  };
  /* ----- OUTPUT / SAVE ----- */


  Worker.prototype.output = function output(type, options, src) {
    // Redirect requests to the correct function (outputPdf / outputImg).
    src = src || 'pdf';

    if (src.toLowerCase() === 'img' || src.toLowerCase() === 'image') {
      return this.outputImg(type, options);
    } else {
      return this.outputPdf(type, options);
    }
  };

  Worker.prototype.outputPdf = function outputPdf(type, options) {
    // Set up function prerequisites.
    var prereqs = [function checkPdf() {
      return this.prop.pdf || this.toPdf();
    }]; // Fulfill prereqs then perform the appropriate output.

    return this.thenList(prereqs).then(function outputPdf_main() {
      /* Currently implemented output types:
       *    https://rawgit.com/MrRio/jsPDF/master/docs/jspdf.js.html#line992
       *  save(options), arraybuffer, blob, bloburi/bloburl,
       *  datauristring/dataurlstring, dataurlnewwindow, datauri/dataurl
       */
      return this.prop.pdf.output(type, options);
    });
  };

  Worker.prototype.outputImg = function outputImg(type) {
    // Set up function prerequisites.
    var prereqs = [function checkImg() {
      return this.prop.img || this.toImg();
    }]; // Fulfill prereqs then perform the appropriate output.

    return this.thenList(prereqs).then(function outputImg_main() {
      switch (type) {
        case undefined:
        case 'img':
          return this.prop.img;

        case 'datauristring':
        case 'dataurlstring':
          return this.prop.img.src;

        case 'datauri':
        case 'dataurl':
          return document.location.href = this.prop.img.src;

        default:
          throw 'Image output type "' + type + '" is not supported.';
      }
    });
  };

  Worker.prototype.isHtml2CanvasLoaded = function () {
    var result = typeof global.html2canvas !== "undefined";

    if (!result) {
      throw new Error("html2canvas not loaded.");
    }

    return result;
  };

  Worker.prototype.save = function save(filename) {
    // Set up function prerequisites.
    var prereqs = [function checkPdf() {
      return this.prop.pdf || this.toPdf();
    }];

    if (!this.isHtml2CanvasLoaded()) {
      return;
    } // Fulfill prereqs, update the filename (if provided), and save the PDF.


    return this.thenList(prereqs).set(filename ? {
      filename: filename
    } : null).then(function save_main() {
      this.prop.pdf.save(this.opt.filename);
    });
  };

  Worker.prototype.doCallback = function doCallback() {
    // Set up function prerequisites.
    var prereqs = [function checkPdf() {
      return this.prop.pdf || this.toPdf();
    }];

    if (!this.isHtml2CanvasLoaded()) {
      return;
    } // Fulfill prereqs, update the filename (if provided), and save the PDF.


    return this.thenList(prereqs).then(function doCallback_main() {
      this.prop.callback(this.prop.pdf);
    });
  };
  /* ----- SET / GET ----- */


  Worker.prototype.set = function set(opt) {
    // TODO: Implement ordered pairs?
    // Silently ignore invalid or empty input.
    if (objType(opt) !== 'object') {
      return this;
    } // Build an array of setter functions to queue.


    var fns = Object.keys(opt || {}).map(function (key) {
      if (key in Worker.template.prop) {
        // Set pre-defined properties.
        return function set_prop() {
          this.prop[key] = opt[key];
        };
      } else {
        switch (key) {
          case 'margin':
            return this.setMargin.bind(this, opt.margin);

          case 'jsPDF':
            return function set_jsPDF() {
              this.opt.jsPDF = opt.jsPDF;
              return this.setPageSize();
            };

          case 'pageSize':
            return this.setPageSize.bind(this, opt.pageSize);

          default:
            // Set any other properties in opt.
            return function set_opt() {
              this.opt[key] = opt[key];
            };
        }
      }
    }, this); // Set properties within the promise chain.

    return this.then(function set_main() {
      return this.thenList(fns);
    });
  };

  Worker.prototype.get = function get(key, cbk) {
    return this.then(function get_main() {
      // Fetch the requested property, either as a predefined prop or in opt.
      var val = key in Worker.template.prop ? this.prop[key] : this.opt[key];
      return cbk ? cbk(val) : val;
    });
  };

  Worker.prototype.setMargin = function setMargin(margin) {
    return this.then(function setMargin_main() {
      // Parse the margin property.
      switch (objType(margin)) {
        case 'number':
          margin = [margin, margin, margin, margin];
        // eslint-disable-next-line no-fallthrough

        case 'array':
          if (margin.length === 2) {
            margin = [margin[0], margin[1], margin[0], margin[1]];
          }

          if (margin.length === 4) {
            break;
          }

        // eslint-disable-next-line no-fallthrough

        default:
          return this.error('Invalid margin array.');
      } // Set the margin property, then update pageSize.


      this.opt.margin = margin;
    }).then(this.setPageSize);
  };

  Worker.prototype.setPageSize = function setPageSize(pageSize) {
    function toPx(val, k) {
      return Math.floor(val * k / 72 * 96);
    }

    return this.then(function setPageSize_main() {
      // Retrieve page-size based on jsPDF settings, if not explicitly provided.
      pageSize = pageSize || jsPDF.getPageSize(this.opt.jsPDF); // Add 'inner' field if not present.

      if (!pageSize.hasOwnProperty('inner')) {
        pageSize.inner = {
          width: pageSize.width - this.opt.margin[1] - this.opt.margin[3],
          height: pageSize.height - this.opt.margin[0] - this.opt.margin[2]
        };
        pageSize.inner.px = {
          width: toPx(pageSize.inner.width, pageSize.k),
          height: toPx(pageSize.inner.height, pageSize.k)
        };
        pageSize.inner.ratio = pageSize.inner.height / pageSize.inner.width;
      } // Attach pageSize to this.


      this.prop.pageSize = pageSize;
    });
  };

  Worker.prototype.setProgress = function setProgress(val, state, n, stack) {
    // Immediately update all progress values.
    if (val != null) { this.progress.val = val; }
    if (state != null) { this.progress.state = state; }
    if (n != null) { this.progress.n = n; }
    if (stack != null) { this.progress.stack = stack; }
    this.progress.ratio = this.progress.val / this.progress.state; // Return this for command chaining.

    return this;
  };

  Worker.prototype.updateProgress = function updateProgress(val, state, n, stack) {
    // Immediately update all progress values, using setProgress.
    return this.setProgress(val ? this.progress.val + val : null, state ? state : null, n ? this.progress.n + n : null, stack ? this.progress.stack.concat(stack) : null);
  };
  /* ----- PROMISE MAPPING ----- */


  Worker.prototype.then = function then(onFulfilled, onRejected) {
    // Wrap `this` for encapsulation.
    var self = this;
    return this.thenCore(onFulfilled, onRejected, function then_main(onFulfilled, onRejected) {
      // Update progress while queuing, calling, and resolving `then`.
      self.updateProgress(null, null, 1, [onFulfilled]);
      return Promise.prototype.then.call(this, function then_pre(val) {
        self.updateProgress(null, onFulfilled);
        return val;
      }).then(onFulfilled, onRejected).then(function then_post(val) {
        self.updateProgress(1);
        return val;
      });
    });
  };

  Worker.prototype.thenCore = function thenCore(onFulfilled, onRejected, thenBase) {
    // Handle optional thenBase parameter.
    thenBase = thenBase || Promise.prototype.then; // Wrap `this` for encapsulation and bind it to the promise handlers.

    var self = this;

    if (onFulfilled) {
      onFulfilled = onFulfilled.bind(self);
    }

    if (onRejected) {
      onRejected = onRejected.bind(self);
    } // Cast self into a Promise to avoid polyfills recursively defining `then`.


    var isNative = Promise.toString().indexOf('[native code]') !== -1 && Promise.name === 'Promise';
    var selfPromise = isNative ? self : Worker.convert(Object.assign({}, self), Promise.prototype); // Return the promise, after casting it into a Worker and preserving props.

    var returnVal = thenBase.call(selfPromise, onFulfilled, onRejected);
    return Worker.convert(returnVal, self.__proto__);
  };

  Worker.prototype.thenExternal = function thenExternal(onFulfilled, onRejected) {
    // Call `then` and return a standard promise (exits the Worker chain).
    return Promise.prototype.then.call(this, onFulfilled, onRejected);
  };

  Worker.prototype.thenList = function thenList(fns) {
    // Queue a series of promise 'factories' into the promise chain.
    var self = this;
    fns.forEach(function thenList_forEach(fn) {
      self = self.thenCore(fn);
    });
    return self;
  };

  Worker.prototype['catch'] = function (onRejected) {
    // Bind `this` to the promise handler, call `catch`, and return a Worker.
    if (onRejected) {
      onRejected = onRejected.bind(this);
    }

    var returnVal = Promise.prototype['catch'].call(this, onRejected);
    return Worker.convert(returnVal, this);
  };

  Worker.prototype.catchExternal = function catchExternal(onRejected) {
    // Call `catch` and return a standard promise (exits the Worker chain).
    return Promise.prototype['catch'].call(this, onRejected);
  };

  Worker.prototype.error = function error(msg) {
    // Throw the error in the Promise chain.
    return this.then(function error_main() {
      throw new Error(msg);
    });
  };
  /* ----- ALIASES ----- */


  Worker.prototype.using = Worker.prototype.set;
  Worker.prototype.saveAs = Worker.prototype.save;
  Worker.prototype["export"] = Worker.prototype.output;
  Worker.prototype.run = Worker.prototype.then; // Get dimensions of a PDF page, as determined by jsPDF.

  jsPDF.getPageSize = function (orientation, unit, format) {
    // Decode options object
    if (_typeof(orientation) === 'object') {
      var options = orientation;
      orientation = options.orientation;
      unit = options.unit || unit;
      format = options.format || format;
    } // Default options


    unit = unit || 'mm';
    format = format || 'a4';
    orientation = ('' + (orientation || 'P')).toLowerCase();
    var format_as_string = ('' + format).toLowerCase(); // Size in pt of various paper formats

    var pageFormats = {
      'a0': [2383.94, 3370.39],
      'a1': [1683.78, 2383.94],
      'a2': [1190.55, 1683.78],
      'a3': [841.89, 1190.55],
      'a4': [595.28, 841.89],
      'a5': [419.53, 595.28],
      'a6': [297.64, 419.53],
      'a7': [209.76, 297.64],
      'a8': [147.40, 209.76],
      'a9': [104.88, 147.40],
      'a10': [73.70, 104.88],
      'b0': [2834.65, 4008.19],
      'b1': [2004.09, 2834.65],
      'b2': [1417.32, 2004.09],
      'b3': [1000.63, 1417.32],
      'b4': [708.66, 1000.63],
      'b5': [498.90, 708.66],
      'b6': [354.33, 498.90],
      'b7': [249.45, 354.33],
      'b8': [175.75, 249.45],
      'b9': [124.72, 175.75],
      'b10': [87.87, 124.72],
      'c0': [2599.37, 3676.54],
      'c1': [1836.85, 2599.37],
      'c2': [1298.27, 1836.85],
      'c3': [918.43, 1298.27],
      'c4': [649.13, 918.43],
      'c5': [459.21, 649.13],
      'c6': [323.15, 459.21],
      'c7': [229.61, 323.15],
      'c8': [161.57, 229.61],
      'c9': [113.39, 161.57],
      'c10': [79.37, 113.39],
      'dl': [311.81, 623.62],
      'letter': [612, 792],
      'government-letter': [576, 756],
      'legal': [612, 1008],
      'junior-legal': [576, 360],
      'ledger': [1224, 792],
      'tabloid': [792, 1224],
      'credit-card': [153, 243]
    };
    var k; // Unit conversion

    switch (unit) {
      case 'pt':
        k = 1;
        break;

      case 'mm':
        k = 72 / 25.4;
        break;

      case 'cm':
        k = 72 / 2.54;
        break;

      case 'in':
        k = 72;
        break;

      case 'px':
        k = 72 / 96;
        break;

      case 'pc':
        k = 12;
        break;

      case 'em':
        k = 12;
        break;

      case 'ex':
        k = 6;
        break;

      default:
        throw 'Invalid unit: ' + unit;
    }

    var pageHeight = 0;
    var pageWidth = 0; // Dimensions are stored as user units and converted to points on output

    if (pageFormats.hasOwnProperty(format_as_string)) {
      pageHeight = pageFormats[format_as_string][1] / k;
      pageWidth = pageFormats[format_as_string][0] / k;
    } else {
      try {
        pageHeight = format[1];
        pageWidth = format[0];
      } catch (err) {
        throw new Error('Invalid format: ' + format);
      }
    }

    var tmp; // Handle page orientation

    if (orientation === 'p' || orientation === 'portrait') {
      orientation = 'p';

      if (pageWidth > pageHeight) {
        tmp = pageWidth;
        pageWidth = pageHeight;
        pageHeight = tmp;
      }
    } else if (orientation === 'l' || orientation === 'landscape') {
      orientation = 'l';

      if (pageHeight > pageWidth) {
        tmp = pageWidth;
        pageWidth = pageHeight;
        pageHeight = tmp;
      }
    } else {
      throw 'Invalid orientation: ' + orientation;
    } // Return information (k is the unit conversion ratio from pts)


    var info = {
      'width': pageWidth,
      'height': pageHeight,
      'unit': unit,
      'k': k,
      'orientation': orientation
    };
    return info;
  };
  /**
   * Generate a PDF from an HTML element or string using.
   *
   * @name html
   * @function
   * @param {HTMLElement|string} source The source HTMLElement or a string containing HTML.
   * @param {Object} [options] Collection of settings
   * @param {string} [options.callback] The mandatory callback-function gets as first parameter the current jsPDF instance
   * 
   * @example
   * var doc = new jsPDF();   
   * 
   * doc.html(document.body, {
   *    callback: function (doc) {
   *      doc.save();
   *    }
   * });
   */


  jsPDFAPI.html = function (src, options) {

    options = options || {};

    options.callback = options.callback || function () {};

    options.html2canvas = options.html2canvas || {};
    options.html2canvas.canvas = options.html2canvas.canvas || this.canvas;
    options.jsPDF = options.jsPDF || this; // Create a new worker with the given options.

    var worker = new Worker(options);

    if (!options.worker) {
      // If worker is not set to true, perform the traditional 'simple' operation.
      return worker.from(src).doCallback();
    } else {
      // Otherwise, return the worker for new Promise-based operation.
      return worker;
    }
  };
})(jsPDF.API, typeof window !== "undefined" && window || typeof global !== "undefined" && global);

/*global jsPDF */

/**
 * @license
 * ==================================================================== 
 * Copyright (c) 2013 Youssef Beddad, youssef.beddad@gmail.com
 * 
 * 
 * ====================================================================
 */

/**
 * jsPDF JavaScript plugin
 *
 * @name javascript
 * @module
*/
(function (jsPDFAPI) {

  var jsNamesObj, jsJsObj, text;
  /**
  * @name addJS
  * @function
  * @param {string} javascript The javascript to be embedded into the PDF-file.
  * @returns {jsPDF}
  */

  jsPDFAPI.addJS = function (javascript) {
    text = javascript;
    this.internal.events.subscribe('postPutResources', function () {
      jsNamesObj = this.internal.newObject();
      this.internal.out('<<');
      this.internal.out('/Names [(EmbeddedJS) ' + (jsNamesObj + 1) + ' 0 R]');
      this.internal.out('>>');
      this.internal.out('endobj');
      jsJsObj = this.internal.newObject();
      this.internal.out('<<');
      this.internal.out('/S /JavaScript');
      this.internal.out('/JS (' + text + ')');
      this.internal.out('>>');
      this.internal.out('endobj');
    });
    this.internal.events.subscribe('putCatalog', function () {
      if (jsNamesObj !== undefined && jsJsObj !== undefined) {
        this.internal.out('/Names <</JavaScript ' + jsNamesObj + ' 0 R>>');
      }
    });
    return this;
  };
})(jsPDF.API);

/* global jsPDF */

/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
 * jsPDF Outline PlugIn
 * 
 * Generates a PDF Outline
 * @name outline
 * @module
 */
(function (jsPDFAPI) {

  var namesOid; //var destsGoto = [];

  jsPDFAPI.events.push(['postPutResources', function () {
    var pdf = this;
    var rx = /^(\d+) 0 obj$/; // Write action goto objects for each page
    // this.outline.destsGoto = [];
    // for (var i = 0; i < totalPages; i++) {
    // var id = pdf.internal.newObject();
    // this.outline.destsGoto.push(id);
    // pdf.internal.write("<</D[" + (i * 2 + 3) + " 0 R /XYZ null
    // null null]/S/GoTo>> endobj");
    // }
    //
    // for (var i = 0; i < dests.length; i++) {
    // pdf.internal.write("(page_" + (i + 1) + ")" + dests[i] + " 0
    // R");
    // }
    //				

    if (this.outline.root.children.length > 0) {
      var lines = pdf.outline.render().split(/\r\n/);

      for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        var m = rx.exec(line);

        if (m != null) {
          var oid = m[1];
          pdf.internal.newObjectDeferredBegin(oid, false);
        }

        pdf.internal.write(line);
      }
    } // This code will write named destination for each page reference
    // (page_1, etc)


    if (this.outline.createNamedDestinations) {
      var totalPages = this.internal.pages.length; // WARNING: this assumes jsPDF starts on page 3 and pageIDs
      // follow 5, 7, 9, etc
      // Write destination objects for each page

      var dests = [];

      for (var i = 0; i < totalPages; i++) {
        var id = pdf.internal.newObject();
        dests.push(id);
        var info = pdf.internal.getPageInfo(i + 1);
        pdf.internal.write("<< /D[" + info.objId + " 0 R /XYZ null null null]>> endobj");
      } // assign a name for each destination


      var names2Oid = pdf.internal.newObject();
      pdf.internal.write('<< /Names [ ');

      for (var i = 0; i < dests.length; i++) {
        pdf.internal.write("(page_" + (i + 1) + ")" + dests[i] + " 0 R");
      }

      pdf.internal.write(' ] >>', 'endobj'); // var kids = pdf.internal.newObject();
      // pdf.internal.write('<< /Kids [ ' + names2Oid + ' 0 R');
      // pdf.internal.write(' ] >>', 'endobj');

      namesOid = pdf.internal.newObject();
      pdf.internal.write('<< /Dests ' + names2Oid + " 0 R");
      pdf.internal.write('>>', 'endobj');
    }
  }]);
  jsPDFAPI.events.push(['putCatalog', function () {
    var pdf = this;

    if (pdf.outline.root.children.length > 0) {
      pdf.internal.write("/Outlines", this.outline.makeRef(this.outline.root));

      if (this.outline.createNamedDestinations) {
        pdf.internal.write("/Names " + namesOid + " 0 R");
      } // Open with Bookmarks showing
      // pdf.internal.write("/PageMode /UseOutlines");

    }
  }]);
  jsPDFAPI.events.push(['initialized', function () {
    var pdf = this;
    pdf.outline = {
      createNamedDestinations: false,
      root: {
        children: []
      }
    };
    /**
     * Options: pageNumber
     */

    pdf.outline.add = function (parent, title, options) {
      var item = {
        title: title,
        options: options,
        children: []
      };

      if (parent == null) {
        parent = this.root;
      }

      parent.children.push(item);
      return item;
    };

    pdf.outline.render = function () {
      this.ctx = {};
      this.ctx.val = '';
      this.ctx.pdf = pdf;
      this.genIds_r(this.root);
      this.renderRoot(this.root);
      this.renderItems(this.root);
      return this.ctx.val;
    };

    pdf.outline.genIds_r = function (node) {
      node.id = pdf.internal.newObjectDeferred();

      for (var i = 0; i < node.children.length; i++) {
        this.genIds_r(node.children[i]);
      }
    };

    pdf.outline.renderRoot = function (node) {
      this.objStart(node);
      this.line('/Type /Outlines');

      if (node.children.length > 0) {
        this.line('/First ' + this.makeRef(node.children[0]));
        this.line('/Last ' + this.makeRef(node.children[node.children.length - 1]));
      }

      this.line('/Count ' + this.count_r({
        count: 0
      }, node));
      this.objEnd();
    };

    pdf.outline.renderItems = function (node) {
      var getVerticalCoordinateString = this.ctx.pdf.internal.getVerticalCoordinateString;

      for (var i = 0; i < node.children.length; i++) {
        var item = node.children[i];
        this.objStart(item);
        this.line('/Title ' + this.makeString(item.title));
        this.line('/Parent ' + this.makeRef(node));

        if (i > 0) {
          this.line('/Prev ' + this.makeRef(node.children[i - 1]));
        }

        if (i < node.children.length - 1) {
          this.line('/Next ' + this.makeRef(node.children[i + 1]));
        }

        if (item.children.length > 0) {
          this.line('/First ' + this.makeRef(item.children[0]));
          this.line('/Last ' + this.makeRef(item.children[item.children.length - 1]));
        }

        var count = this.count = this.count_r({
          count: 0
        }, item);

        if (count > 0) {
          this.line('/Count ' + count);
        }

        if (item.options) {
          if (item.options.pageNumber) {
            // Explicit Destination
            //WARNING this assumes page ids are 3,5,7, etc.
            var info = pdf.internal.getPageInfo(item.options.pageNumber);
            this.line('/Dest ' + '[' + info.objId + ' 0 R /XYZ 0 ' + getVerticalCoordinateString(0) + ' 0]'); // this line does not work on all clients (pageNumber instead of page ref)
            //this.line('/Dest ' + '[' + (item.options.pageNumber - 1) + ' /XYZ 0 ' + this.ctx.pdf.internal.pageSize.getHeight() + ' 0]');
            // Named Destination
            // this.line('/Dest (page_' + (item.options.pageNumber) + ')');
            // Action Destination
            // var id = pdf.internal.newObject();
            // pdf.internal.write('<</D[' + (item.options.pageNumber - 1) + ' /XYZ null null null]/S/GoTo>> endobj');
            // this.line('/A ' + id + ' 0 R' );
          }
        }

        this.objEnd();
      }

      for (var z = 0; z < node.children.length; z++) {
        this.renderItems(node.children[z]);
      }
    };

    pdf.outline.line = function (text) {
      this.ctx.val += text + '\r\n';
    };

    pdf.outline.makeRef = function (node) {
      return node.id + ' 0 R';
    };

    pdf.outline.makeString = function (val) {
      return '(' + pdf.internal.pdfEscape(val) + ')';
    };

    pdf.outline.objStart = function (node) {
      this.ctx.val += '\r\n' + node.id + ' 0 obj' + '\r\n<<\r\n';
    };

    pdf.outline.objEnd = function () {
      this.ctx.val += '>> \r\n' + 'endobj' + '\r\n';
    };

    pdf.outline.count_r = function (ctx, node) {
      for (var i = 0; i < node.children.length; i++) {
        ctx.count++;
        this.count_r(ctx, node.children[i]);
      }

      return ctx.count;
    };
  }]);
  return this;
})(jsPDF.API);

/* global jsPDF */

/**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* jsPDF jpeg Support PlugIn
*
* @name jpeg_support
* @module
*/
(function (jsPDFAPI) {
  /**
   * 0xc0 (SOF) Huffman  - Baseline DCT
   * 0xc1 (SOF) Huffman  - Extended sequential DCT
   * 0xc2 Progressive DCT (SOF2)
   * 0xc3 Spatial (sequential) lossless (SOF3)
   * 0xc4 Differential sequential DCT (SOF5)
   * 0xc5 Differential progressive DCT (SOF6)
   * 0xc6 Differential spatial (SOF7)
   * 0xc7 
   */

  var markers = [0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7]; //takes a string imgData containing the raw bytes of
  //a jpeg image and returns [width, height]
  //Algorithm from: http://www.64lines.com/jpeg-width-height

  var getJpegInfo = function getJpegInfo(imgData) {
    var width, height, numcomponents;
    var blockLength = imgData.charCodeAt(4) * 256 + imgData.charCodeAt(5);
    var len = imgData.length;
    var result = {
      width: 0,
      height: 0,
      numcomponents: 1
    };

    for (var i = 4; i < len; i += 2) {
      i += blockLength;

      if (markers.indexOf(imgData.charCodeAt(i + 1)) !== -1) {
        height = imgData.charCodeAt(i + 5) * 256 + imgData.charCodeAt(i + 6);
        width = imgData.charCodeAt(i + 7) * 256 + imgData.charCodeAt(i + 8);
        numcomponents = imgData.charCodeAt(i + 9);
        result = {
          width: width,
          height: height,
          numcomponents: numcomponents
        };
        break;
      } else {
        blockLength = imgData.charCodeAt(i + 2) * 256 + imgData.charCodeAt(i + 3);
      }
    }

    return result;
  };
  /**
  * @ignore
  */


  jsPDFAPI.processJPEG = function (data, index, alias, compression, dataAsBinaryString, colorSpace) {
    var filter = this.decode.DCT_DECODE,
        bpc = 8,
        dims,
        result = null;

    if (typeof data === 'string' || this.__addimage__.isArrayBuffer(data) || this.__addimage__.isArrayBufferView(data)) {
      // if we already have a stored binary string rep use that
      data = dataAsBinaryString || data;
      data = this.__addimage__.isArrayBuffer(data) ? new Uint8Array(data) : data;
      data = this.__addimage__.isArrayBufferView(data) ? this.__addimage__.arrayBufferToBinaryString(data) : data;
      dims = getJpegInfo(data);

      switch (dims.numcomponents) {
        case 1:
          colorSpace = this.color_spaces.DEVICE_GRAY;
          break;

        case 4:
          colorSpace = this.color_spaces.DEVICE_CMYK;
          break;

        case 3:
          colorSpace = this.color_spaces.DEVICE_RGB;
          break;
      }

      result = {
        data: data,
        width: dims.width,
        height: dims.height,
        colorSpace: colorSpace,
        bitsPerComponent: bpc,
        filter: filter,
        index: index,
        alias: alias
      };
    }

    return result;
  };
})(jsPDF.API);

/* global jsPDF, Deflater, PNG */

/**
 * @license
 * 
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * 
 * ====================================================================
 */

/**
* jsPDF PNG PlugIn
* @name png_support
* @module
*/
(function (jsPDFAPI, global) {
  /*
   * @see http://www.w3.org/TR/PNG-Chunks.html
   *
   Color    Allowed      Interpretation
   Type     Bit Depths
      0       1,2,4,8,16  Each pixel is a grayscale sample.
      2       8,16        Each pixel is an R,G,B triple.
      3       1,2,4,8     Each pixel is a palette index;
                         a PLTE chunk must appear.
      4       8,16        Each pixel is a grayscale sample,
                         followed by an alpha sample.
      6       8,16        Each pixel is an R,G,B triple,
                         followed by an alpha sample.
  */

  /*
   * PNG filter method types
   *
   * @see http://www.w3.org/TR/PNG-Filters.html
   * @see http://www.libpng.org/pub/png/book/chapter09.html
   *
   * This is what the value 'Predictor' in decode params relates to
   *
   * 15 is "optimal prediction", which means the prediction algorithm can change from line to line.
   * In that case, you actually have to read the first byte off each line for the prediction algorthim (which should be 0-4, corresponding to PDF 10-14) and select the appropriate unprediction algorithm based on that byte.
   *
     0       None
     1       Sub
     2       Up
     3       Average
     4       Paeth
   */

  var doesNotHavePngJS = function doesNotHavePngJS() {
    return typeof global.PNG !== 'function' || typeof global.FlateStream !== 'function';
  };

  var canCompress = function canCompress(value) {
    return value !== jsPDFAPI.image_compression.NONE && hasCompressionJS();
  };

  var hasCompressionJS = function hasCompressionJS() {
    return typeof Deflater === 'function';
  };

  var compressBytes = function compressBytes(bytes, lineLength, colorsPerPixel, compression) {
    var level = 5;
    var filter_method = filterUp;

    switch (compression) {
      case jsPDFAPI.image_compression.FAST:
        level = 3;
        filter_method = filterSub;
        break;

      case jsPDFAPI.image_compression.MEDIUM:
        level = 6;
        filter_method = filterAverage;
        break;

      case jsPDFAPI.image_compression.SLOW:
        level = 9;
        filter_method = filterPaeth;
        break;
    }

    bytes = applyPngFilterMethod(bytes, lineLength, colorsPerPixel, filter_method);
    var header = new Uint8Array(createZlibHeader(level));
    var checksum = jsPDF.API.adler32cs.fromBuffer(bytes.buffer);
    var deflate = new Deflater(level);
    var a = deflate.append(bytes);
    var cBytes = deflate.flush();
    var len = header.length + a.length + cBytes.length;
    var cmpd = new Uint8Array(len + 4);
    cmpd.set(header);
    cmpd.set(a, header.length);
    cmpd.set(cBytes, header.length + a.length);
    cmpd[len++] = checksum >>> 24 & 0xff;
    cmpd[len++] = checksum >>> 16 & 0xff;
    cmpd[len++] = checksum >>> 8 & 0xff;
    cmpd[len++] = checksum & 0xff;
    return jsPDFAPI.__addimage__.arrayBufferToBinaryString(cmpd);
  };

  var createZlibHeader = function createZlibHeader(level) {
    /*
     * @see http://www.ietf.org/rfc/rfc1950.txt for zlib header
     */
    var hdr = 30720;
    var flevel = Math.min(3, (level - 1 & 0xff) >> 1);
    hdr |= flevel << 6;
    hdr |= 0; //FDICT

    hdr += 31 - hdr % 31;
    return [120, hdr & 0xff & 0xff];
  };

  var applyPngFilterMethod = function applyPngFilterMethod(bytes, lineLength, colorsPerPixel, filter_method) {
    var lines = bytes.length / lineLength,
        result = new Uint8Array(bytes.length + lines),
        filter_methods = getFilterMethods(),
        line,
        prevLine,
        offset;

    for (var i = 0; i < lines; i += 1) {
      offset = i * lineLength;
      line = bytes.subarray(offset, offset + lineLength);

      if (filter_method) {
        result.set(filter_method(line, colorsPerPixel, prevLine), offset + i);
      } else {
        var len = filter_methods.length,
            results = [];

        for (var j; j < len; j += 1) {
          results[j] = filter_methods[j](line, colorsPerPixel, prevLine);
        }

        var ind = getIndexOfSmallestSum(results.concat());
        result.set(results[ind], offset + i);
      }

      prevLine = line;
    }

    return result;
  };

  var filterNone = function filterNone(line) {
    /*var result = new Uint8Array(line.length + 1);
    result[0] = 0;
    result.set(line, 1);*/
    var result = Array.apply([], line);
    result.unshift(0);
    return result;
  };

  var filterSub = function filterSub(line, colorsPerPixel) {
    var result = [],
        len = line.length,
        left;
    result[0] = 1;

    for (var i = 0; i < len; i += 1) {
      left = line[i - colorsPerPixel] || 0;
      result[i + 1] = line[i] - left + 0x0100 & 0xff;
    }

    return result;
  };

  var filterUp = function filterUp(line, colorsPerPixel, prevLine) {
    var result = [],
        len = line.length,
        up;
    result[0] = 2;

    for (var i = 0; i < len; i += 1) {
      up = prevLine && prevLine[i] || 0;
      result[i + 1] = line[i] - up + 0x0100 & 0xff;
    }

    return result;
  };

  var filterAverage = function filterAverage(line, colorsPerPixel, prevLine) {
    var result = [],
        len = line.length,
        left,
        up;
    result[0] = 3;

    for (var i = 0; i < len; i += 1) {
      left = line[i - colorsPerPixel] || 0;
      up = prevLine && prevLine[i] || 0;
      result[i + 1] = line[i] + 0x0100 - (left + up >>> 1) & 0xff;
    }

    return result;
  };

  var filterPaeth = function filterPaeth(line, colorsPerPixel, prevLine) {
    var result = [],
        len = line.length,
        left,
        up,
        upLeft,
        paeth;
    result[0] = 4;

    for (var i = 0; i < len; i += 1) {
      left = line[i - colorsPerPixel] || 0;
      up = prevLine && prevLine[i] || 0;
      upLeft = prevLine && prevLine[i - colorsPerPixel] || 0;
      paeth = paethPredictor(left, up, upLeft);
      result[i + 1] = line[i] - paeth + 0x0100 & 0xff;
    }

    return result;
  };

  var paethPredictor = function paethPredictor(left, up, upLeft) {
    if (left === up && up === upLeft) {
      return left;
    }

    var pLeft = Math.abs(up - upLeft),
        pUp = Math.abs(left - upLeft),
        pUpLeft = Math.abs(left + up - upLeft - upLeft);
    return pLeft <= pUp && pLeft <= pUpLeft ? left : pUp <= pUpLeft ? up : upLeft;
  };

  var getFilterMethods = function getFilterMethods() {
    return [filterNone, filterSub, filterUp, filterAverage, filterPaeth];
  };

  var getIndexOfSmallestSum = function getIndexOfSmallestSum(arrays) {
    var sum = arrays.map(function (value) {
      return value.reduce(function (pv, cv) {
        return pv + Math.abs(cv);
      }, 0);
    });
    return sum.indexOf(Math.min.apply(null, sum));
  };

  var getPredictorFromCompression = function getPredictorFromCompression(compression) {
    var predictor;

    switch (compression) {
      case jsPDFAPI.image_compression.FAST:
        predictor = 11;
        break;

      case jsPDFAPI.image_compression.MEDIUM:
        predictor = 13;
        break;

      case jsPDFAPI.image_compression.SLOW:
        predictor = 14;
        break;

      default:
        predictor = 12;
        break;
    }

    return predictor;
  };
  /**
  * @name processPNG
  * @function
  * @ignore
  */


  jsPDFAPI.processPNG = function (imageData, index, alias, compression) {

    var colorSpace,
        filter = this.decode.FLATE_DECODE,
        bitsPerComponent,
        image,
        decodeParameters = '',
        trns,
        colors,
        pal,
        smask,
        pixels,
        len,
        alphaData,
        imgData,
        hasColors,
        pixel,
        i,
        n;
    if (this.__addimage__.isArrayBuffer(imageData)) { imageData = new Uint8Array(imageData); }

    if (this.__addimage__.isArrayBufferView(imageData)) {
      if (doesNotHavePngJS()) {
        throw new Error("PNG support requires png.js and zlib.js");
      }

      image = new PNG(imageData);
      imageData = image.imgData;
      bitsPerComponent = image.bits;
      colorSpace = image.colorSpace;
      colors = image.colors;
      /*
       * colorType 6 - Each pixel is an R,G,B triple, followed by an alpha sample.
       *
       * colorType 4 - Each pixel is a grayscale sample, followed by an alpha sample.
       *
       * Extract alpha to create two separate images, using the alpha as a sMask
       */

      if ([4, 6].indexOf(image.colorType) !== -1) {
        /*
         * processes 8 bit RGBA and grayscale + alpha images
         */
        if (image.bits === 8) {
          pixels = image.pixelBitlength == 32 ? new Uint32Array(image.decodePixels().buffer) : image.pixelBitlength == 16 ? new Uint16Array(image.decodePixels().buffer) : new Uint8Array(image.decodePixels().buffer);
          len = pixels.length;
          imgData = new Uint8Array(len * image.colors);
          alphaData = new Uint8Array(len);
          var pDiff = image.pixelBitlength - image.bits;
          i = 0;
          n = 0;
          var pbl;

          for (; i < len; i++) {
            pixel = pixels[i];
            pbl = 0;

            while (pbl < pDiff) {
              imgData[n++] = pixel >>> pbl & 0xff;
              pbl = pbl + image.bits;
            }

            alphaData[i] = pixel >>> pbl & 0xff;
          }
        }
        /*
         * processes 16 bit RGBA and grayscale + alpha images
         */


        if (image.bits === 16) {
          pixels = new Uint32Array(image.decodePixels().buffer);
          len = pixels.length;
          imgData = new Uint8Array(len * (32 / image.pixelBitlength) * image.colors);
          alphaData = new Uint8Array(len * (32 / image.pixelBitlength));
          hasColors = image.colors > 1;
          i = 0;
          n = 0;
          var a = 0;

          while (i < len) {
            pixel = pixels[i++];
            imgData[n++] = pixel >>> 0 & 0xFF;

            if (hasColors) {
              imgData[n++] = pixel >>> 16 & 0xFF;
              pixel = pixels[i++];
              imgData[n++] = pixel >>> 0 & 0xFF;
            }

            alphaData[a++] = pixel >>> 16 & 0xFF;
          }

          bitsPerComponent = 8;
        }

        if (canCompress(compression)) {
          imageData = compressBytes(imgData, image.width * image.colors, image.colors, compression);
          smask = compressBytes(alphaData, image.width, 1, compression);
        } else {
          imageData = imgData;
          smask = alphaData;
          filter = undefined;
        }
      }
      /*
       * Indexed png. Each pixel is a palette index.
       */


      if (image.colorType === 3) {
        colorSpace = this.color_spaces.INDEXED;
        pal = image.palette;

        if (image.transparency.indexed) {
          var trans = image.transparency.indexed;
          var total = 0;
          i = 0;
          len = trans.length;

          for (; i < len; ++i) {
            total += trans[i];
          }

          total = total / 255;
          /*
           * a single color is specified as 100% transparent (0),
           * so we set trns to use a /Mask with that index
           */

          if (total === len - 1 && trans.indexOf(0) !== -1) {
            trns = [trans.indexOf(0)];
            /*
             * there's more than one colour within the palette that specifies
             * a transparency value less than 255, so we unroll the pixels to create an image sMask
             */
          } else if (total !== len) {
            pixels = image.decodePixels();
            alphaData = new Uint8Array(pixels.length);
            i = 0;
            len = pixels.length;

            for (; i < len; i++) {
              alphaData[i] = trans[pixels[i]];
            }

            smask = compressBytes(alphaData, image.width, 1);
          }
        }
      }

      var predictor = getPredictorFromCompression(compression);

      if (filter === this.decode.FLATE_DECODE) {
        decodeParameters = '/Predictor ' + predictor + ' ';
      }

      decodeParameters += '/Colors ' + colors + ' /BitsPerComponent ' + bitsPerComponent + ' /Columns ' + image.width;

      if (this.__addimage__.isArrayBuffer(imageData) || this.__addimage__.isArrayBufferView(imageData)) {
        imageData = this.__addimage__.arrayBufferToBinaryString(imageData);
      }

      if (smask && this.__addimage__.isArrayBuffer(smask) || this.__addimage__.isArrayBufferView(smask)) {
        smask = this.__addimage__.arrayBufferToBinaryString(smask);
      }

      return {
        alias: alias,
        data: imageData,
        index: index,
        filter: filter,
        decodeParameters: decodeParameters,
        transparency: trns,
        palette: pal,
        sMask: smask,
        predictor: predictor,
        width: image.width,
        height: image.height,
        bitsPerComponent: bitsPerComponent,
        colorSpace: colorSpace
      };
    }
  };
})(jsPDF.API, typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || Function('return typeof this === "object" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

/* global jsPDF, GifReader, JPEGEncoder */

/**
 * @license
 * Copyright (c) 2017 Aras Abbasi 
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* jsPDF Gif Support PlugIn
*
* @name gif_support
* @module
*/
(function (jsPDFAPI) {

  jsPDFAPI.processGIF89A = function (imageData, index, alias, compression) {
    var reader = new GifReader(imageData);
    var width = reader.width,
        height = reader.height;
    var qu = 100;
    var pixels = [];
    reader.decodeAndBlitFrameRGBA(0, pixels);
    var rawImageData = {
      data: pixels,
      width: width,
      height: height
    };
    var encoder = new JPEGEncoder(qu);
    var data = encoder.encode(rawImageData, qu);
    return jsPDFAPI.processJPEG.call(this, data, index, alias, compression);
  };

  jsPDFAPI.processGIF87A = jsPDFAPI.processGIF89A;
})(jsPDF.API);

/* global jsPDF, BmpDecoder, JPEGEncoder */

/**
 * Copyright (c) 2018 Aras Abbasi 
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* jsPDF bmp Support PlugIn
* @name bmp_support
* @module
*/
(function (jsPDFAPI) {

  jsPDFAPI.processBMP = function (imageData, index, alias, compression) {
    var reader = new BmpDecoder(imageData, false);
    var width = reader.width,
        height = reader.height;
    var qu = 100;
    var pixels = reader.getData();
    var rawImageData = {
      data: pixels,
      width: width,
      height: height
    };
    var encoder = new JPEGEncoder(qu);
    var data = encoder.encode(rawImageData, qu);
    return jsPDFAPI.processJPEG.call(this, data, index, alias, compression);
  };
})(jsPDF.API);

/* global jsPDF,  JPEGEncoder, WebPDecoder */

/**
 * @license
 * Copyright (c) 2019 Aras Abbasi 
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* jsPDF webp Support PlugIn
*
* @name webp_support
* @module
*/
(function (jsPDFAPI) {

  jsPDFAPI.processWEBP = function (imageData, index, alias, compression) {
    var reader = new WebPDecoder(imageData, false);
    var width = reader.width,
        height = reader.height;
    var qu = 100;
    var pixels = reader.getData();
    var rawImageData = {
      data: pixels,
      width: width,
      height: height
    };
    var encoder = new JPEGEncoder(qu);
    var data = encoder.encode(rawImageData, qu);
    return jsPDFAPI.processJPEG.call(this, data, index, alias, compression);
  };
})(jsPDF.API);

/* global jsPDF */

/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
 * jsPDF setLanguage Plugin
 *
 * @name setLanguage
 * @module
 */
(function (jsPDFAPI) {
  /**
  * Add Language Tag to the generated PDF
  *
  * @name setLanguage
  * @function 
  * @param {string} langCode The Language code as ISO-639-1 (e.g. 'en') or as country language code (e.g. 'en-GB'). 
  * @returns {jsPDF}
  * @example
  * var doc = new jsPDF()
  * doc.text(10, 10, 'This is a test')
  * doc.setLanguage("en-US")
  * doc.save('english.pdf')
  */

  jsPDFAPI.setLanguage = function (langCode) {

    var langCodes = {
      "af": "Afrikaans",
      "sq": "Albanian",
      "ar": "Arabic (Standard)",
      "ar-DZ": "Arabic (Algeria)",
      "ar-BH": "Arabic (Bahrain)",
      "ar-EG": "Arabic (Egypt)",
      "ar-IQ": "Arabic (Iraq)",
      "ar-JO": "Arabic (Jordan)",
      "ar-KW": "Arabic (Kuwait)",
      "ar-LB": "Arabic (Lebanon)",
      "ar-LY": "Arabic (Libya)",
      "ar-MA": "Arabic (Morocco)",
      "ar-OM": "Arabic (Oman)",
      "ar-QA": "Arabic (Qatar)",
      "ar-SA": "Arabic (Saudi Arabia)",
      "ar-SY": "Arabic (Syria)",
      "ar-TN": "Arabic (Tunisia)",
      "ar-AE": "Arabic (U.A.E.)",
      "ar-YE": "Arabic (Yemen)",
      "an": "Aragonese",
      "hy": "Armenian",
      "as": "Assamese",
      "ast": "Asturian",
      "az": "Azerbaijani",
      "eu": "Basque",
      "be": "Belarusian",
      "bn": "Bengali",
      "bs": "Bosnian",
      "br": "Breton",
      "bg": "Bulgarian",
      "my": "Burmese",
      "ca": "Catalan",
      "ch": "Chamorro",
      "ce": "Chechen",
      "zh": "Chinese",
      "zh-HK": "Chinese (Hong Kong)",
      "zh-CN": "Chinese (PRC)",
      "zh-SG": "Chinese (Singapore)",
      "zh-TW": "Chinese (Taiwan)",
      "cv": "Chuvash",
      "co": "Corsican",
      "cr": "Cree",
      "hr": "Croatian",
      "cs": "Czech",
      "da": "Danish",
      "nl": "Dutch (Standard)",
      "nl-BE": "Dutch (Belgian)",
      "en": "English",
      "en-AU": "English (Australia)",
      "en-BZ": "English (Belize)",
      "en-CA": "English (Canada)",
      "en-IE": "English (Ireland)",
      "en-JM": "English (Jamaica)",
      "en-NZ": "English (New Zealand)",
      "en-PH": "English (Philippines)",
      "en-ZA": "English (South Africa)",
      "en-TT": "English (Trinidad & Tobago)",
      "en-GB": "English (United Kingdom)",
      "en-US": "English (United States)",
      "en-ZW": "English (Zimbabwe)",
      "eo": "Esperanto",
      "et": "Estonian",
      "fo": "Faeroese",
      "fj": "Fijian",
      "fi": "Finnish",
      "fr": "French (Standard)",
      "fr-BE": "French (Belgium)",
      "fr-CA": "French (Canada)",
      "fr-FR": "French (France)",
      "fr-LU": "French (Luxembourg)",
      "fr-MC": "French (Monaco)",
      "fr-CH": "French (Switzerland)",
      "fy": "Frisian",
      "fur": "Friulian",
      "gd": "Gaelic (Scots)",
      "gd-IE": "Gaelic (Irish)",
      "gl": "Galacian",
      "ka": "Georgian",
      "de": "German (Standard)",
      "de-AT": "German (Austria)",
      "de-DE": "German (Germany)",
      "de-LI": "German (Liechtenstein)",
      "de-LU": "German (Luxembourg)",
      "de-CH": "German (Switzerland)",
      "el": "Greek",
      "gu": "Gujurati",
      "ht": "Haitian",
      "he": "Hebrew",
      "hi": "Hindi",
      "hu": "Hungarian",
      "is": "Icelandic",
      "id": "Indonesian",
      "iu": "Inuktitut",
      "ga": "Irish",
      "it": "Italian (Standard)",
      "it-CH": "Italian (Switzerland)",
      "ja": "Japanese",
      "kn": "Kannada",
      "ks": "Kashmiri",
      "kk": "Kazakh",
      "km": "Khmer",
      "ky": "Kirghiz",
      "tlh": "Klingon",
      "ko": "Korean",
      "ko-KP": "Korean (North Korea)",
      "ko-KR": "Korean (South Korea)",
      "la": "Latin",
      "lv": "Latvian",
      "lt": "Lithuanian",
      "lb": "Luxembourgish",
      "mk": "FYRO Macedonian",
      "ms": "Malay",
      "ml": "Malayalam",
      "mt": "Maltese",
      "mi": "Maori",
      "mr": "Marathi",
      "mo": "Moldavian",
      "nv": "Navajo",
      "ng": "Ndonga",
      "ne": "Nepali",
      "no": "Norwegian",
      "nb": "Norwegian (Bokmal)",
      "nn": "Norwegian (Nynorsk)",
      "oc": "Occitan",
      "or": "Oriya",
      "om": "Oromo",
      "fa": "Persian",
      "fa-IR": "Persian/Iran",
      "pl": "Polish",
      "pt": "Portuguese",
      "pt-BR": "Portuguese (Brazil)",
      "pa": "Punjabi",
      "pa-IN": "Punjabi (India)",
      "pa-PK": "Punjabi (Pakistan)",
      "qu": "Quechua",
      "rm": "Rhaeto-Romanic",
      "ro": "Romanian",
      "ro-MO": "Romanian (Moldavia)",
      "ru": "Russian",
      "ru-MO": "Russian (Moldavia)",
      "sz": "Sami (Lappish)",
      "sg": "Sango",
      "sa": "Sanskrit",
      "sc": "Sardinian",
      "sd": "Sindhi",
      "si": "Singhalese",
      "sr": "Serbian",
      "sk": "Slovak",
      "sl": "Slovenian",
      "so": "Somani",
      "sb": "Sorbian",
      "es": "Spanish",
      "es-AR": "Spanish (Argentina)",
      "es-BO": "Spanish (Bolivia)",
      "es-CL": "Spanish (Chile)",
      "es-CO": "Spanish (Colombia)",
      "es-CR": "Spanish (Costa Rica)",
      "es-DO": "Spanish (Dominican Republic)",
      "es-EC": "Spanish (Ecuador)",
      "es-SV": "Spanish (El Salvador)",
      "es-GT": "Spanish (Guatemala)",
      "es-HN": "Spanish (Honduras)",
      "es-MX": "Spanish (Mexico)",
      "es-NI": "Spanish (Nicaragua)",
      "es-PA": "Spanish (Panama)",
      "es-PY": "Spanish (Paraguay)",
      "es-PE": "Spanish (Peru)",
      "es-PR": "Spanish (Puerto Rico)",
      "es-ES": "Spanish (Spain)",
      "es-UY": "Spanish (Uruguay)",
      "es-VE": "Spanish (Venezuela)",
      "sx": "Sutu",
      "sw": "Swahili",
      "sv": "Swedish",
      "sv-FI": "Swedish (Finland)",
      "sv-SV": "Swedish (Sweden)",
      "ta": "Tamil",
      "tt": "Tatar",
      "te": "Teluga",
      "th": "Thai",
      "tig": "Tigre",
      "ts": "Tsonga",
      "tn": "Tswana",
      "tr": "Turkish",
      "tk": "Turkmen",
      "uk": "Ukrainian",
      "hsb": "Upper Sorbian",
      "ur": "Urdu",
      "ve": "Venda",
      "vi": "Vietnamese",
      "vo": "Volapuk",
      "wa": "Walloon",
      "cy": "Welsh",
      "xh": "Xhosa",
      "ji": "Yiddish",
      "zu": "Zulu"
    };

    if (this.internal.languageSettings === undefined) {
      this.internal.languageSettings = {};
      this.internal.languageSettings.isSubscribed = false;
    }

    if (langCodes[langCode] !== undefined) {
      this.internal.languageSettings.languageCode = langCode;

      if (this.internal.languageSettings.isSubscribed === false) {
        this.internal.events.subscribe("putCatalog", function () {
          this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
        });
        this.internal.languageSettings.isSubscribed = true;
      }
    }

    return this;
  };
})(jsPDF.API);

/* global jsPDF */

/** @license
 * MIT license.
 * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
 *               2014 Diego Casorran, https://github.com/diegocr
 *
 * 
 * ====================================================================
 */

/**
* jsPDF split_text_to_size plugin 
* 
* @name split_text_to_size
* @module
*/
(function (API) {
  /**
   * Returns an array of length matching length of the 'word' string, with each
   * cell occupied by the width of the char in that position.
   * 
   * @name getCharWidthsArray
   * @function
   * @param {string} text
   * @param {Object} options
   * @returns {Array}
   */

  var getCharWidthsArray = API.getCharWidthsArray = function (text, options) {
    options = options || {};
    var activeFont = options.font || this.internal.getFont();
    var fontSize = options.fontSize || this.internal.getFontSize();
    var charSpace = options.charSpace || this.internal.getCharSpace();
    var widths = options.widths ? options.widths : activeFont.metadata.Unicode.widths;
    var widthsFractionOf = widths.fof ? widths.fof : 1;
    var kerning = options.kerning ? options.kerning : activeFont.metadata.Unicode.kerning;
    var kerningFractionOf = kerning.fof ? kerning.fof : 1;
    var doKerning = options.doKerning === false ? false : true;
    var kerningValue = 0;
    var i;
    var length = text.length;
    var char_code;
    var prior_char_code = 0; //for kerning

    var default_char_width = widths[0] || widthsFractionOf;
    var output = [];

    for (i = 0; i < length; i++) {
      char_code = text.charCodeAt(i);

      if (typeof activeFont.metadata.widthOfString === "function") {
        output.push((activeFont.metadata.widthOfGlyph(activeFont.metadata.characterToGlyph(char_code)) + charSpace * (1000 / fontSize) || 0) / 1000);
      } else {
        if (doKerning && _typeof(kerning[char_code]) === 'object' && !isNaN(parseInt(kerning[char_code][prior_char_code], 10))) {
          kerningValue = kerning[char_code][prior_char_code] / kerningFractionOf;
        }

        output.push((widths[char_code] || default_char_width) / widthsFractionOf + kerningValue);
      }

      prior_char_code = char_code;
    }

    return output;
  };
  /**
  * Returns a widths of string in a given font, if the font size is set as 1 point.
  *
  * In other words, this is "proportional" value. For 1 unit of font size, the length
  * of the string will be that much.
  * 
  * Multiply by font size to get actual width in *points*
  * Then divide by 72 to get inches or divide by (72/25.6) to get 'mm' etc.
  * 
  * @name getStringUnitWidth
  * @public
  * @function
  * @param {string} text
  * @param {string} options
  * @returns {number} result
  */


  var getStringUnitWidth = API.getStringUnitWidth = function (text, options) {
    options = options || {};
    var fontSize = options.fontSize || this.internal.getFontSize();
    var font = options.font || this.internal.getFont();
    var charSpace = options.charSpace || this.internal.getCharSpace();
    var result = 0;

    if (API.processArabic) {
      text = API.processArabic(text);
    }

    if (typeof font.metadata.widthOfString === "function") {
      result = font.metadata.widthOfString(text, fontSize, charSpace) / fontSize;
    } else {
      result = getCharWidthsArray.apply(this, arguments).reduce(function (pv, cv) {
        return pv + cv;
      }, 0);
    }

    return result;
  };
  /**
  returns array of lines
  */


  var splitLongWord = function splitLongWord(word, widths_array, firstLineMaxLen, maxLen) {
    var answer = []; // 1st, chop off the piece that can fit on the hanging line.

    var i = 0,
        l = word.length,
        workingLen = 0;

    while (i !== l && workingLen + widths_array[i] < firstLineMaxLen) {
      workingLen += widths_array[i];
      i++;
    } // this is first line.


    answer.push(word.slice(0, i)); // 2nd. Split the rest into maxLen pieces.

    var startOfLine = i;
    workingLen = 0;

    while (i !== l) {
      if (workingLen + widths_array[i] > maxLen) {
        answer.push(word.slice(startOfLine, i));
        workingLen = 0;
        startOfLine = i;
      }

      workingLen += widths_array[i];
      i++;
    }

    if (startOfLine !== i) {
      answer.push(word.slice(startOfLine, i));
    }

    return answer;
  }; // Note, all sizing inputs for this function must be in "font measurement units"
  // By default, for PDF, it's "point".


  var splitParagraphIntoLines = function splitParagraphIntoLines(text, maxlen, options) {
    // at this time works only on Western scripts, ones with space char
    // separating the words. Feel free to expand.
    if (!options) {
      options = {};
    }

    var line = [],
        lines = [line],
        line_length = options.textIndent || 0,
        separator_length = 0,
        current_word_length = 0,
        word,
        widths_array,
        words = text.split(' '),
        spaceCharWidth = getCharWidthsArray.apply(this, [' ', options])[0],
        i,
        l,
        tmp,
        lineIndent;

    if (options.lineIndent === -1) {
      lineIndent = words[0].length + 2;
    } else {
      lineIndent = options.lineIndent || 0;
    }

    if (lineIndent) {
      var pad = Array(lineIndent).join(" "),
          wrds = [];
      words.map(function (wrd) {
        wrd = wrd.split(/\s*\n/);

        if (wrd.length > 1) {
          wrds = wrds.concat(wrd.map(function (wrd, idx) {
            return (idx && wrd.length ? "\n" : "") + wrd;
          }));
        } else {
          wrds.push(wrd[0]);
        }
      });
      words = wrds;
      lineIndent = getStringUnitWidth.apply(this, [pad, options]);
    }

    for (i = 0, l = words.length; i < l; i++) {
      var force = 0;
      word = words[i];

      if (lineIndent && word[0] == "\n") {
        word = word.substr(1);
        force = 1;
      }

      widths_array = getCharWidthsArray.apply(this, [word, options]);
      current_word_length = widths_array.reduce(function (pv, cv) {
        return pv + cv;
      }, 0);

      if (line_length + separator_length + current_word_length > maxlen || force) {
        if (current_word_length > maxlen) {
          // this happens when you have space-less long URLs for example.
          // we just chop these to size. We do NOT insert hiphens
          tmp = splitLongWord.apply(this, [word, widths_array, maxlen - (line_length + separator_length), maxlen]); // first line we add to existing line object

          line.push(tmp.shift()); // it's ok to have extra space indicator there
          // last line we make into new line object

          line = [tmp.pop()]; // lines in the middle we apped to lines object as whole lines

          while (tmp.length) {
            lines.push([tmp.shift()]); // single fragment occupies whole line
          }

          current_word_length = widths_array.slice(word.length - (line[0] ? line[0].length : 0)).reduce(function (pv, cv) {
            return pv + cv;
          }, 0);
        } else {
          // just put it on a new line
          line = [word];
        } // now we attach new line to lines


        lines.push(line);
        line_length = current_word_length + lineIndent;
        separator_length = spaceCharWidth;
      } else {
        line.push(word);
        line_length += separator_length + current_word_length;
        separator_length = spaceCharWidth;
      }
    }

    var postProcess;

    if (lineIndent) {
      postProcess = function postProcess(ln, idx) {
        return (idx ? pad : '') + ln.join(" ");
      };
    } else {
      postProcess = function postProcess(ln) {
        return ln.join(" ");
      };
    }

    return lines.map(postProcess);
  };
  /**
  * Splits a given string into an array of strings. Uses 'size' value
  * (in measurement units declared as default for the jsPDF instance)
  * and the font's "widths" and "Kerning" tables, where available, to
  * determine display length of a given string for a given font.
  * 
  * We use character's 100% of unit size (height) as width when Width
  * table or other default width is not available.
  * 
  * @name splitTextToSize
  * @public
  * @function
  * @param {string} text Unencoded, regular JavaScript (Unicode, UTF-16 / UCS-2) string.
  * @param {number} size Nominal number, measured in units default to this instance of jsPDF.
  * @param {Object} options Optional flags needed for chopper to do the right thing.
  * @returns {Array} array Array with strings chopped to size.
  */


  API.splitTextToSize = function (text, maxlen, options) {

    options = options || {};

    var fsize = options.fontSize || this.internal.getFontSize(),
        newOptions = function (options) {
      var widths = {
        0: 1
      },
          kerning = {};

      if (!options.widths || !options.kerning) {
        var f = this.internal.getFont(options.fontName, options.fontStyle),
            encoding = 'Unicode'; // NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE
        // Actual JavaScript-native String's 16bit char codes used.
        // no multi-byte logic here

        if (f.metadata[encoding]) {
          return {
            widths: f.metadata[encoding].widths || widths,
            kerning: f.metadata[encoding].kerning || kerning
          };
        } else {
          return {
            font: f.metadata,
            fontSize: this.internal.getFontSize(),
            charSpace: this.internal.getCharSpace()
          };
        }
      } else {
        return {
          widths: options.widths,
          kerning: options.kerning
        };
      }
    }.call(this, options); // first we split on end-of-line chars


    var paragraphs;

    if (Array.isArray(text)) {
      paragraphs = text;
    } else {
      paragraphs = text.split(/\r?\n/);
    } // now we convert size (max length of line) into "font size units"
    // at present time, the "font size unit" is always 'point'
    // 'proportional' means, "in proportion to font size"


    var fontUnit_maxLen = 1.0 * this.internal.scaleFactor * maxlen / fsize; // at this time, fsize is always in "points" regardless of the default measurement unit of the doc.
    // this may change in the future?
    // until then, proportional_maxlen is likely to be in 'points'
    // If first line is to be indented (shorter or longer) than maxLen
    // we indicate that by using CSS-style "text-indent" option.
    // here it's in font units too (which is likely 'points')
    // it can be negative (which makes the first line longer than maxLen)

    newOptions.textIndent = options.textIndent ? options.textIndent * 1.0 * this.internal.scaleFactor / fsize : 0;
    newOptions.lineIndent = options.lineIndent;
    var i,
        l,
        output = [];

    for (i = 0, l = paragraphs.length; i < l; i++) {
      output = output.concat(splitParagraphIntoLines.apply(this, [paragraphs[i], fontUnit_maxLen, newOptions]));
    }

    return output;
  };
})(jsPDF.API);

/* global jsPDF */

/** @license
 jsPDF standard_fonts_metrics plugin
 * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
 * MIT license.
 * 
 * ====================================================================
 */

/**
* This file adds the standard font metrics to jsPDF. 
* 
* Font metrics data is reprocessed derivative of contents of
* "Font Metrics for PDF Core 14 Fonts" package, which exhibits the following copyright and license:
* 
* Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated. All Rights Reserved.
* 
* This file and the 14 PostScript(R) AFM files it accompanies may be used,
* copied, and distributed for any purpose and without charge, with or without
* modification, provided that all copyright notices are retained; that the AFM
* files are not distributed without this file; that all modifications to this
* file or any of the AFM files are prominently noted in the modified file(s);
* and that this paragraph is not modified. Adobe Systems has no responsibility
* or obligation to support the use of the AFM files.
*
* @name standard_fonts_metrics
* @module
*/
(function (API) {

  API.__fontmetrics__ = API.__fontmetrics__ || {};
  var decoded = '0123456789abcdef',
      encoded = 'klmnopqrstuvwxyz',
      mappingUncompress = {},
      mappingCompress = {};

  for (var i = 0; i < encoded.length; i++) {
    mappingUncompress[encoded[i]] = decoded[i];
    mappingCompress[decoded[i]] = encoded[i];
  }

  var hex = function hex(value) {
    return '0x' + parseInt(value, 10).toString(16);
  };

  var compress = API.__fontmetrics__.compress = function (data) {
    var vals = ['{'];
    var value, keystring, valuestring, numberprefix;

    for (var key in data) {
      value = data[key];

      if (!isNaN(parseInt(key, 10))) {
        key = parseInt(key, 10);
        keystring = hex(key).slice(2);
        keystring = keystring.slice(0, -1) + mappingCompress[keystring.slice(-1)];
      } else {
        keystring = "'" + key + "'";
      }

      if (typeof value == 'number') {
        if (value < 0) {
          valuestring = hex(value).slice(3);
          numberprefix = '-';
        } else {
          valuestring = hex(value).slice(2);
          numberprefix = '';
        }

        valuestring = numberprefix + valuestring.slice(0, -1) + mappingCompress[valuestring.slice(-1)];
      } else {
        if (_typeof(value) === 'object') {
          valuestring = compress(value);
        } else {
          throw new Error("Don't know what to do with value type " + _typeof(value) + ".");
        }
      }

      vals.push(keystring + valuestring);
    }

    vals.push('}');
    return vals.join('');
  };
  /**
  * Uncompresses data compressed into custom, base16-like format. 
  *
  * @public
  * @function
  * @param
  * @returns {Type}
  */


  var uncompress = API.__fontmetrics__.uncompress = function (data) {
    if (typeof data !== 'string') {
      throw new Error('Invalid argument passed to uncompress.');
    }

    var output = {},
        sign = 1,
        stringparts // undef. will be [] in string mode
    ,
        activeobject = output,
        parentchain = [],
        parent_key_pair,
        keyparts = '',
        valueparts = '',
        key // undef. will be Truthy when Key is resolved.
    ,
        datalen = data.length - 1 // stripping ending }
    ,
        ch;

    for (var i = 1; i < datalen; i += 1) {
      // - { } ' are special.
      ch = data[i];

      if (ch == "'") {
        if (stringparts) {
          // end of string mode
          key = stringparts.join('');
          stringparts = undefined;
        } else {
          // start of string mode
          stringparts = [];
        }
      } else if (stringparts) {
        stringparts.push(ch);
      } else if (ch == '{') {
        // start of object
        parentchain.push([activeobject, key]);
        activeobject = {};
        key = undefined;
      } else if (ch == '}') {
        // end of object
        parent_key_pair = parentchain.pop();
        parent_key_pair[0][parent_key_pair[1]] = activeobject;
        key = undefined;
        activeobject = parent_key_pair[0];
      } else if (ch == '-') {
        sign = -1;
      } else {
        // must be number
        if (key === undefined) {
          if (mappingUncompress.hasOwnProperty(ch)) {
            keyparts += mappingUncompress[ch];
            key = parseInt(keyparts, 16) * sign;
            sign = +1;
            keyparts = '';
          } else {
            keyparts += ch;
          }
        } else {
          if (mappingUncompress.hasOwnProperty(ch)) {
            valueparts += mappingUncompress[ch];
            activeobject[key] = parseInt(valueparts, 16) * sign;
            sign = +1;
            key = undefined;
            valueparts = '';
          } else {
            valueparts += ch;
          }
        }
      }
    }

    return output;
  }; // encoding = 'Unicode' 
  // NOT UTF8, NOT UTF16BE/LE, NOT UCS2BE/LE. NO clever BOM behavior
  // Actual 16bit char codes used.
  // no multi-byte logic here
  // Unicode characters to WinAnsiEncoding:
  // {402: 131, 8211: 150, 8212: 151, 8216: 145, 8217: 146, 8218: 130, 8220: 147, 8221: 148, 8222: 132, 8224: 134, 8225: 135, 8226: 149, 8230: 133, 8364: 128, 8240:137, 8249: 139, 8250: 155, 710: 136, 8482: 153, 338: 140, 339: 156, 732: 152, 352: 138, 353: 154, 376: 159, 381: 142, 382: 158}
  // as you can see, all Unicode chars are outside of 0-255 range. No char code conflicts.
  // this means that you can give Win cp1252 encoded strings to jsPDF for rendering directly
  // as well as give strings with some (supported by these fonts) Unicode characters and 
  // these will be mapped to win cp1252 
  // for example, you can send char code (cp1252) 0x80 or (unicode) 0x20AC, getting "Euro" glyph displayed in both cases.


  var encodingBlock = {
    'codePages': ['WinAnsiEncoding'],
    'WinAnsiEncoding': uncompress("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
  };
  var encodings = {
    'Unicode': {
      'Courier': encodingBlock,
      'Courier-Bold': encodingBlock,
      'Courier-BoldOblique': encodingBlock,
      'Courier-Oblique': encodingBlock,
      'Helvetica': encodingBlock,
      'Helvetica-Bold': encodingBlock,
      'Helvetica-BoldOblique': encodingBlock,
      'Helvetica-Oblique': encodingBlock,
      'Times-Roman': encodingBlock,
      'Times-Bold': encodingBlock,
      'Times-BoldItalic': encodingBlock,
      'Times-Italic': encodingBlock //	, 'Symbol'
      //	, 'ZapfDingbats'

    }
  };
  var fontMetrics = {
    'Unicode': {
      // all sizing numbers are n/fontMetricsFractionOf = one font size unit
      // this means that if fontMetricsFractionOf = 1000, and letter A's width is 476, it's
      // width is 476/1000 or 47.6% of its height (regardless of font size)
      // At this time this value applies to "widths" and "kerning" numbers.
      // char code 0 represents "default" (average) width - use it for chars missing in this table.
      // key 'fof' represents the "fontMetricsFractionOf" value
      'Courier-Oblique': uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      'Times-BoldItalic': uncompress("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
      'Helvetica-Bold': uncompress("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
      'Courier': uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      'Courier-BoldOblique': uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      'Times-Bold': uncompress("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
      'Symbol': uncompress("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
      'Helvetica': uncompress("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
      'Helvetica-BoldOblique': uncompress("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
      'ZapfDingbats': uncompress("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
      'Courier-Bold': uncompress("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
      'Times-Italic': uncompress("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
      'Times-Roman': uncompress("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
      'Helvetica-Oblique': uncompress("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
    }
  };
  /*
  This event handler is fired when a new jsPDF object is initialized
  This event handler appends metrics data to standard fonts within
  that jsPDF instance. The metrics are mapped over Unicode character
  codes, NOT CIDs or other codes matching the StandardEncoding table of the
  standard PDF fonts.
  Future:
  Also included is the encoding maping table, converting Unicode (UCS-2, UTF-16)
  char codes to StandardEncoding character codes. The encoding table is to be used
  somewhere around "pdfEscape" call.
  */

  API.events.push(['addFont', function (data) {
    var font = data.font;
    var metrics = fontMetrics['Unicode'][font.postScriptName];

    if (metrics) {
      font.metadata['Unicode'] = {};
      font.metadata['Unicode'].widths = metrics.widths;
      font.metadata['Unicode'].kerning = metrics.kerning;
    }

    var encodingBlock = encodings['Unicode'][font.postScriptName];

    if (encodingBlock) {
      font.metadata['Unicode'].encoding = encodingBlock;
      font.encoding = encodingBlock.codePages[0];
    }
  }]); // end of adding event handler
})(jsPDF.API);

/* global jsPDF, canvg */

/** @license
 * Copyright (c) 2012 Willow Systems Corporation, willow-systems.com
 * 
 * 
 * ====================================================================
 */

/**
* jsPDF SVG plugin
*
* @name svg
* @module
*/
(function (jsPDFAPI) {
  /**
  * Parses SVG XML and converts only some of the SVG elements into
  * PDF elements.
  *
  * Supports:
  * paths
  * 
  * @name addSvg
  * @public
  * @function 
  * @param {string} SVG-Data as Text
  * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page
  * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page
  * @param {number} width of SVG (in units declared at inception of PDF document)
  * @param {number} height of SVG (in units declared at inception of PDF document)
  * @returns {Object} jsPDF-instance
  */

  jsPDFAPI.addSvg = function (svgtext, x, y, w, h) {
    // 'this' is _jsPDF object returned when jsPDF is inited (new jsPDF())
    if (x === undefined || y === undefined) {
      throw new Error("addSVG needs values for 'x' and 'y'");
    }

    function InjectCSS(cssbody, document) {
      var styletag = document.createElement('style');
      styletag.type = 'text/css';

      if (styletag.styleSheet) {
        // ie
        styletag.styleSheet.cssText = cssbody;
      } else {
        // others
        styletag.appendChild(document.createTextNode(cssbody));
      }

      document.getElementsByTagName("head")[0].appendChild(styletag);
    }

    function createWorkerNode(document) {
      var frameID = 'childframe' // Date.now().toString() + '_' + (Math.random() * 100).toString()
      ,
          frame = document.createElement('iframe');
      InjectCSS('.jsPDF_sillysvg_iframe {display:none;position:absolute;}', document);
      frame.name = frameID;
      frame.setAttribute("width", 0);
      frame.setAttribute("height", 0);
      frame.setAttribute("frameborder", "0");
      frame.setAttribute("scrolling", "no");
      frame.setAttribute("seamless", "seamless");
      frame.setAttribute("class", "jsPDF_sillysvg_iframe");
      document.body.appendChild(frame);
      return frame;
    }

    function attachSVGToWorkerNode(svgtext, frame) {
      var framedoc = (frame.contentWindow || frame.contentDocument).document;
      framedoc.write(svgtext);
      framedoc.close();
      return framedoc.getElementsByTagName('svg')[0];
    }

    function convertPathToPDFLinesArgs(path) {
      // - starting coordinate pair
      // - array of arrays of vector shifts (2-len for line, 6 len for bezier)
      // - scale array [horizontal, vertical] ratios
      // - style (stroke, fill, both)

      var x = parseFloat(path[1]),
          y = parseFloat(path[2]),
          vectors = [],
          position = 3,
          len = path.length;

      while (position < len) {
        if (path[position] === 'c') {
          vectors.push([parseFloat(path[position + 1]), parseFloat(path[position + 2]), parseFloat(path[position + 3]), parseFloat(path[position + 4]), parseFloat(path[position + 5]), parseFloat(path[position + 6])]);
          position += 7;
        } else if (path[position] === 'l') {
          vectors.push([parseFloat(path[position + 1]), parseFloat(path[position + 2])]);
          position += 3;
        } else {
          position += 1;
        }
      }

      return [x, y, vectors];
    }

    var workernode = createWorkerNode(document),
        svgnode = attachSVGToWorkerNode(svgtext, workernode),
        scale = [1, 1],
        svgw = parseFloat(svgnode.getAttribute('width')),
        svgh = parseFloat(svgnode.getAttribute('height'));

    if (svgw && svgh) {
      // setting both w and h makes image stretch to size.
      // this may distort the image, but fits your demanded size
      if (w && h) {
        scale = [w / svgw, h / svgh];
      } // if only one is set, that value is set as max and SVG
      // is scaled proportionately.
      else if (w) {
          scale = [w / svgw, w / svgw];
        } else if (h) {
          scale = [h / svgh, h / svgh];
        }
    }

    var i,
        l,
        tmp,
        linesargs,
        items = svgnode.childNodes;

    for (i = 0, l = items.length; i < l; i++) {
      tmp = items[i];

      if (tmp.tagName && tmp.tagName.toUpperCase() === 'PATH') {
        linesargs = convertPathToPDFLinesArgs(tmp.getAttribute("d").split(tmp.getAttribute("d").indexOf(',') === -1 ? ' ' : ',')); // path start x coordinate

        linesargs[0] = linesargs[0] * scale[0] + x; // where x is upper left X of image
        // path start y coordinate

        linesargs[1] = linesargs[1] * scale[1] + y; // where y is upper left Y of image
        // the rest of lines are vectors. these will adjust with scale value auto.

        this.lines.call(this, linesargs[2] // lines
        , linesargs[0] // starting x
        , linesargs[1] // starting y
        , scale);
      }
    } // clean up
    // workernode.parentNode.removeChild(workernode)


    return this;
  }; //fallback


  jsPDFAPI.addSVG = jsPDFAPI.addSvg;
  /**
  * Parses SVG XML and saves it as image into the PDF.
  *
  * Depends on canvas-element and canvg
  *
  * @name addSvgAsImage
  * @public
  * @function
  * @param {string} SVG-Data as Text
  * @param {number} x Coordinate (in units declared at inception of PDF document) against left edge of the page
  * @param {number} y Coordinate (in units declared at inception of PDF document) against upper edge of the page
  * @param {number} width of SVG-Image (in units declared at inception of PDF document)
  * @param {number} height of SVG-Image (in units declared at inception of PDF document)
  * @param {string} alias of SVG-Image (if used multiple times)
  * @param {string} compression of the generated JPEG, can have the values 'NONE', 'FAST', 'MEDIUM' and 'SLOW'
  * @param {number} rotation of the image in degrees (0-359)
  * 
  * @returns jsPDF jsPDF-instance
  */

  jsPDFAPI.addSvgAsImage = function (svg, x, y, w, h, alias, compression, rotation) {
    if (isNaN(x) || isNaN(y)) {
      console.error('jsPDF.addSvgAsImage: Invalid coordinates', arguments);
      throw new Error('Invalid coordinates passed to jsPDF.addSvgAsImage');
    }

    if (isNaN(w) || isNaN(h)) {
      console.error('jsPDF.addSvgAsImage: Invalid measurements', arguments);
      throw new Error('Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage');
    }

    var canvas = document.createElement('canvas');
    canvas.width = w;
    canvas.height = h;
    var ctx = canvas.getContext('2d');
    ctx.fillStyle = '#fff'; /// set white fill style

    ctx.fillRect(0, 0, canvas.width, canvas.height); //load a svg snippet in the canvas with id = 'drawingArea'

    canvg(canvas, svg, {
      ignoreMouse: true,
      ignoreAnimation: true,
      ignoreDimensions: true,
      ignoreClear: true
    });
    this.addImage(canvas.toDataURL("image/jpeg", 1.0), x, y, w, h, compression, rotation);
    return this;
  };
})(jsPDF.API);

/* global jsPDF */

/** 
 * @license
 * ==================================================================== 
 * Copyright (c) 2013 Eduardo Menezes de Morais, eduardo.morais@usp.br
 * 
 * 
 * ====================================================================
 */

/**
 * jsPDF total_pages plugin
 * @name total_pages
 * @module
 */
(function (jsPDFAPI) {
  /**
  * @name putTotalPages
  * @function
  * @param {string} pageExpression Regular Expression
  * @returns {jsPDF} jsPDF-instance
  */

  jsPDFAPI.putTotalPages = function (pageExpression) {

    var replaceExpression;
    var totalNumberOfPages = 0;

    if (parseInt(this.internal.getFont().id.substr(1), 10) < 15) {
      replaceExpression = new RegExp(pageExpression, 'g');
      totalNumberOfPages = this.internal.getNumberOfPages();
    } else {
      replaceExpression = new RegExp(this.pdfEscape16(pageExpression, this.internal.getFont()), 'g');
      totalNumberOfPages = this.pdfEscape16(this.internal.getNumberOfPages() + '', this.internal.getFont());
    }

    for (var n = 1; n <= this.internal.getNumberOfPages(); n++) {
      for (var i = 0; i < this.internal.pages[n].length; i++) {
        this.internal.pages[n][i] = this.internal.pages[n][i].replace(replaceExpression, totalNumberOfPages);
      }
    }

    return this;
  };
})(jsPDF.API);

/* global jsPDF */

/**
 * jsPDF viewerPreferences Plugin
 * @author Aras Abbasi (github.com/arasabbasi)
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */

/**
* Adds the ability to set ViewerPreferences and by thus
* controlling the way the document is to be presented on the
* screen or in print.
* @name viewerpreferences
* @module
*/
(function (jsPDFAPI) {
  /**
   * Set the ViewerPreferences of the generated PDF
   *
   * @name viewerPreferences
  * @function
  * @public
   * @param {Object} options Array with the ViewerPreferences<br />
   * Example: doc.viewerPreferences({"FitWindow":true});<br />
   * <br />
   * You can set following preferences:<br />
   * <br/>
   * <b>HideToolbar</b> <i>(boolean)</i><br />
   * Default value: false<br />
   * <br />
   * <b>HideMenubar</b> <i>(boolean)</i><br />
   * Default value: false.<br />
   * <br />
   * <b>HideWindowUI</b> <i>(boolean)</i><br />
   * Default value: false.<br />
   * <br />
   * <b>FitWindow</b> <i>(boolean)</i><br />
   * Default value: false.<br />
   * <br />
   * <b>CenterWindow</b> <i>(boolean)</i><br />
   * Default value: false<br />
   * <br />
   * <b>DisplayDocTitle</b> <i>(boolean)</i><br />
   * Default value: false.<br />
   * <br />
   * <b>NonFullScreenPageMode</b> <i>(string)</i><br />
   * Possible values: UseNone, UseOutlines, UseThumbs, UseOC<br />
   * Default value: UseNone<br/>
   * <br />
   * <b>Direction</b> <i>(string)</i><br />
   * Possible values: L2R, R2L<br />
   * Default value: L2R.<br />
   * <br />
   * <b>ViewArea</b> <i>(string)</i><br />
   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />
   * Default value: CropBox.<br />
   * <br />
   * <b>ViewClip</b> <i>(string)</i><br />
   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />
   * Default value: CropBox<br />
   * <br />
   * <b>PrintArea</b> <i>(string)</i><br />
   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />
   * Default value: CropBox<br />
   * <br />
   * <b>PrintClip</b> <i>(string)</i><br />
   * Possible values: MediaBox, CropBox, TrimBox, BleedBox, ArtBox<br />
   * Default value: CropBox.<br />
   * <br />
   * <b>PrintScaling</b> <i>(string)</i><br />
   * Possible values: AppDefault, None<br />
   * Default value: AppDefault.<br />
   * <br />
   * <b>Duplex</b> <i>(string)</i><br />
   * Possible values: Simplex, DuplexFlipLongEdge, DuplexFlipShortEdge
   * Default value: none<br />
   * <br />
   * <b>PickTrayByPDFSize</b> <i>(boolean)</i><br />
   * Default value: false<br />
   * <br />
   * <b>PrintPageRange</b> <i>(Array)</i><br />
   * Example: [[1,5], [7,9]]<br />
   * Default value: as defined by PDF viewer application<br />
   * <br />
   * <b>NumCopies</b> <i>(Number)</i><br />
   * Possible values: 1, 2, 3, 4, 5<br />
   * Default value: 1<br />
   * <br />
   * For more information see the PDF Reference, sixth edition on Page 577
   * @param {boolean} doReset True to reset the settings
   * @function
   * @returns jsPDF jsPDF-instance
   * @example
   * var doc = new jsPDF()
   * doc.text('This is a test', 10, 10)
   * doc.viewerPreferences({'FitWindow': true}, true)
   * doc.save("viewerPreferences.pdf")
   *
   * // Example printing 10 copies, using cropbox, and hiding UI.
   * doc.viewerPreferences({
   *   'HideWindowUI': true,
   *   'PrintArea': 'CropBox',
   *   'NumCopies': 10
   * })
   */

  jsPDFAPI.viewerPreferences = function (options, doReset) {
    options = options || {};
    doReset = doReset || false;
    var configuration;
    var configurationTemplate = {
      "HideToolbar": {
        defaultValue: false,
        value: false,
        type: "boolean",
        explicitSet: false,
        valueSet: [true, false],
        pdfVersion: 1.3
      },
      "HideMenubar": {
        defaultValue: false,
        value: false,
        type: "boolean",
        explicitSet: false,
        valueSet: [true, false],
        pdfVersion: 1.3
      },
      "HideWindowUI": {
        defaultValue: false,
        value: false,
        type: "boolean",
        explicitSet: false,
        valueSet: [true, false],
        pdfVersion: 1.3
      },
      "FitWindow": {
        defaultValue: false,
        value: false,
        type: "boolean",
        explicitSet: false,
        valueSet: [true, false],
        pdfVersion: 1.3
      },
      "CenterWindow": {
        defaultValue: false,
        value: false,
        type: "boolean",
        explicitSet: false,
        valueSet: [true, false],
        pdfVersion: 1.3
      },
      "DisplayDocTitle": {
        defaultValue: false,
        value: false,
        type: "boolean",
        explicitSet: false,
        valueSet: [true, false],
        pdfVersion: 1.4
      },
      "NonFullScreenPageMode": {
        defaultValue: "UseNone",
        value: "UseNone",
        type: "name",
        explicitSet: false,
        valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"],
        pdfVersion: 1.3
      },
      "Direction": {
        defaultValue: "L2R",
        value: "L2R",
        type: "name",
        explicitSet: false,
        valueSet: ["L2R", "R2L"],
        pdfVersion: 1.3
      },
      "ViewArea": {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: false,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      "ViewClip": {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: false,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      "PrintArea": {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: false,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      "PrintClip": {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: false,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      "PrintScaling": {
        defaultValue: "AppDefault",
        value: "AppDefault",
        type: "name",
        explicitSet: false,
        valueSet: ["AppDefault", "None"],
        pdfVersion: 1.6
      },
      "Duplex": {
        defaultValue: "",
        value: "none",
        type: "name",
        explicitSet: false,
        valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"],
        pdfVersion: 1.7
      },
      "PickTrayByPDFSize": {
        defaultValue: false,
        value: false,
        type: "boolean",
        explicitSet: false,
        valueSet: [true, false],
        pdfVersion: 1.7
      },
      "PrintPageRange": {
        defaultValue: "",
        value: "",
        type: "array",
        explicitSet: false,
        valueSet: null,
        pdfVersion: 1.7
      },
      "NumCopies": {
        defaultValue: 1,
        value: 1,
        type: "integer",
        explicitSet: false,
        valueSet: null,
        pdfVersion: 1.7
      }
    };
    var configurationKeys = Object.keys(configurationTemplate);
    var rangeArray = [];
    var i = 0;
    var j = 0;
    var k = 0;
    var isValid;
    var method;
    var value;

    function arrayContainsElement(array, element) {
      var iterator;
      var result = false;

      for (iterator = 0; iterator < array.length; iterator += 1) {
        if (array[iterator] === element) {
          result = true;
        }
      }

      return result;
    }

    if (this.internal.viewerpreferences === undefined) {
      this.internal.viewerpreferences = {};
      this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(configurationTemplate));
      this.internal.viewerpreferences.isSubscribed = false;
    }

    configuration = this.internal.viewerpreferences.configuration;

    if (options === "reset" || doReset === true) {
      var len = configurationKeys.length;

      for (k = 0; k < len; k += 1) {
        configuration[configurationKeys[k]].value = configuration[configurationKeys[k]].defaultValue;
        configuration[configurationKeys[k]].explicitSet = false;
      }
    }

    if (_typeof(options) === "object") {
      for (method in options) {
        value = options[method];

        if (arrayContainsElement(configurationKeys, method) && value !== undefined) {
          if (configuration[method].type === "boolean" && typeof value === "boolean") {
            configuration[method].value = value;
          } else if (configuration[method].type === "name" && arrayContainsElement(configuration[method].valueSet, value)) {
            configuration[method].value = value;
          } else if (configuration[method].type === "integer" && Number.isInteger(value)) {
            configuration[method].value = value;
          } else if (configuration[method].type === "array") {
            for (i = 0; i < value.length; i += 1) {
              isValid = true;

              if (value[i].length === 1 && typeof value[i][0] === "number") {
                rangeArray.push(String(value[i] - 1));
              } else if (value[i].length > 1) {
                for (j = 0; j < value[i].length; j += 1) {
                  if (typeof value[i][j] !== "number") {
                    isValid = false;
                  }
                }

                if (isValid === true) {
                  rangeArray.push([value[i][0] - 1, value[i][1] - 1].join(" "));
                }
              }
            }

            configuration[method].value = "[" + rangeArray.join(" ") + "]";
          } else {
            configuration[method].value = configuration[method].defaultValue;
          }

          configuration[method].explicitSet = true;
        }
      }
    }

    if (this.internal.viewerpreferences.isSubscribed === false) {
      this.internal.events.subscribe("putCatalog", function () {
        var pdfDict = [];
        var vPref;

        for (vPref in configuration) {
          if (configuration[vPref].explicitSet === true) {
            if (configuration[vPref].type === "name") {
              pdfDict.push("/" + vPref + " /" + configuration[vPref].value);
            } else {
              pdfDict.push("/" + vPref + " " + configuration[vPref].value);
            }
          }
        }

        if (pdfDict.length !== 0) {
          this.internal.write("/ViewerPreferences\n<<\n" + pdfDict.join("\n") + "\n>>");
        }
      });
      this.internal.viewerpreferences.isSubscribed = true;
    }

    this.internal.viewerpreferences.configuration = configuration;
    return this;
  };
})(jsPDF.API);

/* global jsPDF */

/** ==================================================================== 
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 * 
 * 
 * ====================================================================
 */

/**
* @name xmp_metadata
* @module
*/
(function (jsPDFAPI) {

  var postPutResources = function postPutResources() {
    var xmpmeta_beginning = '<x:xmpmeta xmlns:x="adobe:ns:meta/">';
    var rdf_beginning = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>';
    var rdf_ending = '</jspdf:metadata></rdf:Description></rdf:RDF>';
    var xmpmeta_ending = '</x:xmpmeta>';
    var utf8_xmpmeta_beginning = unescape(encodeURIComponent(xmpmeta_beginning));
    var utf8_rdf_beginning = unescape(encodeURIComponent(rdf_beginning));
    var utf8_metadata = unescape(encodeURIComponent(this.internal.__metadata__.metadata));
    var utf8_rdf_ending = unescape(encodeURIComponent(rdf_ending));
    var utf8_xmpmeta_ending = unescape(encodeURIComponent(xmpmeta_ending));
    var total_len = utf8_rdf_beginning.length + utf8_metadata.length + utf8_rdf_ending.length + utf8_xmpmeta_beginning.length + utf8_xmpmeta_ending.length;
    this.internal.__metadata__.metadata_object_number = this.internal.newObject();
    this.internal.write('<< /Type /Metadata /Subtype /XML /Length ' + total_len + ' >>');
    this.internal.write('stream');
    this.internal.write(utf8_xmpmeta_beginning + utf8_rdf_beginning + utf8_metadata + utf8_rdf_ending + utf8_xmpmeta_ending);
    this.internal.write('endstream');
    this.internal.write('endobj');
  };

  var putCatalog = function putCatalog() {
    if (this.internal.__metadata__.metadata_object_number) {
      this.internal.write('/Metadata ' + this.internal.__metadata__.metadata_object_number + ' 0 R');
    }
  };
  /**
  * Adds XMP formatted metadata to PDF
  *
  * @name addMetadata
  * @function
  * @param {String} metadata The actual metadata to be added. The metadata shall be stored as XMP simple value. Note that if the metadata string contains XML markup characters "<", ">" or "&", those characters should be written using XML entities.
  * @param {String} namespaceuri Sets the namespace URI for the metadata. Last character should be slash or hash.
  * @returns {jsPDF} jsPDF-instance
  */


  jsPDFAPI.addMetadata = function (metadata, namespaceuri) {
    if (typeof this.internal.__metadata__ === 'undefined') {
      this.internal.__metadata__ = {
        metadata: metadata,
        namespaceuri: namespaceuri || "http://jspdf.default.namespaceuri/"
      };
      this.internal.events.subscribe('putCatalog', putCatalog);
      this.internal.events.subscribe('postPutResources', postPutResources);
    }

    return this;
  };
})(jsPDF.API);

/* global jsPDF */

/**
* @name utf8
* @module
*/
(function (jsPDF) {

  var jsPDFAPI = jsPDF.API;
  /***************************************************************************************************/

  /* function : pdfEscape16                                                                          */

  /* comment : The character id of a 2-byte string is converted to a hexadecimal number by obtaining */

  /*   the corresponding glyph id and width, and then adding padding to the string.                  */

  /***************************************************************************************************/

  var pdfEscape16 = jsPDFAPI.pdfEscape16 = function (text, font) {
    var widths = font.metadata.Unicode.widths;
    var padz = ["", "0", "00", "000", "0000"];
    var ar = [""];

    for (var i = 0, l = text.length, t; i < l; ++i) {
      t = font.metadata.characterToGlyph(text.charCodeAt(i));
      font.metadata.glyIdsUsed.push(t);
      font.metadata.toUnicode[t] = text.charCodeAt(i);

      if (widths.indexOf(t) == -1) {
        widths.push(t);
        widths.push([parseInt(font.metadata.widthOfGlyph(t), 10)]);
      }

      if (t == '0') {
        //Spaces are not allowed in cmap.
        return ar.join("");
      } else {
        t = t.toString(16);
        ar.push(padz[4 - t.length], t);
      }
    }

    return ar.join("");
  };

  var toUnicodeCmap = function toUnicodeCmap(map) {
    var code, codes, range, unicode, unicodeMap, _i, _len;

    unicodeMap = '/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange';
    codes = Object.keys(map).sort(function (a, b) {
      return a - b;
    });
    range = [];

    for (_i = 0, _len = codes.length; _i < _len; _i++) {
      code = codes[_i];

      if (range.length >= 100) {
        unicodeMap += "\n" + range.length + " beginbfchar\n" + range.join('\n') + "\nendbfchar";
        range = [];
      }

      if (map[code] !== undefined && map[code] !== null && typeof map[code].toString === "function") {
        unicode = ('0000' + map[code].toString(16)).slice(-4);
        code = ('0000' + (+code).toString(16)).slice(-4);
        range.push("<" + code + "><" + unicode + ">");
      }
    }

    if (range.length) {
      unicodeMap += "\n" + range.length + " beginbfchar\n" + range.join('\n') + "\nendbfchar\n";
    }

    unicodeMap += 'endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend';
    return unicodeMap;
  };

  var identityHFunction = function identityHFunction(options) {
    var font = options.font;
    var out = options.out;
    var newObject = options.newObject;
    var putStream = options.putStream;
    var pdfEscapeWithNeededParanthesis = options.pdfEscapeWithNeededParanthesis;

    if (font.metadata instanceof jsPDF.API.TTFFont && font.encoding === 'Identity-H') {
      //Tag with Identity-H
      var widths = font.metadata.Unicode.widths;
      var data = font.metadata.subset.encode(font.metadata.glyIdsUsed, 1);
      var pdfOutput = data;
      var pdfOutput2 = "";

      for (var i = 0; i < pdfOutput.length; i++) {
        pdfOutput2 += String.fromCharCode(pdfOutput[i]);
      }

      var fontTable = newObject();
      putStream({
        data: pdfOutput2,
        addLength1: true
      });
      out('endobj');
      var cmap = newObject();
      var cmapData = toUnicodeCmap(font.metadata.toUnicode);
      putStream({
        data: cmapData,
        addLength1: true
      });
      out('endobj');
      var fontDescriptor = newObject();
      out('<<');
      out('/Type /FontDescriptor');
      out('/FontName /' + pdfEscapeWithNeededParanthesis(font.fontName));
      out('/FontFile2 ' + fontTable + ' 0 R');
      out('/FontBBox ' + jsPDF.API.PDFObject.convert(font.metadata.bbox));
      out('/Flags ' + font.metadata.flags);
      out('/StemV ' + font.metadata.stemV);
      out('/ItalicAngle ' + font.metadata.italicAngle);
      out('/Ascent ' + font.metadata.ascender);
      out('/Descent ' + font.metadata.decender);
      out('/CapHeight ' + font.metadata.capHeight);
      out('>>');
      out('endobj');
      var DescendantFont = newObject();
      out('<<');
      out('/Type /Font');
      out('/BaseFont /' + pdfEscapeWithNeededParanthesis(font.fontName));
      out('/FontDescriptor ' + fontDescriptor + ' 0 R');
      out('/W ' + jsPDF.API.PDFObject.convert(widths));
      out('/CIDToGIDMap /Identity');
      out('/DW 1000');
      out('/Subtype /CIDFontType2');
      out('/CIDSystemInfo');
      out('<<');
      out('/Supplement 0');
      out('/Registry (Adobe)');
      out('/Ordering (' + font.encoding + ')');
      out('>>');
      out('>>');
      out('endobj');
      font.objectNumber = newObject();
      out('<<');
      out('/Type /Font');
      out('/Subtype /Type0');
      out('/ToUnicode ' + cmap + ' 0 R');
      out('/BaseFont /' + font.fontName);
      out('/Encoding /' + font.encoding);
      out('/DescendantFonts [' + DescendantFont + ' 0 R]');
      out('>>');
      out('endobj');
      font.isAlreadyPutted = true;
    }
  };

  jsPDFAPI.events.push(['putFont', function (args) {
    identityHFunction(args);
  }]);

  var winAnsiEncodingFunction = function winAnsiEncodingFunction(options) {
    var font = options.font;
    var out = options.out;
    var newObject = options.newObject;
    var putStream = options.putStream;
    var pdfEscapeWithNeededParanthesis = options.pdfEscapeWithNeededParanthesis;

    if (font.metadata instanceof jsPDF.API.TTFFont && font.encoding === 'WinAnsiEncoding') {
      //Tag with WinAnsi encoding
      var data = font.metadata.rawData;
      var pdfOutput = data;
      var pdfOutput2 = "";

      for (var i = 0; i < pdfOutput.length; i++) {
        pdfOutput2 += String.fromCharCode(pdfOutput[i]);
      }

      var fontTable = newObject();
      putStream({
        data: pdfOutput2,
        addLength1: true
      });
      out('endobj');
      var cmap = newObject();
      var cmapData = toUnicodeCmap(font.metadata.toUnicode);
      putStream({
        data: cmapData,
        addLength1: true
      });
      out('endobj');
      var fontDescriptor = newObject();
      out('<<');
      out('/Descent ' + font.metadata.decender);
      out('/CapHeight ' + font.metadata.capHeight);
      out('/StemV ' + font.metadata.stemV);
      out('/Type /FontDescriptor');
      out('/FontFile2 ' + fontTable + ' 0 R');
      out('/Flags 96');
      out('/FontBBox ' + jsPDF.API.PDFObject.convert(font.metadata.bbox));
      out('/FontName /' + pdfEscapeWithNeededParanthesis(font.fontName));
      out('/ItalicAngle ' + font.metadata.italicAngle);
      out('/Ascent ' + font.metadata.ascender);
      out('>>');
      out('endobj');
      font.objectNumber = newObject();

      for (var j = 0; j < font.metadata.hmtx.widths.length; j++) {
        font.metadata.hmtx.widths[j] = parseInt(font.metadata.hmtx.widths[j] * (1000 / font.metadata.head.unitsPerEm)); //Change the width of Em units to Point units.
      }

      out('<</Subtype/TrueType/Type/Font/ToUnicode ' + cmap + ' 0 R/BaseFont/' + font.fontName + '/FontDescriptor ' + fontDescriptor + ' 0 R' + '/Encoding/' + font.encoding + ' /FirstChar 29 /LastChar 255 /Widths ' + jsPDF.API.PDFObject.convert(font.metadata.hmtx.widths) + '>>');
      out('endobj');
      font.isAlreadyPutted = true;
    }
  };

  jsPDFAPI.events.push(['putFont', function (args) {
    winAnsiEncodingFunction(args);
  }]);

  var utf8TextFunction = function utf8TextFunction(args) {
    var text = args.text || '';
    var x = args.x;
    var y = args.y;
    var options = args.options || {};
    var mutex = args.mutex || {};
    var pdfEscape = mutex.pdfEscape;
    var activeFontKey = mutex.activeFontKey;
    var fonts = mutex.fonts;
    var key = activeFontKey;
    var str = '',
        s = 0,
        cmapConfirm;
    var strText = '';
    var encoding = fonts[key].encoding;

    if (fonts[key].encoding !== 'Identity-H') {
      return {
        text: text,
        x: x,
        y: y,
        options: options,
        mutex: mutex
      };
    }

    strText = text;
    key = activeFontKey;

    if (Array.isArray(text)) {
      strText = text[0];
    }

    for (s = 0; s < strText.length; s += 1) {
      if (fonts[key].metadata.hasOwnProperty('cmap')) {
        cmapConfirm = fonts[key].metadata.cmap.unicode.codeMap[strText[s].charCodeAt(0)];
        /*
        if (Object.prototype.toString.call(text) === '[object Array]') {
          var i = 0;
         // for (i = 0; i < text.length; i += 1) {
              if (Object.prototype.toString.call(text[s]) === '[object Array]') {
                  cmapConfirm = fonts[key].metadata.cmap.unicode.codeMap[strText[s][0].charCodeAt(0)]; //Make sure the cmap has the corresponding glyph id
              } else {
                  
              }
          //}
          
        } else {
          cmapConfirm = fonts[key].metadata.cmap.unicode.codeMap[strText[s].charCodeAt(0)]; //Make sure the cmap has the corresponding glyph id
        }*/
      }

      if (!cmapConfirm) {
        if (strText[s].charCodeAt(0) < 256 && fonts[key].metadata.hasOwnProperty('Unicode')) {
          str += strText[s];
        } else {
          str += '';
        }
      } else {
        str += strText[s];
      }
    }

    var result = '';

    if (parseInt(key.slice(1)) < 14 || encoding === 'WinAnsiEncoding') {
      //For the default 13 font
      result = pdfEscape(str, key).split('').map(function (cv) {
        return cv.charCodeAt(0).toString(16);
      }).join('');
    } else if (encoding === 'Identity-H') {
      result = pdfEscape16(str, fonts[key]);
    }

    mutex.isHex = true;
    return {
      text: result,
      x: x,
      y: y,
      options: options,
      mutex: mutex
    };
  };

  var utf8EscapeFunction = function utf8EscapeFunction(parms) {
    var text = parms.text || '',
        x = parms.x,
        y = parms.y,
        options = parms.options,
        mutex = parms.mutex;
    var tmpText = [];
    var args = {
      text: text,
      x: x,
      y: y,
      options: options,
      mutex: mutex
    };

    if (Array.isArray(text)) {
      var i = 0;

      for (i = 0; i < text.length; i += 1) {
        if (Array.isArray(text[i])) {
          if (text[i].length === 3) {
            tmpText.push([utf8TextFunction(Object.assign({}, args, {
              text: text[i][0]
            })).text, text[i][1], text[i][2]]);
          } else {
            tmpText.push(utf8TextFunction(Object.assign({}, args, {
              text: text[i]
            })).text);
          }
        } else {
          tmpText.push(utf8TextFunction(Object.assign({}, args, {
            text: text[i]
          })).text);
        }
      }

      parms.text = tmpText;
    } else {
      parms.text = utf8TextFunction(Object.assign({}, args, {
        text: text
      })).text;
    }
  };

  jsPDFAPI.events.push(['postProcessText', utf8EscapeFunction]);
})(jsPDF);

/* global jsPDF */

/*
 * Copyright (c) 2012 chick307 <chick307@gmail.com>
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
(function (jsPDF, callback) {
  jsPDF.API.adler32cs = callback();
})(jsPDF, function () {
  var _hasArrayBuffer = typeof ArrayBuffer === 'function' && typeof Uint8Array === 'function';

  var _Buffer = null,
      _isBuffer = function () {
    if (!_hasArrayBuffer) { return function _isBuffer() {
      return false;
    }; }

    try {
      var buffer = {};
      if (typeof buffer.Buffer === 'function') { _Buffer = buffer.Buffer; } // eslint-disable-next-line no-empty
    } catch (error) {}

    return function _isBuffer(value) {
      return value instanceof ArrayBuffer || _Buffer !== null && value instanceof _Buffer;
    };
  }();

  var _utf8ToBinary = function () {
    if (_Buffer !== null) {
      return function _utf8ToBinary(utf8String) {
        return new _Buffer(utf8String, 'utf8').toString('binary');
      };
    } else {
      return function _utf8ToBinary(utf8String) {
        return unescape(encodeURIComponent(utf8String));
      };
    }
  }();

  var MOD = 65521;

  var _update = function _update(checksum, binaryString) {
    var a = checksum & 0xFFFF,
        b = checksum >>> 16;

    for (var i = 0, length = binaryString.length; i < length; i++) {
      a = (a + (binaryString.charCodeAt(i) & 0xFF)) % MOD;
      b = (b + a) % MOD;
    }

    return (b << 16 | a) >>> 0;
  };

  var _updateUint8Array = function _updateUint8Array(checksum, uint8Array) {
    var a = checksum & 0xFFFF,
        b = checksum >>> 16;

    for (var i = 0, length = uint8Array.length; i < length; i++) {
      a = (a + uint8Array[i]) % MOD;
      b = (b + a) % MOD;
    }

    return (b << 16 | a) >>> 0;
  };

  var exports = {};

  var Adler32 = exports.Adler32 = function () {
    var ctor = function Adler32(checksum) {
      if (!(this instanceof ctor)) {
        throw new TypeError('Constructor cannot called be as a function.');
      }

      if (!isFinite(checksum = checksum === null ? 1 : +checksum)) {
        throw new Error('First arguments needs to be a finite number.');
      }

      this.checksum = checksum >>> 0;
    };

    var proto = ctor.prototype = {};
    proto.constructor = ctor;

    ctor.from = function (from) {
      from.prototype = proto;
      return from;
    }(function from(binaryString) {
      if (!(this instanceof ctor)) {
        throw new TypeError('Constructor cannot called be as a function.');
      }

      if (binaryString === null) { throw new Error('First argument needs to be a string.'); }
      this.checksum = _update(1, binaryString.toString());
    });

    ctor.fromUtf8 = function (fromUtf8) {
      fromUtf8.prototype = proto;
      return fromUtf8;
    }(function fromUtf8(utf8String) {
      if (!(this instanceof ctor)) {
        throw new TypeError('Constructor cannot called be as a function.');
      }

      if (utf8String === null) { throw new Error('First argument needs to be a string.'); }

      var binaryString = _utf8ToBinary(utf8String.toString());

      this.checksum = _update(1, binaryString);
    });

    if (_hasArrayBuffer) {
      ctor.fromBuffer = function (fromBuffer) {
        fromBuffer.prototype = proto;
        return fromBuffer;
      }(function fromBuffer(buffer) {
        if (!(this instanceof ctor)) {
          throw new TypeError('Constructor cannot called be as a function.');
        }

        if (!_isBuffer(buffer)) { throw new Error('First argument needs to be ArrayBuffer.'); }
        var array = new Uint8Array(buffer);
        return this.checksum = _updateUint8Array(1, array);
      });
    }

    proto.update = function update(binaryString) {
      if (binaryString === null) { throw new Error('First argument needs to be a string.'); }
      binaryString = binaryString.toString();
      return this.checksum = _update(this.checksum, binaryString);
    };

    proto.updateUtf8 = function updateUtf8(utf8String) {
      if (utf8String === null) { throw new Error('First argument needs to be a string.'); }

      var binaryString = _utf8ToBinary(utf8String.toString());

      return this.checksum = _update(this.checksum, binaryString);
    };

    if (_hasArrayBuffer) {
      proto.updateBuffer = function updateBuffer(buffer) {
        if (!_isBuffer(buffer)) { throw new Error('First argument needs to be ArrayBuffer.'); }
        var array = new Uint8Array(buffer);
        return this.checksum = _updateUint8Array(this.checksum, array);
      };
    }

    proto.clone = function clone() {
      return new Adler32(this.checksum);
    };

    return ctor;
  }();

  exports.from = function from(binaryString) {
    if (binaryString === null) { throw new Error('First argument needs to be a string.'); }
    return _update(1, binaryString.toString());
  };

  exports.fromUtf8 = function fromUtf8(utf8String) {
    if (utf8String === null) { throw new Error('First argument needs to be a string.'); }

    var binaryString = _utf8ToBinary(utf8String.toString());

    return _update(1, binaryString);
  };

  if (_hasArrayBuffer) {
    exports.fromBuffer = function fromBuffer(buffer) {
      if (!_isBuffer(buffer)) { throw new Error('First argument need to be ArrayBuffer.'); }
      var array = new Uint8Array(buffer);
      return _updateUint8Array(1, array);
    };
  }

  return exports;
});

/**
* Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
* MIT License
*/
(function (jsPDF) {
  /**
   * Table of Unicode types.
   *
   * Generated by:
   *
   * var bidi = require("./bidi/index");
   * var bidi_accumulate = bidi.slice(0, 256).concat(bidi.slice(0x0500, 0x0500 + 256 * 3)).
   * concat(bidi.slice(0x2000, 0x2000 + 256)).concat(bidi.slice(0xFB00, 0xFB00 + 256)).
   * concat(bidi.slice(0xFE00, 0xFE00 + 2 * 256));
   *
   * for( var i = 0; i < bidi_accumulate.length; i++) {
   * 	if(bidi_accumulate[i] === undefined || bidi_accumulate[i] === 'ON')
   * 		bidi_accumulate[i] = 'N'; //mark as neutral to conserve space and substitute undefined
   * }
   * var bidiAccumulateStr = 'return [ "' + bidi_accumulate.toString().replace(/,/g, '", "') + '" ];';
   * require("fs").writeFile('unicode-types.js', bidiAccumulateStr);
   *
   * Based on:
   * https://github.com/mathiasbynens/unicode-8.0.0
   */

  var bidiUnicodeTypes = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"];
  /**
   * Unicode Bidi algorithm compliant Bidi engine.
   * For reference see http://unicode.org/reports/tr9/
  */

  /**
   * constructor ( options )
   *
   * Initializes Bidi engine
   *
   * @param {Object} See 'setOptions' below for detailed description.
   * options are cashed between invocation of 'doBidiReorder' method
   *
   * sample usage pattern of BidiEngine:
   * var opt = {
   * 	isInputVisual: true,
   * 	isInputRtl: false,
   * 	isOutputVisual: false,
   * 	isOutputRtl: false,
   * 	isSymmetricSwapping: true
   * }
   * var sourceToTarget = [], levels = [];
   * var bidiEng = Globalize.bidiEngine(opt);
   * var src = "text string to be reordered";
   * var ret = bidiEng.doBidiReorder(src, sourceToTarget, levels);
   */

  jsPDF.__bidiEngine__ = jsPDF.prototype.__bidiEngine__ = function (options) {
    var _UNICODE_TYPES = _bidiUnicodeTypes;
    var _STATE_TABLE_LTR = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 0x11, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 0x15, 0x15, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]];
    var _STATE_TABLE_RTL = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 0x21, 3, 1, 1]];
    var _TYPE_NAMES_MAP = {
      "L": 0,
      "R": 1,
      "EN": 2,
      "AN": 3,
      "N": 4,
      "B": 5,
      "S": 6
    };
    var _UNICODE_RANGES_MAP = {
      0: 0,
      5: 1,
      6: 2,
      7: 3,
      0x20: 4,
      0xFB: 5,
      0xFE: 6,
      0xFF: 7
    };
    var _SWAP_TABLE = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "\xAB", "\xBB", "\xAB", "\u2039", "\u203A", "\u2039", "\u2045", "\u2046", "\u2045", "\u207D", "\u207E", "\u207D", "\u208D", "\u208E", "\u208D", "\u2264", "\u2265", "\u2264", "\u2329", "\u232A", "\u2329", "\uFE59", "\uFE5A", "\uFE59", "\uFE5B", "\uFE5C", "\uFE5B", "\uFE5D", "\uFE5E", "\uFE5D", "\uFE64", "\uFE65", "\uFE64"];

    var _LTR_RANGES_REG_EXPR = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/);

    var _lastArabic = false,
        _hasUbatB,
        _hasUbatS,
        DIR_LTR = 0,
        DIR_RTL = 1,
        _isInVisual,
        _isInRtl,
        _isOutVisual,
        _isOutRtl,
        _isSymmetricSwapping,
        _dir = DIR_LTR;

    this.__bidiEngine__ = {};

    var _init = function _init(text, sourceToTargetMap) {
      if (sourceToTargetMap) {
        for (var i = 0; i < text.length; i++) {
          sourceToTargetMap[i] = i;
        }
      }

      if (_isInRtl === undefined) {
        _isInRtl = _isContextualDirRtl(text);
      }

      if (_isOutRtl === undefined) {
        _isOutRtl = _isContextualDirRtl(text);
      }
    }; // for reference see 3.2 in http://unicode.org/reports/tr9/
    //


    var _getCharType = function _getCharType(ch) {
      var charCode = ch.charCodeAt(),
          range = charCode >> 8,
          rangeIdx = _UNICODE_RANGES_MAP[range];

      if (rangeIdx !== undefined) {
        return _UNICODE_TYPES[rangeIdx * 256 + (charCode & 0xFF)];
      } else if (range === 0xFC || range === 0xFD) {
        return "AL";
      } else if (_LTR_RANGES_REG_EXPR.test(range)) {
        //unlikely case
        return "L";
      } else if (range === 8) {
        // even less likely
        return "R";
      }

      return "N"; //undefined type, mark as neutral
    };

    var _isContextualDirRtl = function _isContextualDirRtl(text) {
      for (var i = 0, charType; i < text.length; i++) {
        charType = _getCharType(text.charAt(i));

        if (charType === "L") {
          return false;
        } else if (charType === "R") {
          return true;
        }
      }

      return false;
    }; // for reference see 3.3.4 & 3.3.5 in http://unicode.org/reports/tr9/
    //


    var _resolveCharType = function _resolveCharType(chars, types, resolvedTypes, index) {
      var cType = types[index],
          wType,
          nType,
          i,
          len;

      switch (cType) {
        case "L":
        case "R":
          _lastArabic = false;
          break;

        case "N":
        case "AN":
          break;

        case "EN":
          if (_lastArabic) {
            cType = "AN";
          }

          break;

        case "AL":
          _lastArabic = true;
          cType = "R";
          break;

        case "WS":
          cType = "N";
          break;

        case "CS":
          if (index < 1 || index + 1 >= types.length || (wType = resolvedTypes[index - 1]) !== "EN" && wType !== "AN" || (nType = types[index + 1]) !== "EN" && nType !== "AN") {
            cType = "N";
          } else if (_lastArabic) {
            nType = "AN";
          }

          cType = nType === wType ? nType : "N";
          break;

        case "ES":
          wType = index > 0 ? resolvedTypes[index - 1] : "B";
          cType = wType === "EN" && index + 1 < types.length && types[index + 1] === "EN" ? "EN" : "N";
          break;

        case "ET":
          if (index > 0 && resolvedTypes[index - 1] === "EN") {
            cType = "EN";
            break;
          } else if (_lastArabic) {
            cType = "N";
            break;
          }

          i = index + 1;
          len = types.length;

          while (i < len && types[i] === "ET") {
            i++;
          }

          if (i < len && types[i] === "EN") {
            cType = "EN";
          } else {
            cType = "N";
          }

          break;

        case "NSM":
          if (_isInVisual && !_isInRtl) {
            //V->L
            len = types.length;
            i = index + 1;

            while (i < len && types[i] === "NSM") {
              i++;
            }

            if (i < len) {
              var c = chars[index];
              var rtlCandidate = c >= 0x0591 && c <= 0x08FF || c === 0xFB1E;
              wType = types[i];

              if (rtlCandidate && (wType === "R" || wType === "AL")) {
                cType = "R";
                break;
              }
            }
          }

          if (index < 1 || (wType = types[index - 1]) === "B") {
            cType = "N";
          } else {
            cType = resolvedTypes[index - 1];
          }

          break;

        case "B":
          _lastArabic = false;
          _hasUbatB = true;
          cType = _dir;
          break;

        case "S":
          _hasUbatS = true;
          cType = "N";
          break;

        case "LRE":
        case "RLE":
        case "LRO":
        case "RLO":
        case "PDF":
          _lastArabic = false;
          break;

        case "BN":
          cType = "N";
          break;
      }

      return cType;
    };

    var _handleUbatS = function _handleUbatS(types, levels, length) {
      for (var i = 0; i < length; i++) {
        if (types[i] === "S") {
          levels[i] = _dir;

          for (var j = i - 1; j >= 0; j--) {
            if (types[j] === "WS") {
              levels[j] = _dir;
            } else {
              break;
            }
          }
        }
      }
    };

    var _invertString = function _invertString(text, sourceToTargetMap, levels) {
      var charArray = text.split("");

      if (levels) {
        _computeLevels(charArray, levels, {
          hiLevel: _dir
        });
      }

      charArray.reverse();
      sourceToTargetMap && sourceToTargetMap.reverse();
      return charArray.join("");
    }; // For reference see 3.3 in http://unicode.org/reports/tr9/
    //


    var _computeLevels = function _computeLevels(chars, levels, params) {
      var action,
          condition,
          i,
          index,
          newLevel,
          prevState,
          condPos = -1,
          len = chars.length,
          newState = 0,
          resolvedTypes = [],
          stateTable = _dir ? _STATE_TABLE_RTL : _STATE_TABLE_LTR,
          types = [];
      _lastArabic = false;
      _hasUbatB = false;
      _hasUbatS = false;

      for (i = 0; i < len; i++) {
        types[i] = _getCharType(chars[i]);
      }

      for (index = 0; index < len; index++) {
        prevState = newState;
        resolvedTypes[index] = _resolveCharType(chars, types, resolvedTypes, index);
        newState = stateTable[prevState][_TYPE_NAMES_MAP[resolvedTypes[index]]];
        action = newState & 0xF0;
        newState &= 0x0F;
        levels[index] = newLevel = stateTable[newState][5];

        if (action > 0) {
          if (action === 0x10) {
            for (i = condPos; i < index; i++) {
              levels[i] = 1;
            }

            condPos = -1;
          } else {
            condPos = -1;
          }
        }

        condition = stateTable[newState][6];

        if (condition) {
          if (condPos === -1) {
            condPos = index;
          }
        } else {
          if (condPos > -1) {
            for (i = condPos; i < index; i++) {
              levels[i] = newLevel;
            }

            condPos = -1;
          }
        }

        if (types[index] === "B") {
          levels[index] = 0;
        }

        params.hiLevel |= newLevel;
      }

      if (_hasUbatS) {
        _handleUbatS(types, levels, len);
      }
    }; // for reference see 3.4 in http://unicode.org/reports/tr9/
    //


    var _invertByLevel = function _invertByLevel(level, charArray, sourceToTargetMap, levels, params) {
      if (params.hiLevel < level) {
        return;
      }

      if (level === 1 && _dir === DIR_RTL && !_hasUbatB) {
        charArray.reverse();
        sourceToTargetMap && sourceToTargetMap.reverse();
        return;
      }

      var ch,
          high,
          end,
          low,
          len = charArray.length,
          start = 0;

      while (start < len) {
        if (levels[start] >= level) {
          end = start + 1;

          while (end < len && levels[end] >= level) {
            end++;
          }

          for (low = start, high = end - 1; low < high; low++, high--) {
            ch = charArray[low];
            charArray[low] = charArray[high];
            charArray[high] = ch;

            if (sourceToTargetMap) {
              ch = sourceToTargetMap[low];
              sourceToTargetMap[low] = sourceToTargetMap[high];
              sourceToTargetMap[high] = ch;
            }
          }

          start = end;
        }

        start++;
      }
    }; // for reference see 7 & BD16 in http://unicode.org/reports/tr9/
    //


    var _symmetricSwap = function _symmetricSwap(charArray, levels, params) {
      if (params.hiLevel !== 0 && _isSymmetricSwapping) {
        for (var i = 0, index; i < charArray.length; i++) {
          if (levels[i] === 1) {
            index = _SWAP_TABLE.indexOf(charArray[i]);

            if (index >= 0) {
              charArray[i] = _SWAP_TABLE[index + 1];
            }
          }
        }
      }
    };

    var _reorder = function _reorder(text, sourceToTargetMap, levels) {
      var charArray = text.split(""),
          params = {
        hiLevel: _dir
      };

      if (!levels) {
        levels = [];
      }

      _computeLevels(charArray, levels, params);

      _symmetricSwap(charArray, levels, params);

      _invertByLevel(DIR_RTL + 1, charArray, sourceToTargetMap, levels, params);

      _invertByLevel(DIR_RTL, charArray, sourceToTargetMap, levels, params);

      return charArray.join("");
    }; // doBidiReorder( text, sourceToTargetMap, levels )
    // Performs Bidi reordering by implementing Unicode Bidi algorithm.
    // Returns reordered string
    // @text [String]:
    // - input string to be reordered, this is input parameter
    // $sourceToTargetMap [Array] (optional)
    // - resultant mapping between input and output strings, this is output parameter
    // $levels [Array] (optional)
    // - array of calculated Bidi levels, , this is output parameter


    this.__bidiEngine__.doBidiReorder = function (text, sourceToTargetMap, levels) {
      _init(text, sourceToTargetMap);

      if (!_isInVisual && _isOutVisual && !_isOutRtl) {
        // LLTR->VLTR, LRTL->VLTR
        _dir = _isInRtl ? DIR_RTL : DIR_LTR;
        text = _reorder(text, sourceToTargetMap, levels);
      } else if (_isInVisual && _isOutVisual && _isInRtl ^ _isOutRtl) {
        // VRTL->VLTR, VLTR->VRTL
        _dir = _isInRtl ? DIR_RTL : DIR_LTR;
        text = _invertString(text, sourceToTargetMap, levels);
      } else if (!_isInVisual && _isOutVisual && _isOutRtl) {
        // LLTR->VRTL, LRTL->VRTL
        _dir = _isInRtl ? DIR_RTL : DIR_LTR;
        text = _reorder(text, sourceToTargetMap, levels);
        text = _invertString(text, sourceToTargetMap);
      } else if (_isInVisual && !_isInRtl && !_isOutVisual && !_isOutRtl) {
        // VLTR->LLTR
        _dir = DIR_LTR;
        text = _reorder(text, sourceToTargetMap, levels);
      } else if (_isInVisual && !_isOutVisual && _isInRtl ^ _isOutRtl) {
        // VLTR->LRTL, VRTL->LLTR
        text = _invertString(text, sourceToTargetMap);

        if (_isInRtl) {
          //LLTR -> VLTR
          _dir = DIR_LTR;
          text = _reorder(text, sourceToTargetMap, levels);
        } else {
          //LRTL -> VRTL
          _dir = DIR_RTL;
          text = _reorder(text, sourceToTargetMap, levels);
          text = _invertString(text, sourceToTargetMap);
        }
      } else if (_isInVisual && _isInRtl && !_isOutVisual && _isOutRtl) {
        //  VRTL->LRTL
        _dir = DIR_RTL;
        text = _reorder(text, sourceToTargetMap, levels);
        text = _invertString(text, sourceToTargetMap);
      } else if (!_isInVisual && !_isOutVisual && _isInRtl ^ _isOutRtl) {
        // LRTL->LLTR, LLTR->LRTL
        var isSymmetricSwappingOrig = _isSymmetricSwapping;

        if (_isInRtl) {
          //LRTL->LLTR
          _dir = DIR_RTL;
          text = _reorder(text, sourceToTargetMap, levels);
          _dir = DIR_LTR;
          _isSymmetricSwapping = false;
          text = _reorder(text, sourceToTargetMap, levels);
          _isSymmetricSwapping = isSymmetricSwappingOrig;
        } else {
          //LLTR->LRTL
          _dir = DIR_LTR;
          text = _reorder(text, sourceToTargetMap, levels);
          text = _invertString(text, sourceToTargetMap);
          _dir = DIR_RTL;
          _isSymmetricSwapping = false;
          text = _reorder(text, sourceToTargetMap, levels);
          _isSymmetricSwapping = isSymmetricSwappingOrig;
          text = _invertString(text, sourceToTargetMap);
        }
      }

      return text;
    };
    /**
    * @name setOptions( options )
    * @function 
    * Sets options for Bidi conversion
    * @param {Object}:
    * - isInputVisual {boolean} (defaults to false): allowed values: true(Visual mode), false(Logical mode)
    * - isInputRtl {boolean}: allowed values true(Right-to-left direction), false (Left-to-right directiion), undefined(Contectual direction, i.e.direction defined by first strong character of input string)
    * - isOutputVisual {boolean} (defaults to false): allowed values: true(Visual mode), false(Logical mode)
    * - isOutputRtl {boolean}: allowed values true(Right-to-left direction), false (Left-to-right directiion), undefined(Contectual direction, i.e.direction defined by first strong characterof input string)
    * - isSymmetricSwapping {boolean} (defaults to false): allowed values true(needs symmetric swapping), false (no need in symmetric swapping),
    */


    this.__bidiEngine__.setOptions = function (options) {
      if (options) {
        _isInVisual = options.isInputVisual;
        _isOutVisual = options.isOutputVisual;
        _isInRtl = options.isInputRtl;
        _isOutRtl = options.isOutputRtl;
        _isSymmetricSwapping = options.isSymmetricSwapping;
      }
    };

    this.__bidiEngine__.setOptions(options);

    return this.__bidiEngine__;
  };

  var _bidiUnicodeTypes = bidiUnicodeTypes;
  var bidiEngine = new jsPDF.__bidiEngine__({
    isInputVisual: true
  });

  var bidiEngineFunction = function bidiEngineFunction(args) {
    var text = args.text;
    var x = args.x;
    var y = args.y;
    var options = args.options || {};
    var mutex = args.mutex || {};
    var lang = options.lang;
    var tmpText = [];
    options.isInputVisual = typeof options.isInputVisual === 'boolean' ? options.isInputVisual : true;
    bidiEngine.setOptions(options);

    if (Object.prototype.toString.call(text) === '[object Array]') {
      var i = 0;
      tmpText = [];

      for (i = 0; i < text.length; i += 1) {
        if (Object.prototype.toString.call(text[i]) === '[object Array]') {
          tmpText.push([bidiEngine.doBidiReorder(text[i][0]), text[i][1], text[i][2]]);
        } else {
          tmpText.push([bidiEngine.doBidiReorder(text[i])]);
        }
      }

      args.text = tmpText;
    } else {
      args.text = bidiEngine.doBidiReorder(text);
    }

    bidiEngine.setOptions({
      isInputVisual: true
    });
  };

  jsPDF.API.events.push(['postProcessText', bidiEngineFunction]);
})(jsPDF);

/*
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*
JPEG encoder ported to JavaScript and optimized by Andreas Ritter, www.bytestrom.eu, 11/2009

Basic GUI blocking jpeg encoder
*/
function JPEGEncoder(quality) {
  var ffloor = Math.floor;
  var YTable = new Array(64);
  var UVTable = new Array(64);
  var fdtbl_Y = new Array(64);
  var fdtbl_UV = new Array(64);
  var YDC_HT;
  var UVDC_HT;
  var YAC_HT;
  var UVAC_HT;
  var bitcode = new Array(65535);
  var category = new Array(65535);
  var outputfDCTQuant = new Array(64);
  var DU = new Array(64);
  var byteout = [];
  var bytenew = 0;
  var bytepos = 7;
  var YDU = new Array(64);
  var UDU = new Array(64);
  var VDU = new Array(64);
  var clt = new Array(256);
  var RGB_YUV_TABLE = new Array(2048);
  var currentQuality;
  var ZigZag = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63];
  var std_dc_luminance_nrcodes = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];
  var std_dc_luminance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
  var std_ac_luminance_nrcodes = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d];
  var std_ac_luminance_values = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];
  var std_dc_chrominance_nrcodes = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];
  var std_dc_chrominance_values = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
  var std_ac_chrominance_nrcodes = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77];
  var std_ac_chrominance_values = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];

  function initQuantTables(sf) {
    var YQT = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99];

    for (var i = 0; i < 64; i++) {
      var t = ffloor((YQT[i] * sf + 50) / 100);
      t = Math.min(Math.max(t, 1), 255);
      YTable[ZigZag[i]] = t;
    }

    var UVQT = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];

    for (var j = 0; j < 64; j++) {
      var u = ffloor((UVQT[j] * sf + 50) / 100);
      u = Math.min(Math.max(u, 1), 255);
      UVTable[ZigZag[j]] = u;
    }

    var aasf = [1.0, 1.387039845, 1.306562965, 1.175875602, 1.0, 0.785694958, 0.541196100, 0.275899379];
    var k = 0;

    for (var row = 0; row < 8; row++) {
      for (var col = 0; col < 8; col++) {
        fdtbl_Y[k] = 1.0 / (YTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
        fdtbl_UV[k] = 1.0 / (UVTable[ZigZag[k]] * aasf[row] * aasf[col] * 8.0);
        k++;
      }
    }
  }

  function computeHuffmanTbl(nrcodes, std_table) {
    var codevalue = 0;
    var pos_in_table = 0;
    var HT = new Array();

    for (var k = 1; k <= 16; k++) {
      for (var j = 1; j <= nrcodes[k]; j++) {
        HT[std_table[pos_in_table]] = [];
        HT[std_table[pos_in_table]][0] = codevalue;
        HT[std_table[pos_in_table]][1] = k;
        pos_in_table++;
        codevalue++;
      }

      codevalue *= 2;
    }

    return HT;
  }

  function initHuffmanTbl() {
    YDC_HT = computeHuffmanTbl(std_dc_luminance_nrcodes, std_dc_luminance_values);
    UVDC_HT = computeHuffmanTbl(std_dc_chrominance_nrcodes, std_dc_chrominance_values);
    YAC_HT = computeHuffmanTbl(std_ac_luminance_nrcodes, std_ac_luminance_values);
    UVAC_HT = computeHuffmanTbl(std_ac_chrominance_nrcodes, std_ac_chrominance_values);
  }

  function initCategoryNumber() {
    var nrlower = 1;
    var nrupper = 2;

    for (var cat = 1; cat <= 15; cat++) {
      //Positive numbers
      for (var nr = nrlower; nr < nrupper; nr++) {
        category[32767 + nr] = cat;
        bitcode[32767 + nr] = [];
        bitcode[32767 + nr][1] = cat;
        bitcode[32767 + nr][0] = nr;
      } //Negative numbers


      for (var nrneg = -(nrupper - 1); nrneg <= -nrlower; nrneg++) {
        category[32767 + nrneg] = cat;
        bitcode[32767 + nrneg] = [];
        bitcode[32767 + nrneg][1] = cat;
        bitcode[32767 + nrneg][0] = nrupper - 1 + nrneg;
      }

      nrlower <<= 1;
      nrupper <<= 1;
    }
  }

  function initRGBYUVTable() {
    for (var i = 0; i < 256; i++) {
      RGB_YUV_TABLE[i] = 19595 * i;
      RGB_YUV_TABLE[i + 256 >> 0] = 38470 * i;
      RGB_YUV_TABLE[i + 512 >> 0] = 7471 * i + 0x8000;
      RGB_YUV_TABLE[i + 768 >> 0] = -11059 * i;
      RGB_YUV_TABLE[i + 1024 >> 0] = -21709 * i;
      RGB_YUV_TABLE[i + 1280 >> 0] = 32768 * i + 0x807FFF;
      RGB_YUV_TABLE[i + 1536 >> 0] = -27439 * i;
      RGB_YUV_TABLE[i + 1792 >> 0] = -5329 * i;
    }
  } // IO functions


  function writeBits(bs) {
    var value = bs[0];
    var posval = bs[1] - 1;

    while (posval >= 0) {
      if (value & 1 << posval) {
        bytenew |= 1 << bytepos;
      }

      posval--;
      bytepos--;

      if (bytepos < 0) {
        if (bytenew == 0xFF) {
          writeByte(0xFF);
          writeByte(0);
        } else {
          writeByte(bytenew);
        }

        bytepos = 7;
        bytenew = 0;
      }
    }
  }

  function writeByte(value) {
    //byteout.push(clt[value]); // write char directly instead of converting later
    byteout.push(value);
  }

  function writeWord(value) {
    writeByte(value >> 8 & 0xFF);
    writeByte(value & 0xFF);
  } // DCT & quantization core


  function fDCTQuant(data, fdtbl) {
    var d0, d1, d2, d3, d4, d5, d6, d7;
    /* Pass 1: process rows. */

    var dataOff = 0;
    var i;
    var I8 = 8;
    var I64 = 64;

    for (i = 0; i < I8; ++i) {
      d0 = data[dataOff];
      d1 = data[dataOff + 1];
      d2 = data[dataOff + 2];
      d3 = data[dataOff + 3];
      d4 = data[dataOff + 4];
      d5 = data[dataOff + 5];
      d6 = data[dataOff + 6];
      d7 = data[dataOff + 7];
      var tmp0 = d0 + d7;
      var tmp7 = d0 - d7;
      var tmp1 = d1 + d6;
      var tmp6 = d1 - d6;
      var tmp2 = d2 + d5;
      var tmp5 = d2 - d5;
      var tmp3 = d3 + d4;
      var tmp4 = d3 - d4;
      /* Even part */

      var tmp10 = tmp0 + tmp3;
      /* phase 2 */

      var tmp13 = tmp0 - tmp3;
      var tmp11 = tmp1 + tmp2;
      var tmp12 = tmp1 - tmp2;
      data[dataOff] = tmp10 + tmp11;
      /* phase 3 */

      data[dataOff + 4] = tmp10 - tmp11;
      var z1 = (tmp12 + tmp13) * 0.707106781;
      /* c4 */

      data[dataOff + 2] = tmp13 + z1;
      /* phase 5 */

      data[dataOff + 6] = tmp13 - z1;
      /* Odd part */

      tmp10 = tmp4 + tmp5;
      /* phase 2 */

      tmp11 = tmp5 + tmp6;
      tmp12 = tmp6 + tmp7;
      /* The rotator is modified from fig 4-8 to avoid extra negations. */

      var z5 = (tmp10 - tmp12) * 0.382683433;
      /* c6 */

      var z2 = 0.541196100 * tmp10 + z5;
      /* c2-c6 */

      var z4 = 1.306562965 * tmp12 + z5;
      /* c2+c6 */

      var z3 = tmp11 * 0.707106781;
      /* c4 */

      var z11 = tmp7 + z3;
      /* phase 5 */

      var z13 = tmp7 - z3;
      data[dataOff + 5] = z13 + z2;
      /* phase 6 */

      data[dataOff + 3] = z13 - z2;
      data[dataOff + 1] = z11 + z4;
      data[dataOff + 7] = z11 - z4;
      dataOff += 8;
      /* advance pointer to next row */
    }
    /* Pass 2: process columns. */


    dataOff = 0;

    for (i = 0; i < I8; ++i) {
      d0 = data[dataOff];
      d1 = data[dataOff + 8];
      d2 = data[dataOff + 16];
      d3 = data[dataOff + 24];
      d4 = data[dataOff + 32];
      d5 = data[dataOff + 40];
      d6 = data[dataOff + 48];
      d7 = data[dataOff + 56];
      var tmp0p2 = d0 + d7;
      var tmp7p2 = d0 - d7;
      var tmp1p2 = d1 + d6;
      var tmp6p2 = d1 - d6;
      var tmp2p2 = d2 + d5;
      var tmp5p2 = d2 - d5;
      var tmp3p2 = d3 + d4;
      var tmp4p2 = d3 - d4;
      /* Even part */

      var tmp10p2 = tmp0p2 + tmp3p2;
      /* phase 2 */

      var tmp13p2 = tmp0p2 - tmp3p2;
      var tmp11p2 = tmp1p2 + tmp2p2;
      var tmp12p2 = tmp1p2 - tmp2p2;
      data[dataOff] = tmp10p2 + tmp11p2;
      /* phase 3 */

      data[dataOff + 32] = tmp10p2 - tmp11p2;
      var z1p2 = (tmp12p2 + tmp13p2) * 0.707106781;
      /* c4 */

      data[dataOff + 16] = tmp13p2 + z1p2;
      /* phase 5 */

      data[dataOff + 48] = tmp13p2 - z1p2;
      /* Odd part */

      tmp10p2 = tmp4p2 + tmp5p2;
      /* phase 2 */

      tmp11p2 = tmp5p2 + tmp6p2;
      tmp12p2 = tmp6p2 + tmp7p2;
      /* The rotator is modified from fig 4-8 to avoid extra negations. */

      var z5p2 = (tmp10p2 - tmp12p2) * 0.382683433;
      /* c6 */

      var z2p2 = 0.541196100 * tmp10p2 + z5p2;
      /* c2-c6 */

      var z4p2 = 1.306562965 * tmp12p2 + z5p2;
      /* c2+c6 */

      var z3p2 = tmp11p2 * 0.707106781;
      /* c4 */

      var z11p2 = tmp7p2 + z3p2;
      /* phase 5 */

      var z13p2 = tmp7p2 - z3p2;
      data[dataOff + 40] = z13p2 + z2p2;
      /* phase 6 */

      data[dataOff + 24] = z13p2 - z2p2;
      data[dataOff + 8] = z11p2 + z4p2;
      data[dataOff + 56] = z11p2 - z4p2;
      dataOff++;
      /* advance pointer to next column */
    } // Quantize/descale the coefficients


    var fDCTQuant;

    for (i = 0; i < I64; ++i) {
      // Apply the quantization and scaling factor & Round to nearest integer
      fDCTQuant = data[i] * fdtbl[i];
      outputfDCTQuant[i] = fDCTQuant > 0.0 ? fDCTQuant + 0.5 | 0 : fDCTQuant - 0.5 | 0; //outputfDCTQuant[i] = fround(fDCTQuant);
    }

    return outputfDCTQuant;
  }

  function writeAPP0() {
    writeWord(0xFFE0); // marker

    writeWord(16); // length

    writeByte(0x4A); // J

    writeByte(0x46); // F

    writeByte(0x49); // I

    writeByte(0x46); // F

    writeByte(0); // = "JFIF",'\0'

    writeByte(1); // versionhi

    writeByte(1); // versionlo

    writeByte(0); // xyunits

    writeWord(1); // xdensity

    writeWord(1); // ydensity

    writeByte(0); // thumbnwidth

    writeByte(0); // thumbnheight
  }

  function writeSOF0(width, height) {
    writeWord(0xFFC0); // marker

    writeWord(17); // length, truecolor YUV JPG

    writeByte(8); // precision

    writeWord(height);
    writeWord(width);
    writeByte(3); // nrofcomponents

    writeByte(1); // IdY

    writeByte(0x11); // HVY

    writeByte(0); // QTY

    writeByte(2); // IdU

    writeByte(0x11); // HVU

    writeByte(1); // QTU

    writeByte(3); // IdV

    writeByte(0x11); // HVV

    writeByte(1); // QTV
  }

  function writeDQT() {
    writeWord(0xFFDB); // marker

    writeWord(132); // length

    writeByte(0);

    for (var i = 0; i < 64; i++) {
      writeByte(YTable[i]);
    }

    writeByte(1);

    for (var j = 0; j < 64; j++) {
      writeByte(UVTable[j]);
    }
  }

  function writeDHT() {
    writeWord(0xFFC4); // marker

    writeWord(0x01A2); // length

    writeByte(0); // HTYDCinfo

    for (var i = 0; i < 16; i++) {
      writeByte(std_dc_luminance_nrcodes[i + 1]);
    }

    for (var j = 0; j <= 11; j++) {
      writeByte(std_dc_luminance_values[j]);
    }

    writeByte(0x10); // HTYACinfo

    for (var k = 0; k < 16; k++) {
      writeByte(std_ac_luminance_nrcodes[k + 1]);
    }

    for (var l = 0; l <= 161; l++) {
      writeByte(std_ac_luminance_values[l]);
    }

    writeByte(1); // HTUDCinfo

    for (var m = 0; m < 16; m++) {
      writeByte(std_dc_chrominance_nrcodes[m + 1]);
    }

    for (var n = 0; n <= 11; n++) {
      writeByte(std_dc_chrominance_values[n]);
    }

    writeByte(0x11); // HTUACinfo

    for (var o = 0; o < 16; o++) {
      writeByte(std_ac_chrominance_nrcodes[o + 1]);
    }

    for (var p = 0; p <= 161; p++) {
      writeByte(std_ac_chrominance_values[p]);
    }
  }

  function writeSOS() {
    writeWord(0xFFDA); // marker

    writeWord(12); // length

    writeByte(3); // nrofcomponents

    writeByte(1); // IdY

    writeByte(0); // HTY

    writeByte(2); // IdU

    writeByte(0x11); // HTU

    writeByte(3); // IdV

    writeByte(0x11); // HTV

    writeByte(0); // Ss

    writeByte(0x3f); // Se

    writeByte(0); // Bf
  }

  function processDU(CDU, fdtbl, DC, HTDC, HTAC) {
    var EOB = HTAC[0x00];
    var M16zeroes = HTAC[0xF0];
    var pos;
    var I16 = 16;
    var I63 = 63;
    var I64 = 64;
    var DU_DCT = fDCTQuant(CDU, fdtbl); //ZigZag reorder

    for (var j = 0; j < I64; ++j) {
      DU[ZigZag[j]] = DU_DCT[j];
    }

    var Diff = DU[0] - DC;
    DC = DU[0]; //Encode DC

    if (Diff == 0) {
      writeBits(HTDC[0]); // Diff might be 0
    } else {
      pos = 32767 + Diff;
      writeBits(HTDC[category[pos]]);
      writeBits(bitcode[pos]);
    } //Encode ACs


    var end0pos = 63; // was const... which is crazy

    while (end0pos > 0 && DU[end0pos] == 0) {
      end0pos--;
    } //end0pos = first element in reverse order !=0


    if (end0pos == 0) {
      writeBits(EOB);
      return DC;
    }

    var i = 1;
    var lng;

    while (i <= end0pos) {
      var startpos = i;

      while (DU[i] == 0 && i <= end0pos) {
        ++i;
      }

      var nrzeroes = i - startpos;

      if (nrzeroes >= I16) {
        lng = nrzeroes >> 4;

        for (var nrmarker = 1; nrmarker <= lng; ++nrmarker) {
          writeBits(M16zeroes);
        }

        nrzeroes = nrzeroes & 0xF;
      }

      pos = 32767 + DU[i];
      writeBits(HTAC[(nrzeroes << 4) + category[pos]]);
      writeBits(bitcode[pos]);
      i++;
    }

    if (end0pos != I63) {
      writeBits(EOB);
    }

    return DC;
  }

  function initCharLookupTable() {
    var sfcc = String.fromCharCode;

    for (var i = 0; i < 256; i++) {
      ///// ACHTUNG // 255
      clt[i] = sfcc(i);
    }
  }

  this.encode = function (image, quality) // image data object
  {
    if (quality) { setQuality(quality); } // Initialize bit writer

    byteout = new Array();
    bytenew = 0;
    bytepos = 7; // Add JPEG headers

    writeWord(0xFFD8); // SOI

    writeAPP0();
    writeDQT();
    writeSOF0(image.width, image.height);
    writeDHT();
    writeSOS(); // Encode 8x8 macroblocks

    var DCY = 0;
    var DCU = 0;
    var DCV = 0;
    bytenew = 0;
    bytepos = 7;
    this.encode.displayName = "_encode_";
    var imageData = image.data;
    var width = image.width;
    var height = image.height;
    var quadWidth = width * 4;
    var x,
        y = 0;
    var r, g, b;
    var start, p, col, row, pos;

    while (y < height) {
      x = 0;

      while (x < quadWidth) {
        start = quadWidth * y + x;
        col = -1;
        row = 0;

        for (pos = 0; pos < 64; pos++) {
          row = pos >> 3; // /8

          col = (pos & 7) * 4; // %8

          p = start + row * quadWidth + col;

          if (y + row >= height) {
            // padding bottom
            p -= quadWidth * (y + 1 + row - height);
          }

          if (x + col >= quadWidth) {
            // padding right	
            p -= x + col - quadWidth + 4;
          }

          r = imageData[p++];
          g = imageData[p++];
          b = imageData[p++];
          /* // calculate YUV values dynamically
          YDU[pos]=((( 0.29900)*r+( 0.58700)*g+( 0.11400)*b))-128; //-0x80
          UDU[pos]=(((-0.16874)*r+(-0.33126)*g+( 0.50000)*b));
          VDU[pos]=((( 0.50000)*r+(-0.41869)*g+(-0.08131)*b));
          */
          // use lookup table (slightly faster)

          YDU[pos] = (RGB_YUV_TABLE[r] + RGB_YUV_TABLE[g + 256 >> 0] + RGB_YUV_TABLE[b + 512 >> 0] >> 16) - 128;
          UDU[pos] = (RGB_YUV_TABLE[r + 768 >> 0] + RGB_YUV_TABLE[g + 1024 >> 0] + RGB_YUV_TABLE[b + 1280 >> 0] >> 16) - 128;
          VDU[pos] = (RGB_YUV_TABLE[r + 1280 >> 0] + RGB_YUV_TABLE[g + 1536 >> 0] + RGB_YUV_TABLE[b + 1792 >> 0] >> 16) - 128;
        }

        DCY = processDU(YDU, fdtbl_Y, DCY, YDC_HT, YAC_HT);
        DCU = processDU(UDU, fdtbl_UV, DCU, UVDC_HT, UVAC_HT);
        DCV = processDU(VDU, fdtbl_UV, DCV, UVDC_HT, UVAC_HT);
        x += 32;
      }

      y += 8;
    } ////////////////////////////////////////////////////////////////
    // Do the bit alignment of the EOI marker


    if (bytepos >= 0) {
      var fillbits = [];
      fillbits[1] = bytepos + 1;
      fillbits[0] = (1 << bytepos + 1) - 1;
      writeBits(fillbits);
    }

    writeWord(0xFFD9); //EOI

    return new Uint8Array(byteout);
  };

  function setQuality(quality) {
    quality = Math.min(Math.max(quality, 1), 100);
    if (currentQuality == quality) { return; } // don't recalc if unchanged

    var sf = quality < 50 ? Math.floor(5000 / quality) : Math.floor(200 - quality * 2);
    initQuantTables(sf);
    currentQuality = quality; //console.log('Quality set to: '+quality +'%');
  }

  function init() {
    quality = quality || 50; // Create tables

    initCharLookupTable();
    initHuffmanTbl();
    initCategoryNumber();
    initRGBYUVTable();
    setQuality(quality);
  }

  init();
} // eslint-disable-next-line no-empty


try {
  exports.JPEGEncoder = JPEGEncoder;
} catch (e) {} // CommonJS.

/**
 * @author shaozilee
 *
 * Bmp format decoder,support 1bit 4bit 8bit 24bit bmp
 *
 */
function BmpDecoder(buffer, is_with_alpha) {
  this.pos = 0;
  this.buffer = buffer;
  this.datav = new DataView(buffer.buffer);
  this.is_with_alpha = !!is_with_alpha;
  this.bottom_up = true;
  this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]);
  this.pos += 2;
  if (["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag) === -1) { throw new Error("Invalid BMP File"); }
  this.parseHeader();
  this.parseBGR();
}

BmpDecoder.prototype.parseHeader = function () {
  this.fileSize = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.reserved = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.offset = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.headerSize = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.width = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.height = this.datav.getInt32(this.pos, true);
  this.pos += 4;
  this.planes = this.datav.getUint16(this.pos, true);
  this.pos += 2;
  this.bitPP = this.datav.getUint16(this.pos, true);
  this.pos += 2;
  this.compress = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.rawSize = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.hr = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.vr = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.colors = this.datav.getUint32(this.pos, true);
  this.pos += 4;
  this.importantColors = this.datav.getUint32(this.pos, true);
  this.pos += 4;

  if (this.bitPP === 16 && this.is_with_alpha) {
    this.bitPP = 15;
  }

  if (this.bitPP < 15) {
    var len = this.colors === 0 ? 1 << this.bitPP : this.colors;
    this.palette = new Array(len);

    for (var i = 0; i < len; i++) {
      var blue = this.datav.getUint8(this.pos++, true);
      var green = this.datav.getUint8(this.pos++, true);
      var red = this.datav.getUint8(this.pos++, true);
      var quad = this.datav.getUint8(this.pos++, true);
      this.palette[i] = {
        red: red,
        green: green,
        blue: blue,
        quad: quad
      };
    }
  }

  if (this.height < 0) {
    this.height *= -1;
    this.bottom_up = false;
  }
};

BmpDecoder.prototype.parseBGR = function () {
  this.pos = this.offset;

  try {
    var bitn = "bit" + this.bitPP;
    var len = this.width * this.height * 4;
    this.data = new Uint8Array(len);
    this[bitn]();
  } catch (e) {
    console.log("bit decode error:" + e);
  }
};

BmpDecoder.prototype.bit1 = function () {
  var xlen = Math.ceil(this.width / 8);
  var mode = xlen % 4;
  var y;

  for (y = this.height - 1; y >= 0; y--) {
    var line = this.bottom_up ? y : this.height - 1 - y;

    for (var x = 0; x < xlen; x++) {
      var b = this.datav.getUint8(this.pos++, true);
      var location = line * this.width * 4 + x * 8 * 4;

      for (var i = 0; i < 8; i++) {
        if (x * 8 + i < this.width) {
          var rgb = this.palette[b >> 7 - i & 0x1];
          this.data[location + i * 4] = rgb.blue;
          this.data[location + i * 4 + 1] = rgb.green;
          this.data[location + i * 4 + 2] = rgb.red;
          this.data[location + i * 4 + 3] = 0xFF;
        } else {
          break;
        }
      }
    }

    if (mode !== 0) {
      this.pos += 4 - mode;
    }
  }
};

BmpDecoder.prototype.bit4 = function () {
  var xlen = Math.ceil(this.width / 2);
  var mode = xlen % 4;

  for (var y = this.height - 1; y >= 0; y--) {
    var line = this.bottom_up ? y : this.height - 1 - y;

    for (var x = 0; x < xlen; x++) {
      var b = this.datav.getUint8(this.pos++, true);
      var location = line * this.width * 4 + x * 2 * 4;
      var before = b >> 4;
      var after = b & 0x0F;
      var rgb = this.palette[before];
      this.data[location] = rgb.blue;
      this.data[location + 1] = rgb.green;
      this.data[location + 2] = rgb.red;
      this.data[location + 3] = 0xFF;
      if (x * 2 + 1 >= this.width) { break; }
      rgb = this.palette[after];
      this.data[location + 4] = rgb.blue;
      this.data[location + 4 + 1] = rgb.green;
      this.data[location + 4 + 2] = rgb.red;
      this.data[location + 4 + 3] = 0xFF;
    }

    if (mode !== 0) {
      this.pos += 4 - mode;
    }
  }
};

BmpDecoder.prototype.bit8 = function () {
  var mode = this.width % 4;

  for (var y = this.height - 1; y >= 0; y--) {
    var line = this.bottom_up ? y : this.height - 1 - y;

    for (var x = 0; x < this.width; x++) {
      var b = this.datav.getUint8(this.pos++, true);
      var location = line * this.width * 4 + x * 4;

      if (b < this.palette.length) {
        var rgb = this.palette[b];
        this.data[location] = rgb.red;
        this.data[location + 1] = rgb.green;
        this.data[location + 2] = rgb.blue;
        this.data[location + 3] = 0xFF;
      } else {
        this.data[location] = 0xFF;
        this.data[location + 1] = 0xFF;
        this.data[location + 2] = 0xFF;
        this.data[location + 3] = 0xFF;
      }
    }

    if (mode !== 0) {
      this.pos += 4 - mode;
    }
  }
};

BmpDecoder.prototype.bit15 = function () {
  var dif_w = this.width % 3;

  var _11111 = parseInt("11111", 2),
      _1_5 = _11111;

  for (var y = this.height - 1; y >= 0; y--) {
    var line = this.bottom_up ? y : this.height - 1 - y;

    for (var x = 0; x < this.width; x++) {
      var B = this.datav.getUint16(this.pos, true);
      this.pos += 2;
      var blue = (B & _1_5) / _1_5 * 255 | 0;
      var green = (B >> 5 & _1_5) / _1_5 * 255 | 0;
      var red = (B >> 10 & _1_5) / _1_5 * 255 | 0;
      var alpha = B >> 15 ? 0xFF : 0x00;
      var location = line * this.width * 4 + x * 4;
      this.data[location] = red;
      this.data[location + 1] = green;
      this.data[location + 2] = blue;
      this.data[location + 3] = alpha;
    } //skip extra bytes


    this.pos += dif_w;
  }
};

BmpDecoder.prototype.bit16 = function () {
  var dif_w = this.width % 3;

  var _11111 = parseInt("11111", 2),
      _1_5 = _11111;

  var _111111 = parseInt("111111", 2),
      _1_6 = _111111;

  for (var y = this.height - 1; y >= 0; y--) {
    var line = this.bottom_up ? y : this.height - 1 - y;

    for (var x = 0; x < this.width; x++) {
      var B = this.datav.getUint16(this.pos, true);
      this.pos += 2;
      var alpha = 0xFF;
      var blue = (B & _1_5) / _1_5 * 255 | 0;
      var green = (B >> 5 & _1_6) / _1_6 * 255 | 0;
      var red = (B >> 11) / _1_5 * 255 | 0;
      var location = line * this.width * 4 + x * 4;
      this.data[location] = red;
      this.data[location + 1] = green;
      this.data[location + 2] = blue;
      this.data[location + 3] = alpha;
    } //skip extra bytes


    this.pos += dif_w;
  }
};

BmpDecoder.prototype.bit24 = function () {
  //when height > 0
  for (var y = this.height - 1; y >= 0; y--) {
    var line = this.bottom_up ? y : this.height - 1 - y;

    for (var x = 0; x < this.width; x++) {
      var blue = this.datav.getUint8(this.pos++, true);
      var green = this.datav.getUint8(this.pos++, true);
      var red = this.datav.getUint8(this.pos++, true);
      var location = line * this.width * 4 + x * 4;
      this.data[location] = red;
      this.data[location + 1] = green;
      this.data[location + 2] = blue;
      this.data[location + 3] = 0xFF;
    } //skip extra bytes


    this.pos += this.width % 4;
  }
};
/**
 * add 32bit decode func
 * @author soubok
 */


BmpDecoder.prototype.bit32 = function () {
  //when height > 0
  for (var y = this.height - 1; y >= 0; y--) {
    var line = this.bottom_up ? y : this.height - 1 - y;

    for (var x = 0; x < this.width; x++) {
      var blue = this.datav.getUint8(this.pos++, true);
      var green = this.datav.getUint8(this.pos++, true);
      var red = this.datav.getUint8(this.pos++, true);
      var alpha = this.datav.getUint8(this.pos++, true);
      var location = line * this.width * 4 + x * 4;
      this.data[location] = red;
      this.data[location + 1] = green;
      this.data[location + 2] = blue;
      this.data[location + 3] = alpha;
    } //skip extra bytes
    //this.pos += (this.width % 4);

  }
};

BmpDecoder.prototype.getData = function () {
  return this.data;
}; // eslint-disable-next-line no-empty


try {
  exports.BmpDecoder = BmpDecoder;
} catch (e) {} // CommonJS.

function WebPDecoder(imageData) {
  var UpsampleRgbLinePair, UpsampleBgrLinePair, UpsampleRgbaLinePair, UpsampleBgraLinePair, UpsampleArgbLinePair, UpsampleArgbLinePair, UpsampleRgba4444LinePair, UpsampleRgb565LinePair;

  function x(F) {
    if (!F) { throw Error("assert :P"); }
  }

  function fa(F, L, J) {
    for (var H = 0; 4 > H; H++) {
      if (F[L + H] != J.charCodeAt(H)) { return !0; }
    }

    return !1;
  }

  function I(F, L, J, H, Z) {
    for (var O = 0; O < Z; O++) {
      F[L + O] = J[H + O];
    }
  }

  function M(F, L, J, H) {
    for (var Z = 0; Z < H; Z++) {
      F[L + Z] = J;
    }
  }

  function V(F) {
    return new Int32Array(F);
  }

  function wa(F, L) {
    for (var J = [], H = 0; H < F; H++) {
      J.push(new L());
    }

    return J;
  }

  function wb() {
    function F(J, H, Z) {
      for (var O = Z[H], L = 0; L < O; L++) {
        J.push(Z.length > H + 1 ? [] : 0);
        if (Z.length < H + 1) { break; }
        F(J[L], H + 1, Z);
      }
    }

    var L = [];
    F(L, 0, [3, 11]);
    return L;
  }

  function Ed(F, L) {
    function J(H, O, F) {
      for (var Z = F[O], ma = 0; ma < Z; ma++) {
        H.push(F.length > O + 1 ? [] : new L());
        if (F.length < O + 1) { break; }
        J(H[ma], O + 1, F);
      }
    }

    var H = [];
    J(H, 0, F);
    return H;
  }

  WebPDecoder = function WebPDecoder() {
    var self = this;

    function L(a, b) {
      for (var c = 1 << b - 1 >>> 0; a & c;) {
        c >>>= 1;
      }

      return c ? (a & c - 1) + c : a;
    }

    function J(a, b, c, d, e) {
      x(!(d % c));

      do {
        d -= c, a[b + d] = e;
      } while (0 < d);
    }

    function H(a, b, c, d, e, f) {
      var g = b,
          h = 1 << c,
          k,
          l,
          m = V(16),
          n = V(16);
      x(0 != e);
      x(null != d);
      x(null != a);
      x(0 < c);

      for (l = 0; l < e; ++l) {
        if (15 < d[l]) { return 0; }
        ++m[d[l]];
      }

      if (m[0] == e) { return 0; }
      n[1] = 0;

      for (k = 1; 15 > k; ++k) {
        if (m[k] > 1 << k) { return 0; }
        n[k + 1] = n[k] + m[k];
      }

      for (l = 0; l < e; ++l) {
        k = d[l], 0 < d[l] && (f[n[k]++] = l);
      }

      if (1 == n[15]) { return d = new O(), d.g = 0, d.value = f[0], J(a, g, 1, h, d), h; }
      var r = -1,
          q = h - 1,
          t = 0,
          v = 1,
          p = 1,
          u,
          w = 1 << c;
      l = 0;
      k = 1;

      for (e = 2; k <= c; ++k, e <<= 1) {
        p <<= 1;
        v += p;
        p -= m[k];
        if (0 > p) { return 0; }

        for (; 0 < m[k]; --m[k]) {
          d = new O(), d.g = k, d.value = f[l++], J(a, g + t, e, w, d), t = L(t, k);
        }
      }

      k = c + 1;

      for (e = 2; 15 >= k; ++k, e <<= 1) {
        p <<= 1;
        v += p;
        p -= m[k];
        if (0 > p) { return 0; }

        for (; 0 < m[k]; --m[k]) {
          d = new O();

          if ((t & q) != r) {
            g += w;
            r = k;

            for (u = 1 << r - c; 15 > r;) {
              u -= m[r];
              if (0 >= u) { break; }
              ++r;
              u <<= 1;
            }

            u = r - c;
            w = 1 << u;
            h += w;
            r = t & q;
            a[b + r].g = u + c;
            a[b + r].value = g - b - r;
          }

          d.g = k - c;
          d.value = f[l++];
          J(a, g + (t >> c), e, w, d);
          t = L(t, k);
        }
      }

      return v != 2 * n[15] - 1 ? 0 : h;
    }

    function Z(a, b, c, d, e) {
      x(2328 >= e);
      if (512 >= e) { var f = V(512); }else if (f = V(e), null == f) { return 0; }
      return H(a, b, c, d, e, f);
    }

    function O() {
      this.value = this.g = 0;
    }

    function Fd() {
      this.value = this.g = 0;
    }

    function Ub() {
      this.G = wa(5, O);
      this.H = V(5);
      this.jc = this.Qb = this.qb = this.nd = 0;
      this.pd = wa(xb, Fd);
    }

    function ma(a, b, c, d) {
      x(null != a);
      x(null != b);
      x(2147483648 > d);
      a.Ca = 254;
      a.I = 0;
      a.b = -8;
      a.Ka = 0;
      a.oa = b;
      a.pa = c;
      a.Jd = b;
      a.Yc = c + d;
      a.Zc = 4 <= d ? c + d - 4 + 1 : c;
      Qa(a);
    }

    function na(a, b) {
      for (var c = 0; 0 < b--;) {
        c |= K(a, 128) << b;
      }

      return c;
    }

    function ca(a, b) {
      var c = na(a, b);
      return G(a) ? -c : c;
    }

    function cb(a, b, c, d) {
      var e,
          f = 0;
      x(null != a);
      x(null != b);
      x(4294967288 > d);
      a.Sb = d;
      a.Ra = 0;
      a.u = 0;
      a.h = 0;
      4 < d && (d = 4);

      for (e = 0; e < d; ++e) {
        f += b[c + e] << 8 * e;
      }

      a.Ra = f;
      a.bb = d;
      a.oa = b;
      a.pa = c;
    }

    function Vb(a) {
      for (; 8 <= a.u && a.bb < a.Sb;) {
        a.Ra >>>= 8, a.Ra += a.oa[a.pa + a.bb] << ob - 8 >>> 0, ++a.bb, a.u -= 8;
      }

      db(a) && (a.h = 1, a.u = 0);
    }

    function D(a, b) {
      x(0 <= b);

      if (!a.h && b <= Gd) {
        var c = pb(a) & Hd[b];
        a.u += b;
        Vb(a);
        return c;
      }

      a.h = 1;
      return a.u = 0;
    }

    function Wb() {
      this.b = this.Ca = this.I = 0;
      this.oa = [];
      this.pa = 0;
      this.Jd = [];
      this.Yc = 0;
      this.Zc = [];
      this.Ka = 0;
    }

    function Ra() {
      this.Ra = 0;
      this.oa = [];
      this.h = this.u = this.bb = this.Sb = this.pa = 0;
    }

    function pb(a) {
      return a.Ra >>> (a.u & ob - 1) >>> 0;
    }

    function db(a) {
      x(a.bb <= a.Sb);
      return a.h || a.bb == a.Sb && a.u > ob;
    }

    function qb(a, b) {
      a.u = b;
      a.h = db(a);
    }

    function Sa(a) {
      a.u >= Xb && (x(a.u >= Xb), Vb(a));
    }

    function Qa(a) {
      x(null != a && null != a.oa);
      a.pa < a.Zc ? (a.I = (a.oa[a.pa++] | a.I << 8) >>> 0, a.b += 8) : (x(null != a && null != a.oa), a.pa < a.Yc ? (a.b += 8, a.I = a.oa[a.pa++] | a.I << 8) : a.Ka ? a.b = 0 : (a.I <<= 8, a.b += 8, a.Ka = 1));
    }

    function G(a) {
      return na(a, 1);
    }

    function K(a, b) {
      var c = a.Ca;
      0 > a.b && Qa(a);
      var d = a.b,
          e = c * b >>> 8,
          f = (a.I >>> d > e) + 0;
      f ? (c -= e, a.I -= e + 1 << d >>> 0) : c = e + 1;
      d = c;

      for (e = 0; 256 <= d;) {
        e += 8, d >>= 8;
      }

      d = 7 ^ e + Id[d];
      a.b -= d;
      a.Ca = (c << d) - 1;
      return f;
    }

    function ra(a, b, c) {
      a[b + 0] = c >> 24 & 255;
      a[b + 1] = c >> 16 & 255;
      a[b + 2] = c >> 8 & 255;
      a[b + 3] = c >> 0 & 255;
    }

    function Ta(a, b) {
      return a[b + 0] << 0 | a[b + 1] << 8;
    }

    function Yb(a, b) {
      return Ta(a, b) | a[b + 2] << 16;
    }

    function Ha(a, b) {
      return Ta(a, b) | Ta(a, b + 2) << 16;
    }

    function Zb(a, b) {
      var c = 1 << b;
      x(null != a);
      x(0 < b);
      a.X = V(c);
      if (null == a.X) { return 0; }
      a.Mb = 32 - b;
      a.Xa = b;
      return 1;
    }

    function $b(a, b) {
      x(null != a);
      x(null != b);
      x(a.Xa == b.Xa);
      I(b.X, 0, a.X, 0, 1 << b.Xa);
    }

    function ac() {
      this.X = [];
      this.Xa = this.Mb = 0;
    }

    function bc(a, b, c, d) {
      x(null != c);
      x(null != d);
      var e = c[0],
          f = d[0];
      0 == e && (e = (a * f + b / 2) / b);
      0 == f && (f = (b * e + a / 2) / a);
      if (0 >= e || 0 >= f) { return 0; }
      c[0] = e;
      d[0] = f;
      return 1;
    }

    function xa(a, b) {
      return a + (1 << b) - 1 >>> b;
    }

    function yb(a, b) {
      return ((a & 4278255360) + (b & 4278255360) >>> 0 & 4278255360) + ((a & 16711935) + (b & 16711935) >>> 0 & 16711935) >>> 0;
    }

    function X(a, b) {
      self[b] = function (b, d, e, f, g, h, k) {
        var c;

        for (c = 0; c < g; ++c) {
          var m = self[a](h[k + c - 1], e, f + c);
          h[k + c] = yb(b[d + c], m);
        }
      };
    }

    function Jd() {
      this.ud = this.hd = this.jd = 0;
    }

    function aa(a, b) {
      return (((a ^ b) & 4278124286) >>> 1) + (a & b) >>> 0;
    }

    function sa(a) {
      if (0 <= a && 256 > a) { return a; }
      if (0 > a) { return 0; }
      if (255 < a) { return 255; }
    }

    function eb(a, b) {
      return sa(a + (a - b + .5 >> 1));
    }

    function Ia(a, b, c) {
      return Math.abs(b - c) - Math.abs(a - c);
    }

    function cc(a, b, c, d, e, f, g) {
      d = f[g - 1];

      for (c = 0; c < e; ++c) {
        f[g + c] = d = yb(a[b + c], d);
      }
    }

    function Kd(a, b, c, d, e) {
      var f;

      for (f = 0; f < c; ++f) {
        var g = a[b + f],
            h = g >> 8 & 255,
            k = g & 16711935,
            k = k + ((h << 16) + h),
            k = k & 16711935;
        d[e + f] = (g & 4278255360) + k >>> 0;
      }
    }

    function dc(a, b) {
      b.jd = a >> 0 & 255;
      b.hd = a >> 8 & 255;
      b.ud = a >> 16 & 255;
    }

    function Ld(a, b, c, d, e, f) {
      var g;

      for (g = 0; g < d; ++g) {
        var h = b[c + g],
            k = h >>> 8,
            l = h >>> 16,
            m = h,
            l = l + ((a.jd << 24 >> 24) * (k << 24 >> 24) >>> 5),
            l = l & 255,
            m = m + ((a.hd << 24 >> 24) * (k << 24 >> 24) >>> 5),
            m = m + ((a.ud << 24 >> 24) * (l << 24 >> 24) >>> 5),
            m = m & 255;
        e[f + g] = (h & 4278255360) + (l << 16) + m;
      }
    }

    function ec(a, b, c, d, e) {
      self[b] = function (a, b, c, k, l, m, n, r, q) {
        for (k = n; k < r; ++k) {
          for (n = 0; n < q; ++n) {
            l[m++] = e(c[d(a[b++])]);
          }
        }
      };

      self[a] = function (a, b, h, k, l, m, n) {
        var f = 8 >> a.b,
            g = a.Ea,
            t = a.K[0],
            v = a.w;
        if (8 > f) { for (a = (1 << a.b) - 1, v = (1 << f) - 1; b < h; ++b) {
          var p = 0,
              u;

          for (u = 0; u < g; ++u) {
            u & a || (p = d(k[l++])), m[n++] = e(t[p & v]), p >>= f;
          }
        } } else { self["VP8LMapColor" + c](k, l, t, v, m, n, b, h, g); }
      };
    }

    function Md(a, b, c, d, e) {
      for (c = b + c; b < c;) {
        var f = a[b++];
        d[e++] = f >> 16 & 255;
        d[e++] = f >> 8 & 255;
        d[e++] = f >> 0 & 255;
      }
    }

    function Nd(a, b, c, d, e) {
      for (c = b + c; b < c;) {
        var f = a[b++];
        d[e++] = f >> 16 & 255;
        d[e++] = f >> 8 & 255;
        d[e++] = f >> 0 & 255;
        d[e++] = f >> 24 & 255;
      }
    }

    function Od(a, b, c, d, e) {
      for (c = b + c; b < c;) {
        var f = a[b++],
            g = f >> 16 & 240 | f >> 12 & 15,
            f = f >> 0 & 240 | f >> 28 & 15;
        d[e++] = g;
        d[e++] = f;
      }
    }

    function Pd(a, b, c, d, e) {
      for (c = b + c; b < c;) {
        var f = a[b++],
            g = f >> 16 & 248 | f >> 13 & 7,
            f = f >> 5 & 224 | f >> 3 & 31;
        d[e++] = g;
        d[e++] = f;
      }
    }

    function Qd(a, b, c, d, e) {
      for (c = b + c; b < c;) {
        var f = a[b++];
        d[e++] = f >> 0 & 255;
        d[e++] = f >> 8 & 255;
        d[e++] = f >> 16 & 255;
      }
    }

    function fb(a, b, c, d, e, f) {
      if (0 == f) { for (c = b + c; b < c;) {
        f = a[b++], ra(d, (f[0] >> 24 | f[1] >> 8 & 65280 | f[2] << 8 & 16711680 | f[3] << 24) >>> 0), e += 32;
      } } else { I(d, e, a, b, c); }
    }

    function gb(a, b) {
      self[b][0] = self[a + "0"];
      self[b][1] = self[a + "1"];
      self[b][2] = self[a + "2"];
      self[b][3] = self[a + "3"];
      self[b][4] = self[a + "4"];
      self[b][5] = self[a + "5"];
      self[b][6] = self[a + "6"];
      self[b][7] = self[a + "7"];
      self[b][8] = self[a + "8"];
      self[b][9] = self[a + "9"];
      self[b][10] = self[a + "10"];
      self[b][11] = self[a + "11"];
      self[b][12] = self[a + "12"];
      self[b][13] = self[a + "13"];
      self[b][14] = self[a + "0"];
      self[b][15] = self[a + "0"];
    }

    function hb(a) {
      return a == zb || a == Ab || a == Ja || a == Bb;
    }

    function Rd() {
      this.eb = [];
      this.size = this.A = this.fb = 0;
    }

    function Sd() {
      this.y = [];
      this.f = [];
      this.ea = [];
      this.F = [];
      this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
    }

    function Cb() {
      this.Rd = this.height = this.width = this.S = 0;
      this.f = {};
      this.f.RGBA = new Rd();
      this.f.kb = new Sd();
      this.sd = null;
    }

    function Td() {
      this.width = [0];
      this.height = [0];
      this.Pd = [0];
      this.Qd = [0];
      this.format = [0];
    }

    function Ud() {
      this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
    }

    function Vd(a) {
      alert("todo:WebPSamplerProcessPlane");
      return a.T;
    }

    function Wd(a, b) {
      var c = a.T,
          d = b.ba.f.RGBA,
          e = d.eb,
          f = d.fb + a.ka * d.A,
          g = P[b.ba.S],
          h = a.y,
          k = a.O,
          l = a.f,
          m = a.N,
          n = a.ea,
          r = a.W,
          q = b.cc,
          t = b.dc,
          v = b.Mc,
          p = b.Nc,
          u = a.ka,
          w = a.ka + a.T,
          y = a.U,
          A = y + 1 >> 1;
      0 == u ? g(h, k, null, null, l, m, n, r, l, m, n, r, e, f, null, null, y) : (g(b.ec, b.fc, h, k, q, t, v, p, l, m, n, r, e, f - d.A, e, f, y), ++c);

      for (; u + 2 < w; u += 2) {
        q = l, t = m, v = n, p = r, m += a.Rc, r += a.Rc, f += 2 * d.A, k += 2 * a.fa, g(h, k - a.fa, h, k, q, t, v, p, l, m, n, r, e, f - d.A, e, f, y);
      }

      k += a.fa;
      a.j + w < a.o ? (I(b.ec, b.fc, h, k, y), I(b.cc, b.dc, l, m, A), I(b.Mc, b.Nc, n, r, A), c--) : w & 1 || g(h, k, null, null, l, m, n, r, l, m, n, r, e, f + d.A, null, null, y);
      return c;
    }

    function Xd(a, b, c) {
      var d = a.F,
          e = [a.J];

      if (null != d) {
        var f = a.U,
            g = b.ba.S,
            h = g == ya || g == Ja;
        b = b.ba.f.RGBA;
        var k = [0],
            l = a.ka;
        k[0] = a.T;
        a.Kb && (0 == l ? --k[0] : (--l, e[0] -= a.width), a.j + a.ka + a.T == a.o && (k[0] = a.o - a.j - l));
        var m = b.eb,
            l = b.fb + l * b.A;
        a = fc(d, e[0], a.width, f, k, m, l + (h ? 0 : 3), b.A);
        x(c == k);
        a && hb(g) && za(m, l, h, f, k, b.A);
      }

      return 0;
    }

    function gc(a) {
      var b = a.ma,
          c = b.ba.S,
          d = 11 > c,
          e = c == Ua || c == Va || c == ya || c == Db || 12 == c || hb(c);
      b.memory = null;
      b.Ib = null;
      b.Jb = null;
      b.Nd = null;
      if (!hc(b.Oa, a, e ? 11 : 12)) { return 0; }
      e && hb(c) && ic();
      if (a.da) { alert("todo:use_scaling"); }else {
        if (d) {
          if (b.Ib = Vd, a.Kb) {
            c = a.U + 1 >> 1;
            b.memory = V(a.U + 2 * c);
            if (null == b.memory) { return 0; }
            b.ec = b.memory;
            b.fc = 0;
            b.cc = b.ec;
            b.dc = b.fc + a.U;
            b.Mc = b.cc;
            b.Nc = b.dc + c;
            b.Ib = Wd;
            ic();
          }
        } else { alert("todo:EmitYUV"); }

        e && (b.Jb = Xd, d && Aa());
      }

      if (d && !jc) {
        for (a = 0; 256 > a; ++a) {
          Yd[a] = 89858 * (a - 128) + Ba >> Wa, Zd[a] = -22014 * (a - 128) + Ba, $d[a] = -45773 * (a - 128), ae[a] = 113618 * (a - 128) + Ba >> Wa;
        }

        for (a = ta; a < Eb; ++a) {
          b = 76283 * (a - 16) + Ba >> Wa, be[a - ta] = ga(b, 255), ce[a - ta] = ga(b + 8 >> 4, 15);
        }

        jc = 1;
      }

      return 1;
    }

    function kc(a) {
      var b = a.ma,
          c = a.U,
          d = a.T;
      x(!(a.ka & 1));
      if (0 >= c || 0 >= d) { return 0; }
      c = b.Ib(a, b);
      null != b.Jb && b.Jb(a, b, c);
      b.Dc += c;
      return 1;
    }

    function lc(a) {
      a.ma.memory = null;
    }

    function mc(a, b, c, d) {
      if (47 != D(a, 8)) { return 0; }
      b[0] = D(a, 14) + 1;
      c[0] = D(a, 14) + 1;
      d[0] = D(a, 1);
      return 0 != D(a, 3) ? 0 : !a.h;
    }

    function ib(a, b) {
      if (4 > a) { return a + 1; }
      var c = a - 2 >> 1;
      return (2 + (a & 1) << c) + D(b, c) + 1;
    }

    function nc(a, b) {
      if (120 < b) { return b - 120; }
      var c = de[b - 1],
          c = (c >> 4) * a + (8 - (c & 15));
      return 1 <= c ? c : 1;
    }

    function ua(a, b, c) {
      var d = pb(c);
      b += d & 255;
      var e = a[b].g - 8;
      0 < e && (qb(c, c.u + 8), d = pb(c), b += a[b].value, b += d & (1 << e) - 1);
      qb(c, c.u + a[b].g);
      return a[b].value;
    }

    function ub(a, b, c) {
      c.g += a.g;
      c.value += a.value << b >>> 0;
      x(8 >= c.g);
      return a.g;
    }

    function ha(a, b, c) {
      var d = a.xc;
      b = 0 == d ? 0 : a.vc[a.md * (c >> d) + (b >> d)];
      x(b < a.Wb);
      return a.Ya[b];
    }

    function oc(a, b, c, d) {
      var e = a.ab,
          f = a.c * b,
          g = a.C;
      b = g + b;
      var h = c,
          k = d;
      d = a.Ta;

      for (c = a.Ua; 0 < e--;) {
        var l = a.gc[e],
            m = g,
            n = b,
            r = h,
            q = k,
            k = d,
            h = c,
            t = l.Ea;
        x(m < n);
        x(n <= l.nc);

        switch (l.hc) {
          case 2:
            pc(r, q, (n - m) * t, k, h);
            break;

          case 0:
            var v = l,
                p = m,
                u = n,
                w = k,
                y = h,
                A = v.Ea;
            0 == p && (ee(r, q, null, null, 1, w, y), cc(r, q + 1, 0, 0, A - 1, w, y + 1), q += A, y += A, ++p);

            for (var E = 1 << v.b, B = E - 1, C = xa(A, v.b), N = v.K, v = v.w + (p >> v.b) * C; p < u;) {
              var z = N,
                  Q = v,
                  S = 1;

              for (fe(r, q, w, y - A, 1, w, y); S < A;) {
                var K = qc[z[Q++] >> 8 & 15],
                    D = (S & ~B) + E;
                D > A && (D = A);
                K(r, q + +S, w, y + S - A, D - S, w, y + S);
                S = D;
              }

              q += A;
              y += A;
              ++p;
              p & B || (v += C);
            }

            n != l.nc && I(k, h - t, k, h + (n - m - 1) * t, t);
            break;

          case 1:
            t = r;
            u = q;
            r = l.Ea;
            q = 1 << l.b;
            w = q - 1;
            y = r & ~w;
            A = r - y;
            p = xa(r, l.b);
            E = l.K;

            for (l = l.w + (m >> l.b) * p; m < n;) {
              B = E;
              C = l;
              N = new Jd();
              v = u + y;

              for (z = u + r; u < v;) {
                dc(B[C++], N), Fb(N, t, u, q, k, h), u += q, h += q;
              }

              u < z && (dc(B[C++], N), Fb(N, t, u, A, k, h), u += A, h += A);
              ++m;
              m & w || (l += p);
            }

            break;

          case 3:
            if (r == k && q == h && 0 < l.b) {
              y = (n - m) * xa(l.Ea, l.b);
              t = h + (n - m) * t - y;
              u = k;
              r = t;
              q = k;
              w = h;
              A = y;
              p = [];

              for (y = A - 1; 0 <= y; --y) {
                p[y] = q[w + y];
              }

              for (y = A - 1; 0 <= y; --y) {
                u[r + y] = p[y];
              }

              rc(l, m, n, k, t, k, h);
            } else { rc(l, m, n, r, q, k, h); }

        }

        h = d;
        k = c;
      }

      k != c && I(d, c, h, k, f);
    }

    function ge(a, b) {
      var c = a.V,
          d = a.Ba + a.c * a.C,
          e = b - a.C;
      x(b <= a.l.o);
      x(16 >= e);

      if (0 < e) {
        var f = a.l,
            g = a.Ta,
            h = a.Ua,
            k = f.width;
        oc(a, e, c, d);
        h = [h];
        c = a.C;
        d = b;
        e = h;
        x(c < d);
        x(f.v < f.va);
        d > f.o && (d = f.o);

        if (c < f.j) {
          var l = f.j - c,
              c = f.j;
          e[0] += l * k;
        }

        c >= d ? c = 0 : (e[0] += 4 * f.v, f.ka = c - f.j, f.U = f.va - f.v, f.T = d - c, c = 1);

        if (c) {
          h = h[0];
          c = a.ca;

          if (11 > c.S) {
            for (var m = c.f.RGBA, d = c.S, e = f.U, f = f.T, l = m.eb, n = m.A, r = f, m = m.fb + a.Ma * m.A; 0 < r--;) {
              var q = g,
                  t = h,
                  v = e,
                  p = l,
                  u = m;

              switch (d) {
                case Ca:
                  sc(q, t, v, p, u);
                  break;

                case Ua:
                  Gb(q, t, v, p, u);
                  break;

                case zb:
                  Gb(q, t, v, p, u);
                  za(p, u, 0, v, 1, 0);
                  break;

                case tc:
                  uc(q, t, v, p, u);
                  break;

                case Va:
                  fb(q, t, v, p, u, 1);
                  break;

                case Ab:
                  fb(q, t, v, p, u, 1);
                  za(p, u, 0, v, 1, 0);
                  break;

                case ya:
                  fb(q, t, v, p, u, 0);
                  break;

                case Ja:
                  fb(q, t, v, p, u, 0);
                  za(p, u, 1, v, 1, 0);
                  break;

                case Db:
                  Hb(q, t, v, p, u);
                  break;

                case Bb:
                  Hb(q, t, v, p, u);
                  vc(p, u, v, 1, 0);
                  break;

                case wc:
                  xc(q, t, v, p, u);
                  break;

                default:
                  x(0);
              }

              h += k;
              m += n;
            }

            a.Ma += f;
          } else { alert("todo:EmitRescaledRowsYUVA"); }

          x(a.Ma <= c.height);
        }
      }

      a.C = b;
      x(a.C <= a.i);
    }

    function yc(a) {
      var b;
      if (0 < a.ua) { return 0; }

      for (b = 0; b < a.Wb; ++b) {
        var c = a.Ya[b].G,
            d = a.Ya[b].H;
        if (0 < c[1][d[1] + 0].g || 0 < c[2][d[2] + 0].g || 0 < c[3][d[3] + 0].g) { return 0; }
      }

      return 1;
    }

    function zc(a, b, c, d, e, f) {
      if (0 != a.Z) {
        var g = a.qd,
            h = a.rd;

        for (x(null != ia[a.Z]); b < c; ++b) {
          ia[a.Z](g, h, d, e, d, e, f), g = d, h = e, e += f;
        }

        a.qd = g;
        a.rd = h;
      }
    }

    function Ib(a, b) {
      var c = a.l.ma,
          d = 0 == c.Z || 1 == c.Z ? a.l.j : a.C,
          d = a.C < d ? d : a.C;
      x(b <= a.l.o);

      if (b > d) {
        var e = a.l.width,
            f = c.ca,
            g = c.tb + e * d,
            h = a.V,
            k = a.Ba + a.c * d,
            l = a.gc;
        x(1 == a.ab);
        x(3 == l[0].hc);
        he(l[0], d, b, h, k, f, g);
        zc(c, d, b, f, g, e);
      }

      a.C = a.Ma = b;
    }

    function Jb(a, b, c, d, e, f, g) {
      var h = a.$ / d,
          k = a.$ % d,
          l = a.m,
          m = a.s,
          n = c + a.$,
          r = n;
      e = c + d * e;
      var q = c + d * f,
          t = 280 + m.ua,
          v = a.Pb ? h : 16777216,
          p = 0 < m.ua ? m.Wa : null,
          u = m.wc,
          w = n < q ? ha(m, k, h) : null;
      x(a.C < f);
      x(q <= e);
      var y = !1;

      a: for (;;) {
        for (; y || n < q;) {
          var A = 0;

          if (h >= v) {
            var v = a,
                E = n - c;
            x(v.Pb);
            v.wd = v.m;
            v.xd = E;
            0 < v.s.ua && $b(v.s.Wa, v.s.vb);
            v = h + ie;
          }

          k & u || (w = ha(m, k, h));
          x(null != w);
          w.Qb && (b[n] = w.qb, y = !0);
          if (!y) { if (Sa(l), w.jc) {
            var A = l,
                E = b,
                B = n,
                C = w.pd[pb(A) & xb - 1];
            x(w.jc);
            256 > C.g ? (qb(A, A.u + C.g), E[B] = C.value, A = 0) : (qb(A, A.u + C.g - 256), x(256 <= C.value), A = C.value);
            0 == A && (y = !0);
          } else { A = ua(w.G[0], w.H[0], l); } }
          if (l.h) { break; }

          if (y || 256 > A) {
            if (!y) { if (w.nd) { b[n] = (w.qb | A << 8) >>> 0; }else {
              Sa(l);
              y = ua(w.G[1], w.H[1], l);
              Sa(l);
              E = ua(w.G[2], w.H[2], l);
              B = ua(w.G[3], w.H[3], l);
              if (l.h) { break; }
              b[n] = (B << 24 | y << 16 | A << 8 | E) >>> 0;
            } }
            y = !1;
            ++n;
            ++k;
            if (k >= d && (k = 0, ++h, null != g && h <= f && !(h % 16) && g(a, h), null != p)) { for (; r < n;) {
              A = b[r++], p.X[(506832829 * A & 4294967295) >>> p.Mb] = A;
            } }
          } else if (280 > A) {
            A = ib(A - 256, l);
            E = ua(w.G[4], w.H[4], l);
            Sa(l);
            E = ib(E, l);
            E = nc(d, E);
            if (l.h) { break; }
            if (n - c < E || e - n < A) { break a; }else { for (B = 0; B < A; ++B) {
              b[n + B] = b[n + B - E];
            } }
            n += A;

            for (k += A; k >= d;) {
              k -= d, ++h, null != g && h <= f && !(h % 16) && g(a, h);
            }

            x(n <= e);
            k & u && (w = ha(m, k, h));
            if (null != p) { for (; r < n;) {
              A = b[r++], p.X[(506832829 * A & 4294967295) >>> p.Mb] = A;
            } }
          } else if (A < t) {
            y = A - 280;

            for (x(null != p); r < n;) {
              A = b[r++], p.X[(506832829 * A & 4294967295) >>> p.Mb] = A;
            }

            A = n;
            E = p;
            x(!(y >>> E.Xa));
            b[A] = E.X[y];
            y = !0;
          } else { break a; }

          y || x(l.h == db(l));
        }

        if (a.Pb && l.h && n < e) { x(a.m.h), a.a = 5, a.m = a.wd, a.$ = a.xd, 0 < a.s.ua && $b(a.s.vb, a.s.Wa); }else if (l.h) { break a; }else { null != g && g(a, h > f ? f : h), a.a = 0, a.$ = n - c; }
        return 1;
      }

      a.a = 3;
      return 0;
    }

    function Ac(a) {
      x(null != a);
      a.vc = null;
      a.yc = null;
      a.Ya = null;
      var b = a.Wa;
      null != b && (b.X = null);
      a.vb = null;
      x(null != a);
    }

    function Bc() {
      var a = new je();
      if (null == a) { return null; }
      a.a = 0;
      a.xb = Cc;
      gb("Predictor", "VP8LPredictors");
      gb("Predictor", "VP8LPredictors_C");
      gb("PredictorAdd", "VP8LPredictorsAdd");
      gb("PredictorAdd", "VP8LPredictorsAdd_C");
      pc = Kd;
      Fb = Ld;
      sc = Md;
      Gb = Nd;
      Hb = Od;
      xc = Pd;
      uc = Qd;
      self.VP8LMapColor32b = ke;
      self.VP8LMapColor8b = le;
      return a;
    }

    function rb(a, b, c, d, e) {
      var f = 1,
          g = [a],
          h = [b],
          k = d.m,
          l = d.s,
          m = null,
          n = 0;

      a: for (;;) {
        if (c) { for (; f && D(k, 1);) {
          var r = g,
              q = h,
              t = d,
              v = 1,
              p = t.m,
              u = t.gc[t.ab],
              w = D(p, 2);
          if (t.Oc & 1 << w) { f = 0; }else {
            t.Oc |= 1 << w;
            u.hc = w;
            u.Ea = r[0];
            u.nc = q[0];
            u.K = [null];
            ++t.ab;
            x(4 >= t.ab);

            switch (w) {
              case 0:
              case 1:
                u.b = D(p, 3) + 2;
                v = rb(xa(u.Ea, u.b), xa(u.nc, u.b), 0, t, u.K);
                u.K = u.K[0];
                break;

              case 3:
                var y = D(p, 8) + 1,
                    A = 16 < y ? 0 : 4 < y ? 1 : 2 < y ? 2 : 3;
                r[0] = xa(u.Ea, A);
                u.b = A;
                var v = rb(y, 1, 0, t, u.K),
                    E;

                if (E = v) {
                  var B,
                      C = y,
                      N = u,
                      z = 1 << (8 >> N.b),
                      Q = V(z);
                  if (null == Q) { E = 0; }else {
                    var S = N.K[0],
                        K = N.w;
                    Q[0] = N.K[0][0];

                    for (B = 1; B < 1 * C; ++B) {
                      Q[B] = yb(S[K + B], Q[B - 1]);
                    }

                    for (; B < 4 * z; ++B) {
                      Q[B] = 0;
                    }

                    N.K[0] = null;
                    N.K[0] = Q;
                    E = 1;
                  }
                }

                v = E;
                break;

              case 2:
                break;

              default:
                x(0);
            }

            f = v;
          }
        } }
        g = g[0];
        h = h[0];

        if (f && D(k, 1) && (n = D(k, 4), f = 1 <= n && 11 >= n, !f)) {
          d.a = 3;
          break a;
        }

        var H;
        if (H = f) { b: {
          var F = d,
              G = g,
              L = h,
              J = n,
              T = c,
              Da,
              ba,
              X = F.m,
              R = F.s,
              P = [null],
              U,
              W = 1,
              aa = 0,
              na = me[J];

          c: for (;;) {
            if (T && D(X, 1)) {
              var ca = D(X, 3) + 2,
                  ga = xa(G, ca),
                  ka = xa(L, ca),
                  qa = ga * ka;
              if (!rb(ga, ka, 0, F, P)) { break c; }
              P = P[0];
              R.xc = ca;

              for (Da = 0; Da < qa; ++Da) {
                var ia = P[Da] >> 8 & 65535;
                P[Da] = ia;
                ia >= W && (W = ia + 1);
              }
            }

            if (X.h) { break c; }

            for (ba = 0; 5 > ba; ++ba) {
              var Y = Dc[ba];
              !ba && 0 < J && (Y += 1 << J);
              aa < Y && (aa = Y);
            }

            var ma = wa(W * na, O);
            var ua = W,
                va = wa(ua, Ub);
            if (null == va) { var la = null; }else { x(65536 >= ua), la = va; }
            var ha = V(aa);

            if (null == la || null == ha || null == ma) {
              F.a = 1;
              break c;
            }

            var pa = ma;

            for (Da = U = 0; Da < W; ++Da) {
              var ja = la[Da],
                  da = ja.G,
                  ea = ja.H,
                  Fa = 0,
                  ra = 1,
                  Ha = 0;

              for (ba = 0; 5 > ba; ++ba) {
                Y = Dc[ba];
                da[ba] = pa;
                ea[ba] = U;
                !ba && 0 < J && (Y += 1 << J);

                d: {
                  var sa,
                      za = Y,
                      ta = F,
                      oa = ha,
                      db = pa,
                      eb = U,
                      Ia = 0,
                      Ka = ta.m,
                      fb = D(Ka, 1);
                  M(oa, 0, 0, za);

                  if (fb) {
                    var gb = D(Ka, 1) + 1,
                        hb = D(Ka, 1),
                        Ja = D(Ka, 0 == hb ? 1 : 8);
                    oa[Ja] = 1;
                    2 == gb && (Ja = D(Ka, 8), oa[Ja] = 1);
                    var ya = 1;
                  } else {
                    var Ua = V(19),
                        Va = D(Ka, 4) + 4;

                    if (19 < Va) {
                      ta.a = 3;
                      var Aa = 0;
                      break d;
                    }

                    for (sa = 0; sa < Va; ++sa) {
                      Ua[ne[sa]] = D(Ka, 3);
                    }

                    var Ba = void 0,
                        sb = void 0,
                        Wa = ta,
                        ib = Ua,
                        Ca = za,
                        Xa = oa,
                        Oa = 0,
                        La = Wa.m,
                        Ya = 8,
                        Za = wa(128, O);

                    e: for (;;) {
                      if (!Z(Za, 0, 7, ib, 19)) { break e; }

                      if (D(La, 1)) {
                        var kb = 2 + 2 * D(La, 3),
                            Ba = 2 + D(La, kb);
                        if (Ba > Ca) { break e; }
                      } else { Ba = Ca; }

                      for (sb = 0; sb < Ca && Ba--;) {
                        Sa(La);
                        var $a = Za[0 + (pb(La) & 127)];
                        qb(La, La.u + $a.g);
                        var jb = $a.value;
                        if (16 > jb) { Xa[sb++] = jb, 0 != jb && (Ya = jb); }else {
                          var lb = 16 == jb,
                              ab = jb - 16,
                              mb = oe[ab],
                              bb = D(La, pe[ab]) + mb;
                          if (sb + bb > Ca) { break e; }else { for (var nb = lb ? Ya : 0; 0 < bb--;) {
                            Xa[sb++] = nb;
                          } }
                        }
                      }

                      Oa = 1;
                      break e;
                    }

                    Oa || (Wa.a = 3);
                    ya = Oa;
                  }

                  (ya = ya && !Ka.h) && (Ia = Z(db, eb, 8, oa, za));
                  ya && 0 != Ia ? Aa = Ia : (ta.a = 3, Aa = 0);
                }

                if (0 == Aa) { break c; }
                ra && 1 == qe[ba] && (ra = 0 == pa[U].g);
                Fa += pa[U].g;
                U += Aa;

                if (3 >= ba) {
                  var Pa = ha[0],
                      tb;

                  for (tb = 1; tb < Y; ++tb) {
                    ha[tb] > Pa && (Pa = ha[tb]);
                  }

                  Ha += Pa;
                }
              }

              ja.nd = ra;
              ja.Qb = 0;
              ra && (ja.qb = (da[3][ea[3] + 0].value << 24 | da[1][ea[1] + 0].value << 16 | da[2][ea[2] + 0].value) >>> 0, 0 == Fa && 256 > da[0][ea[0] + 0].value && (ja.Qb = 1, ja.qb += da[0][ea[0] + 0].value << 8));
              ja.jc = !ja.Qb && 6 > Ha;

              if (ja.jc) {
                var Ga,
                    Ea = ja;

                for (Ga = 0; Ga < xb; ++Ga) {
                  var Ma = Ga,
                      Na = Ea.pd[Ma],
                      vb = Ea.G[0][Ea.H[0] + Ma];
                  256 <= vb.value ? (Na.g = vb.g + 256, Na.value = vb.value) : (Na.g = 0, Na.value = 0, Ma >>= ub(vb, 8, Na), Ma >>= ub(Ea.G[1][Ea.H[1] + Ma], 16, Na), Ma >>= ub(Ea.G[2][Ea.H[2] + Ma], 0, Na), ub(Ea.G[3][Ea.H[3] + Ma], 24, Na));
                }
              }
            }

            R.vc = P;
            R.Wb = W;
            R.Ya = la;
            R.yc = ma;
            H = 1;
            break b;
          }

          H = 0;
        } }
        f = H;

        if (!f) {
          d.a = 3;
          break a;
        }

        if (0 < n) {
          if (l.ua = 1 << n, !Zb(l.Wa, n)) {
            d.a = 1;
            f = 0;
            break a;
          }
        } else { l.ua = 0; }

        var Qa = d,
            cb = g,
            ob = h,
            Ra = Qa.s,
            Ta = Ra.xc;
        Qa.c = cb;
        Qa.i = ob;
        Ra.md = xa(cb, Ta);
        Ra.wc = 0 == Ta ? -1 : (1 << Ta) - 1;

        if (c) {
          d.xb = re;
          break a;
        }

        m = V(g * h);

        if (null == m) {
          d.a = 1;
          f = 0;
          break a;
        }

        f = (f = Jb(d, m, 0, g, h, h, null)) && !k.h;
        break a;
      }

      f ? (null != e ? e[0] = m : (x(null == m), x(c)), d.$ = 0, c || Ac(l)) : Ac(l);
      return f;
    }

    function Ec(a, b) {
      var c = a.c * a.i,
          d = c + b + 16 * b;
      x(a.c <= b);
      a.V = V(d);
      if (null == a.V) { return a.Ta = null, a.Ua = 0, a.a = 1, 0; }
      a.Ta = a.V;
      a.Ua = a.Ba + c + b;
      return 1;
    }

    function se(a, b) {
      var c = a.C,
          d = b - c,
          e = a.V,
          f = a.Ba + a.c * c;

      for (x(b <= a.l.o); 0 < d;) {
        var g = 16 < d ? 16 : d,
            h = a.l.ma,
            k = a.l.width,
            l = k * g,
            m = h.ca,
            n = h.tb + k * c,
            r = a.Ta,
            q = a.Ua;
        oc(a, g, e, f);
        Fc(r, q, m, n, l);
        zc(h, c, c + g, m, n, k);
        d -= g;
        e += g * a.c;
        c += g;
      }

      x(c == b);
      a.C = a.Ma = b;
    }

    function te(a, b) {
      var c = [0],
          d = [0],
          e = [0];

      a: for (;;) {
        if (null == a) { return 0; }
        if (null == b) { return a.a = 2, 0; }
        a.l = b;
        a.a = 0;
        cb(a.m, b.data, b.w, b.ha);

        if (!mc(a.m, c, d, e)) {
          a.a = 3;
          break a;
        }

        a.xb = Cc;
        b.width = c[0];
        b.height = d[0];
        if (!rb(c[0], d[0], 1, a, null)) { break a; }
        return 1;
      }

      x(0 != a.a);
      return 0;
    }

    function ue() {
      this.ub = this.yd = this.td = this.Rb = 0;
    }

    function ve() {
      this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
    }

    function we() {
      this.Fb = this.Bb = this.Cb = 0;
      this.Zb = V(4);
      this.Lb = V(4);
    }

    function Gc() {
      this.Yb = wb();
    }

    function xe() {
      this.jb = V(3);
      this.Wc = Ed([4, 8], Gc);
      this.Xc = Ed([4, 17], Gc);
    }

    function ye() {
      this.Pc = this.wb = this.Tb = this.zd = 0;
      this.vd = new V(4);
      this.od = new V(4);
    }

    function Xa() {
      this.ld = this.La = this.dd = this.tc = 0;
    }

    function Hc() {
      this.Na = this.la = 0;
    }

    function ze() {
      this.Sc = [0, 0];
      this.Eb = [0, 0];
      this.Qc = [0, 0];
      this.ia = this.lc = 0;
    }

    function Kb() {
      this.ad = V(384);
      this.Za = 0;
      this.Ob = V(16);
      this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
    }

    function Ae() {
      this.uc = this.M = this.Nb = 0;
      this.wa = Array(new Xa());
      this.Y = 0;
      this.ya = Array(new Kb());
      this.aa = 0;
      this.l = new Oa();
    }

    function Ic() {
      this.y = V(16);
      this.f = V(8);
      this.ea = V(8);
    }

    function Be() {
      this.cb = this.a = 0;
      this.sc = "";
      this.m = new Wb();
      this.Od = new ue();
      this.Kc = new ve();
      this.ed = new ye();
      this.Qa = new we();
      this.Ic = this.$c = this.Aa = 0;
      this.D = new Ae();
      this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0;
      this.Jc = wa(8, Wb);
      this.ia = 0;
      this.pb = wa(4, ze);
      this.Pa = new xe();
      this.Bd = this.kc = 0;
      this.Ac = [];
      this.Bc = 0;
      this.zc = [0, 0, 0, 0];
      this.Gd = Array(new Ic());
      this.Hd = 0;
      this.rb = Array(new Hc());
      this.sb = 0;
      this.wa = Array(new Xa());
      this.Y = 0;
      this.oc = [];
      this.pc = 0;
      this.sa = [];
      this.ta = 0;
      this.qa = [];
      this.ra = 0;
      this.Ha = [];
      this.B = this.R = this.Ia = 0;
      this.Ec = [];
      this.M = this.ja = this.Vb = this.Fc = 0;
      this.ya = Array(new Kb());
      this.L = this.aa = 0;
      this.gd = Ed([4, 2], Xa);
      this.ga = null;
      this.Fa = [];
      this.Cc = this.qc = this.P = 0;
      this.Gb = [];
      this.Uc = 0;
      this.mb = [];
      this.nb = 0;
      this.rc = [];
      this.Ga = this.Vc = 0;
    }

    function ga(a, b) {
      return 0 > a ? 0 : a > b ? b : a;
    }

    function Oa() {
      this.T = this.U = this.ka = this.height = this.width = 0;
      this.y = [];
      this.f = [];
      this.ea = [];
      this.Rc = this.fa = this.W = this.N = this.O = 0;
      this.ma = "void";
      this.put = "VP8IoPutHook";
      this.ac = "VP8IoSetupHook";
      this.bc = "VP8IoTeardownHook";
      this.ha = this.Kb = 0;
      this.data = [];
      this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0;
      this.F = [];
      this.J = 0;
    }

    function Ce() {
      var a = new Be();
      null != a && (a.a = 0, a.sc = "OK", a.cb = 0, a.Xb = 0, oa || (oa = De));
      return a;
    }

    function T(a, b, c) {
      0 == a.a && (a.a = b, a.sc = c, a.cb = 0);
      return 0;
    }

    function Jc(a, b, c) {
      return 3 <= c && 157 == a[b + 0] && 1 == a[b + 1] && 42 == a[b + 2];
    }

    function Kc(a, b) {
      if (null == a) { return 0; }
      a.a = 0;
      a.sc = "OK";
      if (null == b) { return T(a, 2, "null VP8Io passed to VP8GetHeaders()"); }
      var c = b.data;
      var d = b.w;
      var e = b.ha;
      if (4 > e) { return T(a, 7, "Truncated header."); }
      var f = c[d + 0] | c[d + 1] << 8 | c[d + 2] << 16;
      var g = a.Od;
      g.Rb = !(f & 1);
      g.td = f >> 1 & 7;
      g.yd = f >> 4 & 1;
      g.ub = f >> 5;
      if (3 < g.td) { return T(a, 3, "Incorrect keyframe parameters."); }
      if (!g.yd) { return T(a, 4, "Frame not displayable."); }
      d += 3;
      e -= 3;
      var h = a.Kc;

      if (g.Rb) {
        if (7 > e) { return T(a, 7, "cannot parse picture header"); }
        if (!Jc(c, d, e)) { return T(a, 3, "Bad code word"); }
        h.c = (c[d + 4] << 8 | c[d + 3]) & 16383;
        h.Td = c[d + 4] >> 6;
        h.i = (c[d + 6] << 8 | c[d + 5]) & 16383;
        h.Ud = c[d + 6] >> 6;
        d += 7;
        e -= 7;
        a.za = h.c + 15 >> 4;
        a.Ub = h.i + 15 >> 4;
        b.width = h.c;
        b.height = h.i;
        b.Da = 0;
        b.j = 0;
        b.v = 0;
        b.va = b.width;
        b.o = b.height;
        b.da = 0;
        b.ib = b.width;
        b.hb = b.height;
        b.U = b.width;
        b.T = b.height;
        f = a.Pa;
        M(f.jb, 0, 255, f.jb.length);
        f = a.Qa;
        x(null != f);
        f.Cb = 0;
        f.Bb = 0;
        f.Fb = 1;
        M(f.Zb, 0, 0, f.Zb.length);
        M(f.Lb, 0, 0, f.Lb);
      }

      if (g.ub > e) { return T(a, 7, "bad partition length"); }
      f = a.m;
      ma(f, c, d, g.ub);
      d += g.ub;
      e -= g.ub;
      g.Rb && (h.Ld = G(f), h.Kd = G(f));
      h = a.Qa;
      var k = a.Pa,
          l;
      x(null != f);
      x(null != h);
      h.Cb = G(f);

      if (h.Cb) {
        h.Bb = G(f);

        if (G(f)) {
          h.Fb = G(f);

          for (l = 0; 4 > l; ++l) {
            h.Zb[l] = G(f) ? ca(f, 7) : 0;
          }

          for (l = 0; 4 > l; ++l) {
            h.Lb[l] = G(f) ? ca(f, 6) : 0;
          }
        }

        if (h.Bb) { for (l = 0; 3 > l; ++l) {
          k.jb[l] = G(f) ? na(f, 8) : 255;
        } }
      } else { h.Bb = 0; }

      if (f.Ka) { return T(a, 3, "cannot parse segment header"); }
      h = a.ed;
      h.zd = G(f);
      h.Tb = na(f, 6);
      h.wb = na(f, 3);
      h.Pc = G(f);

      if (h.Pc && G(f)) {
        for (k = 0; 4 > k; ++k) {
          G(f) && (h.vd[k] = ca(f, 6));
        }

        for (k = 0; 4 > k; ++k) {
          G(f) && (h.od[k] = ca(f, 6));
        }
      }

      a.L = 0 == h.Tb ? 0 : h.zd ? 1 : 2;
      if (f.Ka) { return T(a, 3, "cannot parse filter header"); }
      l = d;
      var m = e;
      e = l;
      d = l + m;
      h = m;
      a.Xb = (1 << na(a.m, 2)) - 1;
      k = a.Xb;
      if (m < 3 * k) { c = 7; }else {
        l += 3 * k;
        h -= 3 * k;

        for (m = 0; m < k; ++m) {
          var n = c[e + 0] | c[e + 1] << 8 | c[e + 2] << 16;
          n > h && (n = h);
          ma(a.Jc[+m], c, l, n);
          l += n;
          h -= n;
          e += 3;
        }

        ma(a.Jc[+k], c, l, h);
        c = l < d ? 0 : 5;
      }
      if (0 != c) { return T(a, c, "cannot parse partitions"); }
      l = a.m;
      c = na(l, 7);
      e = G(l) ? ca(l, 4) : 0;
      d = G(l) ? ca(l, 4) : 0;
      h = G(l) ? ca(l, 4) : 0;
      k = G(l) ? ca(l, 4) : 0;
      l = G(l) ? ca(l, 4) : 0;
      m = a.Qa;

      for (n = 0; 4 > n; ++n) {
        if (m.Cb) {
          var r = m.Zb[n];
          m.Fb || (r += c);
        } else if (0 < n) {
          a.pb[n] = a.pb[0];
          continue;
        } else { r = c; }

        var q = a.pb[n];
        q.Sc[0] = Lb[ga(r + e, 127)];
        q.Sc[1] = Mb[ga(r + 0, 127)];
        q.Eb[0] = 2 * Lb[ga(r + d, 127)];
        q.Eb[1] = 101581 * Mb[ga(r + h, 127)] >> 16;
        8 > q.Eb[1] && (q.Eb[1] = 8);
        q.Qc[0] = Lb[ga(r + k, 117)];
        q.Qc[1] = Mb[ga(r + l, 127)];
        q.lc = r + l;
      }

      if (!g.Rb) { return T(a, 4, "Not a key frame."); }
      G(f);
      g = a.Pa;

      for (c = 0; 4 > c; ++c) {
        for (e = 0; 8 > e; ++e) {
          for (d = 0; 3 > d; ++d) {
            for (h = 0; 11 > h; ++h) {
              k = K(f, Ee[c][e][d][h]) ? na(f, 8) : Fe[c][e][d][h], g.Wc[c][e].Yb[d][h] = k;
            }
          }
        }

        for (e = 0; 17 > e; ++e) {
          g.Xc[c][e] = g.Wc[c][Ge[e]];
        }
      }

      a.kc = G(f);
      a.kc && (a.Bd = na(f, 8));
      return a.cb = 1;
    }

    function De(a, b, c, d, e, f, g) {
      var h = b[e].Yb[c];

      for (c = 0; 16 > e; ++e) {
        if (!K(a, h[c + 0])) { return e; }

        for (; !K(a, h[c + 1]);) {
          if (h = b[++e].Yb[0], c = 0, 16 == e) { return 16; }
        }

        var k = b[e + 1].Yb;

        if (K(a, h[c + 2])) {
          var l = a,
              m = h,
              n = c;
          var r = 0;
          if (K(l, m[n + 3])) {
            if (K(l, m[n + 6])) {
              h = 0;
              r = K(l, m[n + 8]);
              m = K(l, m[n + 9 + r]);
              n = 2 * r + m;
              r = 0;

              for (m = He[n]; m[h]; ++h) {
                r += r + K(l, m[h]);
              }

              r += 3 + (8 << n);
            } else { K(l, m[n + 7]) ? (r = 7 + 2 * K(l, 165), r += K(l, 145)) : r = 5 + K(l, 159); }
          } else { K(l, m[n + 4]) ? r = 3 + K(l, m[n + 5]) : r = 2; }
          h = k[2];
        } else { r = 1, h = k[1]; }

        k = g + Ie[e];
        l = a;
        0 > l.b && Qa(l);
        var m = l.b,
            n = l.Ca >> 1,
            q = n - (l.I >> m) >> 31;
        --l.b;
        l.Ca += q;
        l.Ca |= 1;
        l.I -= (n + 1 & q) << m;
        f[k] = ((r ^ q) - q) * d[(0 < e) + 0];
      }

      return 16;
    }

    function Lc(a) {
      var b = a.rb[a.sb - 1];
      b.la = 0;
      b.Na = 0;
      M(a.zc, 0, 0, a.zc.length);
      a.ja = 0;
    }

    function Je(a, b) {
      for (a.M = 0; a.M < a.Va; ++a.M) {
        var c = a.Jc[a.M & a.Xb],
            d = a.m,
            e = a,
            f;

        for (f = 0; f < e.za; ++f) {
          var g = d;
          var h = e;
          var k = h.Ac,
              l = h.Bc + 4 * f,
              m = h.zc,
              n = h.ya[h.aa + f];
          h.Qa.Bb ? n.$b = K(g, h.Pa.jb[0]) ? 2 + K(g, h.Pa.jb[2]) : K(g, h.Pa.jb[1]) : n.$b = 0;
          h.kc && (n.Ad = K(g, h.Bd));
          n.Za = !K(g, 145) + 0;

          if (n.Za) {
            var r = n.Ob,
                q = 0;

            for (h = 0; 4 > h; ++h) {
              var t = m[0 + h];
              var v;

              for (v = 0; 4 > v; ++v) {
                t = Ke[k[l + v]][t];

                for (var p = Mc[K(g, t[0])]; 0 < p;) {
                  p = Mc[2 * p + K(g, t[p])];
                }

                t = -p;
                k[l + v] = t;
              }

              I(r, q, k, l, 4);
              q += 4;
              m[0 + h] = t;
            }
          } else { t = K(g, 156) ? K(g, 128) ? 1 : 3 : K(g, 163) ? 2 : 0, n.Ob[0] = t, M(k, l, t, 4), M(m, 0, t, 4); }

          n.Dd = K(g, 142) ? K(g, 114) ? K(g, 183) ? 1 : 3 : 2 : 0;
        }

        if (e.m.Ka) { return T(a, 7, "Premature end-of-partition0 encountered."); }

        for (; a.ja < a.za; ++a.ja) {
          d = a;
          e = c;
          g = d.rb[d.sb - 1];
          k = d.rb[d.sb + d.ja];
          f = d.ya[d.aa + d.ja];
          if (l = d.kc ? f.Ad : 0) { g.la = k.la = 0, f.Za || (g.Na = k.Na = 0), f.Hc = 0, f.Gc = 0, f.ia = 0; }else {
            var u,
                w,
                g = k,
                k = e,
                l = d.Pa.Xc,
                m = d.ya[d.aa + d.ja],
                n = d.pb[m.$b];
            h = m.ad;
            r = 0;
            q = d.rb[d.sb - 1];
            t = v = 0;
            M(h, r, 0, 384);

            if (m.Za) {
              var y = 0;
              var A = l[3];
            } else {
              p = V(16);
              var E = g.Na + q.Na;
              E = oa(k, l[1], E, n.Eb, 0, p, 0);
              g.Na = q.Na = (0 < E) + 0;
              if (1 < E) { Nc(p, 0, h, r); }else {
                var B = p[0] + 3 >> 3;

                for (p = 0; 256 > p; p += 16) {
                  h[r + p] = B;
                }
              }
              y = 1;
              A = l[0];
            }

            var C = g.la & 15;
            var N = q.la & 15;

            for (p = 0; 4 > p; ++p) {
              var z = N & 1;

              for (B = w = 0; 4 > B; ++B) {
                E = z + (C & 1), E = oa(k, A, E, n.Sc, y, h, r), z = E > y, C = C >> 1 | z << 7, w = w << 2 | (3 < E ? 3 : 1 < E ? 2 : 0 != h[r + 0]), r += 16;
              }

              C >>= 4;
              N = N >> 1 | z << 7;
              v = (v << 8 | w) >>> 0;
            }

            A = C;
            y = N >> 4;

            for (u = 0; 4 > u; u += 2) {
              w = 0;
              C = g.la >> 4 + u;
              N = q.la >> 4 + u;

              for (p = 0; 2 > p; ++p) {
                z = N & 1;

                for (B = 0; 2 > B; ++B) {
                  E = z + (C & 1), E = oa(k, l[2], E, n.Qc, 0, h, r), z = 0 < E, C = C >> 1 | z << 3, w = w << 2 | (3 < E ? 3 : 1 < E ? 2 : 0 != h[r + 0]), r += 16;
                }

                C >>= 2;
                N = N >> 1 | z << 5;
              }

              t |= w << 4 * u;
              A |= C << 4 << u;
              y |= (N & 240) << u;
            }

            g.la = A;
            q.la = y;
            m.Hc = v;
            m.Gc = t;
            m.ia = t & 43690 ? 0 : n.ia;
            l = !(v | t);
          }
          0 < d.L && (d.wa[d.Y + d.ja] = d.gd[f.$b][f.Za], d.wa[d.Y + d.ja].La |= !l);
          if (e.Ka) { return T(a, 7, "Premature end-of-file encountered."); }
        }

        Lc(a);
        c = a;
        d = b;
        e = 1;
        f = c.D;
        g = 0 < c.L && c.M >= c.zb && c.M <= c.Va;
        if (0 == c.Aa) { a: {
          f.M = c.M, f.uc = g, Oc(c, f), e = 1;
          w = c.D;
          f = w.Nb;
          t = Ya[c.L];
          g = t * c.R;
          k = t / 2 * c.B;
          p = 16 * f * c.R;
          B = 8 * f * c.B;
          l = c.sa;
          m = c.ta - g + p;
          n = c.qa;
          h = c.ra - k + B;
          r = c.Ha;
          q = c.Ia - k + B;
          C = w.M;
          N = 0 == C;
          v = C >= c.Va - 1;
          2 == c.Aa && Oc(c, w);
          if (w.uc) { for (E = c, z = E.D.M, x(E.D.uc), w = E.yb; w < E.Hb; ++w) {
            var Q = E;
            y = w;
            A = z;
            var S = Q.D,
                D = S.Nb;
            u = Q.R;
            var S = S.wa[S.Y + y],
                F = Q.sa,
                H = Q.ta + 16 * D * u + 16 * y,
                J = S.dd,
                G = S.tc;
            if (0 != G) { if (x(3 <= G), 1 == Q.L) { 0 < y && Pc(F, H, u, G + 4), S.La && Qc(F, H, u, G), 0 < A && Rc(F, H, u, G + 4), S.La && Sc(F, H, u, G); }else {
              var L = Q.B,
                  O = Q.qa,
                  P = Q.ra + 8 * D * L + 8 * y,
                  R = Q.Ha,
                  Q = Q.Ia + 8 * D * L + 8 * y,
                  D = S.ld;
              0 < y && (Tc(F, H, u, G + 4, J, D), Uc(O, P, R, Q, L, G + 4, J, D));
              S.La && (Vc(F, H, u, G, J, D), Wc(O, P, R, Q, L, G, J, D));
              0 < A && (Xc(F, H, u, G + 4, J, D), Yc(O, P, R, Q, L, G + 4, J, D));
              S.La && (Zc(F, H, u, G, J, D), $c(O, P, R, Q, L, G, J, D));
            } }
          } }
          c.ia && alert("todo:DitherRow");

          if (null != d.put) {
            w = 16 * C;
            C = 16 * (C + 1);
            N ? (d.y = c.sa, d.O = c.ta + p, d.f = c.qa, d.N = c.ra + B, d.ea = c.Ha, d.W = c.Ia + B) : (w -= t, d.y = l, d.O = m, d.f = n, d.N = h, d.ea = r, d.W = q);
            v || (C -= t);
            C > d.o && (C = d.o);
            d.F = null;
            d.J = null;

            if (null != c.Fa && 0 < c.Fa.length && w < C && (d.J = Le(c, d, w, C - w), d.F = c.mb, null == d.F && 0 == d.F.length)) {
              e = T(c, 3, "Could not decode alpha data.");
              break a;
            }

            w < d.j && (t = d.j - w, w = d.j, x(!(t & 1)), d.O += c.R * t, d.N += c.B * (t >> 1), d.W += c.B * (t >> 1), null != d.F && (d.J += d.width * t));
            w < C && (d.O += d.v, d.N += d.v >> 1, d.W += d.v >> 1, null != d.F && (d.J += d.v), d.ka = w - d.j, d.U = d.va - d.v, d.T = C - w, e = d.put(d));
          }

          f + 1 != c.Ic || v || (I(c.sa, c.ta - g, l, m + 16 * c.R, g), I(c.qa, c.ra - k, n, h + 8 * c.B, k), I(c.Ha, c.Ia - k, r, q + 8 * c.B, k));
        } }
        if (!e) { return T(a, 6, "Output aborted."); }
      }

      return 1;
    }

    function Me(a, b) {
      if (null == a) { return 0; }
      if (null == b) { return T(a, 2, "NULL VP8Io parameter in VP8Decode()."); }
      if (!a.cb && !Kc(a, b)) { return 0; }
      x(a.cb);

      if (null == b.ac || b.ac(b)) {
        b.ob && (a.L = 0);
        var c = Ya[a.L];
        2 == a.L ? (a.yb = 0, a.zb = 0) : (a.yb = b.v - c >> 4, a.zb = b.j - c >> 4, 0 > a.yb && (a.yb = 0), 0 > a.zb && (a.zb = 0));
        a.Va = b.o + 15 + c >> 4;
        a.Hb = b.va + 15 + c >> 4;
        a.Hb > a.za && (a.Hb = a.za);
        a.Va > a.Ub && (a.Va = a.Ub);

        if (0 < a.L) {
          var d = a.ed;

          for (c = 0; 4 > c; ++c) {
            var e;

            if (a.Qa.Cb) {
              var f = a.Qa.Lb[c];
              a.Qa.Fb || (f += d.Tb);
            } else { f = d.Tb; }

            for (e = 0; 1 >= e; ++e) {
              var g = a.gd[c][e],
                  h = f;
              d.Pc && (h += d.vd[0], e && (h += d.od[0]));
              h = 0 > h ? 0 : 63 < h ? 63 : h;

              if (0 < h) {
                var k = h;
                0 < d.wb && (k = 4 < d.wb ? k >> 2 : k >> 1, k > 9 - d.wb && (k = 9 - d.wb));
                1 > k && (k = 1);
                g.dd = k;
                g.tc = 2 * h + k;
                g.ld = 40 <= h ? 2 : 15 <= h ? 1 : 0;
              } else { g.tc = 0; }

              g.La = e;
            }
          }
        }

        c = 0;
      } else { T(a, 6, "Frame setup failed"), c = a.a; }

      if (c = 0 == c) {
        if (c) {
          a.$c = 0;
          0 < a.Aa || (a.Ic = Ne);

          b: {
            c = a.Ic;
            var k = a.za,
                d = 4 * k,
                l = 32 * k,
                m = k + 1,
                n = 0 < a.L ? k * (0 < a.Aa ? 2 : 1) : 0,
                r = (2 == a.Aa ? 2 : 1) * k;
            e = 3 * (16 * c + Ya[a.L]) / 2 * l;
            f = null != a.Fa && 0 < a.Fa.length ? a.Kc.c * a.Kc.i : 0;
            g = d + 832 + e + f;
            if (g != g) { c = 0; }else {
              if (g > a.Vb) {
                a.Vb = 0;
                a.Ec = V(g);
                a.Fc = 0;

                if (null == a.Ec) {
                  c = T(a, 1, "no memory during frame initialization.");
                  break b;
                }

                a.Vb = g;
              }

              g = a.Ec;
              h = a.Fc;
              a.Ac = g;
              a.Bc = h;
              h += d;
              a.Gd = wa(l, Ic);
              a.Hd = 0;
              a.rb = wa(m + 1, Hc);
              a.sb = 1;
              a.wa = n ? wa(n, Xa) : null;
              a.Y = 0;
              a.D.Nb = 0;
              a.D.wa = a.wa;
              a.D.Y = a.Y;
              0 < a.Aa && (a.D.Y += k);
              x(!0);
              a.oc = g;
              a.pc = h;
              h += 832;
              a.ya = wa(r, Kb);
              a.aa = 0;
              a.D.ya = a.ya;
              a.D.aa = a.aa;
              2 == a.Aa && (a.D.aa += k);
              a.R = 16 * k;
              a.B = 8 * k;
              l = Ya[a.L];
              k = l * a.R;
              l = l / 2 * a.B;
              a.sa = g;
              a.ta = h + k;
              a.qa = a.sa;
              a.ra = a.ta + 16 * c * a.R + l;
              a.Ha = a.qa;
              a.Ia = a.ra + 8 * c * a.B + l;
              a.$c = 0;
              h += e;
              a.mb = f ? g : null;
              a.nb = f ? h : null;
              x(h + f <= a.Fc + a.Vb);
              Lc(a);
              M(a.Ac, a.Bc, 0, d);
              c = 1;
            }
          }

          if (c) {
            b.ka = 0;
            b.y = a.sa;
            b.O = a.ta;
            b.f = a.qa;
            b.N = a.ra;
            b.ea = a.Ha;
            b.Vd = a.Ia;
            b.fa = a.R;
            b.Rc = a.B;
            b.F = null;
            b.J = 0;

            if (!ad) {
              for (c = -255; 255 >= c; ++c) {
                bd[255 + c] = 0 > c ? -c : c;
              }

              for (c = -1020; 1020 >= c; ++c) {
                cd[1020 + c] = -128 > c ? -128 : 127 < c ? 127 : c;
              }

              for (c = -112; 112 >= c; ++c) {
                dd[112 + c] = -16 > c ? -16 : 15 < c ? 15 : c;
              }

              for (c = -255; 510 >= c; ++c) {
                ed[255 + c] = 0 > c ? 0 : 255 < c ? 255 : c;
              }

              ad = 1;
            }

            Nc = Oe;
            Za = Pe;
            Nb = Qe;
            pa = Re;
            Ob = Se;
            fd = Te;
            Xc = Ue;
            Tc = Ve;
            Yc = We;
            Uc = Xe;
            Zc = Ye;
            Vc = Ze;
            $c = $e;
            Wc = af;
            Rc = gd;
            Pc = hd;
            Sc = bf;
            Qc = cf;
            W[0] = df;
            W[1] = ef;
            W[2] = ff;
            W[3] = gf;
            W[4] = hf;
            W[5] = jf;
            W[6] = kf;
            W[7] = lf;
            W[8] = mf;
            W[9] = nf;
            Y[0] = of;
            Y[1] = pf;
            Y[2] = qf;
            Y[3] = rf;
            Y[4] = sf;
            Y[5] = tf;
            Y[6] = uf;
            ka[0] = vf;
            ka[1] = wf;
            ka[2] = xf;
            ka[3] = yf;
            ka[4] = zf;
            ka[5] = Af;
            ka[6] = Bf;
            c = 1;
          } else { c = 0; }
        }

        c && (c = Je(a, b));
        null != b.bc && b.bc(b);
        c &= 1;
      }

      if (!c) { return 0; }
      a.cb = 0;
      return c;
    }

    function qa(a, b, c, d, e) {
      e = a[b + c + 32 * d] + (e >> 3);
      a[b + c + 32 * d] = e & -256 ? 0 > e ? 0 : 255 : e;
    }

    function kb(a, b, c, d, e, f) {
      qa(a, b, 0, c, d + e);
      qa(a, b, 1, c, d + f);
      qa(a, b, 2, c, d - f);
      qa(a, b, 3, c, d - e);
    }

    function da(a) {
      return (20091 * a >> 16) + a;
    }

    function id(a, b, c, d) {
      var e = 0,
          f;
      var g = V(16);

      for (f = 0; 4 > f; ++f) {
        var h = a[b + 0] + a[b + 8];
        var k = a[b + 0] - a[b + 8];
        var l = (35468 * a[b + 4] >> 16) - da(a[b + 12]);
        var m = da(a[b + 4]) + (35468 * a[b + 12] >> 16);
        g[e + 0] = h + m;
        g[e + 1] = k + l;
        g[e + 2] = k - l;
        g[e + 3] = h - m;
        e += 4;
        b++;
      }

      for (f = e = 0; 4 > f; ++f) {
        a = g[e + 0] + 4, h = a + g[e + 8], k = a - g[e + 8], l = (35468 * g[e + 4] >> 16) - da(g[e + 12]), m = da(g[e + 4]) + (35468 * g[e + 12] >> 16), qa(c, d, 0, 0, h + m), qa(c, d, 1, 0, k + l), qa(c, d, 2, 0, k - l), qa(c, d, 3, 0, h - m), e++, d += 32;
      }
    }

    function Te(a, b, c, d) {
      var e = a[b + 0] + 4,
          f = 35468 * a[b + 4] >> 16,
          g = da(a[b + 4]),
          h = 35468 * a[b + 1] >> 16;
      a = da(a[b + 1]);
      kb(c, d, 0, e + g, a, h);
      kb(c, d, 1, e + f, a, h);
      kb(c, d, 2, e - f, a, h);
      kb(c, d, 3, e - g, a, h);
    }

    function Pe(a, b, c, d, e) {
      id(a, b, c, d);
      e && id(a, b + 16, c, d + 4);
    }

    function Qe(a, b, c, d) {
      Za(a, b + 0, c, d, 1);
      Za(a, b + 32, c, d + 128, 1);
    }

    function Re(a, b, c, d) {
      a = a[b + 0] + 4;
      var e;

      for (e = 0; 4 > e; ++e) {
        for (b = 0; 4 > b; ++b) {
          qa(c, d, b, e, a);
        }
      }
    }

    function Se(a, b, c, d) {
      a[b + 0] && pa(a, b + 0, c, d);
      a[b + 16] && pa(a, b + 16, c, d + 4);
      a[b + 32] && pa(a, b + 32, c, d + 128);
      a[b + 48] && pa(a, b + 48, c, d + 128 + 4);
    }

    function Oe(a, b, c, d) {
      var e = V(16),
          f;

      for (f = 0; 4 > f; ++f) {
        var g = a[b + 0 + f] + a[b + 12 + f];
        var h = a[b + 4 + f] + a[b + 8 + f];
        var k = a[b + 4 + f] - a[b + 8 + f];
        var l = a[b + 0 + f] - a[b + 12 + f];
        e[0 + f] = g + h;
        e[8 + f] = g - h;
        e[4 + f] = l + k;
        e[12 + f] = l - k;
      }

      for (f = 0; 4 > f; ++f) {
        a = e[0 + 4 * f] + 3, g = a + e[3 + 4 * f], h = e[1 + 4 * f] + e[2 + 4 * f], k = e[1 + 4 * f] - e[2 + 4 * f], l = a - e[3 + 4 * f], c[d + 0] = g + h >> 3, c[d + 16] = l + k >> 3, c[d + 32] = g - h >> 3, c[d + 48] = l - k >> 3, d += 64;
      }
    }

    function Pb(a, b, c) {
      var d = b - 32,
          e = R,
          f = 255 - a[d - 1],
          g;

      for (g = 0; g < c; ++g) {
        var h = e,
            k = f + a[b - 1],
            l;

        for (l = 0; l < c; ++l) {
          a[b + l] = h[k + a[d + l]];
        }

        b += 32;
      }
    }

    function ef(a, b) {
      Pb(a, b, 4);
    }

    function wf(a, b) {
      Pb(a, b, 8);
    }

    function pf(a, b) {
      Pb(a, b, 16);
    }

    function qf(a, b) {
      var c;

      for (c = 0; 16 > c; ++c) {
        I(a, b + 32 * c, a, b - 32, 16);
      }
    }

    function rf(a, b) {
      var c;

      for (c = 16; 0 < c; --c) {
        M(a, b, a[b - 1], 16), b += 32;
      }
    }

    function $a(a, b, c) {
      var d;

      for (d = 0; 16 > d; ++d) {
        M(b, c + 32 * d, a, 16);
      }
    }

    function of(a, b) {
      var c = 16,
          d;

      for (d = 0; 16 > d; ++d) {
        c += a[b - 1 + 32 * d] + a[b + d - 32];
      }

      $a(c >> 5, a, b);
    }

    function sf(a, b) {
      var c = 8,
          d;

      for (d = 0; 16 > d; ++d) {
        c += a[b - 1 + 32 * d];
      }

      $a(c >> 4, a, b);
    }

    function tf(a, b) {
      var c = 8,
          d;

      for (d = 0; 16 > d; ++d) {
        c += a[b + d - 32];
      }

      $a(c >> 4, a, b);
    }

    function uf(a, b) {
      $a(128, a, b);
    }

    function z(a, b, c) {
      return a + 2 * b + c + 2 >> 2;
    }

    function ff(a, b) {
      var c = b - 32,
          c = new Uint8Array([z(a[c - 1], a[c + 0], a[c + 1]), z(a[c + 0], a[c + 1], a[c + 2]), z(a[c + 1], a[c + 2], a[c + 3]), z(a[c + 2], a[c + 3], a[c + 4])]),
          d;

      for (d = 0; 4 > d; ++d) {
        I(a, b + 32 * d, c, 0, c.length);
      }
    }

    function gf(a, b) {
      var c = a[b - 1],
          d = a[b - 1 + 32],
          e = a[b - 1 + 64],
          f = a[b - 1 + 96];
      ra(a, b + 0, 16843009 * z(a[b - 1 - 32], c, d));
      ra(a, b + 32, 16843009 * z(c, d, e));
      ra(a, b + 64, 16843009 * z(d, e, f));
      ra(a, b + 96, 16843009 * z(e, f, f));
    }

    function df(a, b) {
      var c = 4,
          d;

      for (d = 0; 4 > d; ++d) {
        c += a[b + d - 32] + a[b - 1 + 32 * d];
      }

      c >>= 3;

      for (d = 0; 4 > d; ++d) {
        M(a, b + 32 * d, c, 4);
      }
    }

    function hf(a, b) {
      var c = a[b - 1 + 0],
          d = a[b - 1 + 32],
          e = a[b - 1 + 64],
          f = a[b - 1 - 32],
          g = a[b + 0 - 32],
          h = a[b + 1 - 32],
          k = a[b + 2 - 32],
          l = a[b + 3 - 32];
      a[b + 0 + 96] = z(d, e, a[b - 1 + 96]);
      a[b + 1 + 96] = a[b + 0 + 64] = z(c, d, e);
      a[b + 2 + 96] = a[b + 1 + 64] = a[b + 0 + 32] = z(f, c, d);
      a[b + 3 + 96] = a[b + 2 + 64] = a[b + 1 + 32] = a[b + 0 + 0] = z(g, f, c);
      a[b + 3 + 64] = a[b + 2 + 32] = a[b + 1 + 0] = z(h, g, f);
      a[b + 3 + 32] = a[b + 2 + 0] = z(k, h, g);
      a[b + 3 + 0] = z(l, k, h);
    }

    function kf(a, b) {
      var c = a[b + 1 - 32],
          d = a[b + 2 - 32],
          e = a[b + 3 - 32],
          f = a[b + 4 - 32],
          g = a[b + 5 - 32],
          h = a[b + 6 - 32],
          k = a[b + 7 - 32];
      a[b + 0 + 0] = z(a[b + 0 - 32], c, d);
      a[b + 1 + 0] = a[b + 0 + 32] = z(c, d, e);
      a[b + 2 + 0] = a[b + 1 + 32] = a[b + 0 + 64] = z(d, e, f);
      a[b + 3 + 0] = a[b + 2 + 32] = a[b + 1 + 64] = a[b + 0 + 96] = z(e, f, g);
      a[b + 3 + 32] = a[b + 2 + 64] = a[b + 1 + 96] = z(f, g, h);
      a[b + 3 + 64] = a[b + 2 + 96] = z(g, h, k);
      a[b + 3 + 96] = z(h, k, k);
    }

    function jf(a, b) {
      var c = a[b - 1 + 0],
          d = a[b - 1 + 32],
          e = a[b - 1 + 64],
          f = a[b - 1 - 32],
          g = a[b + 0 - 32],
          h = a[b + 1 - 32],
          k = a[b + 2 - 32],
          l = a[b + 3 - 32];
      a[b + 0 + 0] = a[b + 1 + 64] = f + g + 1 >> 1;
      a[b + 1 + 0] = a[b + 2 + 64] = g + h + 1 >> 1;
      a[b + 2 + 0] = a[b + 3 + 64] = h + k + 1 >> 1;
      a[b + 3 + 0] = k + l + 1 >> 1;
      a[b + 0 + 96] = z(e, d, c);
      a[b + 0 + 64] = z(d, c, f);
      a[b + 0 + 32] = a[b + 1 + 96] = z(c, f, g);
      a[b + 1 + 32] = a[b + 2 + 96] = z(f, g, h);
      a[b + 2 + 32] = a[b + 3 + 96] = z(g, h, k);
      a[b + 3 + 32] = z(h, k, l);
    }

    function lf(a, b) {
      var c = a[b + 0 - 32],
          d = a[b + 1 - 32],
          e = a[b + 2 - 32],
          f = a[b + 3 - 32],
          g = a[b + 4 - 32],
          h = a[b + 5 - 32],
          k = a[b + 6 - 32],
          l = a[b + 7 - 32];
      a[b + 0 + 0] = c + d + 1 >> 1;
      a[b + 1 + 0] = a[b + 0 + 64] = d + e + 1 >> 1;
      a[b + 2 + 0] = a[b + 1 + 64] = e + f + 1 >> 1;
      a[b + 3 + 0] = a[b + 2 + 64] = f + g + 1 >> 1;
      a[b + 0 + 32] = z(c, d, e);
      a[b + 1 + 32] = a[b + 0 + 96] = z(d, e, f);
      a[b + 2 + 32] = a[b + 1 + 96] = z(e, f, g);
      a[b + 3 + 32] = a[b + 2 + 96] = z(f, g, h);
      a[b + 3 + 64] = z(g, h, k);
      a[b + 3 + 96] = z(h, k, l);
    }

    function nf(a, b) {
      var c = a[b - 1 + 0],
          d = a[b - 1 + 32],
          e = a[b - 1 + 64],
          f = a[b - 1 + 96];
      a[b + 0 + 0] = c + d + 1 >> 1;
      a[b + 2 + 0] = a[b + 0 + 32] = d + e + 1 >> 1;
      a[b + 2 + 32] = a[b + 0 + 64] = e + f + 1 >> 1;
      a[b + 1 + 0] = z(c, d, e);
      a[b + 3 + 0] = a[b + 1 + 32] = z(d, e, f);
      a[b + 3 + 32] = a[b + 1 + 64] = z(e, f, f);
      a[b + 3 + 64] = a[b + 2 + 64] = a[b + 0 + 96] = a[b + 1 + 96] = a[b + 2 + 96] = a[b + 3 + 96] = f;
    }

    function mf(a, b) {
      var c = a[b - 1 + 0],
          d = a[b - 1 + 32],
          e = a[b - 1 + 64],
          f = a[b - 1 + 96],
          g = a[b - 1 - 32],
          h = a[b + 0 - 32],
          k = a[b + 1 - 32],
          l = a[b + 2 - 32];
      a[b + 0 + 0] = a[b + 2 + 32] = c + g + 1 >> 1;
      a[b + 0 + 32] = a[b + 2 + 64] = d + c + 1 >> 1;
      a[b + 0 + 64] = a[b + 2 + 96] = e + d + 1 >> 1;
      a[b + 0 + 96] = f + e + 1 >> 1;
      a[b + 3 + 0] = z(h, k, l);
      a[b + 2 + 0] = z(g, h, k);
      a[b + 1 + 0] = a[b + 3 + 32] = z(c, g, h);
      a[b + 1 + 32] = a[b + 3 + 64] = z(d, c, g);
      a[b + 1 + 64] = a[b + 3 + 96] = z(e, d, c);
      a[b + 1 + 96] = z(f, e, d);
    }

    function xf(a, b) {
      var c;

      for (c = 0; 8 > c; ++c) {
        I(a, b + 32 * c, a, b - 32, 8);
      }
    }

    function yf(a, b) {
      var c;

      for (c = 0; 8 > c; ++c) {
        M(a, b, a[b - 1], 8), b += 32;
      }
    }

    function lb(a, b, c) {
      var d;

      for (d = 0; 8 > d; ++d) {
        M(b, c + 32 * d, a, 8);
      }
    }

    function vf(a, b) {
      var c = 8,
          d;

      for (d = 0; 8 > d; ++d) {
        c += a[b + d - 32] + a[b - 1 + 32 * d];
      }

      lb(c >> 4, a, b);
    }

    function Af(a, b) {
      var c = 4,
          d;

      for (d = 0; 8 > d; ++d) {
        c += a[b + d - 32];
      }

      lb(c >> 3, a, b);
    }

    function zf(a, b) {
      var c = 4,
          d;

      for (d = 0; 8 > d; ++d) {
        c += a[b - 1 + 32 * d];
      }

      lb(c >> 3, a, b);
    }

    function Bf(a, b) {
      lb(128, a, b);
    }

    function ab(a, b, c) {
      var d = a[b - c],
          e = a[b + 0],
          f = 3 * (e - d) + Qb[1020 + a[b - 2 * c] - a[b + c]],
          g = mb[112 + (f + 4 >> 3)];
      a[b - c] = R[255 + d + mb[112 + (f + 3 >> 3)]];
      a[b + 0] = R[255 + e - g];
    }

    function jd(a, b, c, d) {
      var e = a[b + 0],
          f = a[b + c];
      return U[255 + a[b - 2 * c] - a[b - c]] > d || U[255 + f - e] > d;
    }

    function kd(a, b, c, d) {
      return 4 * U[255 + a[b - c] - a[b + 0]] + U[255 + a[b - 2 * c] - a[b + c]] <= d;
    }

    function ld(a, b, c, d, e) {
      var f = a[b - 3 * c],
          g = a[b - 2 * c],
          h = a[b - c],
          k = a[b + 0],
          l = a[b + c],
          m = a[b + 2 * c],
          n = a[b + 3 * c];
      return 4 * U[255 + h - k] + U[255 + g - l] > d ? 0 : U[255 + a[b - 4 * c] - f] <= e && U[255 + f - g] <= e && U[255 + g - h] <= e && U[255 + n - m] <= e && U[255 + m - l] <= e && U[255 + l - k] <= e;
    }

    function gd(a, b, c, d) {
      var e = 2 * d + 1;

      for (d = 0; 16 > d; ++d) {
        kd(a, b + d, c, e) && ab(a, b + d, c);
      }
    }

    function hd(a, b, c, d) {
      var e = 2 * d + 1;

      for (d = 0; 16 > d; ++d) {
        kd(a, b + d * c, 1, e) && ab(a, b + d * c, 1);
      }
    }

    function bf(a, b, c, d) {
      var e;

      for (e = 3; 0 < e; --e) {
        b += 4 * c, gd(a, b, c, d);
      }
    }

    function cf(a, b, c, d) {
      var e;

      for (e = 3; 0 < e; --e) {
        b += 4, hd(a, b, c, d);
      }
    }

    function ea(a, b, c, d, e, f, g, h) {
      for (f = 2 * f + 1; 0 < e--;) {
        if (ld(a, b, c, f, g)) { if (jd(a, b, c, h)) { ab(a, b, c); }else {
          var k = a,
              l = b,
              m = c,
              n = k[l - 2 * m],
              r = k[l - m],
              q = k[l + 0],
              t = k[l + m],
              v = k[l + 2 * m],
              p = Qb[1020 + 3 * (q - r) + Qb[1020 + n - t]],
              u = 27 * p + 63 >> 7,
              w = 18 * p + 63 >> 7,
              p = 9 * p + 63 >> 7;
          k[l - 3 * m] = R[255 + k[l - 3 * m] + p];
          k[l - 2 * m] = R[255 + n + w];
          k[l - m] = R[255 + r + u];
          k[l + 0] = R[255 + q - u];
          k[l + m] = R[255 + t - w];
          k[l + 2 * m] = R[255 + v - p];
        } }
        b += d;
      }
    }

    function Fa(a, b, c, d, e, f, g, h) {
      for (f = 2 * f + 1; 0 < e--;) {
        if (ld(a, b, c, f, g)) { if (jd(a, b, c, h)) { ab(a, b, c); }else {
          var k = a,
              l = b,
              m = c,
              n = k[l - m],
              r = k[l + 0],
              q = k[l + m],
              t = 3 * (r - n),
              v = mb[112 + (t + 4 >> 3)],
              t = mb[112 + (t + 3 >> 3)],
              p = v + 1 >> 1;
          k[l - 2 * m] = R[255 + k[l - 2 * m] + p];
          k[l - m] = R[255 + n + t];
          k[l + 0] = R[255 + r - v];
          k[l + m] = R[255 + q - p];
        } }
        b += d;
      }
    }

    function Ue(a, b, c, d, e, f) {
      ea(a, b, c, 1, 16, d, e, f);
    }

    function Ve(a, b, c, d, e, f) {
      ea(a, b, 1, c, 16, d, e, f);
    }

    function Ye(a, b, c, d, e, f) {
      var g;

      for (g = 3; 0 < g; --g) {
        b += 4 * c, Fa(a, b, c, 1, 16, d, e, f);
      }
    }

    function Ze(a, b, c, d, e, f) {
      var g;

      for (g = 3; 0 < g; --g) {
        b += 4, Fa(a, b, 1, c, 16, d, e, f);
      }
    }

    function We(a, b, c, d, e, f, g, h) {
      ea(a, b, e, 1, 8, f, g, h);
      ea(c, d, e, 1, 8, f, g, h);
    }

    function Xe(a, b, c, d, e, f, g, h) {
      ea(a, b, 1, e, 8, f, g, h);
      ea(c, d, 1, e, 8, f, g, h);
    }

    function $e(a, b, c, d, e, f, g, h) {
      Fa(a, b + 4 * e, e, 1, 8, f, g, h);
      Fa(c, d + 4 * e, e, 1, 8, f, g, h);
    }

    function af(a, b, c, d, e, f, g, h) {
      Fa(a, b + 4, 1, e, 8, f, g, h);
      Fa(c, d + 4, 1, e, 8, f, g, h);
    }

    function Cf() {
      this.ba = new Cb();
      this.ec = [];
      this.cc = [];
      this.Mc = [];
      this.Dc = this.Nc = this.dc = this.fc = 0;
      this.Oa = new Ud();
      this.memory = 0;
      this.Ib = "OutputFunc";
      this.Jb = "OutputAlphaFunc";
      this.Nd = "OutputRowFunc";
    }

    function md() {
      this.data = [];
      this.offset = this.kd = this.ha = this.w = 0;
      this.na = [];
      this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
    }

    function Df() {
      this.nc = this.Ea = this.b = this.hc = 0;
      this.K = [];
      this.w = 0;
    }

    function Ef() {
      this.ua = 0;
      this.Wa = new ac();
      this.vb = new ac();
      this.md = this.xc = this.wc = 0;
      this.vc = [];
      this.Wb = 0;
      this.Ya = new Ub();
      this.yc = new O();
    }

    function je() {
      this.xb = this.a = 0;
      this.l = new Oa();
      this.ca = new Cb();
      this.V = [];
      this.Ba = 0;
      this.Ta = [];
      this.Ua = 0;
      this.m = new Ra();
      this.Pb = 0;
      this.wd = new Ra();
      this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0;
      this.s = new Ef();
      this.ab = 0;
      this.gc = wa(4, Df);
      this.Oc = 0;
    }

    function Ff() {
      this.Lc = this.Z = this.$a = this.i = this.c = 0;
      this.l = new Oa();
      this.ic = 0;
      this.ca = [];
      this.tb = 0;
      this.qd = null;
      this.rd = 0;
    }

    function Rb(a, b, c, d, e, f, g) {
      a = null == a ? 0 : a[b + 0];

      for (b = 0; b < g; ++b) {
        e[f + b] = a + c[d + b] & 255, a = e[f + b];
      }
    }

    function Gf(a, b, c, d, e, f, g) {
      if (null == a) { Rb(null, null, c, d, e, f, g); }else {
        var h;

        for (h = 0; h < g; ++h) {
          e[f + h] = a[b + h] + c[d + h] & 255;
        }
      }
    }

    function Hf(a, b, c, d, e, f, g) {
      if (null == a) { Rb(null, null, c, d, e, f, g); }else {
        var h = a[b + 0],
            k = h,
            l = h,
            m;

        for (m = 0; m < g; ++m) {
          h = a[b + m], k = l + h - k, l = c[d + m] + (k & -256 ? 0 > k ? 0 : 255 : k) & 255, k = h, e[f + m] = l;
        }
      }
    }

    function Le(a, b, c, d) {
      var e = b.width,
          f = b.o;
      x(null != a && null != b);
      if (0 > c || 0 >= d || c + d > f) { return null; }

      if (!a.Cc) {
        if (null == a.ga) {
          a.ga = new Ff();
          var g;
          (g = null == a.ga) || (g = b.width * b.o, x(0 == a.Gb.length), a.Gb = V(g), a.Uc = 0, null == a.Gb ? g = 0 : (a.mb = a.Gb, a.nb = a.Uc, a.rc = null, g = 1), g = !g);

          if (!g) {
            g = a.ga;
            var h = a.Fa,
                k = a.P,
                l = a.qc,
                m = a.mb,
                n = a.nb,
                r = k + 1,
                q = l - 1,
                t = g.l;
            x(null != h && null != m && null != b);
            ia[0] = null;
            ia[1] = Rb;
            ia[2] = Gf;
            ia[3] = Hf;
            g.ca = m;
            g.tb = n;
            g.c = b.width;
            g.i = b.height;
            x(0 < g.c && 0 < g.i);
            if (1 >= l) { b = 0; }else if (g.$a = h[k + 0] >> 0 & 3, g.Z = h[k + 0] >> 2 & 3, g.Lc = h[k + 0] >> 4 & 3, k = h[k + 0] >> 6 & 3, 0 > g.$a || 1 < g.$a || 4 <= g.Z || 1 < g.Lc || k) { b = 0; }else if (t.put = kc, t.ac = gc, t.bc = lc, t.ma = g, t.width = b.width, t.height = b.height, t.Da = b.Da, t.v = b.v, t.va = b.va, t.j = b.j, t.o = b.o, g.$a) { b: {
              x(1 == g.$a), b = Bc();

              c: for (;;) {
                if (null == b) {
                  b = 0;
                  break b;
                }

                x(null != g);
                g.mc = b;
                b.c = g.c;
                b.i = g.i;
                b.l = g.l;
                b.l.ma = g;
                b.l.width = g.c;
                b.l.height = g.i;
                b.a = 0;
                cb(b.m, h, r, q);
                if (!rb(g.c, g.i, 1, b, null)) { break c; }
                1 == b.ab && 3 == b.gc[0].hc && yc(b.s) ? (g.ic = 1, h = b.c * b.i, b.Ta = null, b.Ua = 0, b.V = V(h), b.Ba = 0, null == b.V ? (b.a = 1, b = 0) : b = 1) : (g.ic = 0, b = Ec(b, g.c));
                if (!b) { break c; }
                b = 1;
                break b;
              }

              g.mc = null;
              b = 0;
            } } else { b = q >= g.c * g.i; }
            g = !b;
          }

          if (g) { return null; }
          1 != a.ga.Lc ? a.Ga = 0 : d = f - c;
        }

        x(null != a.ga);
        x(c + d <= f);

        a: {
          h = a.ga;
          b = h.c;
          f = h.l.o;

          if (0 == h.$a) {
            r = a.rc;
            q = a.Vc;
            t = a.Fa;
            k = a.P + 1 + c * b;
            l = a.mb;
            m = a.nb + c * b;
            x(k <= a.P + a.qc);
            if (0 != h.Z) { for (x(null != ia[h.Z]), g = 0; g < d; ++g) {
              ia[h.Z](r, q, t, k, l, m, b), r = l, q = m, m += b, k += b;
            } } else { for (g = 0; g < d; ++g) {
              I(l, m, t, k, b), r = l, q = m, m += b, k += b;
            } }
            a.rc = r;
            a.Vc = q;
          } else {
            x(null != h.mc);
            b = c + d;
            g = h.mc;
            x(null != g);
            x(b <= g.i);
            if (g.C >= b) { b = 1; }else if (h.ic || Aa(), h.ic) {
              var h = g.V,
                  r = g.Ba,
                  q = g.c,
                  v = g.i,
                  t = 1,
                  k = g.$ / q,
                  l = g.$ % q,
                  m = g.m,
                  n = g.s,
                  p = g.$,
                  u = q * v,
                  w = q * b,
                  y = n.wc,
                  A = p < w ? ha(n, l, k) : null;
              x(p <= u);
              x(b <= v);
              x(yc(n));

              c: for (;;) {
                for (; !m.h && p < w;) {
                  l & y || (A = ha(n, l, k));
                  x(null != A);
                  Sa(m);
                  v = ua(A.G[0], A.H[0], m);
                  if (256 > v) { h[r + p] = v, ++p, ++l, l >= q && (l = 0, ++k, k <= b && !(k % 16) && Ib(g, k)); }else if (280 > v) {
                    var v = ib(v - 256, m);
                    var E = ua(A.G[4], A.H[4], m);
                    Sa(m);
                    E = ib(E, m);
                    E = nc(q, E);

                    if (p >= E && u - p >= v) {
                      var B;

                      for (B = 0; B < v; ++B) {
                        h[r + p + B] = h[r + p + B - E];
                      }
                    } else {
                      t = 0;
                      break c;
                    }

                    p += v;

                    for (l += v; l >= q;) {
                      l -= q, ++k, k <= b && !(k % 16) && Ib(g, k);
                    }

                    p < w && l & y && (A = ha(n, l, k));
                  } else {
                    t = 0;
                    break c;
                  }
                  x(m.h == db(m));
                }

                Ib(g, k > b ? b : k);
                break c;
              }

              !t || m.h && p < u ? (t = 0, g.a = m.h ? 5 : 3) : g.$ = p;
              b = t;
            } else { b = Jb(g, g.V, g.Ba, g.c, g.i, b, se); }

            if (!b) {
              d = 0;
              break a;
            }
          }

          c + d >= f && (a.Cc = 1);
          d = 1;
        }

        if (!d) { return null; }
        if (a.Cc && (d = a.ga, null != d && (d.mc = null), a.ga = null, 0 < a.Ga)) { return alert("todo:WebPDequantizeLevels"), null; }
      }

      return a.nb + c * e;
    }

    function If(a, b, c, d, e, f) {
      for (; 0 < e--;) {
        var g = a,
            h = b + (c ? 1 : 0),
            k = a,
            l = b + (c ? 0 : 3),
            m;

        for (m = 0; m < d; ++m) {
          var n = k[l + 4 * m];
          255 != n && (n *= 32897, g[h + 4 * m + 0] = g[h + 4 * m + 0] * n >> 23, g[h + 4 * m + 1] = g[h + 4 * m + 1] * n >> 23, g[h + 4 * m + 2] = g[h + 4 * m + 2] * n >> 23);
        }

        b += f;
      }
    }

    function Jf(a, b, c, d, e) {
      for (; 0 < d--;) {
        var f;

        for (f = 0; f < c; ++f) {
          var g = a[b + 2 * f + 0],
              h = a[b + 2 * f + 1],
              k = h & 15,
              l = 4369 * k,
              h = (h & 240 | h >> 4) * l >> 16;
          a[b + 2 * f + 0] = (g & 240 | g >> 4) * l >> 16 & 240 | (g & 15 | g << 4) * l >> 16 >> 4 & 15;
          a[b + 2 * f + 1] = h & 240 | k;
        }

        b += e;
      }
    }

    function Kf(a, b, c, d, e, f, g, h) {
      var k = 255,
          l,
          m;

      for (m = 0; m < e; ++m) {
        for (l = 0; l < d; ++l) {
          var n = a[b + l];
          f[g + 4 * l] = n;
          k &= n;
        }

        b += c;
        g += h;
      }

      return 255 != k;
    }

    function Lf(a, b, c, d, e) {
      var f;

      for (f = 0; f < e; ++f) {
        c[d + f] = a[b + f] >> 8;
      }
    }

    function Aa() {
      za = If;
      vc = Jf;
      fc = Kf;
      Fc = Lf;
    }

    function va(a, b, c) {
      self[a] = function (a, e, f, g, h, k, l, m, n, r, q, t, v, p, u, w, y) {
        var d,
            E = y - 1 >> 1;
        var B = h[k + 0] | l[m + 0] << 16;
        var C = n[r + 0] | q[t + 0] << 16;
        x(null != a);
        var z = 3 * B + C + 131074 >> 2;
        b(a[e + 0], z & 255, z >> 16, v, p);
        null != f && (z = 3 * C + B + 131074 >> 2, b(f[g + 0], z & 255, z >> 16, u, w));

        for (d = 1; d <= E; ++d) {
          var D = h[k + d] | l[m + d] << 16;
          var G = n[r + d] | q[t + d] << 16;
          var F = B + D + C + G + 524296;
          var H = F + 2 * (D + C) >> 3;
          F = F + 2 * (B + G) >> 3;
          z = H + B >> 1;
          B = F + D >> 1;
          b(a[e + 2 * d - 1], z & 255, z >> 16, v, p + (2 * d - 1) * c);
          b(a[e + 2 * d - 0], B & 255, B >> 16, v, p + (2 * d - 0) * c);
          null != f && (z = F + C >> 1, B = H + G >> 1, b(f[g + 2 * d - 1], z & 255, z >> 16, u, w + (2 * d - 1) * c), b(f[g + 2 * d + 0], B & 255, B >> 16, u, w + (2 * d + 0) * c));
          B = D;
          C = G;
        }

        y & 1 || (z = 3 * B + C + 131074 >> 2, b(a[e + y - 1], z & 255, z >> 16, v, p + (y - 1) * c), null != f && (z = 3 * C + B + 131074 >> 2, b(f[g + y - 1], z & 255, z >> 16, u, w + (y - 1) * c)));
      };
    }

    function ic() {
      P[Ca] = Mf;
      P[Ua] = nd;
      P[tc] = Nf;
      P[Va] = od;
      P[ya] = pd;
      P[Db] = qd;
      P[wc] = Of;
      P[zb] = nd;
      P[Ab] = od;
      P[Ja] = pd;
      P[Bb] = qd;
    }

    function Sb(a) {
      return a & ~Pf ? 0 > a ? 0 : 255 : a >> rd;
    }

    function bb(a, b) {
      return Sb((19077 * a >> 8) + (26149 * b >> 8) - 14234);
    }

    function nb(a, b, c) {
      return Sb((19077 * a >> 8) - (6419 * b >> 8) - (13320 * c >> 8) + 8708);
    }

    function Pa(a, b) {
      return Sb((19077 * a >> 8) + (33050 * b >> 8) - 17685);
    }

    function Ga(a, b, c, d, e) {
      d[e + 0] = bb(a, c);
      d[e + 1] = nb(a, b, c);
      d[e + 2] = Pa(a, b);
    }

    function Tb(a, b, c, d, e) {
      d[e + 0] = Pa(a, b);
      d[e + 1] = nb(a, b, c);
      d[e + 2] = bb(a, c);
    }

    function sd(a, b, c, d, e) {
      var f = nb(a, b, c);
      b = f << 3 & 224 | Pa(a, b) >> 3;
      d[e + 0] = bb(a, c) & 248 | f >> 5;
      d[e + 1] = b;
    }

    function td(a, b, c, d, e) {
      var f = Pa(a, b) & 240 | 15;
      d[e + 0] = bb(a, c) & 240 | nb(a, b, c) >> 4;
      d[e + 1] = f;
    }

    function ud(a, b, c, d, e) {
      d[e + 0] = 255;
      Ga(a, b, c, d, e + 1);
    }

    function vd(a, b, c, d, e) {
      Tb(a, b, c, d, e);
      d[e + 3] = 255;
    }

    function wd(a, b, c, d, e) {
      Ga(a, b, c, d, e);
      d[e + 3] = 255;
    }

    function ga(a, b) {
      return 0 > a ? 0 : a > b ? b : a;
    }

    function la(a, b, c) {
      self[a] = function (a, e, f, g, h, k, l, m, n) {
        for (var d = m + (n & -2) * c; m != d;) {
          b(a[e + 0], f[g + 0], h[k + 0], l, m), b(a[e + 1], f[g + 0], h[k + 0], l, m + c), e += 2, ++g, ++k, m += 2 * c;
        }

        n & 1 && b(a[e + 0], f[g + 0], h[k + 0], l, m);
      };
    }

    function xd(a, b, c) {
      return 0 == c ? 0 == a ? 0 == b ? 6 : 5 : 0 == b ? 4 : 0 : c;
    }

    function yd(a, b, c, d, e) {
      switch (a >>> 30) {
        case 3:
          Za(b, c, d, e, 0);
          break;

        case 2:
          fd(b, c, d, e);
          break;

        case 1:
          pa(b, c, d, e);
      }
    }

    function Oc(a, b) {
      var c,
          d,
          e = b.M,
          f = b.Nb,
          g = a.oc,
          h = a.pc + 40,
          k = a.oc,
          l = a.pc + 584,
          m = a.oc,
          n = a.pc + 600;

      for (c = 0; 16 > c; ++c) {
        g[h + 32 * c - 1] = 129;
      }

      for (c = 0; 8 > c; ++c) {
        k[l + 32 * c - 1] = 129, m[n + 32 * c - 1] = 129;
      }

      0 < e ? g[h - 1 - 32] = k[l - 1 - 32] = m[n - 1 - 32] = 129 : (M(g, h - 32 - 1, 127, 21), M(k, l - 32 - 1, 127, 9), M(m, n - 32 - 1, 127, 9));

      for (d = 0; d < a.za; ++d) {
        var r = b.ya[b.aa + d];

        if (0 < d) {
          for (c = -1; 16 > c; ++c) {
            I(g, h + 32 * c - 4, g, h + 32 * c + 12, 4);
          }

          for (c = -1; 8 > c; ++c) {
            I(k, l + 32 * c - 4, k, l + 32 * c + 4, 4), I(m, n + 32 * c - 4, m, n + 32 * c + 4, 4);
          }
        }

        var q = a.Gd,
            t = a.Hd + d,
            v = r.ad,
            p = r.Hc;
        0 < e && (I(g, h - 32, q[t].y, 0, 16), I(k, l - 32, q[t].f, 0, 8), I(m, n - 32, q[t].ea, 0, 8));

        if (r.Za) {
          var u = g;
          var w = h - 32 + 16;
          0 < e && (d >= a.za - 1 ? M(u, w, q[t].y[15], 4) : I(u, w, q[t + 1].y, 0, 4));

          for (c = 0; 4 > c; c++) {
            u[w + 128 + c] = u[w + 256 + c] = u[w + 384 + c] = u[w + 0 + c];
          }

          for (c = 0; 16 > c; ++c, p <<= 2) {
            u = g, w = h + zd[c], W[r.Ob[c]](u, w), yd(p, v, 16 * +c, u, w);
          }
        } else if (u = xd(d, e, r.Ob[0]), Y[u](g, h), 0 != p) { for (c = 0; 16 > c; ++c, p <<= 2) {
          yd(p, v, 16 * +c, g, h + zd[c]);
        } }

        c = r.Gc;
        u = xd(d, e, r.Dd);
        ka[u](k, l);
        ka[u](m, n);
        r = c >> 0;
        p = v;
        u = k;
        w = l;
        r & 255 && (r & 170 ? Nb(p, 256, u, w) : Ob(p, 256, u, w));
        c >>= 8;
        r = m;
        p = n;
        c & 255 && (c & 170 ? Nb(v, 320, r, p) : Ob(v, 320, r, p));
        e < a.Ub - 1 && (I(q[t].y, 0, g, h + 480, 16), I(q[t].f, 0, k, l + 224, 8), I(q[t].ea, 0, m, n + 224, 8));
        c = 8 * f * a.B;
        q = a.sa;
        t = a.ta + 16 * d + 16 * f * a.R;
        v = a.qa;
        r = a.ra + 8 * d + c;
        p = a.Ha;
        u = a.Ia + 8 * d + c;

        for (c = 0; 16 > c; ++c) {
          I(q, t + c * a.R, g, h + 32 * c, 16);
        }

        for (c = 0; 8 > c; ++c) {
          I(v, r + c * a.B, k, l + 32 * c, 8), I(p, u + c * a.B, m, n + 32 * c, 8);
        }
      }
    }

    function Ad(a, b, c, d, e, f, g, h, k) {
      var l = [0],
          m = [0],
          n = 0,
          r = null != k ? k.kd : 0,
          q = null != k ? k : new md();
      if (null == a || 12 > c) { return 7; }
      q.data = a;
      q.w = b;
      q.ha = c;
      b = [b];
      c = [c];
      q.gb = [q.gb];

      a: {
        var t = b;
        var v = c;
        var p = q.gb;
        x(null != a);
        x(null != v);
        x(null != p);
        p[0] = 0;

        if (12 <= v[0] && !fa(a, t[0], "RIFF")) {
          if (fa(a, t[0] + 8, "WEBP")) {
            p = 3;
            break a;
          }

          var u = Ha(a, t[0] + 4);

          if (12 > u || 4294967286 < u) {
            p = 3;
            break a;
          }

          if (r && u > v[0] - 8) {
            p = 7;
            break a;
          }

          p[0] = u;
          t[0] += 12;
          v[0] -= 12;
        }

        p = 0;
      }

      if (0 != p) { return p; }
      u = 0 < q.gb[0];

      for (c = c[0];;) {
        t = [0];
        n = [n];

        a: {
          var w = a;
          v = b;
          p = c;
          var y = n,
              A = l,
              z = m,
              B = t;
          y[0] = 0;
          if (8 > p[0]) { p = 7; }else {
            if (!fa(w, v[0], "VP8X")) {
              if (10 != Ha(w, v[0] + 4)) {
                p = 3;
                break a;
              }

              if (18 > p[0]) {
                p = 7;
                break a;
              }

              var C = Ha(w, v[0] + 8);
              var D = 1 + Yb(w, v[0] + 12);
              w = 1 + Yb(w, v[0] + 15);

              if (2147483648 <= D * w) {
                p = 3;
                break a;
              }

              null != B && (B[0] = C);
              null != A && (A[0] = D);
              null != z && (z[0] = w);
              v[0] += 18;
              p[0] -= 18;
              y[0] = 1;
            }

            p = 0;
          }
        }

        n = n[0];
        t = t[0];
        if (0 != p) { return p; }
        v = !!(t & 2);
        if (!u && n) { return 3; }
        null != f && (f[0] = !!(t & 16));
        null != g && (g[0] = v);
        null != h && (h[0] = 0);
        g = l[0];
        t = m[0];

        if (n && v && null == k) {
          p = 0;
          break;
        }

        if (4 > c) {
          p = 7;
          break;
        }

        if (u && n || !u && !n && !fa(a, b[0], "ALPH")) {
          c = [c];
          q.na = [q.na];
          q.P = [q.P];
          q.Sa = [q.Sa];

          a: {
            C = a;
            p = b;
            u = c;
            var y = q.gb,
                A = q.na,
                z = q.P,
                B = q.Sa;
            D = 22;
            x(null != C);
            x(null != u);
            w = p[0];
            var F = u[0];
            x(null != A);
            x(null != B);
            A[0] = null;
            z[0] = null;

            for (B[0] = 0;;) {
              p[0] = w;
              u[0] = F;

              if (8 > F) {
                p = 7;
                break a;
              }

              var G = Ha(C, w + 4);

              if (4294967286 < G) {
                p = 3;
                break a;
              }

              var H = 8 + G + 1 & -2;
              D += H;

              if (0 < y && D > y) {
                p = 3;
                break a;
              }

              if (!fa(C, w, "VP8 ") || !fa(C, w, "VP8L")) {
                p = 0;
                break a;
              }

              if (F[0] < H) {
                p = 7;
                break a;
              }

              fa(C, w, "ALPH") || (A[0] = C, z[0] = w + 8, B[0] = G);
              w += H;
              F -= H;
            }
          }

          c = c[0];
          q.na = q.na[0];
          q.P = q.P[0];
          q.Sa = q.Sa[0];
          if (0 != p) { break; }
        }

        c = [c];
        q.Ja = [q.Ja];
        q.xa = [q.xa];

        a: if (y = a, p = b, u = c, A = q.gb[0], z = q.Ja, B = q.xa, C = p[0], w = !fa(y, C, "VP8 "), D = !fa(y, C, "VP8L"), x(null != y), x(null != u), x(null != z), x(null != B), 8 > u[0]) { p = 7; }else {
          if (w || D) {
            y = Ha(y, C + 4);

            if (12 <= A && y > A - 12) {
              p = 3;
              break a;
            }

            if (r && y > u[0] - 8) {
              p = 7;
              break a;
            }

            z[0] = y;
            p[0] += 8;
            u[0] -= 8;
            B[0] = D;
          } else { B[0] = 5 <= u[0] && 47 == y[C + 0] && !(y[C + 4] >> 5), z[0] = u[0]; }

          p = 0;
        }

        c = c[0];
        q.Ja = q.Ja[0];
        q.xa = q.xa[0];
        b = b[0];
        if (0 != p) { break; }
        if (4294967286 < q.Ja) { return 3; }
        null == h || v || (h[0] = q.xa ? 2 : 1);
        g = [g];
        t = [t];

        if (q.xa) {
          if (5 > c) {
            p = 7;
            break;
          }

          h = g;
          r = t;
          v = f;
          null == a || 5 > c ? a = 0 : 5 <= c && 47 == a[b + 0] && !(a[b + 4] >> 5) ? (u = [0], y = [0], A = [0], z = new Ra(), cb(z, a, b, c), mc(z, u, y, A) ? (null != h && (h[0] = u[0]), null != r && (r[0] = y[0]), null != v && (v[0] = A[0]), a = 1) : a = 0) : a = 0;
        } else {
          if (10 > c) {
            p = 7;
            break;
          }

          h = t;
          null == a || 10 > c || !Jc(a, b + 3, c - 3) ? a = 0 : (r = a[b + 0] | a[b + 1] << 8 | a[b + 2] << 16, v = (a[b + 7] << 8 | a[b + 6]) & 16383, a = (a[b + 9] << 8 | a[b + 8]) & 16383, r & 1 || 3 < (r >> 1 & 7) || !(r >> 4 & 1) || r >> 5 >= q.Ja || !v || !a ? a = 0 : (g && (g[0] = v), h && (h[0] = a), a = 1));
        }

        if (!a) { return 3; }
        g = g[0];
        t = t[0];
        if (n && (l[0] != g || m[0] != t)) { return 3; }
        null != k && (k[0] = q, k.offset = b - k.w, x(4294967286 > b - k.w), x(k.offset == k.ha - c));
        break;
      }

      return 0 == p || 7 == p && n && null == k ? (null != f && (f[0] |= null != q.na && 0 < q.na.length), null != d && (d[0] = g), null != e && (e[0] = t), 0) : p;
    }

    function hc(a, b, c) {
      var d = b.width,
          e = b.height,
          f = 0,
          g = 0,
          h = d,
          k = e;
      b.Da = null != a && 0 < a.Da;
      if (b.Da && (h = a.cd, k = a.bd, f = a.v, g = a.j, 11 > c || (f &= -2, g &= -2), 0 > f || 0 > g || 0 >= h || 0 >= k || f + h > d || g + k > e)) { return 0; }
      b.v = f;
      b.j = g;
      b.va = f + h;
      b.o = g + k;
      b.U = h;
      b.T = k;
      b.da = null != a && 0 < a.da;

      if (b.da) {
        c = [a.ib];
        f = [a.hb];
        if (!bc(h, k, c, f)) { return 0; }
        b.ib = c[0];
        b.hb = f[0];
      }

      b.ob = null != a && a.ob;
      b.Kb = null == a || !a.Sd;
      b.da && (b.ob = b.ib < 3 * d / 4 && b.hb < 3 * e / 4, b.Kb = 0);
      return 1;
    }

    function Bd(a) {
      if (null == a) { return 2; }

      if (11 > a.S) {
        var b = a.f.RGBA;
        b.fb += (a.height - 1) * b.A;
        b.A = -b.A;
      } else { b = a.f.kb, a = a.height, b.O += (a - 1) * b.fa, b.fa = -b.fa, b.N += (a - 1 >> 1) * b.Ab, b.Ab = -b.Ab, b.W += (a - 1 >> 1) * b.Db, b.Db = -b.Db, null != b.F && (b.J += (a - 1) * b.lb, b.lb = -b.lb); }

      return 0;
    }

    function Cd(a, b, c, d) {
      if (null == d || 0 >= a || 0 >= b) { return 2; }

      if (null != c) {
        if (c.Da) {
          var e = c.cd,
              f = c.bd,
              g = c.v & -2,
              h = c.j & -2;
          if (0 > g || 0 > h || 0 >= e || 0 >= f || g + e > a || h + f > b) { return 2; }
          a = e;
          b = f;
        }

        if (c.da) {
          e = [c.ib];
          f = [c.hb];
          if (!bc(a, b, e, f)) { return 2; }
          a = e[0];
          b = f[0];
        }
      }

      d.width = a;
      d.height = b;

      a: {
        var k = d.width;
        var l = d.height;
        a = d.S;
        if (0 >= k || 0 >= l || !(a >= Ca && 13 > a)) { a = 2; }else {
          if (0 >= d.Rd && null == d.sd) {
            var g = f = e = b = 0,
                h = k * Dd[a],
                m = h * l;
            11 > a || (b = (k + 1) / 2, f = (l + 1) / 2 * b, 12 == a && (e = k, g = e * l));
            l = V(m + 2 * f + g);

            if (null == l) {
              a = 1;
              break a;
            }

            d.sd = l;
            11 > a ? (k = d.f.RGBA, k.eb = l, k.fb = 0, k.A = h, k.size = m) : (k = d.f.kb, k.y = l, k.O = 0, k.fa = h, k.Fd = m, k.f = l, k.N = 0 + m, k.Ab = b, k.Cd = f, k.ea = l, k.W = 0 + m + f, k.Db = b, k.Ed = f, 12 == a && (k.F = l, k.J = 0 + m + 2 * f), k.Tc = g, k.lb = e);
          }

          b = 1;
          e = d.S;
          f = d.width;
          g = d.height;
          if (e >= Ca && 13 > e) {
            if (11 > e) { a = d.f.RGBA, h = Math.abs(a.A), b &= h * (g - 1) + f <= a.size, b &= h >= f * Dd[e], b &= null != a.eb; }else {
              a = d.f.kb;
              h = (f + 1) / 2;
              m = (g + 1) / 2;
              k = Math.abs(a.fa);
              var l = Math.abs(a.Ab),
                  n = Math.abs(a.Db),
                  r = Math.abs(a.lb),
                  q = r * (g - 1) + f;
              b &= k * (g - 1) + f <= a.Fd;
              b &= l * (m - 1) + h <= a.Cd;
              b &= n * (m - 1) + h <= a.Ed;
              b = b & k >= f & l >= h & n >= h;
              b &= null != a.y;
              b &= null != a.f;
              b &= null != a.ea;
              12 == e && (b &= r >= f, b &= q <= a.Tc, b &= null != a.F);
            }
          } else { b = 0; }
          a = b ? 0 : 2;
        }
      }

      if (0 != a) { return a; }
      null != c && c.fd && (a = Bd(d));
      return a;
    }

    var xb = 64,
        Hd = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215],
        Gd = 24,
        ob = 32,
        Xb = 8,
        Id = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
    X("Predictor0", "PredictorAdd0");

    self.Predictor0 = function () {
      return 4278190080;
    };

    self.Predictor1 = function (a) {
      return a;
    };

    self.Predictor2 = function (a, b, c) {
      return b[c + 0];
    };

    self.Predictor3 = function (a, b, c) {
      return b[c + 1];
    };

    self.Predictor4 = function (a, b, c) {
      return b[c - 1];
    };

    self.Predictor5 = function (a, b, c) {
      return aa(aa(a, b[c + 1]), b[c + 0]);
    };

    self.Predictor6 = function (a, b, c) {
      return aa(a, b[c - 1]);
    };

    self.Predictor7 = function (a, b, c) {
      return aa(a, b[c + 0]);
    };

    self.Predictor8 = function (a, b, c) {
      return aa(b[c - 1], b[c + 0]);
    };

    self.Predictor9 = function (a, b, c) {
      return aa(b[c + 0], b[c + 1]);
    };

    self.Predictor10 = function (a, b, c) {
      return aa(aa(a, b[c - 1]), aa(b[c + 0], b[c + 1]));
    };

    self.Predictor11 = function (a, b, c) {
      var d = b[c + 0];
      b = b[c - 1];
      return 0 >= Ia(d >> 24 & 255, a >> 24 & 255, b >> 24 & 255) + Ia(d >> 16 & 255, a >> 16 & 255, b >> 16 & 255) + Ia(d >> 8 & 255, a >> 8 & 255, b >> 8 & 255) + Ia(d & 255, a & 255, b & 255) ? d : a;
    };

    self.Predictor12 = function (a, b, c) {
      var d = b[c + 0];
      b = b[c - 1];
      return (sa((a >> 24 & 255) + (d >> 24 & 255) - (b >> 24 & 255)) << 24 | sa((a >> 16 & 255) + (d >> 16 & 255) - (b >> 16 & 255)) << 16 | sa((a >> 8 & 255) + (d >> 8 & 255) - (b >> 8 & 255)) << 8 | sa((a & 255) + (d & 255) - (b & 255))) >>> 0;
    };

    self.Predictor13 = function (a, b, c) {
      var d = b[c - 1];
      a = aa(a, b[c + 0]);
      return (eb(a >> 24 & 255, d >> 24 & 255) << 24 | eb(a >> 16 & 255, d >> 16 & 255) << 16 | eb(a >> 8 & 255, d >> 8 & 255) << 8 | eb(a >> 0 & 255, d >> 0 & 255)) >>> 0;
    };

    var ee = self.PredictorAdd0;
    self.PredictorAdd1 = cc;
    X("Predictor2", "PredictorAdd2");
    X("Predictor3", "PredictorAdd3");
    X("Predictor4", "PredictorAdd4");
    X("Predictor5", "PredictorAdd5");
    X("Predictor6", "PredictorAdd6");
    X("Predictor7", "PredictorAdd7");
    X("Predictor8", "PredictorAdd8");
    X("Predictor9", "PredictorAdd9");
    X("Predictor10", "PredictorAdd10");
    X("Predictor11", "PredictorAdd11");
    X("Predictor12", "PredictorAdd12");
    X("Predictor13", "PredictorAdd13");
    var fe = self.PredictorAdd2;
    ec("ColorIndexInverseTransform", "MapARGB", "32b", function (a) {
      return a >> 8 & 255;
    }, function (a) {
      return a;
    });
    ec("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function (a) {
      return a;
    }, function (a) {
      return a >> 8 & 255;
    });
    var rc = self.ColorIndexInverseTransform,
        ke = self.MapARGB,
        he = self.VP8LColorIndexInverseTransformAlpha,
        le = self.MapAlpha,
        pc,
        qc = self.VP8LPredictorsAdd = [];
    qc.length = 16;
    (self.VP8LPredictors = []).length = 16;
    (self.VP8LPredictorsAdd_C = []).length = 16;
    (self.VP8LPredictors_C = []).length = 16;
    var Fb,
        sc,
        Gb,
        Hb,
        xc,
        uc,
        bd = V(511),
        cd = V(2041),
        dd = V(225),
        ed = V(767),
        ad = 0,
        Qb = cd,
        mb = dd,
        R = ed,
        U = bd,
        Ca = 0,
        Ua = 1,
        tc = 2,
        Va = 3,
        ya = 4,
        Db = 5,
        wc = 6,
        zb = 7,
        Ab = 8,
        Ja = 9,
        Bb = 10,
        pe = [2, 3, 7],
        oe = [3, 3, 11],
        Dc = [280, 256, 256, 256, 40],
        qe = [0, 1, 1, 1, 0],
        ne = [17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
        de = [24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112],
        me = [2954, 2956, 2958, 2962, 2970, 2986, 3018, 3082, 3212, 3468, 3980, 5004],
        ie = 8,
        Lb = [4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157],
        Mb = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284],
        oa = null,
        He = [[173, 148, 140, 0], [176, 155, 140, 135, 0], [180, 157, 141, 134, 130, 0], [254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0]],
        Ie = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15],
        Mc = [-0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9],
        Fe = [[[[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]], [[253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128], [189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128], [106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]], [[1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128], [181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128], [78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]], [[1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128], [184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128], [77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]], [[1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128], [170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128], [37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]], [[1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128], [207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128], [102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]], [[1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128], [177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128], [80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62], [131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1], [68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]], [[1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128], [184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128], [81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]], [[1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128], [99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128], [23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]], [[1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128], [109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128], [44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]], [[1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128], [94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128], [22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]], [[1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128], [124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128], [35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]], [[1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128], [121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128], [45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]], [[1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128], [203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128], [137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]]], [[[253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128], [175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128], [73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]], [[1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128], [239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128], [155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]], [[1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128], [201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128], [69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]], [[1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128], [223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128], [141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]], [[1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128], [190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128], [149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128], [247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128], [240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128], [213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128], [55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255], [126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128], [61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]], [[1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128], [166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128], [39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]], [[1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128], [124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128], [24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]], [[1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128], [149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128], [28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]], [[1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128], [123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128], [20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]], [[1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128], [168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128], [47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]], [[1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128], [141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128], [42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]]]],
        Ke = [[[231, 120, 48, 89, 115, 113, 120, 152, 112], [152, 179, 64, 126, 170, 118, 46, 70, 95], [175, 69, 143, 80, 85, 82, 72, 155, 103], [56, 58, 10, 171, 218, 189, 17, 13, 152], [114, 26, 17, 163, 44, 195, 21, 10, 173], [121, 24, 80, 195, 26, 62, 44, 64, 85], [144, 71, 10, 38, 171, 213, 144, 34, 26], [170, 46, 55, 19, 136, 160, 33, 206, 71], [63, 20, 8, 114, 114, 208, 12, 9, 226], [81, 40, 11, 96, 182, 84, 29, 16, 36]], [[134, 183, 89, 137, 98, 101, 106, 165, 148], [72, 187, 100, 130, 157, 111, 32, 75, 80], [66, 102, 167, 99, 74, 62, 40, 234, 128], [41, 53, 9, 178, 241, 141, 26, 8, 107], [74, 43, 26, 146, 73, 166, 49, 23, 157], [65, 38, 105, 160, 51, 52, 31, 115, 128], [104, 79, 12, 27, 217, 255, 87, 17, 7], [87, 68, 71, 44, 114, 51, 15, 186, 23], [47, 41, 14, 110, 182, 183, 21, 17, 194], [66, 45, 25, 102, 197, 189, 23, 18, 22]], [[88, 88, 147, 150, 42, 46, 45, 196, 205], [43, 97, 183, 117, 85, 38, 35, 179, 61], [39, 53, 200, 87, 26, 21, 43, 232, 171], [56, 34, 51, 104, 114, 102, 29, 93, 77], [39, 28, 85, 171, 58, 165, 90, 98, 64], [34, 22, 116, 206, 23, 34, 43, 166, 73], [107, 54, 32, 26, 51, 1, 81, 43, 31], [68, 25, 106, 22, 64, 171, 36, 225, 114], [34, 19, 21, 102, 132, 188, 16, 76, 124], [62, 18, 78, 95, 85, 57, 50, 48, 51]], [[193, 101, 35, 159, 215, 111, 89, 46, 111], [60, 148, 31, 172, 219, 228, 21, 18, 111], [112, 113, 77, 85, 179, 255, 38, 120, 114], [40, 42, 1, 196, 245, 209, 10, 25, 109], [88, 43, 29, 140, 166, 213, 37, 43, 154], [61, 63, 30, 155, 67, 45, 68, 1, 209], [100, 80, 8, 43, 154, 1, 51, 26, 71], [142, 78, 78, 16, 255, 128, 34, 197, 171], [41, 40, 5, 102, 211, 183, 4, 1, 221], [51, 50, 17, 168, 209, 192, 23, 25, 82]], [[138, 31, 36, 171, 27, 166, 38, 44, 229], [67, 87, 58, 169, 82, 115, 26, 59, 179], [63, 59, 90, 180, 59, 166, 93, 73, 154], [40, 40, 21, 116, 143, 209, 34, 39, 175], [47, 15, 16, 183, 34, 223, 49, 45, 183], [46, 17, 33, 183, 6, 98, 15, 32, 183], [57, 46, 22, 24, 128, 1, 54, 17, 37], [65, 32, 73, 115, 28, 128, 23, 128, 205], [40, 3, 9, 115, 51, 192, 18, 6, 223], [87, 37, 9, 115, 59, 77, 64, 21, 47]], [[104, 55, 44, 218, 9, 54, 53, 130, 226], [64, 90, 70, 205, 40, 41, 23, 26, 57], [54, 57, 112, 184, 5, 41, 38, 166, 213], [30, 34, 26, 133, 152, 116, 10, 32, 134], [39, 19, 53, 221, 26, 114, 32, 73, 255], [31, 9, 65, 234, 2, 15, 1, 118, 73], [75, 32, 12, 51, 192, 255, 160, 43, 51], [88, 31, 35, 67, 102, 85, 55, 186, 85], [56, 21, 23, 111, 59, 205, 45, 37, 192], [55, 38, 70, 124, 73, 102, 1, 34, 98]], [[125, 98, 42, 88, 104, 85, 117, 175, 82], [95, 84, 53, 89, 128, 100, 113, 101, 45], [75, 79, 123, 47, 51, 128, 81, 171, 1], [57, 17, 5, 71, 102, 57, 53, 41, 49], [38, 33, 13, 121, 57, 73, 26, 1, 85], [41, 10, 67, 138, 77, 110, 90, 47, 114], [115, 21, 2, 10, 102, 255, 166, 23, 6], [101, 29, 16, 10, 85, 128, 101, 196, 26], [57, 18, 10, 102, 102, 213, 34, 20, 43], [117, 20, 15, 36, 163, 128, 68, 1, 26]], [[102, 61, 71, 37, 34, 53, 31, 243, 192], [69, 60, 71, 38, 73, 119, 28, 222, 37], [68, 45, 128, 34, 1, 47, 11, 245, 171], [62, 17, 19, 70, 146, 85, 55, 62, 70], [37, 43, 37, 154, 100, 163, 85, 160, 1], [63, 9, 92, 136, 28, 64, 32, 201, 85], [75, 15, 9, 9, 64, 255, 184, 119, 16], [86, 6, 28, 5, 64, 255, 25, 248, 1], [56, 8, 17, 132, 137, 255, 55, 116, 128], [58, 15, 20, 82, 135, 57, 26, 121, 40]], [[164, 50, 31, 137, 154, 133, 25, 35, 218], [51, 103, 44, 131, 131, 123, 31, 6, 158], [86, 40, 64, 135, 148, 224, 45, 183, 128], [22, 26, 17, 131, 240, 154, 14, 1, 209], [45, 16, 21, 91, 64, 222, 7, 1, 197], [56, 21, 39, 155, 60, 138, 23, 102, 213], [83, 12, 13, 54, 192, 255, 68, 47, 28], [85, 26, 85, 85, 128, 128, 32, 146, 171], [18, 11, 7, 63, 144, 171, 4, 4, 246], [35, 27, 10, 146, 174, 171, 12, 26, 128]], [[190, 80, 35, 99, 180, 80, 126, 54, 45], [85, 126, 47, 87, 176, 51, 41, 20, 32], [101, 75, 128, 139, 118, 146, 116, 128, 85], [56, 41, 15, 176, 236, 85, 37, 9, 62], [71, 30, 17, 119, 118, 255, 17, 18, 138], [101, 38, 60, 138, 55, 70, 43, 26, 142], [146, 36, 19, 30, 171, 255, 97, 27, 20], [138, 45, 61, 62, 219, 1, 81, 188, 64], [32, 41, 20, 117, 151, 142, 20, 21, 163], [112, 19, 12, 61, 195, 128, 48, 4, 24]]],
        Ee = [[[[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255], [249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255], [234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255], [239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255], [250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255], [234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255], [247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255], [234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255], [251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255], [248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255], [248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255], [249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]]],
        Ge = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0],
        Nc,
        Y = [],
        W = [],
        ka = [],
        Za,
        fd,
        Nb,
        pa,
        Ob,
        Xc,
        Tc,
        Yc,
        Uc,
        Zc,
        Vc,
        $c,
        Wc,
        Rc,
        Pc,
        Sc,
        Qc,
        re = 1,
        Cc = 2,
        ia = [],
        za,
        vc,
        fc,
        Fc,
        P = [];
    va("UpsampleRgbLinePair", Ga, 3);
    va("UpsampleBgrLinePair", Tb, 3);
    va("UpsampleRgbaLinePair", wd, 4);
    va("UpsampleBgraLinePair", vd, 4);
    va("UpsampleArgbLinePair", ud, 4);
    va("UpsampleRgba4444LinePair", td, 2);
    va("UpsampleRgb565LinePair", sd, 2);
    var Mf = UpsampleRgbLinePair,
        Nf = UpsampleBgrLinePair,
        nd = UpsampleRgbaLinePair,
        od = UpsampleBgraLinePair,
        pd = UpsampleArgbLinePair,
        qd = UpsampleRgba4444LinePair,
        Of = UpsampleRgb565LinePair,
        Wa = 16,
        Ba = 1 << Wa - 1,
        ta = -227,
        Eb = 482,
        rd = 6,
        Pf = (256 << rd) - 1,
        jc = 0,
        Yd = V(256),
        ae = V(256),
        $d = V(256),
        Zd = V(256),
        be = V(Eb - ta),
        ce = V(Eb - ta);
    la("YuvToRgbRow", Ga, 3);
    la("YuvToBgrRow", Tb, 3);
    la("YuvToRgbaRow", wd, 4);
    la("YuvToBgraRow", vd, 4);
    la("YuvToArgbRow", ud, 4);
    la("YuvToRgba4444Row", td, 2);
    la("YuvToRgb565Row", sd, 2);
    var zd = [0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396],
        Ya = [0, 2, 8],
        Qf = [8, 7, 6, 4, 4, 2, 2, 2, 1, 1, 1, 1],
        Ne = 1;

    this.WebPDecodeRGBA = function (a, b, c, d, e) {
      var f = Ua;
      var g = new Cf(),
          h = new Cb();
      g.ba = h;
      h.S = f;
      h.width = [h.width];
      h.height = [h.height];
      var k = h.width;
      var l = h.height,
          m = new Td();
      if (null == m || null == a) { var n = 2; }else { x(null != m), n = Ad(a, b, c, m.width, m.height, m.Pd, m.Qd, m.format, null); }
      0 != n ? k = 0 : (null != k && (k[0] = m.width[0]), null != l && (l[0] = m.height[0]), k = 1);

      if (k) {
        h.width = h.width[0];
        h.height = h.height[0];
        null != d && (d[0] = h.width);
        null != e && (e[0] = h.height);

        b: {
          d = new Oa();
          e = new md();
          e.data = a;
          e.w = b;
          e.ha = c;
          e.kd = 1;
          b = [0];
          x(null != e);
          a = Ad(e.data, e.w, e.ha, null, null, null, b, null, e);
          (0 == a || 7 == a) && b[0] && (a = 4);
          b = a;

          if (0 == b) {
            x(null != g);
            d.data = e.data;
            d.w = e.w + e.offset;
            d.ha = e.ha - e.offset;
            d.put = kc;
            d.ac = gc;
            d.bc = lc;
            d.ma = g;

            if (e.xa) {
              a = Bc();

              if (null == a) {
                g = 1;
                break b;
              }

              if (te(a, d)) {
                b = Cd(d.width, d.height, g.Oa, g.ba);

                if (d = 0 == b) {
                  c: {
                    d = a;

                    d: for (;;) {
                      if (null == d) {
                        d = 0;
                        break c;
                      }

                      x(null != d.s.yc);
                      x(null != d.s.Ya);
                      x(0 < d.s.Wb);
                      c = d.l;
                      x(null != c);
                      e = c.ma;
                      x(null != e);

                      if (0 != d.xb) {
                        d.ca = e.ba;
                        d.tb = e.tb;
                        x(null != d.ca);

                        if (!hc(e.Oa, c, Va)) {
                          d.a = 2;
                          break d;
                        }

                        if (!Ec(d, c.width)) { break d; }
                        if (c.da) { break d; }
                        (c.da || hb(d.ca.S)) && Aa();
                        11 > d.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != d.ca.f.kb.F && Aa());

                        if (d.Pb && 0 < d.s.ua && null == d.s.vb.X && !Zb(d.s.vb, d.s.Wa.Xa)) {
                          d.a = 1;
                          break d;
                        }

                        d.xb = 0;
                      }

                      if (!Jb(d, d.V, d.Ba, d.c, d.i, c.o, ge)) { break d; }
                      e.Dc = d.Ma;
                      d = 1;
                      break c;
                    }

                    x(0 != d.a);
                    d = 0;
                  }

                  d = !d;
                }

                d && (b = a.a);
              } else { b = a.a; }
            } else {
              a = new Ce();

              if (null == a) {
                g = 1;
                break b;
              }

              a.Fa = e.na;
              a.P = e.P;
              a.qc = e.Sa;

              if (Kc(a, d)) {
                if (b = Cd(d.width, d.height, g.Oa, g.ba), 0 == b) {
                  a.Aa = 0;
                  c = g.Oa;
                  e = a;
                  x(null != e);

                  if (null != c) {
                    k = c.Md;
                    k = 0 > k ? 0 : 100 < k ? 255 : 255 * k / 100;

                    if (0 < k) {
                      for (l = m = 0; 4 > l; ++l) {
                        n = e.pb[l], 12 > n.lc && (n.ia = k * Qf[0 > n.lc ? 0 : n.lc] >> 3), m |= n.ia;
                      }

                      m && (alert("todo:VP8InitRandom"), e.ia = 1);
                    }

                    e.Ga = c.Id;
                    100 < e.Ga ? e.Ga = 100 : 0 > e.Ga && (e.Ga = 0);
                  }

                  Me(a, d) || (b = a.a);
                }
              } else { b = a.a; }
            }

            0 == b && null != g.Oa && g.Oa.fd && (b = Bd(g.ba));
          }

          g = b;
        }

        f = 0 != g ? null : 11 > f ? h.f.RGBA.eb : h.f.kb.y;
      } else { f = null; }

      return f;
    };

    var Dd = [3, 4, 3, 4, 4, 2, 2, 4, 4, 4, 2, 1, 1];
  };

  new WebPDecoder();
  /*Copyright (c) 2017 Dominik Homberger
  
  
  
  https://webpjs.appspot.com
  WebPRiffParser dominikhlbg@gmail.com
  */

  function memcmp(data, data_off, str, size) {
    for (var i = 0; i < size; i++) {
      if (data[data_off + i] != str.charCodeAt(i)) { return true; }
    }

    return false;
  }

  function GetTag(data, data_off) {
    var str = '';

    for (var i = 0; i < 4; i++) {
      str += String.fromCharCode(data[data_off++]);
    }

    return str;
  }

  function GetLE16(data, data_off) {
    return data[data_off + 0] << 0 | data[data_off + 1] << 8;
  }

  function GetLE24(data, data_off) {
    return (data[data_off + 0] << 0 | data[data_off + 1] << 8 | data[data_off + 2] << 16) >>> 0;
  }

  function GetLE32(data, data_off) {
    return (data[data_off + 0] << 0 | data[data_off + 1] << 8 | data[data_off + 2] << 16 | data[data_off + 3] << 24) >>> 0;
  }

  function WebPRiffParser(src, src_off) {
    var imagearray = {};
    var i = 0;
    var alpha_chunk = false;
    var alpha_size = 0;
    var alpha_offset = 0;
    imagearray['frames'] = [];
    if (memcmp(src, src_off, 'RIFF', 4)) { return; }
    src_off += 4;
    var riff_size = GetLE32(src, src_off) + 8;
    src_off += 8;

    while (src_off < src.length) {
      var fourcc = GetTag(src, src_off);
      src_off += 4;
      var payload_size = GetLE32(src, src_off);
      src_off += 4;
      var payload_size_padded = payload_size + (payload_size & 1);

      switch (fourcc) {
        case "VP8 ":
        case "VP8L":
          if (typeof imagearray['frames'][i] === 'undefined') { imagearray['frames'][i] = {}; }
          var obj = imagearray['frames'][i];
          var height = [0];
          var width = [0];
          obj['src_off'] = alpha_chunk ? alpha_offset : src_off - 8;
          obj['src_size'] = alpha_size + payload_size + 8; //var rgba = webpdecoder.WebPDecodeRGBA(src,(alpha_chunk?alpha_offset:src_off-8),alpha_size+payload_size+8,width,height);
          //imagearray[i]={'rgba':rgba,'width':width[0],'height':height[0]};

          i++;

          if (alpha_chunk) {
            alpha_chunk = false;
            alpha_size = 0;
            alpha_offset = 0;
          }

          break;

        case "VP8X":
          var obj = imagearray['header'] = {};
          var feature_flags = obj['feature_flags'] = src[src_off];
          var src_off_ = src_off + 4;
          var canvas_width = obj['canvas_width'] = 1 + GetLE24(src, src_off_);
          src_off_ += 3;
          var canvas_height = obj['canvas_height'] = 1 + GetLE24(src, src_off_);
          src_off_ += 3;
          break;

        case "ALPH":
          alpha_chunk = true;
          alpha_size = payload_size_padded + 8;
          alpha_offset = src_off - 8;
          break;

        case "ANIM":
          var obj = imagearray['header'];
          var bgcolor = obj['bgcolor'] = GetLE32(src, src_off);
          src_off_ = src_off + 4;
          var loop_count = obj['loop_count'] = GetLE16(src, src_off_);
          src_off_ += 2;
          break;

        case "ANMF":
          var offset_x = 0,
              offset_y = 0,
              width = 0,
              height = 0,
              duration = 0,
              blend = 0,
              dispose = 0,
              temp = 0;
          var obj = imagearray['frames'][i] = {};
          obj['offset_x'] = offset_x = 2 * GetLE24(src, src_off);
          src_off += 3;
          obj['offset_y'] = offset_y = 2 * GetLE24(src, src_off);
          src_off += 3;
          obj['width'] = width = 1 + GetLE24(src, src_off);
          src_off += 3;
          obj['height'] = height = 1 + GetLE24(src, src_off);
          src_off += 3;
          obj['duration'] = duration = GetLE24(src, src_off);
          src_off += 3;
          temp = src[src_off++];
          obj['dispose'] = dispose = temp & 1;
          obj['blend'] = blend = temp >> 1 & 1;
          break;

        default:
      }

      if (fourcc != "ANMF") { src_off += payload_size_padded; }
    }

    return imagearray;
  }

  var height = [0];
  var width = [0];
  var pixels = [];
  var webpdecoder = new WebPDecoder();
  var response = imageData;
  var imagearray = WebPRiffParser(response, 0);
  imagearray['response'] = response;
  imagearray['rgbaoutput'] = true;
  imagearray['dataurl'] = false;
  var header = imagearray['header'] ? imagearray['header'] : null;
  var frames = imagearray['frames'] ? imagearray['frames'] : null;

  if (header) {
    header['loop_counter'] = header['loop_count'];
    height = header['canvas_height'];
    width = header['canvas_width'];

    for (var f = 0; f < frames.length; f++) {
      if (frames[f]['blend'] == 0) {
        break;
      }
    }
  }

  var frame = frames[0];
  var rgba = webpdecoder.WebPDecodeRGBA(response, frame['src_off'], frame['src_size'], width, height);
  frame['rgba'] = rgba;
  frame['imgwidth'] = width[0];
  frame['imgheight'] = height[0];

  for (var i = 0; i < width[0] * height[0] * 4; i++) {
    pixels[i] = rgba[i];
  }

  this.width = width;
  this.height = height;
  this.data = pixels;
  return this;
}

WebPDecoder.prototype.getData = function () {
  return this.data;
};

try {
  exports.WebPDecoder = WebPDecoder;
} catch (e) {} // CommonJS.

/*
 Copyright (c) 2013 Gildas Lormeau. All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:

 1. Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.

 2. Redistributions in binary form must reproduce the above copyright 
 notice, this list of conditions and the following disclaimer in 
 the documentation and/or other materials provided with the distribution.

 3. The names of the authors may not be used to endorse or promote products
 derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,
 INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,
 INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.
 * JZlib is based on zlib-1.1.3, so all credit should go authors
 * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)
 * and contributors of zlib.
 */
(function (global) {

  var MAX_BITS = 15;
  var D_CODES = 30;
  var BL_CODES = 19;
  var LENGTH_CODES = 29;
  var LITERALS = 256;
  var L_CODES = LITERALS + 1 + LENGTH_CODES;
  var HEAP_SIZE = 2 * L_CODES + 1;
  var END_BLOCK = 256; // Bit length codes must not exceed MAX_BL_BITS bits

  var MAX_BL_BITS = 7; // repeat previous bit length 3-6 times (2 bits of repeat count)

  var REP_3_6 = 16; // repeat a zero length 3-10 times (3 bits of repeat count)

  var REPZ_3_10 = 17; // repeat a zero length 11-138 times (7 bits of repeat count)

  var REPZ_11_138 = 18; // The lengths of the bit length codes are sent in order of decreasing
  // probability, to avoid transmitting the lengths for unused bit
  // length codes.

  var Buf_size = 8 * 2; // JZlib version : "1.0.2"

  var Z_DEFAULT_COMPRESSION = -1; // compression strategy

  var Z_FILTERED = 1;
  var Z_HUFFMAN_ONLY = 2;
  var Z_DEFAULT_STRATEGY = 0;
  var Z_NO_FLUSH = 0;
  var Z_PARTIAL_FLUSH = 1;
  var Z_FULL_FLUSH = 3;
  var Z_FINISH = 4;
  var Z_OK = 0;
  var Z_STREAM_END = 1;
  var Z_NEED_DICT = 2;
  var Z_STREAM_ERROR = -2;
  var Z_DATA_ERROR = -3;
  var Z_BUF_ERROR = -5; // Tree
  // see definition of array dist_code below

  var _dist_code = [0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29];

  function Tree() {
    var that = this; // dyn_tree; // the dynamic tree
    // max_code; // largest code with non zero frequency
    // stat_desc; // the corresponding static tree
    // Compute the optimal bit lengths for a tree and update the total bit
    // length
    // for the current block.
    // IN assertion: the fields freq and dad are set, heap[heap_max] and
    // above are the tree nodes sorted by increasing frequency.
    // OUT assertions: the field len is set to the optimal bit length, the
    // array bl_count contains the frequencies for each bit length.
    // The length opt_len is updated; static_len is also updated if stree is
    // not null.

    function gen_bitlen(s) {
      var tree = that.dyn_tree;
      var stree = that.stat_desc.static_tree;
      var extra = that.stat_desc.extra_bits;
      var base = that.stat_desc.extra_base;
      var max_length = that.stat_desc.max_length;
      var h; // heap index

      var n, m; // iterate over the tree elements

      var bits; // bit length

      var xbits; // extra bits

      var f; // frequency

      var overflow = 0; // number of elements with bit length too large

      for (bits = 0; bits <= MAX_BITS; bits++) {
        s.bl_count[bits] = 0;
      } // In a first pass, compute the optimal bit lengths (which may
      // overflow in the case of the bit length tree).


      tree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap

      for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;

        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }

        tree[n * 2 + 1] = bits; // We overwrite tree[n*2+1] which is no longer needed

        if (n > that.max_code) { continue; } // not a leaf node

        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) { xbits = extra[n - base]; }
        f = tree[n * 2];
        s.opt_len += f * (bits + xbits);
        if (stree) { s.static_len += f * (stree[n * 2 + 1] + xbits); }
      }

      if (overflow === 0) { return; } // This happens for example on obj2 and pic of the Calgary corpus
      // Find the first bit length which could increase:

      do {
        bits = max_length - 1;

        while (s.bl_count[bits] === 0) {
          bits--;
        }

        s.bl_count[bits]--; // move one leaf down the tree

        s.bl_count[bits + 1] += 2; // move one overflow item as its brother

        s.bl_count[max_length]--; // The brother of the overflow item also moves one step up,
        // but this does not affect bl_count[max_length]

        overflow -= 2;
      } while (overflow > 0);

      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];

        while (n !== 0) {
          m = s.heap[--h];
          if (m > that.max_code) { continue; }

          if (tree[m * 2 + 1] !== bits) {
            s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
            tree[m * 2 + 1] = bits;
          }

          n--;
        }
      }
    } // Reverse the first len bits of a code, using straightforward code (a
    // faster
    // method would use a table)
    // IN assertion: 1 <= len <= 15


    function bi_reverse(code, // the value to invert
    len // its bit length
    ) {
      var res = 0;

      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);

      return res >>> 1;
    } // Generate the codes for a given tree and bit counts (which need not be
    // optimal).
    // IN assertion: the array bl_count contains the bit length statistics for
    // the given tree and the field len is set for all tree elements.
    // OUT assertion: the field code is set for all tree elements of non
    // zero code length.


    function gen_codes(tree, // the tree to decorate
    max_code, // largest code with non zero frequency
    bl_count // number of codes at each bit length
    ) {
      var next_code = []; // next code value for each
      // bit length

      var code = 0; // running code value

      var bits; // bit index

      var n; // code index

      var len; // The distribution counts are first used to generate the code values
      // without bit reversal.

      for (bits = 1; bits <= MAX_BITS; bits++) {
        next_code[bits] = code = code + bl_count[bits - 1] << 1;
      } // Check that the bit counts in bl_count are consistent. The last code
      // must be all ones.
      // Assert (code + bl_count[MAX_BITS]-1 === (1<<MAX_BITS)-1,
      // "inconsistent bit counts");
      // Tracev((stderr,"\ngen_codes: max_code %d ", max_code));


      for (n = 0; n <= max_code; n++) {
        len = tree[n * 2 + 1];
        if (len === 0) { continue; } // Now reverse the bits

        tree[n * 2] = bi_reverse(next_code[len]++, len);
      }
    } // Construct one Huffman tree and assigns the code bit strings and lengths.
    // Update the total bit length for the current block.
    // IN assertion: the field freq is set for all tree elements.
    // OUT assertions: the fields len and code are set to the optimal bit length
    // and corresponding code. The length opt_len is updated; static_len is
    // also updated if stree is not null. The field max_code is set.


    that.build_tree = function (s) {
      var tree = that.dyn_tree;
      var stree = that.stat_desc.static_tree;
      var elems = that.stat_desc.elems;
      var n, m; // iterate over heap elements

      var max_code = -1; // largest code with non zero frequency

      var node; // new node being created
      // Construct the initial heap, with least frequent element in
      // heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
      // heap[0] is not used.

      s.heap_len = 0;
      s.heap_max = HEAP_SIZE;

      for (n = 0; n < elems; n++) {
        if (tree[n * 2] !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;
        } else {
          tree[n * 2 + 1] = 0;
        }
      } // The pkzip format requires that at least one distance code exists,
      // and that at least one bit should be sent even if there is only one
      // possible code. So to avoid special checks later on we force at least
      // two codes of non zero frequency.


      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
        tree[node * 2] = 1;
        s.depth[node] = 0;
        s.opt_len--;
        if (stree) { s.static_len -= stree[node * 2 + 1]; } // node is 0 or 1 so it does not have extra bits
      }

      that.max_code = max_code; // The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
      // establish sub-heaps of increasing lengths:

      for (n = Math.floor(s.heap_len / 2); n >= 1; n--) {
        s.pqdownheap(tree, n);
      } // Construct the Huffman tree by repeatedly combining the least two
      // frequent nodes.


      node = elems; // next internal node of the tree

      do {
        // n = node of least frequency
        n = s.heap[1];
        s.heap[1] = s.heap[s.heap_len--];
        s.pqdownheap(tree, 1);
        m = s.heap[1]; // m = node of next least frequency

        s.heap[--s.heap_max] = n; // keep the nodes sorted by frequency

        s.heap[--s.heap_max] = m; // Create a new node father of n and m

        tree[node * 2] = tree[n * 2] + tree[m * 2];
        s.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;
        tree[n * 2 + 1] = tree[m * 2 + 1] = node; // and insert the new node in the heap

        s.heap[1] = node++;
        s.pqdownheap(tree, 1);
      } while (s.heap_len >= 2);

      s.heap[--s.heap_max] = s.heap[1]; // At this point, the fields freq and dad are set. We can now
      // generate the bit lengths.

      gen_bitlen(s); // The field len is now set, we can generate the bit codes

      gen_codes(tree, that.max_code, s.bl_count);
    };
  }

  Tree._length_code = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28];
  Tree.base_length = [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0];
  Tree.base_dist = [0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384, 24576]; // Mapping from a distance to a distance code. dist is the distance - 1 and
  // must not have side effects. _dist_code[256] and _dist_code[257] are never
  // used.

  Tree.d_code = function (dist) {
    return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
  }; // extra bits for each length code


  Tree.extra_lbits = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]; // extra bits for each distance code

  Tree.extra_dbits = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]; // extra bits for each bit length code

  Tree.extra_blbits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
  Tree.bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]; // StaticTree

  function StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {
    var that = this;
    that.static_tree = static_tree;
    that.extra_bits = extra_bits;
    that.extra_base = extra_base;
    that.elems = elems;
    that.max_length = max_length;
  }

  StaticTree.static_ltree = [12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8, 130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42, 8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8, 22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8, 222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113, 8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8, 69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8, 173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9, 51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9, 427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379, 9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23, 9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9, 399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9, 223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7, 40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8, 99, 8, 227, 8];
  StaticTree.static_dtree = [0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5, 25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5];
  StaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
  StaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);
  StaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS); // Deflate

  var MAX_MEM_LEVEL = 9;
  var DEF_MEM_LEVEL = 8;

  function Config(good_length, max_lazy, nice_length, max_chain, func) {
    var that = this;
    that.good_length = good_length;
    that.max_lazy = max_lazy;
    that.nice_length = nice_length;
    that.max_chain = max_chain;
    that.func = func;
  }

  var STORED = 0;
  var FAST = 1;
  var SLOW = 2;
  var config_table = [new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST), new Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW), new Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW)];
  var z_errmsg = ["need dictionary", // Z_NEED_DICT
  // 2
  "stream end", // Z_STREAM_END 1
  "", // Z_OK 0
  "", // Z_ERRNO (-1)
  "stream error", // Z_STREAM_ERROR (-2)
  "data error", // Z_DATA_ERROR (-3)
  "", // Z_MEM_ERROR (-4)
  "buffer error", // Z_BUF_ERROR (-5)
  "", // Z_VERSION_ERROR (-6)
  ""]; // block not completed, need more input or more output

  var NeedMore = 0; // block flush performed

  var BlockDone = 1; // finish started, need only more output at next deflate

  var FinishStarted = 2; // finish done, accept no more input or output

  var FinishDone = 3; // preset dictionary flag in zlib header

  var PRESET_DICT = 0x20;
  var INIT_STATE = 42;
  var BUSY_STATE = 113;
  var FINISH_STATE = 666; // The deflate compression method

  var Z_DEFLATED = 8;
  var STORED_BLOCK = 0;
  var STATIC_TREES = 1;
  var DYN_TREES = 2;
  var MIN_MATCH = 3;
  var MAX_MATCH = 258;
  var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;

  function smaller(tree, n, m, depth) {
    var tn2 = tree[n * 2];
    var tm2 = tree[m * 2];
    return tn2 < tm2 || tn2 === tm2 && depth[n] <= depth[m];
  }

  function Deflate() {
    var that = this;
    var strm; // pointer back to this zlib stream

    var status; // as the name implies
    // pending_buf; // output still pending

    var pending_buf_size; // size of pending_buf

    var last_flush; // value of flush param for previous deflate call

    var w_size; // LZ77 window size (32K by default)

    var w_bits; // log2(w_size) (8..16)

    var w_mask; // w_size - 1

    var window; // Sliding window. Input bytes are read into the second half of the window,
    // and move to the first half later to keep a dictionary of at least wSize
    // bytes. With this organization, matches are limited to a distance of
    // wSize-MAX_MATCH bytes, but this ensures that IO is always
    // performed with a length multiple of the block size. Also, it limits
    // the window size to 64K, which is quite useful on MSDOS.
    // To do: use the user input buffer as sliding window.

    var window_size; // Actual size of window: 2*wSize, except when the user input buffer
    // is directly used as sliding window.

    var prev; // Link to older string with same hash index. To limit the size of this
    // array to 64K, this link is maintained only for the last 32K strings.
    // An index in this array is thus a window index modulo 32K.

    var head; // Heads of the hash chains or NIL.

    var ins_h; // hash index of string to be inserted

    var hash_size; // number of elements in hash table

    var hash_bits; // log2(hash_size)

    var hash_mask; // hash_size-1
    // Number of bits by which ins_h must be shifted at each input
    // step. It must be such that after MIN_MATCH steps, the oldest
    // byte no longer takes part in the hash key, that is:
    // hash_shift * MIN_MATCH >= hash_bits

    var hash_shift; // Window position at the beginning of the current output block. Gets
    // negative when the window is moved backwards.

    var block_start;
    var match_length; // length of best match

    var prev_match; // previous match

    var match_available; // set if previous match exists

    var strstart; // start of string to insert

    var match_start; // start of matching string

    var lookahead; // number of valid bytes ahead in window
    // Length of the best match at previous step. Matches not greater than this
    // are discarded. This is used in the lazy match evaluation.

    var prev_length; // To speed up deflation, hash chains are never searched beyond this
    // length. A higher limit improves compression ratio but degrades the speed.

    var max_chain_length; // Attempt to find a better match only when the current match is strictly
    // smaller than this value. This mechanism is used only for compression
    // levels >= 4.

    var max_lazy_match; // Insert new strings in the hash table only if the match length is not
    // greater than this length. This saves time but degrades compression.
    // max_insert_length is used only for compression levels <= 3.

    var level; // compression level (1..9)

    var strategy; // favor or force Huffman coding
    // Use a faster search when the previous match is longer than this

    var good_match; // Stop searching when current match exceeds this

    var nice_match;
    var dyn_ltree; // literal and length tree

    var dyn_dtree; // distance tree

    var bl_tree; // Huffman tree for bit lengths

    var l_desc = new Tree(); // desc for literal tree

    var d_desc = new Tree(); // desc for distance tree

    var bl_desc = new Tree(); // desc for bit length tree
    // that.heap_len; // number of elements in the heap
    // that.heap_max; // element of largest frequency
    // The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
    // The same heap array is used to build all trees.
    // Depth of each subtree used as tie breaker for trees of equal frequency

    that.depth = [];
    var l_buf; // index for literals or lengths */
    // Size of match buffer for literals/lengths. There are 4 reasons for
    // limiting lit_bufsize to 64K:
    // - frequencies can be kept in 16 bit counters
    // - if compression is not successful for the first block, all input
    // data is still in the window so we can still emit a stored block even
    // when input comes from standard input. (This can also be done for
    // all blocks if lit_bufsize is not greater than 32K.)
    // - if compression is not successful for a file smaller than 64K, we can
    // even emit a stored file instead of a stored block (saving 5 bytes).
    // This is applicable only for zip (not gzip or zlib).
    // - creating new Huffman trees less frequently may not provide fast
    // adaptation to changes in the input data statistics. (Take for
    // example a binary file with poorly compressible code followed by
    // a highly compressible string table.) Smaller buffer sizes give
    // fast adaptation but have of course the overhead of transmitting
    // trees more frequently.
    // - I can't count above 4

    var lit_bufsize;
    var last_lit; // running index in l_buf
    // Buffer for distances. To simplify the code, d_buf and l_buf have
    // the same number of elements. To use different lengths, an extra flag
    // array would be necessary.

    var d_buf; // index of pendig_buf
    // that.opt_len; // bit length of current block with optimal trees
    // that.static_len; // bit length of current block with static trees

    var matches; // number of string matches in current block

    var last_eob_len; // bit length of EOB code for last block
    // Output buffer. bits are inserted starting at the bottom (least
    // significant bits).

    var bi_buf; // Number of valid bits in bi_buf. All bits above the last valid bit
    // are always zero.

    var bi_valid; // number of codes at each bit length for an optimal tree

    that.bl_count = []; // heap used to build the Huffman trees

    that.heap = [];
    dyn_ltree = [];
    dyn_dtree = [];
    bl_tree = [];

    function lm_init() {
      var i;
      window_size = 2 * w_size;
      head[hash_size - 1] = 0;

      for (i = 0; i < hash_size - 1; i++) {
        head[i] = 0;
      } // Set the default configuration parameters:


      max_lazy_match = config_table[level].max_lazy;
      good_match = config_table[level].good_length;
      nice_match = config_table[level].nice_length;
      max_chain_length = config_table[level].max_chain;
      strstart = 0;
      block_start = 0;
      lookahead = 0;
      match_length = prev_length = MIN_MATCH - 1;
      match_available = 0;
      ins_h = 0;
    }

    function init_block() {
      var i; // Initialize the trees.

      for (i = 0; i < L_CODES; i++) {
        dyn_ltree[i * 2] = 0;
      }

      for (i = 0; i < D_CODES; i++) {
        dyn_dtree[i * 2] = 0;
      }

      for (i = 0; i < BL_CODES; i++) {
        bl_tree[i * 2] = 0;
      }

      dyn_ltree[END_BLOCK * 2] = 1;
      that.opt_len = that.static_len = 0;
      last_lit = matches = 0;
    } // Initialize the tree data structures for a new zlib stream.


    function tr_init() {
      l_desc.dyn_tree = dyn_ltree;
      l_desc.stat_desc = StaticTree.static_l_desc;
      d_desc.dyn_tree = dyn_dtree;
      d_desc.stat_desc = StaticTree.static_d_desc;
      bl_desc.dyn_tree = bl_tree;
      bl_desc.stat_desc = StaticTree.static_bl_desc;
      bi_buf = 0;
      bi_valid = 0;
      last_eob_len = 8; // enough lookahead for inflate
      // Initialize the first block of the first file:

      init_block();
    } // Restore the heap property by moving down the tree starting at node k,
    // exchanging a node with the smallest of its two sons if necessary,
    // stopping
    // when the heap property is re-established (each father smaller than its
    // two sons).


    that.pqdownheap = function (tree, // the tree to restore
    k // node to move down
    ) {
      var heap = that.heap;
      var v = heap[k];
      var j = k << 1; // left son of k

      while (j <= that.heap_len) {
        // Set j to the smallest of the two sons:
        if (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {
          j++;
        } // Exit if v is smaller than both sons


        if (smaller(tree, v, heap[j], that.depth)) { break; } // Exchange v with the smallest son

        heap[k] = heap[j];
        k = j; // And continue down the tree, setting j to the left son of k

        j <<= 1;
      }

      heap[k] = v;
    }; // Scan a literal or distance tree to determine the frequencies of the codes
    // in the bit length tree.


    function scan_tree(tree, // the tree to be scanned
    max_code // and its largest code of non zero frequency
    ) {
      var n; // iterates over all tree elements

      var prevlen = -1; // last emitted length

      var curlen; // length of current code

      var nextlen = tree[0 * 2 + 1]; // length of next code

      var count = 0; // repeat count of the current code

      var max_count = 7; // max repeat count

      var min_count = 4; // min repeat count

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }

      tree[(max_code + 1) * 2 + 1] = 0xffff; // guard

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];

        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          bl_tree[curlen * 2] += count;
        } else if (curlen !== 0) {
          if (curlen !== prevlen) { bl_tree[curlen * 2]++; }
          bl_tree[REP_3_6 * 2]++;
        } else if (count <= 10) {
          bl_tree[REPZ_3_10 * 2]++;
        } else {
          bl_tree[REPZ_11_138 * 2]++;
        }

        count = 0;
        prevlen = curlen;

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    } // Construct the Huffman tree for the bit lengths and return the index in
    // bl_order of the last bit length code to send.


    function build_bl_tree() {
      var max_blindex; // index of last bit length code of non zero freq
      // Determine the bit length frequencies for literal and distance trees

      scan_tree(dyn_ltree, l_desc.max_code);
      scan_tree(dyn_dtree, d_desc.max_code); // Build the bit length tree:

      bl_desc.build_tree(that); // opt_len now includes the length of the tree representations, except
      // the lengths of the bit lengths codes and the 5+5+4 bits for the
      // counts.
      // Determine the number of bit length codes to send. The pkzip format
      // requires that at least 4 bit length codes be sent. (appnote.txt says
      // 3 but the actual value used is 4.)

      for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
        if (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0) { break; }
      } // Update opt_len to include the bit length tree and counts


      that.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      return max_blindex;
    } // Output a byte on the stream.
    // IN assertion: there is enough room in pending_buf.


    function put_byte(p) {
      that.pending_buf[that.pending++] = p;
    }

    function put_short(w) {
      put_byte(w & 0xff);
      put_byte(w >>> 8 & 0xff);
    }

    function putShortMSB(b) {
      put_byte(b >> 8 & 0xff);
      put_byte(b & 0xff & 0xff);
    }

    function send_bits(value, length) {
      var val,
          len = length;

      if (bi_valid > Buf_size - len) {
        val = value; // bi_buf |= (val << bi_valid);

        bi_buf |= val << bi_valid & 0xffff;
        put_short(bi_buf);
        bi_buf = val >>> Buf_size - bi_valid;
        bi_valid += len - Buf_size;
      } else {
        // bi_buf |= (value) << bi_valid;
        bi_buf |= value << bi_valid & 0xffff;
        bi_valid += len;
      }
    }

    function send_code(c, tree) {
      var c2 = c * 2;
      send_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);
    } // Send a literal or distance tree in compressed form, using the codes in
    // bl_tree.


    function send_tree(tree, // the tree to be sent
    max_code // and its largest code of non zero frequency
    ) {
      var n; // iterates over all tree elements

      var prevlen = -1; // last emitted length

      var curlen; // length of current code

      var nextlen = tree[0 * 2 + 1]; // length of next code

      var count = 0; // repeat count of the current code

      var max_count = 7; // max repeat count

      var min_count = 4; // min repeat count

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1];

        if (++count < max_count && curlen === nextlen) {
          continue;
        } else if (count < min_count) {
          do {
            send_code(curlen, bl_tree);
          } while (--count !== 0);
        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(curlen, bl_tree);
            count--;
          }

          send_code(REP_3_6, bl_tree);
          send_bits(count - 3, 2);
        } else if (count <= 10) {
          send_code(REPZ_3_10, bl_tree);
          send_bits(count - 3, 3);
        } else {
          send_code(REPZ_11_138, bl_tree);
          send_bits(count - 11, 7);
        }

        count = 0;
        prevlen = curlen;

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;
        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;
        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    } // Send the header for a block using dynamic Huffman trees: the counts, the
    // lengths of the bit length codes, the literal tree and the distance tree.
    // IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.


    function send_all_trees(lcodes, dcodes, blcodes) {
      var rank; // index in bl_order

      send_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt

      send_bits(dcodes - 1, 5);
      send_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt

      for (rank = 0; rank < blcodes; rank++) {
        send_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);
      }

      send_tree(dyn_ltree, lcodes - 1); // literal tree

      send_tree(dyn_dtree, dcodes - 1); // distance tree
    } // Flush the bit buffer, keeping at most 7 bits in it.


    function bi_flush() {
      if (bi_valid === 16) {
        put_short(bi_buf);
        bi_buf = 0;
        bi_valid = 0;
      } else if (bi_valid >= 8) {
        put_byte(bi_buf & 0xff);
        bi_buf >>>= 8;
        bi_valid -= 8;
      }
    } // Send one empty static block to give enough lookahead for inflate.
    // This takes 10 bits, of which 7 may remain in the bit buffer.
    // The current inflate code requires 9 bits of lookahead. If the
    // last two codes for the previous block (real code plus EOB) were coded
    // on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode
    // the last real code. In this case we send two empty static blocks instead
    // of one. (There are no problems if the previous block is stored or fixed.)
    // To simplify the code, we assume the worst case of last real code encoded
    // on one bit only.


    function _tr_align() {
      send_bits(STATIC_TREES << 1, 3);
      send_code(END_BLOCK, StaticTree.static_ltree);
      bi_flush(); // Of the 10 bits for the empty block, we have already sent
      // (10 - bi_valid) bits. The lookahead for the last real code (before
      // the EOB of the previous block) was thus at least one plus the length
      // of the EOB plus what we have just sent of the empty static block.

      if (1 + last_eob_len + 10 - bi_valid < 9) {
        send_bits(STATIC_TREES << 1, 3);
        send_code(END_BLOCK, StaticTree.static_ltree);
        bi_flush();
      }

      last_eob_len = 7;
    } // Save the match info and tally the frequency counts. Return true if
    // the current block must be flushed.


    function _tr_tally(dist, // distance of matched string
    lc // match length-MIN_MATCH or unmatched char (if dist==0)
    ) {
      var out_length, in_length, dcode;
      that.pending_buf[d_buf + last_lit * 2] = dist >>> 8 & 0xff;
      that.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;
      that.pending_buf[l_buf + last_lit] = lc & 0xff;
      last_lit++;

      if (dist === 0) {
        // lc is the unmatched char
        dyn_ltree[lc * 2]++;
      } else {
        matches++; // Here, lc is the match length - MIN_MATCH

        dist--; // dist = match distance - 1

        dyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;
        dyn_dtree[Tree.d_code(dist) * 2]++;
      }

      if ((last_lit & 0x1fff) === 0 && level > 2) {
        // Compute an upper bound for the compressed length
        out_length = last_lit * 8;
        in_length = strstart - block_start;

        for (dcode = 0; dcode < D_CODES; dcode++) {
          out_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);
        }

        out_length >>>= 3;
        if (matches < Math.floor(last_lit / 2) && out_length < Math.floor(in_length / 2)) { return true; }
      }

      return last_lit === lit_bufsize - 1; // We avoid equality with lit_bufsize because of wraparound at 64K
      // on 16 bit machines and because stored blocks are restricted to
      // 64K-1 bytes.
    } // Send the block data compressed using the given Huffman trees


    function compress_block(ltree, dtree) {
      var dist; // distance of matched string

      var lc; // match length or unmatched char (if dist === 0)

      var lx = 0; // running index in l_buf

      var code; // the code to send

      var extra; // number of extra bits to send

      if (last_lit !== 0) {
        do {
          dist = that.pending_buf[d_buf + lx * 2] << 8 & 0xff00 | that.pending_buf[d_buf + lx * 2 + 1] & 0xff;
          lc = that.pending_buf[l_buf + lx] & 0xff;
          lx++;

          if (dist === 0) {
            send_code(lc, ltree); // send a literal byte
          } else {
            // Here, lc is the match length - MIN_MATCH
            code = Tree._length_code[lc];
            send_code(code + LITERALS + 1, ltree); // send the length
            // code

            extra = Tree.extra_lbits[code];

            if (extra !== 0) {
              lc -= Tree.base_length[code];
              send_bits(lc, extra); // send the extra length bits
            }

            dist--; // dist is now the match distance - 1

            code = Tree.d_code(dist);
            send_code(code, dtree); // send the distance code

            extra = Tree.extra_dbits[code];

            if (extra !== 0) {
              dist -= Tree.base_dist[code];
              send_bits(dist, extra); // send the extra distance bits
            }
          } // literal or match pair ?
          // Check that the overlay between pending_buf and d_buf+l_buf is
          // ok:

        } while (lx < last_lit);
      }

      send_code(END_BLOCK, ltree);
      last_eob_len = ltree[END_BLOCK * 2 + 1];
    } // Flush the bit buffer and align the output on a byte boundary


    function bi_windup() {
      if (bi_valid > 8) {
        put_short(bi_buf);
      } else if (bi_valid > 0) {
        put_byte(bi_buf & 0xff);
      }

      bi_buf = 0;
      bi_valid = 0;
    } // Copy a stored block, storing first the length and its
    // one's complement if requested.


    function copy_block(buf, // the input data
    len, // its length
    header // true if block header must be written
    ) {
      bi_windup(); // align on byte boundary

      last_eob_len = 8; // enough lookahead for inflate

      if (header) {
        put_short(len);
        put_short(~len);
      }

      that.pending_buf.set(window.subarray(buf, buf + len), that.pending);
      that.pending += len;
    } // Send a stored block


    function _tr_stored_block(buf, // input block
    stored_len, // length of input block
    eof // true if this is the last block for a file
    ) {
      send_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type

      copy_block(buf, stored_len, true); // with header
    } // Determine the best encoding for the current block: dynamic trees, static
    // trees or store, and output the encoded block to the zip file.


    function _tr_flush_block(buf, // input block, or NULL if too old
    stored_len, // length of input block
    eof // true if this is the last block for a file
    ) {
      var opt_lenb, static_lenb; // opt_len and static_len in bytes

      var max_blindex = 0; // index of last bit length code of non zero freq
      // Build the Huffman trees unless a stored block is forced

      if (level > 0) {
        // Construct the literal and distance trees
        l_desc.build_tree(that);
        d_desc.build_tree(that); // At this point, opt_len and static_len are the total bit lengths
        // of
        // the compressed block data, excluding the tree representations.
        // Build the bit length tree for the above two trees, and get the
        // index
        // in bl_order of the last bit length code to send.

        max_blindex = build_bl_tree(); // Determine the best encoding. Compute first the block length in
        // bytes

        opt_lenb = that.opt_len + 3 + 7 >>> 3;
        static_lenb = that.static_len + 3 + 7 >>> 3;
        if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }
      } else {
        opt_lenb = static_lenb = stored_len + 5; // force a stored block
      }

      if (stored_len + 4 <= opt_lenb && buf !== -1) {
        // 4: two words for the lengths
        // The test buf !== NULL is only necessary if LIT_BUFSIZE > WSIZE.
        // Otherwise we can't have processed more than WSIZE input bytes
        // since
        // the last block flush, because compression would have been
        // successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
        // transform a block into a stored block.
        _tr_stored_block(buf, stored_len, eof);
      } else if (static_lenb === opt_lenb) {
        send_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);
        compress_block(StaticTree.static_ltree, StaticTree.static_dtree);
      } else {
        send_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);
        send_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);
        compress_block(dyn_ltree, dyn_dtree);
      } // The above check is made mod 2^32, for files larger than 512 MB
      // and uLong implemented on 32 bits.


      init_block();

      if (eof) {
        bi_windup();
      }
    }

    function flush_block_only(eof) {
      _tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);

      block_start = strstart;
      strm.flush_pending();
    } // Fill the window when the lookahead becomes insufficient.
    // Updates strstart and lookahead.
    //
    // IN assertion: lookahead < MIN_LOOKAHEAD
    // OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
    // At least one byte has been read, or avail_in === 0; reads are
    // performed for at least two bytes (required for the zip translate_eol
    // option -- not supported here).


    function fill_window() {
      var n, m;
      var p;
      var more; // Amount of free space at the end of the window.

      do {
        more = window_size - lookahead - strstart; // Deal with !@#$% 64K limit:

        if (more === 0 && strstart === 0 && lookahead === 0) {
          more = w_size;
        } else if (more === -1) {
          // Very unlikely, but possible on 16 bit machine if strstart ==
          // 0
          // and lookahead === 1 (input done one byte at time)
          more--; // If the window is almost full and there is insufficient
          // lookahead,
          // move the upper half to the lower one to make room in the
          // upper half.
        } else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {
          window.set(window.subarray(w_size, w_size + w_size), 0);
          match_start -= w_size;
          strstart -= w_size; // we now have strstart >= MAX_DIST

          block_start -= w_size; // Slide the hash table (could be avoided with 32 bit values
          // at the expense of memory usage). We slide even when level ==
          // 0
          // to keep the hash table consistent if we switch back to level
          // > 0
          // later. (Using level 0 permanently is not an optimal usage of
          // zlib, so we don't care about this pathological case.)

          n = hash_size;
          p = n;

          do {
            m = head[--p] & 0xffff;
            head[p] = m >= w_size ? m - w_size : 0;
          } while (--n !== 0);

          n = w_size;
          p = n;

          do {
            m = prev[--p] & 0xffff;
            prev[p] = m >= w_size ? m - w_size : 0; // If n is not on any hash chain, prev[n] is garbage but
            // its value will never be used.
          } while (--n !== 0);

          more += w_size;
        }

        if (strm.avail_in === 0) { return; } // If there was no sliding:
        // strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
        // more === window_size - lookahead - strstart
        // => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
        // => more >= window_size - 2*WSIZE + 2
        // In the BIG_MEM or MMAP case (not yet supported),
        // window_size === input_size + MIN_LOOKAHEAD &&
        // strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
        // Otherwise, window_size === 2*WSIZE so more >= 2.
        // If there was sliding, more >= WSIZE. So in all cases, more >= 2.

        n = strm.read_buf(window, strstart + lookahead, more);
        lookahead += n; // Initialize the hash value now that we have some input:

        if (lookahead >= MIN_MATCH) {
          ins_h = window[strstart] & 0xff;
          ins_h = (ins_h << hash_shift ^ window[strstart + 1] & 0xff) & hash_mask;
        } // If the whole input has less than MIN_MATCH bytes, ins_h is
        // garbage,
        // but this is not important since only literal bytes will be
        // emitted.

      } while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);
    } // Copy without compression as much as possible from the input stream,
    // return
    // the current block state.
    // This function does not insert new strings in the dictionary since
    // uncompressible data is probably not useful. This function is used
    // only for the level=0 compression option.
    // NOTE: this function should be optimized to avoid extra copying from
    // window to pending_buf.


    function deflate_stored(flush) {
      // Stored blocks are limited to 0xffff bytes, pending_buf is limited
      // to pending_buf_size, and each stored block has a 5 byte header:
      var max_block_size = 0xffff;
      var max_start;

      if (max_block_size > pending_buf_size - 5) {
        max_block_size = pending_buf_size - 5;
      } // Copy as much as possible from input to output:


      while (true) {
        // Fill the window as much as possible:
        if (lookahead <= 1) {
          fill_window();
          if (lookahead === 0 && flush === Z_NO_FLUSH) { return NeedMore; }
          if (lookahead === 0) { break; } // flush the current block
        }

        strstart += lookahead;
        lookahead = 0; // Emit a stored block if pending_buf will be full:

        max_start = block_start + max_block_size;

        if (strstart === 0 || strstart >= max_start) {
          // strstart === 0 is possible when wraparound on 16-bit machine
          lookahead = strstart - max_start;
          strstart = max_start;
          flush_block_only(false);
          if (strm.avail_out === 0) { return NeedMore; }
        } // Flush if we may have to slide, otherwise block_start may become
        // negative and the data will be gone:


        if (strstart - block_start >= w_size - MIN_LOOKAHEAD) {
          flush_block_only(false);
          if (strm.avail_out === 0) { return NeedMore; }
        }
      }

      flush_block_only(flush === Z_FINISH);
      if (strm.avail_out === 0) { return flush === Z_FINISH ? FinishStarted : NeedMore; }
      return flush === Z_FINISH ? FinishDone : BlockDone;
    }

    function longest_match(cur_match) {
      var chain_length = max_chain_length; // max hash chain length

      var scan = strstart; // current string

      var match; // matched string

      var len; // length of current match

      var best_len = prev_length; // best match length so far

      var limit = strstart > w_size - MIN_LOOKAHEAD ? strstart - (w_size - MIN_LOOKAHEAD) : 0;
      var _nice_match = nice_match; // Stop when cur_match becomes <= limit. To simplify the code,
      // we prevent matches with the string of window index 0.

      var wmask = w_mask;
      var strend = strstart + MAX_MATCH;
      var scan_end1 = window[scan + best_len - 1];
      var scan_end = window[scan + best_len]; // The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of
      // 16.
      // It is easy to get rid of this optimization if necessary.
      // Do not waste too much time if we already have a good match:

      if (prev_length >= good_match) {
        chain_length >>= 2;
      } // Do not look for matches beyond the end of the input. This is
      // necessary
      // to make deflate deterministic.


      if (_nice_match > lookahead) { _nice_match = lookahead; }

      do {
        match = cur_match; // Skip to next match if the match length cannot increase
        // or if the match length is less than 2:

        if (window[match + best_len] !== scan_end || window[match + best_len - 1] !== scan_end1 || window[match] !== window[scan] || window[++match] !== window[scan + 1]) { continue; } // The check at best_len-1 can be removed because it will be made
        // again later. (This heuristic is not always a win.)
        // It is not necessary to compare scan[2] and match[2] since they
        // are always equal when the other bytes match, given that
        // the hash keys are equal and that HASH_BITS >= 8.

        scan += 2;
        match++; // We check for insufficient lookahead only every 8th comparison;
        // the 256th check will be made at strstart+258.

        do {} while (window[++scan] === window[++match] && window[++scan] === window[++match] && window[++scan] === window[++match] && window[++scan] === window[++match] && window[++scan] === window[++match] && window[++scan] === window[++match] && window[++scan] === window[++match] && window[++scan] === window[++match] && scan < strend);

        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;

        if (len > best_len) {
          match_start = cur_match;
          best_len = len;
          if (len >= _nice_match) { break; }
          scan_end1 = window[scan + best_len - 1];
          scan_end = window[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask] & 0xffff) > limit && --chain_length !== 0);

      if (best_len <= lookahead) { return best_len; }
      return lookahead;
    } // Compress as much as possible from the input stream, return the current
    // block state.
    // This function does not perform lazy evaluation of matches and inserts
    // new strings in the dictionary only for unmatched strings or for short
    // matches. It is used only for the fast compression options.


    function deflate_fast(flush) {
      // short hash_head = 0; // head of the hash chain
      var hash_head = 0; // head of the hash chain

      var bflush; // set if current block must be flushed

      while (true) {
        // Make sure that we always have enough lookahead, except
        // at the end of the input file. We need MAX_MATCH bytes
        // for the next match, plus MIN_MATCH bytes to insert the
        // string following the next match.
        if (lookahead < MIN_LOOKAHEAD) {
          fill_window();

          if (lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return NeedMore;
          }

          if (lookahead === 0) { break; } // flush the current block
        } // Insert the string window[strstart .. strstart+2] in the
        // dictionary, and set hash_head to the head of the hash chain:


        if (lookahead >= MIN_MATCH) {
          ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];

          hash_head = head[ins_h] & 0xffff;
          prev[strstart & w_mask] = head[ins_h];
          head[ins_h] = strstart;
        } // Find the longest match, discarding those <= prev_length.
        // At this point we have always match_length < MIN_MATCH


        if (hash_head !== 0 && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {
          // To simplify the code, we prevent matches with the string
          // of window index 0 (in particular we have to avoid a match
          // of the string with itself at the start of the input file).
          if (strategy !== Z_HUFFMAN_ONLY) {
            match_length = longest_match(hash_head);
          } // longest_match() sets match_start

        }

        if (match_length >= MIN_MATCH) {
          // check_match(strstart, match_start, match_length);
          bflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);
          lookahead -= match_length; // Insert new strings in the hash table only if the match length
          // is not too large. This saves time but degrades compression.

          if (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {
            match_length--; // string at strstart already in hash table

            do {
              strstart++;
              ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];

              hash_head = head[ins_h] & 0xffff;
              prev[strstart & w_mask] = head[ins_h];
              head[ins_h] = strstart; // strstart never exceeds WSIZE-MAX_MATCH, so there are
              // always MIN_MATCH bytes ahead.
            } while (--match_length !== 0);

            strstart++;
          } else {
            strstart += match_length;
            match_length = 0;
            ins_h = window[strstart] & 0xff;
            ins_h = (ins_h << hash_shift ^ window[strstart + 1] & 0xff) & hash_mask; // If lookahead < MIN_MATCH, ins_h is garbage, but it does
            // not
            // matter since it will be recomputed at next deflate call.
          }
        } else {
          // No match, output a literal byte
          bflush = _tr_tally(0, window[strstart] & 0xff);
          lookahead--;
          strstart++;
        }

        if (bflush) {
          flush_block_only(false);
          if (strm.avail_out === 0) { return NeedMore; }
        }
      }

      flush_block_only(flush === Z_FINISH);

      if (strm.avail_out === 0) {
        if (flush === Z_FINISH) { return FinishStarted; }else { return NeedMore; }
      }

      return flush === Z_FINISH ? FinishDone : BlockDone;
    } // Same as above, but achieves better compression. We use a lazy
    // evaluation for matches: a match is finally adopted only if there is
    // no better match at the next window position.


    function deflate_slow(flush) {
      // short hash_head = 0; // head of hash chain
      var hash_head = 0; // head of hash chain

      var bflush; // set if current block must be flushed

      var max_insert; // Process the input block.

      while (true) {
        // Make sure that we always have enough lookahead, except
        // at the end of the input file. We need MAX_MATCH bytes
        // for the next match, plus MIN_MATCH bytes to insert the
        // string following the next match.
        if (lookahead < MIN_LOOKAHEAD) {
          fill_window();

          if (lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
            return NeedMore;
          }

          if (lookahead === 0) { break; } // flush the current block
        } // Insert the string window[strstart .. strstart+2] in the
        // dictionary, and set hash_head to the head of the hash chain:


        if (lookahead >= MIN_MATCH) {
          ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];

          hash_head = head[ins_h] & 0xffff;
          prev[strstart & w_mask] = head[ins_h];
          head[ins_h] = strstart;
        } // Find the longest match, discarding those <= prev_length.


        prev_length = match_length;
        prev_match = match_start;
        match_length = MIN_MATCH - 1;

        if (hash_head !== 0 && prev_length < max_lazy_match && (strstart - hash_head & 0xffff) <= w_size - MIN_LOOKAHEAD) {
          // To simplify the code, we prevent matches with the string
          // of window index 0 (in particular we have to avoid a match
          // of the string with itself at the start of the input file).
          if (strategy !== Z_HUFFMAN_ONLY) {
            match_length = longest_match(hash_head);
          } // longest_match() sets match_start


          if (match_length <= 5 && (strategy === Z_FILTERED || match_length === MIN_MATCH && strstart - match_start > 4096)) {
            // If prev_match is also MIN_MATCH, match_start is garbage
            // but we will ignore the current match anyway.
            match_length = MIN_MATCH - 1;
          }
        } // If there was a match at the previous step and the current
        // match is not better, output the previous match:


        if (prev_length >= MIN_MATCH && match_length <= prev_length) {
          max_insert = strstart + lookahead - MIN_MATCH; // Do not insert strings in hash table beyond this.
          // check_match(strstart-1, prev_match, prev_length);

          bflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH); // Insert in hash table all strings up to the end of the match.
          // strstart-1 and strstart are already inserted. If there is not
          // enough lookahead, the last two strings are not inserted in
          // the hash table.

          lookahead -= prev_length - 1;
          prev_length -= 2;

          do {
            if (++strstart <= max_insert) {
              ins_h = (ins_h << hash_shift ^ window[strstart + (MIN_MATCH - 1)] & 0xff) & hash_mask; // prev[strstart&w_mask]=hash_head=head[ins_h];

              hash_head = head[ins_h] & 0xffff;
              prev[strstart & w_mask] = head[ins_h];
              head[ins_h] = strstart;
            }
          } while (--prev_length !== 0);

          match_available = 0;
          match_length = MIN_MATCH - 1;
          strstart++;

          if (bflush) {
            flush_block_only(false);
            if (strm.avail_out === 0) { return NeedMore; }
          }
        } else if (match_available !== 0) {
          // If there was no match at the previous position, output a
          // single literal. If there was a match but the current match
          // is longer, truncate the previous match to a single literal.
          bflush = _tr_tally(0, window[strstart - 1] & 0xff);

          if (bflush) {
            flush_block_only(false);
          }

          strstart++;
          lookahead--;
          if (strm.avail_out === 0) { return NeedMore; }
        } else {
          // There is no previous match to compare with, wait for
          // the next step to decide.
          match_available = 1;
          strstart++;
          lookahead--;
        }
      }

      if (match_available !== 0) {
        bflush = _tr_tally(0, window[strstart - 1] & 0xff);
        match_available = 0;
      }

      flush_block_only(flush === Z_FINISH);

      if (strm.avail_out === 0) {
        if (flush === Z_FINISH) { return FinishStarted; }else { return NeedMore; }
      }

      return flush === Z_FINISH ? FinishDone : BlockDone;
    }

    function deflateReset(strm) {
      strm.total_in = strm.total_out = 0;
      strm.msg = null; //

      that.pending = 0;
      that.pending_out = 0;
      status = BUSY_STATE;
      last_flush = Z_NO_FLUSH;
      tr_init();
      lm_init();
      return Z_OK;
    }

    that.deflateInit = function (strm, _level, bits, _method, memLevel, _strategy) {
      if (!_method) { _method = Z_DEFLATED; }
      if (!memLevel) { memLevel = DEF_MEM_LEVEL; }
      if (!_strategy) { _strategy = Z_DEFAULT_STRATEGY; } // byte[] my_version=ZLIB_VERSION;
      //
      // if (!version || version[0] !== my_version[0]
      // || stream_size !== sizeof(z_stream)) {
      // return Z_VERSION_ERROR;
      // }

      strm.msg = null;
      if (_level === Z_DEFAULT_COMPRESSION) { _level = 6; }

      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method !== Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {
        return Z_STREAM_ERROR;
      }

      strm.dstate = that;
      w_bits = bits;
      w_size = 1 << w_bits;
      w_mask = w_size - 1;
      hash_bits = memLevel + 7;
      hash_size = 1 << hash_bits;
      hash_mask = hash_size - 1;
      hash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);
      window = new Uint8Array(w_size * 2);
      prev = [];
      head = [];
      lit_bufsize = 1 << memLevel + 6; // 16K elements by default
      // We overlay pending_buf and d_buf+l_buf. This works since the average
      // output size for (length,distance) codes is <= 24 bits.

      that.pending_buf = new Uint8Array(lit_bufsize * 4);
      pending_buf_size = lit_bufsize * 4;
      d_buf = Math.floor(lit_bufsize / 2);
      l_buf = (1 + 2) * lit_bufsize;
      level = _level;
      strategy = _strategy;
      return deflateReset(strm);
    };

    that.deflateEnd = function () {
      if (status !== INIT_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
        return Z_STREAM_ERROR;
      } // Deallocate in reverse order of allocations:


      that.pending_buf = null;
      head = null;
      prev = null;
      window = null; // free

      that.dstate = null;
      return status === BUSY_STATE ? Z_DATA_ERROR : Z_OK;
    };

    that.deflateParams = function (strm, _level, _strategy) {
      var err = Z_OK;

      if (_level === Z_DEFAULT_COMPRESSION) {
        _level = 6;
      }

      if (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {
        return Z_STREAM_ERROR;
      }

      if (config_table[level].func !== config_table[_level].func && strm.total_in !== 0) {
        // Flush the last buffer:
        err = strm.deflate(Z_PARTIAL_FLUSH);
      }

      if (level !== _level) {
        level = _level;
        max_lazy_match = config_table[level].max_lazy;
        good_match = config_table[level].good_length;
        nice_match = config_table[level].nice_length;
        max_chain_length = config_table[level].max_chain;
      }

      strategy = _strategy;
      return err;
    };

    that.deflateSetDictionary = function (strm, dictionary, dictLength) {
      var length = dictLength;
      var n,
          index = 0;
      if (!dictionary || status !== INIT_STATE) { return Z_STREAM_ERROR; }
      if (length < MIN_MATCH) { return Z_OK; }

      if (length > w_size - MIN_LOOKAHEAD) {
        length = w_size - MIN_LOOKAHEAD;
        index = dictLength - length; // use the tail of the dictionary
      }

      window.set(dictionary.subarray(index, index + length), 0);
      strstart = length;
      block_start = length; // Insert all strings in the hash table (except for the last two bytes).
      // s->lookahead stays null, so s->ins_h will be recomputed at the next
      // call of fill_window.

      ins_h = window[0] & 0xff;
      ins_h = (ins_h << hash_shift ^ window[1] & 0xff) & hash_mask;

      for (n = 0; n <= length - MIN_MATCH; n++) {
        ins_h = (ins_h << hash_shift ^ window[n + (MIN_MATCH - 1)] & 0xff) & hash_mask;
        prev[n & w_mask] = head[ins_h];
        head[ins_h] = n;
      }

      return Z_OK;
    };

    that.deflate = function (_strm, flush) {
      var i, header, level_flags, old_flush, bstate;

      if (flush > Z_FINISH || flush < 0) {
        return Z_STREAM_ERROR;
      }

      if (!_strm.next_out || !_strm.next_in && _strm.avail_in !== 0 || status === FINISH_STATE && flush !== Z_FINISH) {
        _strm.msg = z_errmsg[Z_NEED_DICT - Z_STREAM_ERROR];
        return Z_STREAM_ERROR;
      }

      if (_strm.avail_out === 0) {
        _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];
        return Z_BUF_ERROR;
      }

      strm = _strm; // just in case

      old_flush = last_flush;
      last_flush = flush; // Write the zlib header

      if (status === INIT_STATE) {
        header = Z_DEFLATED + (w_bits - 8 << 4) << 8;
        level_flags = (level - 1 & 0xff) >> 1;
        if (level_flags > 3) { level_flags = 3; }
        header |= level_flags << 6;
        if (strstart !== 0) { header |= PRESET_DICT; }
        header += 31 - header % 31;
        status = BUSY_STATE;
        putShortMSB(header);
      } // Flush as much pending output as possible


      if (that.pending !== 0) {
        strm.flush_pending();

        if (strm.avail_out === 0) {
          // console.log(" avail_out==0");
          // Since avail_out is 0, deflate will be called again with
          // more output space, but possibly with both pending and
          // avail_in equal to zero. There won't be anything to do,
          // but this is not an error situation so make sure we
          // return OK instead of BUF_ERROR at next call of deflate:
          last_flush = -1;
          return Z_OK;
        } // Make sure there is something to do and avoid duplicate
        // consecutive
        // flushes. For repeated and useless calls with Z_FINISH, we keep
        // returning Z_STREAM_END instead of Z_BUFF_ERROR.

      } else if (strm.avail_in === 0 && flush <= old_flush && flush !== Z_FINISH) {
        strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];
        return Z_BUF_ERROR;
      } // User must not provide more input after the first FINISH:


      if (status === FINISH_STATE && strm.avail_in !== 0) {
        _strm.msg = z_errmsg[Z_NEED_DICT - Z_BUF_ERROR];
        return Z_BUF_ERROR;
      } // Start a new block or continue the current one.


      if (strm.avail_in !== 0 || lookahead !== 0 || flush !== Z_NO_FLUSH && status !== FINISH_STATE) {
        bstate = -1;

        switch (config_table[level].func) {
          case STORED:
            bstate = deflate_stored(flush);
            break;

          case FAST:
            bstate = deflate_fast(flush);
            break;

          case SLOW:
            bstate = deflate_slow(flush);
            break;

          default:
        }

        if (bstate === FinishStarted || bstate === FinishDone) {
          status = FINISH_STATE;
        }

        if (bstate === NeedMore || bstate === FinishStarted) {
          if (strm.avail_out === 0) {
            last_flush = -1; // avoid BUF_ERROR next call, see above
          }

          return Z_OK; // If flush !== Z_NO_FLUSH && avail_out === 0, the next call
          // of deflate should use the same flush parameter to make sure
          // that the flush is complete. So we don't have to output an
          // empty block here, this will be done at next call. This also
          // ensures that for a very small output buffer, we emit at most
          // one empty block.
        }

        if (bstate === BlockDone) {
          if (flush === Z_PARTIAL_FLUSH) {
            _tr_align();
          } else {
            // FULL_FLUSH or SYNC_FLUSH
            _tr_stored_block(0, 0, false); // For a full flush, this empty block will be recognized
            // as a special marker by inflate_sync().


            if (flush === Z_FULL_FLUSH) {
              // state.head[s.hash_size-1]=0;
              for (i = 0; i < hash_size
              /*-1*/
              ; i++) {
                // forget history
                head[i] = 0;
              }
            }
          }

          strm.flush_pending();

          if (strm.avail_out === 0) {
            last_flush = -1; // avoid BUF_ERROR at next call, see above

            return Z_OK;
          }
        }
      }

      if (flush !== Z_FINISH) { return Z_OK; }
      return Z_STREAM_END;
    };
  } // ZStream


  function ZStream() {
    var that = this;
    that.next_in_index = 0;
    that.next_out_index = 0; // that.next_in; // next input byte

    that.avail_in = 0; // number of bytes available at next_in

    that.total_in = 0; // total nb of input bytes read so far
    // that.next_out; // next output byte should be put there

    that.avail_out = 0; // remaining free space at next_out

    that.total_out = 0; // total nb of bytes output so far
    // that.msg;
    // that.dstate;
  }

  ZStream.prototype = {
    deflateInit: function deflateInit(level, bits) {
      var that = this;
      that.dstate = new Deflate();
      if (!bits) { bits = MAX_BITS; }
      return that.dstate.deflateInit(that, level, bits);
    },
    deflate: function deflate(flush) {
      var that = this;

      if (!that.dstate) {
        return Z_STREAM_ERROR;
      }

      return that.dstate.deflate(that, flush);
    },
    deflateEnd: function deflateEnd() {
      var that = this;
      if (!that.dstate) { return Z_STREAM_ERROR; }
      var ret = that.dstate.deflateEnd();
      that.dstate = null;
      return ret;
    },
    deflateParams: function deflateParams(level, strategy) {
      var that = this;
      if (!that.dstate) { return Z_STREAM_ERROR; }
      return that.dstate.deflateParams(that, level, strategy);
    },
    deflateSetDictionary: function deflateSetDictionary(dictionary, dictLength) {
      var that = this;
      if (!that.dstate) { return Z_STREAM_ERROR; }
      return that.dstate.deflateSetDictionary(that, dictionary, dictLength);
    },
    // Read a new buffer from the current input stream, update the
    // total number of bytes read. All deflate() input goes through
    // this function so some applications may wish to modify it to avoid
    // allocating a large strm->next_in buffer and copying from it.
    // (See also flush_pending()).
    read_buf: function read_buf(buf, start, size) {
      var that = this;
      var len = that.avail_in;
      if (len > size) { len = size; }
      if (len === 0) { return 0; }
      that.avail_in -= len;
      buf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);
      that.next_in_index += len;
      that.total_in += len;
      return len;
    },
    // Flush as much pending output as possible. All deflate() output goes
    // through this function so some applications may wish to modify it
    // to avoid allocating a large strm->next_out buffer and copying into it.
    // (See also read_buf()).
    flush_pending: function flush_pending() {
      var that = this;
      var len = that.dstate.pending;
      if (len > that.avail_out) { len = that.avail_out; }
      if (len === 0) { return; } // if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index
      // || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +
      // len)) {
      // console.log(that.dstate.pending_buf.length + ", " + that.dstate.pending_out + ", " + that.next_out.length + ", " +
      // that.next_out_index + ", " + len);
      // console.log("avail_out=" + that.avail_out);
      // }

      that.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);
      that.next_out_index += len;
      that.dstate.pending_out += len;
      that.total_out += len;
      that.avail_out -= len;
      that.dstate.pending -= len;

      if (that.dstate.pending === 0) {
        that.dstate.pending_out = 0;
      }
    }
  }; // Deflater

  function Deflater(options) {
    var that = this;
    var z = new ZStream();
    var bufsize = 512;
    var flush = Z_NO_FLUSH;
    var buf = new Uint8Array(bufsize);
    var level = options ? options.level : Z_DEFAULT_COMPRESSION;
    if (typeof level === "undefined") { level = Z_DEFAULT_COMPRESSION; }
    z.deflateInit(level);
    z.next_out = buf;

    that.append = function (data, onprogress) {
      var err,
          buffers = [],
          lastIndex = 0,
          bufferIndex = 0,
          bufferSize = 0,
          array;
      if (!data.length) { return; }
      z.next_in_index = 0;
      z.next_in = data;
      z.avail_in = data.length;

      do {
        z.next_out_index = 0;
        z.avail_out = bufsize;
        err = z.deflate(flush);
        if (err !== Z_OK) { throw new Error("deflating: " + z.msg); }
        if (z.next_out_index) { if (z.next_out_index === bufsize) { buffers.push(new Uint8Array(buf)); }else { buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index))); } }
        bufferSize += z.next_out_index;

        if (onprogress && z.next_in_index > 0 && z.next_in_index !== lastIndex) {
          onprogress(z.next_in_index);
          lastIndex = z.next_in_index;
        }
      } while (z.avail_in > 0 || z.avail_out === 0);

      array = new Uint8Array(bufferSize);
      buffers.forEach(function (chunk) {
        array.set(chunk, bufferIndex);
        bufferIndex += chunk.length;
      });
      return array;
    };

    that.flush = function () {
      var err,
          buffers = [],
          bufferIndex = 0,
          bufferSize = 0,
          array;

      do {
        z.next_out_index = 0;
        z.avail_out = bufsize;
        err = z.deflate(Z_FINISH);
        if (err !== Z_STREAM_END && err !== Z_OK) { throw new Error("deflating: " + z.msg); }
        if (bufsize - z.avail_out > 0) { buffers.push(new Uint8Array(buf.subarray(0, z.next_out_index))); }
        bufferSize += z.next_out_index;
      } while (z.avail_in > 0 || z.avail_out === 0);

      z.deflateEnd();
      array = new Uint8Array(bufferSize);
      buffers.forEach(function (chunk) {
        array.set(chunk, bufferIndex);
        bufferIndex += chunk.length;
      });
      return array;
    };
  } // 'zip' may not be defined in z-worker and some tests


  var env = global.zip || global;
  env.Deflater = env._jzlib_Deflater = Deflater;
})(typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || Function('return typeof this === "object" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */
(function (global) {

  function RGBColor(color_string) {
    color_string = color_string || '';
    this.ok = false; // strip any leading #

    if (color_string.charAt(0) == '#') {
      // remove # if any
      color_string = color_string.substr(1, 6);
    }

    color_string = color_string.replace(/ /g, '');
    color_string = color_string.toLowerCase();
    var channels; // before getting into regexps, try simple matches
    // and overwrite the input

    var simple_colors = {
      aliceblue: 'f0f8ff',
      antiquewhite: 'faebd7',
      aqua: '00ffff',
      aquamarine: '7fffd4',
      azure: 'f0ffff',
      beige: 'f5f5dc',
      bisque: 'ffe4c4',
      black: '000000',
      blanchedalmond: 'ffebcd',
      blue: '0000ff',
      blueviolet: '8a2be2',
      brown: 'a52a2a',
      burlywood: 'deb887',
      cadetblue: '5f9ea0',
      chartreuse: '7fff00',
      chocolate: 'd2691e',
      coral: 'ff7f50',
      cornflowerblue: '6495ed',
      cornsilk: 'fff8dc',
      crimson: 'dc143c',
      cyan: '00ffff',
      darkblue: '00008b',
      darkcyan: '008b8b',
      darkgoldenrod: 'b8860b',
      darkgray: 'a9a9a9',
      darkgreen: '006400',
      darkkhaki: 'bdb76b',
      darkmagenta: '8b008b',
      darkolivegreen: '556b2f',
      darkorange: 'ff8c00',
      darkorchid: '9932cc',
      darkred: '8b0000',
      darksalmon: 'e9967a',
      darkseagreen: '8fbc8f',
      darkslateblue: '483d8b',
      darkslategray: '2f4f4f',
      darkturquoise: '00ced1',
      darkviolet: '9400d3',
      deeppink: 'ff1493',
      deepskyblue: '00bfff',
      dimgray: '696969',
      dodgerblue: '1e90ff',
      feldspar: 'd19275',
      firebrick: 'b22222',
      floralwhite: 'fffaf0',
      forestgreen: '228b22',
      fuchsia: 'ff00ff',
      gainsboro: 'dcdcdc',
      ghostwhite: 'f8f8ff',
      gold: 'ffd700',
      goldenrod: 'daa520',
      gray: '808080',
      green: '008000',
      greenyellow: 'adff2f',
      honeydew: 'f0fff0',
      hotpink: 'ff69b4',
      indianred: 'cd5c5c',
      indigo: '4b0082',
      ivory: 'fffff0',
      khaki: 'f0e68c',
      lavender: 'e6e6fa',
      lavenderblush: 'fff0f5',
      lawngreen: '7cfc00',
      lemonchiffon: 'fffacd',
      lightblue: 'add8e6',
      lightcoral: 'f08080',
      lightcyan: 'e0ffff',
      lightgoldenrodyellow: 'fafad2',
      lightgrey: 'd3d3d3',
      lightgreen: '90ee90',
      lightpink: 'ffb6c1',
      lightsalmon: 'ffa07a',
      lightseagreen: '20b2aa',
      lightskyblue: '87cefa',
      lightslateblue: '8470ff',
      lightslategray: '778899',
      lightsteelblue: 'b0c4de',
      lightyellow: 'ffffe0',
      lime: '00ff00',
      limegreen: '32cd32',
      linen: 'faf0e6',
      magenta: 'ff00ff',
      maroon: '800000',
      mediumaquamarine: '66cdaa',
      mediumblue: '0000cd',
      mediumorchid: 'ba55d3',
      mediumpurple: '9370d8',
      mediumseagreen: '3cb371',
      mediumslateblue: '7b68ee',
      mediumspringgreen: '00fa9a',
      mediumturquoise: '48d1cc',
      mediumvioletred: 'c71585',
      midnightblue: '191970',
      mintcream: 'f5fffa',
      mistyrose: 'ffe4e1',
      moccasin: 'ffe4b5',
      navajowhite: 'ffdead',
      navy: '000080',
      oldlace: 'fdf5e6',
      olive: '808000',
      olivedrab: '6b8e23',
      orange: 'ffa500',
      orangered: 'ff4500',
      orchid: 'da70d6',
      palegoldenrod: 'eee8aa',
      palegreen: '98fb98',
      paleturquoise: 'afeeee',
      palevioletred: 'd87093',
      papayawhip: 'ffefd5',
      peachpuff: 'ffdab9',
      peru: 'cd853f',
      pink: 'ffc0cb',
      plum: 'dda0dd',
      powderblue: 'b0e0e6',
      purple: '800080',
      red: 'ff0000',
      rosybrown: 'bc8f8f',
      royalblue: '4169e1',
      saddlebrown: '8b4513',
      salmon: 'fa8072',
      sandybrown: 'f4a460',
      seagreen: '2e8b57',
      seashell: 'fff5ee',
      sienna: 'a0522d',
      silver: 'c0c0c0',
      skyblue: '87ceeb',
      slateblue: '6a5acd',
      slategray: '708090',
      snow: 'fffafa',
      springgreen: '00ff7f',
      steelblue: '4682b4',
      tan: 'd2b48c',
      teal: '008080',
      thistle: 'd8bfd8',
      tomato: 'ff6347',
      turquoise: '40e0d0',
      violet: 'ee82ee',
      violetred: 'd02090',
      wheat: 'f5deb3',
      white: 'ffffff',
      whitesmoke: 'f5f5f5',
      yellow: 'ffff00',
      yellowgreen: '9acd32'
    };
    color_string = simple_colors[color_string] || color_string; // array of color definition objects

    var color_defs = [{
      re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
      process: function process(bits) {
        return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];
      }
    }, {
      re: /^(\w{2})(\w{2})(\w{2})$/,
      example: ['#00ff00', '336699'],
      process: function process(bits) {
        return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];
      }
    }, {
      re: /^(\w{1})(\w{1})(\w{1})$/,
      example: ['#fb0', 'f0f'],
      process: function process(bits) {
        return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];
      }
    }]; // search through the definitions to find a match

    for (var i = 0; i < color_defs.length; i++) {
      var re = color_defs[i].re;
      var processor = color_defs[i].process;
      var bits = re.exec(color_string);

      if (bits) {
        channels = processor(bits);
        this.r = channels[0];
        this.g = channels[1];
        this.b = channels[2];
        this.ok = true;
      }
    } // validate/cleanup values


    this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;
    this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;
    this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b; // some getters

    this.toRGB = function () {
      return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
    };

    this.toHex = function () {
      var r = this.r.toString(16);
      var g = this.g.toString(16);
      var b = this.b.toString(16);
      if (r.length == 1) { r = '0' + r; }
      if (g.length == 1) { g = '0' + g; }
      if (b.length == 1) { b = '0' + b; }
      return '#' + r + g + b;
    };
  }

  global.RGBColor = RGBColor;
})(typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || Function('return typeof this === "object" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

/* eslint-disable no-control-regex */

/* global jsPDF */

/************************************************
 * Title : custom font                          *
 * Start Data : 2017. 01. 22.                   *
 * Comment : TEXT API                           *
 ************************************************/

/******************************
 * jsPDF extension API Design *
 * ****************************/
(function (jsPDF) {

  jsPDF.API.TTFFont = function () {
    /************************************************************************/

    /* function : open                                                       */

    /* comment : Decode the encoded ttf content and create a TTFFont object. */

    /************************************************************************/
    TTFFont.open = function (file) {
      return new TTFFont(file);
    };
    /***************************************************************/

    /* function : TTFFont gernerator                               */

    /* comment : Decode TTF contents are parsed, Data,             */

    /* Subset object is created, and registerTTF function is called.*/

    /***************************************************************/


    function TTFFont(rawData) {
      var data;
      this.rawData = rawData;
      data = this.contents = new Data(rawData);
      this.contents.pos = 4;

      if (data.readString(4) === 'ttcf') {
        throw new Error("TTCF not supported.");
      } else {
        data.pos = 0;
        this.parse();
        this.subset = new Subset(this);
        this.registerTTF();
      }
    }
    /********************************************************/

    /* function : parse                                     */

    /* comment : TTF Parses the file contents by each table.*/

    /********************************************************/


    TTFFont.prototype.parse = function () {
      this.directory = new Directory(this.contents);
      this.head = new HeadTable(this);
      this.name = new NameTable(this);
      this.cmap = new CmapTable(this);
      this.toUnicode = new Map();
      this.hhea = new HheaTable(this);
      this.maxp = new MaxpTable(this);
      this.hmtx = new HmtxTable(this);
      this.post = new PostTable(this);
      this.os2 = new OS2Table(this);
      this.loca = new LocaTable(this);
      this.glyf = new GlyfTable(this);
      this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender;
      this.decender = this.os2.exists && this.os2.decender || this.hhea.decender;
      this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap;
      return this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];
    };
    /***************************************************************/

    /* function : registerTTF                                      */

    /* comment : Get the value to assign pdf font descriptors.     */

    /***************************************************************/


    TTFFont.prototype.registerTTF = function () {
      var e, hi, low, raw, _ref;

      this.scaleFactor = 1000.0 / this.head.unitsPerEm;

      this.bbox = function () {
        var _i, _len, _ref, _results;

        _ref = this.bbox;
        _results = [];

        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          e = _ref[_i];

          _results.push(Math.round(e * this.scaleFactor));
        }

        return _results;
      }.call(this);

      this.stemV = 0;

      if (this.post.exists) {
        raw = this.post.italic_angle;
        hi = raw >> 16;
        low = raw & 0xFF;

        if ((hi & 0x8000) !== 0) {
          hi = -((hi ^ 0xFFFF) + 1);
        }

        this.italicAngle = +("" + hi + "." + low);
      } else {
        this.italicAngle = 0;
      }

      this.ascender = Math.round(this.ascender * this.scaleFactor);
      this.decender = Math.round(this.decender * this.scaleFactor);
      this.lineGap = Math.round(this.lineGap * this.scaleFactor);
      this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender;
      this.xHeight = this.os2.exists && this.os2.xHeight || 0;
      this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8;
      this.isSerif = (_ref = this.familyClass) === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7;
      this.isScript = this.familyClass === 10;
      this.flags = 0;

      if (this.post.isFixedPitch) {
        this.flags |= 1 << 0;
      }

      if (this.isSerif) {
        this.flags |= 1 << 1;
      }

      if (this.isScript) {
        this.flags |= 1 << 3;
      }

      if (this.italicAngle !== 0) {
        this.flags |= 1 << 6;
      }

      this.flags |= 1 << 5;

      if (!this.cmap.unicode) {
        throw new Error('No unicode cmap for font');
      }
    };

    TTFFont.prototype.characterToGlyph = function (character) {
      var _ref;

      return ((_ref = this.cmap.unicode) != null ? _ref.codeMap[character] : void 0) || 0;
    };

    TTFFont.prototype.widthOfGlyph = function (glyph) {
      var scale;
      scale = 1000.0 / this.head.unitsPerEm;
      return this.hmtx.forGlyph(glyph).advance * scale;
    };

    TTFFont.prototype.widthOfString = function (string, size, charSpace) {
      var charCode, i, scale, width, _ref;

      string = '' + string;
      width = 0;

      for (i = 0, _ref = string.length; 0 <= _ref ? i < _ref : i > _ref; i = 0 <= _ref ? ++i : --i) {
        charCode = string.charCodeAt(i);
        width += this.widthOfGlyph(this.characterToGlyph(charCode)) + charSpace * (1000 / size) || 0;
      }

      scale = size / 1000;
      return width * scale;
    };

    TTFFont.prototype.lineHeight = function (size, includeGap) {
      var gap;

      if (includeGap == null) {
        includeGap = false;
      }

      gap = includeGap ? this.lineGap : 0;
      return (this.ascender + gap - this.decender) / 1000 * size;
    };

    return TTFFont;
  }();
  /************************************************************************************************/

  /* function : Data                                                                              */

  /* comment : The ttf data decoded and stored in an array is read and written to the Data object.*/

  /************************************************************************************************/


  var Data = function () {
    function Data(data) {
      this.data = data != null ? data : [];
      this.pos = 0;
      this.length = this.data.length;
    }

    Data.prototype.readByte = function () {
      return this.data[this.pos++];
    };

    Data.prototype.writeByte = function (_byte) {
      return this.data[this.pos++] = _byte;
    };

    Data.prototype.readUInt32 = function () {
      var b1, b2, b3, b4;
      b1 = this.readByte() * 0x1000000;
      b2 = this.readByte() << 16;
      b3 = this.readByte() << 8;
      b4 = this.readByte();
      return b1 + b2 + b3 + b4;
    };

    Data.prototype.writeUInt32 = function (val) {
      this.writeByte(val >>> 24 & 0xff);
      this.writeByte(val >> 16 & 0xff);
      this.writeByte(val >> 8 & 0xff);
      return this.writeByte(val & 0xff);
    };

    Data.prototype.readInt32 = function () {
      var _int;

      _int = this.readUInt32();

      if (_int >= 0x80000000) {
        return _int - 0x100000000;
      } else {
        return _int;
      }
    };

    Data.prototype.writeInt32 = function (val) {
      if (val < 0) {
        val += 0x100000000;
      }

      return this.writeUInt32(val);
    };

    Data.prototype.readUInt16 = function () {
      var b1, b2;
      b1 = this.readByte() << 8;
      b2 = this.readByte();
      return b1 | b2;
    };

    Data.prototype.writeUInt16 = function (val) {
      this.writeByte(val >> 8 & 0xff);
      return this.writeByte(val & 0xff);
    };

    Data.prototype.readInt16 = function () {
      var _int2;

      _int2 = this.readUInt16();

      if (_int2 >= 0x8000) {
        return _int2 - 0x10000;
      } else {
        return _int2;
      }
    };

    Data.prototype.writeInt16 = function (val) {
      if (val < 0) {
        val += 0x10000;
      }

      return this.writeUInt16(val);
    };

    Data.prototype.readString = function (length) {
      var i, ret;
      ret = [];

      for (i = 0; 0 <= length ? i < length : i > length; i = 0 <= length ? ++i : --i) {
        ret[i] = String.fromCharCode(this.readByte());
      }

      return ret.join('');
    };

    Data.prototype.writeString = function (val) {
      var i, _ref, _results;

      _results = [];

      for (i = 0, _ref = val.length; 0 <= _ref ? i < _ref : i > _ref; i = 0 <= _ref ? ++i : --i) {
        _results.push(this.writeByte(val.charCodeAt(i)));
      }

      return _results;
    };
    /*Data.prototype.stringAt = function (pos, length) {
        this.pos = pos;
        return this.readString(length);
    };*/


    Data.prototype.readShort = function () {
      return this.readInt16();
    };

    Data.prototype.writeShort = function (val) {
      return this.writeInt16(val);
    };

    Data.prototype.readLongLong = function () {
      var b1, b2, b3, b4, b5, b6, b7, b8;
      b1 = this.readByte();
      b2 = this.readByte();
      b3 = this.readByte();
      b4 = this.readByte();
      b5 = this.readByte();
      b6 = this.readByte();
      b7 = this.readByte();
      b8 = this.readByte();

      if (b1 & 0x80) {
        return ((b1 ^ 0xff) * 0x100000000000000 + (b2 ^ 0xff) * 0x1000000000000 + (b3 ^ 0xff) * 0x10000000000 + (b4 ^ 0xff) * 0x100000000 + (b5 ^ 0xff) * 0x1000000 + (b6 ^ 0xff) * 0x10000 + (b7 ^ 0xff) * 0x100 + (b8 ^ 0xff) + 1) * -1;
      }

      return b1 * 0x100000000000000 + b2 * 0x1000000000000 + b3 * 0x10000000000 + b4 * 0x100000000 + b5 * 0x1000000 + b6 * 0x10000 + b7 * 0x100 + b8;
    };

    Data.prototype.writeLongLong = function (val) {
      var high, low;
      high = Math.floor(val / 0x100000000);
      low = val & 0xffffffff;
      this.writeByte(high >> 24 & 0xff);
      this.writeByte(high >> 16 & 0xff);
      this.writeByte(high >> 8 & 0xff);
      this.writeByte(high & 0xff);
      this.writeByte(low >> 24 & 0xff);
      this.writeByte(low >> 16 & 0xff);
      this.writeByte(low >> 8 & 0xff);
      return this.writeByte(low & 0xff);
    };

    Data.prototype.readInt = function () {
      return this.readInt32();
    };

    Data.prototype.writeInt = function (val) {
      return this.writeInt32(val);
    };
    /*Data.prototype.slice = function (start, end) {
        return this.data.slice(start, end);
    };*/


    Data.prototype.read = function (bytes) {
      var buf, i;
      buf = [];

      for (i = 0; 0 <= bytes ? i < bytes : i > bytes; i = 0 <= bytes ? ++i : --i) {
        buf.push(this.readByte());
      }

      return buf;
    };

    Data.prototype.write = function (bytes) {
      var _byte2, i, _len, _results;

      _results = [];

      for (i = 0, _len = bytes.length; i < _len; i++) {
        _byte2 = bytes[i];

        _results.push(this.writeByte(_byte2));
      }

      return _results;
    };

    return Data;
  }();

  var Directory = function () {
    var checksum;
    /*****************************************************************************************************/

    /* function : Directory generator                                                                    */

    /* comment : Initialize the offset, tag, length, and checksum for each table for the font to be used.*/

    /*****************************************************************************************************/

    function Directory(data) {
      var entry, i, _ref;

      this.scalarType = data.readInt();
      this.tableCount = data.readShort();
      this.searchRange = data.readShort();
      this.entrySelector = data.readShort();
      this.rangeShift = data.readShort();
      this.tables = {};

      for (i = 0, _ref = this.tableCount; 0 <= _ref ? i < _ref : i > _ref; i = 0 <= _ref ? ++i : --i) {
        entry = {
          tag: data.readString(4),
          checksum: data.readInt(),
          offset: data.readInt(),
          length: data.readInt()
        };
        this.tables[entry.tag] = entry;
      }
    }
    /********************************************************************************************************/

    /* function : encode                                                                                    */

    /* comment : It encodes and stores the font table object and information used for the directory object. */

    /********************************************************************************************************/


    Directory.prototype.encode = function (tables) {
      var adjustment, directory, directoryLength, entrySelector, headOffset, log2, offset, rangeShift, searchRange, sum, table, tableCount, tableData, tag;
      tableCount = Object.keys(tables).length;
      log2 = Math.log(2);
      searchRange = Math.floor(Math.log(tableCount) / log2) * 16;
      entrySelector = Math.floor(searchRange / log2);
      rangeShift = tableCount * 16 - searchRange;
      directory = new Data();
      directory.writeInt(this.scalarType);
      directory.writeShort(tableCount);
      directory.writeShort(searchRange);
      directory.writeShort(entrySelector);
      directory.writeShort(rangeShift);
      directoryLength = tableCount * 16;
      offset = directory.pos + directoryLength;
      headOffset = null;
      tableData = [];

      for (tag in tables) {
        table = tables[tag];
        directory.writeString(tag);
        directory.writeInt(checksum(table));
        directory.writeInt(offset);
        directory.writeInt(table.length);
        tableData = tableData.concat(table);

        if (tag === 'head') {
          headOffset = offset;
        }

        offset += table.length;

        while (offset % 4) {
          tableData.push(0);
          offset++;
        }
      }

      directory.write(tableData);
      sum = checksum(directory.data);
      adjustment = 0xB1B0AFBA - sum;
      directory.pos = headOffset + 8;
      directory.writeUInt32(adjustment);
      return directory.data;
    };
    /***************************************************************/

    /* function : checksum                                         */

    /* comment : Duplicate the table for the tag.                  */

    /***************************************************************/


    checksum = function checksum(data) {
      var i, sum, tmp, _ref;

      data = __slice.call(data);

      while (data.length % 4) {
        data.push(0);
      }

      tmp = new Data(data);
      sum = 0;

      for (i = 0, _ref = data.length; i < _ref; i = i += 4) {
        sum += tmp.readUInt32();
      }

      return sum & 0xFFFFFFFF;
    };

    return Directory;
  }();

  var Table,
      __hasProp = {}.hasOwnProperty,
      __extends = function __extends(child, parent) {
    for (var key in parent) {
      if (__hasProp.call(parent, key)) { child[key] = parent[key]; }
    }

    function ctor() {
      this.constructor = child;
    }

    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  };
  /***************************************************************/

  /* function : Table                                            */

  /* comment : Save info for each table, and parse the table.    */

  /***************************************************************/


  Table = function () {
    function Table(file) {
      var info;
      this.file = file;
      info = this.file.directory.tables[this.tag];
      this.exists = !!info;

      if (info) {
        this.offset = info.offset, this.length = info.length;
        this.parse(this.file.contents);
      }
    }

    Table.prototype.parse = function () {};

    Table.prototype.encode = function () {};

    Table.prototype.raw = function () {
      if (!this.exists) {
        return null;
      }

      this.file.contents.pos = this.offset;
      return this.file.contents.read(this.length);
    };

    return Table;
  }();

  var HeadTable = function (_super) {
    __extends(HeadTable, _super);

    function HeadTable() {
      return HeadTable.__super__.constructor.apply(this, arguments);
    }

    HeadTable.prototype.tag = 'head';

    HeadTable.prototype.parse = function (data) {
      data.pos = this.offset;
      this.version = data.readInt();
      this.revision = data.readInt();
      this.checkSumAdjustment = data.readInt();
      this.magicNumber = data.readInt();
      this.flags = data.readShort();
      this.unitsPerEm = data.readShort();
      this.created = data.readLongLong();
      this.modified = data.readLongLong();
      this.xMin = data.readShort();
      this.yMin = data.readShort();
      this.xMax = data.readShort();
      this.yMax = data.readShort();
      this.macStyle = data.readShort();
      this.lowestRecPPEM = data.readShort();
      this.fontDirectionHint = data.readShort();
      this.indexToLocFormat = data.readShort();
      return this.glyphDataFormat = data.readShort();
    };

    HeadTable.prototype.encode = function (indexToLocFormat) {
      var table;
      table = new Data();
      table.writeInt(this.version);
      table.writeInt(this.revision);
      table.writeInt(this.checkSumAdjustment);
      table.writeInt(this.magicNumber);
      table.writeShort(this.flags);
      table.writeShort(this.unitsPerEm);
      table.writeLongLong(this.created);
      table.writeLongLong(this.modified);
      table.writeShort(this.xMin);
      table.writeShort(this.yMin);
      table.writeShort(this.xMax);
      table.writeShort(this.yMax);
      table.writeShort(this.macStyle);
      table.writeShort(this.lowestRecPPEM);
      table.writeShort(this.fontDirectionHint);
      table.writeShort(indexToLocFormat);
      table.writeShort(this.glyphDataFormat);
      return table.data;
    };

    return HeadTable;
  }(Table);
  /************************************************************************************/

  /* function : CmapEntry                                                             */

  /* comment : Cmap Initializes and encodes object information (required by pdf spec).*/

  /************************************************************************************/


  var CmapEntry = function () {
    function CmapEntry(data, offset) {
      var code, count, endCode, glyphId, glyphIds, i, idDelta, idRangeOffset, index, saveOffset, segCount, segCountX2, start, startCode, tail, _j, _k, _len;

      this.platformID = data.readUInt16();
      this.encodingID = data.readShort();
      this.offset = offset + data.readInt();
      saveOffset = data.pos;
      data.pos = this.offset;
      this.format = data.readUInt16();
      this.length = data.readUInt16();
      this.language = data.readUInt16();
      this.isUnicode = this.platformID === 3 && this.encodingID === 1 && this.format === 4 || this.platformID === 0 && this.format === 4;
      this.codeMap = {};

      switch (this.format) {
        case 0:
          for (i = 0; i < 256; ++i) {
            this.codeMap[i] = data.readByte();
          }

          break;

        case 4:
          segCountX2 = data.readUInt16();
          segCount = segCountX2 / 2;
          data.pos += 6;

          endCode = function () {
            var _j, _results;

            _results = [];

            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {
              _results.push(data.readUInt16());
            }

            return _results;
          }();

          data.pos += 2;

          startCode = function () {
            var _j, _results;

            _results = [];

            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {
              _results.push(data.readUInt16());
            }

            return _results;
          }();

          idDelta = function () {
            var _j, _results;

            _results = [];

            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {
              _results.push(data.readUInt16());
            }

            return _results;
          }();

          idRangeOffset = function () {
            var _j, _results;

            _results = [];

            for (i = _j = 0; 0 <= segCount ? _j < segCount : _j > segCount; i = 0 <= segCount ? ++_j : --_j) {
              _results.push(data.readUInt16());
            }

            return _results;
          }();

          count = (this.length - data.pos + this.offset) / 2;

          glyphIds = function () {
            var _j, _results;

            _results = [];

            for (i = _j = 0; 0 <= count ? _j < count : _j > count; i = 0 <= count ? ++_j : --_j) {
              _results.push(data.readUInt16());
            }

            return _results;
          }();

          for (i = _j = 0, _len = endCode.length; _j < _len; i = ++_j) {
            tail = endCode[i];
            start = startCode[i];

            for (code = _k = start; start <= tail ? _k <= tail : _k >= tail; code = start <= tail ? ++_k : --_k) {
              if (idRangeOffset[i] === 0) {
                glyphId = code + idDelta[i];
              } else {
                index = idRangeOffset[i] / 2 + (code - start) - (segCount - i);
                glyphId = glyphIds[index] || 0;

                if (glyphId !== 0) {
                  glyphId += idDelta[i];
                }
              }

              this.codeMap[code] = glyphId & 0xFFFF;
            }
          }

      }

      data.pos = saveOffset;
    }

    CmapEntry.encode = function (charmap, encoding) {
      var charMap, code, codeMap, codes, delta, deltas, diff, endCode, endCodes, entrySelector, glyphIDs, i, id, indexes, last, map, nextID, offset, old, rangeOffsets, rangeShift, searchRange, segCount, segCountX2, startCode, startCodes, startGlyph, subtable, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _name, _o, _p, _q;

      subtable = new Data();
      codes = Object.keys(charmap).sort(function (a, b) {
        return a - b;
      });

      switch (encoding) {
        case 'macroman':
          id = 0;

          indexes = function () {
            var _results = [];

            for (i = 0; i < 256; ++i) {
              _results.push(0);
            }

            return _results;
          }();

          map = {
            0: 0
          };
          codeMap = {};

          for (_i = 0, _len = codes.length; _i < _len; _i++) {
            code = codes[_i];

            if (map[_name = charmap[code]] == null) {
              map[_name] = ++id;
            }

            codeMap[code] = {
              old: charmap[code],
              "new": map[charmap[code]]
            };
            indexes[code] = map[charmap[code]];
          }

          subtable.writeUInt16(1);
          subtable.writeUInt16(0);
          subtable.writeUInt32(12);
          subtable.writeUInt16(0);
          subtable.writeUInt16(262);
          subtable.writeUInt16(0);
          subtable.write(indexes);
          return {
            charMap: codeMap,
            subtable: subtable.data,
            maxGlyphID: id + 1
          };

        case 'unicode':
          startCodes = [];
          endCodes = [];
          nextID = 0;
          map = {};
          charMap = {};
          last = diff = null;

          for (_j = 0, _len1 = codes.length; _j < _len1; _j++) {
            code = codes[_j];
            old = charmap[code];

            if (map[old] == null) {
              map[old] = ++nextID;
            }

            charMap[code] = {
              old: old,
              "new": map[old]
            };
            delta = map[old] - code;

            if (last == null || delta !== diff) {
              if (last) {
                endCodes.push(last);
              }

              startCodes.push(code);
              diff = delta;
            }

            last = code;
          }

          if (last) {
            endCodes.push(last);
          }

          endCodes.push(0xFFFF);
          startCodes.push(0xFFFF);
          segCount = startCodes.length;
          segCountX2 = segCount * 2;
          searchRange = 2 * Math.pow(Math.log(segCount) / Math.LN2, 2);
          entrySelector = Math.log(searchRange / 2) / Math.LN2;
          rangeShift = 2 * segCount - searchRange;
          deltas = [];
          rangeOffsets = [];
          glyphIDs = [];

          for (i = _k = 0, _len2 = startCodes.length; _k < _len2; i = ++_k) {
            startCode = startCodes[i];
            endCode = endCodes[i];

            if (startCode === 0xFFFF) {
              deltas.push(0);
              rangeOffsets.push(0);
              break;
            }

            startGlyph = charMap[startCode]["new"];

            if (startCode - startGlyph >= 0x8000) {
              deltas.push(0);
              rangeOffsets.push(2 * (glyphIDs.length + segCount - i));

              for (code = _l = startCode; startCode <= endCode ? _l <= endCode : _l >= endCode; code = startCode <= endCode ? ++_l : --_l) {
                glyphIDs.push(charMap[code]["new"]);
              }
            } else {
              deltas.push(startGlyph - startCode);
              rangeOffsets.push(0);
            }
          }

          subtable.writeUInt16(3);
          subtable.writeUInt16(1);
          subtable.writeUInt32(12);
          subtable.writeUInt16(4);
          subtable.writeUInt16(16 + segCount * 8 + glyphIDs.length * 2);
          subtable.writeUInt16(0);
          subtable.writeUInt16(segCountX2);
          subtable.writeUInt16(searchRange);
          subtable.writeUInt16(entrySelector);
          subtable.writeUInt16(rangeShift);

          for (_m = 0, _len3 = endCodes.length; _m < _len3; _m++) {
            code = endCodes[_m];
            subtable.writeUInt16(code);
          }

          subtable.writeUInt16(0);

          for (_n = 0, _len4 = startCodes.length; _n < _len4; _n++) {
            code = startCodes[_n];
            subtable.writeUInt16(code);
          }

          for (_o = 0, _len5 = deltas.length; _o < _len5; _o++) {
            delta = deltas[_o];
            subtable.writeUInt16(delta);
          }

          for (_p = 0, _len6 = rangeOffsets.length; _p < _len6; _p++) {
            offset = rangeOffsets[_p];
            subtable.writeUInt16(offset);
          }

          for (_q = 0, _len7 = glyphIDs.length; _q < _len7; _q++) {
            id = glyphIDs[_q];
            subtable.writeUInt16(id);
          }

          return {
            charMap: charMap,
            subtable: subtable.data,
            maxGlyphID: nextID + 1
          };
      }
    };

    return CmapEntry;
  }();

  var CmapTable = function (_super) {
    __extends(CmapTable, _super);

    function CmapTable() {
      return CmapTable.__super__.constructor.apply(this, arguments);
    }

    CmapTable.prototype.tag = 'cmap';

    CmapTable.prototype.parse = function (data) {
      var entry, i, tableCount;
      data.pos = this.offset;
      this.version = data.readUInt16();
      tableCount = data.readUInt16();
      this.tables = [];
      this.unicode = null;

      for (i = 0; 0 <= tableCount ? i < tableCount : i > tableCount; i = 0 <= tableCount ? ++i : --i) {
        entry = new CmapEntry(data, this.offset);
        this.tables.push(entry);

        if (entry.isUnicode) {
          if (this.unicode == null) {
            this.unicode = entry;
          }
        }
      }

      return true;
    };
    /*************************************************************************/

    /* function : encode                                                     */

    /* comment : Encode the cmap table corresponding to the input character. */

    /*************************************************************************/


    CmapTable.encode = function (charmap, encoding) {
      var result, table;

      if (encoding == null) {
        encoding = 'macroman';
      }

      result = CmapEntry.encode(charmap, encoding);
      table = new Data();
      table.writeUInt16(0);
      table.writeUInt16(1);
      result.table = table.data.concat(result.subtable);
      return result;
    };

    return CmapTable;
  }(Table);

  var HheaTable = function (_super) {
    __extends(HheaTable, _super);

    function HheaTable() {
      return HheaTable.__super__.constructor.apply(this, arguments);
    }

    HheaTable.prototype.tag = 'hhea';

    HheaTable.prototype.parse = function (data) {
      data.pos = this.offset;
      this.version = data.readInt();
      this.ascender = data.readShort();
      this.decender = data.readShort();
      this.lineGap = data.readShort();
      this.advanceWidthMax = data.readShort();
      this.minLeftSideBearing = data.readShort();
      this.minRightSideBearing = data.readShort();
      this.xMaxExtent = data.readShort();
      this.caretSlopeRise = data.readShort();
      this.caretSlopeRun = data.readShort();
      this.caretOffset = data.readShort();
      data.pos += 4 * 2;
      this.metricDataFormat = data.readShort();
      return this.numberOfMetrics = data.readUInt16();
    };
    /*HheaTable.prototype.encode = function (ids) {
        var i, table, _i, _ref;
        table = new Data;
        table.writeInt(this.version);
        table.writeShort(this.ascender);
        table.writeShort(this.decender);
        table.writeShort(this.lineGap);
        table.writeShort(this.advanceWidthMax);
        table.writeShort(this.minLeftSideBearing);
        table.writeShort(this.minRightSideBearing);
        table.writeShort(this.xMaxExtent);
        table.writeShort(this.caretSlopeRise);
        table.writeShort(this.caretSlopeRun);
        table.writeShort(this.caretOffset);
        for (i = _i = 0, _ref = 4 * 2; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            table.writeByte(0);
        }
        table.writeShort(this.metricDataFormat);
        table.writeUInt16(ids.length);
        return table.data;
    };*/


    return HheaTable;
  }(Table);

  var OS2Table = function (_super) {
    __extends(OS2Table, _super);

    function OS2Table() {
      return OS2Table.__super__.constructor.apply(this, arguments);
    }

    OS2Table.prototype.tag = 'OS/2';

    OS2Table.prototype.parse = function (data) {
      data.pos = this.offset;
      this.version = data.readUInt16();
      this.averageCharWidth = data.readShort();
      this.weightClass = data.readUInt16();
      this.widthClass = data.readUInt16();
      this.type = data.readShort();
      this.ySubscriptXSize = data.readShort();
      this.ySubscriptYSize = data.readShort();
      this.ySubscriptXOffset = data.readShort();
      this.ySubscriptYOffset = data.readShort();
      this.ySuperscriptXSize = data.readShort();
      this.ySuperscriptYSize = data.readShort();
      this.ySuperscriptXOffset = data.readShort();
      this.ySuperscriptYOffset = data.readShort();
      this.yStrikeoutSize = data.readShort();
      this.yStrikeoutPosition = data.readShort();
      this.familyClass = data.readShort();

      this.panose = function () {
        var i, _results;

        _results = [];

        for (i = 0; i < 10; ++i) {
          _results.push(data.readByte());
        }

        return _results;
      }();

      this.charRange = function () {
        var i, _results;

        _results = [];

        for (i = 0; i < 4; ++i) {
          _results.push(data.readInt());
        }

        return _results;
      }();

      this.vendorID = data.readString(4);
      this.selection = data.readShort();
      this.firstCharIndex = data.readShort();
      this.lastCharIndex = data.readShort();

      if (this.version > 0) {
        this.ascent = data.readShort();
        this.descent = data.readShort();
        this.lineGap = data.readShort();
        this.winAscent = data.readShort();
        this.winDescent = data.readShort();

        this.codePageRange = function () {
          var i, _results;

          _results = [];

          for (i = 0; i < 2; i = ++i) {
            _results.push(data.readInt());
          }

          return _results;
        }();

        if (this.version > 1) {
          this.xHeight = data.readShort();
          this.capHeight = data.readShort();
          this.defaultChar = data.readShort();
          this.breakChar = data.readShort();
          return this.maxContext = data.readShort();
        }
      }
    };
    /*OS2Table.prototype.encode = function () {
        return this.raw();
    };*/


    return OS2Table;
  }(Table);

  var PostTable = function (_super) {

    __extends(PostTable, _super);

    function PostTable() {
      return PostTable.__super__.constructor.apply(this, arguments);
    }

    PostTable.prototype.tag = 'post';

    PostTable.prototype.parse = function (data) {
      var length, numberOfGlyphs, _results;

      data.pos = this.offset;
      this.format = data.readInt();
      this.italicAngle = data.readInt();
      this.underlinePosition = data.readShort();
      this.underlineThickness = data.readShort();
      this.isFixedPitch = data.readInt();
      this.minMemType42 = data.readInt();
      this.maxMemType42 = data.readInt();
      this.minMemType1 = data.readInt();
      this.maxMemType1 = data.readInt();

      switch (this.format) {
        case 0x00010000:
          break;

        case 0x00020000:
          numberOfGlyphs = data.readUInt16();
          this.glyphNameIndex = [];
          var i;

          for (i = 0; 0 <= numberOfGlyphs ? i < numberOfGlyphs : i > numberOfGlyphs; i = 0 <= numberOfGlyphs ? ++i : --i) {
            this.glyphNameIndex.push(data.readUInt16());
          }

          this.names = [];
          _results = [];

          while (data.pos < this.offset + this.length) {
            length = data.readByte();

            _results.push(this.names.push(data.readString(length)));
          }

          return _results;

        case 0x00025000:
          numberOfGlyphs = data.readUInt16();
          return this.offsets = data.read(numberOfGlyphs);

        case 0x00030000:
          break;

        case 0x00040000:
          return this.map = function () {
            var _j, _ref, _results1;

            _results1 = [];

            for (i = _j = 0, _ref = this.file.maxp.numGlyphs; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
              _results1.push(data.readUInt32());
            }

            return _results1;
          }.call(this);
      }
    };
    return PostTable;
  }(Table);
  /*********************************************************************************************************/

  /* function : NameEntry                                                                                  */

  /* comment : Store copyright information, platformID, encodingID, and languageID in the NameEntry object.*/

  /*********************************************************************************************************/


  var NameEntry = function () {
    function NameEntry(raw, entry) {
      this.raw = raw;
      this.length = raw.length;
      this.platformID = entry.platformID;
      this.encodingID = entry.encodingID;
      this.languageID = entry.languageID;
    }

    return NameEntry;
  }();

  var NameTable = function (_super) {

    __extends(NameTable, _super);

    function NameTable() {
      return NameTable.__super__.constructor.apply(this, arguments);
    }

    NameTable.prototype.tag = 'name';

    NameTable.prototype.parse = function (data) {
      var count, entries, entry, i, name, stringOffset, strings, text, _j, _len, _name;

      data.pos = this.offset;
      data.readShort(); //format

      count = data.readShort();
      stringOffset = data.readShort();
      entries = [];

      for (i = 0; 0 <= count ? i < count : i > count; i = 0 <= count ? ++i : --i) {
        entries.push({
          platformID: data.readShort(),
          encodingID: data.readShort(),
          languageID: data.readShort(),
          nameID: data.readShort(),
          length: data.readShort(),
          offset: this.offset + stringOffset + data.readShort()
        });
      }

      strings = {};

      for (i = _j = 0, _len = entries.length; _j < _len; i = ++_j) {
        entry = entries[i];
        data.pos = entry.offset;
        text = data.readString(entry.length);
        name = new NameEntry(text, entry);

        if (strings[_name = entry.nameID] == null) {
          strings[_name] = [];
        }

        strings[entry.nameID].push(name);
      }

      this.strings = strings;
      this.copyright = strings[0];
      this.fontFamily = strings[1];
      this.fontSubfamily = strings[2];
      this.uniqueSubfamily = strings[3];
      this.fontName = strings[4];
      this.version = strings[5];

      try {
        this.postscriptName = strings[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
      } catch (e) {
        this.postscriptName = strings[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
      }

      this.trademark = strings[7];
      this.manufacturer = strings[8];
      this.designer = strings[9];
      this.description = strings[10];
      this.vendorUrl = strings[11];
      this.designerUrl = strings[12];
      this.license = strings[13];
      this.licenseUrl = strings[14];
      this.preferredFamily = strings[15];
      this.preferredSubfamily = strings[17];
      this.compatibleFull = strings[18];
      return this.sampleText = strings[19];
    };
    /*NameTable.prototype.encode = function () {
        var id, list, nameID, nameTable, postscriptName, strCount, strTable, string, strings, table, val, _i, _len, _ref;
        strings = {};
        _ref = this.strings;
        for (id in _ref) {
            val = _ref[id];
            strings[id] = val;
        }
        postscriptName = new NameEntry("" + subsetTag + "+" + this.postscriptName, {
            platformID: 1
            , encodingID: 0
            , languageID: 0
        });
        strings[6] = [postscriptName];
        subsetTag = successorOf(subsetTag);
        strCount = 0;
        for (id in strings) {
            list = strings[id];
            if (list != null) {
                strCount += list.length;
            }
        }
        table = new Data;
        strTable = new Data;
        table.writeShort(0);
        table.writeShort(strCount);
        table.writeShort(6 + 12 * strCount);
        for (nameID in strings) {
            list = strings[nameID];
            if (list != null) {
                for (_i = 0, _len = list.length; _i < _len; _i++) {
                    string = list[_i];
                    table.writeShort(string.platformID);
                    table.writeShort(string.encodingID);
                    table.writeShort(string.languageID);
                    table.writeShort(nameID);
                    table.writeShort(string.length);
                    table.writeShort(strTable.pos);
                    strTable.writeString(string.raw);
                }
            }
        }
        return nameTable = {
            postscriptName: postscriptName.raw
            , table: table.data.concat(strTable.data)
        };
    };*/

    return NameTable;
  }(Table);

  var MaxpTable = function (_super) {
    __extends(MaxpTable, _super);

    function MaxpTable() {
      return MaxpTable.__super__.constructor.apply(this, arguments);
    }

    MaxpTable.prototype.tag = 'maxp';

    MaxpTable.prototype.parse = function (data) {
      data.pos = this.offset;
      this.version = data.readInt();
      this.numGlyphs = data.readUInt16();
      this.maxPoints = data.readUInt16();
      this.maxContours = data.readUInt16();
      this.maxCompositePoints = data.readUInt16();
      this.maxComponentContours = data.readUInt16();
      this.maxZones = data.readUInt16();
      this.maxTwilightPoints = data.readUInt16();
      this.maxStorage = data.readUInt16();
      this.maxFunctionDefs = data.readUInt16();
      this.maxInstructionDefs = data.readUInt16();
      this.maxStackElements = data.readUInt16();
      this.maxSizeOfInstructions = data.readUInt16();
      this.maxComponentElements = data.readUInt16();
      return this.maxComponentDepth = data.readUInt16();
    };
    /*MaxpTable.prototype.encode = function (ids) {
        var table;
        table = new Data;
        table.writeInt(this.version);
        table.writeUInt16(ids.length);
        table.writeUInt16(this.maxPoints);
        table.writeUInt16(this.maxContours);
        table.writeUInt16(this.maxCompositePoints);
        table.writeUInt16(this.maxComponentContours);
        table.writeUInt16(this.maxZones);
        table.writeUInt16(this.maxTwilightPoints);
        table.writeUInt16(this.maxStorage);
        table.writeUInt16(this.maxFunctionDefs);
        table.writeUInt16(this.maxInstructionDefs);
        table.writeUInt16(this.maxStackElements);
        table.writeUInt16(this.maxSizeOfInstructions);
        table.writeUInt16(this.maxComponentElements);
        table.writeUInt16(this.maxComponentDepth);
        return table.data;
    };*/


    return MaxpTable;
  }(Table);

  var HmtxTable = function (_super) {
    __extends(HmtxTable, _super);

    function HmtxTable() {
      return HmtxTable.__super__.constructor.apply(this, arguments);
    }

    HmtxTable.prototype.tag = 'hmtx';

    HmtxTable.prototype.parse = function (data) {
      var i, last, lsbCount, m, _j, _ref, _results;

      data.pos = this.offset;
      this.metrics = [];

      for (i = 0, _ref = this.file.hhea.numberOfMetrics; 0 <= _ref ? i < _ref : i > _ref; i = 0 <= _ref ? ++i : --i) {
        this.metrics.push({
          advance: data.readUInt16(),
          lsb: data.readInt16()
        });
      }

      lsbCount = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics;

      this.leftSideBearings = function () {
        var _j, _results;

        _results = [];

        for (i = _j = 0; 0 <= lsbCount ? _j < lsbCount : _j > lsbCount; i = 0 <= lsbCount ? ++_j : --_j) {
          _results.push(data.readInt16());
        }

        return _results;
      }();

      this.widths = function () {
        var _j, _len, _ref1, _results;

        _ref1 = this.metrics;
        _results = [];

        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          m = _ref1[_j];

          _results.push(m.advance);
        }

        return _results;
      }.call(this);

      last = this.widths[this.widths.length - 1];
      _results = [];

      for (i = _j = 0; 0 <= lsbCount ? _j < lsbCount : _j > lsbCount; i = 0 <= lsbCount ? ++_j : --_j) {
        _results.push(this.widths.push(last));
      }

      return _results;
    };
    /***************************************************************/

    /* function : forGlyph                                         */

    /* comment : Returns the advance width and lsb for this glyph. */

    /***************************************************************/


    HmtxTable.prototype.forGlyph = function (id) {
      if (id in this.metrics) {
        return this.metrics[id];
      }

      return {
        advance: this.metrics[this.metrics.length - 1].advance,
        lsb: this.leftSideBearings[id - this.metrics.length]
      };
    };
    /*HmtxTable.prototype.encode = function (mapping) {
        var id, metric, table, _i, _len;
        table = new Data;
        for (_i = 0, _len = mapping.length; _i < _len; _i++) {
            id = mapping[_i];
            metric = this.forGlyph(id);
            table.writeUInt16(metric.advance);
            table.writeUInt16(metric.lsb);
        }
        return table.data;
    };*/


    return HmtxTable;
  }(Table);

  var __slice = [].slice;

  var GlyfTable = function (_super) {
    __extends(GlyfTable, _super);

    function GlyfTable() {
      return GlyfTable.__super__.constructor.apply(this, arguments);
    }

    GlyfTable.prototype.tag = 'glyf';

    GlyfTable.prototype.parse = function () {
      return this.cache = {};
    };

    GlyfTable.prototype.glyphFor = function (id) {
      var data, index, length, loca, numberOfContours, raw, xMax, xMin, yMax, yMin;

      if (id in this.cache) {
        return this.cache[id];
      }

      loca = this.file.loca;
      data = this.file.contents;
      index = loca.indexOf(id);
      length = loca.lengthOf(id);

      if (length === 0) {
        return this.cache[id] = null;
      }

      data.pos = this.offset + index;
      raw = new Data(data.read(length));
      numberOfContours = raw.readShort();
      xMin = raw.readShort();
      yMin = raw.readShort();
      xMax = raw.readShort();
      yMax = raw.readShort();

      if (numberOfContours === -1) {
        this.cache[id] = new CompoundGlyph(raw, xMin, yMin, xMax, yMax);
      } else {
        this.cache[id] = new SimpleGlyph(raw, numberOfContours, xMin, yMin, xMax, yMax);
      }

      return this.cache[id];
    };

    GlyfTable.prototype.encode = function (glyphs, mapping, old2new) {
      var glyph, id, offsets, table, _i, _len;

      table = [];
      offsets = [];

      for (_i = 0, _len = mapping.length; _i < _len; _i++) {
        id = mapping[_i];
        glyph = glyphs[id];
        offsets.push(table.length);

        if (glyph) {
          table = table.concat(glyph.encode(old2new));
        }
      }

      offsets.push(table.length);
      return {
        table: table,
        offsets: offsets
      };
    };

    return GlyfTable;
  }(Table);

  var SimpleGlyph = function () {
    /**************************************************************************/

    /* function : SimpleGlyph                                                 */

    /* comment : Stores raw, xMin, yMin, xMax, and yMax values for this glyph.*/

    /**************************************************************************/
    function SimpleGlyph(raw, numberOfContours, xMin, yMin, xMax, yMax) {
      this.raw = raw;
      this.numberOfContours = numberOfContours;
      this.xMin = xMin;
      this.yMin = yMin;
      this.xMax = xMax;
      this.yMax = yMax;
      this.compound = false;
    }

    SimpleGlyph.prototype.encode = function () {
      return this.raw.data;
    };

    return SimpleGlyph;
  }();

  var CompoundGlyph = function () {
    var ARG_1_AND_2_ARE_WORDS, MORE_COMPONENTS, WE_HAVE_AN_X_AND_Y_SCALE, WE_HAVE_A_SCALE, WE_HAVE_A_TWO_BY_TWO;
    ARG_1_AND_2_ARE_WORDS = 0x0001;
    WE_HAVE_A_SCALE = 0x0008;
    MORE_COMPONENTS = 0x0020;
    WE_HAVE_AN_X_AND_Y_SCALE = 0x0040;
    WE_HAVE_A_TWO_BY_TWO = 0x0080;
    /********************************************************************************************************************/

    /* function : CompoundGlypg generator                                                                               */

    /* comment : It stores raw, xMin, yMin, xMax, yMax, glyph id, and glyph offset for the corresponding compound glyph.*/

    /********************************************************************************************************************/

    function CompoundGlyph(raw, xMin, yMin, xMax, yMax) {
      var data, flags;
      this.raw = raw;
      this.xMin = xMin;
      this.yMin = yMin;
      this.xMax = xMax;
      this.yMax = yMax;
      this.compound = true;
      this.glyphIDs = [];
      this.glyphOffsets = [];
      data = this.raw;

      while (true) {
        flags = data.readShort();
        this.glyphOffsets.push(data.pos);
        this.glyphIDs.push(data.readShort());

        if (!(flags & MORE_COMPONENTS)) {
          break;
        }

        if (flags & ARG_1_AND_2_ARE_WORDS) {
          data.pos += 4;
        } else {
          data.pos += 2;
        }

        if (flags & WE_HAVE_A_TWO_BY_TWO) {
          data.pos += 8;
        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
          data.pos += 4;
        } else if (flags & WE_HAVE_A_SCALE) {
          data.pos += 2;
        }
      }
    }
    /****************************************************************************************************************/

    /* function : CompoundGlypg encode                                                                              */

    /* comment : After creating a table for the characters you typed, you call directory.encode to encode the table.*/

    /****************************************************************************************************************/


    CompoundGlyph.prototype.encode = function () {
      var i, result, _len, _ref;

      result = new Data(__slice.call(this.raw.data));
      _ref = this.glyphIDs;

      for (i = 0, _len = _ref.length; i < _len; ++i) {
        result.pos = this.glyphOffsets[i];
      }

      return result.data;
    };

    return CompoundGlyph;
  }();

  var LocaTable = function (_super) {
    __extends(LocaTable, _super);

    function LocaTable() {
      return LocaTable.__super__.constructor.apply(this, arguments);
    }

    LocaTable.prototype.tag = 'loca';

    LocaTable.prototype.parse = function (data) {
      var format, i;
      data.pos = this.offset;
      format = this.file.head.indexToLocFormat;

      if (format === 0) {
        return this.offsets = function () {
          var _ref, _results;

          _results = [];

          for (i = 0, _ref = this.length; i < _ref; i += 2) {
            _results.push(data.readUInt16() * 2);
          }

          return _results;
        }.call(this);
      } else {
        return this.offsets = function () {
          var _ref, _results;

          _results = [];

          for (i = 0, _ref = this.length; i < _ref; i += 4) {
            _results.push(data.readUInt32());
          }

          return _results;
        }.call(this);
      }
    };

    LocaTable.prototype.indexOf = function (id) {
      return this.offsets[id];
    };

    LocaTable.prototype.lengthOf = function (id) {
      return this.offsets[id + 1] - this.offsets[id];
    };

    LocaTable.prototype.encode = function (offsets, activeGlyphs) {
      var LocaTable = new Uint32Array(this.offsets.length);
      var glyfPtr = 0;
      var listGlyf = 0;

      for (var k = 0; k < LocaTable.length; ++k) {
        LocaTable[k] = glyfPtr;

        if (listGlyf < activeGlyphs.length && activeGlyphs[listGlyf] == k) {
          ++listGlyf;
          LocaTable[k] = glyfPtr;
          var start = this.offsets[k];
          var len = this.offsets[k + 1] - start;

          if (len > 0) {
            glyfPtr += len;
          }
        }
      }

      var newLocaTable = new Array(LocaTable.length * 4);

      for (var j = 0; j < LocaTable.length; ++j) {
        newLocaTable[4 * j + 3] = LocaTable[j] & 0x000000ff;
        newLocaTable[4 * j + 2] = (LocaTable[j] & 0x0000ff00) >> 8;
        newLocaTable[4 * j + 1] = (LocaTable[j] & 0x00ff0000) >> 16;
        newLocaTable[4 * j] = (LocaTable[j] & 0xff000000) >> 24;
      }

      return newLocaTable;
    };

    return LocaTable;
  }(Table);
  /************************************************************************************/

  /* function : invert                                                                */

  /* comment : Change the object's (key: value) to create an object with (value: key).*/

  /************************************************************************************/


  var invert = function invert(object) {
    var key, ret, val;
    ret = {};

    for (key in object) {
      val = object[key];
      ret[val] = key;
    }

    return ret;
  };
  /*var successorOf = function (input) {
      var added, alphabet, carry, i, index, isUpperCase, last, length, next, result;
      alphabet = 'abcdefghijklmnopqrstuvwxyz';
      length = alphabet.length;
      result = input;
      i = input.length;
      while (i >= 0) {
          last = input.charAt(--i);
          if (isNaN(last)) {
              index = alphabet.indexOf(last.toLowerCase());
              if (index === -1) {
                  next = last;
                  carry = true;
              }
              else {
                  next = alphabet.charAt((index + 1) % length);
                  isUpperCase = last === last.toUpperCase();
                  if (isUpperCase) {
                      next = next.toUpperCase();
                  }
                  carry = index + 1 >= length;
                  if (carry && i === 0) {
                      added = isUpperCase ? 'A' : 'a';
                      result = added + next + result.slice(1);
                      break;
                  }
              }
          }
          else {
              next = +last + 1;
              carry = next > 9;
              if (carry) {
                  next = 0;
              }
              if (carry && i === 0) {
                  result = '1' + next + result.slice(1);
                  break;
              }
          }
          result = result.slice(0, i) + next + result.slice(i + 1);
          if (!carry) {
              break;
          }
      }
      return result;
  };*/


  var Subset = function () {
    function Subset(font) {
      this.font = font;
      this.subset = {};
      this.unicodes = {};
      this.next = 33;
    }
    /*Subset.prototype.use = function (character) {
        var i, _i, _ref;
        if (typeof character === 'string') {
            for (i = _i = 0, _ref = character.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
                this.use(character.charCodeAt(i));
            }
            return;
        }
        if (!this.unicodes[character]) {
            this.subset[this.next] = character;
            return this.unicodes[character] = this.next++;
        }
    };*/

    /*Subset.prototype.encodeText = function (text) {
        var char, i, string, _i, _ref;
        string = '';
        for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            char = this.unicodes[text.charCodeAt(i)];
            string += String.fromCharCode(char);
        }
        return string;
    };*/

    /***************************************************************/

    /* function : generateCmap                                     */

    /* comment : Returns the unicode cmap for this font.         */

    /***************************************************************/


    Subset.prototype.generateCmap = function () {
      var mapping, roman, unicode, unicodeCmap, _ref;

      unicodeCmap = this.font.cmap.tables[0].codeMap;
      mapping = {};
      _ref = this.subset;

      for (roman in _ref) {
        unicode = _ref[roman];
        mapping[roman] = unicodeCmap[unicode];
      }

      return mapping;
    };
    /*Subset.prototype.glyphIDs = function () {
        var ret, roman, unicode, unicodeCmap, val, _ref;
        unicodeCmap = this.font.cmap.tables[0].codeMap;
        ret = [0];
        _ref = this.subset;
        for (roman in _ref) {
            unicode = _ref[roman];
            val = unicodeCmap[unicode];
            if ((val != null) && __indexOf.call(ret, val) < 0) {
                ret.push(val);
            }
        }
        return ret.sort();
    };*/

    /******************************************************************/

    /* function : glyphsFor                                           */

    /* comment : Returns simple glyph objects for the input character.*/

    /******************************************************************/


    Subset.prototype.glyphsFor = function (glyphIDs) {
      var additionalIDs, glyph, glyphs, id, _i, _len, _ref;

      glyphs = {};

      for (_i = 0, _len = glyphIDs.length; _i < _len; _i++) {
        id = glyphIDs[_i];
        glyphs[id] = this.font.glyf.glyphFor(id);
      }

      additionalIDs = [];

      for (id in glyphs) {
        glyph = glyphs[id];

        if (glyph != null ? glyph.compound : void 0) {
          additionalIDs.push.apply(additionalIDs, glyph.glyphIDs);
        }
      }

      if (additionalIDs.length > 0) {
        _ref = this.glyphsFor(additionalIDs);

        for (id in _ref) {
          glyph = _ref[id];
          glyphs[id] = glyph;
        }
      }

      return glyphs;
    };
    /***************************************************************/

    /* function : encode                                           */

    /* comment : Encode various tables for the characters you use. */

    /***************************************************************/


    Subset.prototype.encode = function (glyID, indexToLocFormat) {
      var cmap, code, glyf, glyphs, id, ids, loca, new2old, newIDs, nextGlyphID, old2new, oldID, oldIDs, tables, _ref;

      cmap = CmapTable.encode(this.generateCmap(), 'unicode');
      glyphs = this.glyphsFor(glyID);
      old2new = {
        0: 0
      };
      _ref = cmap.charMap;

      for (code in _ref) {
        ids = _ref[code];
        old2new[ids.old] = ids["new"];
      }

      nextGlyphID = cmap.maxGlyphID;

      for (oldID in glyphs) {
        if (!(oldID in old2new)) {
          old2new[oldID] = nextGlyphID++;
        }
      }

      new2old = invert(old2new);
      newIDs = Object.keys(new2old).sort(function (a, b) {
        return a - b;
      });

      oldIDs = function () {
        var _i, _len, _results;

        _results = [];

        for (_i = 0, _len = newIDs.length; _i < _len; _i++) {
          id = newIDs[_i];

          _results.push(new2old[id]);
        }

        return _results;
      }();

      glyf = this.font.glyf.encode(glyphs, oldIDs, old2new);
      loca = this.font.loca.encode(glyf.offsets, oldIDs);
      tables = {
        cmap: this.font.cmap.raw(),
        glyf: glyf.table,
        loca: loca,
        hmtx: this.font.hmtx.raw(),
        hhea: this.font.hhea.raw(),
        maxp: this.font.maxp.raw(),
        post: this.font.post.raw(),
        name: this.font.name.raw(),
        head: this.font.head.encode(indexToLocFormat)
      };

      if (this.font.os2.exists) {
        tables['OS/2'] = this.font.os2.raw();
      }

      return this.font.directory.encode(tables);
    };

    return Subset;
  }();

  jsPDF.API.PDFObject = function () {
    var pad;

    function PDFObject() {}

    pad = function pad(str, length) {
      return (Array(length + 1).join('0') + str).slice(-length);
    };
    /*****************************************************************************/

    /* function : convert                                                        */

    /* comment :Converts pdf tag's / FontBBox and array values in / W to strings */

    /*****************************************************************************/


    PDFObject.convert = function (object) {
      var e, items, key, out, val;

      if (Array.isArray(object)) {
        items = function () {
          var _i, _len, _results;

          _results = [];

          for (_i = 0, _len = object.length; _i < _len; _i++) {
            e = object[_i];

            _results.push(PDFObject.convert(e));
          }

          return _results;
        }().join(' ');

        return '[' + items + ']';
      } else if (typeof object === 'string') {
        return '/' + object;
      } else if (object != null ? object.isString : void 0) {
        return '(' + object + ')';
      } else if (object instanceof Date) {
        return '(D:' + pad(object.getUTCFullYear(), 4) + pad(object.getUTCMonth(), 2) + pad(object.getUTCDate(), 2) + pad(object.getUTCHours(), 2) + pad(object.getUTCMinutes(), 2) + pad(object.getUTCSeconds(), 2) + 'Z)';
      } else if ({}.toString.call(object) === '[object Object]') {
        out = ['<<'];

        for (key in object) {
          val = object[key];
          out.push('/' + key + ' ' + PDFObject.convert(val));
        }

        out.push('>>');
        return out.join('\n');
      } else {
        return '' + object;
      }
    };

    return PDFObject;
  }();
})(jsPDF);

/* global FlateStream */
// Generated by CoffeeScript 1.4.0

/*
# PNG.js
# Copyright (c) 2011 Devon Govett
# MIT LICENSE
# 
# 
*/
(function (global) {
  global.PNG = function () {
    var APNG_BLEND_OP_SOURCE, APNG_DISPOSE_OP_BACKGROUND, APNG_DISPOSE_OP_PREVIOUS, makeImage, scratchCanvas, scratchCtx;
    APNG_DISPOSE_OP_BACKGROUND = 1;
    APNG_DISPOSE_OP_PREVIOUS = 2;
    APNG_BLEND_OP_SOURCE = 0;

    function PNG(data) {
      var chunkSize, colors, palLen, delayDen, delayNum, frame, i, index, key, section, palShort, text, _i, _j, _ref;

      this.data = data;
      this.pos = 8;
      this.palette = [];
      this.imgData = [];
      this.transparency = {};
      this.animation = null;
      this.text = {};
      frame = null;

      while (true) {
        chunkSize = this.readUInt32();

        section = function () {
          var _i, _results;

          _results = [];

          for (i = _i = 0; _i < 4; i = ++_i) {
            _results.push(String.fromCharCode(this.data[this.pos++]));
          }

          return _results;
        }.call(this).join('');

        switch (section) {
          case 'IHDR':
            this.width = this.readUInt32();
            this.height = this.readUInt32();
            this.bits = this.data[this.pos++];
            this.colorType = this.data[this.pos++];
            this.compressionMethod = this.data[this.pos++];
            this.filterMethod = this.data[this.pos++];
            this.interlaceMethod = this.data[this.pos++];
            break;

          case 'acTL':
            this.animation = {
              numFrames: this.readUInt32(),
              numPlays: this.readUInt32() || Infinity,
              frames: []
            };
            break;

          case 'PLTE':
            this.palette = this.read(chunkSize);
            break;

          case 'fcTL':
            if (frame) {
              this.animation.frames.push(frame);
            }

            this.pos += 4;
            frame = {
              width: this.readUInt32(),
              height: this.readUInt32(),
              xOffset: this.readUInt32(),
              yOffset: this.readUInt32()
            };
            delayNum = this.readUInt16();
            delayDen = this.readUInt16() || 100;
            frame.delay = 1000 * delayNum / delayDen;
            frame.disposeOp = this.data[this.pos++];
            frame.blendOp = this.data[this.pos++];
            frame.data = [];
            break;

          case 'IDAT':
          case 'fdAT':
            if (section === 'fdAT') {
              this.pos += 4;
              chunkSize -= 4;
            }

            data = (frame != null ? frame.data : void 0) || this.imgData;

            for (i = _i = 0; 0 <= chunkSize ? _i < chunkSize : _i > chunkSize; i = 0 <= chunkSize ? ++_i : --_i) {
              data.push(this.data[this.pos++]);
            }

            break;

          case 'tRNS':
            this.transparency = {};

            switch (this.colorType) {
              case 3:
                palLen = this.palette.length / 3;
                this.transparency.indexed = this.read(chunkSize);
                if (this.transparency.indexed.length > palLen) { throw new Error('More transparent colors than palette size'); }
                /*
                 * According to the PNG spec trns should be increased to the same size as palette if shorter
                 */
                //palShort = 255 - this.transparency.indexed.length;

                palShort = palLen - this.transparency.indexed.length;

                if (palShort > 0) {
                  for (i = _j = 0; 0 <= palShort ? _j < palShort : _j > palShort; i = 0 <= palShort ? ++_j : --_j) {
                    this.transparency.indexed.push(255);
                  }
                }

                break;

              case 0:
                this.transparency.grayscale = this.read(chunkSize)[0];
                break;

              case 2:
                this.transparency.rgb = this.read(chunkSize);
            }

            break;

          case 'tEXt':
            text = this.read(chunkSize);
            index = text.indexOf(0);
            key = String.fromCharCode.apply(String, text.slice(0, index));
            this.text[key] = String.fromCharCode.apply(String, text.slice(index + 1));
            break;

          case 'IEND':
            if (frame) {
              this.animation.frames.push(frame);
            }

            this.colors = function () {
              switch (this.colorType) {
                case 0:
                case 3:
                case 4:
                  return 1;

                case 2:
                case 6:
                  return 3;
              }
            }.call(this);

            this.hasAlphaChannel = (_ref = this.colorType) === 4 || _ref === 6;
            colors = this.colors + (this.hasAlphaChannel ? 1 : 0);
            this.pixelBitlength = this.bits * colors;

            this.colorSpace = function () {
              switch (this.colors) {
                case 1:
                  return 'DeviceGray';

                case 3:
                  return 'DeviceRGB';
              }
            }.call(this);

            this.imgData = new Uint8Array(this.imgData);
            return;

          default:
            this.pos += chunkSize;
        }

        this.pos += 4;

        if (this.pos > this.data.length) {
          throw new Error("Incomplete or corrupt PNG file");
        }
      }
    }

    PNG.prototype.read = function (bytes) {
      var i, _i, _results;

      _results = [];

      for (i = _i = 0; 0 <= bytes ? _i < bytes : _i > bytes; i = 0 <= bytes ? ++_i : --_i) {
        _results.push(this.data[this.pos++]);
      }

      return _results;
    };

    PNG.prototype.readUInt32 = function () {
      var b1, b2, b3, b4;
      b1 = this.data[this.pos++] << 24;
      b2 = this.data[this.pos++] << 16;
      b3 = this.data[this.pos++] << 8;
      b4 = this.data[this.pos++];
      return b1 | b2 | b3 | b4;
    };

    PNG.prototype.readUInt16 = function () {
      var b1, b2;
      b1 = this.data[this.pos++] << 8;
      b2 = this.data[this.pos++];
      return b1 | b2;
    };

    PNG.prototype.decodePixels = function (data) {
      var pixelBytes = this.pixelBitlength / 8;
      var fullPixels = new Uint8Array(this.width * this.height * pixelBytes);
      var pos = 0;

      var _this = this;

      if (data == null) {
        data = this.imgData;
      }

      if (data.length === 0) {
        return new Uint8Array(0);
      }

      data = new FlateStream(data);
      data = data.getBytes();

      function pass(x0, y0, dx, dy) {
        var abyte, c, col, i, left, length, p, pa, paeth, pb, pc, pixels, row, scanlineLength, upper, upperLeft, _i, _j, _k, _l, _m;

        var w = Math.ceil((_this.width - x0) / dx),
            h = Math.ceil((_this.height - y0) / dy);
        var isFull = _this.width == w && _this.height == h;
        scanlineLength = pixelBytes * w;
        pixels = isFull ? fullPixels : new Uint8Array(scanlineLength * h);
        length = data.length;
        row = 0;
        c = 0;

        while (row < h && pos < length) {
          switch (data[pos++]) {
            case 0:
              for (i = _i = 0; _i < scanlineLength; i = _i += 1) {
                pixels[c++] = data[pos++];
              }

              break;

            case 1:
              for (i = _j = 0; _j < scanlineLength; i = _j += 1) {
                abyte = data[pos++];
                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
                pixels[c++] = (abyte + left) % 256;
              }

              break;

            case 2:
              for (i = _k = 0; _k < scanlineLength; i = _k += 1) {
                abyte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                pixels[c++] = (upper + abyte) % 256;
              }

              break;

            case 3:
              for (i = _l = 0; _l < scanlineLength; i = _l += 1) {
                abyte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];
                upper = row && pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                pixels[c++] = (abyte + Math.floor((left + upper) / 2)) % 256;
              }

              break;

            case 4:
              for (i = _m = 0; _m < scanlineLength; i = _m += 1) {
                abyte = data[pos++];
                col = (i - i % pixelBytes) / pixelBytes;
                left = i < pixelBytes ? 0 : pixels[c - pixelBytes];

                if (row === 0) {
                  upper = upperLeft = 0;
                } else {
                  upper = pixels[(row - 1) * scanlineLength + col * pixelBytes + i % pixelBytes];
                  upperLeft = col && pixels[(row - 1) * scanlineLength + (col - 1) * pixelBytes + i % pixelBytes];
                }

                p = left + upper - upperLeft;
                pa = Math.abs(p - left);
                pb = Math.abs(p - upper);
                pc = Math.abs(p - upperLeft);

                if (pa <= pb && pa <= pc) {
                  paeth = left;
                } else if (pb <= pc) {
                  paeth = upper;
                } else {
                  paeth = upperLeft;
                }

                pixels[c++] = (abyte + paeth) % 256;
              }

              break;

            default:
              throw new Error("Invalid filter algorithm: " + data[pos - 1]);
          }

          if (!isFull) {
            var fullPos = ((y0 + row * dy) * _this.width + x0) * pixelBytes;
            var partPos = row * scanlineLength;

            for (i = 0; i < w; i += 1) {
              for (var j = 0; j < pixelBytes; j += 1) {
                fullPixels[fullPos++] = pixels[partPos++];
              }

              fullPos += (dx - 1) * pixelBytes;
            }
          }

          row++;
        }
      }

      if (_this.interlaceMethod == 1) {
        /*
          1 6 4 6 2 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
          3 6 4 6 3 6 4 6
          7 7 7 7 7 7 7 7
          5 6 5 6 5 6 5 6
          7 7 7 7 7 7 7 7
        */
        pass(0, 0, 8, 8); // 1

        /* NOTE these seem to follow the pattern:
         * pass(x, 0, 2*x, 2*x);
         * pass(0, x,   x, 2*x);
         * with x being 4, 2, 1.
         */

        pass(4, 0, 8, 8); // 2

        pass(0, 4, 4, 8); // 3

        pass(2, 0, 4, 4); // 4

        pass(0, 2, 2, 4); // 5

        pass(1, 0, 2, 2); // 6

        pass(0, 1, 1, 2); // 7
      } else {
        pass(0, 0, 1, 1);
      }

      return fullPixels;
    };

    PNG.prototype.decodePalette = function () {
      var c, i, length, palette, pos, ret, transparency, _i, _ref, _ref1;

      palette = this.palette;
      transparency = this.transparency.indexed || [];
      ret = new Uint8Array((transparency.length || 0) + palette.length);
      pos = 0;
      length = palette.length;
      c = 0;

      for (i = _i = 0, _ref = length; _i < _ref; i = _i += 3) {
        ret[pos++] = palette[i];
        ret[pos++] = palette[i + 1];
        ret[pos++] = palette[i + 2];
        ret[pos++] = (_ref1 = transparency[c++]) != null ? _ref1 : 255;
      }

      return ret;
    };

    PNG.prototype.copyToImageData = function (imageData, pixels) {
      var alpha, colors, data, i, input, j, k, length, palette, v, _ref;

      colors = this.colors;
      palette = null;
      alpha = this.hasAlphaChannel;

      if (this.palette.length) {
        palette = (_ref = this._decodedPalette) != null ? _ref : this._decodedPalette = this.decodePalette();
        colors = 4;
        alpha = true;
      }

      data = imageData.data || imageData;
      length = data.length;
      input = palette || pixels;
      i = j = 0;

      if (colors === 1) {
        while (i < length) {
          k = palette ? pixels[i / 4] * 4 : j;
          v = input[k++];
          data[i++] = v;
          data[i++] = v;
          data[i++] = v;
          data[i++] = alpha ? input[k++] : 255;
          j = k;
        }
      } else {
        while (i < length) {
          k = palette ? pixels[i / 4] * 4 : j;
          data[i++] = input[k++];
          data[i++] = input[k++];
          data[i++] = input[k++];
          data[i++] = alpha ? input[k++] : 255;
          j = k;
        }
      }
    };

    PNG.prototype.decode = function () {
      var ret;
      ret = new Uint8Array(this.width * this.height * 4);
      this.copyToImageData(ret, this.decodePixels());
      return ret;
    };

    var hasBrowserCanvas = function hasBrowserCanvas() {
      if (Object.prototype.toString.call(global) === "[object Window]") {
        try {
          scratchCanvas = global.document.createElement('canvas');
          scratchCtx = scratchCanvas.getContext('2d');
        } catch (e) {
          return false;
        }

        return true;
      }

      return false;
    };

    hasBrowserCanvas();

    makeImage = function makeImage(imageData) {
      if (hasBrowserCanvas() === true) {
        var img;
        scratchCtx.width = imageData.width;
        scratchCtx.height = imageData.height;
        scratchCtx.clearRect(0, 0, imageData.width, imageData.height);
        scratchCtx.putImageData(imageData, 0, 0);
        img = new Image();
        img.src = scratchCanvas.toDataURL();
        return img;
      }

      throw new Error('This method requires a Browser with Canvas-capability.');
    };

    PNG.prototype.decodeFrames = function (ctx) {
      var frame, i, imageData, pixels, _i, _len, _ref, _results;

      if (!this.animation) {
        return;
      }

      _ref = this.animation.frames;
      _results = [];

      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        frame = _ref[i];
        imageData = ctx.createImageData(frame.width, frame.height);
        pixels = this.decodePixels(new Uint8Array(frame.data));
        this.copyToImageData(imageData, pixels);
        frame.imageData = imageData;

        _results.push(frame.image = makeImage(imageData));
      }

      return _results;
    };

    PNG.prototype.renderFrame = function (ctx, number) {
      var frame, frames, prev;
      frames = this.animation.frames;
      frame = frames[number];
      prev = frames[number - 1];

      if (number === 0) {
        ctx.clearRect(0, 0, this.width, this.height);
      }

      if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_BACKGROUND) {
        ctx.clearRect(prev.xOffset, prev.yOffset, prev.width, prev.height);
      } else if ((prev != null ? prev.disposeOp : void 0) === APNG_DISPOSE_OP_PREVIOUS) {
        ctx.putImageData(prev.imageData, prev.xOffset, prev.yOffset);
      }

      if (frame.blendOp === APNG_BLEND_OP_SOURCE) {
        ctx.clearRect(frame.xOffset, frame.yOffset, frame.width, frame.height);
      }

      return ctx.drawImage(frame.image, frame.xOffset, frame.yOffset);
    };

    PNG.prototype.animate = function (ctx) {
      var _doFrame,
          frameNumber,
          frames,
          numFrames,
          numPlays,
          _ref,
          _this = this;

      frameNumber = 0;
      _ref = this.animation, numFrames = _ref.numFrames, frames = _ref.frames, numPlays = _ref.numPlays;
      return (_doFrame = function doFrame() {
        var f, frame;
        f = frameNumber++ % numFrames;
        frame = frames[f];

        _this.renderFrame(ctx, f);

        if (numFrames > 1 && frameNumber / numFrames < numPlays) {
          return _this.animation._timeout = setTimeout(_doFrame, frame.delay);
        }
      })();
    };

    PNG.prototype.stopAnimation = function () {
      var _ref;

      return clearTimeout((_ref = this.animation) != null ? _ref._timeout : void 0);
    };

    PNG.prototype.render = function (canvas) {
      var ctx, data;

      if (canvas._png) {
        canvas._png.stopAnimation();
      }

      canvas._png = this;
      canvas.width = this.width;
      canvas.height = this.height;
      ctx = canvas.getContext("2d");

      if (this.animation) {
        this.decodeFrames(ctx);
        return this.animate(ctx);
      } else {
        data = ctx.createImageData(this.width, this.height);
        this.copyToImageData(data, this.decodePixels());
        return ctx.putImageData(data, 0, 0);
      }
    };

    return PNG;
  }();
})(typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || Function('return typeof this === "object" && this.content')() || Function('return this')()); // `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

/*
 * Extracted from pdf.js
 * https://github.com/andreasgal/pdf.js
 *
 * Copyright (c) 2011 Mozilla Foundation
 *
 * Contributors: Andreas Gal <gal@mozilla.com>
 *               Chris G Jones <cjones@mozilla.com>
 *               Shaon Barman <shaon.barman@gmail.com>
 *               Vivien Nicolas <21@vingtetun.org>
 *               Justin D'Arcangelo <justindarc@gmail.com>
 *               Yury Delendik
 *
 * 
 */
var DecodeStream = function () {
  function constructor() {
    this.pos = 0;
    this.bufferLength = 0;
    this.eof = false;
    this.buffer = null;
  }

  constructor.prototype = {
    ensureBuffer: function decodestream_ensureBuffer(requested) {
      var buffer = this.buffer;
      var current = buffer ? buffer.byteLength : 0;
      if (requested < current) { return buffer; }
      var size = 512;

      while (size < requested) {
        size <<= 1;
      }

      var buffer2 = new Uint8Array(size);

      for (var i = 0; i < current; ++i) {
        buffer2[i] = buffer[i];
      }

      return this.buffer = buffer2;
    },
    getByte: function decodestream_getByte() {
      var pos = this.pos;

      while (this.bufferLength <= pos) {
        if (this.eof) { return null; }
        this.readBlock();
      }

      return this.buffer[this.pos++];
    },
    getBytes: function decodestream_getBytes(length) {
      var pos = this.pos;

      if (length) {
        this.ensureBuffer(pos + length);
        var end = pos + length;

        while (!this.eof && this.bufferLength < end) {
          this.readBlock();
        }

        var bufEnd = this.bufferLength;
        if (end > bufEnd) { end = bufEnd; }
      } else {
        while (!this.eof) {
          this.readBlock();
        }

        var end = this.bufferLength;
      }

      this.pos = end;
      return this.buffer.subarray(pos, end);
    },
    lookChar: function decodestream_lookChar() {
      var pos = this.pos;

      while (this.bufferLength <= pos) {
        if (this.eof) { return null; }
        this.readBlock();
      }

      return String.fromCharCode(this.buffer[this.pos]);
    },
    getChar: function decodestream_getChar() {
      var pos = this.pos;

      while (this.bufferLength <= pos) {
        if (this.eof) { return null; }
        this.readBlock();
      }

      return String.fromCharCode(this.buffer[this.pos++]);
    },
    makeSubStream: function decodestream_makeSubstream(start, length, dict) {
      var end = start + length;

      while (this.bufferLength <= end && !this.eof) {
        this.readBlock();
      }

      return new Stream(this.buffer, start, length, dict);
    },
    skip: function decodestream_skip(n) {
      if (!n) { n = 1; }
      this.pos += n;
    },
    reset: function decodestream_reset() {
      this.pos = 0;
    }
  };
  return constructor;
}();

var globalObject = typeof self !== "undefined" && self || typeof window !== "undefined" && window || typeof global !== "undefined" && global || Function('return typeof this === "object" && this.content')() || Function('return this')();

var FlateStream = globalObject.FlateStream = function () {
  if (typeof Uint32Array === 'undefined') {
    return undefined;
  }

  var codeLenCodeMap = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  var lengthDecode = new Uint32Array([0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a, 0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f, 0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073, 0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102]);
  var distDecode = new Uint32Array([0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d, 0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1, 0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01, 0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001]);
  var fixedLitCodeTab = [new Uint32Array([0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0, 0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0, 0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0, 0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8, 0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8, 0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8, 0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4, 0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4, 0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4, 0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc, 0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec, 0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc, 0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2, 0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2, 0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2, 0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca, 0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea, 0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da, 0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6, 0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6, 0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6, 0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce, 0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee, 0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de, 0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe, 0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1, 0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1, 0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1, 0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1, 0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9, 0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9, 0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9, 0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9, 0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5, 0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5, 0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5, 0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5, 0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd, 0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed, 0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd, 0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd, 0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3, 0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3, 0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3, 0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3, 0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb, 0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb, 0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db, 0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb, 0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7, 0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7, 0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7, 0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7, 0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf, 0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef, 0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df, 0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff]), 9];
  var fixedDistCodeTab = [new Uint32Array([0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c, 0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000, 0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d, 0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000]), 5];

  function error(e) {
    throw new Error(e);
  }

  function constructor(bytes) {
    //var bytes = stream.getBytes();
    var bytesPos = 0;
    var cmf = bytes[bytesPos++];
    var flg = bytes[bytesPos++];
    if (cmf == -1 || flg == -1) { error('Invalid header in flate stream'); }
    if ((cmf & 0x0f) != 0x08) { error('Unknown compression method in flate stream'); }
    if (((cmf << 8) + flg) % 31 != 0) { error('Bad FCHECK in flate stream'); }
    if (flg & 0x20) { error('FDICT bit set in flate stream'); }
    this.bytes = bytes;
    this.bytesPos = bytesPos;
    this.codeSize = 0;
    this.codeBuf = 0;
    DecodeStream.call(this);
  }

  constructor.prototype = Object.create(DecodeStream.prototype);

  constructor.prototype.getBits = function (bits) {
    var codeSize = this.codeSize;
    var codeBuf = this.codeBuf;
    var bytes = this.bytes;
    var bytesPos = this.bytesPos;
    var b;

    while (codeSize < bits) {
      if (typeof (b = bytes[bytesPos++]) == 'undefined') { error('Bad encoding in flate stream'); }
      codeBuf |= b << codeSize;
      codeSize += 8;
    }

    b = codeBuf & (1 << bits) - 1;
    this.codeBuf = codeBuf >> bits;
    this.codeSize = codeSize -= bits;
    this.bytesPos = bytesPos;
    return b;
  };

  constructor.prototype.getCode = function (table) {
    var codes = table[0];
    var maxLen = table[1];
    var codeSize = this.codeSize;
    var codeBuf = this.codeBuf;
    var bytes = this.bytes;
    var bytesPos = this.bytesPos;

    while (codeSize < maxLen) {
      var b;
      if (typeof (b = bytes[bytesPos++]) == 'undefined') { error('Bad encoding in flate stream'); }
      codeBuf |= b << codeSize;
      codeSize += 8;
    }

    var code = codes[codeBuf & (1 << maxLen) - 1];
    var codeLen = code >> 16;
    var codeVal = code & 0xffff;
    if (codeSize == 0 || codeSize < codeLen || codeLen == 0) { error('Bad encoding in flate stream'); }
    this.codeBuf = codeBuf >> codeLen;
    this.codeSize = codeSize - codeLen;
    this.bytesPos = bytesPos;
    return codeVal;
  };

  constructor.prototype.generateHuffmanTable = function (lengths) {
    var n = lengths.length; // find max code length

    var maxLen = 0;

    for (var i = 0; i < n; ++i) {
      if (lengths[i] > maxLen) { maxLen = lengths[i]; }
    } // build the table


    var size = 1 << maxLen;
    var codes = new Uint32Array(size);

    for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {
      for (var val = 0; val < n; ++val) {
        if (lengths[val] == len) {
          // bit-reverse the code
          var code2 = 0;
          var t = code;

          for (var i = 0; i < len; ++i) {
            code2 = code2 << 1 | t & 1;
            t >>= 1;
          } // fill the table entries


          for (var i = code2; i < size; i += skip) {
            codes[i] = len << 16 | val;
          }

          ++code;
        }
      }
    }

    return [codes, maxLen];
  };

  constructor.prototype.readBlock = function () {
    function repeat(stream, array, len, offset, what) {
      var repeat = stream.getBits(len) + offset;

      while (repeat-- > 0) {
        array[i++] = what;
      }
    } // read block header


    var hdr = this.getBits(3);
    if (hdr & 1) { this.eof = true; }
    hdr >>= 1;

    if (hdr == 0) {
      // uncompressed block
      var bytes = this.bytes;
      var bytesPos = this.bytesPos;
      var b;
      if (typeof (b = bytes[bytesPos++]) == 'undefined') { error('Bad block header in flate stream'); }
      var blockLen = b;
      if (typeof (b = bytes[bytesPos++]) == 'undefined') { error('Bad block header in flate stream'); }
      blockLen |= b << 8;
      if (typeof (b = bytes[bytesPos++]) == 'undefined') { error('Bad block header in flate stream'); }
      var check = b;
      if (typeof (b = bytes[bytesPos++]) == 'undefined') { error('Bad block header in flate stream'); }
      check |= b << 8;
      if (check != (~blockLen & 0xffff)) { error('Bad uncompressed block length in flate stream'); }
      this.codeBuf = 0;
      this.codeSize = 0;
      var bufferLength = this.bufferLength;
      var buffer = this.ensureBuffer(bufferLength + blockLen);
      var end = bufferLength + blockLen;
      this.bufferLength = end;

      for (var n = bufferLength; n < end; ++n) {
        if (typeof (b = bytes[bytesPos++]) == 'undefined') {
          this.eof = true;
          break;
        }

        buffer[n] = b;
      }

      this.bytesPos = bytesPos;
      return;
    }

    var litCodeTable;
    var distCodeTable;

    if (hdr == 1) {
      // compressed block, fixed codes
      litCodeTable = fixedLitCodeTab;
      distCodeTable = fixedDistCodeTab;
    } else if (hdr == 2) {
      // compressed block, dynamic codes
      var numLitCodes = this.getBits(5) + 257;
      var numDistCodes = this.getBits(5) + 1;
      var numCodeLenCodes = this.getBits(4) + 4; // build the code lengths code table

      var codeLenCodeLengths = Array(codeLenCodeMap.length);
      var i = 0;

      while (i < numCodeLenCodes) {
        codeLenCodeLengths[codeLenCodeMap[i++]] = this.getBits(3);
      }

      var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths); // build the literal and distance code tables

      var len = 0;
      var i = 0;
      var codes = numLitCodes + numDistCodes;
      var codeLengths = new Array(codes);

      while (i < codes) {
        var code = this.getCode(codeLenCodeTab);

        if (code == 16) {
          repeat(this, codeLengths, 2, 3, len);
        } else if (code == 17) {
          repeat(this, codeLengths, 3, 3, len = 0);
        } else if (code == 18) {
          repeat(this, codeLengths, 7, 11, len = 0);
        } else {
          codeLengths[i++] = len = code;
        }
      }

      litCodeTable = this.generateHuffmanTable(codeLengths.slice(0, numLitCodes));
      distCodeTable = this.generateHuffmanTable(codeLengths.slice(numLitCodes, codes));
    } else {
      error('Unknown block type in flate stream');
    }

    var buffer = this.buffer;
    var limit = buffer ? buffer.length : 0;
    var pos = this.bufferLength;

    while (true) {
      var code1 = this.getCode(litCodeTable);

      if (code1 < 256) {
        if (pos + 1 >= limit) {
          buffer = this.ensureBuffer(pos + 1);
          limit = buffer.length;
        }

        buffer[pos++] = code1;
        continue;
      }

      if (code1 == 256) {
        this.bufferLength = pos;
        return;
      }

      code1 -= 257;
      code1 = lengthDecode[code1];
      var code2 = code1 >> 16;
      if (code2 > 0) { code2 = this.getBits(code2); }
      var len = (code1 & 0xffff) + code2;
      code1 = this.getCode(distCodeTable);
      code1 = distDecode[code1];
      code2 = code1 >> 16;
      if (code2 > 0) { code2 = this.getBits(code2); }
      var dist = (code1 & 0xffff) + code2;

      if (pos + len >= limit) {
        buffer = this.ensureBuffer(pos + len);
        limit = buffer.length;
      }

      for (var k = 0; k < len; ++k, ++pos) {
        buffer[pos] = buffer[pos - dist];
      }
    }
  };

  return constructor;
}();
/*rollup-keeper-start*/


window.tmp = FlateStream;
/*rollup-keeper-end*/

try {
module.exports = jsPDF;
}
catch (e) {}
Opal.loaded(["./jspdf.worker.debug.js"]);
/* Generated by Opal 1.0.0 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var $perform_worker_task$35, $$36, $$37, $$39, $$41, $$42, $$44, self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $gvars = Opal.gvars, $writer = nil;
  if (self.namedworker == null) self.namedworker = nil;
  if (self.worker == null) self.worker = nil;
  if ($gvars.log == null) $gvars.log = nil;

  Opal.add_stubs(['$require', '$[]', '$Native', '$attr_accessor', '$write_worker', '$[]=', '$-', '$post_named_message', '$new', '$strict=', '$push', '$init_conf', '$controller=', '$lambda', '$meta_data', '$join', '$map', '$to_s', '$year', '$now', '$reset_to', '$transform', '$abc_model', '$player_model_abc=', '$checksum=', '$t', '$load_music_model', '$debug', '$layout_harpnotes', '$benchmark', '$load_song', '$active_voices', '$clear', '$set_view_box', '$draw', '$error', '$message', '$backtrace', '$keys', '$get', '$==', '$loglevel', '$validate_conf', '$set_extracts_menu', '$uri=', '$get_placeholder_replacers', '$placeholders=', '$layout', '$inject', '$dig', '$last', '$include?', '$to_i', '$first', '$call', '$worker=', '$post_message', '$on_named_message', '$perform_worker_task', '$loglevel=', '$clear_errors', '$clear_annotations', '$compute_tune_preview', '$get_status', '$phrases=', '$systemstatus=', '$config_from_editor=', '$abc_part_from_editor=', '$compute_harpnotes_preview', '$music_model', '$extracts', '$player_model_abc', '$harpnote_player', '$get_worker_model', '$output', '$song_harpnotes']);
  
  

  // polyfills from https://gist.github.com/jmshal/b14199f7402c8f3a4568733d8bed0f25
  //global.btoa = function btoa(b) {return new Buffer(b).toString('base64');};
  //global.atob = function atob(a) {return new Buffer(a, 'base64').toString('binary');};

  //jsPDF = require ("jspdf")   // adapt in opal-jspdf.rb
  // Ajv = require("ajv")        // adapt in opal-ajv.rb
  //neatJSON = require("./neatjson_js") // adapt in opal-neatjson.rb

  // these requires are required by nodejs/dir, nodejs/file
  // fs = require('fs')
  // glob = require("glob")      // don't know who needs this
   window={};
;
  self.$require("opal");
  self.$require("opal-platform");
  self.$require("ajv.min.js");
  self.$require("vector2d");
  self.$require("opal-ajv");
  self.$require("consolelogger");
  self.$require("harpnotes");
  self.$require("abc_to_harpnotes_factory");
  self.$require("abc2svg_to_harpnotes");
  self.$require("opal-jspdf");
  self.$require("svg_engine");
  self.$require("pdf_engine");
  self.$require("init_conf");
  self.$require("text_pane");
  self.$require("harpnote_player");
  self.$require("confstack2");
  self.$require("opal-abc2svg");
  self.$require("version-prod");
  self.$require("abc2svg-1.js");
  self.$require("opal-webworker");
  self.$require("jspdf.worker.debug.js");
  (function($base, $parent_nesting) {
    var self = $module($base, 'I18n');

    var $nesting = [self].concat($parent_nesting), $I18n_t$1, $I18n_phrases$2, $I18n_phrases$eq$3;

    
    Opal.defs(self, '$t', $I18n_t$1 = function $$t(text) {
      var $a, self = this;
      if (self.phrasesOpal == null) self.phrasesOpal = nil;

      try {
        return ($truthy($a = self.phrasesOpal['$[]'](text)) ? $a : text)
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
          try {
            return text
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
    }, $I18n_t$1.$$arity = 1);
    Opal.defs(self, '$phrases', $I18n_phrases$2 = function $$phrases() {
      var self = this;
      if (self.phrases == null) self.phrases = nil;

      return self.phrases
    }, $I18n_phrases$2.$$arity = 0);
    Opal.defs(self, '$phrases=', $I18n_phrases$eq$3 = function(phrases) {
      var self = this;

      
      self.phrases = phrases;
      return (self.phrasesOpal = self.$Native(phrases));
    }, $I18n_phrases$eq$3.$$arity = 1);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'WorkerLogger');

    var $nesting = [self].concat($parent_nesting), $WorkerLogger_error$4, $WorkerLogger_info$5, $WorkerLogger_warning$6, $WorkerLogger_message$7, $WorkerLogger_debug$8, $WorkerLogger_write_worker$9;

    self.$$prototype.worker = nil;
    
    self.$attr_accessor("worker");
    
    Opal.def(self, '$error', $WorkerLogger_error$4 = function $$error($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'write_worker', ["error"].concat(Opal.to_a(args)));
    }, $WorkerLogger_error$4.$$arity = -1);
    
    Opal.def(self, '$info', $WorkerLogger_info$5 = function $$info($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'write_worker', ["info"].concat(Opal.to_a(args)));
    }, $WorkerLogger_info$5.$$arity = -1);
    
    Opal.def(self, '$warning', $WorkerLogger_warning$6 = function $$warning($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'write_worker', ["warning"].concat(Opal.to_a(args)));
    }, $WorkerLogger_warning$6.$$arity = -1);
    
    Opal.def(self, '$message', $WorkerLogger_message$7 = function $$message($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'write_worker', ["message"].concat(Opal.to_a(args)));
    }, $WorkerLogger_message$7.$$arity = -1);
    
    Opal.def(self, '$debug', $WorkerLogger_debug$8 = function $$debug($a) {
      var $post_args, args, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      return $send(self, 'write_worker', ["debug"].concat(Opal.to_a(args)));
    }, $WorkerLogger_debug$8.$$arity = -1);
    return (Opal.def(self, '$write_worker', $WorkerLogger_write_worker$9 = function $$write_worker(type, $a) {
      var $post_args, args, self = this, the_args = nil, $writer = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      the_args = args;
      
      $writer = [0, "" + "worker: " + (args['$[]'](0))];
      $send(the_args, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self.worker.$post_named_message("log", $hash2(["type", "args"], {"type": type, "args": the_args}));
    }, $WorkerLogger_write_worker$9.$$arity = -2), nil) && 'write_worker';
  })($nesting[0], $$($nesting, 'Logger'), $nesting);
  $gvars.log = $$($nesting, 'WorkerLogger').$new(nil);
  (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'WorkerController');

    var $nesting = [self].concat($parent_nesting), $WorkerController_initialize$10, $WorkerController_get_placeholder_replacers$11, $WorkerController_load_music_model$25, $WorkerController_compute_harpnotes_preview$26, $WorkerController_render_a3$28, $WorkerController_layout_harpnotes$29, $WorkerController_set_extracts_menu$32;

    self.$$prototype.harpnote_player = self.$$prototype.config_from_editor = self.$$prototype.abc_part_from_editor = self.$$prototype.checksum = self.$$prototype.music_model = self.$$prototype.systemstatus = self.$$prototype.song_harpnotes = self.$$prototype.harpnote_preview_printer = nil;
    
    self.$attr_accessor("config_from_editor", "abc_part_from_editor", "systemstatus", "harpnote_player", "abc_model", "extracts", "music_model", "checksum", "song_harpnotes");
    
    Opal.def(self, '$initialize', $WorkerController_initialize$10 = function $$initialize() {
      var self = this, $writer = nil;
      if ($gvars.conf == null) $gvars.conf = nil;

      
      $gvars.conf = $$($nesting, 'Confstack').$new(nil);
      
      $writer = [false];
      $send($gvars.conf, 'strict=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      $gvars.conf.$push($$($nesting, 'InitConf').$init_conf());
      self.harpnote_player = $$$($$$($$($nesting, 'Harpnotes'), 'Music'), 'HarpnotePlayer').$new();
      
      $writer = [self];
      $send(self.harpnote_player, 'controller=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return (self.json_validator = $$$($$($nesting, 'Ajv'), 'JsonValidator').$new());
    }, $WorkerController_initialize$10.$$arity = 0);
    
    Opal.def(self, '$get_placeholder_replacers', $WorkerController_get_placeholder_replacers$11 = function $$get_placeholder_replacers(print_variant_nr) {
      var $$12, $$13, $$14, $$15, $$16, $$17, $$18, $$19, $$20, $$21, $$23, $$24, self = this;

      return $hash2(["composer", "key", "meter", "number", "o_key", "tempo", "title", "extract_title", "extract_filename", "printed_extracts", "watermark", "current_year"], {"composer": $send(self, 'lambda', [], ($$12 = function(){var self = $$12.$$s || this;
        if (self.music_model == null) self.music_model = nil;

      return self.music_model.$meta_data()['$[]']("composer")}, $$12.$$s = self, $$12.$$arity = 0, $$12)), "key": $send(self, 'lambda', [], ($$13 = function(){var self = $$13.$$s || this;
        if (self.music_model == null) self.music_model = nil;

      return self.music_model.$meta_data()['$[]']("key")}, $$13.$$s = self, $$13.$$arity = 0, $$13)), "meter": $send(self, 'lambda', [], ($$14 = function(){var self = $$14.$$s || this;
        if (self.music_model == null) self.music_model = nil;

      return self.music_model.$meta_data()['$[]']("meter").$join(" ")}, $$14.$$s = self, $$14.$$arity = 0, $$14)), "number": $send(self, 'lambda', [], ($$15 = function(){var self = $$15.$$s || this;
        if (self.music_model == null) self.music_model = nil;

      return self.music_model.$meta_data()['$[]']("number")}, $$15.$$s = self, $$15.$$arity = 0, $$15)), "o_key": $send(self, 'lambda', [], ($$16 = function(){var self = $$16.$$s || this;
        if (self.music_model == null) self.music_model = nil;

      return self.music_model.$meta_data()['$[]']("o_key")}, $$16.$$s = self, $$16.$$arity = 0, $$16)), "tempo": $send(self, 'lambda', [], ($$17 = function(){var self = $$17.$$s || this;
        if (self.music_model == null) self.music_model = nil;

      return self.music_model.$meta_data()['$[]']("tempo_display")}, $$17.$$s = self, $$17.$$arity = 0, $$17)), "title": $send(self, 'lambda', [], ($$18 = function(){var self = $$18.$$s || this;
        if (self.music_model == null) self.music_model = nil;

      return self.music_model.$meta_data()['$[]']("title")}, $$18.$$s = self, $$18.$$arity = 0, $$18)), "extract_title": $send(self, 'lambda', [], ($$19 = function(){var self = $$19.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("" + "extract." + (print_variant_nr) + ".title")}, $$19.$$s = self, $$19.$$arity = 0, $$19)), "extract_filename": $send(self, 'lambda', [], ($$20 = function(){var self = $$20.$$s || this;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $gvars.conf['$[]']("" + "extract." + (print_variant_nr) + ".filenamepart")}, $$20.$$s = self, $$20.$$arity = 0, $$20)), "printed_extracts": $send(self, 'lambda', [], ($$21 = function(){var self = $$21.$$s || this, $$22;
        if ($gvars.conf == null) $gvars.conf = nil;

      return $send($gvars.conf['$[]']("produce"), 'map', [], ($$22 = function(k){var self = $$22.$$s || this;
          if ($gvars.conf == null) $gvars.conf = nil;

        
          
          if (k == null) {
            k = nil;
          };
          return $gvars.conf['$[]']("" + "extract." + (k) + ".filenamepart");}, $$22.$$s = self, $$22.$$arity = 1, $$22)).$join(" ")}, $$21.$$s = self, $$21.$$arity = 0, $$21)), "watermark": $send(self, 'lambda', [], ($$23 = function(){var self = $$23.$$s || this, $a;
        if ($gvars.settings == null) $gvars.settings = nil;

      return ($truthy($a = $gvars.settings['$[]']("watermark")) ? $a : "")}, $$23.$$s = self, $$23.$$arity = 0, $$23)), "current_year": $send(self, 'lambda', [], ($$24 = function(){var self = $$24.$$s || this;

      return $$($nesting, 'Time').$now().$year().$to_s()}, $$24.$$s = self, $$24.$$arity = 0, $$24))})
    }, $WorkerController_get_placeholder_replacers$11.$$arity = 1);
    
    Opal.def(self, '$load_music_model', $WorkerController_load_music_model$25 = function $$load_music_model() {
      var $a, $b, self = this, config = nil, harpnote_engine = nil, player_model_abc = nil, $writer = nil;
      if ($gvars.conf == null) $gvars.conf = nil;

      
      config = self.config_from_editor;
      $gvars.conf.$reset_to(1);
      $gvars.conf.$push(config);
      harpnote_engine = $$$($$$($$($nesting, 'Harpnotes'), 'Input'), 'Abc2svgToHarpnotes').$new();
      $b = harpnote_engine.$transform(self.abc_part_from_editor), $a = Opal.to_ary($b), (self.music_model = ($a[0] == null ? nil : $a[0])), (player_model_abc = ($a[1] == null ? nil : $a[1])), $b;
      self.abc_model = harpnote_engine.$abc_model();
      
      $writer = [player_model_abc];
      $send(self.harpnote_player, 'player_model_abc=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [self.checksum];
      $send(self.music_model, 'checksum=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, $WorkerController_load_music_model$25.$$arity = 0);
    
    Opal.def(self, '$compute_harpnotes_preview', $WorkerController_compute_harpnotes_preview$26 = function $$compute_harpnotes_preview() {
      var $$27, self = this, result = nil, e = nil;
      if ($gvars.log == null) $gvars.log = nil;

      
      result = $hash2(["svg", "interactive_elements", "error_alert"], {"svg": $$($nesting, 'I18n').$t("BUG: worker did not finsh"), "interactive_elements": [], "error_alert": true});
      
      try {
        
        self.$load_music_model();
        $gvars.log.$debug("" + "viewid: " + (self.systemstatus['$[]']("view")) + " " + ("./znworker.rb".$force_encoding("US-ASCII")) + " " + (204));
        self.song_harpnotes = self.$layout_harpnotes(self.systemstatus['$[]']("view"), "A3");
        if ($truthy(self.song_harpnotes)) {
          
          $send($gvars.log, 'benchmark', ["loading music to player"], ($$27 = function(){var self = $$27.$$s || this;
            if (self.harpnote_player == null) self.harpnote_player = nil;
            if (self.music_model == null) self.music_model = nil;
            if (self.song_harpnotes == null) self.song_harpnotes = nil;

          return self.harpnote_player.$load_song(self.music_model, self.song_harpnotes.$active_voices())}, $$27.$$s = self, $$27.$$arity = 0, $$27));
          self.harpnote_preview_printer = $$$($$($nesting, 'Harpnotes'), 'SvgEngine').$new(nil, 2200, 1400);
          self.harpnote_preview_printer.$clear();
          self.harpnote_preview_printer.$set_view_box(0, 0, 420, 297);
          result = self.harpnote_preview_printer.$draw(self.song_harpnotes);};
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
          try {
            $gvars.log.$error("" + (e.$message()), nil, nil, e.$backtrace())
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
      return result;
    }, $WorkerController_compute_harpnotes_preview$26.$$arity = 0);
    
    Opal.def(self, '$render_a3', $WorkerController_render_a3$28 = function $$render_a3(index) {
      var self = this, flowconf = nil, $writer = nil, sheet = nil, engine = nil, result = nil;
      if ($gvars.settings == null) $gvars.settings = nil;

      
      
      if (index == null) {
        index = self.systemstatus['$[]']("view");
      };
      flowconf = $gvars.settings['$[]']("flowconf");
      
      $writer = ["flowconf", false];
      $send($gvars.settings, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      sheet = self.$layout_harpnotes(index, "A3");
      engine = $$$($$($nesting, 'Harpnotes'), 'PDFEngine').$new();
      result = engine.$draw(sheet);
      
      $writer = ["flowconf", flowconf];
      $send($gvars.settings, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return result;
    }, $WorkerController_render_a3$28.$$arity = -1);
    
    Opal.def(self, '$layout_harpnotes', $WorkerController_layout_harpnotes$29 = function $$layout_harpnotes(print_variant, page_format) {
      var $$30, $$31, self = this, result = nil, e = nil;
      if ($gvars.conf == null) $gvars.conf = nil;
      if ($gvars.log == null) $gvars.log = nil;

      
      
      if (print_variant == null) {
        print_variant = 0;
      };
      
      if (page_format == null) {
        page_format = "A4";
      };
      $gvars.image_list = (function() { try {
        return $gvars.conf.$get()['$[]']("resources").$keys()
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
          try {
            return nil
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }})();
      
      try {
      try {
        
        $send($gvars.log, 'benchmark', ["validate default conf"], ($$30 = function(){var self = $$30.$$s || this, $a;
          if (self.json_validator == null) self.json_validator = nil;
          if ($gvars.log == null) $gvars.log = nil;
          if ($gvars.settings == null) $gvars.settings = nil;
          if ($gvars.conf == null) $gvars.conf = nil;

        
          self.validation_errors = [];
          if ($truthy(($truthy($a = $gvars.log.$loglevel()['$==']("debug")) ? $a : $gvars.settings['$[]']("validate")['$==']("true")))) {
            return (self.validation_errors = self.json_validator.$validate_conf($gvars.conf))
          } else {
            return nil
          };}, $$30.$$s = self, $$30.$$arity = 0, $$30));
        self.$set_extracts_menu();
        result = nil;
        $send($gvars.log, 'benchmark', ["computing layout"], ($$31 = function(){var self = $$31.$$s || this, layouter = nil, $writer = nil;
          if (self.music_model == null) self.music_model = nil;
          if ($gvars.uri == null) $gvars.uri = nil;

        
          layouter = $$$($$$($$($nesting, 'Harpnotes'), 'Layout'), 'Default').$new();
          
          $writer = [$gvars.uri];
          $send(layouter, 'uri=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [self.$get_placeholder_replacers(print_variant)];
          $send(layouter, 'placeholders=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          return (result = layouter.$layout(self.music_model, nil, print_variant, page_format));}, $$31.$$s = self, $$31.$$arity = 0, $$31));
      } catch ($err) {
        if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
          try {
            $gvars.log.$error("" + (e.$message()), nil, nil, e.$backtrace())
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      }
      } finally {
        nil
      };;
      return result;
    }, $WorkerController_layout_harpnotes$29.$$arity = -1);
    return (Opal.def(self, '$set_extracts_menu', $WorkerController_set_extracts_menu$32 = function $$set_extracts_menu() {
      var $$33, self = this;
      if ($gvars.log == null) $gvars.log = nil;

      return $send($gvars.log, 'benchmark', ["prepare extract menu"], ($$33 = function(){var self = $$33.$$s || this, $$34, printed_extracts = nil;
        if ($gvars.conf == null) $gvars.conf = nil;

      
        printed_extracts = $gvars.conf['$[]']("produce");
        return (self.extracts = $send($gvars.conf.$get("extract"), 'inject', [[]], ($$34 = function(r, entry){var self = $$34.$$s || this, extract_number = nil, print = nil, title = nil;

        
          
          if (r == null) {
            r = nil;
          };
          
          if (entry == null) {
            entry = nil;
          };
          extract_number = entry.$last().$dig("filenamepart");
          print = (function() {if ($truthy(printed_extracts['$include?'](entry.$first().$to_i()))) {
            return "*  "
          } else {
            return " "
          }; return nil; })();
          title = "" + (print) + (extract_number) + " " + (entry.$last()['$[]']("title")) + " ";
          return r.$push([entry.$first(), title]);}, $$34.$$s = self, $$34.$$arity = 2, $$34)));}, $$33.$$s = self, $$33.$$arity = 0, $$33))
    }, $WorkerController_set_extracts_menu$32.$$arity = 0), nil) && 'set_extracts_menu';
  })($nesting[0], null, $nesting);
  
  Opal.def(self, '$perform_worker_task', $perform_worker_task$35 = function $$perform_worker_task(title) {
    var $iter = $perform_worker_task$35.$$p, block = $iter || nil, self = this, e = nil;
    if (self.namedworker == null) self.namedworker = nil;
    if ($gvars.log == null) $gvars.log = nil;

    if ($iter) $perform_worker_task$35.$$p = null;
    
    
    if ($iter) $perform_worker_task$35.$$p = null;;
    
    if (title == null) {
      title = nil;
    };
    try {
      return block.$call()
    } catch ($err) {
      if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
        try {
          
          $gvars.log.$error("" + (title) + ": " + (e.$message()), nil, nil, e.$backtrace());
          return self.namedworker.$post_named_message("rescue_from_worker_error", nil);
        } finally { Opal.pop_exception() }
      } else { throw $err; }
    };
  }, $perform_worker_task$35.$$arity = -1);
  self.worker = $$($nesting, 'Webworker').$new(this);
  self.namedworker = $$($nesting, 'NamedWebworker').$new(this);
  
  $writer = [self.namedworker];
  $send($gvars.log, 'worker=', Opal.to_a($writer));
  $writer[$rb_minus($writer["length"], 1)];;
  self.worker.$post_message("" + "worker started " + ("./znworker.rb".$force_encoding("US-ASCII")));
  $send(self.namedworker, 'on_named_message', ["abort"], ($$36 = function(data){var self = $$36.$$s || this;
    if ($gvars.log == null) $gvars.log = nil;

  
    
    if (data == null) {
      data = nil;
    };
    return $gvars.log.$error("" + "aborting worker: " + (data['$[]']("payload")['$[]']("render_stack").$to_s()));}, $$36.$$s = self, $$36.$$arity = 1, $$36));
  $send(self.namedworker, 'on_named_message', ["set_loglevel"], ($$37 = function(data){var self = $$37.$$s || this, $$38;

  
    
    if (data == null) {
      data = nil;
    };
    return $send(self, 'perform_worker_task', [data['$[]']("cmd")], ($$38 = function(){var self = $$38.$$s || this;
      if ($gvars.log == null) $gvars.log = nil;

    
      $writer = [data['$[]']("payload")];
      $send($gvars.log, 'loglevel=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];}, $$38.$$s = self, $$38.$$arity = 0, $$38));}, $$37.$$s = self, $$37.$$arity = 1, $$37));
  $send(self.namedworker, 'on_named_message', ["compute_tune_preview"], ($$39 = function(data){var self = $$39.$$s || this, $$40;

  
    
    if (data == null) {
      data = nil;
    };
    return $send(self, 'perform_worker_task', [data['$[]']("name")], ($$40 = function(){var self = $$40.$$s || this, payload = nil, svg_and_position = nil;
      if (self.tune_preview_printer == null) self.tune_preview_printer = nil;
      if (self.namedworker == null) self.namedworker = nil;
      if ($gvars.log == null) $gvars.log = nil;

    
      $gvars.log.$clear_errors();
      $gvars.log.$clear_annotations();
      self.tune_preview_printer = $$$($$($nesting, 'ABC2SVG'), 'Abc2Svg').$new(nil);
      payload = data['$[]']("payload");
      svg_and_position = self.tune_preview_printer.$compute_tune_preview(payload['$[]']("abc"), payload['$[]']("checksum"));
      self.namedworker.$post_named_message(data['$[]']("name"), svg_and_position);
      return self.namedworker.$post_named_message("set_logger_status", $gvars.log.$get_status());}, $$40.$$s = self, $$40.$$arity = 0, $$40));}, $$39.$$s = self, $$39.$$arity = 1, $$39));
  $send(self.namedworker, 'on_named_message', ["i18n_set_locale"], ($$41 = function(data){var self = $$41.$$s || this;

  
    
    if (data == null) {
      data = nil;
    };
    
    $writer = [JSON.parse(data['$[]']("payload"))];
    $send($$($nesting, 'I18n'), 'phrases=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    return $$($nesting, 'I18n').$t("locales loaded");}, $$41.$$s = self, $$41.$$arity = 1, $$41));
  $send(self.namedworker, 'on_named_message', ["compute_harpnotes_preview"], ($$42 = function(data){var self = $$42.$$s || this, $$43;

  
    
    if (data == null) {
      data = nil;
    };
    return $send(self, 'perform_worker_task', [data['$[]']("name")], ($$43 = function(){var self = $$43.$$s || this, controller = nil, result = nil, document_title = nil, engine = nil;
      if (self.namedworker == null) self.namedworker = nil;

    
      controller = $$($nesting, 'WorkerController').$new();
      $gvars.settings = data['$[]']("payload")['$[]']("settings");
      $gvars.resources = data['$[]']("payload")['$[]']("resources");
      $gvars.uri = data['$[]']("payload")['$[]']("uri");
      
      $writer = [data['$[]']("payload")['$[]']("checksum")];
      $send(controller, 'checksum=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [data['$[]']("payload")['$[]']("systemstatus")];
      $send(controller, 'systemstatus=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [data['$[]']("payload")['$[]']("config_from_editor")];
      $send(controller, 'config_from_editor=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = [data['$[]']("payload")['$[]']("abc_part_from_editor")];
      $send(controller, 'abc_part_from_editor=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      result = controller.$compute_harpnotes_preview();
      if ($truthy(result['$[]']("error_alert"))) {
        self.namedworker.$post_named_message("error_alert", nil)
      } else {
        
        document_title = (function() { try {
          return controller.$music_model().$meta_data()['$[]']("filename")
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
            try {
              return "error"
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }})();
        self.namedworker.$post_named_message("update_ui", $hash2(["extracts", "document_title"], {"extracts": controller.$extracts(), "document_title": document_title}));
      };
      self.namedworker.$post_named_message("compute_harpnotes_preview", result);
      self.namedworker.$post_named_message("load_abc_model", controller.$abc_model());
      self.namedworker.$post_named_message("load_player_model_abc", JSON.stringify(controller.$harpnote_player().$player_model_abc()));
      self.namedworker.$post_named_message("load_player_from_worker", controller.$harpnote_player().$get_worker_model());
      engine = $$$($$($nesting, 'Harpnotes'), 'PDFEngine').$new();
      result = engine.$draw(controller.$song_harpnotes()).$output("datauristring");
      return self.namedworker.$post_named_message("compute_pdf_preview", result);}, $$43.$$s = self, $$43.$$arity = 0, $$43));}, $$42.$$s = self, $$42.$$arity = 1, $$42));
  return $send(self.namedworker, 'on_named_message', ["get_worker_info"], ($$44 = function(data){var self = $$44.$$s || this, result = nil;
    if (self.namedworker == null) self.namedworker = nil;

  
    
    if (data == null) {
      data = nil;
    };
    result = $hash2(["version"], {"version": $$($nesting, 'VERSION')});
    return self.namedworker.$post_named_message("get_worker_info", result);}, $$44.$$s = self, $$44.$$arity = 1, $$44));
})(Opal);
