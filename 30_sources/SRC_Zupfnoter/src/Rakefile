# Rakefile
require 'opal'
require 'opal-jquery'
require 'erb'
require 'zip'
require 'net/http'
require 'pry'
require 'neatjson.rb'

HTMLTEMPLATE         = "../index_opal.html.erb"
PACKAGE_JSON         = "../package.json"
ZUPFNOTER_JS         = "build.js"
ZNWORKER_JS          = "../public/znworker.js"
ZUPFNOTER_CLI_JS     = "zupfnoter-cli.js"
ZUPFNOTER_CLI_MIN_JS = "zupfnoter-cli.min.js"
OUTFOLDER            = "../deploy_files"
LOCALEPATH           = "../public/locale/"
NINJAEXEC            = File.absolute_path("../../ZSUPP_TOOLS/macOs/ninja")
INDEXFILE            = "index.html"


GITSHA = %x{git log --pretty=format:'%h' -n 1} # http://stackoverflow.com/questions/949314/how-to-retrieve-the-hash-for-the-current-commit-in-git

VENDORFOLDER = "../vendor"
ACE_REPO     = "../../../../200_zupfnoter_external_components/ace"

desc "update public/locale"
task :updateLocales do
  puts "updating locales"
  locales = Dir["#{LOCALEPATH}??-??.json"].map { |f| f.split(LOCALEPATH).last }
  locales.each do |locale|
    w2uilocalefile    = File.open("#{VENDORFOLDER}/w2ui/dist/#{locale}")
    znlocalefile      = File.open("localization/zupfnoter_#{locale}")
    abc2svglocalefile = File.open("localization/abc2svg_#{locale}")

    w2uilocales    = JSON.parse(w2uilocalefile.read)
    znlocales      = JSON.parse(znlocalefile.read)
    abc2svglocales = JSON.parse(abc2svglocalefile.read)

    w2uilocales['phrases'].merge!(znlocales['phrases'])
    w2uilocales['phrases'].merge!(abc2svglocales['phrases'])
    File.open("#{LOCALEPATH}/#{locale}", "w") { |f| f.puts JSON.neat_generate(w2uilocales, {wrap: 180, after_colon: 1}) }
  end
end

desc "Update abc2svg from git clone"
task :updateAbc2svg do
  abc2svgrepo  = "../../../../200_zupfnoter_external_components/abc2svg"
  abc2svg_file = "abc2svg-1.js"
  sources      = [abc2svg_file, "json-1.js", "setmidi-1.js", "play-1.js"]
  # ignore some modules (not working, not relevant for zupfnoter audience)
  # permap does not work in zupfnoter
  # ps-interpreter will not be used by zupfnoter audience
  ignore      = ['wps-1.js', 'perc-1.js', 'strftime-1.js']
  temp_ignore = ['psvg-1.jsx']
  sources     += Dir["#{abc2svgrepo}/modules/*.js"].map { |f| File.basename(f, '.js') + "-1.js" } - temp_ignore - ignore # add failing modules to [] to ignore them

  cd abc2svgrepo do
    sources.each { |f| sh " rm #{f} ; NOMIN=1 #{NINJAEXEC} #{f}" }
  end

  ["de", "en"].each do |lang|
    File.open(%Q{localization/abc2svg_#{lang}-#{lang}.json}, "w") do |f|
      f.puts ("{")
      f.puts File.read(%Q{#{abc2svgrepo}/err-#{lang}.js}).gsub("user.textrans = ", %Q{"phrases":})
      f.puts ("}")
    end
  end

  File.open("#{VENDORFOLDER}/#{abc2svg_file}", "w") do |f|
    f.puts "// compiled for Zupfnoter #{Time.now}"
    [sources].flatten.each do |s|
      puts "copying #{s}"
      f.puts File.read("#{abc2svgrepo}/#{s}")
    end
  end


end

desc "Build Worker"
task :build_worker do
  git_describe

  File.open(ZNWORKER_JS, "w+") do |out|
    Opal.append_path "."
    Opal.append_path "../vendor"
    Opal.use_gem "vector2d"

    compiled_js = Opal::Builder::build("znworker").to_s

    ## this patches the worker according to the discussion in
    compiled_js = compiled_js.gsub(%Q{Opal.loaded(["corelib/runtime"]);}, %Q{var Opal=this.Opal;Opal.loaded(["corelib/runtime"]);})
    out.puts(compiled_js)
  end
end

desc "Build zupfnoter to #{ZUPFNOTER_JS}"
task :build => [:buildConfigDoc, :updateLocales, :build_worker, :build_cli] do
  git_describe
  #env = Sprockets::Environment.new
  Opal.append_path "."
  Opal.append_path "../vendor"
  Opal.use_gem "vector2d"

  #Opal.paths.each { |p| env.append_path(p) }

  File.open(ZUPFNOTER_JS, "w+") do |out|
    #   out << env["application"].to_s
    #   out << Opal::Processor.load_asset_code(env, 'application')
    out.puts(Opal::Builder::build("application").to_s)
  end

  Dir.glob "../public/*.scss" do |f|
    cmd = "sass #{f} > #{File.dirname(f)}/#{File.basename(f, ".scss")}.css"
    puts sh cmd  # todo: improve error messages
  end
end


desc "Rebuuild Ace configuration to #{VENDORFOLDER}/ace"
task :build_ace do
  cd ACE_REPO do
    sh "node Makefile.dryice.js -nc -m full"
    sh "node Makefile.dryice.js full"
  end
  cp_r("#{ACE_REPO}/build/src-min-noconflict/.", "#{VENDORFOLDER}/ace")
end

desc "Build the documentation"
task :doc do
  sh "yard doc . --verbose --backtrace --protected --private"
  sh "yard graph -f doc/diagram.dot -d --verbose --backtrace --full --protected --private"
end

desc "start the development server"
task :server do
  git_describe
  cd "../" do
    sh "bundle exec rackup"
  end
end

desc "start deployment server"
task :servedeploy do
  cd "#{OUTFOLDER}/webserver/" do
    # see http://www.benjaminoakes.com/2013/09/13/ruby-simple-http-server-minimalist-rake/
    sh "ruby -run -e httpd . -p 9292"
  end
end

def git_describe
  v           = File.readlines("version.rb").map { |l| l.strip }
  git_version = %x{git describe}.strip.gsub(/[^\/]+\//, "")
  v[0]        = %Q{VERSION = "#{git_version}"}
  File.open("version-prod.rb", "w") do |f|
    f.puts "## do not edit this file"
    f.puts "# it is crated by Rakefile based on version.rb"
    f.puts ""
    f.puts v.join("\n")
  end
end

desc "Build a distribution for the server"
task :deploy => [:build, :build_worker, :buildUserManual, :build_cli] do


  # prepare all requested folders
  # todo:this is not dry - see buildDesktop
  ["public/icons", "public/demos", "public/locale", "public/soundfont/zupfnoter",
   "vendor/ace", "vendor/ace/snippets", "vendor/w2ui", "vendor/w2ui/dist",
   "vendor/font-awesome/css", "vendor/font-awesome/fonts",
  ].each do |d|
    mkdir_p("#{OUTFOLDER}/webserver/#{d}")
  end

  Dir["../vendor/*.*"].each { |f|
    cp f, "#{OUTFOLDER}/webserver/vendor/#{f}" unless File.directory?(f)
  }

  sh "./node_modules/uglify-js/bin/uglifyjs -c -m -o #{OUTFOLDER}/webserver/public/#{ZUPFNOTER_JS} #{ZUPFNOTER_JS}"
  sh "./node_modules/uglify-js/bin/uglifyjs -c -m -o #{OUTFOLDER}/webserver/public/#{ZNWORKER_JS} #{ZNWORKER_JS}"
  #cp ZUPFNOTER_JS, "#{OUTFOLDER}/webserver/public/#{ZUPFNOTER_JS}"


  Dir['../vendor/font-awesome/css/*.*', '../vendor/font-awesome/fonts/*.*'].each { |f| cp f, "#{OUTFOLDER}/webserver/vendor/#{f.split('vendor/').last}" }

  ['w2ui.min.css', 'w2ui.min.js'].each { |f| cp "../vendor/w2ui/dist/#{f}", "#{OUTFOLDER}/webserver/vendor/w2ui/dist/#{f}" }


  cp("../public/index.css", "#{OUTFOLDER}/webserver/public/index.css")
  cp("../public/icons/favicon.png", "#{OUTFOLDER}/webserver/public/icons/favicon.png")
  cp("../public/icons/underline.gif", "#{OUTFOLDER}/webserver/public/icons/underline.gif")
  Dir["../public/demos/*.abc"].each do |f|
    cp f, "#{OUTFOLDER}/webserver/public/demos/#{File.basename(f)}"
  end

  Dir["../public/locale/*.json"].each do |f|
    cp f, "#{OUTFOLDER}/webserver/public/locale/#{File.basename(f)}"
  end

  Dir["../public/*.pdf"].each do |f|
    cp f, "#{OUTFOLDER}/webserver/public/#{File.basename(f)}"
  end

  Dir["../public/soundfont/zupfnoter/*"].each do |f|
    cp f, "#{OUTFOLDER}/webserver/public/soundfont/zupfnoter/#{File.basename(f)}"
  end

  cp "../vendor/ace/ace.js", "#{OUTFOLDER}/webserver/vendor/ace/ace.js"
  cp "../vendor/ace/mode-abc.js", "#{OUTFOLDER}/webserver/vendor/ace/mode-abc.js"
  cp "../vendor/ace/mode-markdown.js", "#{OUTFOLDER}/webserver/vendor/ace/mode-markdown.js"
  cp "../vendor/ace/theme-abc.js", "#{OUTFOLDER}/webserver/vendor/ace/theme-abc.js"
  cp "../vendor/ace/snippets/text.js", "#{OUTFOLDER}/webserver/vendor/ace/snippets/text.js"
  cp "../vendor/ace/ext-language_tools.js", "#{OUTFOLDER}/webserver/vendor/ace/ext-language_tools.js"
  cp("../vendor/ace/snippets/abc.js", "#{OUTFOLDER}/webserver/vendor/ace/snippets/abc.js")
  cp("../vendor/ace/snippets/markdown.js", "#{OUTFOLDER}/webserver/vendor/ace/snippets/markdown.js")
  # cp("../vendor/abc2svg-1.js", "#{OUTFOLDER}/vendor/abc2svg-1.js")
  Dir['../vendor/ace/ext-*.*'].each { |f| cp f, "#{OUTFOLDER}/webserver/vendor/#{f.split('vendor/').last}" }

  def javascript_include_tag(filename)
    %Q{<script src = "public/#{ZUPFNOTER_JS}?#{GITSHA}" type="application/javascript"></script>}
  end

  def javascript_include_analytics()
    if File.exist?("_analytics.inc.html")
      result = File.open("_analytics.inc.html").read
    else
      result = "<!-- no analytics included -->"
    end
    result
  end

  File.open("#{OUTFOLDER}/webserver/#{INDEXFILE}", "w") do |f|
    a = File.open(HTMLTEMPLATE).read
    f.puts ERB.new(a).result
  end
end


desc "build the cli application"
task :build_cli do #=> [:build] do

  #env = Sprockets::Environment.new
  Opal.append_path "."
  Opal.append_path "../vendor"
  Opal.use_gem "vector2d"

  #
  # you nedd npm install
  # blob
  # encoding
  # browserify
  # nexe
  # jspdf
  # uglify-js
  # ajv

  git_describe

  sh 'npm install'

  File.open(ZUPFNOTER_CLI_JS, "w+") do |out|
    #   out << env["application"].to_s
    #   out << Opal::Processor.load_asset_code(env, 'application')
    polyfill = File.read("polyfill-cil_js.js")
    out.puts(polyfill + Opal::Builder::build("application-cli").to_s)
  end

  # now pack into one bundle see
  # https://stackoverflow.com/questions/14314038/how-do-i-deploy-node-js-applications-as-a-single-executable-file

  cmd = "npx browserify --node --dg false #{ZUPFNOTER_CLI_JS} -o #{ZUPFNOTER_CLI_JS}"
  sh cmd
  sh "./node_modules/uglify-js/bin/uglifyjs -c -m -o #{ZUPFNOTER_CLI_MIN_JS} #{ZUPFNOTER_CLI_JS}"
end

desc "create user manual"
task :buildUserManual => [:build] do

  require "#{File.dirname(__FILE__)}/version-prod.rb"
  File.open("../../UD_Zupfnoter-Handbuch/000_UD-Zupfnoter-Version.md", "w") do |f|
    f.puts (%Q{
Version #{VERSION}

    #{COPYRIGHT}
    })
  end

  cd "../../ZSUPP_Tools" do
    sh "bundle exec rake UD"
    cp "../ZGEN_Documents/UD_Zupfnoter-Handbuch-de_review.pdf", "../SRC_Zupfnoter/public"
  end
end

desc "config doc and help"
task :buildConfigDoc do
  cmd = %Q{docker run --rm  -v #{pwd}:/workdir -w /workdir bwl21/wortsammler -bi localization/help_de-de.md}
  sh cmd
  sh 'ruby conf_doc_source.rb'
  cmd = %Q{docker run --rm  -v #{pwd}/../../:/workdir -w /workdir bwl21/wortsammler -bi UD_Zupfnoter-Handbuch/090_UD_Zupfnoter-Konfiguration.md}

  sh cmd
end

#     cmd = %Q{docker run --rm  -v #{pwd}/..:/workdir -w /workdir/ZSUPP_Tools bwl21/wortsammler -bpm #{manifest}}

desc "compile zupfnoter soundfonts"
task :buildSoundfonts do
  Dir["../public/soundfont/zupfnoter/*.js"].each { |f| rm f }
  sources = Dir["../sf2_sources/*.sf2"].reverse
  i       = 0
  sources.each do |sf|
    outnumber = File.basename(sf).split("_").first
    sfbase64  = Base64.encode64(File.read(sf)).split("\n").join("\\\n")
    File.open("../public/soundfont/zupfnoter/#{outnumber}.js", "w") do |outfile|
      outfile.puts (%Q{//ABC2SVG soundfont prepared for Zupfnoter
//created #{Time.now} from #{sf} by zupfnoter rake
abcsf2[#{outnumber}]='\\
      #{sfbase64}'})
    end
  end
end
