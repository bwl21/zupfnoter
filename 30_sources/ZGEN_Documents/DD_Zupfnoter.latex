\documentclass[twoside,a4paper,12pt,german,]{article}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{amssymb,amsmath}
\usepackage{ifxetex,ifluatex}
\usepackage{fixltx2e} % provides \textsubscript
% use microtype if available
\IfFileExists{microtype.sty}{\usepackage{microtype}}{}
\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
  \usepackage[utf8]{inputenc}
\else % if luatex or xelatex
  \usepackage{fontspec}
  \ifxetex
    \usepackage{xltxtra,xunicode}
  \fi
  \defaultfontfeatures{Mapping=tex-text,Scale=MatchLowercase}
  \newcommand{\euro}{€}
    \setmainfont{Calibri}
    \setsansfont{Calibri}
\fi
\usepackage[a4paper]{geometry}
\usepackage{color}
\usepackage{fancyvrb}
\newcommand{\VerbBar}{|}
\newcommand{\VERB}{\Verb[commandchars=\\\{\}]}
\DefineVerbatimEnvironment{Highlighting}{Verbatim}{commandchars=\\\{\}}
% Add ',fontsize=\small' for more characters per line
\newenvironment{Shaded}{}{}
\newcommand{\AlertTok}[1]{\textcolor[rgb]{1.00,0.00,0.00}{\textbf{#1}}}
\newcommand{\AnnotationTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\AttributeTok}[1]{\textcolor[rgb]{0.49,0.56,0.16}{#1}}
\newcommand{\BaseNTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\BuiltInTok}[1]{#1}
\newcommand{\CharTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\CommentTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textit{#1}}}
\newcommand{\CommentVarTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\ConstantTok}[1]{\textcolor[rgb]{0.53,0.00,0.00}{#1}}
\newcommand{\ControlFlowTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{\textbf{#1}}}
\newcommand{\DataTypeTok}[1]{\textcolor[rgb]{0.56,0.13,0.00}{#1}}
\newcommand{\DecValTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\DocumentationTok}[1]{\textcolor[rgb]{0.73,0.13,0.13}{\textit{#1}}}
\newcommand{\ErrorTok}[1]{\textcolor[rgb]{1.00,0.00,0.00}{\textbf{#1}}}
\newcommand{\ExtensionTok}[1]{#1}
\newcommand{\FloatTok}[1]{\textcolor[rgb]{0.25,0.63,0.44}{#1}}
\newcommand{\FunctionTok}[1]{\textcolor[rgb]{0.02,0.16,0.49}{#1}}
\newcommand{\ImportTok}[1]{#1}
\newcommand{\InformationTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\newcommand{\KeywordTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{\textbf{#1}}}
\newcommand{\NormalTok}[1]{#1}
\newcommand{\OperatorTok}[1]{\textcolor[rgb]{0.40,0.40,0.40}{#1}}
\newcommand{\OtherTok}[1]{\textcolor[rgb]{0.00,0.44,0.13}{#1}}
\newcommand{\PreprocessorTok}[1]{\textcolor[rgb]{0.74,0.48,0.00}{#1}}
\newcommand{\RegionMarkerTok}[1]{#1}
\newcommand{\SpecialCharTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\SpecialStringTok}[1]{\textcolor[rgb]{0.73,0.40,0.53}{#1}}
\newcommand{\StringTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\VariableTok}[1]{\textcolor[rgb]{0.10,0.09,0.49}{#1}}
\newcommand{\VerbatimStringTok}[1]{\textcolor[rgb]{0.25,0.44,0.63}{#1}}
\newcommand{\WarningTok}[1]{\textcolor[rgb]{0.38,0.63,0.69}{\textbf{\textit{#1}}}}
\usepackage{longtable}
\usepackage{float} % provides the H option for float placement
\usepackage{graphicx}
% We will generate all images so they have a width \maxwidth. This means
% that they will get their normal width if they fit onto the page, but
% are scaled down if they would overflow the margins.
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth
\else\Gin@nat@width\fi}
\makeatother
\let\Oldincludegraphics\includegraphics
\makeatletter
\def\maxwidth{\ifdim\Gin@nat@width>\linewidth\linewidth
\else\Gin@nat@width\fi}
\makeatother
\let\Oldincludegraphics\includegraphics
%\renewcommand{\includegraphics}[1]{\Oldincludegraphics[width=\maxwidth]{#1}}
% Determine if the image is too wide for the page.
%
{%
 \catcode`\@=11\relax%
 \gdef\includegraphics{\@ifnextchar[{\Oldincludegraphics}{\Oldincludegraphics[width=\maxwidth]}}%
}%
%

\ifxetex
  \usepackage[setpagesize=false, % page size defined by xetex
              unicode=false, % unicode breaks when used with xetex
              bookmarksdepth=3, %
              xetex]{hyperref}
\else
  \usepackage[unicode=true]{hyperref}
\fi
\hypersetup{breaklinks=true,
            bookmarks=true,
            pdfauthor={},
            pdftitle={},
            colorlinks=true,
            urlcolor=blue,
            linkcolor=magenta,
            pdfborder={0 0 0}}
\urlstyle{same}  % don't use monospace font for urls
\setlength{\parindent}{0pt}
\setlength{\parskip}{6pt plus 2pt minus 1pt}
\setlength{\emergencystretch}{3em}  % prevent overfull lines
\setcounter{secnumdepth}{5}
\ifxetex
  \usepackage{polyglossia}
  \setmainlanguage{}
\else
  \usepackage[german]{babel}
\fi

\author{}
\date{}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Wortsammler specific settings
%
%list environment by reinhard Jahraus
{\catcode`\@=11\relax%
\gdef\itemize{%
  \ifnum \@itemdepth >\thr@@\@toodeep\else
    \advance\@itemdepth\@ne
    \edef\@itemitem{labelitem\romannumeral\the\@itemdepth}%
    \expandafter
    \list
      \csname\@itemitem\endcsname
      {\def\makelabel##1{\hss\llap{##1}}%
       \addtolength{\leftmargin}{-10pt}% 29.37pt
       \addtolength{\rightmargin}{0.0pt}% 0.0pt
       \addtolength{\labelsep}{0pt}% 23.50pt
       \addtolength{\itemsep}{-3.0pt}% 5.0pt
       \addtolength{\parsep}{-1pt}% 5.0pt
       \addtolength{\topsep}{-5pt}% 10.0pt
       \addtolength{\partopsep}{0pt}% 3.0pt
      }%
  \fi}
}%

%
% improve nesting of lists
% %http://stackoverflow.com/questions/1935952/maximum-nesting-level-of-lists-in-latex
%
\usepackage{enumitem}
\setlistdepth{9}
\setlist[itemize,1]{label=$\bullet$}
\setlist[itemize,2]{label=$\bullet$}
\setlist[itemize,3]{label=$\bullet$}
\setlist[itemize,4]{label=$\bullet$}
\setlist[itemize,5]{label=$\bullet$}
\setlist[itemize,6]{label=$\bullet$}
\setlist[itemize,7]{label=$\bullet$}
\setlist[itemize,8]{label=$\bullet$}
\setlist[itemize,9]{label=$\bullet$}
\renewlist{itemize}{itemize}{9}
%
% multicol
%
\usepackage{multicol}
\newcommand{\wsbegintwocol}{\begin{multicols}{2}}
\newcommand{\wsendtwocol}{\end{multicols}}

%
% embed an image in the text
%
% usage: \wsembedimage{file}{r|l}{width}{height}
\usepackage{wrapfig}
\usepackage{needspace}
\newcommand{\wsembedimage}[4]{\needspace{#4}\begin{wrapfigure}{#2}{#3}\centering%
\vspace{-5mm}\includegraphics{#1}\vspace{-1cm}\end{wrapfigure}}
%
% adjust page layout
%
\setlength{\oddsidemargin}{-0.5cm}
\setlength{\evensidemargin}{-0.5cm}
\setlength{\textwidth}{17cm}
\setlength{\topmargin}{-2.5cm}
\setlength{\headheight}{2cm}
\setlength{\headsep}{1cm}
\setlength{\textheight}{25cm}
\setlength{\footskip}{1cm}

% adjust the toc layout
\makeatletter
% \renewcommand*\l@section{\@dottedtocline{2}{1.8em}{4em}}
 \renewcommand*\l@subsection{\@dottedtocline{2}{1.5em}{4em}}
 \renewcommand*\l@subsubsection{\@dottedtocline{2}{5.5em}{4em}}
\makeatother

\usepackage{pdfpages}
\usepackage{bookmark}
\usepackage{fancyhdr}
\pagestyle{fancy}
\chead{\begin{center}\textbf{} \end{center}}
\lhead{\includegraphics{../ZSUPP_Styles/logo.jpg}}
\rhead{\leftmark}
\lfoot{}
\rfoot{\today~}
\renewcommand{\footrulewidth}{0.4pt}
%
\renewcommand{\familydefault}{\sfdefault}
%
% Marginpars shall always be right
\makeatletter
   \def\marginparright{\@mparswitchfalse}
   \def\marginparoutside{\@mparswitchtrue}
\makeatother
\marginparright
%
%
\raggedbottom
%

\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}
\usepackage{makeidx}
\makeindex
%
%
%\renewcommand{Befehl der Gliederungsebene z.B. \chapter}{\@startsection{Name z.B. chapter}{Ebene z.B. 0}{Einrückung z.B. 0pt}{Abstand zum vorigen Text z.B. 3.5ex plus 1ex minus 0pt\relax}{Abstand zum nachfolgenden Text z.B. 2.5ex plus 0.5ex minus 0pt\relax}{Schrift z.B. \normalfont\Large\bfseries}}
%
% \makeatletter%
% \renewcommand{\chapter}{\@startsection{chapter}{0}{0pt}{3.5ex plus 1ex minus 0pt\relax}{2.5ex plus 0.5ex minus 0pt\relax}{\normalfont\Large\bfseries}}%
% \makeatother%
%
%
% Wortsammler extensions end here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}


{
\hypersetup{linkcolor=black}
\setcounter{tocdepth}{1}
\tableofcontents
\newpage
}

\hypertarget{basic-architecture}{%
\section{Basic architecture}\label{basic-architecture}}

Zupfnoter applies the following models

\begin{itemize}
\tightlist
\item
  \textbf{abctext} this is entered by user and maintained in textpane.rb
\item
  \textbf{abcmodel} this is created by abc2svg
\item
  \textbf{musicmodel} this is created by transform. Model elements are
  such as Playable, Note, Rest, Goto etc. This conceptualizes the
  Harpnote Elements.
\item
  \textbf{drawingmodel} this represents the layout independent of the
  target format. Model elements are such asl ``Ellipse, Path,
  (FlowLine)''. This conceptualizes graphical terms.
\item
  \textbf{svg} created from drawingmodel by svgengine
\item
  \textbf{pdf} created from drawingmodel by pdfengine
\item
  \textbf{harpnoteplayer} created from musicmodel
\end{itemize}

\hypertarget{handling-google-analytics}{%
\subsection{Handling google analytics}\label{handling-google-analytics}}

\begin{itemize}
\tightlist
\item
  Analytics ia applied for webserver-installation only, not for
  localhost nor desktop
\item
  this is done by the method \texttt{javascript\_include\_analytics}
  which is defined in the related rake tasks.
\item
  for localhost, the method is not defined, and therefore the template
  does not include the script
\end{itemize}

\hypertarget{handling-drag-and-drop}{%
\subsection{handling drag and drop}\label{handling-drag-and-drop}}

Drag and drop is implemented by opal\_svg. There is a global
drag\_end-Handler installed in controller.rb ()
\texttt{@harpnote\_preview\_printer.on\_annotation\_drag\_end\ do\ \textbar{}info\textbar{}}

Info returns the key and the value of the configuration parameter to be
changed.

We uase the library svg.min.js (https://github.com/svgdotjs/svg.js) to
manipulate the SVG nodes in partiucular we have draggable() from there.

we get the nodes by SVG.get which itself finds them by id an
subsequently adopts them. This allows to produce SVG using string
operations.

\hypertarget{render-flow}{%
\subsection{Render flow}\label{render-flow}}

\begin{figure}
\centering
\includegraphics{../ZGEN_uml/zn_render-and-select.png}
\caption{Render Flor}
\end{figure}

\hypertarget{elements-taken-from-abc2svg-provided-json-model}{%
\subsection{elements taken from abc2svg provided json
model}\label{elements-taken-from-abc2svg-provided-json-model}}

\begin{itemize}
\item
  \texttt{music\_types}, \texttt{music\_type\_ids}

  \begin{itemize}
  \tightlist
  \item
    \texttt{bar}
  \item
    \texttt{note}
  \item
    \texttt{tempo}
  \item
    \texttt{block}, \texttt{chords}, \texttt{clef}, \texttt{format},
    \texttt{grace}, \texttt{key}, \texttt{lyrics}, \texttt{meter}
    \texttt{note}, \texttt{part}, \texttt{remark}, \texttt{rest},
    \texttt{staves},
  \end{itemize}
\item
  \texttt{info}

  \begin{itemize}
  \tightlist
  \item
    \texttt{V}, \texttt{X}, \texttt{T}, \texttt{F}, \texttt{C},
    \texttt{Z} \texttt{S}, \texttt{M}
  \end{itemize}
\item
  \texttt{voices}

  \begin{itemize}
  \item
    \texttt{voice\_properties}

    \begin{itemize}
    \tightlist
    \item
      \texttt{key}, \texttt{okey}
    \end{itemize}
  \item
    \texttt{symbols}
  \item
    \texttt{meter}

    \begin{itemize}
    \tightlist
    \item
      \texttt{a\_meter}

      \begin{itemize}
      \tightlist
      \item
        \texttt{bot}
      \end{itemize}
    \end{itemize}
  \item
    \texttt{wmeasure}

    ``
  \end{itemize}
\item
  Symbol

  \begin{itemize}
  \tightlist
  \item
    \texttt{tempo\_notes}
  \item
    \texttt{tempo}
  \item
    \texttt{time}
  \item
    \texttt{type}
  \item
    \texttt{istart}
  \item
    \texttt{iend}
  \end{itemize}
\end{itemize}

\hypertarget{elements-not-taken-from-abc2svg}{%
\subsection{elements not taken from
abc2svg}\label{elements-not-taken-from-abc2svg}}

\begin{itemize}
\tightlist
\item
  \texttt{info.v.*}
\end{itemize}

\hypertarget{build-environments}{%
\section{build environments}\label{build-environments}}

\hypertarget{rvm-ruby-homebrew-etc}{%
\subsection{rvm ruby homebrew etc}\label{rvm-ruby-homebrew-etc}}

\hypertarget{having-some-trouble-with-sip}{%
\subsubsection{having some trouble with
SIP}\label{having-some-trouble-with-sip}}

\begin{verbatim}
https://digitizor.com/fix-homebrew-permissions-osx-el-capitan/

https://www.computersnyou.com/5307/setup-homebrew-and-rvm-on-mac-osx-10-11-ei-capitan/

http://stackoverflow.com/questions/22459944/ruby-2-1-1-with-rvm-getting-libyaml-errors
\end{verbatim}

\hypertarget{my-setup-on-osx}{%
\subsubsection{my setup on osx}\label{my-setup-on-osx}}

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  install homebrew locally

  https://github.com/Homebrew/brew/blob/master/docs/Installation.md\#installation

  cd \textasciitilde{} git clone https://github.com/Homebrew/brew.git
  export PATH=\({HOME}/brew/bin:\)\{PATH\}
\item
  update \textasciitilde{}/.bashrc

  \hypertarget{add-rvm-to-path-for-scripting.-make-sure-this-is-the-last-path-variable-change.}{%
  \section{Add RVM to PATH for scripting. Make sure this is the last
  PATH variable
  change.}\label{add-rvm-to-path-for-scripting.-make-sure-this-is-the-last-path-variable-change.}}

  export PATH=\({HOME}/brew/bin:\)\{PATH\} export
  PATH=``\(PATH:\)HOME/.rvm/bin''
\item
  install rvm

  https://rvm.io/rvm/install
\end{enumerate}

\hypertarget{project-documentation}{%
\subsection{project documentation}\label{project-documentation}}

\begin{itemize}
\tightlist
\item
  goto \texttt{30\_source/ZSUPP\_Tools}
\item
  \texttt{rake}
\end{itemize}

\hypertarget{maintain-the-application}{%
\subsection{maintain the application}\label{maintain-the-application}}

\begin{itemize}
\tightlist
\item
  goto \texttt{30\_source/SRC\_Zupfnoter/src}
\item
  \texttt{rake}
\end{itemize}

\hypertarget{updating-syntax-highlighting}{%
\subsection{updating syntax
highlighting}\label{updating-syntax-highlighting}}

\begin{itemize}
\item
  goto your clone of the ace reporitory
  (../200\_zupfnoter\_external\_components/ace)
\item
  update the files as described in
  \url{http://ace.c9.io/\#nav=higlighter}
\item
  run \texttt{node\ static.js\ -\/-allow-save} .
\item
  navigate to http://localhost:8888/tool/mode\_creator.html
\item
  perform necessary changes
\item
  perform

  node Makefile.dryice.js -nc -m full
\item
  copy the contents of
  \texttt{200\_zupfnoter\_external\_components/ace/build/src-min-noconflict}
  to \texttt{30\_sources/SRC\_Zupfnoter/vendor/ace}
\end{itemize}

\hypertarget{preparing-a-release}{%
\section{preparing a release}\label{preparing-a-release}}

Zupfnoter uses gitflow
http://nvie.com/posts/a-successful-git-branching-model/

Before preparing a release, everything that should go to this release
shall be committed to the develop branch.

\begin{itemize}
\tightlist
\item
  Gitflow: Start new release Pattern: V\_1.4.0\_RC2
\item
  adjust version.rb
\item
  perform all the builds \texttt{rake\ build} \texttt{rake\ deploy}
\item
  Gitflow: finish the release
\item
  switch back to the development branch
\item
  bump version in src/version.rb, add ``.dev''
\end{itemize}

\hypertarget{building-the-desktop-app}{%
\section{building the desktop app}\label{building-the-desktop-app}}

The desktop app is built based on node-webkit. The major steps to build
it are described in

https://github.com/rogerwang/node-webkit/wiki/How-to-package-and-distribute-your-apps

Approach follows nodebob but uses rake to do this.

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  create the webapp
\item
  create zupfnoter.nw
\item
  create the binaries for windows and osx
\end{enumerate}

\hypertarget{notes-how-to-include-javascript-files}{%
\section{notes how to include Javascript
files}\label{notes-how-to-include-javascript-files}}

Javascript files can be included on following ways:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\item
  using a \texttt{\textless{}script\textgreater{}}
\item
  using sprockets and ruby \texttt{require}

  This only works e.g.~for userinterface.js which global objects which
  are subsequently known in Opal.
\item
  using \texttt{require(xx)} on the JS side. This can be done in
  application.rb, for example
\end{enumerate}

This is used for node modules or js files following common module
appraoch.

\begin{Shaded}
\begin{Highlighting}[]
\CommentTok{#}
\OtherTok{%x\{}
\StringTok{  // see https://stackoverflow.com/questions/30694428/jspdf-server-side-node-js-usage-using-node-jspdf}
\StringTok{  global.window = \{document: \{createElementNS: function()\{return \{\}\} \}\};}
\StringTok{  global.navigator = \{\};}
\StringTok{  global.btoa = function()\{\};}

\StringTok{  jsPDF = require ("jspdf")   // adapt in opal-jspdf.rb}
\StringTok{  Ajv = require("ajv")        // adapt in opal-ajv.rb}
\StringTok{  neatJSON = require("./neatjson_js") // adapt in opal-neatjson.rb}

\StringTok{  // these requires are requred by nodejs/dir, nodejs/file}
\StringTok{  fs = require('fs')}
\StringTok{  glob = require("glob")      // don't know who needs this}
\OtherTok{\}}
\end{Highlighting}
\end{Shaded}

With this appraoch, the resulting js file can be run by node. But it
looks in the search paths of node.

If you want to run it really standalone, then we need to use browserify.

This thing resolves the requrires.

\hypertarget{building-soundfonts}{%
\section{building soundfonts}\label{building-soundfonts}}

Tools:

\begin{itemize}
\tightlist
\item
  polyphone http://polyphone-soundfonts.com/en/
\item
  audiacity
\end{itemize}

The following steps creates the soundfonts

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  download from https://stash.reaper.fm/v/23360/Scc1t2.sf2
\item
  open the file in polyphone
\item
  export instrument piano1 to 0\_GS sound set (16 bit).sf2
\item
  export instrument Steel guitar to 25\_GS sound set (16 bit).sf2
\item
  Open the two files again in polyphone
\item
  go to the instrument and set decay to 8sec in all columns of the
  table, set sustain to 120db
\item
  save the files
\item
  convert to js files as specified by @moinejf in
  https://github.com/moinejf/abc2svg/issues/84\#issuecomment-375979049 .
  I did this using a rake task.
\end{enumerate}

copy the sf2 files to \texttt{30\_sources/SRC\_Zupfnoter/sf2\_sources}.
File shall be nr\_name. \texttt{rake\ buildSoundfonts} converts t the
file to e.g.
\texttt{30\_sources/SRC\_Zupfnoter/public/soundfont/zupfnoter/0.js}

To create a soundfont from our own recording:

\begin{enumerate}
\def\labelenumi{\arabic{enumi}.}
\tightlist
\item
  create wav files
\item
  clean up in audiacity
\item
  in poloyphone follow the instructions in
  http://polyphone-soundfonts.com/en/documentation/tutorials/create-a-soundfont-from-scratch/119
\item
  name the preset to something like 01\_mysound
\item
  export the instrument 01\_mysound to
  \texttt{30\_sources/SRC\_Zupfnoter/sf2\_sources}
\end{enumerate}

\end{document}
